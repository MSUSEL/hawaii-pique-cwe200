{
  "214": [
    {
      "resultIndex": 11,
      "fileName": "DefaultExecHandleBuilder.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "source",
              "startLine": 44,
              "startColumn": 25,
              "endLine": 44,
              "endColumn": 31,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/RegExpNameMapper.java",
              "type": "String",
              "code": "        } else {\n            matcher.reset(source);\n        }\n        String result = source;\n        if (matcher.find()) {\n            result = matcher.replaceFirst(replacement);\n        }"
            },
            {
              "step": 1,
              "variableName": "result",
              "startLine": 48,
              "startColumn": 16,
              "endLine": 48,
              "endColumn": 22,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/RegExpNameMapper.java",
              "type": "String",
              "code": "        if (matcher.find()) {\n            result = matcher.replaceFirst(replacement);\n        }\n        return result;\n    }\n}\n"
            },
            {
              "step": 2,
              "variableName": "transformer.transform(value)",
              "startLine": 37,
              "startColumn": 31,
              "endLine": 37,
              "endColumn": 59,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/ChainingTransformer.java",
              "type": "String",
              "code": "    public T transform(T original) {\n        T value = original;\n        for (Transformer<T, T> transformer : transformers) {\n            value = type.cast(transformer.transform(value));\n        }\n        return value;\n    }"
            },
            {
              "step": 3,
              "variableName": "type.cast(transformer.transform(value))",
              "startLine": 37,
              "startColumn": 21,
              "endLine": 37,
              "endColumn": 60,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/ChainingTransformer.java",
              "type": "String",
              "code": "    public T transform(T original) {\n        T value = original;\n        for (Transformer<T, T> transformer : transformers) {\n            value = type.cast(transformer.transform(value));\n        }\n        return value;\n    }"
            },
            {
              "step": 4,
              "variableName": "value",
              "startLine": 39,
              "startColumn": 16,
              "endLine": 39,
              "endColumn": 21,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/ChainingTransformer.java",
              "type": "String",
              "code": "        for (Transformer<T, T> transformer : transformers) {\n            value = type.cast(transformer.transform(value));\n        }\n        return value;\n    }\n\n    public void add(Transformer<T, T> transformer) {"
            },
            {
              "step": 5,
              "variableName": "describer.transform(this)",
              "startLine": 163,
              "startColumn": 16,
              "endLine": 163,
              "endColumn": 41,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/repositories/DefaultMavenArtifactRepository.java",
              "type": "String",
              "code": "\n    @Override\n    public String getDisplayName() {\n        return describer.transform(this);\n    }\n\n    @Override"
            },
            {
              "step": 6,
              "variableName": "displayName.getDisplayName()",
              "startLine": 53,
              "startColumn": 16,
              "endLine": 53,
              "endColumn": 44,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/DefaultDependencySet.java",
              "type": "String",
              "code": "\n    @Override\n    public String toString() {\n        return displayName.getDisplayName();\n    }\n\n    @Override"
            },
            {
              "step": 7,
              "variableName": "iterator.next().toString()",
              "startLine": 569,
              "startColumn": 27,
              "endLine": 569,
              "endColumn": 53,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/util/internal/CollectionUtils.java",
              "type": "String",
              "code": "        StringBuilder string = new StringBuilder();\n        Iterator<?> iterator = objects.iterator();\n        if (iterator.hasNext()) {\n            string.append(iterator.next().toString());\n            while (iterator.hasNext()) {\n                string.append(separator);\n                string.append(iterator.next().toString());"
            },
            {
              "step": 8,
              "variableName": "string",
              "startLine": 569,
              "startColumn": 13,
              "endLine": 569,
              "endColumn": 19,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/util/internal/CollectionUtils.java",
              "type": "StringBuilder",
              "code": "        StringBuilder string = new StringBuilder();\n        Iterator<?> iterator = objects.iterator();\n        if (iterator.hasNext()) {\n            string.append(iterator.next().toString());\n            while (iterator.hasNext()) {\n                string.append(separator);\n                string.append(iterator.next().toString());"
            },
            {
              "step": 9,
              "variableName": "string",
              "startLine": 575,
              "startColumn": 16,
              "endLine": 575,
              "endColumn": 22,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/util/internal/CollectionUtils.java",
              "type": "StringBuilder",
              "code": "                string.append(iterator.next().toString());\n            }\n        }\n        return string.toString();\n    }\n\n    /**"
            },
            {
              "step": 10,
              "variableName": "string.toString()",
              "startLine": 575,
              "startColumn": 16,
              "endLine": 575,
              "endColumn": 33,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/util/internal/CollectionUtils.java",
              "type": "String",
              "code": "                string.append(iterator.next().toString());\n            }\n        }\n        return string.toString();\n    }\n\n    /**"
            },
            {
              "step": 11,
              "variableName": "CollectionUtils.join(File.pathSeparator, classpath.getAsFiles())",
              "startLine": 157,
              "startColumn": 24,
              "endLine": 157,
              "endColumn": 88,
              "uri": "gradle-8.14.0/platforms/core-runtime/client-services/src/main/java/org/gradle/launcher/daemon/client/DefaultDaemonStarter.java",
              "type": "String",
              "code": "        daemonArgs.addAll(JpmsConfiguration.forDaemonProcesses(majorJavaVersion, daemonRequestContext.getNativeServicesMode().isPotentiallyEnabled()));\n        daemonArgs.addAll(daemonOpts);\n        daemonArgs.add(\"-cp\");\n        daemonArgs.add(CollectionUtils.join(File.pathSeparator, classpath.getAsFiles()));\n\n        if (Boolean.getBoolean(\"org.gradle.daemon.debug\")) {\n            daemonArgs.add(JvmOptions.getDebugArgument(true, true, \"5005\"));"
            },
            {
              "step": 12,
              "variableName": "daemonArgs",
              "startLine": 157,
              "startColumn": 9,
              "endLine": 157,
              "endColumn": 19,
              "uri": "gradle-8.14.0/platforms/core-runtime/client-services/src/main/java/org/gradle/launcher/daemon/client/DefaultDaemonStarter.java",
              "type": "ArrayList [<element>] : String",
              "code": "        daemonArgs.addAll(JpmsConfiguration.forDaemonProcesses(majorJavaVersion, daemonRequestContext.getNativeServicesMode().isPotentiallyEnabled()));\n        daemonArgs.addAll(daemonOpts);\n        daemonArgs.add(\"-cp\");\n        daemonArgs.add(CollectionUtils.join(File.pathSeparator, classpath.getAsFiles()));\n\n        if (Boolean.getBoolean(\"org.gradle.daemon.debug\")) {\n            daemonArgs.add(JvmOptions.getDebugArgument(true, true, \"5005\"));"
            },
            {
              "step": 13,
              "variableName": "daemonArgs",
              "startLine": 206,
              "startColumn": 13,
              "endLine": 206,
              "endColumn": 23,
              "uri": "gradle-8.14.0/platforms/core-runtime/client-services/src/main/java/org/gradle/launcher/daemon/client/DefaultDaemonStarter.java",
              "type": "ArrayList [<element>] : String",
              "code": "        InputStream stdInput = buffer.getInputStream();\n\n        return startProcess(\n            daemonArgs,\n            daemonDir.getVersionedDir(),\n            daemonParameters.getGradleUserHomeDir().getAbsoluteFile(),\n            stdInput"
            },
            {
              "step": 14,
              "variableName": "List<String> args",
              "startLine": 239,
              "startColumn": 44,
              "endLine": 239,
              "endColumn": 61,
              "uri": "gradle-8.14.0/platforms/core-runtime/client-services/src/main/java/org/gradle/launcher/daemon/client/DefaultDaemonStarter.java",
              "type": "ArrayList [<element>] : String",
              "code": "        }\n    }\n\n    private DaemonStartupInfo startProcess(List<String> args, File workingDir, File gradleUserHome, InputStream stdInput) {\n        LOGGER.debug(\"Starting daemon process: workingDir = {}, daemonArgs: {}\", workingDir, args);\n        Timer clock = Time.startTimer();\n        try {"
            },
            {
              "step": 15,
              "variableName": "args",
              "startLine": 250,
              "startColumn": 73,
              "endLine": 250,
              "endColumn": 77,
              "uri": "gradle-8.14.0/platforms/core-runtime/client-services/src/main/java/org/gradle/launcher/daemon/client/DefaultDaemonStarter.java",
              "type": "ArrayList [<element>] : String",
              "code": "            // This factory should be injected but leaves non-daemon threads running when used from the tooling API client\n            RootClientExecHandleBuilderFactory execActionFactory = RootClientExecHandleBuilderFactory.of(gradleUserHome);\n            try {\n                ExecHandle handle = new DaemonExecHandleBuilder().build(args, workingDir, outputConsumer, stdInput, execActionFactory.newExecHandleBuilder());\n\n                handle.start();\n                LOGGER.debug(\"Gradle daemon process is starting. Waiting for the daemon to detach...\");"
            },
            {
              "step": 16,
              "variableName": "List<String> args",
              "startLine": 28,
              "startColumn": 29,
              "endLine": 28,
              "endColumn": 46,
              "uri": "gradle-8.14.0/platforms/core-runtime/client-services/src/main/java/org/gradle/launcher/daemon/DaemonExecHandleBuilder.java",
              "type": "ArrayList [<element>] : String",
              "code": "import java.util.List;\n\npublic class DaemonExecHandleBuilder {\n    public ExecHandle build(List<String> args, File workingDir, DaemonOutputConsumer outputConsumer, InputStream inputStream, ClientExecHandleBuilder builder) {\n        builder.commandLine(args);\n        builder.setWorkingDir(workingDir);\n        builder.setStandardInput(inputStream);"
            },
            {
              "step": 17,
              "variableName": "args",
              "startLine": 29,
              "startColumn": 29,
              "endLine": 29,
              "endColumn": 33,
              "uri": "gradle-8.14.0/platforms/core-runtime/client-services/src/main/java/org/gradle/launcher/daemon/DaemonExecHandleBuilder.java",
              "type": "ArrayList [<element>] : String",
              "code": "\npublic class DaemonExecHandleBuilder {\n    public ExecHandle build(List<String> args, File workingDir, DaemonOutputConsumer outputConsumer, InputStream inputStream, ClientExecHandleBuilder builder) {\n        builder.commandLine(args);\n        builder.setWorkingDir(workingDir);\n        builder.setStandardInput(inputStream);\n        builder.redirectErrorStream();"
            },
            {
              "step": 18,
              "variableName": "Iterable<?> args",
              "startLine": 75,
              "startColumn": 48,
              "endLine": 75,
              "endColumn": 64,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/process/internal/DefaultClientExecHandleBuilder.java",
              "type": "ArrayList [<element>] : String",
              "code": "    }\n\n    @Override\n    public ClientExecHandleBuilder commandLine(Iterable<?> args) {\n        argumentsSpec.commandLine(args);\n        return this;\n    }"
            },
            {
              "step": 19,
              "variableName": "args",
              "startLine": 76,
              "startColumn": 35,
              "endLine": 76,
              "endColumn": 39,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/process/internal/DefaultClientExecHandleBuilder.java",
              "type": "ArrayList [<element>] : String",
              "code": "\n    @Override\n    public ClientExecHandleBuilder commandLine(Iterable<?> args) {\n        argumentsSpec.commandLine(args);\n        return this;\n    }\n"
            },
            {
              "step": 20,
              "variableName": "Iterable<?> args",
              "startLine": 59,
              "startColumn": 45,
              "endLine": 59,
              "endColumn": 61,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/process/internal/ProcessArgumentsSpec.java",
              "type": "ArrayList [<element>] : String",
              "code": "        return this;\n    }\n\n    public ProcessArgumentsSpec commandLine(Iterable<?> args) {\n        List<Object> argsList = Lists.newArrayList(args);\n        hasExecutable.setExecutable(argsList.get(0));\n        setArgs(argsList.subList(1, argsList.size()));"
            },
            {
              "step": 21,
              "variableName": "args",
              "startLine": 60,
              "startColumn": 52,
              "endLine": 60,
              "endColumn": 56,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/process/internal/ProcessArgumentsSpec.java",
              "type": "ArrayList [<element>] : String",
              "code": "    }\n\n    public ProcessArgumentsSpec commandLine(Iterable<?> args) {\n        List<Object> argsList = Lists.newArrayList(args);\n        hasExecutable.setExecutable(argsList.get(0));\n        setArgs(argsList.subList(1, argsList.size()));\n        return this;"
            },
            {
              "step": 22,
              "variableName": "Lists.newArrayList(args)",
              "startLine": 60,
              "startColumn": 33,
              "endLine": 60,
              "endColumn": 57,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/process/internal/ProcessArgumentsSpec.java",
              "type": "ArrayList [<element>] : String",
              "code": "    }\n\n    public ProcessArgumentsSpec commandLine(Iterable<?> args) {\n        List<Object> argsList = Lists.newArrayList(args);\n        hasExecutable.setExecutable(argsList.get(0));\n        setArgs(argsList.subList(1, argsList.size()));\n        return this;"
            },
            {
              "step": 23,
              "variableName": "argsList",
              "startLine": 61,
              "startColumn": 37,
              "endLine": 61,
              "endColumn": 45,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/process/internal/ProcessArgumentsSpec.java",
              "type": "ArrayList [<element>] : String",
              "code": "\n    public ProcessArgumentsSpec commandLine(Iterable<?> args) {\n        List<Object> argsList = Lists.newArrayList(args);\n        hasExecutable.setExecutable(argsList.get(0));\n        setArgs(argsList.subList(1, argsList.size()));\n        return this;\n    }"
            },
            {
              "step": 24,
              "variableName": "argsList.get(0)",
              "startLine": 61,
              "startColumn": 37,
              "endLine": 61,
              "endColumn": 52,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/process/internal/ProcessArgumentsSpec.java",
              "type": "String",
              "code": "\n    public ProcessArgumentsSpec commandLine(Iterable<?> args) {\n        List<Object> argsList = Lists.newArrayList(args);\n        hasExecutable.setExecutable(argsList.get(0));\n        setArgs(argsList.subList(1, argsList.size()));\n        return this;\n    }"
            },
            {
              "step": 25,
              "variableName": "Object executable",
              "startLine": 52,
              "startColumn": 31,
              "endLine": 52,
              "endColumn": 48,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/process/internal/DefaultExecHandleBuilder.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public void setExecutable(Object executable) {\n        delegate.setExecutable(executable);\n    }\n"
            },
            {
              "step": 26,
              "variableName": "executable",
              "startLine": 53,
              "startColumn": 32,
              "endLine": 53,
              "endColumn": 42,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/process/internal/DefaultExecHandleBuilder.java",
              "type": "",
              "code": "\n    @Override\n    public void setExecutable(Object executable) {\n        delegate.setExecutable(executable);\n    }\n\n    @Override"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "source",
              "startLine": 40,
              "startColumn": 39,
              "endLine": 40,
              "endColumn": 45,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/RegExpNameMapper.java",
              "type": "String",
              "code": "    @Override\n    public String transform(String source) {\n        if (matcher == null) {\n            matcher = pattern.matcher(source);\n        } else {\n            matcher.reset(source);\n        }"
            },
            {
              "step": 1,
              "variableName": "result",
              "startLine": 48,
              "startColumn": 16,
              "endLine": 48,
              "endColumn": 22,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/RegExpNameMapper.java",
              "type": "String",
              "code": "        if (matcher.find()) {\n            result = matcher.replaceFirst(replacement);\n        }\n        return result;\n    }\n}\n"
            },
            {
              "step": 2,
              "variableName": "transformer.transform(value)",
              "startLine": 37,
              "startColumn": 31,
              "endLine": 37,
              "endColumn": 59,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/ChainingTransformer.java",
              "type": "String",
              "code": "    public T transform(T original) {\n        T value = original;\n        for (Transformer<T, T> transformer : transformers) {\n            value = type.cast(transformer.transform(value));\n        }\n        return value;\n    }"
            },
            {
              "step": 3,
              "variableName": "type.cast(transformer.transform(value))",
              "startLine": 37,
              "startColumn": 21,
              "endLine": 37,
              "endColumn": 60,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/ChainingTransformer.java",
              "type": "String",
              "code": "    public T transform(T original) {\n        T value = original;\n        for (Transformer<T, T> transformer : transformers) {\n            value = type.cast(transformer.transform(value));\n        }\n        return value;\n    }"
            },
            {
              "step": 4,
              "variableName": "value",
              "startLine": 39,
              "startColumn": 16,
              "endLine": 39,
              "endColumn": 21,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/ChainingTransformer.java",
              "type": "String",
              "code": "        for (Transformer<T, T> transformer : transformers) {\n            value = type.cast(transformer.transform(value));\n        }\n        return value;\n    }\n\n    public void add(Transformer<T, T> transformer) {"
            },
            {
              "step": 5,
              "variableName": "describer.transform(this)",
              "startLine": 163,
              "startColumn": 16,
              "endLine": 163,
              "endColumn": 41,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/repositories/DefaultMavenArtifactRepository.java",
              "type": "String",
              "code": "\n    @Override\n    public String getDisplayName() {\n        return describer.transform(this);\n    }\n\n    @Override"
            },
            {
              "step": 6,
              "variableName": "displayName.getDisplayName()",
              "startLine": 53,
              "startColumn": 16,
              "endLine": 53,
              "endColumn": 44,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/DefaultDependencySet.java",
              "type": "String",
              "code": "\n    @Override\n    public String toString() {\n        return displayName.getDisplayName();\n    }\n\n    @Override"
            },
            {
              "step": 7,
              "variableName": "iterator.next().toString()",
              "startLine": 569,
              "startColumn": 27,
              "endLine": 569,
              "endColumn": 53,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/util/internal/CollectionUtils.java",
              "type": "String",
              "code": "        StringBuilder string = new StringBuilder();\n        Iterator<?> iterator = objects.iterator();\n        if (iterator.hasNext()) {\n            string.append(iterator.next().toString());\n            while (iterator.hasNext()) {\n                string.append(separator);\n                string.append(iterator.next().toString());"
            },
            {
              "step": 8,
              "variableName": "string",
              "startLine": 569,
              "startColumn": 13,
              "endLine": 569,
              "endColumn": 19,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/util/internal/CollectionUtils.java",
              "type": "StringBuilder",
              "code": "        StringBuilder string = new StringBuilder();\n        Iterator<?> iterator = objects.iterator();\n        if (iterator.hasNext()) {\n            string.append(iterator.next().toString());\n            while (iterator.hasNext()) {\n                string.append(separator);\n                string.append(iterator.next().toString());"
            },
            {
              "step": 9,
              "variableName": "string",
              "startLine": 575,
              "startColumn": 16,
              "endLine": 575,
              "endColumn": 22,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/util/internal/CollectionUtils.java",
              "type": "StringBuilder",
              "code": "                string.append(iterator.next().toString());\n            }\n        }\n        return string.toString();\n    }\n\n    /**"
            },
            {
              "step": 10,
              "variableName": "string.toString()",
              "startLine": 575,
              "startColumn": 16,
              "endLine": 575,
              "endColumn": 33,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/util/internal/CollectionUtils.java",
              "type": "String",
              "code": "                string.append(iterator.next().toString());\n            }\n        }\n        return string.toString();\n    }\n\n    /**"
            },
            {
              "step": 11,
              "variableName": "CollectionUtils.join(File.pathSeparator, classpath.getAsFiles())",
              "startLine": 157,
              "startColumn": 24,
              "endLine": 157,
              "endColumn": 88,
              "uri": "gradle-8.14.0/platforms/core-runtime/client-services/src/main/java/org/gradle/launcher/daemon/client/DefaultDaemonStarter.java",
              "type": "String",
              "code": "        daemonArgs.addAll(JpmsConfiguration.forDaemonProcesses(majorJavaVersion, daemonRequestContext.getNativeServicesMode().isPotentiallyEnabled()));\n        daemonArgs.addAll(daemonOpts);\n        daemonArgs.add(\"-cp\");\n        daemonArgs.add(CollectionUtils.join(File.pathSeparator, classpath.getAsFiles()));\n\n        if (Boolean.getBoolean(\"org.gradle.daemon.debug\")) {\n            daemonArgs.add(JvmOptions.getDebugArgument(true, true, \"5005\"));"
            },
            {
              "step": 12,
              "variableName": "daemonArgs",
              "startLine": 157,
              "startColumn": 9,
              "endLine": 157,
              "endColumn": 19,
              "uri": "gradle-8.14.0/platforms/core-runtime/client-services/src/main/java/org/gradle/launcher/daemon/client/DefaultDaemonStarter.java",
              "type": "ArrayList [<element>] : String",
              "code": "        daemonArgs.addAll(JpmsConfiguration.forDaemonProcesses(majorJavaVersion, daemonRequestContext.getNativeServicesMode().isPotentiallyEnabled()));\n        daemonArgs.addAll(daemonOpts);\n        daemonArgs.add(\"-cp\");\n        daemonArgs.add(CollectionUtils.join(File.pathSeparator, classpath.getAsFiles()));\n\n        if (Boolean.getBoolean(\"org.gradle.daemon.debug\")) {\n            daemonArgs.add(JvmOptions.getDebugArgument(true, true, \"5005\"));"
            },
            {
              "step": 13,
              "variableName": "daemonArgs",
              "startLine": 206,
              "startColumn": 13,
              "endLine": 206,
              "endColumn": 23,
              "uri": "gradle-8.14.0/platforms/core-runtime/client-services/src/main/java/org/gradle/launcher/daemon/client/DefaultDaemonStarter.java",
              "type": "ArrayList [<element>] : String",
              "code": "        InputStream stdInput = buffer.getInputStream();\n\n        return startProcess(\n            daemonArgs,\n            daemonDir.getVersionedDir(),\n            daemonParameters.getGradleUserHomeDir().getAbsoluteFile(),\n            stdInput"
            },
            {
              "step": 14,
              "variableName": "List<String> args",
              "startLine": 239,
              "startColumn": 44,
              "endLine": 239,
              "endColumn": 61,
              "uri": "gradle-8.14.0/platforms/core-runtime/client-services/src/main/java/org/gradle/launcher/daemon/client/DefaultDaemonStarter.java",
              "type": "ArrayList [<element>] : String",
              "code": "        }\n    }\n\n    private DaemonStartupInfo startProcess(List<String> args, File workingDir, File gradleUserHome, InputStream stdInput) {\n        LOGGER.debug(\"Starting daemon process: workingDir = {}, daemonArgs: {}\", workingDir, args);\n        Timer clock = Time.startTimer();\n        try {"
            },
            {
              "step": 15,
              "variableName": "args",
              "startLine": 250,
              "startColumn": 73,
              "endLine": 250,
              "endColumn": 77,
              "uri": "gradle-8.14.0/platforms/core-runtime/client-services/src/main/java/org/gradle/launcher/daemon/client/DefaultDaemonStarter.java",
              "type": "ArrayList [<element>] : String",
              "code": "            // This factory should be injected but leaves non-daemon threads running when used from the tooling API client\n            RootClientExecHandleBuilderFactory execActionFactory = RootClientExecHandleBuilderFactory.of(gradleUserHome);\n            try {\n                ExecHandle handle = new DaemonExecHandleBuilder().build(args, workingDir, outputConsumer, stdInput, execActionFactory.newExecHandleBuilder());\n\n                handle.start();\n                LOGGER.debug(\"Gradle daemon process is starting. Waiting for the daemon to detach...\");"
            },
            {
              "step": 16,
              "variableName": "List<String> args",
              "startLine": 28,
              "startColumn": 29,
              "endLine": 28,
              "endColumn": 46,
              "uri": "gradle-8.14.0/platforms/core-runtime/client-services/src/main/java/org/gradle/launcher/daemon/DaemonExecHandleBuilder.java",
              "type": "ArrayList [<element>] : String",
              "code": "import java.util.List;\n\npublic class DaemonExecHandleBuilder {\n    public ExecHandle build(List<String> args, File workingDir, DaemonOutputConsumer outputConsumer, InputStream inputStream, ClientExecHandleBuilder builder) {\n        builder.commandLine(args);\n        builder.setWorkingDir(workingDir);\n        builder.setStandardInput(inputStream);"
            },
            {
              "step": 17,
              "variableName": "args",
              "startLine": 29,
              "startColumn": 29,
              "endLine": 29,
              "endColumn": 33,
              "uri": "gradle-8.14.0/platforms/core-runtime/client-services/src/main/java/org/gradle/launcher/daemon/DaemonExecHandleBuilder.java",
              "type": "ArrayList [<element>] : String",
              "code": "\npublic class DaemonExecHandleBuilder {\n    public ExecHandle build(List<String> args, File workingDir, DaemonOutputConsumer outputConsumer, InputStream inputStream, ClientExecHandleBuilder builder) {\n        builder.commandLine(args);\n        builder.setWorkingDir(workingDir);\n        builder.setStandardInput(inputStream);\n        builder.redirectErrorStream();"
            },
            {
              "step": 18,
              "variableName": "Iterable<?> args",
              "startLine": 75,
              "startColumn": 48,
              "endLine": 75,
              "endColumn": 64,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/process/internal/DefaultClientExecHandleBuilder.java",
              "type": "ArrayList [<element>] : String",
              "code": "    }\n\n    @Override\n    public ClientExecHandleBuilder commandLine(Iterable<?> args) {\n        argumentsSpec.commandLine(args);\n        return this;\n    }"
            },
            {
              "step": 19,
              "variableName": "args",
              "startLine": 76,
              "startColumn": 35,
              "endLine": 76,
              "endColumn": 39,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/process/internal/DefaultClientExecHandleBuilder.java",
              "type": "ArrayList [<element>] : String",
              "code": "\n    @Override\n    public ClientExecHandleBuilder commandLine(Iterable<?> args) {\n        argumentsSpec.commandLine(args);\n        return this;\n    }\n"
            },
            {
              "step": 20,
              "variableName": "Iterable<?> args",
              "startLine": 59,
              "startColumn": 45,
              "endLine": 59,
              "endColumn": 61,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/process/internal/ProcessArgumentsSpec.java",
              "type": "ArrayList [<element>] : String",
              "code": "        return this;\n    }\n\n    public ProcessArgumentsSpec commandLine(Iterable<?> args) {\n        List<Object> argsList = Lists.newArrayList(args);\n        hasExecutable.setExecutable(argsList.get(0));\n        setArgs(argsList.subList(1, argsList.size()));"
            },
            {
              "step": 21,
              "variableName": "args",
              "startLine": 60,
              "startColumn": 52,
              "endLine": 60,
              "endColumn": 56,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/process/internal/ProcessArgumentsSpec.java",
              "type": "ArrayList [<element>] : String",
              "code": "    }\n\n    public ProcessArgumentsSpec commandLine(Iterable<?> args) {\n        List<Object> argsList = Lists.newArrayList(args);\n        hasExecutable.setExecutable(argsList.get(0));\n        setArgs(argsList.subList(1, argsList.size()));\n        return this;"
            },
            {
              "step": 22,
              "variableName": "Lists.newArrayList(args)",
              "startLine": 60,
              "startColumn": 33,
              "endLine": 60,
              "endColumn": 57,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/process/internal/ProcessArgumentsSpec.java",
              "type": "ArrayList [<element>] : String",
              "code": "    }\n\n    public ProcessArgumentsSpec commandLine(Iterable<?> args) {\n        List<Object> argsList = Lists.newArrayList(args);\n        hasExecutable.setExecutable(argsList.get(0));\n        setArgs(argsList.subList(1, argsList.size()));\n        return this;"
            },
            {
              "step": 23,
              "variableName": "argsList",
              "startLine": 61,
              "startColumn": 37,
              "endLine": 61,
              "endColumn": 45,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/process/internal/ProcessArgumentsSpec.java",
              "type": "ArrayList [<element>] : String",
              "code": "\n    public ProcessArgumentsSpec commandLine(Iterable<?> args) {\n        List<Object> argsList = Lists.newArrayList(args);\n        hasExecutable.setExecutable(argsList.get(0));\n        setArgs(argsList.subList(1, argsList.size()));\n        return this;\n    }"
            },
            {
              "step": 24,
              "variableName": "argsList.get(0)",
              "startLine": 61,
              "startColumn": 37,
              "endLine": 61,
              "endColumn": 52,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/process/internal/ProcessArgumentsSpec.java",
              "type": "String",
              "code": "\n    public ProcessArgumentsSpec commandLine(Iterable<?> args) {\n        List<Object> argsList = Lists.newArrayList(args);\n        hasExecutable.setExecutable(argsList.get(0));\n        setArgs(argsList.subList(1, argsList.size()));\n        return this;\n    }"
            },
            {
              "step": 25,
              "variableName": "Object executable",
              "startLine": 52,
              "startColumn": 31,
              "endLine": 52,
              "endColumn": 48,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/process/internal/DefaultExecHandleBuilder.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public void setExecutable(Object executable) {\n        delegate.setExecutable(executable);\n    }\n"
            },
            {
              "step": 26,
              "variableName": "executable",
              "startLine": 53,
              "startColumn": 32,
              "endLine": 53,
              "endColumn": 42,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/process/internal/DefaultExecHandleBuilder.java",
              "type": "",
              "code": "\n    @Override\n    public void setExecutable(Object executable) {\n        delegate.setExecutable(executable);\n    }\n\n    @Override"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "source",
              "startLine": 42,
              "startColumn": 27,
              "endLine": 42,
              "endColumn": 33,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/RegExpNameMapper.java",
              "type": "String",
              "code": "        if (matcher == null) {\n            matcher = pattern.matcher(source);\n        } else {\n            matcher.reset(source);\n        }\n        String result = source;\n        if (matcher.find()) {"
            },
            {
              "step": 1,
              "variableName": "result",
              "startLine": 48,
              "startColumn": 16,
              "endLine": 48,
              "endColumn": 22,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/RegExpNameMapper.java",
              "type": "String",
              "code": "        if (matcher.find()) {\n            result = matcher.replaceFirst(replacement);\n        }\n        return result;\n    }\n}\n"
            },
            {
              "step": 2,
              "variableName": "transformer.transform(value)",
              "startLine": 37,
              "startColumn": 31,
              "endLine": 37,
              "endColumn": 59,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/ChainingTransformer.java",
              "type": "String",
              "code": "    public T transform(T original) {\n        T value = original;\n        for (Transformer<T, T> transformer : transformers) {\n            value = type.cast(transformer.transform(value));\n        }\n        return value;\n    }"
            },
            {
              "step": 3,
              "variableName": "type.cast(transformer.transform(value))",
              "startLine": 37,
              "startColumn": 21,
              "endLine": 37,
              "endColumn": 60,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/ChainingTransformer.java",
              "type": "String",
              "code": "    public T transform(T original) {\n        T value = original;\n        for (Transformer<T, T> transformer : transformers) {\n            value = type.cast(transformer.transform(value));\n        }\n        return value;\n    }"
            },
            {
              "step": 4,
              "variableName": "value",
              "startLine": 39,
              "startColumn": 16,
              "endLine": 39,
              "endColumn": 21,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/ChainingTransformer.java",
              "type": "String",
              "code": "        for (Transformer<T, T> transformer : transformers) {\n            value = type.cast(transformer.transform(value));\n        }\n        return value;\n    }\n\n    public void add(Transformer<T, T> transformer) {"
            },
            {
              "step": 5,
              "variableName": "describer.transform(this)",
              "startLine": 163,
              "startColumn": 16,
              "endLine": 163,
              "endColumn": 41,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/repositories/DefaultMavenArtifactRepository.java",
              "type": "String",
              "code": "\n    @Override\n    public String getDisplayName() {\n        return describer.transform(this);\n    }\n\n    @Override"
            },
            {
              "step": 6,
              "variableName": "displayName.getDisplayName()",
              "startLine": 53,
              "startColumn": 16,
              "endLine": 53,
              "endColumn": 44,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/DefaultDependencySet.java",
              "type": "String",
              "code": "\n    @Override\n    public String toString() {\n        return displayName.getDisplayName();\n    }\n\n    @Override"
            },
            {
              "step": 7,
              "variableName": "iterator.next().toString()",
              "startLine": 569,
              "startColumn": 27,
              "endLine": 569,
              "endColumn": 53,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/util/internal/CollectionUtils.java",
              "type": "String",
              "code": "        StringBuilder string = new StringBuilder();\n        Iterator<?> iterator = objects.iterator();\n        if (iterator.hasNext()) {\n            string.append(iterator.next().toString());\n            while (iterator.hasNext()) {\n                string.append(separator);\n                string.append(iterator.next().toString());"
            },
            {
              "step": 8,
              "variableName": "string",
              "startLine": 569,
              "startColumn": 13,
              "endLine": 569,
              "endColumn": 19,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/util/internal/CollectionUtils.java",
              "type": "StringBuilder",
              "code": "        StringBuilder string = new StringBuilder();\n        Iterator<?> iterator = objects.iterator();\n        if (iterator.hasNext()) {\n            string.append(iterator.next().toString());\n            while (iterator.hasNext()) {\n                string.append(separator);\n                string.append(iterator.next().toString());"
            },
            {
              "step": 9,
              "variableName": "string",
              "startLine": 575,
              "startColumn": 16,
              "endLine": 575,
              "endColumn": 22,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/util/internal/CollectionUtils.java",
              "type": "StringBuilder",
              "code": "                string.append(iterator.next().toString());\n            }\n        }\n        return string.toString();\n    }\n\n    /**"
            },
            {
              "step": 10,
              "variableName": "string.toString()",
              "startLine": 575,
              "startColumn": 16,
              "endLine": 575,
              "endColumn": 33,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/util/internal/CollectionUtils.java",
              "type": "String",
              "code": "                string.append(iterator.next().toString());\n            }\n        }\n        return string.toString();\n    }\n\n    /**"
            },
            {
              "step": 11,
              "variableName": "CollectionUtils.join(File.pathSeparator, classpath.getAsFiles())",
              "startLine": 157,
              "startColumn": 24,
              "endLine": 157,
              "endColumn": 88,
              "uri": "gradle-8.14.0/platforms/core-runtime/client-services/src/main/java/org/gradle/launcher/daemon/client/DefaultDaemonStarter.java",
              "type": "String",
              "code": "        daemonArgs.addAll(JpmsConfiguration.forDaemonProcesses(majorJavaVersion, daemonRequestContext.getNativeServicesMode().isPotentiallyEnabled()));\n        daemonArgs.addAll(daemonOpts);\n        daemonArgs.add(\"-cp\");\n        daemonArgs.add(CollectionUtils.join(File.pathSeparator, classpath.getAsFiles()));\n\n        if (Boolean.getBoolean(\"org.gradle.daemon.debug\")) {\n            daemonArgs.add(JvmOptions.getDebugArgument(true, true, \"5005\"));"
            },
            {
              "step": 12,
              "variableName": "daemonArgs",
              "startLine": 157,
              "startColumn": 9,
              "endLine": 157,
              "endColumn": 19,
              "uri": "gradle-8.14.0/platforms/core-runtime/client-services/src/main/java/org/gradle/launcher/daemon/client/DefaultDaemonStarter.java",
              "type": "ArrayList [<element>] : String",
              "code": "        daemonArgs.addAll(JpmsConfiguration.forDaemonProcesses(majorJavaVersion, daemonRequestContext.getNativeServicesMode().isPotentiallyEnabled()));\n        daemonArgs.addAll(daemonOpts);\n        daemonArgs.add(\"-cp\");\n        daemonArgs.add(CollectionUtils.join(File.pathSeparator, classpath.getAsFiles()));\n\n        if (Boolean.getBoolean(\"org.gradle.daemon.debug\")) {\n            daemonArgs.add(JvmOptions.getDebugArgument(true, true, \"5005\"));"
            },
            {
              "step": 13,
              "variableName": "daemonArgs",
              "startLine": 206,
              "startColumn": 13,
              "endLine": 206,
              "endColumn": 23,
              "uri": "gradle-8.14.0/platforms/core-runtime/client-services/src/main/java/org/gradle/launcher/daemon/client/DefaultDaemonStarter.java",
              "type": "ArrayList [<element>] : String",
              "code": "        InputStream stdInput = buffer.getInputStream();\n\n        return startProcess(\n            daemonArgs,\n            daemonDir.getVersionedDir(),\n            daemonParameters.getGradleUserHomeDir().getAbsoluteFile(),\n            stdInput"
            },
            {
              "step": 14,
              "variableName": "List<String> args",
              "startLine": 239,
              "startColumn": 44,
              "endLine": 239,
              "endColumn": 61,
              "uri": "gradle-8.14.0/platforms/core-runtime/client-services/src/main/java/org/gradle/launcher/daemon/client/DefaultDaemonStarter.java",
              "type": "ArrayList [<element>] : String",
              "code": "        }\n    }\n\n    private DaemonStartupInfo startProcess(List<String> args, File workingDir, File gradleUserHome, InputStream stdInput) {\n        LOGGER.debug(\"Starting daemon process: workingDir = {}, daemonArgs: {}\", workingDir, args);\n        Timer clock = Time.startTimer();\n        try {"
            },
            {
              "step": 15,
              "variableName": "args",
              "startLine": 250,
              "startColumn": 73,
              "endLine": 250,
              "endColumn": 77,
              "uri": "gradle-8.14.0/platforms/core-runtime/client-services/src/main/java/org/gradle/launcher/daemon/client/DefaultDaemonStarter.java",
              "type": "ArrayList [<element>] : String",
              "code": "            // This factory should be injected but leaves non-daemon threads running when used from the tooling API client\n            RootClientExecHandleBuilderFactory execActionFactory = RootClientExecHandleBuilderFactory.of(gradleUserHome);\n            try {\n                ExecHandle handle = new DaemonExecHandleBuilder().build(args, workingDir, outputConsumer, stdInput, execActionFactory.newExecHandleBuilder());\n\n                handle.start();\n                LOGGER.debug(\"Gradle daemon process is starting. Waiting for the daemon to detach...\");"
            },
            {
              "step": 16,
              "variableName": "List<String> args",
              "startLine": 28,
              "startColumn": 29,
              "endLine": 28,
              "endColumn": 46,
              "uri": "gradle-8.14.0/platforms/core-runtime/client-services/src/main/java/org/gradle/launcher/daemon/DaemonExecHandleBuilder.java",
              "type": "ArrayList [<element>] : String",
              "code": "import java.util.List;\n\npublic class DaemonExecHandleBuilder {\n    public ExecHandle build(List<String> args, File workingDir, DaemonOutputConsumer outputConsumer, InputStream inputStream, ClientExecHandleBuilder builder) {\n        builder.commandLine(args);\n        builder.setWorkingDir(workingDir);\n        builder.setStandardInput(inputStream);"
            },
            {
              "step": 17,
              "variableName": "args",
              "startLine": 29,
              "startColumn": 29,
              "endLine": 29,
              "endColumn": 33,
              "uri": "gradle-8.14.0/platforms/core-runtime/client-services/src/main/java/org/gradle/launcher/daemon/DaemonExecHandleBuilder.java",
              "type": "ArrayList [<element>] : String",
              "code": "\npublic class DaemonExecHandleBuilder {\n    public ExecHandle build(List<String> args, File workingDir, DaemonOutputConsumer outputConsumer, InputStream inputStream, ClientExecHandleBuilder builder) {\n        builder.commandLine(args);\n        builder.setWorkingDir(workingDir);\n        builder.setStandardInput(inputStream);\n        builder.redirectErrorStream();"
            },
            {
              "step": 18,
              "variableName": "Iterable<?> args",
              "startLine": 75,
              "startColumn": 48,
              "endLine": 75,
              "endColumn": 64,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/process/internal/DefaultClientExecHandleBuilder.java",
              "type": "ArrayList [<element>] : String",
              "code": "    }\n\n    @Override\n    public ClientExecHandleBuilder commandLine(Iterable<?> args) {\n        argumentsSpec.commandLine(args);\n        return this;\n    }"
            },
            {
              "step": 19,
              "variableName": "args",
              "startLine": 76,
              "startColumn": 35,
              "endLine": 76,
              "endColumn": 39,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/process/internal/DefaultClientExecHandleBuilder.java",
              "type": "ArrayList [<element>] : String",
              "code": "\n    @Override\n    public ClientExecHandleBuilder commandLine(Iterable<?> args) {\n        argumentsSpec.commandLine(args);\n        return this;\n    }\n"
            },
            {
              "step": 20,
              "variableName": "Iterable<?> args",
              "startLine": 59,
              "startColumn": 45,
              "endLine": 59,
              "endColumn": 61,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/process/internal/ProcessArgumentsSpec.java",
              "type": "ArrayList [<element>] : String",
              "code": "        return this;\n    }\n\n    public ProcessArgumentsSpec commandLine(Iterable<?> args) {\n        List<Object> argsList = Lists.newArrayList(args);\n        hasExecutable.setExecutable(argsList.get(0));\n        setArgs(argsList.subList(1, argsList.size()));"
            },
            {
              "step": 21,
              "variableName": "args",
              "startLine": 60,
              "startColumn": 52,
              "endLine": 60,
              "endColumn": 56,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/process/internal/ProcessArgumentsSpec.java",
              "type": "ArrayList [<element>] : String",
              "code": "    }\n\n    public ProcessArgumentsSpec commandLine(Iterable<?> args) {\n        List<Object> argsList = Lists.newArrayList(args);\n        hasExecutable.setExecutable(argsList.get(0));\n        setArgs(argsList.subList(1, argsList.size()));\n        return this;"
            },
            {
              "step": 22,
              "variableName": "Lists.newArrayList(args)",
              "startLine": 60,
              "startColumn": 33,
              "endLine": 60,
              "endColumn": 57,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/process/internal/ProcessArgumentsSpec.java",
              "type": "ArrayList [<element>] : String",
              "code": "    }\n\n    public ProcessArgumentsSpec commandLine(Iterable<?> args) {\n        List<Object> argsList = Lists.newArrayList(args);\n        hasExecutable.setExecutable(argsList.get(0));\n        setArgs(argsList.subList(1, argsList.size()));\n        return this;"
            },
            {
              "step": 23,
              "variableName": "argsList",
              "startLine": 61,
              "startColumn": 37,
              "endLine": 61,
              "endColumn": 45,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/process/internal/ProcessArgumentsSpec.java",
              "type": "ArrayList [<element>] : String",
              "code": "\n    public ProcessArgumentsSpec commandLine(Iterable<?> args) {\n        List<Object> argsList = Lists.newArrayList(args);\n        hasExecutable.setExecutable(argsList.get(0));\n        setArgs(argsList.subList(1, argsList.size()));\n        return this;\n    }"
            },
            {
              "step": 24,
              "variableName": "argsList.get(0)",
              "startLine": 61,
              "startColumn": 37,
              "endLine": 61,
              "endColumn": 52,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/process/internal/ProcessArgumentsSpec.java",
              "type": "String",
              "code": "\n    public ProcessArgumentsSpec commandLine(Iterable<?> args) {\n        List<Object> argsList = Lists.newArrayList(args);\n        hasExecutable.setExecutable(argsList.get(0));\n        setArgs(argsList.subList(1, argsList.size()));\n        return this;\n    }"
            },
            {
              "step": 25,
              "variableName": "Object executable",
              "startLine": 52,
              "startColumn": 31,
              "endLine": 52,
              "endColumn": 48,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/process/internal/DefaultExecHandleBuilder.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public void setExecutable(Object executable) {\n        delegate.setExecutable(executable);\n    }\n"
            },
            {
              "step": 26,
              "variableName": "executable",
              "startLine": 53,
              "startColumn": 32,
              "endLine": 53,
              "endColumn": 42,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/process/internal/DefaultExecHandleBuilder.java",
              "type": "",
              "code": "\n    @Override\n    public void setExecutable(Object executable) {\n        delegate.setExecutable(executable);\n    }\n\n    @Override"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "src",
              "startLine": 115,
              "startColumn": 13,
              "endLine": 115,
              "endColumn": 16,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "Object",
              "code": "    }\n\n    private static void appendDisplayName(Object src, StringBuilder stringBuilder) {\n        if (src instanceof Describable) {\n            Describable describable = (Describable) src;\n            stringBuilder.append(describable.getDisplayName());\n        } else {"
            },
            {
              "step": 1,
              "variableName": "src",
              "startLine": 119,
              "startColumn": 34,
              "endLine": 119,
              "endColumn": 37,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "Object",
              "code": "            Describable describable = (Describable) src;\n            stringBuilder.append(describable.getDisplayName());\n        } else {\n            stringBuilder.append(src.toString());\n        }\n    }\n"
            },
            {
              "step": 2,
              "variableName": "toString",
              "startLine": 397,
              "startColumn": 19,
              "endLine": 397,
              "endColumn": 27,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "TestFile",
              "code": "    }\n\n    @Override\n    public String toString() {\n        return getPath();\n    }\n"
            },
            {
              "step": 3,
              "variableName": "getPath()",
              "startLine": 398,
              "startColumn": 16,
              "endLine": 398,
              "endColumn": 25,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "TestFile",
              "code": "\n    @Override\n    public String toString() {\n        return getPath();\n    }\n\n    public TestFile writelns(Iterable<String> lines) {"
            },
            {
              "step": 4,
              "variableName": "getPath()",
              "startLine": 398,
              "startColumn": 16,
              "endLine": 398,
              "endColumn": 25,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "String",
              "code": "\n    @Override\n    public String toString() {\n        return getPath();\n    }\n\n    public TestFile writelns(Iterable<String> lines) {"
            },
            {
              "step": 5,
              "variableName": "src.toString()",
              "startLine": 119,
              "startColumn": 34,
              "endLine": 119,
              "endColumn": 48,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "String",
              "code": "            Describable describable = (Describable) src;\n            stringBuilder.append(describable.getDisplayName());\n        } else {\n            stringBuilder.append(src.toString());\n        }\n    }\n"
            },
            {
              "step": 6,
              "variableName": "stringBuilder",
              "startLine": 119,
              "startColumn": 13,
              "endLine": 119,
              "endColumn": 26,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "StringBuilder",
              "code": "            Describable describable = (Describable) src;\n            stringBuilder.append(describable.getDisplayName());\n        } else {\n            stringBuilder.append(src.toString());\n        }\n    }\n"
            },
            {
              "step": 7,
              "variableName": "builder",
              "startLine": 159,
              "startColumn": 44,
              "endLine": 159,
              "endColumn": 51,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "StringBuilder",
              "code": "                return displayName.toString();\n            }\n            StringBuilder builder = new StringBuilder(32);\n            appendDisplayName(displayName, builder);\n            return builder.toString();\n        }\n"
            },
            {
              "step": 8,
              "variableName": "builder",
              "startLine": 160,
              "startColumn": 20,
              "endLine": 160,
              "endColumn": 27,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "StringBuilder",
              "code": "            }\n            StringBuilder builder = new StringBuilder(32);\n            appendDisplayName(displayName, builder);\n            return builder.toString();\n        }\n\n        @Override"
            },
            {
              "step": 9,
              "variableName": "builder.toString()",
              "startLine": 160,
              "startColumn": 20,
              "endLine": 160,
              "endColumn": 38,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "String",
              "code": "            }\n            StringBuilder builder = new StringBuilder(32);\n            appendDisplayName(displayName, builder);\n            return builder.toString();\n        }\n\n        @Override"
            },
            {
              "step": 10,
              "variableName": "displayName.getDisplayName()",
              "startLine": 67,
              "startColumn": 16,
              "endLine": 67,
              "endColumn": 44,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/DefaultPublishArtifactSet.java",
              "type": "String",
              "code": "\n    @Override\n    public String toString() {\n        return displayName.getDisplayName();\n    }\n\n    @Override"
            },
            {
              "step": 11,
              "variableName": "iterator.next().toString()",
              "startLine": 569,
              "startColumn": 27,
              "endLine": 569,
              "endColumn": 53,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/util/internal/CollectionUtils.java",
              "type": "String",
              "code": "        StringBuilder string = new StringBuilder();\n        Iterator<?> iterator = objects.iterator();\n        if (iterator.hasNext()) {\n            string.append(iterator.next().toString());\n            while (iterator.hasNext()) {\n                string.append(separator);\n                string.append(iterator.next().toString());"
            },
            {
              "step": 12,
              "variableName": "string",
              "startLine": 569,
              "startColumn": 13,
              "endLine": 569,
              "endColumn": 19,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/util/internal/CollectionUtils.java",
              "type": "StringBuilder",
              "code": "        StringBuilder string = new StringBuilder();\n        Iterator<?> iterator = objects.iterator();\n        if (iterator.hasNext()) {\n            string.append(iterator.next().toString());\n            while (iterator.hasNext()) {\n                string.append(separator);\n                string.append(iterator.next().toString());"
            },
            {
              "step": 13,
              "variableName": "string",
              "startLine": 575,
              "startColumn": 16,
              "endLine": 575,
              "endColumn": 22,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/util/internal/CollectionUtils.java",
              "type": "StringBuilder",
              "code": "                string.append(iterator.next().toString());\n            }\n        }\n        return string.toString();\n    }\n\n    /**"
            },
            {
              "step": 14,
              "variableName": "string.toString()",
              "startLine": 575,
              "startColumn": 16,
              "endLine": 575,
              "endColumn": 33,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/util/internal/CollectionUtils.java",
              "type": "String",
              "code": "                string.append(iterator.next().toString());\n            }\n        }\n        return string.toString();\n    }\n\n    /**"
            },
            {
              "step": 15,
              "variableName": "CollectionUtils.join(File.pathSeparator, classpath.getAsFiles())",
              "startLine": 157,
              "startColumn": 24,
              "endLine": 157,
              "endColumn": 88,
              "uri": "gradle-8.14.0/platforms/core-runtime/client-services/src/main/java/org/gradle/launcher/daemon/client/DefaultDaemonStarter.java",
              "type": "String",
              "code": "        daemonArgs.addAll(JpmsConfiguration.forDaemonProcesses(majorJavaVersion, daemonRequestContext.getNativeServicesMode().isPotentiallyEnabled()));\n        daemonArgs.addAll(daemonOpts);\n        daemonArgs.add(\"-cp\");\n        daemonArgs.add(CollectionUtils.join(File.pathSeparator, classpath.getAsFiles()));\n\n        if (Boolean.getBoolean(\"org.gradle.daemon.debug\")) {\n            daemonArgs.add(JvmOptions.getDebugArgument(true, true, \"5005\"));"
            },
            {
              "step": 16,
              "variableName": "daemonArgs",
              "startLine": 157,
              "startColumn": 9,
              "endLine": 157,
              "endColumn": 19,
              "uri": "gradle-8.14.0/platforms/core-runtime/client-services/src/main/java/org/gradle/launcher/daemon/client/DefaultDaemonStarter.java",
              "type": "ArrayList [<element>] : String",
              "code": "        daemonArgs.addAll(JpmsConfiguration.forDaemonProcesses(majorJavaVersion, daemonRequestContext.getNativeServicesMode().isPotentiallyEnabled()));\n        daemonArgs.addAll(daemonOpts);\n        daemonArgs.add(\"-cp\");\n        daemonArgs.add(CollectionUtils.join(File.pathSeparator, classpath.getAsFiles()));\n\n        if (Boolean.getBoolean(\"org.gradle.daemon.debug\")) {\n            daemonArgs.add(JvmOptions.getDebugArgument(true, true, \"5005\"));"
            },
            {
              "step": 17,
              "variableName": "daemonArgs",
              "startLine": 206,
              "startColumn": 13,
              "endLine": 206,
              "endColumn": 23,
              "uri": "gradle-8.14.0/platforms/core-runtime/client-services/src/main/java/org/gradle/launcher/daemon/client/DefaultDaemonStarter.java",
              "type": "ArrayList [<element>] : String",
              "code": "        InputStream stdInput = buffer.getInputStream();\n\n        return startProcess(\n            daemonArgs,\n            daemonDir.getVersionedDir(),\n            daemonParameters.getGradleUserHomeDir().getAbsoluteFile(),\n            stdInput"
            },
            {
              "step": 18,
              "variableName": "List<String> args",
              "startLine": 239,
              "startColumn": 44,
              "endLine": 239,
              "endColumn": 61,
              "uri": "gradle-8.14.0/platforms/core-runtime/client-services/src/main/java/org/gradle/launcher/daemon/client/DefaultDaemonStarter.java",
              "type": "ArrayList [<element>] : String",
              "code": "        }\n    }\n\n    private DaemonStartupInfo startProcess(List<String> args, File workingDir, File gradleUserHome, InputStream stdInput) {\n        LOGGER.debug(\"Starting daemon process: workingDir = {}, daemonArgs: {}\", workingDir, args);\n        Timer clock = Time.startTimer();\n        try {"
            },
            {
              "step": 19,
              "variableName": "args",
              "startLine": 250,
              "startColumn": 73,
              "endLine": 250,
              "endColumn": 77,
              "uri": "gradle-8.14.0/platforms/core-runtime/client-services/src/main/java/org/gradle/launcher/daemon/client/DefaultDaemonStarter.java",
              "type": "ArrayList [<element>] : String",
              "code": "            // This factory should be injected but leaves non-daemon threads running when used from the tooling API client\n            RootClientExecHandleBuilderFactory execActionFactory = RootClientExecHandleBuilderFactory.of(gradleUserHome);\n            try {\n                ExecHandle handle = new DaemonExecHandleBuilder().build(args, workingDir, outputConsumer, stdInput, execActionFactory.newExecHandleBuilder());\n\n                handle.start();\n                LOGGER.debug(\"Gradle daemon process is starting. Waiting for the daemon to detach...\");"
            },
            {
              "step": 20,
              "variableName": "List<String> args",
              "startLine": 28,
              "startColumn": 29,
              "endLine": 28,
              "endColumn": 46,
              "uri": "gradle-8.14.0/platforms/core-runtime/client-services/src/main/java/org/gradle/launcher/daemon/DaemonExecHandleBuilder.java",
              "type": "ArrayList [<element>] : String",
              "code": "import java.util.List;\n\npublic class DaemonExecHandleBuilder {\n    public ExecHandle build(List<String> args, File workingDir, DaemonOutputConsumer outputConsumer, InputStream inputStream, ClientExecHandleBuilder builder) {\n        builder.commandLine(args);\n        builder.setWorkingDir(workingDir);\n        builder.setStandardInput(inputStream);"
            },
            {
              "step": 21,
              "variableName": "args",
              "startLine": 29,
              "startColumn": 29,
              "endLine": 29,
              "endColumn": 33,
              "uri": "gradle-8.14.0/platforms/core-runtime/client-services/src/main/java/org/gradle/launcher/daemon/DaemonExecHandleBuilder.java",
              "type": "ArrayList [<element>] : String",
              "code": "\npublic class DaemonExecHandleBuilder {\n    public ExecHandle build(List<String> args, File workingDir, DaemonOutputConsumer outputConsumer, InputStream inputStream, ClientExecHandleBuilder builder) {\n        builder.commandLine(args);\n        builder.setWorkingDir(workingDir);\n        builder.setStandardInput(inputStream);\n        builder.redirectErrorStream();"
            },
            {
              "step": 22,
              "variableName": "Iterable<?> args",
              "startLine": 75,
              "startColumn": 48,
              "endLine": 75,
              "endColumn": 64,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/process/internal/DefaultClientExecHandleBuilder.java",
              "type": "ArrayList [<element>] : String",
              "code": "    }\n\n    @Override\n    public ClientExecHandleBuilder commandLine(Iterable<?> args) {\n        argumentsSpec.commandLine(args);\n        return this;\n    }"
            },
            {
              "step": 23,
              "variableName": "args",
              "startLine": 76,
              "startColumn": 35,
              "endLine": 76,
              "endColumn": 39,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/process/internal/DefaultClientExecHandleBuilder.java",
              "type": "ArrayList [<element>] : String",
              "code": "\n    @Override\n    public ClientExecHandleBuilder commandLine(Iterable<?> args) {\n        argumentsSpec.commandLine(args);\n        return this;\n    }\n"
            },
            {
              "step": 24,
              "variableName": "Iterable<?> args",
              "startLine": 59,
              "startColumn": 45,
              "endLine": 59,
              "endColumn": 61,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/process/internal/ProcessArgumentsSpec.java",
              "type": "ArrayList [<element>] : String",
              "code": "        return this;\n    }\n\n    public ProcessArgumentsSpec commandLine(Iterable<?> args) {\n        List<Object> argsList = Lists.newArrayList(args);\n        hasExecutable.setExecutable(argsList.get(0));\n        setArgs(argsList.subList(1, argsList.size()));"
            },
            {
              "step": 25,
              "variableName": "args",
              "startLine": 60,
              "startColumn": 52,
              "endLine": 60,
              "endColumn": 56,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/process/internal/ProcessArgumentsSpec.java",
              "type": "ArrayList [<element>] : String",
              "code": "    }\n\n    public ProcessArgumentsSpec commandLine(Iterable<?> args) {\n        List<Object> argsList = Lists.newArrayList(args);\n        hasExecutable.setExecutable(argsList.get(0));\n        setArgs(argsList.subList(1, argsList.size()));\n        return this;"
            },
            {
              "step": 26,
              "variableName": "Lists.newArrayList(args)",
              "startLine": 60,
              "startColumn": 33,
              "endLine": 60,
              "endColumn": 57,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/process/internal/ProcessArgumentsSpec.java",
              "type": "ArrayList [<element>] : String",
              "code": "    }\n\n    public ProcessArgumentsSpec commandLine(Iterable<?> args) {\n        List<Object> argsList = Lists.newArrayList(args);\n        hasExecutable.setExecutable(argsList.get(0));\n        setArgs(argsList.subList(1, argsList.size()));\n        return this;"
            },
            {
              "step": 27,
              "variableName": "argsList",
              "startLine": 61,
              "startColumn": 37,
              "endLine": 61,
              "endColumn": 45,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/process/internal/ProcessArgumentsSpec.java",
              "type": "ArrayList [<element>] : String",
              "code": "\n    public ProcessArgumentsSpec commandLine(Iterable<?> args) {\n        List<Object> argsList = Lists.newArrayList(args);\n        hasExecutable.setExecutable(argsList.get(0));\n        setArgs(argsList.subList(1, argsList.size()));\n        return this;\n    }"
            },
            {
              "step": 28,
              "variableName": "argsList.get(0)",
              "startLine": 61,
              "startColumn": 37,
              "endLine": 61,
              "endColumn": 52,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/process/internal/ProcessArgumentsSpec.java",
              "type": "String",
              "code": "\n    public ProcessArgumentsSpec commandLine(Iterable<?> args) {\n        List<Object> argsList = Lists.newArrayList(args);\n        hasExecutable.setExecutable(argsList.get(0));\n        setArgs(argsList.subList(1, argsList.size()));\n        return this;\n    }"
            },
            {
              "step": 29,
              "variableName": "Object executable",
              "startLine": 52,
              "startColumn": 31,
              "endLine": 52,
              "endColumn": 48,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/process/internal/DefaultExecHandleBuilder.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public void setExecutable(Object executable) {\n        delegate.setExecutable(executable);\n    }\n"
            },
            {
              "step": 30,
              "variableName": "executable",
              "startLine": 53,
              "startColumn": 32,
              "endLine": 53,
              "endColumn": 42,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/process/internal/DefaultExecHandleBuilder.java",
              "type": "",
              "code": "\n    @Override\n    public void setExecutable(Object executable) {\n        delegate.setExecutable(executable);\n    }\n\n    @Override"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 12,
      "fileName": "JavaExecHandleBuilder.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "source",
              "startLine": 44,
              "startColumn": 25,
              "endLine": 44,
              "endColumn": 31,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/RegExpNameMapper.java",
              "type": "String",
              "code": "        } else {\n            matcher.reset(source);\n        }\n        String result = source;\n        if (matcher.find()) {\n            result = matcher.replaceFirst(replacement);\n        }"
            },
            {
              "step": 1,
              "variableName": "result",
              "startLine": 48,
              "startColumn": 16,
              "endLine": 48,
              "endColumn": 22,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/RegExpNameMapper.java",
              "type": "String",
              "code": "        if (matcher.find()) {\n            result = matcher.replaceFirst(replacement);\n        }\n        return result;\n    }\n}\n"
            },
            {
              "step": 2,
              "variableName": "transformer.transform(value)",
              "startLine": 37,
              "startColumn": 31,
              "endLine": 37,
              "endColumn": 59,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/ChainingTransformer.java",
              "type": "String",
              "code": "    public T transform(T original) {\n        T value = original;\n        for (Transformer<T, T> transformer : transformers) {\n            value = type.cast(transformer.transform(value));\n        }\n        return value;\n    }"
            },
            {
              "step": 3,
              "variableName": "type.cast(transformer.transform(value))",
              "startLine": 37,
              "startColumn": 21,
              "endLine": 37,
              "endColumn": 60,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/ChainingTransformer.java",
              "type": "String",
              "code": "    public T transform(T original) {\n        T value = original;\n        for (Transformer<T, T> transformer : transformers) {\n            value = type.cast(transformer.transform(value));\n        }\n        return value;\n    }"
            },
            {
              "step": 4,
              "variableName": "value",
              "startLine": 39,
              "startColumn": 16,
              "endLine": 39,
              "endColumn": 21,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/ChainingTransformer.java",
              "type": "String",
              "code": "        for (Transformer<T, T> transformer : transformers) {\n            value = type.cast(transformer.transform(value));\n        }\n        return value;\n    }\n\n    public void add(Transformer<T, T> transformer) {"
            },
            {
              "step": 5,
              "variableName": "describer.transform(this)",
              "startLine": 163,
              "startColumn": 16,
              "endLine": 163,
              "endColumn": 41,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/repositories/DefaultMavenArtifactRepository.java",
              "type": "String",
              "code": "\n    @Override\n    public String getDisplayName() {\n        return describer.transform(this);\n    }\n\n    @Override"
            },
            {
              "step": 6,
              "variableName": "displayName.getDisplayName()",
              "startLine": 53,
              "startColumn": 16,
              "endLine": 53,
              "endColumn": 44,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/DefaultDependencySet.java",
              "type": "String",
              "code": "\n    @Override\n    public String toString() {\n        return displayName.getDisplayName();\n    }\n\n    @Override"
            },
            {
              "step": 7,
              "variableName": "iterator.next().toString()",
              "startLine": 569,
              "startColumn": 27,
              "endLine": 569,
              "endColumn": 53,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/util/internal/CollectionUtils.java",
              "type": "String",
              "code": "        StringBuilder string = new StringBuilder();\n        Iterator<?> iterator = objects.iterator();\n        if (iterator.hasNext()) {\n            string.append(iterator.next().toString());\n            while (iterator.hasNext()) {\n                string.append(separator);\n                string.append(iterator.next().toString());"
            },
            {
              "step": 8,
              "variableName": "string",
              "startLine": 569,
              "startColumn": 13,
              "endLine": 569,
              "endColumn": 19,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/util/internal/CollectionUtils.java",
              "type": "StringBuilder",
              "code": "        StringBuilder string = new StringBuilder();\n        Iterator<?> iterator = objects.iterator();\n        if (iterator.hasNext()) {\n            string.append(iterator.next().toString());\n            while (iterator.hasNext()) {\n                string.append(separator);\n                string.append(iterator.next().toString());"
            },
            {
              "step": 9,
              "variableName": "string",
              "startLine": 575,
              "startColumn": 16,
              "endLine": 575,
              "endColumn": 22,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/util/internal/CollectionUtils.java",
              "type": "StringBuilder",
              "code": "                string.append(iterator.next().toString());\n            }\n        }\n        return string.toString();\n    }\n\n    /**"
            },
            {
              "step": 10,
              "variableName": "string.toString()",
              "startLine": 575,
              "startColumn": 16,
              "endLine": 575,
              "endColumn": 33,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/util/internal/CollectionUtils.java",
              "type": "String",
              "code": "                string.append(iterator.next().toString());\n            }\n        }\n        return string.toString();\n    }\n\n    /**"
            },
            {
              "step": 11,
              "variableName": "CollectionUtils.join(File.pathSeparator, classpath.getAsFiles())",
              "startLine": 157,
              "startColumn": 24,
              "endLine": 157,
              "endColumn": 88,
              "uri": "gradle-8.14.0/platforms/core-runtime/client-services/src/main/java/org/gradle/launcher/daemon/client/DefaultDaemonStarter.java",
              "type": "String",
              "code": "        daemonArgs.addAll(JpmsConfiguration.forDaemonProcesses(majorJavaVersion, daemonRequestContext.getNativeServicesMode().isPotentiallyEnabled()));\n        daemonArgs.addAll(daemonOpts);\n        daemonArgs.add(\"-cp\");\n        daemonArgs.add(CollectionUtils.join(File.pathSeparator, classpath.getAsFiles()));\n\n        if (Boolean.getBoolean(\"org.gradle.daemon.debug\")) {\n            daemonArgs.add(JvmOptions.getDebugArgument(true, true, \"5005\"));"
            },
            {
              "step": 12,
              "variableName": "daemonArgs",
              "startLine": 157,
              "startColumn": 9,
              "endLine": 157,
              "endColumn": 19,
              "uri": "gradle-8.14.0/platforms/core-runtime/client-services/src/main/java/org/gradle/launcher/daemon/client/DefaultDaemonStarter.java",
              "type": "ArrayList [<element>] : String",
              "code": "        daemonArgs.addAll(JpmsConfiguration.forDaemonProcesses(majorJavaVersion, daemonRequestContext.getNativeServicesMode().isPotentiallyEnabled()));\n        daemonArgs.addAll(daemonOpts);\n        daemonArgs.add(\"-cp\");\n        daemonArgs.add(CollectionUtils.join(File.pathSeparator, classpath.getAsFiles()));\n\n        if (Boolean.getBoolean(\"org.gradle.daemon.debug\")) {\n            daemonArgs.add(JvmOptions.getDebugArgument(true, true, \"5005\"));"
            },
            {
              "step": 13,
              "variableName": "daemonArgs",
              "startLine": 206,
              "startColumn": 13,
              "endLine": 206,
              "endColumn": 23,
              "uri": "gradle-8.14.0/platforms/core-runtime/client-services/src/main/java/org/gradle/launcher/daemon/client/DefaultDaemonStarter.java",
              "type": "ArrayList [<element>] : String",
              "code": "        InputStream stdInput = buffer.getInputStream();\n\n        return startProcess(\n            daemonArgs,\n            daemonDir.getVersionedDir(),\n            daemonParameters.getGradleUserHomeDir().getAbsoluteFile(),\n            stdInput"
            },
            {
              "step": 14,
              "variableName": "List<String> args",
              "startLine": 239,
              "startColumn": 44,
              "endLine": 239,
              "endColumn": 61,
              "uri": "gradle-8.14.0/platforms/core-runtime/client-services/src/main/java/org/gradle/launcher/daemon/client/DefaultDaemonStarter.java",
              "type": "ArrayList [<element>] : String",
              "code": "        }\n    }\n\n    private DaemonStartupInfo startProcess(List<String> args, File workingDir, File gradleUserHome, InputStream stdInput) {\n        LOGGER.debug(\"Starting daemon process: workingDir = {}, daemonArgs: {}\", workingDir, args);\n        Timer clock = Time.startTimer();\n        try {"
            },
            {
              "step": 15,
              "variableName": "args",
              "startLine": 250,
              "startColumn": 73,
              "endLine": 250,
              "endColumn": 77,
              "uri": "gradle-8.14.0/platforms/core-runtime/client-services/src/main/java/org/gradle/launcher/daemon/client/DefaultDaemonStarter.java",
              "type": "ArrayList [<element>] : String",
              "code": "            // This factory should be injected but leaves non-daemon threads running when used from the tooling API client\n            RootClientExecHandleBuilderFactory execActionFactory = RootClientExecHandleBuilderFactory.of(gradleUserHome);\n            try {\n                ExecHandle handle = new DaemonExecHandleBuilder().build(args, workingDir, outputConsumer, stdInput, execActionFactory.newExecHandleBuilder());\n\n                handle.start();\n                LOGGER.debug(\"Gradle daemon process is starting. Waiting for the daemon to detach...\");"
            },
            {
              "step": 16,
              "variableName": "List<String> args",
              "startLine": 28,
              "startColumn": 29,
              "endLine": 28,
              "endColumn": 46,
              "uri": "gradle-8.14.0/platforms/core-runtime/client-services/src/main/java/org/gradle/launcher/daemon/DaemonExecHandleBuilder.java",
              "type": "ArrayList [<element>] : String",
              "code": "import java.util.List;\n\npublic class DaemonExecHandleBuilder {\n    public ExecHandle build(List<String> args, File workingDir, DaemonOutputConsumer outputConsumer, InputStream inputStream, ClientExecHandleBuilder builder) {\n        builder.commandLine(args);\n        builder.setWorkingDir(workingDir);\n        builder.setStandardInput(inputStream);"
            },
            {
              "step": 17,
              "variableName": "args",
              "startLine": 29,
              "startColumn": 29,
              "endLine": 29,
              "endColumn": 33,
              "uri": "gradle-8.14.0/platforms/core-runtime/client-services/src/main/java/org/gradle/launcher/daemon/DaemonExecHandleBuilder.java",
              "type": "ArrayList [<element>] : String",
              "code": "\npublic class DaemonExecHandleBuilder {\n    public ExecHandle build(List<String> args, File workingDir, DaemonOutputConsumer outputConsumer, InputStream inputStream, ClientExecHandleBuilder builder) {\n        builder.commandLine(args);\n        builder.setWorkingDir(workingDir);\n        builder.setStandardInput(inputStream);\n        builder.redirectErrorStream();"
            },
            {
              "step": 18,
              "variableName": "Iterable<?> args",
              "startLine": 75,
              "startColumn": 48,
              "endLine": 75,
              "endColumn": 64,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/process/internal/DefaultClientExecHandleBuilder.java",
              "type": "ArrayList [<element>] : String",
              "code": "    }\n\n    @Override\n    public ClientExecHandleBuilder commandLine(Iterable<?> args) {\n        argumentsSpec.commandLine(args);\n        return this;\n    }"
            },
            {
              "step": 19,
              "variableName": "args",
              "startLine": 76,
              "startColumn": 35,
              "endLine": 76,
              "endColumn": 39,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/process/internal/DefaultClientExecHandleBuilder.java",
              "type": "ArrayList [<element>] : String",
              "code": "\n    @Override\n    public ClientExecHandleBuilder commandLine(Iterable<?> args) {\n        argumentsSpec.commandLine(args);\n        return this;\n    }\n"
            },
            {
              "step": 20,
              "variableName": "Iterable<?> args",
              "startLine": 59,
              "startColumn": 45,
              "endLine": 59,
              "endColumn": 61,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/process/internal/ProcessArgumentsSpec.java",
              "type": "ArrayList [<element>] : String",
              "code": "        return this;\n    }\n\n    public ProcessArgumentsSpec commandLine(Iterable<?> args) {\n        List<Object> argsList = Lists.newArrayList(args);\n        hasExecutable.setExecutable(argsList.get(0));\n        setArgs(argsList.subList(1, argsList.size()));"
            },
            {
              "step": 21,
              "variableName": "args",
              "startLine": 60,
              "startColumn": 52,
              "endLine": 60,
              "endColumn": 56,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/process/internal/ProcessArgumentsSpec.java",
              "type": "ArrayList [<element>] : String",
              "code": "    }\n\n    public ProcessArgumentsSpec commandLine(Iterable<?> args) {\n        List<Object> argsList = Lists.newArrayList(args);\n        hasExecutable.setExecutable(argsList.get(0));\n        setArgs(argsList.subList(1, argsList.size()));\n        return this;"
            },
            {
              "step": 22,
              "variableName": "Lists.newArrayList(args)",
              "startLine": 60,
              "startColumn": 33,
              "endLine": 60,
              "endColumn": 57,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/process/internal/ProcessArgumentsSpec.java",
              "type": "ArrayList [<element>] : String",
              "code": "    }\n\n    public ProcessArgumentsSpec commandLine(Iterable<?> args) {\n        List<Object> argsList = Lists.newArrayList(args);\n        hasExecutable.setExecutable(argsList.get(0));\n        setArgs(argsList.subList(1, argsList.size()));\n        return this;"
            },
            {
              "step": 23,
              "variableName": "argsList",
              "startLine": 61,
              "startColumn": 37,
              "endLine": 61,
              "endColumn": 45,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/process/internal/ProcessArgumentsSpec.java",
              "type": "ArrayList [<element>] : String",
              "code": "\n    public ProcessArgumentsSpec commandLine(Iterable<?> args) {\n        List<Object> argsList = Lists.newArrayList(args);\n        hasExecutable.setExecutable(argsList.get(0));\n        setArgs(argsList.subList(1, argsList.size()));\n        return this;\n    }"
            },
            {
              "step": 24,
              "variableName": "argsList.get(0)",
              "startLine": 61,
              "startColumn": 37,
              "endLine": 61,
              "endColumn": 52,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/process/internal/ProcessArgumentsSpec.java",
              "type": "String",
              "code": "\n    public ProcessArgumentsSpec commandLine(Iterable<?> args) {\n        List<Object> argsList = Lists.newArrayList(args);\n        hasExecutable.setExecutable(argsList.get(0));\n        setArgs(argsList.subList(1, argsList.size()));\n        return this;\n    }"
            },
            {
              "step": 25,
              "variableName": "Object executable",
              "startLine": 266,
              "startColumn": 31,
              "endLine": 266,
              "endColumn": 48,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/process/internal/JavaExecHandleBuilder.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public void setExecutable(Object executable) {\n        javaOptions.setExecutable(executable);\n    }\n"
            },
            {
              "step": 26,
              "variableName": "executable",
              "startLine": 267,
              "startColumn": 35,
              "endLine": 267,
              "endColumn": 45,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/process/internal/JavaExecHandleBuilder.java",
              "type": "",
              "code": "\n    @Override\n    public void setExecutable(Object executable) {\n        javaOptions.setExecutable(executable);\n    }\n\n    public void setExecutable(String executable) {"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "source",
              "startLine": 40,
              "startColumn": 39,
              "endLine": 40,
              "endColumn": 45,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/RegExpNameMapper.java",
              "type": "String",
              "code": "    @Override\n    public String transform(String source) {\n        if (matcher == null) {\n            matcher = pattern.matcher(source);\n        } else {\n            matcher.reset(source);\n        }"
            },
            {
              "step": 1,
              "variableName": "result",
              "startLine": 48,
              "startColumn": 16,
              "endLine": 48,
              "endColumn": 22,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/RegExpNameMapper.java",
              "type": "String",
              "code": "        if (matcher.find()) {\n            result = matcher.replaceFirst(replacement);\n        }\n        return result;\n    }\n}\n"
            },
            {
              "step": 2,
              "variableName": "transformer.transform(value)",
              "startLine": 37,
              "startColumn": 31,
              "endLine": 37,
              "endColumn": 59,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/ChainingTransformer.java",
              "type": "String",
              "code": "    public T transform(T original) {\n        T value = original;\n        for (Transformer<T, T> transformer : transformers) {\n            value = type.cast(transformer.transform(value));\n        }\n        return value;\n    }"
            },
            {
              "step": 3,
              "variableName": "type.cast(transformer.transform(value))",
              "startLine": 37,
              "startColumn": 21,
              "endLine": 37,
              "endColumn": 60,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/ChainingTransformer.java",
              "type": "String",
              "code": "    public T transform(T original) {\n        T value = original;\n        for (Transformer<T, T> transformer : transformers) {\n            value = type.cast(transformer.transform(value));\n        }\n        return value;\n    }"
            },
            {
              "step": 4,
              "variableName": "value",
              "startLine": 39,
              "startColumn": 16,
              "endLine": 39,
              "endColumn": 21,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/ChainingTransformer.java",
              "type": "String",
              "code": "        for (Transformer<T, T> transformer : transformers) {\n            value = type.cast(transformer.transform(value));\n        }\n        return value;\n    }\n\n    public void add(Transformer<T, T> transformer) {"
            },
            {
              "step": 5,
              "variableName": "describer.transform(this)",
              "startLine": 163,
              "startColumn": 16,
              "endLine": 163,
              "endColumn": 41,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/repositories/DefaultMavenArtifactRepository.java",
              "type": "String",
              "code": "\n    @Override\n    public String getDisplayName() {\n        return describer.transform(this);\n    }\n\n    @Override"
            },
            {
              "step": 6,
              "variableName": "displayName.getDisplayName()",
              "startLine": 53,
              "startColumn": 16,
              "endLine": 53,
              "endColumn": 44,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/DefaultDependencySet.java",
              "type": "String",
              "code": "\n    @Override\n    public String toString() {\n        return displayName.getDisplayName();\n    }\n\n    @Override"
            },
            {
              "step": 7,
              "variableName": "iterator.next().toString()",
              "startLine": 569,
              "startColumn": 27,
              "endLine": 569,
              "endColumn": 53,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/util/internal/CollectionUtils.java",
              "type": "String",
              "code": "        StringBuilder string = new StringBuilder();\n        Iterator<?> iterator = objects.iterator();\n        if (iterator.hasNext()) {\n            string.append(iterator.next().toString());\n            while (iterator.hasNext()) {\n                string.append(separator);\n                string.append(iterator.next().toString());"
            },
            {
              "step": 8,
              "variableName": "string",
              "startLine": 569,
              "startColumn": 13,
              "endLine": 569,
              "endColumn": 19,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/util/internal/CollectionUtils.java",
              "type": "StringBuilder",
              "code": "        StringBuilder string = new StringBuilder();\n        Iterator<?> iterator = objects.iterator();\n        if (iterator.hasNext()) {\n            string.append(iterator.next().toString());\n            while (iterator.hasNext()) {\n                string.append(separator);\n                string.append(iterator.next().toString());"
            },
            {
              "step": 9,
              "variableName": "string",
              "startLine": 575,
              "startColumn": 16,
              "endLine": 575,
              "endColumn": 22,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/util/internal/CollectionUtils.java",
              "type": "StringBuilder",
              "code": "                string.append(iterator.next().toString());\n            }\n        }\n        return string.toString();\n    }\n\n    /**"
            },
            {
              "step": 10,
              "variableName": "string.toString()",
              "startLine": 575,
              "startColumn": 16,
              "endLine": 575,
              "endColumn": 33,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/util/internal/CollectionUtils.java",
              "type": "String",
              "code": "                string.append(iterator.next().toString());\n            }\n        }\n        return string.toString();\n    }\n\n    /**"
            },
            {
              "step": 11,
              "variableName": "CollectionUtils.join(File.pathSeparator, classpath.getAsFiles())",
              "startLine": 157,
              "startColumn": 24,
              "endLine": 157,
              "endColumn": 88,
              "uri": "gradle-8.14.0/platforms/core-runtime/client-services/src/main/java/org/gradle/launcher/daemon/client/DefaultDaemonStarter.java",
              "type": "String",
              "code": "        daemonArgs.addAll(JpmsConfiguration.forDaemonProcesses(majorJavaVersion, daemonRequestContext.getNativeServicesMode().isPotentiallyEnabled()));\n        daemonArgs.addAll(daemonOpts);\n        daemonArgs.add(\"-cp\");\n        daemonArgs.add(CollectionUtils.join(File.pathSeparator, classpath.getAsFiles()));\n\n        if (Boolean.getBoolean(\"org.gradle.daemon.debug\")) {\n            daemonArgs.add(JvmOptions.getDebugArgument(true, true, \"5005\"));"
            },
            {
              "step": 12,
              "variableName": "daemonArgs",
              "startLine": 157,
              "startColumn": 9,
              "endLine": 157,
              "endColumn": 19,
              "uri": "gradle-8.14.0/platforms/core-runtime/client-services/src/main/java/org/gradle/launcher/daemon/client/DefaultDaemonStarter.java",
              "type": "ArrayList [<element>] : String",
              "code": "        daemonArgs.addAll(JpmsConfiguration.forDaemonProcesses(majorJavaVersion, daemonRequestContext.getNativeServicesMode().isPotentiallyEnabled()));\n        daemonArgs.addAll(daemonOpts);\n        daemonArgs.add(\"-cp\");\n        daemonArgs.add(CollectionUtils.join(File.pathSeparator, classpath.getAsFiles()));\n\n        if (Boolean.getBoolean(\"org.gradle.daemon.debug\")) {\n            daemonArgs.add(JvmOptions.getDebugArgument(true, true, \"5005\"));"
            },
            {
              "step": 13,
              "variableName": "daemonArgs",
              "startLine": 206,
              "startColumn": 13,
              "endLine": 206,
              "endColumn": 23,
              "uri": "gradle-8.14.0/platforms/core-runtime/client-services/src/main/java/org/gradle/launcher/daemon/client/DefaultDaemonStarter.java",
              "type": "ArrayList [<element>] : String",
              "code": "        InputStream stdInput = buffer.getInputStream();\n\n        return startProcess(\n            daemonArgs,\n            daemonDir.getVersionedDir(),\n            daemonParameters.getGradleUserHomeDir().getAbsoluteFile(),\n            stdInput"
            },
            {
              "step": 14,
              "variableName": "List<String> args",
              "startLine": 239,
              "startColumn": 44,
              "endLine": 239,
              "endColumn": 61,
              "uri": "gradle-8.14.0/platforms/core-runtime/client-services/src/main/java/org/gradle/launcher/daemon/client/DefaultDaemonStarter.java",
              "type": "ArrayList [<element>] : String",
              "code": "        }\n    }\n\n    private DaemonStartupInfo startProcess(List<String> args, File workingDir, File gradleUserHome, InputStream stdInput) {\n        LOGGER.debug(\"Starting daemon process: workingDir = {}, daemonArgs: {}\", workingDir, args);\n        Timer clock = Time.startTimer();\n        try {"
            },
            {
              "step": 15,
              "variableName": "args",
              "startLine": 250,
              "startColumn": 73,
              "endLine": 250,
              "endColumn": 77,
              "uri": "gradle-8.14.0/platforms/core-runtime/client-services/src/main/java/org/gradle/launcher/daemon/client/DefaultDaemonStarter.java",
              "type": "ArrayList [<element>] : String",
              "code": "            // This factory should be injected but leaves non-daemon threads running when used from the tooling API client\n            RootClientExecHandleBuilderFactory execActionFactory = RootClientExecHandleBuilderFactory.of(gradleUserHome);\n            try {\n                ExecHandle handle = new DaemonExecHandleBuilder().build(args, workingDir, outputConsumer, stdInput, execActionFactory.newExecHandleBuilder());\n\n                handle.start();\n                LOGGER.debug(\"Gradle daemon process is starting. Waiting for the daemon to detach...\");"
            },
            {
              "step": 16,
              "variableName": "List<String> args",
              "startLine": 28,
              "startColumn": 29,
              "endLine": 28,
              "endColumn": 46,
              "uri": "gradle-8.14.0/platforms/core-runtime/client-services/src/main/java/org/gradle/launcher/daemon/DaemonExecHandleBuilder.java",
              "type": "ArrayList [<element>] : String",
              "code": "import java.util.List;\n\npublic class DaemonExecHandleBuilder {\n    public ExecHandle build(List<String> args, File workingDir, DaemonOutputConsumer outputConsumer, InputStream inputStream, ClientExecHandleBuilder builder) {\n        builder.commandLine(args);\n        builder.setWorkingDir(workingDir);\n        builder.setStandardInput(inputStream);"
            },
            {
              "step": 17,
              "variableName": "args",
              "startLine": 29,
              "startColumn": 29,
              "endLine": 29,
              "endColumn": 33,
              "uri": "gradle-8.14.0/platforms/core-runtime/client-services/src/main/java/org/gradle/launcher/daemon/DaemonExecHandleBuilder.java",
              "type": "ArrayList [<element>] : String",
              "code": "\npublic class DaemonExecHandleBuilder {\n    public ExecHandle build(List<String> args, File workingDir, DaemonOutputConsumer outputConsumer, InputStream inputStream, ClientExecHandleBuilder builder) {\n        builder.commandLine(args);\n        builder.setWorkingDir(workingDir);\n        builder.setStandardInput(inputStream);\n        builder.redirectErrorStream();"
            },
            {
              "step": 18,
              "variableName": "Iterable<?> args",
              "startLine": 75,
              "startColumn": 48,
              "endLine": 75,
              "endColumn": 64,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/process/internal/DefaultClientExecHandleBuilder.java",
              "type": "ArrayList [<element>] : String",
              "code": "    }\n\n    @Override\n    public ClientExecHandleBuilder commandLine(Iterable<?> args) {\n        argumentsSpec.commandLine(args);\n        return this;\n    }"
            },
            {
              "step": 19,
              "variableName": "args",
              "startLine": 76,
              "startColumn": 35,
              "endLine": 76,
              "endColumn": 39,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/process/internal/DefaultClientExecHandleBuilder.java",
              "type": "ArrayList [<element>] : String",
              "code": "\n    @Override\n    public ClientExecHandleBuilder commandLine(Iterable<?> args) {\n        argumentsSpec.commandLine(args);\n        return this;\n    }\n"
            },
            {
              "step": 20,
              "variableName": "Iterable<?> args",
              "startLine": 59,
              "startColumn": 45,
              "endLine": 59,
              "endColumn": 61,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/process/internal/ProcessArgumentsSpec.java",
              "type": "ArrayList [<element>] : String",
              "code": "        return this;\n    }\n\n    public ProcessArgumentsSpec commandLine(Iterable<?> args) {\n        List<Object> argsList = Lists.newArrayList(args);\n        hasExecutable.setExecutable(argsList.get(0));\n        setArgs(argsList.subList(1, argsList.size()));"
            },
            {
              "step": 21,
              "variableName": "args",
              "startLine": 60,
              "startColumn": 52,
              "endLine": 60,
              "endColumn": 56,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/process/internal/ProcessArgumentsSpec.java",
              "type": "ArrayList [<element>] : String",
              "code": "    }\n\n    public ProcessArgumentsSpec commandLine(Iterable<?> args) {\n        List<Object> argsList = Lists.newArrayList(args);\n        hasExecutable.setExecutable(argsList.get(0));\n        setArgs(argsList.subList(1, argsList.size()));\n        return this;"
            },
            {
              "step": 22,
              "variableName": "Lists.newArrayList(args)",
              "startLine": 60,
              "startColumn": 33,
              "endLine": 60,
              "endColumn": 57,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/process/internal/ProcessArgumentsSpec.java",
              "type": "ArrayList [<element>] : String",
              "code": "    }\n\n    public ProcessArgumentsSpec commandLine(Iterable<?> args) {\n        List<Object> argsList = Lists.newArrayList(args);\n        hasExecutable.setExecutable(argsList.get(0));\n        setArgs(argsList.subList(1, argsList.size()));\n        return this;"
            },
            {
              "step": 23,
              "variableName": "argsList",
              "startLine": 61,
              "startColumn": 37,
              "endLine": 61,
              "endColumn": 45,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/process/internal/ProcessArgumentsSpec.java",
              "type": "ArrayList [<element>] : String",
              "code": "\n    public ProcessArgumentsSpec commandLine(Iterable<?> args) {\n        List<Object> argsList = Lists.newArrayList(args);\n        hasExecutable.setExecutable(argsList.get(0));\n        setArgs(argsList.subList(1, argsList.size()));\n        return this;\n    }"
            },
            {
              "step": 24,
              "variableName": "argsList.get(0)",
              "startLine": 61,
              "startColumn": 37,
              "endLine": 61,
              "endColumn": 52,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/process/internal/ProcessArgumentsSpec.java",
              "type": "String",
              "code": "\n    public ProcessArgumentsSpec commandLine(Iterable<?> args) {\n        List<Object> argsList = Lists.newArrayList(args);\n        hasExecutable.setExecutable(argsList.get(0));\n        setArgs(argsList.subList(1, argsList.size()));\n        return this;\n    }"
            },
            {
              "step": 25,
              "variableName": "Object executable",
              "startLine": 266,
              "startColumn": 31,
              "endLine": 266,
              "endColumn": 48,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/process/internal/JavaExecHandleBuilder.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public void setExecutable(Object executable) {\n        javaOptions.setExecutable(executable);\n    }\n"
            },
            {
              "step": 26,
              "variableName": "executable",
              "startLine": 267,
              "startColumn": 35,
              "endLine": 267,
              "endColumn": 45,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/process/internal/JavaExecHandleBuilder.java",
              "type": "",
              "code": "\n    @Override\n    public void setExecutable(Object executable) {\n        javaOptions.setExecutable(executable);\n    }\n\n    public void setExecutable(String executable) {"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "source",
              "startLine": 42,
              "startColumn": 27,
              "endLine": 42,
              "endColumn": 33,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/RegExpNameMapper.java",
              "type": "String",
              "code": "        if (matcher == null) {\n            matcher = pattern.matcher(source);\n        } else {\n            matcher.reset(source);\n        }\n        String result = source;\n        if (matcher.find()) {"
            },
            {
              "step": 1,
              "variableName": "result",
              "startLine": 48,
              "startColumn": 16,
              "endLine": 48,
              "endColumn": 22,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/RegExpNameMapper.java",
              "type": "String",
              "code": "        if (matcher.find()) {\n            result = matcher.replaceFirst(replacement);\n        }\n        return result;\n    }\n}\n"
            },
            {
              "step": 2,
              "variableName": "transformer.transform(value)",
              "startLine": 37,
              "startColumn": 31,
              "endLine": 37,
              "endColumn": 59,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/ChainingTransformer.java",
              "type": "String",
              "code": "    public T transform(T original) {\n        T value = original;\n        for (Transformer<T, T> transformer : transformers) {\n            value = type.cast(transformer.transform(value));\n        }\n        return value;\n    }"
            },
            {
              "step": 3,
              "variableName": "type.cast(transformer.transform(value))",
              "startLine": 37,
              "startColumn": 21,
              "endLine": 37,
              "endColumn": 60,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/ChainingTransformer.java",
              "type": "String",
              "code": "    public T transform(T original) {\n        T value = original;\n        for (Transformer<T, T> transformer : transformers) {\n            value = type.cast(transformer.transform(value));\n        }\n        return value;\n    }"
            },
            {
              "step": 4,
              "variableName": "value",
              "startLine": 39,
              "startColumn": 16,
              "endLine": 39,
              "endColumn": 21,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/ChainingTransformer.java",
              "type": "String",
              "code": "        for (Transformer<T, T> transformer : transformers) {\n            value = type.cast(transformer.transform(value));\n        }\n        return value;\n    }\n\n    public void add(Transformer<T, T> transformer) {"
            },
            {
              "step": 5,
              "variableName": "describer.transform(this)",
              "startLine": 163,
              "startColumn": 16,
              "endLine": 163,
              "endColumn": 41,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/repositories/DefaultMavenArtifactRepository.java",
              "type": "String",
              "code": "\n    @Override\n    public String getDisplayName() {\n        return describer.transform(this);\n    }\n\n    @Override"
            },
            {
              "step": 6,
              "variableName": "displayName.getDisplayName()",
              "startLine": 53,
              "startColumn": 16,
              "endLine": 53,
              "endColumn": 44,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/DefaultDependencySet.java",
              "type": "String",
              "code": "\n    @Override\n    public String toString() {\n        return displayName.getDisplayName();\n    }\n\n    @Override"
            },
            {
              "step": 7,
              "variableName": "iterator.next().toString()",
              "startLine": 569,
              "startColumn": 27,
              "endLine": 569,
              "endColumn": 53,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/util/internal/CollectionUtils.java",
              "type": "String",
              "code": "        StringBuilder string = new StringBuilder();\n        Iterator<?> iterator = objects.iterator();\n        if (iterator.hasNext()) {\n            string.append(iterator.next().toString());\n            while (iterator.hasNext()) {\n                string.append(separator);\n                string.append(iterator.next().toString());"
            },
            {
              "step": 8,
              "variableName": "string",
              "startLine": 569,
              "startColumn": 13,
              "endLine": 569,
              "endColumn": 19,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/util/internal/CollectionUtils.java",
              "type": "StringBuilder",
              "code": "        StringBuilder string = new StringBuilder();\n        Iterator<?> iterator = objects.iterator();\n        if (iterator.hasNext()) {\n            string.append(iterator.next().toString());\n            while (iterator.hasNext()) {\n                string.append(separator);\n                string.append(iterator.next().toString());"
            },
            {
              "step": 9,
              "variableName": "string",
              "startLine": 575,
              "startColumn": 16,
              "endLine": 575,
              "endColumn": 22,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/util/internal/CollectionUtils.java",
              "type": "StringBuilder",
              "code": "                string.append(iterator.next().toString());\n            }\n        }\n        return string.toString();\n    }\n\n    /**"
            },
            {
              "step": 10,
              "variableName": "string.toString()",
              "startLine": 575,
              "startColumn": 16,
              "endLine": 575,
              "endColumn": 33,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/util/internal/CollectionUtils.java",
              "type": "String",
              "code": "                string.append(iterator.next().toString());\n            }\n        }\n        return string.toString();\n    }\n\n    /**"
            },
            {
              "step": 11,
              "variableName": "CollectionUtils.join(File.pathSeparator, classpath.getAsFiles())",
              "startLine": 157,
              "startColumn": 24,
              "endLine": 157,
              "endColumn": 88,
              "uri": "gradle-8.14.0/platforms/core-runtime/client-services/src/main/java/org/gradle/launcher/daemon/client/DefaultDaemonStarter.java",
              "type": "String",
              "code": "        daemonArgs.addAll(JpmsConfiguration.forDaemonProcesses(majorJavaVersion, daemonRequestContext.getNativeServicesMode().isPotentiallyEnabled()));\n        daemonArgs.addAll(daemonOpts);\n        daemonArgs.add(\"-cp\");\n        daemonArgs.add(CollectionUtils.join(File.pathSeparator, classpath.getAsFiles()));\n\n        if (Boolean.getBoolean(\"org.gradle.daemon.debug\")) {\n            daemonArgs.add(JvmOptions.getDebugArgument(true, true, \"5005\"));"
            },
            {
              "step": 12,
              "variableName": "daemonArgs",
              "startLine": 157,
              "startColumn": 9,
              "endLine": 157,
              "endColumn": 19,
              "uri": "gradle-8.14.0/platforms/core-runtime/client-services/src/main/java/org/gradle/launcher/daemon/client/DefaultDaemonStarter.java",
              "type": "ArrayList [<element>] : String",
              "code": "        daemonArgs.addAll(JpmsConfiguration.forDaemonProcesses(majorJavaVersion, daemonRequestContext.getNativeServicesMode().isPotentiallyEnabled()));\n        daemonArgs.addAll(daemonOpts);\n        daemonArgs.add(\"-cp\");\n        daemonArgs.add(CollectionUtils.join(File.pathSeparator, classpath.getAsFiles()));\n\n        if (Boolean.getBoolean(\"org.gradle.daemon.debug\")) {\n            daemonArgs.add(JvmOptions.getDebugArgument(true, true, \"5005\"));"
            },
            {
              "step": 13,
              "variableName": "daemonArgs",
              "startLine": 206,
              "startColumn": 13,
              "endLine": 206,
              "endColumn": 23,
              "uri": "gradle-8.14.0/platforms/core-runtime/client-services/src/main/java/org/gradle/launcher/daemon/client/DefaultDaemonStarter.java",
              "type": "ArrayList [<element>] : String",
              "code": "        InputStream stdInput = buffer.getInputStream();\n\n        return startProcess(\n            daemonArgs,\n            daemonDir.getVersionedDir(),\n            daemonParameters.getGradleUserHomeDir().getAbsoluteFile(),\n            stdInput"
            },
            {
              "step": 14,
              "variableName": "List<String> args",
              "startLine": 239,
              "startColumn": 44,
              "endLine": 239,
              "endColumn": 61,
              "uri": "gradle-8.14.0/platforms/core-runtime/client-services/src/main/java/org/gradle/launcher/daemon/client/DefaultDaemonStarter.java",
              "type": "ArrayList [<element>] : String",
              "code": "        }\n    }\n\n    private DaemonStartupInfo startProcess(List<String> args, File workingDir, File gradleUserHome, InputStream stdInput) {\n        LOGGER.debug(\"Starting daemon process: workingDir = {}, daemonArgs: {}\", workingDir, args);\n        Timer clock = Time.startTimer();\n        try {"
            },
            {
              "step": 15,
              "variableName": "args",
              "startLine": 250,
              "startColumn": 73,
              "endLine": 250,
              "endColumn": 77,
              "uri": "gradle-8.14.0/platforms/core-runtime/client-services/src/main/java/org/gradle/launcher/daemon/client/DefaultDaemonStarter.java",
              "type": "ArrayList [<element>] : String",
              "code": "            // This factory should be injected but leaves non-daemon threads running when used from the tooling API client\n            RootClientExecHandleBuilderFactory execActionFactory = RootClientExecHandleBuilderFactory.of(gradleUserHome);\n            try {\n                ExecHandle handle = new DaemonExecHandleBuilder().build(args, workingDir, outputConsumer, stdInput, execActionFactory.newExecHandleBuilder());\n\n                handle.start();\n                LOGGER.debug(\"Gradle daemon process is starting. Waiting for the daemon to detach...\");"
            },
            {
              "step": 16,
              "variableName": "List<String> args",
              "startLine": 28,
              "startColumn": 29,
              "endLine": 28,
              "endColumn": 46,
              "uri": "gradle-8.14.0/platforms/core-runtime/client-services/src/main/java/org/gradle/launcher/daemon/DaemonExecHandleBuilder.java",
              "type": "ArrayList [<element>] : String",
              "code": "import java.util.List;\n\npublic class DaemonExecHandleBuilder {\n    public ExecHandle build(List<String> args, File workingDir, DaemonOutputConsumer outputConsumer, InputStream inputStream, ClientExecHandleBuilder builder) {\n        builder.commandLine(args);\n        builder.setWorkingDir(workingDir);\n        builder.setStandardInput(inputStream);"
            },
            {
              "step": 17,
              "variableName": "args",
              "startLine": 29,
              "startColumn": 29,
              "endLine": 29,
              "endColumn": 33,
              "uri": "gradle-8.14.0/platforms/core-runtime/client-services/src/main/java/org/gradle/launcher/daemon/DaemonExecHandleBuilder.java",
              "type": "ArrayList [<element>] : String",
              "code": "\npublic class DaemonExecHandleBuilder {\n    public ExecHandle build(List<String> args, File workingDir, DaemonOutputConsumer outputConsumer, InputStream inputStream, ClientExecHandleBuilder builder) {\n        builder.commandLine(args);\n        builder.setWorkingDir(workingDir);\n        builder.setStandardInput(inputStream);\n        builder.redirectErrorStream();"
            },
            {
              "step": 18,
              "variableName": "Iterable<?> args",
              "startLine": 75,
              "startColumn": 48,
              "endLine": 75,
              "endColumn": 64,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/process/internal/DefaultClientExecHandleBuilder.java",
              "type": "ArrayList [<element>] : String",
              "code": "    }\n\n    @Override\n    public ClientExecHandleBuilder commandLine(Iterable<?> args) {\n        argumentsSpec.commandLine(args);\n        return this;\n    }"
            },
            {
              "step": 19,
              "variableName": "args",
              "startLine": 76,
              "startColumn": 35,
              "endLine": 76,
              "endColumn": 39,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/process/internal/DefaultClientExecHandleBuilder.java",
              "type": "ArrayList [<element>] : String",
              "code": "\n    @Override\n    public ClientExecHandleBuilder commandLine(Iterable<?> args) {\n        argumentsSpec.commandLine(args);\n        return this;\n    }\n"
            },
            {
              "step": 20,
              "variableName": "Iterable<?> args",
              "startLine": 59,
              "startColumn": 45,
              "endLine": 59,
              "endColumn": 61,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/process/internal/ProcessArgumentsSpec.java",
              "type": "ArrayList [<element>] : String",
              "code": "        return this;\n    }\n\n    public ProcessArgumentsSpec commandLine(Iterable<?> args) {\n        List<Object> argsList = Lists.newArrayList(args);\n        hasExecutable.setExecutable(argsList.get(0));\n        setArgs(argsList.subList(1, argsList.size()));"
            },
            {
              "step": 21,
              "variableName": "args",
              "startLine": 60,
              "startColumn": 52,
              "endLine": 60,
              "endColumn": 56,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/process/internal/ProcessArgumentsSpec.java",
              "type": "ArrayList [<element>] : String",
              "code": "    }\n\n    public ProcessArgumentsSpec commandLine(Iterable<?> args) {\n        List<Object> argsList = Lists.newArrayList(args);\n        hasExecutable.setExecutable(argsList.get(0));\n        setArgs(argsList.subList(1, argsList.size()));\n        return this;"
            },
            {
              "step": 22,
              "variableName": "Lists.newArrayList(args)",
              "startLine": 60,
              "startColumn": 33,
              "endLine": 60,
              "endColumn": 57,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/process/internal/ProcessArgumentsSpec.java",
              "type": "ArrayList [<element>] : String",
              "code": "    }\n\n    public ProcessArgumentsSpec commandLine(Iterable<?> args) {\n        List<Object> argsList = Lists.newArrayList(args);\n        hasExecutable.setExecutable(argsList.get(0));\n        setArgs(argsList.subList(1, argsList.size()));\n        return this;"
            },
            {
              "step": 23,
              "variableName": "argsList",
              "startLine": 61,
              "startColumn": 37,
              "endLine": 61,
              "endColumn": 45,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/process/internal/ProcessArgumentsSpec.java",
              "type": "ArrayList [<element>] : String",
              "code": "\n    public ProcessArgumentsSpec commandLine(Iterable<?> args) {\n        List<Object> argsList = Lists.newArrayList(args);\n        hasExecutable.setExecutable(argsList.get(0));\n        setArgs(argsList.subList(1, argsList.size()));\n        return this;\n    }"
            },
            {
              "step": 24,
              "variableName": "argsList.get(0)",
              "startLine": 61,
              "startColumn": 37,
              "endLine": 61,
              "endColumn": 52,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/process/internal/ProcessArgumentsSpec.java",
              "type": "String",
              "code": "\n    public ProcessArgumentsSpec commandLine(Iterable<?> args) {\n        List<Object> argsList = Lists.newArrayList(args);\n        hasExecutable.setExecutable(argsList.get(0));\n        setArgs(argsList.subList(1, argsList.size()));\n        return this;\n    }"
            },
            {
              "step": 25,
              "variableName": "Object executable",
              "startLine": 266,
              "startColumn": 31,
              "endLine": 266,
              "endColumn": 48,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/process/internal/JavaExecHandleBuilder.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public void setExecutable(Object executable) {\n        javaOptions.setExecutable(executable);\n    }\n"
            },
            {
              "step": 26,
              "variableName": "executable",
              "startLine": 267,
              "startColumn": 35,
              "endLine": 267,
              "endColumn": 45,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/process/internal/JavaExecHandleBuilder.java",
              "type": "",
              "code": "\n    @Override\n    public void setExecutable(Object executable) {\n        javaOptions.setExecutable(executable);\n    }\n\n    public void setExecutable(String executable) {"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "src",
              "startLine": 115,
              "startColumn": 13,
              "endLine": 115,
              "endColumn": 16,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "Object",
              "code": "    }\n\n    private static void appendDisplayName(Object src, StringBuilder stringBuilder) {\n        if (src instanceof Describable) {\n            Describable describable = (Describable) src;\n            stringBuilder.append(describable.getDisplayName());\n        } else {"
            },
            {
              "step": 1,
              "variableName": "src",
              "startLine": 119,
              "startColumn": 34,
              "endLine": 119,
              "endColumn": 37,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "Object",
              "code": "            Describable describable = (Describable) src;\n            stringBuilder.append(describable.getDisplayName());\n        } else {\n            stringBuilder.append(src.toString());\n        }\n    }\n"
            },
            {
              "step": 2,
              "variableName": "toString",
              "startLine": 397,
              "startColumn": 19,
              "endLine": 397,
              "endColumn": 27,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "TestFile",
              "code": "    }\n\n    @Override\n    public String toString() {\n        return getPath();\n    }\n"
            },
            {
              "step": 3,
              "variableName": "getPath()",
              "startLine": 398,
              "startColumn": 16,
              "endLine": 398,
              "endColumn": 25,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "TestFile",
              "code": "\n    @Override\n    public String toString() {\n        return getPath();\n    }\n\n    public TestFile writelns(Iterable<String> lines) {"
            },
            {
              "step": 4,
              "variableName": "getPath()",
              "startLine": 398,
              "startColumn": 16,
              "endLine": 398,
              "endColumn": 25,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "String",
              "code": "\n    @Override\n    public String toString() {\n        return getPath();\n    }\n\n    public TestFile writelns(Iterable<String> lines) {"
            },
            {
              "step": 5,
              "variableName": "src.toString()",
              "startLine": 119,
              "startColumn": 34,
              "endLine": 119,
              "endColumn": 48,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "String",
              "code": "            Describable describable = (Describable) src;\n            stringBuilder.append(describable.getDisplayName());\n        } else {\n            stringBuilder.append(src.toString());\n        }\n    }\n"
            },
            {
              "step": 6,
              "variableName": "stringBuilder",
              "startLine": 119,
              "startColumn": 13,
              "endLine": 119,
              "endColumn": 26,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "StringBuilder",
              "code": "            Describable describable = (Describable) src;\n            stringBuilder.append(describable.getDisplayName());\n        } else {\n            stringBuilder.append(src.toString());\n        }\n    }\n"
            },
            {
              "step": 7,
              "variableName": "builder",
              "startLine": 159,
              "startColumn": 44,
              "endLine": 159,
              "endColumn": 51,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "StringBuilder",
              "code": "                return displayName.toString();\n            }\n            StringBuilder builder = new StringBuilder(32);\n            appendDisplayName(displayName, builder);\n            return builder.toString();\n        }\n"
            },
            {
              "step": 8,
              "variableName": "builder",
              "startLine": 160,
              "startColumn": 20,
              "endLine": 160,
              "endColumn": 27,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "StringBuilder",
              "code": "            }\n            StringBuilder builder = new StringBuilder(32);\n            appendDisplayName(displayName, builder);\n            return builder.toString();\n        }\n\n        @Override"
            },
            {
              "step": 9,
              "variableName": "builder.toString()",
              "startLine": 160,
              "startColumn": 20,
              "endLine": 160,
              "endColumn": 38,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "String",
              "code": "            }\n            StringBuilder builder = new StringBuilder(32);\n            appendDisplayName(displayName, builder);\n            return builder.toString();\n        }\n\n        @Override"
            },
            {
              "step": 10,
              "variableName": "displayName.getDisplayName()",
              "startLine": 67,
              "startColumn": 16,
              "endLine": 67,
              "endColumn": 44,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/DefaultPublishArtifactSet.java",
              "type": "String",
              "code": "\n    @Override\n    public String toString() {\n        return displayName.getDisplayName();\n    }\n\n    @Override"
            },
            {
              "step": 11,
              "variableName": "iterator.next().toString()",
              "startLine": 569,
              "startColumn": 27,
              "endLine": 569,
              "endColumn": 53,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/util/internal/CollectionUtils.java",
              "type": "String",
              "code": "        StringBuilder string = new StringBuilder();\n        Iterator<?> iterator = objects.iterator();\n        if (iterator.hasNext()) {\n            string.append(iterator.next().toString());\n            while (iterator.hasNext()) {\n                string.append(separator);\n                string.append(iterator.next().toString());"
            },
            {
              "step": 12,
              "variableName": "string",
              "startLine": 569,
              "startColumn": 13,
              "endLine": 569,
              "endColumn": 19,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/util/internal/CollectionUtils.java",
              "type": "StringBuilder",
              "code": "        StringBuilder string = new StringBuilder();\n        Iterator<?> iterator = objects.iterator();\n        if (iterator.hasNext()) {\n            string.append(iterator.next().toString());\n            while (iterator.hasNext()) {\n                string.append(separator);\n                string.append(iterator.next().toString());"
            },
            {
              "step": 13,
              "variableName": "string",
              "startLine": 575,
              "startColumn": 16,
              "endLine": 575,
              "endColumn": 22,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/util/internal/CollectionUtils.java",
              "type": "StringBuilder",
              "code": "                string.append(iterator.next().toString());\n            }\n        }\n        return string.toString();\n    }\n\n    /**"
            },
            {
              "step": 14,
              "variableName": "string.toString()",
              "startLine": 575,
              "startColumn": 16,
              "endLine": 575,
              "endColumn": 33,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/util/internal/CollectionUtils.java",
              "type": "String",
              "code": "                string.append(iterator.next().toString());\n            }\n        }\n        return string.toString();\n    }\n\n    /**"
            },
            {
              "step": 15,
              "variableName": "CollectionUtils.join(File.pathSeparator, classpath.getAsFiles())",
              "startLine": 157,
              "startColumn": 24,
              "endLine": 157,
              "endColumn": 88,
              "uri": "gradle-8.14.0/platforms/core-runtime/client-services/src/main/java/org/gradle/launcher/daemon/client/DefaultDaemonStarter.java",
              "type": "String",
              "code": "        daemonArgs.addAll(JpmsConfiguration.forDaemonProcesses(majorJavaVersion, daemonRequestContext.getNativeServicesMode().isPotentiallyEnabled()));\n        daemonArgs.addAll(daemonOpts);\n        daemonArgs.add(\"-cp\");\n        daemonArgs.add(CollectionUtils.join(File.pathSeparator, classpath.getAsFiles()));\n\n        if (Boolean.getBoolean(\"org.gradle.daemon.debug\")) {\n            daemonArgs.add(JvmOptions.getDebugArgument(true, true, \"5005\"));"
            },
            {
              "step": 16,
              "variableName": "daemonArgs",
              "startLine": 157,
              "startColumn": 9,
              "endLine": 157,
              "endColumn": 19,
              "uri": "gradle-8.14.0/platforms/core-runtime/client-services/src/main/java/org/gradle/launcher/daemon/client/DefaultDaemonStarter.java",
              "type": "ArrayList [<element>] : String",
              "code": "        daemonArgs.addAll(JpmsConfiguration.forDaemonProcesses(majorJavaVersion, daemonRequestContext.getNativeServicesMode().isPotentiallyEnabled()));\n        daemonArgs.addAll(daemonOpts);\n        daemonArgs.add(\"-cp\");\n        daemonArgs.add(CollectionUtils.join(File.pathSeparator, classpath.getAsFiles()));\n\n        if (Boolean.getBoolean(\"org.gradle.daemon.debug\")) {\n            daemonArgs.add(JvmOptions.getDebugArgument(true, true, \"5005\"));"
            },
            {
              "step": 17,
              "variableName": "daemonArgs",
              "startLine": 206,
              "startColumn": 13,
              "endLine": 206,
              "endColumn": 23,
              "uri": "gradle-8.14.0/platforms/core-runtime/client-services/src/main/java/org/gradle/launcher/daemon/client/DefaultDaemonStarter.java",
              "type": "ArrayList [<element>] : String",
              "code": "        InputStream stdInput = buffer.getInputStream();\n\n        return startProcess(\n            daemonArgs,\n            daemonDir.getVersionedDir(),\n            daemonParameters.getGradleUserHomeDir().getAbsoluteFile(),\n            stdInput"
            },
            {
              "step": 18,
              "variableName": "List<String> args",
              "startLine": 239,
              "startColumn": 44,
              "endLine": 239,
              "endColumn": 61,
              "uri": "gradle-8.14.0/platforms/core-runtime/client-services/src/main/java/org/gradle/launcher/daemon/client/DefaultDaemonStarter.java",
              "type": "ArrayList [<element>] : String",
              "code": "        }\n    }\n\n    private DaemonStartupInfo startProcess(List<String> args, File workingDir, File gradleUserHome, InputStream stdInput) {\n        LOGGER.debug(\"Starting daemon process: workingDir = {}, daemonArgs: {}\", workingDir, args);\n        Timer clock = Time.startTimer();\n        try {"
            },
            {
              "step": 19,
              "variableName": "args",
              "startLine": 250,
              "startColumn": 73,
              "endLine": 250,
              "endColumn": 77,
              "uri": "gradle-8.14.0/platforms/core-runtime/client-services/src/main/java/org/gradle/launcher/daemon/client/DefaultDaemonStarter.java",
              "type": "ArrayList [<element>] : String",
              "code": "            // This factory should be injected but leaves non-daemon threads running when used from the tooling API client\n            RootClientExecHandleBuilderFactory execActionFactory = RootClientExecHandleBuilderFactory.of(gradleUserHome);\n            try {\n                ExecHandle handle = new DaemonExecHandleBuilder().build(args, workingDir, outputConsumer, stdInput, execActionFactory.newExecHandleBuilder());\n\n                handle.start();\n                LOGGER.debug(\"Gradle daemon process is starting. Waiting for the daemon to detach...\");"
            },
            {
              "step": 20,
              "variableName": "List<String> args",
              "startLine": 28,
              "startColumn": 29,
              "endLine": 28,
              "endColumn": 46,
              "uri": "gradle-8.14.0/platforms/core-runtime/client-services/src/main/java/org/gradle/launcher/daemon/DaemonExecHandleBuilder.java",
              "type": "ArrayList [<element>] : String",
              "code": "import java.util.List;\n\npublic class DaemonExecHandleBuilder {\n    public ExecHandle build(List<String> args, File workingDir, DaemonOutputConsumer outputConsumer, InputStream inputStream, ClientExecHandleBuilder builder) {\n        builder.commandLine(args);\n        builder.setWorkingDir(workingDir);\n        builder.setStandardInput(inputStream);"
            },
            {
              "step": 21,
              "variableName": "args",
              "startLine": 29,
              "startColumn": 29,
              "endLine": 29,
              "endColumn": 33,
              "uri": "gradle-8.14.0/platforms/core-runtime/client-services/src/main/java/org/gradle/launcher/daemon/DaemonExecHandleBuilder.java",
              "type": "ArrayList [<element>] : String",
              "code": "\npublic class DaemonExecHandleBuilder {\n    public ExecHandle build(List<String> args, File workingDir, DaemonOutputConsumer outputConsumer, InputStream inputStream, ClientExecHandleBuilder builder) {\n        builder.commandLine(args);\n        builder.setWorkingDir(workingDir);\n        builder.setStandardInput(inputStream);\n        builder.redirectErrorStream();"
            },
            {
              "step": 22,
              "variableName": "Iterable<?> args",
              "startLine": 75,
              "startColumn": 48,
              "endLine": 75,
              "endColumn": 64,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/process/internal/DefaultClientExecHandleBuilder.java",
              "type": "ArrayList [<element>] : String",
              "code": "    }\n\n    @Override\n    public ClientExecHandleBuilder commandLine(Iterable<?> args) {\n        argumentsSpec.commandLine(args);\n        return this;\n    }"
            },
            {
              "step": 23,
              "variableName": "args",
              "startLine": 76,
              "startColumn": 35,
              "endLine": 76,
              "endColumn": 39,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/process/internal/DefaultClientExecHandleBuilder.java",
              "type": "ArrayList [<element>] : String",
              "code": "\n    @Override\n    public ClientExecHandleBuilder commandLine(Iterable<?> args) {\n        argumentsSpec.commandLine(args);\n        return this;\n    }\n"
            },
            {
              "step": 24,
              "variableName": "Iterable<?> args",
              "startLine": 59,
              "startColumn": 45,
              "endLine": 59,
              "endColumn": 61,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/process/internal/ProcessArgumentsSpec.java",
              "type": "ArrayList [<element>] : String",
              "code": "        return this;\n    }\n\n    public ProcessArgumentsSpec commandLine(Iterable<?> args) {\n        List<Object> argsList = Lists.newArrayList(args);\n        hasExecutable.setExecutable(argsList.get(0));\n        setArgs(argsList.subList(1, argsList.size()));"
            },
            {
              "step": 25,
              "variableName": "args",
              "startLine": 60,
              "startColumn": 52,
              "endLine": 60,
              "endColumn": 56,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/process/internal/ProcessArgumentsSpec.java",
              "type": "ArrayList [<element>] : String",
              "code": "    }\n\n    public ProcessArgumentsSpec commandLine(Iterable<?> args) {\n        List<Object> argsList = Lists.newArrayList(args);\n        hasExecutable.setExecutable(argsList.get(0));\n        setArgs(argsList.subList(1, argsList.size()));\n        return this;"
            },
            {
              "step": 26,
              "variableName": "Lists.newArrayList(args)",
              "startLine": 60,
              "startColumn": 33,
              "endLine": 60,
              "endColumn": 57,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/process/internal/ProcessArgumentsSpec.java",
              "type": "ArrayList [<element>] : String",
              "code": "    }\n\n    public ProcessArgumentsSpec commandLine(Iterable<?> args) {\n        List<Object> argsList = Lists.newArrayList(args);\n        hasExecutable.setExecutable(argsList.get(0));\n        setArgs(argsList.subList(1, argsList.size()));\n        return this;"
            },
            {
              "step": 27,
              "variableName": "argsList",
              "startLine": 61,
              "startColumn": 37,
              "endLine": 61,
              "endColumn": 45,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/process/internal/ProcessArgumentsSpec.java",
              "type": "ArrayList [<element>] : String",
              "code": "\n    public ProcessArgumentsSpec commandLine(Iterable<?> args) {\n        List<Object> argsList = Lists.newArrayList(args);\n        hasExecutable.setExecutable(argsList.get(0));\n        setArgs(argsList.subList(1, argsList.size()));\n        return this;\n    }"
            },
            {
              "step": 28,
              "variableName": "argsList.get(0)",
              "startLine": 61,
              "startColumn": 37,
              "endLine": 61,
              "endColumn": 52,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/process/internal/ProcessArgumentsSpec.java",
              "type": "String",
              "code": "\n    public ProcessArgumentsSpec commandLine(Iterable<?> args) {\n        List<Object> argsList = Lists.newArrayList(args);\n        hasExecutable.setExecutable(argsList.get(0));\n        setArgs(argsList.subList(1, argsList.size()));\n        return this;\n    }"
            },
            {
              "step": 29,
              "variableName": "Object executable",
              "startLine": 266,
              "startColumn": 31,
              "endLine": 266,
              "endColumn": 48,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/process/internal/JavaExecHandleBuilder.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public void setExecutable(Object executable) {\n        javaOptions.setExecutable(executable);\n    }\n"
            },
            {
              "step": 30,
              "variableName": "executable",
              "startLine": 267,
              "startColumn": 35,
              "endLine": 267,
              "endColumn": 45,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/process/internal/JavaExecHandleBuilder.java",
              "type": "",
              "code": "\n    @Override\n    public void setExecutable(Object executable) {\n        javaOptions.setExecutable(executable);\n    }\n\n    public void setExecutable(String executable) {"
            }
          ],
          "label": "No"
        }
      ]
    }
  ],
  "532": [
    {
      "resultIndex": 13,
      "fileName": "HttpClientConfigurer.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "httpHeaderCredentials",
              "startLine": 220,
              "startColumn": 90,
              "endLine": 220,
              "endColumn": 111,
              "uri": "gradle-8.14.0/platforms/software/resources-http/src/main/java/org/gradle/internal/resource/transport/http/HttpClientConfigurer.java",
              "type": "HttpHeaderCredentials",
              "code": "                    Credentials httpCredentials = new HttpClientHttpHeaderCredentials(httpHeaderCredentials.getName(), httpHeaderCredentials.getValue());\n                    credentialsProvider.setCredentials(new AuthScope(host, port, AuthScope.ANY_REALM, scheme), httpCredentials);\n\n                    LOGGER.debug(\"Using {} for authenticating against '{}:{}' using {}\", httpHeaderCredentials, host, port, scheme);\n                } else if (credentials instanceof PasswordCredentials || credentials instanceof HttpProxySettings.HttpProxyCredentials) {\n                    String username;\n                    String password;"
            },
            {
              "step": 1,
              "variableName": "LOGGER.debug(\"Using {} for authenticating against '{}:{}' using {}\", httpHeaderCredentials, host, port, scheme)",
              "startLine": 220,
              "startColumn": 21,
              "endLine": 220,
              "endColumn": 132,
              "uri": "gradle-8.14.0/platforms/software/resources-http/src/main/java/org/gradle/internal/resource/transport/http/HttpClientConfigurer.java",
              "type": "Object[] [[]] : HttpHeaderCredentials",
              "code": "                    Credentials httpCredentials = new HttpClientHttpHeaderCredentials(httpHeaderCredentials.getName(), httpHeaderCredentials.getValue());\n                    credentialsProvider.setCredentials(new AuthScope(host, port, AuthScope.ANY_REALM, scheme), httpCredentials);\n\n                    LOGGER.debug(\"Using {} for authenticating against '{}:{}' using {}\", httpHeaderCredentials, host, port, scheme);\n                } else if (credentials instanceof PasswordCredentials || credentials instanceof HttpProxySettings.HttpProxyCredentials) {\n                    String username;\n                    String password;"
            },
            {
              "step": 2,
              "variableName": "LOGGER.debug(\"Using {} for authenticating against '{}:{}' using {}\", httpHeaderCredentials, host, port, scheme)",
              "startLine": 220,
              "startColumn": 21,
              "endLine": 220,
              "endColumn": 132,
              "uri": "gradle-8.14.0/platforms/software/resources-http/src/main/java/org/gradle/internal/resource/transport/http/HttpClientConfigurer.java",
              "type": "",
              "code": "                    Credentials httpCredentials = new HttpClientHttpHeaderCredentials(httpHeaderCredentials.getName(), httpHeaderCredentials.getValue());\n                    credentialsProvider.setCredentials(new AuthScope(host, port, AuthScope.ANY_REALM, scheme), httpCredentials);\n\n                    LOGGER.debug(\"Using {} for authenticating against '{}:{}' using {}\", httpHeaderCredentials, host, port, scheme);\n                } else if (credentials instanceof PasswordCredentials || credentials instanceof HttpProxySettings.HttpProxyCredentials) {\n                    String username;\n                    String password;"
            }
          ],
          "label": "Yes"
        }
      ]
    },
    {
      "resultIndex": 14,
      "fileName": "HttpClientConfigurer.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "credentials",
              "startLine": 239,
              "startColumn": 101,
              "endLine": 239,
              "endColumn": 112,
              "uri": "gradle-8.14.0/platforms/software/resources-http/src/main/java/org/gradle/internal/resource/transport/http/HttpClientConfigurer.java",
              "type": "Credentials",
              "code": "                        Credentials httpCredentials = new NTCredentials(ntlmCredentials.getUsername(), ntlmCredentials.getPassword(), ntlmCredentials.getWorkstation(), ntlmCredentials.getDomain());\n                        credentialsProvider.setCredentials(new AuthScope(host, port, AuthScope.ANY_REALM, AuthSchemes.NTLM), httpCredentials);\n\n                        LOGGER.debug(\"Using {} and {} for authenticating against '{}:{}' using {}\", credentials, ntlmCredentials, host, port, AuthSchemes.NTLM);\n                    }\n\n                    Credentials httpCredentials = new UsernamePasswordCredentials(username, password);"
            },
            {
              "step": 1,
              "variableName": "LOGGER.debug(\"Using {} and {} for authenticating against '{}:{}' using {}\", credentials, ntlmCredentials, host, port, AuthSchemes.NTLM)",
              "startLine": 239,
              "startColumn": 25,
              "endLine": 239,
              "endColumn": 160,
              "uri": "gradle-8.14.0/platforms/software/resources-http/src/main/java/org/gradle/internal/resource/transport/http/HttpClientConfigurer.java",
              "type": "Object[] [[]] : Credentials",
              "code": "                        Credentials httpCredentials = new NTCredentials(ntlmCredentials.getUsername(), ntlmCredentials.getPassword(), ntlmCredentials.getWorkstation(), ntlmCredentials.getDomain());\n                        credentialsProvider.setCredentials(new AuthScope(host, port, AuthScope.ANY_REALM, AuthSchemes.NTLM), httpCredentials);\n\n                        LOGGER.debug(\"Using {} and {} for authenticating against '{}:{}' using {}\", credentials, ntlmCredentials, host, port, AuthSchemes.NTLM);\n                    }\n\n                    Credentials httpCredentials = new UsernamePasswordCredentials(username, password);"
            },
            {
              "step": 2,
              "variableName": "LOGGER.debug(\"Using {} and {} for authenticating against '{}:{}' using {}\", credentials, ntlmCredentials, host, port, AuthSchemes.NTLM)",
              "startLine": 239,
              "startColumn": 25,
              "endLine": 239,
              "endColumn": 160,
              "uri": "gradle-8.14.0/platforms/software/resources-http/src/main/java/org/gradle/internal/resource/transport/http/HttpClientConfigurer.java",
              "type": "",
              "code": "                        Credentials httpCredentials = new NTCredentials(ntlmCredentials.getUsername(), ntlmCredentials.getPassword(), ntlmCredentials.getWorkstation(), ntlmCredentials.getDomain());\n                        credentialsProvider.setCredentials(new AuthScope(host, port, AuthScope.ANY_REALM, AuthSchemes.NTLM), httpCredentials);\n\n                        LOGGER.debug(\"Using {} and {} for authenticating against '{}:{}' using {}\", credentials, ntlmCredentials, host, port, AuthSchemes.NTLM);\n                    }\n\n                    Credentials httpCredentials = new UsernamePasswordCredentials(username, password);"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "ntlmCredentials",
              "startLine": 239,
              "startColumn": 114,
              "endLine": 239,
              "endColumn": 129,
              "uri": "gradle-8.14.0/platforms/software/resources-http/src/main/java/org/gradle/internal/resource/transport/http/HttpClientConfigurer.java",
              "type": "NTLMCredentials",
              "code": "                        Credentials httpCredentials = new NTCredentials(ntlmCredentials.getUsername(), ntlmCredentials.getPassword(), ntlmCredentials.getWorkstation(), ntlmCredentials.getDomain());\n                        credentialsProvider.setCredentials(new AuthScope(host, port, AuthScope.ANY_REALM, AuthSchemes.NTLM), httpCredentials);\n\n                        LOGGER.debug(\"Using {} and {} for authenticating against '{}:{}' using {}\", credentials, ntlmCredentials, host, port, AuthSchemes.NTLM);\n                    }\n\n                    Credentials httpCredentials = new UsernamePasswordCredentials(username, password);"
            },
            {
              "step": 1,
              "variableName": "LOGGER.debug(\"Using {} and {} for authenticating against '{}:{}' using {}\", credentials, ntlmCredentials, host, port, AuthSchemes.NTLM)",
              "startLine": 239,
              "startColumn": 25,
              "endLine": 239,
              "endColumn": 160,
              "uri": "gradle-8.14.0/platforms/software/resources-http/src/main/java/org/gradle/internal/resource/transport/http/HttpClientConfigurer.java",
              "type": "Object[] [[]] : NTLMCredentials",
              "code": "                        Credentials httpCredentials = new NTCredentials(ntlmCredentials.getUsername(), ntlmCredentials.getPassword(), ntlmCredentials.getWorkstation(), ntlmCredentials.getDomain());\n                        credentialsProvider.setCredentials(new AuthScope(host, port, AuthScope.ANY_REALM, AuthSchemes.NTLM), httpCredentials);\n\n                        LOGGER.debug(\"Using {} and {} for authenticating against '{}:{}' using {}\", credentials, ntlmCredentials, host, port, AuthSchemes.NTLM);\n                    }\n\n                    Credentials httpCredentials = new UsernamePasswordCredentials(username, password);"
            },
            {
              "step": 2,
              "variableName": "LOGGER.debug(\"Using {} and {} for authenticating against '{}:{}' using {}\", credentials, ntlmCredentials, host, port, AuthSchemes.NTLM)",
              "startLine": 239,
              "startColumn": 25,
              "endLine": 239,
              "endColumn": 160,
              "uri": "gradle-8.14.0/platforms/software/resources-http/src/main/java/org/gradle/internal/resource/transport/http/HttpClientConfigurer.java",
              "type": "",
              "code": "                        Credentials httpCredentials = new NTCredentials(ntlmCredentials.getUsername(), ntlmCredentials.getPassword(), ntlmCredentials.getWorkstation(), ntlmCredentials.getDomain());\n                        credentialsProvider.setCredentials(new AuthScope(host, port, AuthScope.ANY_REALM, AuthSchemes.NTLM), httpCredentials);\n\n                        LOGGER.debug(\"Using {} and {} for authenticating against '{}:{}' using {}\", credentials, ntlmCredentials, host, port, AuthSchemes.NTLM);\n                    }\n\n                    Credentials httpCredentials = new UsernamePasswordCredentials(username, password);"
            }
          ],
          "label": "Yes"
        }
      ]
    },
    {
      "resultIndex": 15,
      "fileName": "HttpClientConfigurer.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "credentials",
              "startLine": 244,
              "startColumn": 90,
              "endLine": 244,
              "endColumn": 101,
              "uri": "gradle-8.14.0/platforms/software/resources-http/src/main/java/org/gradle/internal/resource/transport/http/HttpClientConfigurer.java",
              "type": "Credentials",
              "code": "\n                    Credentials httpCredentials = new UsernamePasswordCredentials(username, password);\n                    credentialsProvider.setCredentials(new AuthScope(host, port, AuthScope.ANY_REALM, scheme), httpCredentials);\n                    LOGGER.debug(\"Using {} for authenticating against '{}:{}' using {}\", credentials, host, port, scheme);\n                } else {\n                    throw new IllegalArgumentException(String.format(\"Credentials must be an instance of: %s or %s\", PasswordCredentials.class.getCanonicalName(), HttpHeaderCredentials.class.getCanonicalName()));\n                }"
            },
            {
              "step": 1,
              "variableName": "LOGGER.debug(\"Using {} for authenticating against '{}:{}' using {}\", credentials, host, port, scheme)",
              "startLine": 244,
              "startColumn": 21,
              "endLine": 244,
              "endColumn": 122,
              "uri": "gradle-8.14.0/platforms/software/resources-http/src/main/java/org/gradle/internal/resource/transport/http/HttpClientConfigurer.java",
              "type": "Object[] [[]] : Credentials",
              "code": "\n                    Credentials httpCredentials = new UsernamePasswordCredentials(username, password);\n                    credentialsProvider.setCredentials(new AuthScope(host, port, AuthScope.ANY_REALM, scheme), httpCredentials);\n                    LOGGER.debug(\"Using {} for authenticating against '{}:{}' using {}\", credentials, host, port, scheme);\n                } else {\n                    throw new IllegalArgumentException(String.format(\"Credentials must be an instance of: %s or %s\", PasswordCredentials.class.getCanonicalName(), HttpHeaderCredentials.class.getCanonicalName()));\n                }"
            },
            {
              "step": 2,
              "variableName": "LOGGER.debug(\"Using {} for authenticating against '{}:{}' using {}\", credentials, host, port, scheme)",
              "startLine": 244,
              "startColumn": 21,
              "endLine": 244,
              "endColumn": 122,
              "uri": "gradle-8.14.0/platforms/software/resources-http/src/main/java/org/gradle/internal/resource/transport/http/HttpClientConfigurer.java",
              "type": "",
              "code": "\n                    Credentials httpCredentials = new UsernamePasswordCredentials(username, password);\n                    credentialsProvider.setCredentials(new AuthScope(host, port, AuthScope.ANY_REALM, scheme), httpCredentials);\n                    LOGGER.debug(\"Using {} for authenticating against '{}:{}' using {}\", credentials, host, port, scheme);\n                } else {\n                    throw new IllegalArgumentException(String.format(\"Credentials must be an instance of: %s or %s\", PasswordCredentials.class.getCanonicalName(), HttpHeaderCredentials.class.getCanonicalName()));\n                }"
            }
          ],
          "label": "Yes"
        }
      ]
    },
    {
      "resultIndex": 16,
      "fileName": "BuildOperationAwareLogger.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "httpHeaderCredentials",
              "startLine": 220,
              "startColumn": 90,
              "endLine": 220,
              "endColumn": 111,
              "uri": "gradle-8.14.0/platforms/software/resources-http/src/main/java/org/gradle/internal/resource/transport/http/HttpClientConfigurer.java",
              "type": "HttpHeaderCredentials",
              "code": "                    Credentials httpCredentials = new HttpClientHttpHeaderCredentials(httpHeaderCredentials.getName(), httpHeaderCredentials.getValue());\n                    credentialsProvider.setCredentials(new AuthScope(host, port, AuthScope.ANY_REALM, scheme), httpCredentials);\n\n                    LOGGER.debug(\"Using {} for authenticating against '{}:{}' using {}\", httpHeaderCredentials, host, port, scheme);\n                } else if (credentials instanceof PasswordCredentials || credentials instanceof HttpProxySettings.HttpProxyCredentials) {\n                    String username;\n                    String password;"
            },
            {
              "step": 1,
              "variableName": "LOGGER.debug(\"Using {} for authenticating against '{}:{}' using {}\", httpHeaderCredentials, host, port, scheme)",
              "startLine": 220,
              "startColumn": 21,
              "endLine": 220,
              "endColumn": 132,
              "uri": "gradle-8.14.0/platforms/software/resources-http/src/main/java/org/gradle/internal/resource/transport/http/HttpClientConfigurer.java",
              "type": "Object[] [[]] : HttpHeaderCredentials",
              "code": "                    Credentials httpCredentials = new HttpClientHttpHeaderCredentials(httpHeaderCredentials.getName(), httpHeaderCredentials.getValue());\n                    credentialsProvider.setCredentials(new AuthScope(host, port, AuthScope.ANY_REALM, scheme), httpCredentials);\n\n                    LOGGER.debug(\"Using {} for authenticating against '{}:{}' using {}\", httpHeaderCredentials, host, port, scheme);\n                } else if (credentials instanceof PasswordCredentials || credentials instanceof HttpProxySettings.HttpProxyCredentials) {\n                    String username;\n                    String password;"
            },
            {
              "step": 2,
              "variableName": "Object... arguments",
              "startLine": 180,
              "startColumn": 38,
              "endLine": 180,
              "endColumn": 57,
              "uri": "gradle-8.14.0/platforms/core-runtime/logging/src/main/java/org/gradle/internal/logging/slf4j/BuildOperationAwareLogger.java",
              "type": "Object[] [[]] : HttpHeaderCredentials",
              "code": "    }\n\n    @Override\n    public void debug(String format, Object... arguments) {\n        if (isDebugEnabled()) {\n            log(LogLevel.DEBUG, null, format, arguments);\n        }"
            },
            {
              "step": 3,
              "variableName": "arguments",
              "startLine": 182,
              "startColumn": 47,
              "endLine": 182,
              "endColumn": 56,
              "uri": "gradle-8.14.0/platforms/core-runtime/logging/src/main/java/org/gradle/internal/logging/slf4j/BuildOperationAwareLogger.java",
              "type": "",
              "code": "    @Override\n    public void debug(String format, Object... arguments) {\n        if (isDebugEnabled()) {\n            log(LogLevel.DEBUG, null, format, arguments);\n        }\n    }\n"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "credentials",
              "startLine": 239,
              "startColumn": 101,
              "endLine": 239,
              "endColumn": 112,
              "uri": "gradle-8.14.0/platforms/software/resources-http/src/main/java/org/gradle/internal/resource/transport/http/HttpClientConfigurer.java",
              "type": "Credentials",
              "code": "                        Credentials httpCredentials = new NTCredentials(ntlmCredentials.getUsername(), ntlmCredentials.getPassword(), ntlmCredentials.getWorkstation(), ntlmCredentials.getDomain());\n                        credentialsProvider.setCredentials(new AuthScope(host, port, AuthScope.ANY_REALM, AuthSchemes.NTLM), httpCredentials);\n\n                        LOGGER.debug(\"Using {} and {} for authenticating against '{}:{}' using {}\", credentials, ntlmCredentials, host, port, AuthSchemes.NTLM);\n                    }\n\n                    Credentials httpCredentials = new UsernamePasswordCredentials(username, password);"
            },
            {
              "step": 1,
              "variableName": "LOGGER.debug(\"Using {} and {} for authenticating against '{}:{}' using {}\", credentials, ntlmCredentials, host, port, AuthSchemes.NTLM)",
              "startLine": 239,
              "startColumn": 25,
              "endLine": 239,
              "endColumn": 160,
              "uri": "gradle-8.14.0/platforms/software/resources-http/src/main/java/org/gradle/internal/resource/transport/http/HttpClientConfigurer.java",
              "type": "Object[] [[]] : Credentials",
              "code": "                        Credentials httpCredentials = new NTCredentials(ntlmCredentials.getUsername(), ntlmCredentials.getPassword(), ntlmCredentials.getWorkstation(), ntlmCredentials.getDomain());\n                        credentialsProvider.setCredentials(new AuthScope(host, port, AuthScope.ANY_REALM, AuthSchemes.NTLM), httpCredentials);\n\n                        LOGGER.debug(\"Using {} and {} for authenticating against '{}:{}' using {}\", credentials, ntlmCredentials, host, port, AuthSchemes.NTLM);\n                    }\n\n                    Credentials httpCredentials = new UsernamePasswordCredentials(username, password);"
            },
            {
              "step": 2,
              "variableName": "Object... arguments",
              "startLine": 180,
              "startColumn": 38,
              "endLine": 180,
              "endColumn": 57,
              "uri": "gradle-8.14.0/platforms/core-runtime/logging/src/main/java/org/gradle/internal/logging/slf4j/BuildOperationAwareLogger.java",
              "type": "Object[] [[]] : Credentials",
              "code": "    }\n\n    @Override\n    public void debug(String format, Object... arguments) {\n        if (isDebugEnabled()) {\n            log(LogLevel.DEBUG, null, format, arguments);\n        }"
            },
            {
              "step": 3,
              "variableName": "arguments",
              "startLine": 182,
              "startColumn": 47,
              "endLine": 182,
              "endColumn": 56,
              "uri": "gradle-8.14.0/platforms/core-runtime/logging/src/main/java/org/gradle/internal/logging/slf4j/BuildOperationAwareLogger.java",
              "type": "",
              "code": "    @Override\n    public void debug(String format, Object... arguments) {\n        if (isDebugEnabled()) {\n            log(LogLevel.DEBUG, null, format, arguments);\n        }\n    }\n"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "ntlmCredentials",
              "startLine": 239,
              "startColumn": 114,
              "endLine": 239,
              "endColumn": 129,
              "uri": "gradle-8.14.0/platforms/software/resources-http/src/main/java/org/gradle/internal/resource/transport/http/HttpClientConfigurer.java",
              "type": "NTLMCredentials",
              "code": "                        Credentials httpCredentials = new NTCredentials(ntlmCredentials.getUsername(), ntlmCredentials.getPassword(), ntlmCredentials.getWorkstation(), ntlmCredentials.getDomain());\n                        credentialsProvider.setCredentials(new AuthScope(host, port, AuthScope.ANY_REALM, AuthSchemes.NTLM), httpCredentials);\n\n                        LOGGER.debug(\"Using {} and {} for authenticating against '{}:{}' using {}\", credentials, ntlmCredentials, host, port, AuthSchemes.NTLM);\n                    }\n\n                    Credentials httpCredentials = new UsernamePasswordCredentials(username, password);"
            },
            {
              "step": 1,
              "variableName": "LOGGER.debug(\"Using {} and {} for authenticating against '{}:{}' using {}\", credentials, ntlmCredentials, host, port, AuthSchemes.NTLM)",
              "startLine": 239,
              "startColumn": 25,
              "endLine": 239,
              "endColumn": 160,
              "uri": "gradle-8.14.0/platforms/software/resources-http/src/main/java/org/gradle/internal/resource/transport/http/HttpClientConfigurer.java",
              "type": "Object[] [[]] : NTLMCredentials",
              "code": "                        Credentials httpCredentials = new NTCredentials(ntlmCredentials.getUsername(), ntlmCredentials.getPassword(), ntlmCredentials.getWorkstation(), ntlmCredentials.getDomain());\n                        credentialsProvider.setCredentials(new AuthScope(host, port, AuthScope.ANY_REALM, AuthSchemes.NTLM), httpCredentials);\n\n                        LOGGER.debug(\"Using {} and {} for authenticating against '{}:{}' using {}\", credentials, ntlmCredentials, host, port, AuthSchemes.NTLM);\n                    }\n\n                    Credentials httpCredentials = new UsernamePasswordCredentials(username, password);"
            },
            {
              "step": 2,
              "variableName": "Object... arguments",
              "startLine": 180,
              "startColumn": 38,
              "endLine": 180,
              "endColumn": 57,
              "uri": "gradle-8.14.0/platforms/core-runtime/logging/src/main/java/org/gradle/internal/logging/slf4j/BuildOperationAwareLogger.java",
              "type": "Object[] [[]] : NTLMCredentials",
              "code": "    }\n\n    @Override\n    public void debug(String format, Object... arguments) {\n        if (isDebugEnabled()) {\n            log(LogLevel.DEBUG, null, format, arguments);\n        }"
            },
            {
              "step": 3,
              "variableName": "arguments",
              "startLine": 182,
              "startColumn": 47,
              "endLine": 182,
              "endColumn": 56,
              "uri": "gradle-8.14.0/platforms/core-runtime/logging/src/main/java/org/gradle/internal/logging/slf4j/BuildOperationAwareLogger.java",
              "type": "",
              "code": "    @Override\n    public void debug(String format, Object... arguments) {\n        if (isDebugEnabled()) {\n            log(LogLevel.DEBUG, null, format, arguments);\n        }\n    }\n"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "credentials",
              "startLine": 244,
              "startColumn": 90,
              "endLine": 244,
              "endColumn": 101,
              "uri": "gradle-8.14.0/platforms/software/resources-http/src/main/java/org/gradle/internal/resource/transport/http/HttpClientConfigurer.java",
              "type": "Credentials",
              "code": "\n                    Credentials httpCredentials = new UsernamePasswordCredentials(username, password);\n                    credentialsProvider.setCredentials(new AuthScope(host, port, AuthScope.ANY_REALM, scheme), httpCredentials);\n                    LOGGER.debug(\"Using {} for authenticating against '{}:{}' using {}\", credentials, host, port, scheme);\n                } else {\n                    throw new IllegalArgumentException(String.format(\"Credentials must be an instance of: %s or %s\", PasswordCredentials.class.getCanonicalName(), HttpHeaderCredentials.class.getCanonicalName()));\n                }"
            },
            {
              "step": 1,
              "variableName": "LOGGER.debug(\"Using {} for authenticating against '{}:{}' using {}\", credentials, host, port, scheme)",
              "startLine": 244,
              "startColumn": 21,
              "endLine": 244,
              "endColumn": 122,
              "uri": "gradle-8.14.0/platforms/software/resources-http/src/main/java/org/gradle/internal/resource/transport/http/HttpClientConfigurer.java",
              "type": "Object[] [[]] : Credentials",
              "code": "\n                    Credentials httpCredentials = new UsernamePasswordCredentials(username, password);\n                    credentialsProvider.setCredentials(new AuthScope(host, port, AuthScope.ANY_REALM, scheme), httpCredentials);\n                    LOGGER.debug(\"Using {} for authenticating against '{}:{}' using {}\", credentials, host, port, scheme);\n                } else {\n                    throw new IllegalArgumentException(String.format(\"Credentials must be an instance of: %s or %s\", PasswordCredentials.class.getCanonicalName(), HttpHeaderCredentials.class.getCanonicalName()));\n                }"
            },
            {
              "step": 2,
              "variableName": "Object... arguments",
              "startLine": 180,
              "startColumn": 38,
              "endLine": 180,
              "endColumn": 57,
              "uri": "gradle-8.14.0/platforms/core-runtime/logging/src/main/java/org/gradle/internal/logging/slf4j/BuildOperationAwareLogger.java",
              "type": "Object[] [[]] : Credentials",
              "code": "    }\n\n    @Override\n    public void debug(String format, Object... arguments) {\n        if (isDebugEnabled()) {\n            log(LogLevel.DEBUG, null, format, arguments);\n        }"
            },
            {
              "step": 3,
              "variableName": "arguments",
              "startLine": 182,
              "startColumn": 47,
              "endLine": 182,
              "endColumn": 56,
              "uri": "gradle-8.14.0/platforms/core-runtime/logging/src/main/java/org/gradle/internal/logging/slf4j/BuildOperationAwareLogger.java",
              "type": "",
              "code": "    @Override\n    public void debug(String format, Object... arguments) {\n        if (isDebugEnabled()) {\n            log(LogLevel.DEBUG, null, format, arguments);\n        }\n    }\n"
            }
          ],
          "label": "Yes"
        }
      ]
    },
    {
      "resultIndex": 17,
      "fileName": "DefaultContextAwareTaskLogger.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "httpHeaderCredentials",
              "startLine": 220,
              "startColumn": 90,
              "endLine": 220,
              "endColumn": 111,
              "uri": "gradle-8.14.0/platforms/software/resources-http/src/main/java/org/gradle/internal/resource/transport/http/HttpClientConfigurer.java",
              "type": "HttpHeaderCredentials",
              "code": "                    Credentials httpCredentials = new HttpClientHttpHeaderCredentials(httpHeaderCredentials.getName(), httpHeaderCredentials.getValue());\n                    credentialsProvider.setCredentials(new AuthScope(host, port, AuthScope.ANY_REALM, scheme), httpCredentials);\n\n                    LOGGER.debug(\"Using {} for authenticating against '{}:{}' using {}\", httpHeaderCredentials, host, port, scheme);\n                } else if (credentials instanceof PasswordCredentials || credentials instanceof HttpProxySettings.HttpProxyCredentials) {\n                    String username;\n                    String password;"
            },
            {
              "step": 1,
              "variableName": "LOGGER.debug(\"Using {} for authenticating against '{}:{}' using {}\", httpHeaderCredentials, host, port, scheme)",
              "startLine": 220,
              "startColumn": 21,
              "endLine": 220,
              "endColumn": 132,
              "uri": "gradle-8.14.0/platforms/software/resources-http/src/main/java/org/gradle/internal/resource/transport/http/HttpClientConfigurer.java",
              "type": "Object[] [[]] : HttpHeaderCredentials",
              "code": "                    Credentials httpCredentials = new HttpClientHttpHeaderCredentials(httpHeaderCredentials.getName(), httpHeaderCredentials.getValue());\n                    credentialsProvider.setCredentials(new AuthScope(host, port, AuthScope.ANY_REALM, scheme), httpCredentials);\n\n                    LOGGER.debug(\"Using {} for authenticating against '{}:{}' using {}\", httpHeaderCredentials, host, port, scheme);\n                } else if (credentials instanceof PasswordCredentials || credentials instanceof HttpProxySettings.HttpProxyCredentials) {\n                    String username;\n                    String password;"
            },
            {
              "step": 2,
              "variableName": "Object... arguments",
              "startLine": 212,
              "startColumn": 38,
              "endLine": 212,
              "endColumn": 57,
              "uri": "gradle-8.14.0/platforms/core-runtime/logging/src/main/java/org/gradle/internal/logging/slf4j/DefaultContextAwareTaskLogger.java",
              "type": "Object[] [[]] : HttpHeaderCredentials",
              "code": "    }\n\n    @Override\n    public void debug(String format, Object... arguments) {\n        if (isDebugEnabled()) {\n            log(LogLevel.DEBUG, null, format, arguments);\n        }"
            },
            {
              "step": 3,
              "variableName": "arguments",
              "startLine": 214,
              "startColumn": 47,
              "endLine": 214,
              "endColumn": 56,
              "uri": "gradle-8.14.0/platforms/core-runtime/logging/src/main/java/org/gradle/internal/logging/slf4j/DefaultContextAwareTaskLogger.java",
              "type": "",
              "code": "    @Override\n    public void debug(String format, Object... arguments) {\n        if (isDebugEnabled()) {\n            log(LogLevel.DEBUG, null, format, arguments);\n        }\n    }\n"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "credentials",
              "startLine": 239,
              "startColumn": 101,
              "endLine": 239,
              "endColumn": 112,
              "uri": "gradle-8.14.0/platforms/software/resources-http/src/main/java/org/gradle/internal/resource/transport/http/HttpClientConfigurer.java",
              "type": "Credentials",
              "code": "                        Credentials httpCredentials = new NTCredentials(ntlmCredentials.getUsername(), ntlmCredentials.getPassword(), ntlmCredentials.getWorkstation(), ntlmCredentials.getDomain());\n                        credentialsProvider.setCredentials(new AuthScope(host, port, AuthScope.ANY_REALM, AuthSchemes.NTLM), httpCredentials);\n\n                        LOGGER.debug(\"Using {} and {} for authenticating against '{}:{}' using {}\", credentials, ntlmCredentials, host, port, AuthSchemes.NTLM);\n                    }\n\n                    Credentials httpCredentials = new UsernamePasswordCredentials(username, password);"
            },
            {
              "step": 1,
              "variableName": "LOGGER.debug(\"Using {} and {} for authenticating against '{}:{}' using {}\", credentials, ntlmCredentials, host, port, AuthSchemes.NTLM)",
              "startLine": 239,
              "startColumn": 25,
              "endLine": 239,
              "endColumn": 160,
              "uri": "gradle-8.14.0/platforms/software/resources-http/src/main/java/org/gradle/internal/resource/transport/http/HttpClientConfigurer.java",
              "type": "Object[] [[]] : Credentials",
              "code": "                        Credentials httpCredentials = new NTCredentials(ntlmCredentials.getUsername(), ntlmCredentials.getPassword(), ntlmCredentials.getWorkstation(), ntlmCredentials.getDomain());\n                        credentialsProvider.setCredentials(new AuthScope(host, port, AuthScope.ANY_REALM, AuthSchemes.NTLM), httpCredentials);\n\n                        LOGGER.debug(\"Using {} and {} for authenticating against '{}:{}' using {}\", credentials, ntlmCredentials, host, port, AuthSchemes.NTLM);\n                    }\n\n                    Credentials httpCredentials = new UsernamePasswordCredentials(username, password);"
            },
            {
              "step": 2,
              "variableName": "Object... arguments",
              "startLine": 212,
              "startColumn": 38,
              "endLine": 212,
              "endColumn": 57,
              "uri": "gradle-8.14.0/platforms/core-runtime/logging/src/main/java/org/gradle/internal/logging/slf4j/DefaultContextAwareTaskLogger.java",
              "type": "Object[] [[]] : Credentials",
              "code": "    }\n\n    @Override\n    public void debug(String format, Object... arguments) {\n        if (isDebugEnabled()) {\n            log(LogLevel.DEBUG, null, format, arguments);\n        }"
            },
            {
              "step": 3,
              "variableName": "arguments",
              "startLine": 214,
              "startColumn": 47,
              "endLine": 214,
              "endColumn": 56,
              "uri": "gradle-8.14.0/platforms/core-runtime/logging/src/main/java/org/gradle/internal/logging/slf4j/DefaultContextAwareTaskLogger.java",
              "type": "",
              "code": "    @Override\n    public void debug(String format, Object... arguments) {\n        if (isDebugEnabled()) {\n            log(LogLevel.DEBUG, null, format, arguments);\n        }\n    }\n"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "ntlmCredentials",
              "startLine": 239,
              "startColumn": 114,
              "endLine": 239,
              "endColumn": 129,
              "uri": "gradle-8.14.0/platforms/software/resources-http/src/main/java/org/gradle/internal/resource/transport/http/HttpClientConfigurer.java",
              "type": "NTLMCredentials",
              "code": "                        Credentials httpCredentials = new NTCredentials(ntlmCredentials.getUsername(), ntlmCredentials.getPassword(), ntlmCredentials.getWorkstation(), ntlmCredentials.getDomain());\n                        credentialsProvider.setCredentials(new AuthScope(host, port, AuthScope.ANY_REALM, AuthSchemes.NTLM), httpCredentials);\n\n                        LOGGER.debug(\"Using {} and {} for authenticating against '{}:{}' using {}\", credentials, ntlmCredentials, host, port, AuthSchemes.NTLM);\n                    }\n\n                    Credentials httpCredentials = new UsernamePasswordCredentials(username, password);"
            },
            {
              "step": 1,
              "variableName": "LOGGER.debug(\"Using {} and {} for authenticating against '{}:{}' using {}\", credentials, ntlmCredentials, host, port, AuthSchemes.NTLM)",
              "startLine": 239,
              "startColumn": 25,
              "endLine": 239,
              "endColumn": 160,
              "uri": "gradle-8.14.0/platforms/software/resources-http/src/main/java/org/gradle/internal/resource/transport/http/HttpClientConfigurer.java",
              "type": "Object[] [[]] : NTLMCredentials",
              "code": "                        Credentials httpCredentials = new NTCredentials(ntlmCredentials.getUsername(), ntlmCredentials.getPassword(), ntlmCredentials.getWorkstation(), ntlmCredentials.getDomain());\n                        credentialsProvider.setCredentials(new AuthScope(host, port, AuthScope.ANY_REALM, AuthSchemes.NTLM), httpCredentials);\n\n                        LOGGER.debug(\"Using {} and {} for authenticating against '{}:{}' using {}\", credentials, ntlmCredentials, host, port, AuthSchemes.NTLM);\n                    }\n\n                    Credentials httpCredentials = new UsernamePasswordCredentials(username, password);"
            },
            {
              "step": 2,
              "variableName": "Object... arguments",
              "startLine": 212,
              "startColumn": 38,
              "endLine": 212,
              "endColumn": 57,
              "uri": "gradle-8.14.0/platforms/core-runtime/logging/src/main/java/org/gradle/internal/logging/slf4j/DefaultContextAwareTaskLogger.java",
              "type": "Object[] [[]] : NTLMCredentials",
              "code": "    }\n\n    @Override\n    public void debug(String format, Object... arguments) {\n        if (isDebugEnabled()) {\n            log(LogLevel.DEBUG, null, format, arguments);\n        }"
            },
            {
              "step": 3,
              "variableName": "arguments",
              "startLine": 214,
              "startColumn": 47,
              "endLine": 214,
              "endColumn": 56,
              "uri": "gradle-8.14.0/platforms/core-runtime/logging/src/main/java/org/gradle/internal/logging/slf4j/DefaultContextAwareTaskLogger.java",
              "type": "",
              "code": "    @Override\n    public void debug(String format, Object... arguments) {\n        if (isDebugEnabled()) {\n            log(LogLevel.DEBUG, null, format, arguments);\n        }\n    }\n"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "credentials",
              "startLine": 244,
              "startColumn": 90,
              "endLine": 244,
              "endColumn": 101,
              "uri": "gradle-8.14.0/platforms/software/resources-http/src/main/java/org/gradle/internal/resource/transport/http/HttpClientConfigurer.java",
              "type": "Credentials",
              "code": "\n                    Credentials httpCredentials = new UsernamePasswordCredentials(username, password);\n                    credentialsProvider.setCredentials(new AuthScope(host, port, AuthScope.ANY_REALM, scheme), httpCredentials);\n                    LOGGER.debug(\"Using {} for authenticating against '{}:{}' using {}\", credentials, host, port, scheme);\n                } else {\n                    throw new IllegalArgumentException(String.format(\"Credentials must be an instance of: %s or %s\", PasswordCredentials.class.getCanonicalName(), HttpHeaderCredentials.class.getCanonicalName()));\n                }"
            },
            {
              "step": 1,
              "variableName": "LOGGER.debug(\"Using {} for authenticating against '{}:{}' using {}\", credentials, host, port, scheme)",
              "startLine": 244,
              "startColumn": 21,
              "endLine": 244,
              "endColumn": 122,
              "uri": "gradle-8.14.0/platforms/software/resources-http/src/main/java/org/gradle/internal/resource/transport/http/HttpClientConfigurer.java",
              "type": "Object[] [[]] : Credentials",
              "code": "\n                    Credentials httpCredentials = new UsernamePasswordCredentials(username, password);\n                    credentialsProvider.setCredentials(new AuthScope(host, port, AuthScope.ANY_REALM, scheme), httpCredentials);\n                    LOGGER.debug(\"Using {} for authenticating against '{}:{}' using {}\", credentials, host, port, scheme);\n                } else {\n                    throw new IllegalArgumentException(String.format(\"Credentials must be an instance of: %s or %s\", PasswordCredentials.class.getCanonicalName(), HttpHeaderCredentials.class.getCanonicalName()));\n                }"
            },
            {
              "step": 2,
              "variableName": "Object... arguments",
              "startLine": 212,
              "startColumn": 38,
              "endLine": 212,
              "endColumn": 57,
              "uri": "gradle-8.14.0/platforms/core-runtime/logging/src/main/java/org/gradle/internal/logging/slf4j/DefaultContextAwareTaskLogger.java",
              "type": "Object[] [[]] : Credentials",
              "code": "    }\n\n    @Override\n    public void debug(String format, Object... arguments) {\n        if (isDebugEnabled()) {\n            log(LogLevel.DEBUG, null, format, arguments);\n        }"
            },
            {
              "step": 3,
              "variableName": "arguments",
              "startLine": 214,
              "startColumn": 47,
              "endLine": 214,
              "endColumn": 56,
              "uri": "gradle-8.14.0/platforms/core-runtime/logging/src/main/java/org/gradle/internal/logging/slf4j/DefaultContextAwareTaskLogger.java",
              "type": "",
              "code": "    @Override\n    public void debug(String format, Object... arguments) {\n        if (isDebugEnabled()) {\n            log(LogLevel.DEBUG, null, format, arguments);\n        }\n    }\n"
            }
          ],
          "label": "Yes"
        }
      ]
    }
  ],
  "537": [
    {
      "resultIndex": 0,
      "fileName": "FindBrokenInternalLinks.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "source",
              "startLine": 44,
              "startColumn": 25,
              "endLine": 44,
              "endColumn": 31,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/RegExpNameMapper.java",
              "type": "String",
              "code": "        } else {\n            matcher.reset(source);\n        }\n        String result = source;\n        if (matcher.find()) {\n            result = matcher.replaceFirst(replacement);\n        }"
            },
            {
              "step": 1,
              "variableName": "result",
              "startLine": 48,
              "startColumn": 16,
              "endLine": 48,
              "endColumn": 22,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/RegExpNameMapper.java",
              "type": "String",
              "code": "        if (matcher.find()) {\n            result = matcher.replaceFirst(replacement);\n        }\n        return result;\n    }\n}\n"
            },
            {
              "step": 2,
              "variableName": "transformer.transform(value)",
              "startLine": 37,
              "startColumn": 31,
              "endLine": 37,
              "endColumn": 59,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/ChainingTransformer.java",
              "type": "String",
              "code": "    public T transform(T original) {\n        T value = original;\n        for (Transformer<T, T> transformer : transformers) {\n            value = type.cast(transformer.transform(value));\n        }\n        return value;\n    }"
            },
            {
              "step": 3,
              "variableName": "type.cast(transformer.transform(value))",
              "startLine": 37,
              "startColumn": 21,
              "endLine": 37,
              "endColumn": 60,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/ChainingTransformer.java",
              "type": "String",
              "code": "    public T transform(T original) {\n        T value = original;\n        for (Transformer<T, T> transformer : transformers) {\n            value = type.cast(transformer.transform(value));\n        }\n        return value;\n    }"
            },
            {
              "step": 4,
              "variableName": "value",
              "startLine": 39,
              "startColumn": 16,
              "endLine": 39,
              "endColumn": 21,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/ChainingTransformer.java",
              "type": "String",
              "code": "        for (Transformer<T, T> transformer : transformers) {\n            value = type.cast(transformer.transform(value));\n        }\n        return value;\n    }\n\n    public void add(Transformer<T, T> transformer) {"
            },
            {
              "step": 5,
              "variableName": "describer.transform(this)",
              "startLine": 163,
              "startColumn": 16,
              "endLine": 163,
              "endColumn": 41,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/repositories/DefaultMavenArtifactRepository.java",
              "type": "String",
              "code": "\n    @Override\n    public String getDisplayName() {\n        return describer.transform(this);\n    }\n\n    @Override"
            },
            {
              "step": 6,
              "variableName": "describable.getDisplayName()",
              "startLine": 313,
              "startColumn": 35,
              "endLine": 313,
              "endColumn": 63,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "String",
              "code": "        public String getDisplayName() {\n            synchronized (this) {\n                if (displayName == null) {\n                    displayName = describable.getDisplayName();\n                    if (capDisplayName != null || !(describable instanceof DisplayName)) {\n                        describable = null;\n                    }"
            },
            {
              "step": 7,
              "variableName": "displayName",
              "startLine": 318,
              "startColumn": 24,
              "endLine": 318,
              "endColumn": 35,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "String",
              "code": "                        describable = null;\n                    }\n                }\n                return displayName;\n            }\n        }\n    }"
            },
            {
              "step": 8,
              "variableName": "displayName.getDisplayName()",
              "startLine": 772,
              "startColumn": 73,
              "endLine": 772,
              "endColumn": 101,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/configurations/DefaultConfiguration.java",
              "type": "String",
              "code": "                try {\n                    results = resolver.resolveGraph(DefaultConfiguration.this);\n                } catch (Exception e) {\n                    throw exceptionMapper.mapFailure(e, \"dependencies\", displayName.getDisplayName());\n                }\n\n                // Make the new state visible in case a dependency resolution listener queries the result, which requires the new state"
            },
            {
              "step": 9,
              "variableName": "String contextDisplayName",
              "startLine": 68,
              "startColumn": 77,
              "endLine": 68,
              "endColumn": 102,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "String",
              "code": "        return mapFailure(failure, type, displayName);\n    }\n\n    public TypedResolveException mapFailure(Throwable failure, String type, String contextDisplayName) {\n        if (!(failure instanceof TypedResolveException)) {\n            return new TypedResolveException(\n                type,"
            },
            {
              "step": 10,
              "variableName": "contextDisplayName",
              "startLine": 72,
              "startColumn": 17,
              "endLine": 72,
              "endColumn": 35,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "String",
              "code": "        if (!(failure instanceof TypedResolveException)) {\n            return new TypedResolveException(\n                type,\n                contextDisplayName,\n                ImmutableList.of(mapRepositoryOverrideFailure(contextDisplayName, failure))\n            );\n        }"
            },
            {
              "step": 11,
              "variableName": "new TypedResolveException(...) : TypedResolveException",
              "startLine": 70,
              "startColumn": 20,
              "endLine": 74,
              "endColumn": 14,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "TypedResolveException",
              "code": "\n    public TypedResolveException mapFailure(Throwable failure, String type, String contextDisplayName) {\n        if (!(failure instanceof TypedResolveException)) {\n            return new TypedResolveException(\n                type,\n                contextDisplayName,\n                ImmutableList.of(mapRepositoryOverrideFailure(contextDisplayName, failure))"
            },
            {
              "step": 12,
              "variableName": "exceptionMapper.mapFailure(e, \"dependencies\", displayName.getDisplayName())",
              "startLine": 772,
              "startColumn": 27,
              "endLine": 772,
              "endColumn": 102,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/configurations/DefaultConfiguration.java",
              "type": "TypedResolveException",
              "code": "                try {\n                    results = resolver.resolveGraph(DefaultConfiguration.this);\n                } catch (Exception e) {\n                    throw exceptionMapper.mapFailure(e, \"dependencies\", displayName.getDisplayName());\n                }\n\n                // Make the new state visible in case a dependency resolution listener queries the result, which requires the new state"
            },
            {
              "step": 13,
              "variableName": "e",
              "startLine": 772,
              "startColumn": 54,
              "endLine": 772,
              "endColumn": 55,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/configurations/DefaultConfiguration.java",
              "type": "Exception",
              "code": "                try {\n                    results = resolver.resolveGraph(DefaultConfiguration.this);\n                } catch (Exception e) {\n                    throw exceptionMapper.mapFailure(e, \"dependencies\", displayName.getDisplayName());\n                }\n\n                // Make the new state visible in case a dependency resolution listener queries the result, which requires the new state"
            },
            {
              "step": 14,
              "variableName": "Throwable failure",
              "startLine": 68,
              "startColumn": 45,
              "endLine": 68,
              "endColumn": 62,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Throwable",
              "code": "        return mapFailure(failure, type, displayName);\n    }\n\n    public TypedResolveException mapFailure(Throwable failure, String type, String contextDisplayName) {\n        if (!(failure instanceof TypedResolveException)) {\n            return new TypedResolveException(\n                type,"
            },
            {
              "step": 15,
              "variableName": "failure",
              "startLine": 73,
              "startColumn": 83,
              "endLine": 73,
              "endColumn": 90,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Throwable",
              "code": "            return new TypedResolveException(\n                type,\n                contextDisplayName,\n                ImmutableList.of(mapRepositoryOverrideFailure(contextDisplayName, failure))\n            );\n        }\n"
            },
            {
              "step": 16,
              "variableName": "Throwable failure",
              "startLine": 94,
              "startColumn": 78,
              "endLine": 94,
              "endColumn": 95,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Throwable",
              "code": "\n    // TODO: We should handle this exception at the source instead of using instanceof to detect it after it is thrown.\n    //       We should try to avoid catching and analyzing runtime exceptions\n    public Throwable mapRepositoryOverrideFailure(String contextDisplayName, Throwable failure) {\n        if (!(failure instanceof ModuleVersionNotFoundException) || !settingsRepositoriesIgnored()) {\n            return failure;\n        }"
            },
            {
              "step": 17,
              "variableName": "failure",
              "startLine": 108,
              "startColumn": 35,
              "endLine": 108,
              "endColumn": 42,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Throwable",
              "code": "        return new TypedResolveException(\n            \"dependencies\",\n            contextDisplayName,\n            Collections.singleton(failure),\n            resolutions\n        );\n    }"
            },
            {
              "step": 18,
              "variableName": "Collections.singleton(failure)",
              "startLine": 108,
              "startColumn": 13,
              "endLine": 108,
              "endColumn": 43,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Set [<element>] : Throwable",
              "code": "        return new TypedResolveException(\n            \"dependencies\",\n            contextDisplayName,\n            Collections.singleton(failure),\n            resolutions\n        );\n    }"
            },
            {
              "step": 19,
              "variableName": "Collections.singleton(failure)",
              "startLine": 108,
              "startColumn": 13,
              "endLine": 108,
              "endColumn": 43,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Set",
              "code": "        return new TypedResolveException(\n            \"dependencies\",\n            contextDisplayName,\n            Collections.singleton(failure),\n            resolutions\n        );\n    }"
            },
            {
              "step": 20,
              "variableName": "Iterable<? extends Throwable> failures",
              "startLine": 42,
              "startColumn": 67,
              "endLine": 42,
              "endColumn": 105,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ivyservice/TypedResolveException.java",
              "type": "Set",
              "code": "    /**\n     * Creates a new instance with resolutions.\n     */\n    public TypedResolveException(String type, String displayName, Iterable<? extends Throwable> failures, List<String> resolutions) {\n        super(buildMessage(type, displayName), failures, false);\n        this.type = type;\n        this.resolutions = ImmutableList.copyOf(resolutions);"
            },
            {
              "step": 21,
              "variableName": "failures",
              "startLine": 43,
              "startColumn": 48,
              "endLine": 43,
              "endColumn": 56,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ivyservice/TypedResolveException.java",
              "type": "Set",
              "code": "     * Creates a new instance with resolutions.\n     */\n    public TypedResolveException(String type, String displayName, Iterable<? extends Throwable> failures, List<String> resolutions) {\n        super(buildMessage(type, displayName), failures, false);\n        this.type = type;\n        this.resolutions = ImmutableList.copyOf(resolutions);\n    }"
            },
            {
              "step": 22,
              "variableName": "Iterable<? extends Throwable> causes",
              "startLine": 77,
              "startColumn": 48,
              "endLine": 77,
              "endColumn": 84,
              "uri": "gradle-8.14.0/subprojects/core-api/src/main/java/org/gradle/api/artifacts/ResolveException.java",
              "type": "Set",
              "code": "     * @since 8.9\n     */\n    @Incubating\n    protected ResolveException(String message, Iterable<? extends Throwable> causes, @SuppressWarnings(\"unused\") boolean dummy) {\n        super(message, causes);\n    }\n}"
            },
            {
              "step": 23,
              "variableName": "causes",
              "startLine": 78,
              "startColumn": 24,
              "endLine": 78,
              "endColumn": 30,
              "uri": "gradle-8.14.0/subprojects/core-api/src/main/java/org/gradle/api/artifacts/ResolveException.java",
              "type": "Set",
              "code": "     */\n    @Incubating\n    protected ResolveException(String message, Iterable<? extends Throwable> causes, @SuppressWarnings(\"unused\") boolean dummy) {\n        super(message, causes);\n    }\n}\n"
            },
            {
              "step": 24,
              "variableName": "Iterable<? extends Throwable> causes",
              "startLine": 47,
              "startColumn": 55,
              "endLine": 47,
              "endColumn": 91,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "Set",
              "code": "        this.causes.addAll(Arrays.asList(causes));\n    }\n\n    public DefaultMultiCauseException(String message, Iterable<? extends Throwable> causes) {\n        super(message);\n        this.message = message;\n        initCauses(causes);"
            },
            {
              "step": 25,
              "variableName": "causes",
              "startLine": 50,
              "startColumn": 20,
              "endLine": 50,
              "endColumn": 26,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "Set",
              "code": "    public DefaultMultiCauseException(String message, Iterable<? extends Throwable> causes) {\n        super(message);\n        this.message = message;\n        initCauses(causes);\n    }\n\n    public DefaultMultiCauseException(Factory<String> messageFactory) {"
            },
            {
              "step": 26,
              "variableName": "Iterable<? extends Throwable> causes",
              "startLine": 112,
              "startColumn": 28,
              "endLine": 112,
              "endColumn": 64,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "Iterable",
              "code": "        return null;\n    }\n\n    public void initCauses(Iterable<? extends Throwable> causes) {\n        this.causes.clear();\n        for (Throwable cause : causes) {\n            this.causes.add(cause);"
            },
            {
              "step": 27,
              "variableName": "cause",
              "startLine": 115,
              "startColumn": 29,
              "endLine": 115,
              "endColumn": 34,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "Throwable",
              "code": "    public void initCauses(Iterable<? extends Throwable> causes) {\n        this.causes.clear();\n        for (Throwable cause : causes) {\n            this.causes.add(cause);\n        }\n    }\n"
            },
            {
              "step": 28,
              "variableName": "this.causes",
              "startLine": 115,
              "startColumn": 13,
              "endLine": 115,
              "endColumn": 24,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "CopyOnWriteArrayList [<element>] : Throwable",
              "code": "    public void initCauses(Iterable<? extends Throwable> causes) {\n        this.causes.clear();\n        for (Throwable cause : causes) {\n            this.causes.add(cause);\n        }\n    }\n"
            },
            {
              "step": 29,
              "variableName": "this",
              "startLine": 115,
              "startColumn": 13,
              "endLine": 115,
              "endColumn": 17,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "DefaultMultiCauseException [causes, <element>] : Throwable",
              "code": "    public void initCauses(Iterable<? extends Throwable> causes) {\n        this.causes.clear();\n        for (Throwable cause : causes) {\n            this.causes.add(cause);\n        }\n    }\n"
            },
            {
              "step": 30,
              "variableName": "projectConfigurationException",
              "startLine": 57,
              "startColumn": 17,
              "endLine": 57,
              "endColumn": 46,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/DefaultExceptionAnalyser.java",
              "type": "ProjectConfigurationException [causes, <element>] : Throwable",
              "code": "                }\n            }\n            if (!additionalFailures.isEmpty()) {\n                projectConfigurationException.initCauses(additionalFailures);\n                failures.add(transform(projectConfigurationException));\n            }\n        } else if (exception instanceof ServiceCreationException) {"
            },
            {
              "step": 31,
              "variableName": "projectConfigurationException",
              "startLine": 58,
              "startColumn": 40,
              "endLine": 58,
              "endColumn": 69,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/DefaultExceptionAnalyser.java",
              "type": "ProjectConfigurationException [causes, <element>] : Throwable",
              "code": "            }\n            if (!additionalFailures.isEmpty()) {\n                projectConfigurationException.initCauses(additionalFailures);\n                failures.add(transform(projectConfigurationException));\n            }\n        } else if (exception instanceof ServiceCreationException) {\n            failures.add(transform(new InitializationException(exception)));"
            },
            {
              "step": 32,
              "variableName": "transform(projectConfigurationException)",
              "startLine": 58,
              "startColumn": 30,
              "endLine": 58,
              "endColumn": 70,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/DefaultExceptionAnalyser.java",
              "type": "LocationAwareException",
              "code": "            }\n            if (!additionalFailures.isEmpty()) {\n                projectConfigurationException.initCauses(additionalFailures);\n                failures.add(transform(projectConfigurationException));\n            }\n        } else if (exception instanceof ServiceCreationException) {\n            failures.add(transform(new InitializationException(exception)));"
            },
            {
              "step": 33,
              "variableName": "failures",
              "startLine": 58,
              "startColumn": 17,
              "endLine": 58,
              "endColumn": 25,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/DefaultExceptionAnalyser.java",
              "type": "Collection [<element>] : LocationAwareException",
              "code": "            }\n            if (!additionalFailures.isEmpty()) {\n                projectConfigurationException.initCauses(additionalFailures);\n                failures.add(transform(projectConfigurationException));\n            }\n        } else if (exception instanceof ServiceCreationException) {\n            failures.add(transform(new InitializationException(exception)));"
            },
            {
              "step": 34,
              "variableName": "result",
              "startLine": 53,
              "startColumn": 54,
              "endLine": 53,
              "endColumn": 60,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/MultipleBuildFailuresExceptionAnalyser.java",
              "type": "ArrayList [<element>] : LocationAwareException",
              "code": "        for (Throwable failure : failures) {\n            if (failure instanceof MultipleBuildFailures) {\n                for (Throwable cause : ((MultipleBuildFailures) failure).getCauses()) {\n                    collector.collectFailures(cause, result);\n                }\n            } else {\n                collector.collectFailures(failure, result);"
            },
            {
              "step": 35,
              "variableName": "result",
              "startLine": 60,
              "startColumn": 39,
              "endLine": 60,
              "endColumn": 45,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/MultipleBuildFailuresExceptionAnalyser.java",
              "type": "ArrayList [<element>] : LocationAwareException",
              "code": "            }\n        }\n        if (result.size() == 1 && result.get(0) instanceof RuntimeException) {\n            return (RuntimeException) result.get(0);\n        } else {\n            return new MultipleBuildFailures(result);\n        }"
            },
            {
              "step": 36,
              "variableName": "result.get(0)",
              "startLine": 60,
              "startColumn": 39,
              "endLine": 60,
              "endColumn": 52,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/MultipleBuildFailuresExceptionAnalyser.java",
              "type": "LocationAwareException",
              "code": "            }\n        }\n        if (result.size() == 1 && result.get(0) instanceof RuntimeException) {\n            return (RuntimeException) result.get(0);\n        } else {\n            return new MultipleBuildFailures(result);\n        }"
            },
            {
              "step": 37,
              "variableName": "(RuntimeException) result.get(0)",
              "startLine": 60,
              "startColumn": 20,
              "endLine": 60,
              "endColumn": 52,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/MultipleBuildFailuresExceptionAnalyser.java",
              "type": "LocationAwareException",
              "code": "            }\n        }\n        if (result.size() == 1 && result.get(0) instanceof RuntimeException) {\n            return (RuntimeException) result.get(0);\n        } else {\n            return new MultipleBuildFailures(result);\n        }"
            },
            {
              "step": 38,
              "variableName": "exceptionAnalyser.transform(finishFailures)",
              "startLine": 72,
              "startColumn": 16,
              "endLine": 72,
              "endColumn": 59,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/internal/buildtree/DefaultBuildTreeFinishExecutor.java",
              "type": "LocationAwareException",
              "code": "            finishFailures.addAll(result.getFailures());\n        });\n\n        return exceptionAnalyser.transform(finishFailures);\n    }\n}\n"
            },
            {
              "step": 39,
              "variableName": "delegate.finishBuildTree(failures)",
              "startLine": 46,
              "startColumn": 28,
              "endLine": 46,
              "endColumn": 62,
              "uri": "gradle-8.14.0/subprojects/composite-builds/src/main/java/org/gradle/composite/internal/OperationFiringBuildTreeFinishExecutor.java",
              "type": "LocationAwareException",
              "code": "            @Override\n            public RuntimeException call(BuildOperationContext context) {\n                try {\n                    return delegate.finishBuildTree(failures);\n                } finally {\n                    context.setResult(RESULT);\n                }"
            },
            {
              "step": 40,
              "variableName": "buildOperation.call(context)",
              "startLine": 239,
              "startColumn": 21,
              "endLine": 239,
              "endColumn": 49,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/testFixtures/java/org/gradle/internal/operations/TestBuildOperationRunner.java",
              "type": "LocationAwareException",
              "code": "            TestBuildOperationContext context = new TestBuildOperationContext(record);\n            T t;\n            try {\n                t = buildOperation.call(context);\n            } catch (Throwable failure) {\n                if (record.failure == null) {\n                    record.failure = failure;"
            },
            {
              "step": 41,
              "variableName": "t",
              "startLine": 246,
              "startColumn": 20,
              "endLine": 246,
              "endColumn": 21,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/testFixtures/java/org/gradle/internal/operations/TestBuildOperationRunner.java",
              "type": "LocationAwareException",
              "code": "                }\n                throw throwAsUncheckedException(failure);\n            }\n            return t;\n        }\n\n        private <O extends BuildOperation> void execute(O buildOperation, BuildOperationWorker<O> worker) {"
            },
            {
              "step": 42,
              "variableName": "log.call(buildOperation)",
              "startLine": 51,
              "startColumn": 16,
              "endLine": 51,
              "endColumn": 40,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/testFixtures/java/org/gradle/internal/operations/TestBuildOperationRunner.java",
              "type": "LocationAwareException",
              "code": "\n    @Override\n    public <T> T call(CallableBuildOperation<T> buildOperation) {\n        return log.call(buildOperation);\n    }\n\n    @Override"
            },
            {
              "step": 43,
              "variableName": "ca",
              "startLine": 115,
              "startColumn": 5,
              "endLine": 121,
              "endColumn": 7,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/configurationcache/ConfigurationCacheBuildOperations.kt",
              "type": "LocationAwareException",
              "code": "\ninternal\nfun <T : Any> BuildOperationRunner.withModelLoadOperation(block: () -> T): T =\n    call(object : CallableBuildOperation<T> {\n        override fun description(): BuildOperationDescriptor.Builder = BuildOperationDescriptor\n            .displayName(\"Load model from configuration cache\")\n            .progressDisplayName(\"Loading model from configuration cache\")"
            },
            {
              "step": 44,
              "variableName": "ca",
              "startLine": 115,
              "startColumn": 5,
              "endLine": 121,
              "endColumn": 7,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/configurationcache/ConfigurationCacheBuildOperations.kt",
              "type": "LocationAwareException",
              "code": "\ninternal\nfun <T : Any> BuildOperationRunner.withModelLoadOperation(block: () -> T): T =\n    call(object : CallableBuildOperation<T> {\n        override fun description(): BuildOperationDescriptor.Builder = BuildOperationDescriptor\n            .displayName(\"Load model from configuration cache\")\n            .progressDisplayName(\"Loading model from configuration cache\")"
            },
            {
              "step": 45,
              "variableName": "b",
              "startLine": 635,
              "startColumn": 9,
              "endLine": 641,
              "endColumn": 10,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "        // No need to record the `ClassLoaderScope` tree when loading\n        scopeRegistryListener.dispose()\n\n        buildOperationRunner.withModelLoadOperation {\n            val storeLoadResult = entryStore.useForStateLoad(StateType.Model) { stateFile: ConfigurationCacheStateFile ->\n                cacheIO.readModelFrom(stateFile)\n            }"
            },
            {
              "step": 46,
              "variableName": "block()",
              "startLine": 668,
              "startColumn": 22,
              "endLine": 668,
              "endColumn": 29,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "    private\n    inline fun <T> runAtConfigurationTime(block: () -> T): T {\n        prepareConfigurationTimeBarrier()\n        val result = block()\n        crossConfigurationTimeBarrier()\n        return result\n    }"
            },
            {
              "step": 47,
              "variableName": "result",
              "startLine": 670,
              "startColumn": 16,
              "endLine": 670,
              "endColumn": 22,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "        prepareConfigurationTimeBarrier()\n        val result = block()\n        crossConfigurationTimeBarrier()\n        return result\n    }\n\n    private"
            },
            {
              "step": 48,
              "variableName": "runAtConfigurationTime(...) : LocationAwareException",
              "startLine": 631,
              "startColumn": 28,
              "endLine": 642,
              "endColumn": 6,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "    data class LoadResultMetadata(val originInvocationId: String? = null)\n\n    private\n    fun loadModel(): Any = runAtConfigurationTime {\n        // No need to record the `ClassLoaderScope` tree when loading\n        scopeRegistryListener.dispose()\n"
            },
            {
              "step": 49,
              "variableName": "loadModel()",
              "startLine": 268,
              "startColumn": 20,
              "endLine": 268,
              "endColumn": 31,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "    override fun <T : Any> loadOrCreateModel(creator: () -> T): T {\n        if (isLoaded) {\n            runLoadedSideEffects()\n            return loadModel().uncheckedCast()\n        }\n\n        return runWorkThatContributesToCacheEntry {"
            },
            {
              "step": 50,
              "variableName": "Any",
              "startLine": 22,
              "startColumn": 15,
              "endLine": 22,
              "endColumn": 18,
              "uri": "gradle-8.14.0/platforms/core-configuration/stdlib-kotlin-extensions/src/main/kotlin/org/gradle/internal/extensions/stdlib/CastExtensions.kt",
              "type": "Object",
              "code": "import org.gradle.internal.Cast\n\n\nfun <T : Any> Any.uncheckedCast(): T =\n    Cast.uncheckedNonnullCast(this)\n"
            },
            {
              "step": 51,
              "variableName": "this",
              "startLine": 23,
              "startColumn": 31,
              "endLine": 23,
              "endColumn": 35,
              "uri": "gradle-8.14.0/platforms/core-configuration/stdlib-kotlin-extensions/src/main/kotlin/org/gradle/internal/extensions/stdlib/CastExtensions.kt",
              "type": "Object",
              "code": "\n\nfun <T : Any> Any.uncheckedCast(): T =\n    Cast.uncheckedNonnullCast(this)\n"
            },
            {
              "step": 52,
              "variableName": "Object object",
              "startLine": 76,
              "startColumn": 46,
              "endLine": 76,
              "endColumn": 59,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/Cast.java",
              "type": "Object",
              "code": "    }\n\n    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})\n    public static <T> T uncheckedNonnullCast(Object object) {\n        return (T) object;\n    }\n}"
            },
            {
              "step": 53,
              "variableName": "(T) object",
              "startLine": 77,
              "startColumn": 16,
              "endLine": 77,
              "endColumn": 26,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/Cast.java",
              "type": "Object",
              "code": "\n    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})\n    public static <T> T uncheckedNonnullCast(Object object) {\n        return (T) object;\n    }\n}\n"
            },
            {
              "step": 54,
              "variableName": "uncheckedNonnullCast(this)",
              "startLine": 23,
              "startColumn": 10,
              "endLine": 23,
              "endColumn": 36,
              "uri": "gradle-8.14.0/platforms/core-configuration/stdlib-kotlin-extensions/src/main/kotlin/org/gradle/internal/extensions/stdlib/CastExtensions.kt",
              "type": "Object",
              "code": "\n\nfun <T : Any> Any.uncheckedCast(): T =\n    Cast.uncheckedNonnullCast(this)\n"
            },
            {
              "step": 55,
              "variableName": "uncheckedNonnullCast(this)",
              "startLine": 23,
              "startColumn": 10,
              "endLine": 23,
              "endColumn": 36,
              "uri": "gradle-8.14.0/platforms/core-configuration/stdlib-kotlin-extensions/src/main/kotlin/org/gradle/internal/extensions/stdlib/CastExtensions.kt",
              "type": "Object",
              "code": "\n\nfun <T : Any> Any.uncheckedCast(): T =\n    Cast.uncheckedNonnullCast(this)\n"
            },
            {
              "step": 56,
              "variableName": "!!.uncheckedCast<T>()",
              "startLine": 159,
              "startColumn": 57,
              "endLine": 159,
              "endColumn": 78,
              "uri": "gradle-8.14.0/platforms/core-configuration/graph-serialization/src/main/kotlin/org/gradle/internal/serialize/graph/Codec.kt",
              "type": "Object",
              "code": "    getSingletonProperty(T::class.java)\n\n\nsuspend fun <T : Any> ReadContext.readNonNull() = read()!!.uncheckedCast<T>()\n\n\ninterface IsolateContext {"
            },
            {
              "step": 57,
              "variableName": "readNonNull<FileCollection>()",
              "startLine": 781,
              "startColumn": 29,
              "endLine": 781,
              "endColumn": 58,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/ConfigurationCacheState.kt",
              "type": "FileCollection",
              "code": "        val buildOutputCleanupRegistry = gradle.serviceOf<BuildOutputCleanupRegistry>()\n        withGradleIsolate(gradle, userTypesCodec) {\n            readCollection {\n                val files = readNonNull<FileCollection>()\n                buildOutputCleanupRegistry.registerOutputs(files)\n            }\n        }"
            },
            {
              "step": 58,
              "variableName": "files",
              "startLine": 782,
              "startColumn": 60,
              "endLine": 782,
              "endColumn": 65,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/ConfigurationCacheState.kt",
              "type": "FileCollection",
              "code": "        withGradleIsolate(gradle, userTypesCodec) {\n            readCollection {\n                val files = readNonNull<FileCollection>()\n                buildOutputCleanupRegistry.registerOutputs(files)\n            }\n        }\n    }"
            },
            {
              "step": 59,
              "variableName": "Object files",
              "startLine": 46,
              "startColumn": 33,
              "endLine": 46,
              "endColumn": 45,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/internal/cleanup/DefaultBuildOutputCleanupRegistry.java",
              "type": "FileCollection",
              "code": "    }\n\n    @Override\n    public void registerOutputs(Object files) {\n        synchronized (lock) {\n            if (resolvedPaths != null) {\n                // Some tasks cannot declare the dependencies on other projects, yet, for example the dependencies task."
            },
            {
              "step": 60,
              "variableName": "files",
              "startLine": 55,
              "startColumn": 66,
              "endLine": 55,
              "endColumn": 71,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/internal/cleanup/DefaultBuildOutputCleanupRegistry.java",
              "type": "FileCollection",
              "code": "                // See https://github.com/gradle/gradle/issues/18460.\n                LOGGER.debug(\"More outputs are being registered even though the build output cleanup registry has already been finalized. New outputs: {}\", files);\n            } else {\n                this.outputs.add(fileCollectionFactory.resolving(files));\n            }\n        }\n    }"
            },
            {
              "step": 61,
              "variableName": "Object sources",
              "startLine": 187,
              "startColumn": 45,
              "endLine": 187,
              "endColumn": 59,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-collections/src/main/java/org/gradle/api/internal/file/DefaultFileCollectionFactory.java",
              "type": "FileCollection",
              "code": "    }\n\n    @Override\n    public FileCollectionInternal resolving(Object sources) {\n        return resolving(ProviderResolutionStrategy.REQUIRE_PRESENT, sources);\n    }\n"
            },
            {
              "step": 62,
              "variableName": "sources",
              "startLine": 188,
              "startColumn": 70,
              "endLine": 188,
              "endColumn": 77,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-collections/src/main/java/org/gradle/api/internal/file/DefaultFileCollectionFactory.java",
              "type": "FileCollection",
              "code": "\n    @Override\n    public FileCollectionInternal resolving(Object sources) {\n        return resolving(ProviderResolutionStrategy.REQUIRE_PRESENT, sources);\n    }\n\n    @Override"
            },
            {
              "step": 63,
              "variableName": "Object sources",
              "startLine": 196,
              "startColumn": 101,
              "endLine": 196,
              "endColumn": 115,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-collections/src/main/java/org/gradle/api/internal/file/DefaultFileCollectionFactory.java",
              "type": "Object",
              "code": "        return resolving(ProviderResolutionStrategy.ALLOW_ABSENT, sources);\n    }\n\n    private FileCollectionInternal resolving(ProviderResolutionStrategy providerResolutionStrategy, Object sources) {\n        if (sources instanceof FileCollectionInternal) {\n            return (FileCollectionInternal) sources;\n        }"
            },
            {
              "step": 64,
              "variableName": "(FileCollectionInternal) sources",
              "startLine": 198,
              "startColumn": 20,
              "endLine": 198,
              "endColumn": 52,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-collections/src/main/java/org/gradle/api/internal/file/DefaultFileCollectionFactory.java",
              "type": "FileCollectionInternal",
              "code": "\n    private FileCollectionInternal resolving(ProviderResolutionStrategy providerResolutionStrategy, Object sources) {\n        if (sources instanceof FileCollectionInternal) {\n            return (FileCollectionInternal) sources;\n        }\n        if (isEmptyArray(sources)) {\n            return FileCollectionFactory.empty();"
            },
            {
              "step": 65,
              "variableName": "resolving(ProviderResolutionStrategy.REQUIRE_PRESENT, sources)",
              "startLine": 188,
              "startColumn": 16,
              "endLine": 188,
              "endColumn": 78,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-collections/src/main/java/org/gradle/api/internal/file/DefaultFileCollectionFactory.java",
              "type": "FileCollectionInternal",
              "code": "\n    @Override\n    public FileCollectionInternal resolving(Object sources) {\n        return resolving(ProviderResolutionStrategy.REQUIRE_PRESENT, sources);\n    }\n\n    @Override"
            },
            {
              "step": 66,
              "variableName": "fileCollectionFactory.resolving(this)",
              "startLine": 345,
              "startColumn": 20,
              "endLine": 345,
              "endColumn": 57,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-collections/src/main/java/org/gradle/api/internal/file/DefaultFilePropertyFactory.java",
              "type": "FileCollectionInternal",
              "code": "\n        @Override\n        public FileTree getAsFileTree() {\n            return fileCollectionFactory.resolving(this).getAsFileTree();\n        }\n\n        @Override"
            },
            {
              "step": 67,
              "variableName": "getAsFileTree",
              "startLine": 103,
              "startColumn": 29,
              "endLine": 103,
              "endColumn": 42,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-collections/src/main/java/org/gradle/api/internal/file/AbstractFileTree.java",
              "type": "AbstractFileTree",
              "code": "    }\n\n    @Override\n    public FileTreeInternal getAsFileTree() {\n        return this;\n    }\n"
            },
            {
              "step": 68,
              "variableName": "this",
              "startLine": 104,
              "startColumn": 16,
              "endLine": 104,
              "endColumn": 20,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-collections/src/main/java/org/gradle/api/internal/file/AbstractFileTree.java",
              "type": "AbstractFileTree",
              "code": "\n    @Override\n    public FileTreeInternal getAsFileTree() {\n        return this;\n    }\n\n    @Override"
            },
            {
              "step": 69,
              "variableName": "fileCollectionFactory.resolving(this).getAsFileTree()",
              "startLine": 345,
              "startColumn": 20,
              "endLine": 345,
              "endColumn": 73,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-collections/src/main/java/org/gradle/api/internal/file/DefaultFilePropertyFactory.java",
              "type": "AbstractFileTree",
              "code": "\n        @Override\n        public FileTree getAsFileTree() {\n            return fileCollectionFactory.resolving(this).getAsFileTree();\n        }\n\n        @Override"
            },
            {
              "step": 70,
              "variableName": "getSamplesRoot()",
              "startLine": 102,
              "startColumn": 9,
              "endLine": 103,
              "endColumn": 29,
              "uri": "gradle-8.14.0/build-logic/documentation/src/main/groovy/gradlebuild/docs/FindBrokenInternalLinks.java",
              "type": "AbstractFileTree",
              "code": "\n        gatherDeadLinksInFileReleaseNotes(errors);\n\n        getSamplesRoot()\n            .getAsFileTree()\n            .matching(pattern -> {\n                pattern.include(\"**/*.adoc\");"
            },
            {
              "step": 71,
              "variableName": "matching",
              "startLine": 60,
              "startColumn": 21,
              "endLine": 60,
              "endColumn": 29,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-collections/src/main/java/org/gradle/api/internal/file/EmptyFileTree.java",
              "type": "EmptyFileTree",
              "code": "    }\n\n    @Override\n    public FileTree matching(Action<? super PatternFilterable> filterConfigAction) {\n        return this;\n    }\n"
            },
            {
              "step": 72,
              "variableName": "this",
              "startLine": 61,
              "startColumn": 16,
              "endLine": 61,
              "endColumn": 20,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-collections/src/main/java/org/gradle/api/internal/file/EmptyFileTree.java",
              "type": "EmptyFileTree",
              "code": "\n    @Override\n    public FileTree matching(Action<? super PatternFilterable> filterConfigAction) {\n        return this;\n    }\n\n    @Override"
            },
            {
              "step": 73,
              "variableName": "getSam",
              "startLine": 102,
              "startColumn": 9,
              "endLine": 107,
              "endColumn": 15,
              "uri": "gradle-8.14.0/build-logic/documentation/src/main/groovy/gradlebuild/docs/FindBrokenInternalLinks.java",
              "type": "EmptyFileTree",
              "code": "\n        gatherDeadLinksInFileReleaseNotes(errors);\n\n        getSamplesRoot()\n            .getAsFileTree()\n            .matching(pattern -> {\n                pattern.include(\"**/*.adoc\");"
            },
            {
              "step": 74,
              "variableName": "file -> gatherDeadLinksInFileSamples(file, errors)",
              "startLine": 108,
              "startColumn": 22,
              "endLine": 108,
              "endColumn": 72,
              "uri": "gradle-8.14.0/build-logic/documentation/src/main/groovy/gradlebuild/docs/FindBrokenInternalLinks.java",
              "type": "new Consumer<File>(...) { ... } [Map<File,List<Error>> errors, <map.key>]",
              "code": "                pattern.include(\"**/*.adoc\");\n                pattern.exclude(\"**/index.adoc\"); // Exclude index.adoc files\n            })\n            .forEach(file -> gatherDeadLinksInFileSamples(file, errors));\n\n        getDocumentationRoot().getAsFileTree().matching(pattern -> pattern.include(\"**/*.adoc\")).forEach(file -> {\n            gatherDeadLinksInFile(file, errors);"
            },
            {
              "step": 75,
              "variableName": "file -> gatherDeadLinksInFileSamples(file, errors)",
              "startLine": 108,
              "startColumn": 22,
              "endLine": 108,
              "endColumn": 72,
              "uri": "gradle-8.14.0/build-logic/documentation/src/main/groovy/gradlebuild/docs/FindBrokenInternalLinks.java",
              "type": "TreeMap [<map.key>]",
              "code": "                pattern.include(\"**/*.adoc\");\n                pattern.exclude(\"**/index.adoc\"); // Exclude index.adoc files\n            })\n            .forEach(file -> gatherDeadLinksInFileSamples(file, errors));\n\n        getDocumentationRoot().getAsFileTree().matching(pattern -> pattern.include(\"**/*.adoc\")).forEach(file -> {\n            gatherDeadLinksInFile(file, errors);"
            },
            {
              "step": 76,
              "variableName": "errors",
              "startLine": 114,
              "startColumn": 22,
              "endLine": 114,
              "endColumn": 28,
              "uri": "gradle-8.14.0/build-logic/documentation/src/main/groovy/gradlebuild/docs/FindBrokenInternalLinks.java",
              "type": "TreeMap [<map.key>]",
              "code": "            gatherDeadLinksInFile(file, errors);\n        });\n\n        reportErrors(errors, getReportFile().get().getAsFile());\n    }\n\n    private void reportErrors(Map<File, List<Error>> errors, File reportFile) {"
            },
            {
              "step": 77,
              "variableName": "Map<File, List<Error>> errors",
              "startLine": 117,
              "startColumn": 31,
              "endLine": 117,
              "endColumn": 60,
              "uri": "gradle-8.14.0/build-logic/documentation/src/main/groovy/gradlebuild/docs/FindBrokenInternalLinks.java",
              "type": "TreeMap [<map.key>]",
              "code": "        reportErrors(errors, getReportFile().get().getAsFile());\n    }\n\n    private void reportErrors(Map<File, List<Error>> errors, File reportFile) {\n        try (PrintWriter fw = new PrintWriter(new FileWriter(reportFile))) {\n            writeHeader(fw);\n            if (errors.isEmpty()) {"
            },
            {
              "step": 78,
              "variableName": "errors",
              "startLine": 124,
              "startColumn": 51,
              "endLine": 124,
              "endColumn": 57,
              "uri": "gradle-8.14.0/build-logic/documentation/src/main/groovy/gradlebuild/docs/FindBrokenInternalLinks.java",
              "type": "TreeMap [<map.key>]",
              "code": "                fw.println(\"All clear!\");\n                return;\n            }\n            for (Map.Entry<File, List<Error>> e : errors.entrySet()) {\n                File file = e.getKey();\n                List<Error> errorsForFile = e.getValue();\n"
            },
            {
              "step": 79,
              "variableName": "errors.entrySet()",
              "startLine": 124,
              "startColumn": 51,
              "endLine": 124,
              "endColumn": 68,
              "uri": "gradle-8.14.0/build-logic/documentation/src/main/groovy/gradlebuild/docs/FindBrokenInternalLinks.java",
              "type": "EntrySet [<element>, <map.key>]",
              "code": "                fw.println(\"All clear!\");\n                return;\n            }\n            for (Map.Entry<File, List<Error>> e : errors.entrySet()) {\n                File file = e.getKey();\n                List<Error> errorsForFile = e.getValue();\n"
            },
            {
              "step": 80,
              "variableName": "e",
              "startLine": 125,
              "startColumn": 29,
              "endLine": 125,
              "endColumn": 30,
              "uri": "gradle-8.14.0/build-logic/documentation/src/main/groovy/gradlebuild/docs/FindBrokenInternalLinks.java",
              "type": "Entry [<map.key>]",
              "code": "                return;\n            }\n            for (Map.Entry<File, List<Error>> e : errors.entrySet()) {\n                File file = e.getKey();\n                List<Error> errorsForFile = e.getValue();\n\n                StringBuilder sb = new StringBuilder();"
            },
            {
              "step": 81,
              "variableName": "e.getKey()",
              "startLine": 125,
              "startColumn": 29,
              "endLine": 125,
              "endColumn": 39,
              "uri": "gradle-8.14.0/build-logic/documentation/src/main/groovy/gradlebuild/docs/FindBrokenInternalLinks.java",
              "type": "File",
              "code": "                return;\n            }\n            for (Map.Entry<File, List<Error>> e : errors.entrySet()) {\n                File file = e.getKey();\n                List<Error> errorsForFile = e.getValue();\n\n                StringBuilder sb = new StringBuilder();"
            },
            {
              "step": 82,
              "variableName": "file",
              "startLine": 130,
              "startColumn": 43,
              "endLine": 130,
              "endColumn": 47,
              "uri": "gradle-8.14.0/build-logic/documentation/src/main/groovy/gradlebuild/docs/FindBrokenInternalLinks.java",
              "type": "File",
              "code": "\n                StringBuilder sb = new StringBuilder();\n                for (Error error : errorsForFile) {\n                    sb.append(\"ERROR: \" + file.getName() + \":\" + error.lineNumber + \" \" + error.message + \"\\n    \" + error.line + \"\\n\");\n                }\n                String message = sb.toString();\n                getLogger().error(message);"
            },
            {
              "step": 83,
              "variableName": "file.getName()",
              "startLine": 130,
              "startColumn": 43,
              "endLine": 130,
              "endColumn": 57,
              "uri": "gradle-8.14.0/build-logic/documentation/src/main/groovy/gradlebuild/docs/FindBrokenInternalLinks.java",
              "type": "String",
              "code": "\n                StringBuilder sb = new StringBuilder();\n                for (Error error : errorsForFile) {\n                    sb.append(\"ERROR: \" + file.getName() + \":\" + error.lineNumber + \" \" + error.message + \"\\n    \" + error.line + \"\\n\");\n                }\n                String message = sb.toString();\n                getLogger().error(message);"
            },
            {
              "step": 84,
              "variableName": "\"ERROR: \" + file.getName()",
              "startLine": 130,
              "startColumn": 31,
              "endLine": 130,
              "endColumn": 57,
              "uri": "gradle-8.14.0/build-logic/documentation/src/main/groovy/gradlebuild/docs/FindBrokenInternalLinks.java",
              "type": "String",
              "code": "\n                StringBuilder sb = new StringBuilder();\n                for (Error error : errorsForFile) {\n                    sb.append(\"ERROR: \" + file.getName() + \":\" + error.lineNumber + \" \" + error.message + \"\\n    \" + error.line + \"\\n\");\n                }\n                String message = sb.toString();\n                getLogger().error(message);"
            },
            {
              "step": 85,
              "variableName": "\"ERROR: \" + file.getName() + \":\"",
              "startLine": 130,
              "startColumn": 31,
              "endLine": 130,
              "endColumn": 63,
              "uri": "gradle-8.14.0/build-logic/documentation/src/main/groovy/gradlebuild/docs/FindBrokenInternalLinks.java",
              "type": "String",
              "code": "\n                StringBuilder sb = new StringBuilder();\n                for (Error error : errorsForFile) {\n                    sb.append(\"ERROR: \" + file.getName() + \":\" + error.lineNumber + \" \" + error.message + \"\\n    \" + error.line + \"\\n\");\n                }\n                String message = sb.toString();\n                getLogger().error(message);"
            },
            {
              "step": 86,
              "variableName": "\"ERROR: \" + file.getName() + \":\" + error.lineNumber",
              "startLine": 130,
              "startColumn": 31,
              "endLine": 130,
              "endColumn": 82,
              "uri": "gradle-8.14.0/build-logic/documentation/src/main/groovy/gradlebuild/docs/FindBrokenInternalLinks.java",
              "type": "String",
              "code": "\n                StringBuilder sb = new StringBuilder();\n                for (Error error : errorsForFile) {\n                    sb.append(\"ERROR: \" + file.getName() + \":\" + error.lineNumber + \" \" + error.message + \"\\n    \" + error.line + \"\\n\");\n                }\n                String message = sb.toString();\n                getLogger().error(message);"
            },
            {
              "step": 87,
              "variableName": "\"ERROR: \" + file.getName() + \":\" + error.lineNumber + \" \"",
              "startLine": 130,
              "startColumn": 31,
              "endLine": 130,
              "endColumn": 88,
              "uri": "gradle-8.14.0/build-logic/documentation/src/main/groovy/gradlebuild/docs/FindBrokenInternalLinks.java",
              "type": "String",
              "code": "\n                StringBuilder sb = new StringBuilder();\n                for (Error error : errorsForFile) {\n                    sb.append(\"ERROR: \" + file.getName() + \":\" + error.lineNumber + \" \" + error.message + \"\\n    \" + error.line + \"\\n\");\n                }\n                String message = sb.toString();\n                getLogger().error(message);"
            },
            {
              "step": 88,
              "variableName": "\"ERROR: \" + file.getName() + \":\" + error.lineNumber + \" \" + error.message",
              "startLine": 130,
              "startColumn": 31,
              "endLine": 130,
              "endColumn": 104,
              "uri": "gradle-8.14.0/build-logic/documentation/src/main/groovy/gradlebuild/docs/FindBrokenInternalLinks.java",
              "type": "String",
              "code": "\n                StringBuilder sb = new StringBuilder();\n                for (Error error : errorsForFile) {\n                    sb.append(\"ERROR: \" + file.getName() + \":\" + error.lineNumber + \" \" + error.message + \"\\n    \" + error.line + \"\\n\");\n                }\n                String message = sb.toString();\n                getLogger().error(message);"
            },
            {
              "step": 89,
              "variableName": "\"ERROR: \" + file.getName() + \":\" + error.lineNumber + \" \" + error.message + \"\\n    \"",
              "startLine": 130,
              "startColumn": 31,
              "endLine": 130,
              "endColumn": 115,
              "uri": "gradle-8.14.0/build-logic/documentation/src/main/groovy/gradlebuild/docs/FindBrokenInternalLinks.java",
              "type": "String",
              "code": "\n                StringBuilder sb = new StringBuilder();\n                for (Error error : errorsForFile) {\n                    sb.append(\"ERROR: \" + file.getName() + \":\" + error.lineNumber + \" \" + error.message + \"\\n    \" + error.line + \"\\n\");\n                }\n                String message = sb.toString();\n                getLogger().error(message);"
            },
            {
              "step": 90,
              "variableName": "\"ERROR: \" + file.getName() + \":\" + error.lineNumber + \" \" + error.message + \"\\n    \" + error.line",
              "startLine": 130,
              "startColumn": 31,
              "endLine": 130,
              "endColumn": 128,
              "uri": "gradle-8.14.0/build-logic/documentation/src/main/groovy/gradlebuild/docs/FindBrokenInternalLinks.java",
              "type": "String",
              "code": "\n                StringBuilder sb = new StringBuilder();\n                for (Error error : errorsForFile) {\n                    sb.append(\"ERROR: \" + file.getName() + \":\" + error.lineNumber + \" \" + error.message + \"\\n    \" + error.line + \"\\n\");\n                }\n                String message = sb.toString();\n                getLogger().error(message);"
            },
            {
              "step": 91,
              "variableName": "\"ERROR: \" + file.getName() + \":\" + error.lineNumber + \" \" + error.message + \"\\n    \" + error.line + \"\\n\"",
              "startLine": 130,
              "startColumn": 31,
              "endLine": 130,
              "endColumn": 135,
              "uri": "gradle-8.14.0/build-logic/documentation/src/main/groovy/gradlebuild/docs/FindBrokenInternalLinks.java",
              "type": "String",
              "code": "\n                StringBuilder sb = new StringBuilder();\n                for (Error error : errorsForFile) {\n                    sb.append(\"ERROR: \" + file.getName() + \":\" + error.lineNumber + \" \" + error.message + \"\\n    \" + error.line + \"\\n\");\n                }\n                String message = sb.toString();\n                getLogger().error(message);"
            },
            {
              "step": 92,
              "variableName": "sb",
              "startLine": 130,
              "startColumn": 21,
              "endLine": 130,
              "endColumn": 23,
              "uri": "gradle-8.14.0/build-logic/documentation/src/main/groovy/gradlebuild/docs/FindBrokenInternalLinks.java",
              "type": "StringBuilder",
              "code": "\n                StringBuilder sb = new StringBuilder();\n                for (Error error : errorsForFile) {\n                    sb.append(\"ERROR: \" + file.getName() + \":\" + error.lineNumber + \" \" + error.message + \"\\n    \" + error.line + \"\\n\");\n                }\n                String message = sb.toString();\n                getLogger().error(message);"
            },
            {
              "step": 93,
              "variableName": "sb",
              "startLine": 132,
              "startColumn": 34,
              "endLine": 132,
              "endColumn": 36,
              "uri": "gradle-8.14.0/build-logic/documentation/src/main/groovy/gradlebuild/docs/FindBrokenInternalLinks.java",
              "type": "StringBuilder",
              "code": "                for (Error error : errorsForFile) {\n                    sb.append(\"ERROR: \" + file.getName() + \":\" + error.lineNumber + \" \" + error.message + \"\\n    \" + error.line + \"\\n\");\n                }\n                String message = sb.toString();\n                getLogger().error(message);\n                fw.println(message);\n            }"
            },
            {
              "step": 94,
              "variableName": "sb.toString()",
              "startLine": 132,
              "startColumn": 34,
              "endLine": 132,
              "endColumn": 47,
              "uri": "gradle-8.14.0/build-logic/documentation/src/main/groovy/gradlebuild/docs/FindBrokenInternalLinks.java",
              "type": "String",
              "code": "                for (Error error : errorsForFile) {\n                    sb.append(\"ERROR: \" + file.getName() + \":\" + error.lineNumber + \" \" + error.message + \"\\n    \" + error.line + \"\\n\");\n                }\n                String message = sb.toString();\n                getLogger().error(message);\n                fw.println(message);\n            }"
            },
            {
              "step": 95,
              "variableName": "message",
              "startLine": 134,
              "startColumn": 28,
              "endLine": 134,
              "endColumn": 35,
              "uri": "gradle-8.14.0/build-logic/documentation/src/main/groovy/gradlebuild/docs/FindBrokenInternalLinks.java",
              "type": "",
              "code": "                }\n                String message = sb.toString();\n                getLogger().error(message);\n                fw.println(message);\n            }\n        } catch (IOException e) {\n            throw new UncheckedIOException(e);"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "source",
              "startLine": 40,
              "startColumn": 39,
              "endLine": 40,
              "endColumn": 45,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/RegExpNameMapper.java",
              "type": "String",
              "code": "    @Override\n    public String transform(String source) {\n        if (matcher == null) {\n            matcher = pattern.matcher(source);\n        } else {\n            matcher.reset(source);\n        }"
            },
            {
              "step": 1,
              "variableName": "result",
              "startLine": 48,
              "startColumn": 16,
              "endLine": 48,
              "endColumn": 22,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/RegExpNameMapper.java",
              "type": "String",
              "code": "        if (matcher.find()) {\n            result = matcher.replaceFirst(replacement);\n        }\n        return result;\n    }\n}\n"
            },
            {
              "step": 2,
              "variableName": "transformer.transform(value)",
              "startLine": 37,
              "startColumn": 31,
              "endLine": 37,
              "endColumn": 59,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/ChainingTransformer.java",
              "type": "String",
              "code": "    public T transform(T original) {\n        T value = original;\n        for (Transformer<T, T> transformer : transformers) {\n            value = type.cast(transformer.transform(value));\n        }\n        return value;\n    }"
            },
            {
              "step": 3,
              "variableName": "type.cast(transformer.transform(value))",
              "startLine": 37,
              "startColumn": 21,
              "endLine": 37,
              "endColumn": 60,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/ChainingTransformer.java",
              "type": "String",
              "code": "    public T transform(T original) {\n        T value = original;\n        for (Transformer<T, T> transformer : transformers) {\n            value = type.cast(transformer.transform(value));\n        }\n        return value;\n    }"
            },
            {
              "step": 4,
              "variableName": "value",
              "startLine": 39,
              "startColumn": 16,
              "endLine": 39,
              "endColumn": 21,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/ChainingTransformer.java",
              "type": "String",
              "code": "        for (Transformer<T, T> transformer : transformers) {\n            value = type.cast(transformer.transform(value));\n        }\n        return value;\n    }\n\n    public void add(Transformer<T, T> transformer) {"
            },
            {
              "step": 5,
              "variableName": "describer.transform(this)",
              "startLine": 163,
              "startColumn": 16,
              "endLine": 163,
              "endColumn": 41,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/repositories/DefaultMavenArtifactRepository.java",
              "type": "String",
              "code": "\n    @Override\n    public String getDisplayName() {\n        return describer.transform(this);\n    }\n\n    @Override"
            },
            {
              "step": 6,
              "variableName": "describable.getDisplayName()",
              "startLine": 313,
              "startColumn": 35,
              "endLine": 313,
              "endColumn": 63,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "String",
              "code": "        public String getDisplayName() {\n            synchronized (this) {\n                if (displayName == null) {\n                    displayName = describable.getDisplayName();\n                    if (capDisplayName != null || !(describable instanceof DisplayName)) {\n                        describable = null;\n                    }"
            },
            {
              "step": 7,
              "variableName": "displayName",
              "startLine": 318,
              "startColumn": 24,
              "endLine": 318,
              "endColumn": 35,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "String",
              "code": "                        describable = null;\n                    }\n                }\n                return displayName;\n            }\n        }\n    }"
            },
            {
              "step": 8,
              "variableName": "displayName.getDisplayName()",
              "startLine": 772,
              "startColumn": 73,
              "endLine": 772,
              "endColumn": 101,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/configurations/DefaultConfiguration.java",
              "type": "String",
              "code": "                try {\n                    results = resolver.resolveGraph(DefaultConfiguration.this);\n                } catch (Exception e) {\n                    throw exceptionMapper.mapFailure(e, \"dependencies\", displayName.getDisplayName());\n                }\n\n                // Make the new state visible in case a dependency resolution listener queries the result, which requires the new state"
            },
            {
              "step": 9,
              "variableName": "String contextDisplayName",
              "startLine": 68,
              "startColumn": 77,
              "endLine": 68,
              "endColumn": 102,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "String",
              "code": "        return mapFailure(failure, type, displayName);\n    }\n\n    public TypedResolveException mapFailure(Throwable failure, String type, String contextDisplayName) {\n        if (!(failure instanceof TypedResolveException)) {\n            return new TypedResolveException(\n                type,"
            },
            {
              "step": 10,
              "variableName": "contextDisplayName",
              "startLine": 72,
              "startColumn": 17,
              "endLine": 72,
              "endColumn": 35,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "String",
              "code": "        if (!(failure instanceof TypedResolveException)) {\n            return new TypedResolveException(\n                type,\n                contextDisplayName,\n                ImmutableList.of(mapRepositoryOverrideFailure(contextDisplayName, failure))\n            );\n        }"
            },
            {
              "step": 11,
              "variableName": "new TypedResolveException(...) : TypedResolveException",
              "startLine": 70,
              "startColumn": 20,
              "endLine": 74,
              "endColumn": 14,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "TypedResolveException",
              "code": "\n    public TypedResolveException mapFailure(Throwable failure, String type, String contextDisplayName) {\n        if (!(failure instanceof TypedResolveException)) {\n            return new TypedResolveException(\n                type,\n                contextDisplayName,\n                ImmutableList.of(mapRepositoryOverrideFailure(contextDisplayName, failure))"
            },
            {
              "step": 12,
              "variableName": "exceptionMapper.mapFailure(e, \"dependencies\", displayName.getDisplayName())",
              "startLine": 772,
              "startColumn": 27,
              "endLine": 772,
              "endColumn": 102,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/configurations/DefaultConfiguration.java",
              "type": "TypedResolveException",
              "code": "                try {\n                    results = resolver.resolveGraph(DefaultConfiguration.this);\n                } catch (Exception e) {\n                    throw exceptionMapper.mapFailure(e, \"dependencies\", displayName.getDisplayName());\n                }\n\n                // Make the new state visible in case a dependency resolution listener queries the result, which requires the new state"
            },
            {
              "step": 13,
              "variableName": "e",
              "startLine": 772,
              "startColumn": 54,
              "endLine": 772,
              "endColumn": 55,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/configurations/DefaultConfiguration.java",
              "type": "Exception",
              "code": "                try {\n                    results = resolver.resolveGraph(DefaultConfiguration.this);\n                } catch (Exception e) {\n                    throw exceptionMapper.mapFailure(e, \"dependencies\", displayName.getDisplayName());\n                }\n\n                // Make the new state visible in case a dependency resolution listener queries the result, which requires the new state"
            },
            {
              "step": 14,
              "variableName": "Throwable failure",
              "startLine": 68,
              "startColumn": 45,
              "endLine": 68,
              "endColumn": 62,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Throwable",
              "code": "        return mapFailure(failure, type, displayName);\n    }\n\n    public TypedResolveException mapFailure(Throwable failure, String type, String contextDisplayName) {\n        if (!(failure instanceof TypedResolveException)) {\n            return new TypedResolveException(\n                type,"
            },
            {
              "step": 15,
              "variableName": "failure",
              "startLine": 73,
              "startColumn": 83,
              "endLine": 73,
              "endColumn": 90,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Throwable",
              "code": "            return new TypedResolveException(\n                type,\n                contextDisplayName,\n                ImmutableList.of(mapRepositoryOverrideFailure(contextDisplayName, failure))\n            );\n        }\n"
            },
            {
              "step": 16,
              "variableName": "Throwable failure",
              "startLine": 94,
              "startColumn": 78,
              "endLine": 94,
              "endColumn": 95,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Throwable",
              "code": "\n    // TODO: We should handle this exception at the source instead of using instanceof to detect it after it is thrown.\n    //       We should try to avoid catching and analyzing runtime exceptions\n    public Throwable mapRepositoryOverrideFailure(String contextDisplayName, Throwable failure) {\n        if (!(failure instanceof ModuleVersionNotFoundException) || !settingsRepositoriesIgnored()) {\n            return failure;\n        }"
            },
            {
              "step": 17,
              "variableName": "failure",
              "startLine": 108,
              "startColumn": 35,
              "endLine": 108,
              "endColumn": 42,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Throwable",
              "code": "        return new TypedResolveException(\n            \"dependencies\",\n            contextDisplayName,\n            Collections.singleton(failure),\n            resolutions\n        );\n    }"
            },
            {
              "step": 18,
              "variableName": "Collections.singleton(failure)",
              "startLine": 108,
              "startColumn": 13,
              "endLine": 108,
              "endColumn": 43,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Set [<element>] : Throwable",
              "code": "        return new TypedResolveException(\n            \"dependencies\",\n            contextDisplayName,\n            Collections.singleton(failure),\n            resolutions\n        );\n    }"
            },
            {
              "step": 19,
              "variableName": "Collections.singleton(failure)",
              "startLine": 108,
              "startColumn": 13,
              "endLine": 108,
              "endColumn": 43,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Set",
              "code": "        return new TypedResolveException(\n            \"dependencies\",\n            contextDisplayName,\n            Collections.singleton(failure),\n            resolutions\n        );\n    }"
            },
            {
              "step": 20,
              "variableName": "Iterable<? extends Throwable> failures",
              "startLine": 42,
              "startColumn": 67,
              "endLine": 42,
              "endColumn": 105,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ivyservice/TypedResolveException.java",
              "type": "Set",
              "code": "    /**\n     * Creates a new instance with resolutions.\n     */\n    public TypedResolveException(String type, String displayName, Iterable<? extends Throwable> failures, List<String> resolutions) {\n        super(buildMessage(type, displayName), failures, false);\n        this.type = type;\n        this.resolutions = ImmutableList.copyOf(resolutions);"
            },
            {
              "step": 21,
              "variableName": "failures",
              "startLine": 43,
              "startColumn": 48,
              "endLine": 43,
              "endColumn": 56,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ivyservice/TypedResolveException.java",
              "type": "Set",
              "code": "     * Creates a new instance with resolutions.\n     */\n    public TypedResolveException(String type, String displayName, Iterable<? extends Throwable> failures, List<String> resolutions) {\n        super(buildMessage(type, displayName), failures, false);\n        this.type = type;\n        this.resolutions = ImmutableList.copyOf(resolutions);\n    }"
            },
            {
              "step": 22,
              "variableName": "Iterable<? extends Throwable> causes",
              "startLine": 77,
              "startColumn": 48,
              "endLine": 77,
              "endColumn": 84,
              "uri": "gradle-8.14.0/subprojects/core-api/src/main/java/org/gradle/api/artifacts/ResolveException.java",
              "type": "Set",
              "code": "     * @since 8.9\n     */\n    @Incubating\n    protected ResolveException(String message, Iterable<? extends Throwable> causes, @SuppressWarnings(\"unused\") boolean dummy) {\n        super(message, causes);\n    }\n}"
            },
            {
              "step": 23,
              "variableName": "causes",
              "startLine": 78,
              "startColumn": 24,
              "endLine": 78,
              "endColumn": 30,
              "uri": "gradle-8.14.0/subprojects/core-api/src/main/java/org/gradle/api/artifacts/ResolveException.java",
              "type": "Set",
              "code": "     */\n    @Incubating\n    protected ResolveException(String message, Iterable<? extends Throwable> causes, @SuppressWarnings(\"unused\") boolean dummy) {\n        super(message, causes);\n    }\n}\n"
            },
            {
              "step": 24,
              "variableName": "Iterable<? extends Throwable> causes",
              "startLine": 47,
              "startColumn": 55,
              "endLine": 47,
              "endColumn": 91,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "Set",
              "code": "        this.causes.addAll(Arrays.asList(causes));\n    }\n\n    public DefaultMultiCauseException(String message, Iterable<? extends Throwable> causes) {\n        super(message);\n        this.message = message;\n        initCauses(causes);"
            },
            {
              "step": 25,
              "variableName": "causes",
              "startLine": 50,
              "startColumn": 20,
              "endLine": 50,
              "endColumn": 26,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "Set",
              "code": "    public DefaultMultiCauseException(String message, Iterable<? extends Throwable> causes) {\n        super(message);\n        this.message = message;\n        initCauses(causes);\n    }\n\n    public DefaultMultiCauseException(Factory<String> messageFactory) {"
            },
            {
              "step": 26,
              "variableName": "Iterable<? extends Throwable> causes",
              "startLine": 112,
              "startColumn": 28,
              "endLine": 112,
              "endColumn": 64,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "Iterable",
              "code": "        return null;\n    }\n\n    public void initCauses(Iterable<? extends Throwable> causes) {\n        this.causes.clear();\n        for (Throwable cause : causes) {\n            this.causes.add(cause);"
            },
            {
              "step": 27,
              "variableName": "cause",
              "startLine": 115,
              "startColumn": 29,
              "endLine": 115,
              "endColumn": 34,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "Throwable",
              "code": "    public void initCauses(Iterable<? extends Throwable> causes) {\n        this.causes.clear();\n        for (Throwable cause : causes) {\n            this.causes.add(cause);\n        }\n    }\n"
            },
            {
              "step": 28,
              "variableName": "this.causes",
              "startLine": 115,
              "startColumn": 13,
              "endLine": 115,
              "endColumn": 24,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "CopyOnWriteArrayList [<element>] : Throwable",
              "code": "    public void initCauses(Iterable<? extends Throwable> causes) {\n        this.causes.clear();\n        for (Throwable cause : causes) {\n            this.causes.add(cause);\n        }\n    }\n"
            },
            {
              "step": 29,
              "variableName": "this",
              "startLine": 115,
              "startColumn": 13,
              "endLine": 115,
              "endColumn": 17,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "DefaultMultiCauseException [causes, <element>] : Throwable",
              "code": "    public void initCauses(Iterable<? extends Throwable> causes) {\n        this.causes.clear();\n        for (Throwable cause : causes) {\n            this.causes.add(cause);\n        }\n    }\n"
            },
            {
              "step": 30,
              "variableName": "projectConfigurationException",
              "startLine": 57,
              "startColumn": 17,
              "endLine": 57,
              "endColumn": 46,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/DefaultExceptionAnalyser.java",
              "type": "ProjectConfigurationException [causes, <element>] : Throwable",
              "code": "                }\n            }\n            if (!additionalFailures.isEmpty()) {\n                projectConfigurationException.initCauses(additionalFailures);\n                failures.add(transform(projectConfigurationException));\n            }\n        } else if (exception instanceof ServiceCreationException) {"
            },
            {
              "step": 31,
              "variableName": "projectConfigurationException",
              "startLine": 58,
              "startColumn": 40,
              "endLine": 58,
              "endColumn": 69,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/DefaultExceptionAnalyser.java",
              "type": "ProjectConfigurationException [causes, <element>] : Throwable",
              "code": "            }\n            if (!additionalFailures.isEmpty()) {\n                projectConfigurationException.initCauses(additionalFailures);\n                failures.add(transform(projectConfigurationException));\n            }\n        } else if (exception instanceof ServiceCreationException) {\n            failures.add(transform(new InitializationException(exception)));"
            },
            {
              "step": 32,
              "variableName": "transform(projectConfigurationException)",
              "startLine": 58,
              "startColumn": 30,
              "endLine": 58,
              "endColumn": 70,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/DefaultExceptionAnalyser.java",
              "type": "LocationAwareException",
              "code": "            }\n            if (!additionalFailures.isEmpty()) {\n                projectConfigurationException.initCauses(additionalFailures);\n                failures.add(transform(projectConfigurationException));\n            }\n        } else if (exception instanceof ServiceCreationException) {\n            failures.add(transform(new InitializationException(exception)));"
            },
            {
              "step": 33,
              "variableName": "failures",
              "startLine": 58,
              "startColumn": 17,
              "endLine": 58,
              "endColumn": 25,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/DefaultExceptionAnalyser.java",
              "type": "Collection [<element>] : LocationAwareException",
              "code": "            }\n            if (!additionalFailures.isEmpty()) {\n                projectConfigurationException.initCauses(additionalFailures);\n                failures.add(transform(projectConfigurationException));\n            }\n        } else if (exception instanceof ServiceCreationException) {\n            failures.add(transform(new InitializationException(exception)));"
            },
            {
              "step": 34,
              "variableName": "result",
              "startLine": 53,
              "startColumn": 54,
              "endLine": 53,
              "endColumn": 60,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/MultipleBuildFailuresExceptionAnalyser.java",
              "type": "ArrayList [<element>] : LocationAwareException",
              "code": "        for (Throwable failure : failures) {\n            if (failure instanceof MultipleBuildFailures) {\n                for (Throwable cause : ((MultipleBuildFailures) failure).getCauses()) {\n                    collector.collectFailures(cause, result);\n                }\n            } else {\n                collector.collectFailures(failure, result);"
            },
            {
              "step": 35,
              "variableName": "result",
              "startLine": 60,
              "startColumn": 39,
              "endLine": 60,
              "endColumn": 45,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/MultipleBuildFailuresExceptionAnalyser.java",
              "type": "ArrayList [<element>] : LocationAwareException",
              "code": "            }\n        }\n        if (result.size() == 1 && result.get(0) instanceof RuntimeException) {\n            return (RuntimeException) result.get(0);\n        } else {\n            return new MultipleBuildFailures(result);\n        }"
            },
            {
              "step": 36,
              "variableName": "result.get(0)",
              "startLine": 60,
              "startColumn": 39,
              "endLine": 60,
              "endColumn": 52,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/MultipleBuildFailuresExceptionAnalyser.java",
              "type": "LocationAwareException",
              "code": "            }\n        }\n        if (result.size() == 1 && result.get(0) instanceof RuntimeException) {\n            return (RuntimeException) result.get(0);\n        } else {\n            return new MultipleBuildFailures(result);\n        }"
            },
            {
              "step": 37,
              "variableName": "(RuntimeException) result.get(0)",
              "startLine": 60,
              "startColumn": 20,
              "endLine": 60,
              "endColumn": 52,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/MultipleBuildFailuresExceptionAnalyser.java",
              "type": "LocationAwareException",
              "code": "            }\n        }\n        if (result.size() == 1 && result.get(0) instanceof RuntimeException) {\n            return (RuntimeException) result.get(0);\n        } else {\n            return new MultipleBuildFailures(result);\n        }"
            },
            {
              "step": 38,
              "variableName": "exceptionAnalyser.transform(finishFailures)",
              "startLine": 72,
              "startColumn": 16,
              "endLine": 72,
              "endColumn": 59,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/internal/buildtree/DefaultBuildTreeFinishExecutor.java",
              "type": "LocationAwareException",
              "code": "            finishFailures.addAll(result.getFailures());\n        });\n\n        return exceptionAnalyser.transform(finishFailures);\n    }\n}\n"
            },
            {
              "step": 39,
              "variableName": "delegate.finishBuildTree(failures)",
              "startLine": 46,
              "startColumn": 28,
              "endLine": 46,
              "endColumn": 62,
              "uri": "gradle-8.14.0/subprojects/composite-builds/src/main/java/org/gradle/composite/internal/OperationFiringBuildTreeFinishExecutor.java",
              "type": "LocationAwareException",
              "code": "            @Override\n            public RuntimeException call(BuildOperationContext context) {\n                try {\n                    return delegate.finishBuildTree(failures);\n                } finally {\n                    context.setResult(RESULT);\n                }"
            },
            {
              "step": 40,
              "variableName": "buildOperation.call(context)",
              "startLine": 239,
              "startColumn": 21,
              "endLine": 239,
              "endColumn": 49,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/testFixtures/java/org/gradle/internal/operations/TestBuildOperationRunner.java",
              "type": "LocationAwareException",
              "code": "            TestBuildOperationContext context = new TestBuildOperationContext(record);\n            T t;\n            try {\n                t = buildOperation.call(context);\n            } catch (Throwable failure) {\n                if (record.failure == null) {\n                    record.failure = failure;"
            },
            {
              "step": 41,
              "variableName": "t",
              "startLine": 246,
              "startColumn": 20,
              "endLine": 246,
              "endColumn": 21,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/testFixtures/java/org/gradle/internal/operations/TestBuildOperationRunner.java",
              "type": "LocationAwareException",
              "code": "                }\n                throw throwAsUncheckedException(failure);\n            }\n            return t;\n        }\n\n        private <O extends BuildOperation> void execute(O buildOperation, BuildOperationWorker<O> worker) {"
            },
            {
              "step": 42,
              "variableName": "log.call(buildOperation)",
              "startLine": 51,
              "startColumn": 16,
              "endLine": 51,
              "endColumn": 40,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/testFixtures/java/org/gradle/internal/operations/TestBuildOperationRunner.java",
              "type": "LocationAwareException",
              "code": "\n    @Override\n    public <T> T call(CallableBuildOperation<T> buildOperation) {\n        return log.call(buildOperation);\n    }\n\n    @Override"
            },
            {
              "step": 43,
              "variableName": "ca",
              "startLine": 115,
              "startColumn": 5,
              "endLine": 121,
              "endColumn": 7,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/configurationcache/ConfigurationCacheBuildOperations.kt",
              "type": "LocationAwareException",
              "code": "\ninternal\nfun <T : Any> BuildOperationRunner.withModelLoadOperation(block: () -> T): T =\n    call(object : CallableBuildOperation<T> {\n        override fun description(): BuildOperationDescriptor.Builder = BuildOperationDescriptor\n            .displayName(\"Load model from configuration cache\")\n            .progressDisplayName(\"Loading model from configuration cache\")"
            },
            {
              "step": 44,
              "variableName": "ca",
              "startLine": 115,
              "startColumn": 5,
              "endLine": 121,
              "endColumn": 7,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/configurationcache/ConfigurationCacheBuildOperations.kt",
              "type": "LocationAwareException",
              "code": "\ninternal\nfun <T : Any> BuildOperationRunner.withModelLoadOperation(block: () -> T): T =\n    call(object : CallableBuildOperation<T> {\n        override fun description(): BuildOperationDescriptor.Builder = BuildOperationDescriptor\n            .displayName(\"Load model from configuration cache\")\n            .progressDisplayName(\"Loading model from configuration cache\")"
            },
            {
              "step": 45,
              "variableName": "b",
              "startLine": 635,
              "startColumn": 9,
              "endLine": 641,
              "endColumn": 10,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "        // No need to record the `ClassLoaderScope` tree when loading\n        scopeRegistryListener.dispose()\n\n        buildOperationRunner.withModelLoadOperation {\n            val storeLoadResult = entryStore.useForStateLoad(StateType.Model) { stateFile: ConfigurationCacheStateFile ->\n                cacheIO.readModelFrom(stateFile)\n            }"
            },
            {
              "step": 46,
              "variableName": "block()",
              "startLine": 668,
              "startColumn": 22,
              "endLine": 668,
              "endColumn": 29,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "    private\n    inline fun <T> runAtConfigurationTime(block: () -> T): T {\n        prepareConfigurationTimeBarrier()\n        val result = block()\n        crossConfigurationTimeBarrier()\n        return result\n    }"
            },
            {
              "step": 47,
              "variableName": "result",
              "startLine": 670,
              "startColumn": 16,
              "endLine": 670,
              "endColumn": 22,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "        prepareConfigurationTimeBarrier()\n        val result = block()\n        crossConfigurationTimeBarrier()\n        return result\n    }\n\n    private"
            },
            {
              "step": 48,
              "variableName": "runAtConfigurationTime(...) : LocationAwareException",
              "startLine": 631,
              "startColumn": 28,
              "endLine": 642,
              "endColumn": 6,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "    data class LoadResultMetadata(val originInvocationId: String? = null)\n\n    private\n    fun loadModel(): Any = runAtConfigurationTime {\n        // No need to record the `ClassLoaderScope` tree when loading\n        scopeRegistryListener.dispose()\n"
            },
            {
              "step": 49,
              "variableName": "loadModel()",
              "startLine": 268,
              "startColumn": 20,
              "endLine": 268,
              "endColumn": 31,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "    override fun <T : Any> loadOrCreateModel(creator: () -> T): T {\n        if (isLoaded) {\n            runLoadedSideEffects()\n            return loadModel().uncheckedCast()\n        }\n\n        return runWorkThatContributesToCacheEntry {"
            },
            {
              "step": 50,
              "variableName": "Any",
              "startLine": 22,
              "startColumn": 15,
              "endLine": 22,
              "endColumn": 18,
              "uri": "gradle-8.14.0/platforms/core-configuration/stdlib-kotlin-extensions/src/main/kotlin/org/gradle/internal/extensions/stdlib/CastExtensions.kt",
              "type": "Object",
              "code": "import org.gradle.internal.Cast\n\n\nfun <T : Any> Any.uncheckedCast(): T =\n    Cast.uncheckedNonnullCast(this)\n"
            },
            {
              "step": 51,
              "variableName": "this",
              "startLine": 23,
              "startColumn": 31,
              "endLine": 23,
              "endColumn": 35,
              "uri": "gradle-8.14.0/platforms/core-configuration/stdlib-kotlin-extensions/src/main/kotlin/org/gradle/internal/extensions/stdlib/CastExtensions.kt",
              "type": "Object",
              "code": "\n\nfun <T : Any> Any.uncheckedCast(): T =\n    Cast.uncheckedNonnullCast(this)\n"
            },
            {
              "step": 52,
              "variableName": "Object object",
              "startLine": 76,
              "startColumn": 46,
              "endLine": 76,
              "endColumn": 59,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/Cast.java",
              "type": "Object",
              "code": "    }\n\n    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})\n    public static <T> T uncheckedNonnullCast(Object object) {\n        return (T) object;\n    }\n}"
            },
            {
              "step": 53,
              "variableName": "(T) object",
              "startLine": 77,
              "startColumn": 16,
              "endLine": 77,
              "endColumn": 26,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/Cast.java",
              "type": "Object",
              "code": "\n    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})\n    public static <T> T uncheckedNonnullCast(Object object) {\n        return (T) object;\n    }\n}\n"
            },
            {
              "step": 54,
              "variableName": "uncheckedNonnullCast(this)",
              "startLine": 23,
              "startColumn": 10,
              "endLine": 23,
              "endColumn": 36,
              "uri": "gradle-8.14.0/platforms/core-configuration/stdlib-kotlin-extensions/src/main/kotlin/org/gradle/internal/extensions/stdlib/CastExtensions.kt",
              "type": "Object",
              "code": "\n\nfun <T : Any> Any.uncheckedCast(): T =\n    Cast.uncheckedNonnullCast(this)\n"
            },
            {
              "step": 55,
              "variableName": "uncheckedNonnullCast(this)",
              "startLine": 23,
              "startColumn": 10,
              "endLine": 23,
              "endColumn": 36,
              "uri": "gradle-8.14.0/platforms/core-configuration/stdlib-kotlin-extensions/src/main/kotlin/org/gradle/internal/extensions/stdlib/CastExtensions.kt",
              "type": "Object",
              "code": "\n\nfun <T : Any> Any.uncheckedCast(): T =\n    Cast.uncheckedNonnullCast(this)\n"
            },
            {
              "step": 56,
              "variableName": "!!.uncheckedCast<T>()",
              "startLine": 159,
              "startColumn": 57,
              "endLine": 159,
              "endColumn": 78,
              "uri": "gradle-8.14.0/platforms/core-configuration/graph-serialization/src/main/kotlin/org/gradle/internal/serialize/graph/Codec.kt",
              "type": "Object",
              "code": "    getSingletonProperty(T::class.java)\n\n\nsuspend fun <T : Any> ReadContext.readNonNull() = read()!!.uncheckedCast<T>()\n\n\ninterface IsolateContext {"
            },
            {
              "step": 57,
              "variableName": "readNonNull<FileCollection>()",
              "startLine": 781,
              "startColumn": 29,
              "endLine": 781,
              "endColumn": 58,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/ConfigurationCacheState.kt",
              "type": "FileCollection",
              "code": "        val buildOutputCleanupRegistry = gradle.serviceOf<BuildOutputCleanupRegistry>()\n        withGradleIsolate(gradle, userTypesCodec) {\n            readCollection {\n                val files = readNonNull<FileCollection>()\n                buildOutputCleanupRegistry.registerOutputs(files)\n            }\n        }"
            },
            {
              "step": 58,
              "variableName": "files",
              "startLine": 782,
              "startColumn": 60,
              "endLine": 782,
              "endColumn": 65,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/ConfigurationCacheState.kt",
              "type": "FileCollection",
              "code": "        withGradleIsolate(gradle, userTypesCodec) {\n            readCollection {\n                val files = readNonNull<FileCollection>()\n                buildOutputCleanupRegistry.registerOutputs(files)\n            }\n        }\n    }"
            },
            {
              "step": 59,
              "variableName": "Object files",
              "startLine": 46,
              "startColumn": 33,
              "endLine": 46,
              "endColumn": 45,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/internal/cleanup/DefaultBuildOutputCleanupRegistry.java",
              "type": "FileCollection",
              "code": "    }\n\n    @Override\n    public void registerOutputs(Object files) {\n        synchronized (lock) {\n            if (resolvedPaths != null) {\n                // Some tasks cannot declare the dependencies on other projects, yet, for example the dependencies task."
            },
            {
              "step": 60,
              "variableName": "files",
              "startLine": 55,
              "startColumn": 66,
              "endLine": 55,
              "endColumn": 71,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/internal/cleanup/DefaultBuildOutputCleanupRegistry.java",
              "type": "FileCollection",
              "code": "                // See https://github.com/gradle/gradle/issues/18460.\n                LOGGER.debug(\"More outputs are being registered even though the build output cleanup registry has already been finalized. New outputs: {}\", files);\n            } else {\n                this.outputs.add(fileCollectionFactory.resolving(files));\n            }\n        }\n    }"
            },
            {
              "step": 61,
              "variableName": "Object sources",
              "startLine": 187,
              "startColumn": 45,
              "endLine": 187,
              "endColumn": 59,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-collections/src/main/java/org/gradle/api/internal/file/DefaultFileCollectionFactory.java",
              "type": "FileCollection",
              "code": "    }\n\n    @Override\n    public FileCollectionInternal resolving(Object sources) {\n        return resolving(ProviderResolutionStrategy.REQUIRE_PRESENT, sources);\n    }\n"
            },
            {
              "step": 62,
              "variableName": "sources",
              "startLine": 188,
              "startColumn": 70,
              "endLine": 188,
              "endColumn": 77,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-collections/src/main/java/org/gradle/api/internal/file/DefaultFileCollectionFactory.java",
              "type": "FileCollection",
              "code": "\n    @Override\n    public FileCollectionInternal resolving(Object sources) {\n        return resolving(ProviderResolutionStrategy.REQUIRE_PRESENT, sources);\n    }\n\n    @Override"
            },
            {
              "step": 63,
              "variableName": "Object sources",
              "startLine": 196,
              "startColumn": 101,
              "endLine": 196,
              "endColumn": 115,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-collections/src/main/java/org/gradle/api/internal/file/DefaultFileCollectionFactory.java",
              "type": "Object",
              "code": "        return resolving(ProviderResolutionStrategy.ALLOW_ABSENT, sources);\n    }\n\n    private FileCollectionInternal resolving(ProviderResolutionStrategy providerResolutionStrategy, Object sources) {\n        if (sources instanceof FileCollectionInternal) {\n            return (FileCollectionInternal) sources;\n        }"
            },
            {
              "step": 64,
              "variableName": "(FileCollectionInternal) sources",
              "startLine": 198,
              "startColumn": 20,
              "endLine": 198,
              "endColumn": 52,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-collections/src/main/java/org/gradle/api/internal/file/DefaultFileCollectionFactory.java",
              "type": "FileCollectionInternal",
              "code": "\n    private FileCollectionInternal resolving(ProviderResolutionStrategy providerResolutionStrategy, Object sources) {\n        if (sources instanceof FileCollectionInternal) {\n            return (FileCollectionInternal) sources;\n        }\n        if (isEmptyArray(sources)) {\n            return FileCollectionFactory.empty();"
            },
            {
              "step": 65,
              "variableName": "resolving(ProviderResolutionStrategy.REQUIRE_PRESENT, sources)",
              "startLine": 188,
              "startColumn": 16,
              "endLine": 188,
              "endColumn": 78,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-collections/src/main/java/org/gradle/api/internal/file/DefaultFileCollectionFactory.java",
              "type": "FileCollectionInternal",
              "code": "\n    @Override\n    public FileCollectionInternal resolving(Object sources) {\n        return resolving(ProviderResolutionStrategy.REQUIRE_PRESENT, sources);\n    }\n\n    @Override"
            },
            {
              "step": 66,
              "variableName": "fileCollectionFactory.resolving(this)",
              "startLine": 345,
              "startColumn": 20,
              "endLine": 345,
              "endColumn": 57,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-collections/src/main/java/org/gradle/api/internal/file/DefaultFilePropertyFactory.java",
              "type": "FileCollectionInternal",
              "code": "\n        @Override\n        public FileTree getAsFileTree() {\n            return fileCollectionFactory.resolving(this).getAsFileTree();\n        }\n\n        @Override"
            },
            {
              "step": 67,
              "variableName": "getAsFileTree",
              "startLine": 103,
              "startColumn": 29,
              "endLine": 103,
              "endColumn": 42,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-collections/src/main/java/org/gradle/api/internal/file/AbstractFileTree.java",
              "type": "AbstractFileTree",
              "code": "    }\n\n    @Override\n    public FileTreeInternal getAsFileTree() {\n        return this;\n    }\n"
            },
            {
              "step": 68,
              "variableName": "this",
              "startLine": 104,
              "startColumn": 16,
              "endLine": 104,
              "endColumn": 20,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-collections/src/main/java/org/gradle/api/internal/file/AbstractFileTree.java",
              "type": "AbstractFileTree",
              "code": "\n    @Override\n    public FileTreeInternal getAsFileTree() {\n        return this;\n    }\n\n    @Override"
            },
            {
              "step": 69,
              "variableName": "fileCollectionFactory.resolving(this).getAsFileTree()",
              "startLine": 345,
              "startColumn": 20,
              "endLine": 345,
              "endColumn": 73,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-collections/src/main/java/org/gradle/api/internal/file/DefaultFilePropertyFactory.java",
              "type": "AbstractFileTree",
              "code": "\n        @Override\n        public FileTree getAsFileTree() {\n            return fileCollectionFactory.resolving(this).getAsFileTree();\n        }\n\n        @Override"
            },
            {
              "step": 70,
              "variableName": "getSamplesRoot()",
              "startLine": 102,
              "startColumn": 9,
              "endLine": 103,
              "endColumn": 29,
              "uri": "gradle-8.14.0/build-logic/documentation/src/main/groovy/gradlebuild/docs/FindBrokenInternalLinks.java",
              "type": "AbstractFileTree",
              "code": "\n        gatherDeadLinksInFileReleaseNotes(errors);\n\n        getSamplesRoot()\n            .getAsFileTree()\n            .matching(pattern -> {\n                pattern.include(\"**/*.adoc\");"
            },
            {
              "step": 71,
              "variableName": "matching",
              "startLine": 60,
              "startColumn": 21,
              "endLine": 60,
              "endColumn": 29,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-collections/src/main/java/org/gradle/api/internal/file/EmptyFileTree.java",
              "type": "EmptyFileTree",
              "code": "    }\n\n    @Override\n    public FileTree matching(Action<? super PatternFilterable> filterConfigAction) {\n        return this;\n    }\n"
            },
            {
              "step": 72,
              "variableName": "this",
              "startLine": 61,
              "startColumn": 16,
              "endLine": 61,
              "endColumn": 20,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-collections/src/main/java/org/gradle/api/internal/file/EmptyFileTree.java",
              "type": "EmptyFileTree",
              "code": "\n    @Override\n    public FileTree matching(Action<? super PatternFilterable> filterConfigAction) {\n        return this;\n    }\n\n    @Override"
            },
            {
              "step": 73,
              "variableName": "getSam",
              "startLine": 102,
              "startColumn": 9,
              "endLine": 107,
              "endColumn": 15,
              "uri": "gradle-8.14.0/build-logic/documentation/src/main/groovy/gradlebuild/docs/FindBrokenInternalLinks.java",
              "type": "EmptyFileTree",
              "code": "\n        gatherDeadLinksInFileReleaseNotes(errors);\n\n        getSamplesRoot()\n            .getAsFileTree()\n            .matching(pattern -> {\n                pattern.include(\"**/*.adoc\");"
            },
            {
              "step": 74,
              "variableName": "file -> gatherDeadLinksInFileSamples(file, errors)",
              "startLine": 108,
              "startColumn": 22,
              "endLine": 108,
              "endColumn": 72,
              "uri": "gradle-8.14.0/build-logic/documentation/src/main/groovy/gradlebuild/docs/FindBrokenInternalLinks.java",
              "type": "new Consumer<File>(...) { ... } [Map<File,List<Error>> errors, <map.key>]",
              "code": "                pattern.include(\"**/*.adoc\");\n                pattern.exclude(\"**/index.adoc\"); // Exclude index.adoc files\n            })\n            .forEach(file -> gatherDeadLinksInFileSamples(file, errors));\n\n        getDocumentationRoot().getAsFileTree().matching(pattern -> pattern.include(\"**/*.adoc\")).forEach(file -> {\n            gatherDeadLinksInFile(file, errors);"
            },
            {
              "step": 75,
              "variableName": "file -> gatherDeadLinksInFileSamples(file, errors)",
              "startLine": 108,
              "startColumn": 22,
              "endLine": 108,
              "endColumn": 72,
              "uri": "gradle-8.14.0/build-logic/documentation/src/main/groovy/gradlebuild/docs/FindBrokenInternalLinks.java",
              "type": "TreeMap [<map.key>]",
              "code": "                pattern.include(\"**/*.adoc\");\n                pattern.exclude(\"**/index.adoc\"); // Exclude index.adoc files\n            })\n            .forEach(file -> gatherDeadLinksInFileSamples(file, errors));\n\n        getDocumentationRoot().getAsFileTree().matching(pattern -> pattern.include(\"**/*.adoc\")).forEach(file -> {\n            gatherDeadLinksInFile(file, errors);"
            },
            {
              "step": 76,
              "variableName": "errors",
              "startLine": 114,
              "startColumn": 22,
              "endLine": 114,
              "endColumn": 28,
              "uri": "gradle-8.14.0/build-logic/documentation/src/main/groovy/gradlebuild/docs/FindBrokenInternalLinks.java",
              "type": "TreeMap [<map.key>]",
              "code": "            gatherDeadLinksInFile(file, errors);\n        });\n\n        reportErrors(errors, getReportFile().get().getAsFile());\n    }\n\n    private void reportErrors(Map<File, List<Error>> errors, File reportFile) {"
            },
            {
              "step": 77,
              "variableName": "Map<File, List<Error>> errors",
              "startLine": 117,
              "startColumn": 31,
              "endLine": 117,
              "endColumn": 60,
              "uri": "gradle-8.14.0/build-logic/documentation/src/main/groovy/gradlebuild/docs/FindBrokenInternalLinks.java",
              "type": "TreeMap [<map.key>]",
              "code": "        reportErrors(errors, getReportFile().get().getAsFile());\n    }\n\n    private void reportErrors(Map<File, List<Error>> errors, File reportFile) {\n        try (PrintWriter fw = new PrintWriter(new FileWriter(reportFile))) {\n            writeHeader(fw);\n            if (errors.isEmpty()) {"
            },
            {
              "step": 78,
              "variableName": "errors",
              "startLine": 124,
              "startColumn": 51,
              "endLine": 124,
              "endColumn": 57,
              "uri": "gradle-8.14.0/build-logic/documentation/src/main/groovy/gradlebuild/docs/FindBrokenInternalLinks.java",
              "type": "TreeMap [<map.key>]",
              "code": "                fw.println(\"All clear!\");\n                return;\n            }\n            for (Map.Entry<File, List<Error>> e : errors.entrySet()) {\n                File file = e.getKey();\n                List<Error> errorsForFile = e.getValue();\n"
            },
            {
              "step": 79,
              "variableName": "errors.entrySet()",
              "startLine": 124,
              "startColumn": 51,
              "endLine": 124,
              "endColumn": 68,
              "uri": "gradle-8.14.0/build-logic/documentation/src/main/groovy/gradlebuild/docs/FindBrokenInternalLinks.java",
              "type": "EntrySet [<element>, <map.key>]",
              "code": "                fw.println(\"All clear!\");\n                return;\n            }\n            for (Map.Entry<File, List<Error>> e : errors.entrySet()) {\n                File file = e.getKey();\n                List<Error> errorsForFile = e.getValue();\n"
            },
            {
              "step": 80,
              "variableName": "e",
              "startLine": 125,
              "startColumn": 29,
              "endLine": 125,
              "endColumn": 30,
              "uri": "gradle-8.14.0/build-logic/documentation/src/main/groovy/gradlebuild/docs/FindBrokenInternalLinks.java",
              "type": "Entry [<map.key>]",
              "code": "                return;\n            }\n            for (Map.Entry<File, List<Error>> e : errors.entrySet()) {\n                File file = e.getKey();\n                List<Error> errorsForFile = e.getValue();\n\n                StringBuilder sb = new StringBuilder();"
            },
            {
              "step": 81,
              "variableName": "e.getKey()",
              "startLine": 125,
              "startColumn": 29,
              "endLine": 125,
              "endColumn": 39,
              "uri": "gradle-8.14.0/build-logic/documentation/src/main/groovy/gradlebuild/docs/FindBrokenInternalLinks.java",
              "type": "File",
              "code": "                return;\n            }\n            for (Map.Entry<File, List<Error>> e : errors.entrySet()) {\n                File file = e.getKey();\n                List<Error> errorsForFile = e.getValue();\n\n                StringBuilder sb = new StringBuilder();"
            },
            {
              "step": 82,
              "variableName": "file",
              "startLine": 130,
              "startColumn": 43,
              "endLine": 130,
              "endColumn": 47,
              "uri": "gradle-8.14.0/build-logic/documentation/src/main/groovy/gradlebuild/docs/FindBrokenInternalLinks.java",
              "type": "File",
              "code": "\n                StringBuilder sb = new StringBuilder();\n                for (Error error : errorsForFile) {\n                    sb.append(\"ERROR: \" + file.getName() + \":\" + error.lineNumber + \" \" + error.message + \"\\n    \" + error.line + \"\\n\");\n                }\n                String message = sb.toString();\n                getLogger().error(message);"
            },
            {
              "step": 83,
              "variableName": "file.getName()",
              "startLine": 130,
              "startColumn": 43,
              "endLine": 130,
              "endColumn": 57,
              "uri": "gradle-8.14.0/build-logic/documentation/src/main/groovy/gradlebuild/docs/FindBrokenInternalLinks.java",
              "type": "String",
              "code": "\n                StringBuilder sb = new StringBuilder();\n                for (Error error : errorsForFile) {\n                    sb.append(\"ERROR: \" + file.getName() + \":\" + error.lineNumber + \" \" + error.message + \"\\n    \" + error.line + \"\\n\");\n                }\n                String message = sb.toString();\n                getLogger().error(message);"
            },
            {
              "step": 84,
              "variableName": "\"ERROR: \" + file.getName()",
              "startLine": 130,
              "startColumn": 31,
              "endLine": 130,
              "endColumn": 57,
              "uri": "gradle-8.14.0/build-logic/documentation/src/main/groovy/gradlebuild/docs/FindBrokenInternalLinks.java",
              "type": "String",
              "code": "\n                StringBuilder sb = new StringBuilder();\n                for (Error error : errorsForFile) {\n                    sb.append(\"ERROR: \" + file.getName() + \":\" + error.lineNumber + \" \" + error.message + \"\\n    \" + error.line + \"\\n\");\n                }\n                String message = sb.toString();\n                getLogger().error(message);"
            },
            {
              "step": 85,
              "variableName": "\"ERROR: \" + file.getName() + \":\"",
              "startLine": 130,
              "startColumn": 31,
              "endLine": 130,
              "endColumn": 63,
              "uri": "gradle-8.14.0/build-logic/documentation/src/main/groovy/gradlebuild/docs/FindBrokenInternalLinks.java",
              "type": "String",
              "code": "\n                StringBuilder sb = new StringBuilder();\n                for (Error error : errorsForFile) {\n                    sb.append(\"ERROR: \" + file.getName() + \":\" + error.lineNumber + \" \" + error.message + \"\\n    \" + error.line + \"\\n\");\n                }\n                String message = sb.toString();\n                getLogger().error(message);"
            },
            {
              "step": 86,
              "variableName": "\"ERROR: \" + file.getName() + \":\" + error.lineNumber",
              "startLine": 130,
              "startColumn": 31,
              "endLine": 130,
              "endColumn": 82,
              "uri": "gradle-8.14.0/build-logic/documentation/src/main/groovy/gradlebuild/docs/FindBrokenInternalLinks.java",
              "type": "String",
              "code": "\n                StringBuilder sb = new StringBuilder();\n                for (Error error : errorsForFile) {\n                    sb.append(\"ERROR: \" + file.getName() + \":\" + error.lineNumber + \" \" + error.message + \"\\n    \" + error.line + \"\\n\");\n                }\n                String message = sb.toString();\n                getLogger().error(message);"
            },
            {
              "step": 87,
              "variableName": "\"ERROR: \" + file.getName() + \":\" + error.lineNumber + \" \"",
              "startLine": 130,
              "startColumn": 31,
              "endLine": 130,
              "endColumn": 88,
              "uri": "gradle-8.14.0/build-logic/documentation/src/main/groovy/gradlebuild/docs/FindBrokenInternalLinks.java",
              "type": "String",
              "code": "\n                StringBuilder sb = new StringBuilder();\n                for (Error error : errorsForFile) {\n                    sb.append(\"ERROR: \" + file.getName() + \":\" + error.lineNumber + \" \" + error.message + \"\\n    \" + error.line + \"\\n\");\n                }\n                String message = sb.toString();\n                getLogger().error(message);"
            },
            {
              "step": 88,
              "variableName": "\"ERROR: \" + file.getName() + \":\" + error.lineNumber + \" \" + error.message",
              "startLine": 130,
              "startColumn": 31,
              "endLine": 130,
              "endColumn": 104,
              "uri": "gradle-8.14.0/build-logic/documentation/src/main/groovy/gradlebuild/docs/FindBrokenInternalLinks.java",
              "type": "String",
              "code": "\n                StringBuilder sb = new StringBuilder();\n                for (Error error : errorsForFile) {\n                    sb.append(\"ERROR: \" + file.getName() + \":\" + error.lineNumber + \" \" + error.message + \"\\n    \" + error.line + \"\\n\");\n                }\n                String message = sb.toString();\n                getLogger().error(message);"
            },
            {
              "step": 89,
              "variableName": "\"ERROR: \" + file.getName() + \":\" + error.lineNumber + \" \" + error.message + \"\\n    \"",
              "startLine": 130,
              "startColumn": 31,
              "endLine": 130,
              "endColumn": 115,
              "uri": "gradle-8.14.0/build-logic/documentation/src/main/groovy/gradlebuild/docs/FindBrokenInternalLinks.java",
              "type": "String",
              "code": "\n                StringBuilder sb = new StringBuilder();\n                for (Error error : errorsForFile) {\n                    sb.append(\"ERROR: \" + file.getName() + \":\" + error.lineNumber + \" \" + error.message + \"\\n    \" + error.line + \"\\n\");\n                }\n                String message = sb.toString();\n                getLogger().error(message);"
            },
            {
              "step": 90,
              "variableName": "\"ERROR: \" + file.getName() + \":\" + error.lineNumber + \" \" + error.message + \"\\n    \" + error.line",
              "startLine": 130,
              "startColumn": 31,
              "endLine": 130,
              "endColumn": 128,
              "uri": "gradle-8.14.0/build-logic/documentation/src/main/groovy/gradlebuild/docs/FindBrokenInternalLinks.java",
              "type": "String",
              "code": "\n                StringBuilder sb = new StringBuilder();\n                for (Error error : errorsForFile) {\n                    sb.append(\"ERROR: \" + file.getName() + \":\" + error.lineNumber + \" \" + error.message + \"\\n    \" + error.line + \"\\n\");\n                }\n                String message = sb.toString();\n                getLogger().error(message);"
            },
            {
              "step": 91,
              "variableName": "\"ERROR: \" + file.getName() + \":\" + error.lineNumber + \" \" + error.message + \"\\n    \" + error.line + \"\\n\"",
              "startLine": 130,
              "startColumn": 31,
              "endLine": 130,
              "endColumn": 135,
              "uri": "gradle-8.14.0/build-logic/documentation/src/main/groovy/gradlebuild/docs/FindBrokenInternalLinks.java",
              "type": "String",
              "code": "\n                StringBuilder sb = new StringBuilder();\n                for (Error error : errorsForFile) {\n                    sb.append(\"ERROR: \" + file.getName() + \":\" + error.lineNumber + \" \" + error.message + \"\\n    \" + error.line + \"\\n\");\n                }\n                String message = sb.toString();\n                getLogger().error(message);"
            },
            {
              "step": 92,
              "variableName": "sb",
              "startLine": 130,
              "startColumn": 21,
              "endLine": 130,
              "endColumn": 23,
              "uri": "gradle-8.14.0/build-logic/documentation/src/main/groovy/gradlebuild/docs/FindBrokenInternalLinks.java",
              "type": "StringBuilder",
              "code": "\n                StringBuilder sb = new StringBuilder();\n                for (Error error : errorsForFile) {\n                    sb.append(\"ERROR: \" + file.getName() + \":\" + error.lineNumber + \" \" + error.message + \"\\n    \" + error.line + \"\\n\");\n                }\n                String message = sb.toString();\n                getLogger().error(message);"
            },
            {
              "step": 93,
              "variableName": "sb",
              "startLine": 132,
              "startColumn": 34,
              "endLine": 132,
              "endColumn": 36,
              "uri": "gradle-8.14.0/build-logic/documentation/src/main/groovy/gradlebuild/docs/FindBrokenInternalLinks.java",
              "type": "StringBuilder",
              "code": "                for (Error error : errorsForFile) {\n                    sb.append(\"ERROR: \" + file.getName() + \":\" + error.lineNumber + \" \" + error.message + \"\\n    \" + error.line + \"\\n\");\n                }\n                String message = sb.toString();\n                getLogger().error(message);\n                fw.println(message);\n            }"
            },
            {
              "step": 94,
              "variableName": "sb.toString()",
              "startLine": 132,
              "startColumn": 34,
              "endLine": 132,
              "endColumn": 47,
              "uri": "gradle-8.14.0/build-logic/documentation/src/main/groovy/gradlebuild/docs/FindBrokenInternalLinks.java",
              "type": "String",
              "code": "                for (Error error : errorsForFile) {\n                    sb.append(\"ERROR: \" + file.getName() + \":\" + error.lineNumber + \" \" + error.message + \"\\n    \" + error.line + \"\\n\");\n                }\n                String message = sb.toString();\n                getLogger().error(message);\n                fw.println(message);\n            }"
            },
            {
              "step": 95,
              "variableName": "message",
              "startLine": 134,
              "startColumn": 28,
              "endLine": 134,
              "endColumn": 35,
              "uri": "gradle-8.14.0/build-logic/documentation/src/main/groovy/gradlebuild/docs/FindBrokenInternalLinks.java",
              "type": "",
              "code": "                }\n                String message = sb.toString();\n                getLogger().error(message);\n                fw.println(message);\n            }\n        } catch (IOException e) {\n            throw new UncheckedIOException(e);"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "source",
              "startLine": 42,
              "startColumn": 27,
              "endLine": 42,
              "endColumn": 33,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/RegExpNameMapper.java",
              "type": "String",
              "code": "        if (matcher == null) {\n            matcher = pattern.matcher(source);\n        } else {\n            matcher.reset(source);\n        }\n        String result = source;\n        if (matcher.find()) {"
            },
            {
              "step": 1,
              "variableName": "result",
              "startLine": 48,
              "startColumn": 16,
              "endLine": 48,
              "endColumn": 22,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/RegExpNameMapper.java",
              "type": "String",
              "code": "        if (matcher.find()) {\n            result = matcher.replaceFirst(replacement);\n        }\n        return result;\n    }\n}\n"
            },
            {
              "step": 2,
              "variableName": "transformer.transform(value)",
              "startLine": 37,
              "startColumn": 31,
              "endLine": 37,
              "endColumn": 59,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/ChainingTransformer.java",
              "type": "String",
              "code": "    public T transform(T original) {\n        T value = original;\n        for (Transformer<T, T> transformer : transformers) {\n            value = type.cast(transformer.transform(value));\n        }\n        return value;\n    }"
            },
            {
              "step": 3,
              "variableName": "type.cast(transformer.transform(value))",
              "startLine": 37,
              "startColumn": 21,
              "endLine": 37,
              "endColumn": 60,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/ChainingTransformer.java",
              "type": "String",
              "code": "    public T transform(T original) {\n        T value = original;\n        for (Transformer<T, T> transformer : transformers) {\n            value = type.cast(transformer.transform(value));\n        }\n        return value;\n    }"
            },
            {
              "step": 4,
              "variableName": "value",
              "startLine": 39,
              "startColumn": 16,
              "endLine": 39,
              "endColumn": 21,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/ChainingTransformer.java",
              "type": "String",
              "code": "        for (Transformer<T, T> transformer : transformers) {\n            value = type.cast(transformer.transform(value));\n        }\n        return value;\n    }\n\n    public void add(Transformer<T, T> transformer) {"
            },
            {
              "step": 5,
              "variableName": "describer.transform(this)",
              "startLine": 163,
              "startColumn": 16,
              "endLine": 163,
              "endColumn": 41,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/repositories/DefaultMavenArtifactRepository.java",
              "type": "String",
              "code": "\n    @Override\n    public String getDisplayName() {\n        return describer.transform(this);\n    }\n\n    @Override"
            },
            {
              "step": 6,
              "variableName": "describable.getDisplayName()",
              "startLine": 313,
              "startColumn": 35,
              "endLine": 313,
              "endColumn": 63,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "String",
              "code": "        public String getDisplayName() {\n            synchronized (this) {\n                if (displayName == null) {\n                    displayName = describable.getDisplayName();\n                    if (capDisplayName != null || !(describable instanceof DisplayName)) {\n                        describable = null;\n                    }"
            },
            {
              "step": 7,
              "variableName": "displayName",
              "startLine": 318,
              "startColumn": 24,
              "endLine": 318,
              "endColumn": 35,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "String",
              "code": "                        describable = null;\n                    }\n                }\n                return displayName;\n            }\n        }\n    }"
            },
            {
              "step": 8,
              "variableName": "displayName.getDisplayName()",
              "startLine": 772,
              "startColumn": 73,
              "endLine": 772,
              "endColumn": 101,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/configurations/DefaultConfiguration.java",
              "type": "String",
              "code": "                try {\n                    results = resolver.resolveGraph(DefaultConfiguration.this);\n                } catch (Exception e) {\n                    throw exceptionMapper.mapFailure(e, \"dependencies\", displayName.getDisplayName());\n                }\n\n                // Make the new state visible in case a dependency resolution listener queries the result, which requires the new state"
            },
            {
              "step": 9,
              "variableName": "String contextDisplayName",
              "startLine": 68,
              "startColumn": 77,
              "endLine": 68,
              "endColumn": 102,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "String",
              "code": "        return mapFailure(failure, type, displayName);\n    }\n\n    public TypedResolveException mapFailure(Throwable failure, String type, String contextDisplayName) {\n        if (!(failure instanceof TypedResolveException)) {\n            return new TypedResolveException(\n                type,"
            },
            {
              "step": 10,
              "variableName": "contextDisplayName",
              "startLine": 72,
              "startColumn": 17,
              "endLine": 72,
              "endColumn": 35,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "String",
              "code": "        if (!(failure instanceof TypedResolveException)) {\n            return new TypedResolveException(\n                type,\n                contextDisplayName,\n                ImmutableList.of(mapRepositoryOverrideFailure(contextDisplayName, failure))\n            );\n        }"
            },
            {
              "step": 11,
              "variableName": "new TypedResolveException(...) : TypedResolveException",
              "startLine": 70,
              "startColumn": 20,
              "endLine": 74,
              "endColumn": 14,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "TypedResolveException",
              "code": "\n    public TypedResolveException mapFailure(Throwable failure, String type, String contextDisplayName) {\n        if (!(failure instanceof TypedResolveException)) {\n            return new TypedResolveException(\n                type,\n                contextDisplayName,\n                ImmutableList.of(mapRepositoryOverrideFailure(contextDisplayName, failure))"
            },
            {
              "step": 12,
              "variableName": "exceptionMapper.mapFailure(e, \"dependencies\", displayName.getDisplayName())",
              "startLine": 772,
              "startColumn": 27,
              "endLine": 772,
              "endColumn": 102,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/configurations/DefaultConfiguration.java",
              "type": "TypedResolveException",
              "code": "                try {\n                    results = resolver.resolveGraph(DefaultConfiguration.this);\n                } catch (Exception e) {\n                    throw exceptionMapper.mapFailure(e, \"dependencies\", displayName.getDisplayName());\n                }\n\n                // Make the new state visible in case a dependency resolution listener queries the result, which requires the new state"
            },
            {
              "step": 13,
              "variableName": "e",
              "startLine": 772,
              "startColumn": 54,
              "endLine": 772,
              "endColumn": 55,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/configurations/DefaultConfiguration.java",
              "type": "Exception",
              "code": "                try {\n                    results = resolver.resolveGraph(DefaultConfiguration.this);\n                } catch (Exception e) {\n                    throw exceptionMapper.mapFailure(e, \"dependencies\", displayName.getDisplayName());\n                }\n\n                // Make the new state visible in case a dependency resolution listener queries the result, which requires the new state"
            },
            {
              "step": 14,
              "variableName": "Throwable failure",
              "startLine": 68,
              "startColumn": 45,
              "endLine": 68,
              "endColumn": 62,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Throwable",
              "code": "        return mapFailure(failure, type, displayName);\n    }\n\n    public TypedResolveException mapFailure(Throwable failure, String type, String contextDisplayName) {\n        if (!(failure instanceof TypedResolveException)) {\n            return new TypedResolveException(\n                type,"
            },
            {
              "step": 15,
              "variableName": "failure",
              "startLine": 73,
              "startColumn": 83,
              "endLine": 73,
              "endColumn": 90,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Throwable",
              "code": "            return new TypedResolveException(\n                type,\n                contextDisplayName,\n                ImmutableList.of(mapRepositoryOverrideFailure(contextDisplayName, failure))\n            );\n        }\n"
            },
            {
              "step": 16,
              "variableName": "Throwable failure",
              "startLine": 94,
              "startColumn": 78,
              "endLine": 94,
              "endColumn": 95,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Throwable",
              "code": "\n    // TODO: We should handle this exception at the source instead of using instanceof to detect it after it is thrown.\n    //       We should try to avoid catching and analyzing runtime exceptions\n    public Throwable mapRepositoryOverrideFailure(String contextDisplayName, Throwable failure) {\n        if (!(failure instanceof ModuleVersionNotFoundException) || !settingsRepositoriesIgnored()) {\n            return failure;\n        }"
            },
            {
              "step": 17,
              "variableName": "failure",
              "startLine": 108,
              "startColumn": 35,
              "endLine": 108,
              "endColumn": 42,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Throwable",
              "code": "        return new TypedResolveException(\n            \"dependencies\",\n            contextDisplayName,\n            Collections.singleton(failure),\n            resolutions\n        );\n    }"
            },
            {
              "step": 18,
              "variableName": "Collections.singleton(failure)",
              "startLine": 108,
              "startColumn": 13,
              "endLine": 108,
              "endColumn": 43,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Set [<element>] : Throwable",
              "code": "        return new TypedResolveException(\n            \"dependencies\",\n            contextDisplayName,\n            Collections.singleton(failure),\n            resolutions\n        );\n    }"
            },
            {
              "step": 19,
              "variableName": "Collections.singleton(failure)",
              "startLine": 108,
              "startColumn": 13,
              "endLine": 108,
              "endColumn": 43,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Set",
              "code": "        return new TypedResolveException(\n            \"dependencies\",\n            contextDisplayName,\n            Collections.singleton(failure),\n            resolutions\n        );\n    }"
            },
            {
              "step": 20,
              "variableName": "Iterable<? extends Throwable> failures",
              "startLine": 42,
              "startColumn": 67,
              "endLine": 42,
              "endColumn": 105,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ivyservice/TypedResolveException.java",
              "type": "Set",
              "code": "    /**\n     * Creates a new instance with resolutions.\n     */\n    public TypedResolveException(String type, String displayName, Iterable<? extends Throwable> failures, List<String> resolutions) {\n        super(buildMessage(type, displayName), failures, false);\n        this.type = type;\n        this.resolutions = ImmutableList.copyOf(resolutions);"
            },
            {
              "step": 21,
              "variableName": "failures",
              "startLine": 43,
              "startColumn": 48,
              "endLine": 43,
              "endColumn": 56,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ivyservice/TypedResolveException.java",
              "type": "Set",
              "code": "     * Creates a new instance with resolutions.\n     */\n    public TypedResolveException(String type, String displayName, Iterable<? extends Throwable> failures, List<String> resolutions) {\n        super(buildMessage(type, displayName), failures, false);\n        this.type = type;\n        this.resolutions = ImmutableList.copyOf(resolutions);\n    }"
            },
            {
              "step": 22,
              "variableName": "Iterable<? extends Throwable> causes",
              "startLine": 77,
              "startColumn": 48,
              "endLine": 77,
              "endColumn": 84,
              "uri": "gradle-8.14.0/subprojects/core-api/src/main/java/org/gradle/api/artifacts/ResolveException.java",
              "type": "Set",
              "code": "     * @since 8.9\n     */\n    @Incubating\n    protected ResolveException(String message, Iterable<? extends Throwable> causes, @SuppressWarnings(\"unused\") boolean dummy) {\n        super(message, causes);\n    }\n}"
            },
            {
              "step": 23,
              "variableName": "causes",
              "startLine": 78,
              "startColumn": 24,
              "endLine": 78,
              "endColumn": 30,
              "uri": "gradle-8.14.0/subprojects/core-api/src/main/java/org/gradle/api/artifacts/ResolveException.java",
              "type": "Set",
              "code": "     */\n    @Incubating\n    protected ResolveException(String message, Iterable<? extends Throwable> causes, @SuppressWarnings(\"unused\") boolean dummy) {\n        super(message, causes);\n    }\n}\n"
            },
            {
              "step": 24,
              "variableName": "Iterable<? extends Throwable> causes",
              "startLine": 47,
              "startColumn": 55,
              "endLine": 47,
              "endColumn": 91,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "Set",
              "code": "        this.causes.addAll(Arrays.asList(causes));\n    }\n\n    public DefaultMultiCauseException(String message, Iterable<? extends Throwable> causes) {\n        super(message);\n        this.message = message;\n        initCauses(causes);"
            },
            {
              "step": 25,
              "variableName": "causes",
              "startLine": 50,
              "startColumn": 20,
              "endLine": 50,
              "endColumn": 26,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "Set",
              "code": "    public DefaultMultiCauseException(String message, Iterable<? extends Throwable> causes) {\n        super(message);\n        this.message = message;\n        initCauses(causes);\n    }\n\n    public DefaultMultiCauseException(Factory<String> messageFactory) {"
            },
            {
              "step": 26,
              "variableName": "Iterable<? extends Throwable> causes",
              "startLine": 112,
              "startColumn": 28,
              "endLine": 112,
              "endColumn": 64,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "Iterable",
              "code": "        return null;\n    }\n\n    public void initCauses(Iterable<? extends Throwable> causes) {\n        this.causes.clear();\n        for (Throwable cause : causes) {\n            this.causes.add(cause);"
            },
            {
              "step": 27,
              "variableName": "cause",
              "startLine": 115,
              "startColumn": 29,
              "endLine": 115,
              "endColumn": 34,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "Throwable",
              "code": "    public void initCauses(Iterable<? extends Throwable> causes) {\n        this.causes.clear();\n        for (Throwable cause : causes) {\n            this.causes.add(cause);\n        }\n    }\n"
            },
            {
              "step": 28,
              "variableName": "this.causes",
              "startLine": 115,
              "startColumn": 13,
              "endLine": 115,
              "endColumn": 24,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "CopyOnWriteArrayList [<element>] : Throwable",
              "code": "    public void initCauses(Iterable<? extends Throwable> causes) {\n        this.causes.clear();\n        for (Throwable cause : causes) {\n            this.causes.add(cause);\n        }\n    }\n"
            },
            {
              "step": 29,
              "variableName": "this",
              "startLine": 115,
              "startColumn": 13,
              "endLine": 115,
              "endColumn": 17,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "DefaultMultiCauseException [causes, <element>] : Throwable",
              "code": "    public void initCauses(Iterable<? extends Throwable> causes) {\n        this.causes.clear();\n        for (Throwable cause : causes) {\n            this.causes.add(cause);\n        }\n    }\n"
            },
            {
              "step": 30,
              "variableName": "projectConfigurationException",
              "startLine": 57,
              "startColumn": 17,
              "endLine": 57,
              "endColumn": 46,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/DefaultExceptionAnalyser.java",
              "type": "ProjectConfigurationException [causes, <element>] : Throwable",
              "code": "                }\n            }\n            if (!additionalFailures.isEmpty()) {\n                projectConfigurationException.initCauses(additionalFailures);\n                failures.add(transform(projectConfigurationException));\n            }\n        } else if (exception instanceof ServiceCreationException) {"
            },
            {
              "step": 31,
              "variableName": "projectConfigurationException",
              "startLine": 58,
              "startColumn": 40,
              "endLine": 58,
              "endColumn": 69,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/DefaultExceptionAnalyser.java",
              "type": "ProjectConfigurationException [causes, <element>] : Throwable",
              "code": "            }\n            if (!additionalFailures.isEmpty()) {\n                projectConfigurationException.initCauses(additionalFailures);\n                failures.add(transform(projectConfigurationException));\n            }\n        } else if (exception instanceof ServiceCreationException) {\n            failures.add(transform(new InitializationException(exception)));"
            },
            {
              "step": 32,
              "variableName": "transform(projectConfigurationException)",
              "startLine": 58,
              "startColumn": 30,
              "endLine": 58,
              "endColumn": 70,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/DefaultExceptionAnalyser.java",
              "type": "LocationAwareException",
              "code": "            }\n            if (!additionalFailures.isEmpty()) {\n                projectConfigurationException.initCauses(additionalFailures);\n                failures.add(transform(projectConfigurationException));\n            }\n        } else if (exception instanceof ServiceCreationException) {\n            failures.add(transform(new InitializationException(exception)));"
            },
            {
              "step": 33,
              "variableName": "failures",
              "startLine": 58,
              "startColumn": 17,
              "endLine": 58,
              "endColumn": 25,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/DefaultExceptionAnalyser.java",
              "type": "Collection [<element>] : LocationAwareException",
              "code": "            }\n            if (!additionalFailures.isEmpty()) {\n                projectConfigurationException.initCauses(additionalFailures);\n                failures.add(transform(projectConfigurationException));\n            }\n        } else if (exception instanceof ServiceCreationException) {\n            failures.add(transform(new InitializationException(exception)));"
            },
            {
              "step": 34,
              "variableName": "result",
              "startLine": 53,
              "startColumn": 54,
              "endLine": 53,
              "endColumn": 60,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/MultipleBuildFailuresExceptionAnalyser.java",
              "type": "ArrayList [<element>] : LocationAwareException",
              "code": "        for (Throwable failure : failures) {\n            if (failure instanceof MultipleBuildFailures) {\n                for (Throwable cause : ((MultipleBuildFailures) failure).getCauses()) {\n                    collector.collectFailures(cause, result);\n                }\n            } else {\n                collector.collectFailures(failure, result);"
            },
            {
              "step": 35,
              "variableName": "result",
              "startLine": 60,
              "startColumn": 39,
              "endLine": 60,
              "endColumn": 45,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/MultipleBuildFailuresExceptionAnalyser.java",
              "type": "ArrayList [<element>] : LocationAwareException",
              "code": "            }\n        }\n        if (result.size() == 1 && result.get(0) instanceof RuntimeException) {\n            return (RuntimeException) result.get(0);\n        } else {\n            return new MultipleBuildFailures(result);\n        }"
            },
            {
              "step": 36,
              "variableName": "result.get(0)",
              "startLine": 60,
              "startColumn": 39,
              "endLine": 60,
              "endColumn": 52,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/MultipleBuildFailuresExceptionAnalyser.java",
              "type": "LocationAwareException",
              "code": "            }\n        }\n        if (result.size() == 1 && result.get(0) instanceof RuntimeException) {\n            return (RuntimeException) result.get(0);\n        } else {\n            return new MultipleBuildFailures(result);\n        }"
            },
            {
              "step": 37,
              "variableName": "(RuntimeException) result.get(0)",
              "startLine": 60,
              "startColumn": 20,
              "endLine": 60,
              "endColumn": 52,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/MultipleBuildFailuresExceptionAnalyser.java",
              "type": "LocationAwareException",
              "code": "            }\n        }\n        if (result.size() == 1 && result.get(0) instanceof RuntimeException) {\n            return (RuntimeException) result.get(0);\n        } else {\n            return new MultipleBuildFailures(result);\n        }"
            },
            {
              "step": 38,
              "variableName": "exceptionAnalyser.transform(finishFailures)",
              "startLine": 72,
              "startColumn": 16,
              "endLine": 72,
              "endColumn": 59,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/internal/buildtree/DefaultBuildTreeFinishExecutor.java",
              "type": "LocationAwareException",
              "code": "            finishFailures.addAll(result.getFailures());\n        });\n\n        return exceptionAnalyser.transform(finishFailures);\n    }\n}\n"
            },
            {
              "step": 39,
              "variableName": "delegate.finishBuildTree(failures)",
              "startLine": 46,
              "startColumn": 28,
              "endLine": 46,
              "endColumn": 62,
              "uri": "gradle-8.14.0/subprojects/composite-builds/src/main/java/org/gradle/composite/internal/OperationFiringBuildTreeFinishExecutor.java",
              "type": "LocationAwareException",
              "code": "            @Override\n            public RuntimeException call(BuildOperationContext context) {\n                try {\n                    return delegate.finishBuildTree(failures);\n                } finally {\n                    context.setResult(RESULT);\n                }"
            },
            {
              "step": 40,
              "variableName": "buildOperation.call(context)",
              "startLine": 239,
              "startColumn": 21,
              "endLine": 239,
              "endColumn": 49,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/testFixtures/java/org/gradle/internal/operations/TestBuildOperationRunner.java",
              "type": "LocationAwareException",
              "code": "            TestBuildOperationContext context = new TestBuildOperationContext(record);\n            T t;\n            try {\n                t = buildOperation.call(context);\n            } catch (Throwable failure) {\n                if (record.failure == null) {\n                    record.failure = failure;"
            },
            {
              "step": 41,
              "variableName": "t",
              "startLine": 246,
              "startColumn": 20,
              "endLine": 246,
              "endColumn": 21,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/testFixtures/java/org/gradle/internal/operations/TestBuildOperationRunner.java",
              "type": "LocationAwareException",
              "code": "                }\n                throw throwAsUncheckedException(failure);\n            }\n            return t;\n        }\n\n        private <O extends BuildOperation> void execute(O buildOperation, BuildOperationWorker<O> worker) {"
            },
            {
              "step": 42,
              "variableName": "log.call(buildOperation)",
              "startLine": 51,
              "startColumn": 16,
              "endLine": 51,
              "endColumn": 40,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/testFixtures/java/org/gradle/internal/operations/TestBuildOperationRunner.java",
              "type": "LocationAwareException",
              "code": "\n    @Override\n    public <T> T call(CallableBuildOperation<T> buildOperation) {\n        return log.call(buildOperation);\n    }\n\n    @Override"
            },
            {
              "step": 43,
              "variableName": "ca",
              "startLine": 115,
              "startColumn": 5,
              "endLine": 121,
              "endColumn": 7,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/configurationcache/ConfigurationCacheBuildOperations.kt",
              "type": "LocationAwareException",
              "code": "\ninternal\nfun <T : Any> BuildOperationRunner.withModelLoadOperation(block: () -> T): T =\n    call(object : CallableBuildOperation<T> {\n        override fun description(): BuildOperationDescriptor.Builder = BuildOperationDescriptor\n            .displayName(\"Load model from configuration cache\")\n            .progressDisplayName(\"Loading model from configuration cache\")"
            },
            {
              "step": 44,
              "variableName": "ca",
              "startLine": 115,
              "startColumn": 5,
              "endLine": 121,
              "endColumn": 7,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/configurationcache/ConfigurationCacheBuildOperations.kt",
              "type": "LocationAwareException",
              "code": "\ninternal\nfun <T : Any> BuildOperationRunner.withModelLoadOperation(block: () -> T): T =\n    call(object : CallableBuildOperation<T> {\n        override fun description(): BuildOperationDescriptor.Builder = BuildOperationDescriptor\n            .displayName(\"Load model from configuration cache\")\n            .progressDisplayName(\"Loading model from configuration cache\")"
            },
            {
              "step": 45,
              "variableName": "b",
              "startLine": 635,
              "startColumn": 9,
              "endLine": 641,
              "endColumn": 10,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "        // No need to record the `ClassLoaderScope` tree when loading\n        scopeRegistryListener.dispose()\n\n        buildOperationRunner.withModelLoadOperation {\n            val storeLoadResult = entryStore.useForStateLoad(StateType.Model) { stateFile: ConfigurationCacheStateFile ->\n                cacheIO.readModelFrom(stateFile)\n            }"
            },
            {
              "step": 46,
              "variableName": "block()",
              "startLine": 668,
              "startColumn": 22,
              "endLine": 668,
              "endColumn": 29,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "    private\n    inline fun <T> runAtConfigurationTime(block: () -> T): T {\n        prepareConfigurationTimeBarrier()\n        val result = block()\n        crossConfigurationTimeBarrier()\n        return result\n    }"
            },
            {
              "step": 47,
              "variableName": "result",
              "startLine": 670,
              "startColumn": 16,
              "endLine": 670,
              "endColumn": 22,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "        prepareConfigurationTimeBarrier()\n        val result = block()\n        crossConfigurationTimeBarrier()\n        return result\n    }\n\n    private"
            },
            {
              "step": 48,
              "variableName": "runAtConfigurationTime(...) : LocationAwareException",
              "startLine": 631,
              "startColumn": 28,
              "endLine": 642,
              "endColumn": 6,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "    data class LoadResultMetadata(val originInvocationId: String? = null)\n\n    private\n    fun loadModel(): Any = runAtConfigurationTime {\n        // No need to record the `ClassLoaderScope` tree when loading\n        scopeRegistryListener.dispose()\n"
            },
            {
              "step": 49,
              "variableName": "loadModel()",
              "startLine": 268,
              "startColumn": 20,
              "endLine": 268,
              "endColumn": 31,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "    override fun <T : Any> loadOrCreateModel(creator: () -> T): T {\n        if (isLoaded) {\n            runLoadedSideEffects()\n            return loadModel().uncheckedCast()\n        }\n\n        return runWorkThatContributesToCacheEntry {"
            },
            {
              "step": 50,
              "variableName": "Any",
              "startLine": 22,
              "startColumn": 15,
              "endLine": 22,
              "endColumn": 18,
              "uri": "gradle-8.14.0/platforms/core-configuration/stdlib-kotlin-extensions/src/main/kotlin/org/gradle/internal/extensions/stdlib/CastExtensions.kt",
              "type": "Object",
              "code": "import org.gradle.internal.Cast\n\n\nfun <T : Any> Any.uncheckedCast(): T =\n    Cast.uncheckedNonnullCast(this)\n"
            },
            {
              "step": 51,
              "variableName": "this",
              "startLine": 23,
              "startColumn": 31,
              "endLine": 23,
              "endColumn": 35,
              "uri": "gradle-8.14.0/platforms/core-configuration/stdlib-kotlin-extensions/src/main/kotlin/org/gradle/internal/extensions/stdlib/CastExtensions.kt",
              "type": "Object",
              "code": "\n\nfun <T : Any> Any.uncheckedCast(): T =\n    Cast.uncheckedNonnullCast(this)\n"
            },
            {
              "step": 52,
              "variableName": "Object object",
              "startLine": 76,
              "startColumn": 46,
              "endLine": 76,
              "endColumn": 59,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/Cast.java",
              "type": "Object",
              "code": "    }\n\n    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})\n    public static <T> T uncheckedNonnullCast(Object object) {\n        return (T) object;\n    }\n}"
            },
            {
              "step": 53,
              "variableName": "(T) object",
              "startLine": 77,
              "startColumn": 16,
              "endLine": 77,
              "endColumn": 26,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/Cast.java",
              "type": "Object",
              "code": "\n    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})\n    public static <T> T uncheckedNonnullCast(Object object) {\n        return (T) object;\n    }\n}\n"
            },
            {
              "step": 54,
              "variableName": "uncheckedNonnullCast(this)",
              "startLine": 23,
              "startColumn": 10,
              "endLine": 23,
              "endColumn": 36,
              "uri": "gradle-8.14.0/platforms/core-configuration/stdlib-kotlin-extensions/src/main/kotlin/org/gradle/internal/extensions/stdlib/CastExtensions.kt",
              "type": "Object",
              "code": "\n\nfun <T : Any> Any.uncheckedCast(): T =\n    Cast.uncheckedNonnullCast(this)\n"
            },
            {
              "step": 55,
              "variableName": "uncheckedNonnullCast(this)",
              "startLine": 23,
              "startColumn": 10,
              "endLine": 23,
              "endColumn": 36,
              "uri": "gradle-8.14.0/platforms/core-configuration/stdlib-kotlin-extensions/src/main/kotlin/org/gradle/internal/extensions/stdlib/CastExtensions.kt",
              "type": "Object",
              "code": "\n\nfun <T : Any> Any.uncheckedCast(): T =\n    Cast.uncheckedNonnullCast(this)\n"
            },
            {
              "step": 56,
              "variableName": "!!.uncheckedCast<T>()",
              "startLine": 159,
              "startColumn": 57,
              "endLine": 159,
              "endColumn": 78,
              "uri": "gradle-8.14.0/platforms/core-configuration/graph-serialization/src/main/kotlin/org/gradle/internal/serialize/graph/Codec.kt",
              "type": "Object",
              "code": "    getSingletonProperty(T::class.java)\n\n\nsuspend fun <T : Any> ReadContext.readNonNull() = read()!!.uncheckedCast<T>()\n\n\ninterface IsolateContext {"
            },
            {
              "step": 57,
              "variableName": "readNonNull<FileCollection>()",
              "startLine": 781,
              "startColumn": 29,
              "endLine": 781,
              "endColumn": 58,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/ConfigurationCacheState.kt",
              "type": "FileCollection",
              "code": "        val buildOutputCleanupRegistry = gradle.serviceOf<BuildOutputCleanupRegistry>()\n        withGradleIsolate(gradle, userTypesCodec) {\n            readCollection {\n                val files = readNonNull<FileCollection>()\n                buildOutputCleanupRegistry.registerOutputs(files)\n            }\n        }"
            },
            {
              "step": 58,
              "variableName": "files",
              "startLine": 782,
              "startColumn": 60,
              "endLine": 782,
              "endColumn": 65,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/ConfigurationCacheState.kt",
              "type": "FileCollection",
              "code": "        withGradleIsolate(gradle, userTypesCodec) {\n            readCollection {\n                val files = readNonNull<FileCollection>()\n                buildOutputCleanupRegistry.registerOutputs(files)\n            }\n        }\n    }"
            },
            {
              "step": 59,
              "variableName": "Object files",
              "startLine": 46,
              "startColumn": 33,
              "endLine": 46,
              "endColumn": 45,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/internal/cleanup/DefaultBuildOutputCleanupRegistry.java",
              "type": "FileCollection",
              "code": "    }\n\n    @Override\n    public void registerOutputs(Object files) {\n        synchronized (lock) {\n            if (resolvedPaths != null) {\n                // Some tasks cannot declare the dependencies on other projects, yet, for example the dependencies task."
            },
            {
              "step": 60,
              "variableName": "files",
              "startLine": 55,
              "startColumn": 66,
              "endLine": 55,
              "endColumn": 71,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/internal/cleanup/DefaultBuildOutputCleanupRegistry.java",
              "type": "FileCollection",
              "code": "                // See https://github.com/gradle/gradle/issues/18460.\n                LOGGER.debug(\"More outputs are being registered even though the build output cleanup registry has already been finalized. New outputs: {}\", files);\n            } else {\n                this.outputs.add(fileCollectionFactory.resolving(files));\n            }\n        }\n    }"
            },
            {
              "step": 61,
              "variableName": "Object sources",
              "startLine": 187,
              "startColumn": 45,
              "endLine": 187,
              "endColumn": 59,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-collections/src/main/java/org/gradle/api/internal/file/DefaultFileCollectionFactory.java",
              "type": "FileCollection",
              "code": "    }\n\n    @Override\n    public FileCollectionInternal resolving(Object sources) {\n        return resolving(ProviderResolutionStrategy.REQUIRE_PRESENT, sources);\n    }\n"
            },
            {
              "step": 62,
              "variableName": "sources",
              "startLine": 188,
              "startColumn": 70,
              "endLine": 188,
              "endColumn": 77,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-collections/src/main/java/org/gradle/api/internal/file/DefaultFileCollectionFactory.java",
              "type": "FileCollection",
              "code": "\n    @Override\n    public FileCollectionInternal resolving(Object sources) {\n        return resolving(ProviderResolutionStrategy.REQUIRE_PRESENT, sources);\n    }\n\n    @Override"
            },
            {
              "step": 63,
              "variableName": "Object sources",
              "startLine": 196,
              "startColumn": 101,
              "endLine": 196,
              "endColumn": 115,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-collections/src/main/java/org/gradle/api/internal/file/DefaultFileCollectionFactory.java",
              "type": "Object",
              "code": "        return resolving(ProviderResolutionStrategy.ALLOW_ABSENT, sources);\n    }\n\n    private FileCollectionInternal resolving(ProviderResolutionStrategy providerResolutionStrategy, Object sources) {\n        if (sources instanceof FileCollectionInternal) {\n            return (FileCollectionInternal) sources;\n        }"
            },
            {
              "step": 64,
              "variableName": "(FileCollectionInternal) sources",
              "startLine": 198,
              "startColumn": 20,
              "endLine": 198,
              "endColumn": 52,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-collections/src/main/java/org/gradle/api/internal/file/DefaultFileCollectionFactory.java",
              "type": "FileCollectionInternal",
              "code": "\n    private FileCollectionInternal resolving(ProviderResolutionStrategy providerResolutionStrategy, Object sources) {\n        if (sources instanceof FileCollectionInternal) {\n            return (FileCollectionInternal) sources;\n        }\n        if (isEmptyArray(sources)) {\n            return FileCollectionFactory.empty();"
            },
            {
              "step": 65,
              "variableName": "resolving(ProviderResolutionStrategy.REQUIRE_PRESENT, sources)",
              "startLine": 188,
              "startColumn": 16,
              "endLine": 188,
              "endColumn": 78,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-collections/src/main/java/org/gradle/api/internal/file/DefaultFileCollectionFactory.java",
              "type": "FileCollectionInternal",
              "code": "\n    @Override\n    public FileCollectionInternal resolving(Object sources) {\n        return resolving(ProviderResolutionStrategy.REQUIRE_PRESENT, sources);\n    }\n\n    @Override"
            },
            {
              "step": 66,
              "variableName": "fileCollectionFactory.resolving(this)",
              "startLine": 345,
              "startColumn": 20,
              "endLine": 345,
              "endColumn": 57,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-collections/src/main/java/org/gradle/api/internal/file/DefaultFilePropertyFactory.java",
              "type": "FileCollectionInternal",
              "code": "\n        @Override\n        public FileTree getAsFileTree() {\n            return fileCollectionFactory.resolving(this).getAsFileTree();\n        }\n\n        @Override"
            },
            {
              "step": 67,
              "variableName": "getAsFileTree",
              "startLine": 103,
              "startColumn": 29,
              "endLine": 103,
              "endColumn": 42,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-collections/src/main/java/org/gradle/api/internal/file/AbstractFileTree.java",
              "type": "AbstractFileTree",
              "code": "    }\n\n    @Override\n    public FileTreeInternal getAsFileTree() {\n        return this;\n    }\n"
            },
            {
              "step": 68,
              "variableName": "this",
              "startLine": 104,
              "startColumn": 16,
              "endLine": 104,
              "endColumn": 20,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-collections/src/main/java/org/gradle/api/internal/file/AbstractFileTree.java",
              "type": "AbstractFileTree",
              "code": "\n    @Override\n    public FileTreeInternal getAsFileTree() {\n        return this;\n    }\n\n    @Override"
            },
            {
              "step": 69,
              "variableName": "fileCollectionFactory.resolving(this).getAsFileTree()",
              "startLine": 345,
              "startColumn": 20,
              "endLine": 345,
              "endColumn": 73,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-collections/src/main/java/org/gradle/api/internal/file/DefaultFilePropertyFactory.java",
              "type": "AbstractFileTree",
              "code": "\n        @Override\n        public FileTree getAsFileTree() {\n            return fileCollectionFactory.resolving(this).getAsFileTree();\n        }\n\n        @Override"
            },
            {
              "step": 70,
              "variableName": "getSamplesRoot()",
              "startLine": 102,
              "startColumn": 9,
              "endLine": 103,
              "endColumn": 29,
              "uri": "gradle-8.14.0/build-logic/documentation/src/main/groovy/gradlebuild/docs/FindBrokenInternalLinks.java",
              "type": "AbstractFileTree",
              "code": "\n        gatherDeadLinksInFileReleaseNotes(errors);\n\n        getSamplesRoot()\n            .getAsFileTree()\n            .matching(pattern -> {\n                pattern.include(\"**/*.adoc\");"
            },
            {
              "step": 71,
              "variableName": "matching",
              "startLine": 60,
              "startColumn": 21,
              "endLine": 60,
              "endColumn": 29,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-collections/src/main/java/org/gradle/api/internal/file/EmptyFileTree.java",
              "type": "EmptyFileTree",
              "code": "    }\n\n    @Override\n    public FileTree matching(Action<? super PatternFilterable> filterConfigAction) {\n        return this;\n    }\n"
            },
            {
              "step": 72,
              "variableName": "this",
              "startLine": 61,
              "startColumn": 16,
              "endLine": 61,
              "endColumn": 20,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-collections/src/main/java/org/gradle/api/internal/file/EmptyFileTree.java",
              "type": "EmptyFileTree",
              "code": "\n    @Override\n    public FileTree matching(Action<? super PatternFilterable> filterConfigAction) {\n        return this;\n    }\n\n    @Override"
            },
            {
              "step": 73,
              "variableName": "getSam",
              "startLine": 102,
              "startColumn": 9,
              "endLine": 107,
              "endColumn": 15,
              "uri": "gradle-8.14.0/build-logic/documentation/src/main/groovy/gradlebuild/docs/FindBrokenInternalLinks.java",
              "type": "EmptyFileTree",
              "code": "\n        gatherDeadLinksInFileReleaseNotes(errors);\n\n        getSamplesRoot()\n            .getAsFileTree()\n            .matching(pattern -> {\n                pattern.include(\"**/*.adoc\");"
            },
            {
              "step": 74,
              "variableName": "file -> gatherDeadLinksInFileSamples(file, errors)",
              "startLine": 108,
              "startColumn": 22,
              "endLine": 108,
              "endColumn": 72,
              "uri": "gradle-8.14.0/build-logic/documentation/src/main/groovy/gradlebuild/docs/FindBrokenInternalLinks.java",
              "type": "new Consumer<File>(...) { ... } [Map<File,List<Error>> errors, <map.key>]",
              "code": "                pattern.include(\"**/*.adoc\");\n                pattern.exclude(\"**/index.adoc\"); // Exclude index.adoc files\n            })\n            .forEach(file -> gatherDeadLinksInFileSamples(file, errors));\n\n        getDocumentationRoot().getAsFileTree().matching(pattern -> pattern.include(\"**/*.adoc\")).forEach(file -> {\n            gatherDeadLinksInFile(file, errors);"
            },
            {
              "step": 75,
              "variableName": "file -> gatherDeadLinksInFileSamples(file, errors)",
              "startLine": 108,
              "startColumn": 22,
              "endLine": 108,
              "endColumn": 72,
              "uri": "gradle-8.14.0/build-logic/documentation/src/main/groovy/gradlebuild/docs/FindBrokenInternalLinks.java",
              "type": "TreeMap [<map.key>]",
              "code": "                pattern.include(\"**/*.adoc\");\n                pattern.exclude(\"**/index.adoc\"); // Exclude index.adoc files\n            })\n            .forEach(file -> gatherDeadLinksInFileSamples(file, errors));\n\n        getDocumentationRoot().getAsFileTree().matching(pattern -> pattern.include(\"**/*.adoc\")).forEach(file -> {\n            gatherDeadLinksInFile(file, errors);"
            },
            {
              "step": 76,
              "variableName": "errors",
              "startLine": 114,
              "startColumn": 22,
              "endLine": 114,
              "endColumn": 28,
              "uri": "gradle-8.14.0/build-logic/documentation/src/main/groovy/gradlebuild/docs/FindBrokenInternalLinks.java",
              "type": "TreeMap [<map.key>]",
              "code": "            gatherDeadLinksInFile(file, errors);\n        });\n\n        reportErrors(errors, getReportFile().get().getAsFile());\n    }\n\n    private void reportErrors(Map<File, List<Error>> errors, File reportFile) {"
            },
            {
              "step": 77,
              "variableName": "Map<File, List<Error>> errors",
              "startLine": 117,
              "startColumn": 31,
              "endLine": 117,
              "endColumn": 60,
              "uri": "gradle-8.14.0/build-logic/documentation/src/main/groovy/gradlebuild/docs/FindBrokenInternalLinks.java",
              "type": "TreeMap [<map.key>]",
              "code": "        reportErrors(errors, getReportFile().get().getAsFile());\n    }\n\n    private void reportErrors(Map<File, List<Error>> errors, File reportFile) {\n        try (PrintWriter fw = new PrintWriter(new FileWriter(reportFile))) {\n            writeHeader(fw);\n            if (errors.isEmpty()) {"
            },
            {
              "step": 78,
              "variableName": "errors",
              "startLine": 124,
              "startColumn": 51,
              "endLine": 124,
              "endColumn": 57,
              "uri": "gradle-8.14.0/build-logic/documentation/src/main/groovy/gradlebuild/docs/FindBrokenInternalLinks.java",
              "type": "TreeMap [<map.key>]",
              "code": "                fw.println(\"All clear!\");\n                return;\n            }\n            for (Map.Entry<File, List<Error>> e : errors.entrySet()) {\n                File file = e.getKey();\n                List<Error> errorsForFile = e.getValue();\n"
            },
            {
              "step": 79,
              "variableName": "errors.entrySet()",
              "startLine": 124,
              "startColumn": 51,
              "endLine": 124,
              "endColumn": 68,
              "uri": "gradle-8.14.0/build-logic/documentation/src/main/groovy/gradlebuild/docs/FindBrokenInternalLinks.java",
              "type": "EntrySet [<element>, <map.key>]",
              "code": "                fw.println(\"All clear!\");\n                return;\n            }\n            for (Map.Entry<File, List<Error>> e : errors.entrySet()) {\n                File file = e.getKey();\n                List<Error> errorsForFile = e.getValue();\n"
            },
            {
              "step": 80,
              "variableName": "e",
              "startLine": 125,
              "startColumn": 29,
              "endLine": 125,
              "endColumn": 30,
              "uri": "gradle-8.14.0/build-logic/documentation/src/main/groovy/gradlebuild/docs/FindBrokenInternalLinks.java",
              "type": "Entry [<map.key>]",
              "code": "                return;\n            }\n            for (Map.Entry<File, List<Error>> e : errors.entrySet()) {\n                File file = e.getKey();\n                List<Error> errorsForFile = e.getValue();\n\n                StringBuilder sb = new StringBuilder();"
            },
            {
              "step": 81,
              "variableName": "e.getKey()",
              "startLine": 125,
              "startColumn": 29,
              "endLine": 125,
              "endColumn": 39,
              "uri": "gradle-8.14.0/build-logic/documentation/src/main/groovy/gradlebuild/docs/FindBrokenInternalLinks.java",
              "type": "File",
              "code": "                return;\n            }\n            for (Map.Entry<File, List<Error>> e : errors.entrySet()) {\n                File file = e.getKey();\n                List<Error> errorsForFile = e.getValue();\n\n                StringBuilder sb = new StringBuilder();"
            },
            {
              "step": 82,
              "variableName": "file",
              "startLine": 130,
              "startColumn": 43,
              "endLine": 130,
              "endColumn": 47,
              "uri": "gradle-8.14.0/build-logic/documentation/src/main/groovy/gradlebuild/docs/FindBrokenInternalLinks.java",
              "type": "File",
              "code": "\n                StringBuilder sb = new StringBuilder();\n                for (Error error : errorsForFile) {\n                    sb.append(\"ERROR: \" + file.getName() + \":\" + error.lineNumber + \" \" + error.message + \"\\n    \" + error.line + \"\\n\");\n                }\n                String message = sb.toString();\n                getLogger().error(message);"
            },
            {
              "step": 83,
              "variableName": "file.getName()",
              "startLine": 130,
              "startColumn": 43,
              "endLine": 130,
              "endColumn": 57,
              "uri": "gradle-8.14.0/build-logic/documentation/src/main/groovy/gradlebuild/docs/FindBrokenInternalLinks.java",
              "type": "String",
              "code": "\n                StringBuilder sb = new StringBuilder();\n                for (Error error : errorsForFile) {\n                    sb.append(\"ERROR: \" + file.getName() + \":\" + error.lineNumber + \" \" + error.message + \"\\n    \" + error.line + \"\\n\");\n                }\n                String message = sb.toString();\n                getLogger().error(message);"
            },
            {
              "step": 84,
              "variableName": "\"ERROR: \" + file.getName()",
              "startLine": 130,
              "startColumn": 31,
              "endLine": 130,
              "endColumn": 57,
              "uri": "gradle-8.14.0/build-logic/documentation/src/main/groovy/gradlebuild/docs/FindBrokenInternalLinks.java",
              "type": "String",
              "code": "\n                StringBuilder sb = new StringBuilder();\n                for (Error error : errorsForFile) {\n                    sb.append(\"ERROR: \" + file.getName() + \":\" + error.lineNumber + \" \" + error.message + \"\\n    \" + error.line + \"\\n\");\n                }\n                String message = sb.toString();\n                getLogger().error(message);"
            },
            {
              "step": 85,
              "variableName": "\"ERROR: \" + file.getName() + \":\"",
              "startLine": 130,
              "startColumn": 31,
              "endLine": 130,
              "endColumn": 63,
              "uri": "gradle-8.14.0/build-logic/documentation/src/main/groovy/gradlebuild/docs/FindBrokenInternalLinks.java",
              "type": "String",
              "code": "\n                StringBuilder sb = new StringBuilder();\n                for (Error error : errorsForFile) {\n                    sb.append(\"ERROR: \" + file.getName() + \":\" + error.lineNumber + \" \" + error.message + \"\\n    \" + error.line + \"\\n\");\n                }\n                String message = sb.toString();\n                getLogger().error(message);"
            },
            {
              "step": 86,
              "variableName": "\"ERROR: \" + file.getName() + \":\" + error.lineNumber",
              "startLine": 130,
              "startColumn": 31,
              "endLine": 130,
              "endColumn": 82,
              "uri": "gradle-8.14.0/build-logic/documentation/src/main/groovy/gradlebuild/docs/FindBrokenInternalLinks.java",
              "type": "String",
              "code": "\n                StringBuilder sb = new StringBuilder();\n                for (Error error : errorsForFile) {\n                    sb.append(\"ERROR: \" + file.getName() + \":\" + error.lineNumber + \" \" + error.message + \"\\n    \" + error.line + \"\\n\");\n                }\n                String message = sb.toString();\n                getLogger().error(message);"
            },
            {
              "step": 87,
              "variableName": "\"ERROR: \" + file.getName() + \":\" + error.lineNumber + \" \"",
              "startLine": 130,
              "startColumn": 31,
              "endLine": 130,
              "endColumn": 88,
              "uri": "gradle-8.14.0/build-logic/documentation/src/main/groovy/gradlebuild/docs/FindBrokenInternalLinks.java",
              "type": "String",
              "code": "\n                StringBuilder sb = new StringBuilder();\n                for (Error error : errorsForFile) {\n                    sb.append(\"ERROR: \" + file.getName() + \":\" + error.lineNumber + \" \" + error.message + \"\\n    \" + error.line + \"\\n\");\n                }\n                String message = sb.toString();\n                getLogger().error(message);"
            },
            {
              "step": 88,
              "variableName": "\"ERROR: \" + file.getName() + \":\" + error.lineNumber + \" \" + error.message",
              "startLine": 130,
              "startColumn": 31,
              "endLine": 130,
              "endColumn": 104,
              "uri": "gradle-8.14.0/build-logic/documentation/src/main/groovy/gradlebuild/docs/FindBrokenInternalLinks.java",
              "type": "String",
              "code": "\n                StringBuilder sb = new StringBuilder();\n                for (Error error : errorsForFile) {\n                    sb.append(\"ERROR: \" + file.getName() + \":\" + error.lineNumber + \" \" + error.message + \"\\n    \" + error.line + \"\\n\");\n                }\n                String message = sb.toString();\n                getLogger().error(message);"
            },
            {
              "step": 89,
              "variableName": "\"ERROR: \" + file.getName() + \":\" + error.lineNumber + \" \" + error.message + \"\\n    \"",
              "startLine": 130,
              "startColumn": 31,
              "endLine": 130,
              "endColumn": 115,
              "uri": "gradle-8.14.0/build-logic/documentation/src/main/groovy/gradlebuild/docs/FindBrokenInternalLinks.java",
              "type": "String",
              "code": "\n                StringBuilder sb = new StringBuilder();\n                for (Error error : errorsForFile) {\n                    sb.append(\"ERROR: \" + file.getName() + \":\" + error.lineNumber + \" \" + error.message + \"\\n    \" + error.line + \"\\n\");\n                }\n                String message = sb.toString();\n                getLogger().error(message);"
            },
            {
              "step": 90,
              "variableName": "\"ERROR: \" + file.getName() + \":\" + error.lineNumber + \" \" + error.message + \"\\n    \" + error.line",
              "startLine": 130,
              "startColumn": 31,
              "endLine": 130,
              "endColumn": 128,
              "uri": "gradle-8.14.0/build-logic/documentation/src/main/groovy/gradlebuild/docs/FindBrokenInternalLinks.java",
              "type": "String",
              "code": "\n                StringBuilder sb = new StringBuilder();\n                for (Error error : errorsForFile) {\n                    sb.append(\"ERROR: \" + file.getName() + \":\" + error.lineNumber + \" \" + error.message + \"\\n    \" + error.line + \"\\n\");\n                }\n                String message = sb.toString();\n                getLogger().error(message);"
            },
            {
              "step": 91,
              "variableName": "\"ERROR: \" + file.getName() + \":\" + error.lineNumber + \" \" + error.message + \"\\n    \" + error.line + \"\\n\"",
              "startLine": 130,
              "startColumn": 31,
              "endLine": 130,
              "endColumn": 135,
              "uri": "gradle-8.14.0/build-logic/documentation/src/main/groovy/gradlebuild/docs/FindBrokenInternalLinks.java",
              "type": "String",
              "code": "\n                StringBuilder sb = new StringBuilder();\n                for (Error error : errorsForFile) {\n                    sb.append(\"ERROR: \" + file.getName() + \":\" + error.lineNumber + \" \" + error.message + \"\\n    \" + error.line + \"\\n\");\n                }\n                String message = sb.toString();\n                getLogger().error(message);"
            },
            {
              "step": 92,
              "variableName": "sb",
              "startLine": 130,
              "startColumn": 21,
              "endLine": 130,
              "endColumn": 23,
              "uri": "gradle-8.14.0/build-logic/documentation/src/main/groovy/gradlebuild/docs/FindBrokenInternalLinks.java",
              "type": "StringBuilder",
              "code": "\n                StringBuilder sb = new StringBuilder();\n                for (Error error : errorsForFile) {\n                    sb.append(\"ERROR: \" + file.getName() + \":\" + error.lineNumber + \" \" + error.message + \"\\n    \" + error.line + \"\\n\");\n                }\n                String message = sb.toString();\n                getLogger().error(message);"
            },
            {
              "step": 93,
              "variableName": "sb",
              "startLine": 132,
              "startColumn": 34,
              "endLine": 132,
              "endColumn": 36,
              "uri": "gradle-8.14.0/build-logic/documentation/src/main/groovy/gradlebuild/docs/FindBrokenInternalLinks.java",
              "type": "StringBuilder",
              "code": "                for (Error error : errorsForFile) {\n                    sb.append(\"ERROR: \" + file.getName() + \":\" + error.lineNumber + \" \" + error.message + \"\\n    \" + error.line + \"\\n\");\n                }\n                String message = sb.toString();\n                getLogger().error(message);\n                fw.println(message);\n            }"
            },
            {
              "step": 94,
              "variableName": "sb.toString()",
              "startLine": 132,
              "startColumn": 34,
              "endLine": 132,
              "endColumn": 47,
              "uri": "gradle-8.14.0/build-logic/documentation/src/main/groovy/gradlebuild/docs/FindBrokenInternalLinks.java",
              "type": "String",
              "code": "                for (Error error : errorsForFile) {\n                    sb.append(\"ERROR: \" + file.getName() + \":\" + error.lineNumber + \" \" + error.message + \"\\n    \" + error.line + \"\\n\");\n                }\n                String message = sb.toString();\n                getLogger().error(message);\n                fw.println(message);\n            }"
            },
            {
              "step": 95,
              "variableName": "message",
              "startLine": 134,
              "startColumn": 28,
              "endLine": 134,
              "endColumn": 35,
              "uri": "gradle-8.14.0/build-logic/documentation/src/main/groovy/gradlebuild/docs/FindBrokenInternalLinks.java",
              "type": "",
              "code": "                }\n                String message = sb.toString();\n                getLogger().error(message);\n                fw.println(message);\n            }\n        } catch (IOException e) {\n            throw new UncheckedIOException(e);"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "src",
              "startLine": 115,
              "startColumn": 13,
              "endLine": 115,
              "endColumn": 16,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "Object",
              "code": "    }\n\n    private static void appendDisplayName(Object src, StringBuilder stringBuilder) {\n        if (src instanceof Describable) {\n            Describable describable = (Describable) src;\n            stringBuilder.append(describable.getDisplayName());\n        } else {"
            },
            {
              "step": 1,
              "variableName": "src",
              "startLine": 119,
              "startColumn": 34,
              "endLine": 119,
              "endColumn": 37,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "Object",
              "code": "            Describable describable = (Describable) src;\n            stringBuilder.append(describable.getDisplayName());\n        } else {\n            stringBuilder.append(src.toString());\n        }\n    }\n"
            },
            {
              "step": 2,
              "variableName": "toString",
              "startLine": 397,
              "startColumn": 19,
              "endLine": 397,
              "endColumn": 27,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "TestFile",
              "code": "    }\n\n    @Override\n    public String toString() {\n        return getPath();\n    }\n"
            },
            {
              "step": 3,
              "variableName": "getPath()",
              "startLine": 398,
              "startColumn": 16,
              "endLine": 398,
              "endColumn": 25,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "TestFile",
              "code": "\n    @Override\n    public String toString() {\n        return getPath();\n    }\n\n    public TestFile writelns(Iterable<String> lines) {"
            },
            {
              "step": 4,
              "variableName": "getPath()",
              "startLine": 398,
              "startColumn": 16,
              "endLine": 398,
              "endColumn": 25,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "String",
              "code": "\n    @Override\n    public String toString() {\n        return getPath();\n    }\n\n    public TestFile writelns(Iterable<String> lines) {"
            },
            {
              "step": 5,
              "variableName": "src.toString()",
              "startLine": 119,
              "startColumn": 34,
              "endLine": 119,
              "endColumn": 48,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "String",
              "code": "            Describable describable = (Describable) src;\n            stringBuilder.append(describable.getDisplayName());\n        } else {\n            stringBuilder.append(src.toString());\n        }\n    }\n"
            },
            {
              "step": 6,
              "variableName": "stringBuilder",
              "startLine": 119,
              "startColumn": 13,
              "endLine": 119,
              "endColumn": 26,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "StringBuilder",
              "code": "            Describable describable = (Describable) src;\n            stringBuilder.append(describable.getDisplayName());\n        } else {\n            stringBuilder.append(src.toString());\n        }\n    }\n"
            },
            {
              "step": 7,
              "variableName": "builder",
              "startLine": 202,
              "startColumn": 38,
              "endLine": 202,
              "endColumn": 45,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "StringBuilder",
              "code": "            StringBuilder builder = new StringBuilder(48);\n            appendDisplayName(part1, builder);\n            builder.append(' ');\n            appendDisplayName(part2, builder);\n            return builder.toString();\n        }\n"
            },
            {
              "step": 8,
              "variableName": "builder",
              "startLine": 203,
              "startColumn": 20,
              "endLine": 203,
              "endColumn": 27,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "StringBuilder",
              "code": "            appendDisplayName(part1, builder);\n            builder.append(' ');\n            appendDisplayName(part2, builder);\n            return builder.toString();\n        }\n\n        @Override"
            },
            {
              "step": 9,
              "variableName": "builder.toString()",
              "startLine": 203,
              "startColumn": 20,
              "endLine": 203,
              "endColumn": 38,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "String",
              "code": "            appendDisplayName(part1, builder);\n            builder.append(' ');\n            appendDisplayName(part2, builder);\n            return builder.toString();\n        }\n\n        @Override"
            },
            {
              "step": 10,
              "variableName": "describable.getDisplayName()",
              "startLine": 313,
              "startColumn": 35,
              "endLine": 313,
              "endColumn": 63,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "String",
              "code": "        public String getDisplayName() {\n            synchronized (this) {\n                if (displayName == null) {\n                    displayName = describable.getDisplayName();\n                    if (capDisplayName != null || !(describable instanceof DisplayName)) {\n                        describable = null;\n                    }"
            },
            {
              "step": 11,
              "variableName": "displayName",
              "startLine": 318,
              "startColumn": 24,
              "endLine": 318,
              "endColumn": 35,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "String",
              "code": "                        describable = null;\n                    }\n                }\n                return displayName;\n            }\n        }\n    }"
            },
            {
              "step": 12,
              "variableName": "displayName.getDisplayName()",
              "startLine": 772,
              "startColumn": 73,
              "endLine": 772,
              "endColumn": 101,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/configurations/DefaultConfiguration.java",
              "type": "String",
              "code": "                try {\n                    results = resolver.resolveGraph(DefaultConfiguration.this);\n                } catch (Exception e) {\n                    throw exceptionMapper.mapFailure(e, \"dependencies\", displayName.getDisplayName());\n                }\n\n                // Make the new state visible in case a dependency resolution listener queries the result, which requires the new state"
            },
            {
              "step": 13,
              "variableName": "String contextDisplayName",
              "startLine": 68,
              "startColumn": 77,
              "endLine": 68,
              "endColumn": 102,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "String",
              "code": "        return mapFailure(failure, type, displayName);\n    }\n\n    public TypedResolveException mapFailure(Throwable failure, String type, String contextDisplayName) {\n        if (!(failure instanceof TypedResolveException)) {\n            return new TypedResolveException(\n                type,"
            },
            {
              "step": 14,
              "variableName": "contextDisplayName",
              "startLine": 72,
              "startColumn": 17,
              "endLine": 72,
              "endColumn": 35,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "String",
              "code": "        if (!(failure instanceof TypedResolveException)) {\n            return new TypedResolveException(\n                type,\n                contextDisplayName,\n                ImmutableList.of(mapRepositoryOverrideFailure(contextDisplayName, failure))\n            );\n        }"
            },
            {
              "step": 15,
              "variableName": "new TypedResolveException(...) : TypedResolveException",
              "startLine": 70,
              "startColumn": 20,
              "endLine": 74,
              "endColumn": 14,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "TypedResolveException",
              "code": "\n    public TypedResolveException mapFailure(Throwable failure, String type, String contextDisplayName) {\n        if (!(failure instanceof TypedResolveException)) {\n            return new TypedResolveException(\n                type,\n                contextDisplayName,\n                ImmutableList.of(mapRepositoryOverrideFailure(contextDisplayName, failure))"
            },
            {
              "step": 16,
              "variableName": "exceptionMapper.mapFailure(e, \"dependencies\", displayName.getDisplayName())",
              "startLine": 772,
              "startColumn": 27,
              "endLine": 772,
              "endColumn": 102,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/configurations/DefaultConfiguration.java",
              "type": "TypedResolveException",
              "code": "                try {\n                    results = resolver.resolveGraph(DefaultConfiguration.this);\n                } catch (Exception e) {\n                    throw exceptionMapper.mapFailure(e, \"dependencies\", displayName.getDisplayName());\n                }\n\n                // Make the new state visible in case a dependency resolution listener queries the result, which requires the new state"
            },
            {
              "step": 17,
              "variableName": "e",
              "startLine": 772,
              "startColumn": 54,
              "endLine": 772,
              "endColumn": 55,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/configurations/DefaultConfiguration.java",
              "type": "Exception",
              "code": "                try {\n                    results = resolver.resolveGraph(DefaultConfiguration.this);\n                } catch (Exception e) {\n                    throw exceptionMapper.mapFailure(e, \"dependencies\", displayName.getDisplayName());\n                }\n\n                // Make the new state visible in case a dependency resolution listener queries the result, which requires the new state"
            },
            {
              "step": 18,
              "variableName": "Throwable failure",
              "startLine": 68,
              "startColumn": 45,
              "endLine": 68,
              "endColumn": 62,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Throwable",
              "code": "        return mapFailure(failure, type, displayName);\n    }\n\n    public TypedResolveException mapFailure(Throwable failure, String type, String contextDisplayName) {\n        if (!(failure instanceof TypedResolveException)) {\n            return new TypedResolveException(\n                type,"
            },
            {
              "step": 19,
              "variableName": "failure",
              "startLine": 73,
              "startColumn": 83,
              "endLine": 73,
              "endColumn": 90,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Throwable",
              "code": "            return new TypedResolveException(\n                type,\n                contextDisplayName,\n                ImmutableList.of(mapRepositoryOverrideFailure(contextDisplayName, failure))\n            );\n        }\n"
            },
            {
              "step": 20,
              "variableName": "Throwable failure",
              "startLine": 94,
              "startColumn": 78,
              "endLine": 94,
              "endColumn": 95,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Throwable",
              "code": "\n    // TODO: We should handle this exception at the source instead of using instanceof to detect it after it is thrown.\n    //       We should try to avoid catching and analyzing runtime exceptions\n    public Throwable mapRepositoryOverrideFailure(String contextDisplayName, Throwable failure) {\n        if (!(failure instanceof ModuleVersionNotFoundException) || !settingsRepositoriesIgnored()) {\n            return failure;\n        }"
            },
            {
              "step": 21,
              "variableName": "failure",
              "startLine": 108,
              "startColumn": 35,
              "endLine": 108,
              "endColumn": 42,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Throwable",
              "code": "        return new TypedResolveException(\n            \"dependencies\",\n            contextDisplayName,\n            Collections.singleton(failure),\n            resolutions\n        );\n    }"
            },
            {
              "step": 22,
              "variableName": "Collections.singleton(failure)",
              "startLine": 108,
              "startColumn": 13,
              "endLine": 108,
              "endColumn": 43,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Set [<element>] : Throwable",
              "code": "        return new TypedResolveException(\n            \"dependencies\",\n            contextDisplayName,\n            Collections.singleton(failure),\n            resolutions\n        );\n    }"
            },
            {
              "step": 23,
              "variableName": "Collections.singleton(failure)",
              "startLine": 108,
              "startColumn": 13,
              "endLine": 108,
              "endColumn": 43,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Set",
              "code": "        return new TypedResolveException(\n            \"dependencies\",\n            contextDisplayName,\n            Collections.singleton(failure),\n            resolutions\n        );\n    }"
            },
            {
              "step": 24,
              "variableName": "Iterable<? extends Throwable> failures",
              "startLine": 42,
              "startColumn": 67,
              "endLine": 42,
              "endColumn": 105,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ivyservice/TypedResolveException.java",
              "type": "Set",
              "code": "    /**\n     * Creates a new instance with resolutions.\n     */\n    public TypedResolveException(String type, String displayName, Iterable<? extends Throwable> failures, List<String> resolutions) {\n        super(buildMessage(type, displayName), failures, false);\n        this.type = type;\n        this.resolutions = ImmutableList.copyOf(resolutions);"
            },
            {
              "step": 25,
              "variableName": "failures",
              "startLine": 43,
              "startColumn": 48,
              "endLine": 43,
              "endColumn": 56,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ivyservice/TypedResolveException.java",
              "type": "Set",
              "code": "     * Creates a new instance with resolutions.\n     */\n    public TypedResolveException(String type, String displayName, Iterable<? extends Throwable> failures, List<String> resolutions) {\n        super(buildMessage(type, displayName), failures, false);\n        this.type = type;\n        this.resolutions = ImmutableList.copyOf(resolutions);\n    }"
            },
            {
              "step": 26,
              "variableName": "Iterable<? extends Throwable> causes",
              "startLine": 77,
              "startColumn": 48,
              "endLine": 77,
              "endColumn": 84,
              "uri": "gradle-8.14.0/subprojects/core-api/src/main/java/org/gradle/api/artifacts/ResolveException.java",
              "type": "Set",
              "code": "     * @since 8.9\n     */\n    @Incubating\n    protected ResolveException(String message, Iterable<? extends Throwable> causes, @SuppressWarnings(\"unused\") boolean dummy) {\n        super(message, causes);\n    }\n}"
            },
            {
              "step": 27,
              "variableName": "causes",
              "startLine": 78,
              "startColumn": 24,
              "endLine": 78,
              "endColumn": 30,
              "uri": "gradle-8.14.0/subprojects/core-api/src/main/java/org/gradle/api/artifacts/ResolveException.java",
              "type": "Set",
              "code": "     */\n    @Incubating\n    protected ResolveException(String message, Iterable<? extends Throwable> causes, @SuppressWarnings(\"unused\") boolean dummy) {\n        super(message, causes);\n    }\n}\n"
            },
            {
              "step": 28,
              "variableName": "Iterable<? extends Throwable> causes",
              "startLine": 47,
              "startColumn": 55,
              "endLine": 47,
              "endColumn": 91,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "Set",
              "code": "        this.causes.addAll(Arrays.asList(causes));\n    }\n\n    public DefaultMultiCauseException(String message, Iterable<? extends Throwable> causes) {\n        super(message);\n        this.message = message;\n        initCauses(causes);"
            },
            {
              "step": 29,
              "variableName": "causes",
              "startLine": 50,
              "startColumn": 20,
              "endLine": 50,
              "endColumn": 26,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "Set",
              "code": "    public DefaultMultiCauseException(String message, Iterable<? extends Throwable> causes) {\n        super(message);\n        this.message = message;\n        initCauses(causes);\n    }\n\n    public DefaultMultiCauseException(Factory<String> messageFactory) {"
            },
            {
              "step": 30,
              "variableName": "Iterable<? extends Throwable> causes",
              "startLine": 112,
              "startColumn": 28,
              "endLine": 112,
              "endColumn": 64,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "Iterable",
              "code": "        return null;\n    }\n\n    public void initCauses(Iterable<? extends Throwable> causes) {\n        this.causes.clear();\n        for (Throwable cause : causes) {\n            this.causes.add(cause);"
            },
            {
              "step": 31,
              "variableName": "cause",
              "startLine": 115,
              "startColumn": 29,
              "endLine": 115,
              "endColumn": 34,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "Throwable",
              "code": "    public void initCauses(Iterable<? extends Throwable> causes) {\n        this.causes.clear();\n        for (Throwable cause : causes) {\n            this.causes.add(cause);\n        }\n    }\n"
            },
            {
              "step": 32,
              "variableName": "this.causes",
              "startLine": 115,
              "startColumn": 13,
              "endLine": 115,
              "endColumn": 24,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "CopyOnWriteArrayList [<element>] : Throwable",
              "code": "    public void initCauses(Iterable<? extends Throwable> causes) {\n        this.causes.clear();\n        for (Throwable cause : causes) {\n            this.causes.add(cause);\n        }\n    }\n"
            },
            {
              "step": 33,
              "variableName": "this",
              "startLine": 115,
              "startColumn": 13,
              "endLine": 115,
              "endColumn": 17,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "DefaultMultiCauseException [causes, <element>] : Throwable",
              "code": "    public void initCauses(Iterable<? extends Throwable> causes) {\n        this.causes.clear();\n        for (Throwable cause : causes) {\n            this.causes.add(cause);\n        }\n    }\n"
            },
            {
              "step": 34,
              "variableName": "projectConfigurationException",
              "startLine": 57,
              "startColumn": 17,
              "endLine": 57,
              "endColumn": 46,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/DefaultExceptionAnalyser.java",
              "type": "ProjectConfigurationException [causes, <element>] : Throwable",
              "code": "                }\n            }\n            if (!additionalFailures.isEmpty()) {\n                projectConfigurationException.initCauses(additionalFailures);\n                failures.add(transform(projectConfigurationException));\n            }\n        } else if (exception instanceof ServiceCreationException) {"
            },
            {
              "step": 35,
              "variableName": "projectConfigurationException",
              "startLine": 58,
              "startColumn": 40,
              "endLine": 58,
              "endColumn": 69,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/DefaultExceptionAnalyser.java",
              "type": "ProjectConfigurationException [causes, <element>] : Throwable",
              "code": "            }\n            if (!additionalFailures.isEmpty()) {\n                projectConfigurationException.initCauses(additionalFailures);\n                failures.add(transform(projectConfigurationException));\n            }\n        } else if (exception instanceof ServiceCreationException) {\n            failures.add(transform(new InitializationException(exception)));"
            },
            {
              "step": 36,
              "variableName": "transform(projectConfigurationException)",
              "startLine": 58,
              "startColumn": 30,
              "endLine": 58,
              "endColumn": 70,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/DefaultExceptionAnalyser.java",
              "type": "LocationAwareException",
              "code": "            }\n            if (!additionalFailures.isEmpty()) {\n                projectConfigurationException.initCauses(additionalFailures);\n                failures.add(transform(projectConfigurationException));\n            }\n        } else if (exception instanceof ServiceCreationException) {\n            failures.add(transform(new InitializationException(exception)));"
            },
            {
              "step": 37,
              "variableName": "failures",
              "startLine": 58,
              "startColumn": 17,
              "endLine": 58,
              "endColumn": 25,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/DefaultExceptionAnalyser.java",
              "type": "Collection [<element>] : LocationAwareException",
              "code": "            }\n            if (!additionalFailures.isEmpty()) {\n                projectConfigurationException.initCauses(additionalFailures);\n                failures.add(transform(projectConfigurationException));\n            }\n        } else if (exception instanceof ServiceCreationException) {\n            failures.add(transform(new InitializationException(exception)));"
            },
            {
              "step": 38,
              "variableName": "result",
              "startLine": 53,
              "startColumn": 54,
              "endLine": 53,
              "endColumn": 60,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/MultipleBuildFailuresExceptionAnalyser.java",
              "type": "ArrayList [<element>] : LocationAwareException",
              "code": "        for (Throwable failure : failures) {\n            if (failure instanceof MultipleBuildFailures) {\n                for (Throwable cause : ((MultipleBuildFailures) failure).getCauses()) {\n                    collector.collectFailures(cause, result);\n                }\n            } else {\n                collector.collectFailures(failure, result);"
            },
            {
              "step": 39,
              "variableName": "result",
              "startLine": 60,
              "startColumn": 39,
              "endLine": 60,
              "endColumn": 45,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/MultipleBuildFailuresExceptionAnalyser.java",
              "type": "ArrayList [<element>] : LocationAwareException",
              "code": "            }\n        }\n        if (result.size() == 1 && result.get(0) instanceof RuntimeException) {\n            return (RuntimeException) result.get(0);\n        } else {\n            return new MultipleBuildFailures(result);\n        }"
            },
            {
              "step": 40,
              "variableName": "result.get(0)",
              "startLine": 60,
              "startColumn": 39,
              "endLine": 60,
              "endColumn": 52,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/MultipleBuildFailuresExceptionAnalyser.java",
              "type": "LocationAwareException",
              "code": "            }\n        }\n        if (result.size() == 1 && result.get(0) instanceof RuntimeException) {\n            return (RuntimeException) result.get(0);\n        } else {\n            return new MultipleBuildFailures(result);\n        }"
            },
            {
              "step": 41,
              "variableName": "(RuntimeException) result.get(0)",
              "startLine": 60,
              "startColumn": 20,
              "endLine": 60,
              "endColumn": 52,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/MultipleBuildFailuresExceptionAnalyser.java",
              "type": "LocationAwareException",
              "code": "            }\n        }\n        if (result.size() == 1 && result.get(0) instanceof RuntimeException) {\n            return (RuntimeException) result.get(0);\n        } else {\n            return new MultipleBuildFailures(result);\n        }"
            },
            {
              "step": 42,
              "variableName": "exceptionAnalyser.transform(finishFailures)",
              "startLine": 72,
              "startColumn": 16,
              "endLine": 72,
              "endColumn": 59,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/internal/buildtree/DefaultBuildTreeFinishExecutor.java",
              "type": "LocationAwareException",
              "code": "            finishFailures.addAll(result.getFailures());\n        });\n\n        return exceptionAnalyser.transform(finishFailures);\n    }\n}\n"
            },
            {
              "step": 43,
              "variableName": "delegate.finishBuildTree(failures)",
              "startLine": 46,
              "startColumn": 28,
              "endLine": 46,
              "endColumn": 62,
              "uri": "gradle-8.14.0/subprojects/composite-builds/src/main/java/org/gradle/composite/internal/OperationFiringBuildTreeFinishExecutor.java",
              "type": "LocationAwareException",
              "code": "            @Override\n            public RuntimeException call(BuildOperationContext context) {\n                try {\n                    return delegate.finishBuildTree(failures);\n                } finally {\n                    context.setResult(RESULT);\n                }"
            },
            {
              "step": 44,
              "variableName": "buildOperation.call(context)",
              "startLine": 239,
              "startColumn": 21,
              "endLine": 239,
              "endColumn": 49,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/testFixtures/java/org/gradle/internal/operations/TestBuildOperationRunner.java",
              "type": "LocationAwareException",
              "code": "            TestBuildOperationContext context = new TestBuildOperationContext(record);\n            T t;\n            try {\n                t = buildOperation.call(context);\n            } catch (Throwable failure) {\n                if (record.failure == null) {\n                    record.failure = failure;"
            },
            {
              "step": 45,
              "variableName": "t",
              "startLine": 246,
              "startColumn": 20,
              "endLine": 246,
              "endColumn": 21,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/testFixtures/java/org/gradle/internal/operations/TestBuildOperationRunner.java",
              "type": "LocationAwareException",
              "code": "                }\n                throw throwAsUncheckedException(failure);\n            }\n            return t;\n        }\n\n        private <O extends BuildOperation> void execute(O buildOperation, BuildOperationWorker<O> worker) {"
            },
            {
              "step": 46,
              "variableName": "log.call(buildOperation)",
              "startLine": 51,
              "startColumn": 16,
              "endLine": 51,
              "endColumn": 40,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/testFixtures/java/org/gradle/internal/operations/TestBuildOperationRunner.java",
              "type": "LocationAwareException",
              "code": "\n    @Override\n    public <T> T call(CallableBuildOperation<T> buildOperation) {\n        return log.call(buildOperation);\n    }\n\n    @Override"
            },
            {
              "step": 47,
              "variableName": "ca",
              "startLine": 115,
              "startColumn": 5,
              "endLine": 121,
              "endColumn": 7,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/configurationcache/ConfigurationCacheBuildOperations.kt",
              "type": "LocationAwareException",
              "code": "\ninternal\nfun <T : Any> BuildOperationRunner.withModelLoadOperation(block: () -> T): T =\n    call(object : CallableBuildOperation<T> {\n        override fun description(): BuildOperationDescriptor.Builder = BuildOperationDescriptor\n            .displayName(\"Load model from configuration cache\")\n            .progressDisplayName(\"Loading model from configuration cache\")"
            },
            {
              "step": 48,
              "variableName": "ca",
              "startLine": 115,
              "startColumn": 5,
              "endLine": 121,
              "endColumn": 7,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/configurationcache/ConfigurationCacheBuildOperations.kt",
              "type": "LocationAwareException",
              "code": "\ninternal\nfun <T : Any> BuildOperationRunner.withModelLoadOperation(block: () -> T): T =\n    call(object : CallableBuildOperation<T> {\n        override fun description(): BuildOperationDescriptor.Builder = BuildOperationDescriptor\n            .displayName(\"Load model from configuration cache\")\n            .progressDisplayName(\"Loading model from configuration cache\")"
            },
            {
              "step": 49,
              "variableName": "b",
              "startLine": 635,
              "startColumn": 9,
              "endLine": 641,
              "endColumn": 10,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "        // No need to record the `ClassLoaderScope` tree when loading\n        scopeRegistryListener.dispose()\n\n        buildOperationRunner.withModelLoadOperation {\n            val storeLoadResult = entryStore.useForStateLoad(StateType.Model) { stateFile: ConfigurationCacheStateFile ->\n                cacheIO.readModelFrom(stateFile)\n            }"
            },
            {
              "step": 50,
              "variableName": "block()",
              "startLine": 668,
              "startColumn": 22,
              "endLine": 668,
              "endColumn": 29,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "    private\n    inline fun <T> runAtConfigurationTime(block: () -> T): T {\n        prepareConfigurationTimeBarrier()\n        val result = block()\n        crossConfigurationTimeBarrier()\n        return result\n    }"
            },
            {
              "step": 51,
              "variableName": "result",
              "startLine": 670,
              "startColumn": 16,
              "endLine": 670,
              "endColumn": 22,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "        prepareConfigurationTimeBarrier()\n        val result = block()\n        crossConfigurationTimeBarrier()\n        return result\n    }\n\n    private"
            },
            {
              "step": 52,
              "variableName": "runAtConfigurationTime(...) : LocationAwareException",
              "startLine": 631,
              "startColumn": 28,
              "endLine": 642,
              "endColumn": 6,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "    data class LoadResultMetadata(val originInvocationId: String? = null)\n\n    private\n    fun loadModel(): Any = runAtConfigurationTime {\n        // No need to record the `ClassLoaderScope` tree when loading\n        scopeRegistryListener.dispose()\n"
            },
            {
              "step": 53,
              "variableName": "loadModel()",
              "startLine": 268,
              "startColumn": 20,
              "endLine": 268,
              "endColumn": 31,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "    override fun <T : Any> loadOrCreateModel(creator: () -> T): T {\n        if (isLoaded) {\n            runLoadedSideEffects()\n            return loadModel().uncheckedCast()\n        }\n\n        return runWorkThatContributesToCacheEntry {"
            },
            {
              "step": 54,
              "variableName": "Any",
              "startLine": 22,
              "startColumn": 15,
              "endLine": 22,
              "endColumn": 18,
              "uri": "gradle-8.14.0/platforms/core-configuration/stdlib-kotlin-extensions/src/main/kotlin/org/gradle/internal/extensions/stdlib/CastExtensions.kt",
              "type": "Object",
              "code": "import org.gradle.internal.Cast\n\n\nfun <T : Any> Any.uncheckedCast(): T =\n    Cast.uncheckedNonnullCast(this)\n"
            },
            {
              "step": 55,
              "variableName": "this",
              "startLine": 23,
              "startColumn": 31,
              "endLine": 23,
              "endColumn": 35,
              "uri": "gradle-8.14.0/platforms/core-configuration/stdlib-kotlin-extensions/src/main/kotlin/org/gradle/internal/extensions/stdlib/CastExtensions.kt",
              "type": "Object",
              "code": "\n\nfun <T : Any> Any.uncheckedCast(): T =\n    Cast.uncheckedNonnullCast(this)\n"
            },
            {
              "step": 56,
              "variableName": "Object object",
              "startLine": 76,
              "startColumn": 46,
              "endLine": 76,
              "endColumn": 59,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/Cast.java",
              "type": "Object",
              "code": "    }\n\n    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})\n    public static <T> T uncheckedNonnullCast(Object object) {\n        return (T) object;\n    }\n}"
            },
            {
              "step": 57,
              "variableName": "(T) object",
              "startLine": 77,
              "startColumn": 16,
              "endLine": 77,
              "endColumn": 26,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/Cast.java",
              "type": "Object",
              "code": "\n    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})\n    public static <T> T uncheckedNonnullCast(Object object) {\n        return (T) object;\n    }\n}\n"
            },
            {
              "step": 58,
              "variableName": "uncheckedNonnullCast(this)",
              "startLine": 23,
              "startColumn": 10,
              "endLine": 23,
              "endColumn": 36,
              "uri": "gradle-8.14.0/platforms/core-configuration/stdlib-kotlin-extensions/src/main/kotlin/org/gradle/internal/extensions/stdlib/CastExtensions.kt",
              "type": "Object",
              "code": "\n\nfun <T : Any> Any.uncheckedCast(): T =\n    Cast.uncheckedNonnullCast(this)\n"
            },
            {
              "step": 59,
              "variableName": "uncheckedNonnullCast(this)",
              "startLine": 23,
              "startColumn": 10,
              "endLine": 23,
              "endColumn": 36,
              "uri": "gradle-8.14.0/platforms/core-configuration/stdlib-kotlin-extensions/src/main/kotlin/org/gradle/internal/extensions/stdlib/CastExtensions.kt",
              "type": "Object",
              "code": "\n\nfun <T : Any> Any.uncheckedCast(): T =\n    Cast.uncheckedNonnullCast(this)\n"
            },
            {
              "step": 60,
              "variableName": "!!.uncheckedCast<T>()",
              "startLine": 159,
              "startColumn": 57,
              "endLine": 159,
              "endColumn": 78,
              "uri": "gradle-8.14.0/platforms/core-configuration/graph-serialization/src/main/kotlin/org/gradle/internal/serialize/graph/Codec.kt",
              "type": "Object",
              "code": "    getSingletonProperty(T::class.java)\n\n\nsuspend fun <T : Any> ReadContext.readNonNull() = read()!!.uncheckedCast<T>()\n\n\ninterface IsolateContext {"
            },
            {
              "step": 61,
              "variableName": "readNonNull<FileCollection>()",
              "startLine": 781,
              "startColumn": 29,
              "endLine": 781,
              "endColumn": 58,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/ConfigurationCacheState.kt",
              "type": "FileCollection",
              "code": "        val buildOutputCleanupRegistry = gradle.serviceOf<BuildOutputCleanupRegistry>()\n        withGradleIsolate(gradle, userTypesCodec) {\n            readCollection {\n                val files = readNonNull<FileCollection>()\n                buildOutputCleanupRegistry.registerOutputs(files)\n            }\n        }"
            },
            {
              "step": 62,
              "variableName": "files",
              "startLine": 782,
              "startColumn": 60,
              "endLine": 782,
              "endColumn": 65,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/ConfigurationCacheState.kt",
              "type": "FileCollection",
              "code": "        withGradleIsolate(gradle, userTypesCodec) {\n            readCollection {\n                val files = readNonNull<FileCollection>()\n                buildOutputCleanupRegistry.registerOutputs(files)\n            }\n        }\n    }"
            },
            {
              "step": 63,
              "variableName": "Object files",
              "startLine": 46,
              "startColumn": 33,
              "endLine": 46,
              "endColumn": 45,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/internal/cleanup/DefaultBuildOutputCleanupRegistry.java",
              "type": "FileCollection",
              "code": "    }\n\n    @Override\n    public void registerOutputs(Object files) {\n        synchronized (lock) {\n            if (resolvedPaths != null) {\n                // Some tasks cannot declare the dependencies on other projects, yet, for example the dependencies task."
            },
            {
              "step": 64,
              "variableName": "files",
              "startLine": 55,
              "startColumn": 66,
              "endLine": 55,
              "endColumn": 71,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/internal/cleanup/DefaultBuildOutputCleanupRegistry.java",
              "type": "FileCollection",
              "code": "                // See https://github.com/gradle/gradle/issues/18460.\n                LOGGER.debug(\"More outputs are being registered even though the build output cleanup registry has already been finalized. New outputs: {}\", files);\n            } else {\n                this.outputs.add(fileCollectionFactory.resolving(files));\n            }\n        }\n    }"
            },
            {
              "step": 65,
              "variableName": "Object sources",
              "startLine": 187,
              "startColumn": 45,
              "endLine": 187,
              "endColumn": 59,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-collections/src/main/java/org/gradle/api/internal/file/DefaultFileCollectionFactory.java",
              "type": "FileCollection",
              "code": "    }\n\n    @Override\n    public FileCollectionInternal resolving(Object sources) {\n        return resolving(ProviderResolutionStrategy.REQUIRE_PRESENT, sources);\n    }\n"
            },
            {
              "step": 66,
              "variableName": "sources",
              "startLine": 188,
              "startColumn": 70,
              "endLine": 188,
              "endColumn": 77,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-collections/src/main/java/org/gradle/api/internal/file/DefaultFileCollectionFactory.java",
              "type": "FileCollection",
              "code": "\n    @Override\n    public FileCollectionInternal resolving(Object sources) {\n        return resolving(ProviderResolutionStrategy.REQUIRE_PRESENT, sources);\n    }\n\n    @Override"
            },
            {
              "step": 67,
              "variableName": "Object sources",
              "startLine": 196,
              "startColumn": 101,
              "endLine": 196,
              "endColumn": 115,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-collections/src/main/java/org/gradle/api/internal/file/DefaultFileCollectionFactory.java",
              "type": "Object",
              "code": "        return resolving(ProviderResolutionStrategy.ALLOW_ABSENT, sources);\n    }\n\n    private FileCollectionInternal resolving(ProviderResolutionStrategy providerResolutionStrategy, Object sources) {\n        if (sources instanceof FileCollectionInternal) {\n            return (FileCollectionInternal) sources;\n        }"
            },
            {
              "step": 68,
              "variableName": "(FileCollectionInternal) sources",
              "startLine": 198,
              "startColumn": 20,
              "endLine": 198,
              "endColumn": 52,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-collections/src/main/java/org/gradle/api/internal/file/DefaultFileCollectionFactory.java",
              "type": "FileCollectionInternal",
              "code": "\n    private FileCollectionInternal resolving(ProviderResolutionStrategy providerResolutionStrategy, Object sources) {\n        if (sources instanceof FileCollectionInternal) {\n            return (FileCollectionInternal) sources;\n        }\n        if (isEmptyArray(sources)) {\n            return FileCollectionFactory.empty();"
            },
            {
              "step": 69,
              "variableName": "resolving(ProviderResolutionStrategy.REQUIRE_PRESENT, sources)",
              "startLine": 188,
              "startColumn": 16,
              "endLine": 188,
              "endColumn": 78,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-collections/src/main/java/org/gradle/api/internal/file/DefaultFileCollectionFactory.java",
              "type": "FileCollectionInternal",
              "code": "\n    @Override\n    public FileCollectionInternal resolving(Object sources) {\n        return resolving(ProviderResolutionStrategy.REQUIRE_PRESENT, sources);\n    }\n\n    @Override"
            },
            {
              "step": 70,
              "variableName": "fileCollectionFactory.resolving(this)",
              "startLine": 345,
              "startColumn": 20,
              "endLine": 345,
              "endColumn": 57,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-collections/src/main/java/org/gradle/api/internal/file/DefaultFilePropertyFactory.java",
              "type": "FileCollectionInternal",
              "code": "\n        @Override\n        public FileTree getAsFileTree() {\n            return fileCollectionFactory.resolving(this).getAsFileTree();\n        }\n\n        @Override"
            },
            {
              "step": 71,
              "variableName": "getAsFileTree",
              "startLine": 103,
              "startColumn": 29,
              "endLine": 103,
              "endColumn": 42,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-collections/src/main/java/org/gradle/api/internal/file/AbstractFileTree.java",
              "type": "AbstractFileTree",
              "code": "    }\n\n    @Override\n    public FileTreeInternal getAsFileTree() {\n        return this;\n    }\n"
            },
            {
              "step": 72,
              "variableName": "this",
              "startLine": 104,
              "startColumn": 16,
              "endLine": 104,
              "endColumn": 20,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-collections/src/main/java/org/gradle/api/internal/file/AbstractFileTree.java",
              "type": "AbstractFileTree",
              "code": "\n    @Override\n    public FileTreeInternal getAsFileTree() {\n        return this;\n    }\n\n    @Override"
            },
            {
              "step": 73,
              "variableName": "fileCollectionFactory.resolving(this).getAsFileTree()",
              "startLine": 345,
              "startColumn": 20,
              "endLine": 345,
              "endColumn": 73,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-collections/src/main/java/org/gradle/api/internal/file/DefaultFilePropertyFactory.java",
              "type": "AbstractFileTree",
              "code": "\n        @Override\n        public FileTree getAsFileTree() {\n            return fileCollectionFactory.resolving(this).getAsFileTree();\n        }\n\n        @Override"
            },
            {
              "step": 74,
              "variableName": "getSamplesRoot()",
              "startLine": 102,
              "startColumn": 9,
              "endLine": 103,
              "endColumn": 29,
              "uri": "gradle-8.14.0/build-logic/documentation/src/main/groovy/gradlebuild/docs/FindBrokenInternalLinks.java",
              "type": "AbstractFileTree",
              "code": "\n        gatherDeadLinksInFileReleaseNotes(errors);\n\n        getSamplesRoot()\n            .getAsFileTree()\n            .matching(pattern -> {\n                pattern.include(\"**/*.adoc\");"
            },
            {
              "step": 75,
              "variableName": "matching",
              "startLine": 60,
              "startColumn": 21,
              "endLine": 60,
              "endColumn": 29,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-collections/src/main/java/org/gradle/api/internal/file/EmptyFileTree.java",
              "type": "EmptyFileTree",
              "code": "    }\n\n    @Override\n    public FileTree matching(Action<? super PatternFilterable> filterConfigAction) {\n        return this;\n    }\n"
            },
            {
              "step": 76,
              "variableName": "this",
              "startLine": 61,
              "startColumn": 16,
              "endLine": 61,
              "endColumn": 20,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-collections/src/main/java/org/gradle/api/internal/file/EmptyFileTree.java",
              "type": "EmptyFileTree",
              "code": "\n    @Override\n    public FileTree matching(Action<? super PatternFilterable> filterConfigAction) {\n        return this;\n    }\n\n    @Override"
            },
            {
              "step": 77,
              "variableName": "getSam",
              "startLine": 102,
              "startColumn": 9,
              "endLine": 107,
              "endColumn": 15,
              "uri": "gradle-8.14.0/build-logic/documentation/src/main/groovy/gradlebuild/docs/FindBrokenInternalLinks.java",
              "type": "EmptyFileTree",
              "code": "\n        gatherDeadLinksInFileReleaseNotes(errors);\n\n        getSamplesRoot()\n            .getAsFileTree()\n            .matching(pattern -> {\n                pattern.include(\"**/*.adoc\");"
            },
            {
              "step": 78,
              "variableName": "file -> gatherDeadLinksInFileSamples(file, errors)",
              "startLine": 108,
              "startColumn": 22,
              "endLine": 108,
              "endColumn": 72,
              "uri": "gradle-8.14.0/build-logic/documentation/src/main/groovy/gradlebuild/docs/FindBrokenInternalLinks.java",
              "type": "new Consumer<File>(...) { ... } [Map<File,List<Error>> errors, <map.key>]",
              "code": "                pattern.include(\"**/*.adoc\");\n                pattern.exclude(\"**/index.adoc\"); // Exclude index.adoc files\n            })\n            .forEach(file -> gatherDeadLinksInFileSamples(file, errors));\n\n        getDocumentationRoot().getAsFileTree().matching(pattern -> pattern.include(\"**/*.adoc\")).forEach(file -> {\n            gatherDeadLinksInFile(file, errors);"
            },
            {
              "step": 79,
              "variableName": "file -> gatherDeadLinksInFileSamples(file, errors)",
              "startLine": 108,
              "startColumn": 22,
              "endLine": 108,
              "endColumn": 72,
              "uri": "gradle-8.14.0/build-logic/documentation/src/main/groovy/gradlebuild/docs/FindBrokenInternalLinks.java",
              "type": "TreeMap [<map.key>]",
              "code": "                pattern.include(\"**/*.adoc\");\n                pattern.exclude(\"**/index.adoc\"); // Exclude index.adoc files\n            })\n            .forEach(file -> gatherDeadLinksInFileSamples(file, errors));\n\n        getDocumentationRoot().getAsFileTree().matching(pattern -> pattern.include(\"**/*.adoc\")).forEach(file -> {\n            gatherDeadLinksInFile(file, errors);"
            },
            {
              "step": 80,
              "variableName": "errors",
              "startLine": 114,
              "startColumn": 22,
              "endLine": 114,
              "endColumn": 28,
              "uri": "gradle-8.14.0/build-logic/documentation/src/main/groovy/gradlebuild/docs/FindBrokenInternalLinks.java",
              "type": "TreeMap [<map.key>]",
              "code": "            gatherDeadLinksInFile(file, errors);\n        });\n\n        reportErrors(errors, getReportFile().get().getAsFile());\n    }\n\n    private void reportErrors(Map<File, List<Error>> errors, File reportFile) {"
            },
            {
              "step": 81,
              "variableName": "Map<File, List<Error>> errors",
              "startLine": 117,
              "startColumn": 31,
              "endLine": 117,
              "endColumn": 60,
              "uri": "gradle-8.14.0/build-logic/documentation/src/main/groovy/gradlebuild/docs/FindBrokenInternalLinks.java",
              "type": "TreeMap [<map.key>]",
              "code": "        reportErrors(errors, getReportFile().get().getAsFile());\n    }\n\n    private void reportErrors(Map<File, List<Error>> errors, File reportFile) {\n        try (PrintWriter fw = new PrintWriter(new FileWriter(reportFile))) {\n            writeHeader(fw);\n            if (errors.isEmpty()) {"
            },
            {
              "step": 82,
              "variableName": "errors",
              "startLine": 124,
              "startColumn": 51,
              "endLine": 124,
              "endColumn": 57,
              "uri": "gradle-8.14.0/build-logic/documentation/src/main/groovy/gradlebuild/docs/FindBrokenInternalLinks.java",
              "type": "TreeMap [<map.key>]",
              "code": "                fw.println(\"All clear!\");\n                return;\n            }\n            for (Map.Entry<File, List<Error>> e : errors.entrySet()) {\n                File file = e.getKey();\n                List<Error> errorsForFile = e.getValue();\n"
            },
            {
              "step": 83,
              "variableName": "errors.entrySet()",
              "startLine": 124,
              "startColumn": 51,
              "endLine": 124,
              "endColumn": 68,
              "uri": "gradle-8.14.0/build-logic/documentation/src/main/groovy/gradlebuild/docs/FindBrokenInternalLinks.java",
              "type": "EntrySet [<element>, <map.key>]",
              "code": "                fw.println(\"All clear!\");\n                return;\n            }\n            for (Map.Entry<File, List<Error>> e : errors.entrySet()) {\n                File file = e.getKey();\n                List<Error> errorsForFile = e.getValue();\n"
            },
            {
              "step": 84,
              "variableName": "e",
              "startLine": 125,
              "startColumn": 29,
              "endLine": 125,
              "endColumn": 30,
              "uri": "gradle-8.14.0/build-logic/documentation/src/main/groovy/gradlebuild/docs/FindBrokenInternalLinks.java",
              "type": "Entry [<map.key>]",
              "code": "                return;\n            }\n            for (Map.Entry<File, List<Error>> e : errors.entrySet()) {\n                File file = e.getKey();\n                List<Error> errorsForFile = e.getValue();\n\n                StringBuilder sb = new StringBuilder();"
            },
            {
              "step": 85,
              "variableName": "e.getKey()",
              "startLine": 125,
              "startColumn": 29,
              "endLine": 125,
              "endColumn": 39,
              "uri": "gradle-8.14.0/build-logic/documentation/src/main/groovy/gradlebuild/docs/FindBrokenInternalLinks.java",
              "type": "File",
              "code": "                return;\n            }\n            for (Map.Entry<File, List<Error>> e : errors.entrySet()) {\n                File file = e.getKey();\n                List<Error> errorsForFile = e.getValue();\n\n                StringBuilder sb = new StringBuilder();"
            },
            {
              "step": 86,
              "variableName": "file",
              "startLine": 130,
              "startColumn": 43,
              "endLine": 130,
              "endColumn": 47,
              "uri": "gradle-8.14.0/build-logic/documentation/src/main/groovy/gradlebuild/docs/FindBrokenInternalLinks.java",
              "type": "File",
              "code": "\n                StringBuilder sb = new StringBuilder();\n                for (Error error : errorsForFile) {\n                    sb.append(\"ERROR: \" + file.getName() + \":\" + error.lineNumber + \" \" + error.message + \"\\n    \" + error.line + \"\\n\");\n                }\n                String message = sb.toString();\n                getLogger().error(message);"
            },
            {
              "step": 87,
              "variableName": "file.getName()",
              "startLine": 130,
              "startColumn": 43,
              "endLine": 130,
              "endColumn": 57,
              "uri": "gradle-8.14.0/build-logic/documentation/src/main/groovy/gradlebuild/docs/FindBrokenInternalLinks.java",
              "type": "String",
              "code": "\n                StringBuilder sb = new StringBuilder();\n                for (Error error : errorsForFile) {\n                    sb.append(\"ERROR: \" + file.getName() + \":\" + error.lineNumber + \" \" + error.message + \"\\n    \" + error.line + \"\\n\");\n                }\n                String message = sb.toString();\n                getLogger().error(message);"
            },
            {
              "step": 88,
              "variableName": "\"ERROR: \" + file.getName()",
              "startLine": 130,
              "startColumn": 31,
              "endLine": 130,
              "endColumn": 57,
              "uri": "gradle-8.14.0/build-logic/documentation/src/main/groovy/gradlebuild/docs/FindBrokenInternalLinks.java",
              "type": "String",
              "code": "\n                StringBuilder sb = new StringBuilder();\n                for (Error error : errorsForFile) {\n                    sb.append(\"ERROR: \" + file.getName() + \":\" + error.lineNumber + \" \" + error.message + \"\\n    \" + error.line + \"\\n\");\n                }\n                String message = sb.toString();\n                getLogger().error(message);"
            },
            {
              "step": 89,
              "variableName": "\"ERROR: \" + file.getName() + \":\"",
              "startLine": 130,
              "startColumn": 31,
              "endLine": 130,
              "endColumn": 63,
              "uri": "gradle-8.14.0/build-logic/documentation/src/main/groovy/gradlebuild/docs/FindBrokenInternalLinks.java",
              "type": "String",
              "code": "\n                StringBuilder sb = new StringBuilder();\n                for (Error error : errorsForFile) {\n                    sb.append(\"ERROR: \" + file.getName() + \":\" + error.lineNumber + \" \" + error.message + \"\\n    \" + error.line + \"\\n\");\n                }\n                String message = sb.toString();\n                getLogger().error(message);"
            },
            {
              "step": 90,
              "variableName": "\"ERROR: \" + file.getName() + \":\" + error.lineNumber",
              "startLine": 130,
              "startColumn": 31,
              "endLine": 130,
              "endColumn": 82,
              "uri": "gradle-8.14.0/build-logic/documentation/src/main/groovy/gradlebuild/docs/FindBrokenInternalLinks.java",
              "type": "String",
              "code": "\n                StringBuilder sb = new StringBuilder();\n                for (Error error : errorsForFile) {\n                    sb.append(\"ERROR: \" + file.getName() + \":\" + error.lineNumber + \" \" + error.message + \"\\n    \" + error.line + \"\\n\");\n                }\n                String message = sb.toString();\n                getLogger().error(message);"
            },
            {
              "step": 91,
              "variableName": "\"ERROR: \" + file.getName() + \":\" + error.lineNumber + \" \"",
              "startLine": 130,
              "startColumn": 31,
              "endLine": 130,
              "endColumn": 88,
              "uri": "gradle-8.14.0/build-logic/documentation/src/main/groovy/gradlebuild/docs/FindBrokenInternalLinks.java",
              "type": "String",
              "code": "\n                StringBuilder sb = new StringBuilder();\n                for (Error error : errorsForFile) {\n                    sb.append(\"ERROR: \" + file.getName() + \":\" + error.lineNumber + \" \" + error.message + \"\\n    \" + error.line + \"\\n\");\n                }\n                String message = sb.toString();\n                getLogger().error(message);"
            },
            {
              "step": 92,
              "variableName": "\"ERROR: \" + file.getName() + \":\" + error.lineNumber + \" \" + error.message",
              "startLine": 130,
              "startColumn": 31,
              "endLine": 130,
              "endColumn": 104,
              "uri": "gradle-8.14.0/build-logic/documentation/src/main/groovy/gradlebuild/docs/FindBrokenInternalLinks.java",
              "type": "String",
              "code": "\n                StringBuilder sb = new StringBuilder();\n                for (Error error : errorsForFile) {\n                    sb.append(\"ERROR: \" + file.getName() + \":\" + error.lineNumber + \" \" + error.message + \"\\n    \" + error.line + \"\\n\");\n                }\n                String message = sb.toString();\n                getLogger().error(message);"
            },
            {
              "step": 93,
              "variableName": "\"ERROR: \" + file.getName() + \":\" + error.lineNumber + \" \" + error.message + \"\\n    \"",
              "startLine": 130,
              "startColumn": 31,
              "endLine": 130,
              "endColumn": 115,
              "uri": "gradle-8.14.0/build-logic/documentation/src/main/groovy/gradlebuild/docs/FindBrokenInternalLinks.java",
              "type": "String",
              "code": "\n                StringBuilder sb = new StringBuilder();\n                for (Error error : errorsForFile) {\n                    sb.append(\"ERROR: \" + file.getName() + \":\" + error.lineNumber + \" \" + error.message + \"\\n    \" + error.line + \"\\n\");\n                }\n                String message = sb.toString();\n                getLogger().error(message);"
            },
            {
              "step": 94,
              "variableName": "\"ERROR: \" + file.getName() + \":\" + error.lineNumber + \" \" + error.message + \"\\n    \" + error.line",
              "startLine": 130,
              "startColumn": 31,
              "endLine": 130,
              "endColumn": 128,
              "uri": "gradle-8.14.0/build-logic/documentation/src/main/groovy/gradlebuild/docs/FindBrokenInternalLinks.java",
              "type": "String",
              "code": "\n                StringBuilder sb = new StringBuilder();\n                for (Error error : errorsForFile) {\n                    sb.append(\"ERROR: \" + file.getName() + \":\" + error.lineNumber + \" \" + error.message + \"\\n    \" + error.line + \"\\n\");\n                }\n                String message = sb.toString();\n                getLogger().error(message);"
            },
            {
              "step": 95,
              "variableName": "\"ERROR: \" + file.getName() + \":\" + error.lineNumber + \" \" + error.message + \"\\n    \" + error.line + \"\\n\"",
              "startLine": 130,
              "startColumn": 31,
              "endLine": 130,
              "endColumn": 135,
              "uri": "gradle-8.14.0/build-logic/documentation/src/main/groovy/gradlebuild/docs/FindBrokenInternalLinks.java",
              "type": "String",
              "code": "\n                StringBuilder sb = new StringBuilder();\n                for (Error error : errorsForFile) {\n                    sb.append(\"ERROR: \" + file.getName() + \":\" + error.lineNumber + \" \" + error.message + \"\\n    \" + error.line + \"\\n\");\n                }\n                String message = sb.toString();\n                getLogger().error(message);"
            },
            {
              "step": 96,
              "variableName": "sb",
              "startLine": 130,
              "startColumn": 21,
              "endLine": 130,
              "endColumn": 23,
              "uri": "gradle-8.14.0/build-logic/documentation/src/main/groovy/gradlebuild/docs/FindBrokenInternalLinks.java",
              "type": "StringBuilder",
              "code": "\n                StringBuilder sb = new StringBuilder();\n                for (Error error : errorsForFile) {\n                    sb.append(\"ERROR: \" + file.getName() + \":\" + error.lineNumber + \" \" + error.message + \"\\n    \" + error.line + \"\\n\");\n                }\n                String message = sb.toString();\n                getLogger().error(message);"
            },
            {
              "step": 97,
              "variableName": "sb",
              "startLine": 132,
              "startColumn": 34,
              "endLine": 132,
              "endColumn": 36,
              "uri": "gradle-8.14.0/build-logic/documentation/src/main/groovy/gradlebuild/docs/FindBrokenInternalLinks.java",
              "type": "StringBuilder",
              "code": "                for (Error error : errorsForFile) {\n                    sb.append(\"ERROR: \" + file.getName() + \":\" + error.lineNumber + \" \" + error.message + \"\\n    \" + error.line + \"\\n\");\n                }\n                String message = sb.toString();\n                getLogger().error(message);\n                fw.println(message);\n            }"
            },
            {
              "step": 98,
              "variableName": "sb.toString()",
              "startLine": 132,
              "startColumn": 34,
              "endLine": 132,
              "endColumn": 47,
              "uri": "gradle-8.14.0/build-logic/documentation/src/main/groovy/gradlebuild/docs/FindBrokenInternalLinks.java",
              "type": "String",
              "code": "                for (Error error : errorsForFile) {\n                    sb.append(\"ERROR: \" + file.getName() + \":\" + error.lineNumber + \" \" + error.message + \"\\n    \" + error.line + \"\\n\");\n                }\n                String message = sb.toString();\n                getLogger().error(message);\n                fw.println(message);\n            }"
            },
            {
              "step": 99,
              "variableName": "message",
              "startLine": 134,
              "startColumn": 28,
              "endLine": 134,
              "endColumn": 35,
              "uri": "gradle-8.14.0/build-logic/documentation/src/main/groovy/gradlebuild/docs/FindBrokenInternalLinks.java",
              "type": "",
              "code": "                }\n                String message = sb.toString();\n                getLogger().error(message);\n                fw.println(message);\n            }\n        } catch (IOException e) {\n            throw new UncheckedIOException(e);"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 1,
      "fileName": "IncompatibleTypeReferenceReporter.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "source",
              "startLine": 44,
              "startColumn": 25,
              "endLine": 44,
              "endColumn": 31,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/RegExpNameMapper.java",
              "type": "String",
              "code": "        } else {\n            matcher.reset(source);\n        }\n        String result = source;\n        if (matcher.find()) {\n            result = matcher.replaceFirst(replacement);\n        }"
            },
            {
              "step": 1,
              "variableName": "result",
              "startLine": 48,
              "startColumn": 16,
              "endLine": 48,
              "endColumn": 22,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/RegExpNameMapper.java",
              "type": "String",
              "code": "        if (matcher.find()) {\n            result = matcher.replaceFirst(replacement);\n        }\n        return result;\n    }\n}\n"
            },
            {
              "step": 2,
              "variableName": "transformer.transform(value)",
              "startLine": 37,
              "startColumn": 31,
              "endLine": 37,
              "endColumn": 59,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/ChainingTransformer.java",
              "type": "String",
              "code": "    public T transform(T original) {\n        T value = original;\n        for (Transformer<T, T> transformer : transformers) {\n            value = type.cast(transformer.transform(value));\n        }\n        return value;\n    }"
            },
            {
              "step": 3,
              "variableName": "type.cast(transformer.transform(value))",
              "startLine": 37,
              "startColumn": 21,
              "endLine": 37,
              "endColumn": 60,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/ChainingTransformer.java",
              "type": "String",
              "code": "    public T transform(T original) {\n        T value = original;\n        for (Transformer<T, T> transformer : transformers) {\n            value = type.cast(transformer.transform(value));\n        }\n        return value;\n    }"
            },
            {
              "step": 4,
              "variableName": "value",
              "startLine": 39,
              "startColumn": 16,
              "endLine": 39,
              "endColumn": 21,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/ChainingTransformer.java",
              "type": "String",
              "code": "        for (Transformer<T, T> transformer : transformers) {\n            value = type.cast(transformer.transform(value));\n        }\n        return value;\n    }\n\n    public void add(Transformer<T, T> transformer) {"
            },
            {
              "step": 5,
              "variableName": "describer.transform(this)",
              "startLine": 163,
              "startColumn": 16,
              "endLine": 163,
              "endColumn": 41,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/repositories/DefaultMavenArtifactRepository.java",
              "type": "String",
              "code": "\n    @Override\n    public String getDisplayName() {\n        return describer.transform(this);\n    }\n\n    @Override"
            },
            {
              "step": 6,
              "variableName": "describable.getDisplayName()",
              "startLine": 313,
              "startColumn": 35,
              "endLine": 313,
              "endColumn": 63,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "String",
              "code": "        public String getDisplayName() {\n            synchronized (this) {\n                if (displayName == null) {\n                    displayName = describable.getDisplayName();\n                    if (capDisplayName != null || !(describable instanceof DisplayName)) {\n                        describable = null;\n                    }"
            },
            {
              "step": 7,
              "variableName": "displayName",
              "startLine": 318,
              "startColumn": 24,
              "endLine": 318,
              "endColumn": 35,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "String",
              "code": "                        describable = null;\n                    }\n                }\n                return displayName;\n            }\n        }\n    }"
            },
            {
              "step": 8,
              "variableName": "displayName.getDisplayName()",
              "startLine": 772,
              "startColumn": 73,
              "endLine": 772,
              "endColumn": 101,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/configurations/DefaultConfiguration.java",
              "type": "String",
              "code": "                try {\n                    results = resolver.resolveGraph(DefaultConfiguration.this);\n                } catch (Exception e) {\n                    throw exceptionMapper.mapFailure(e, \"dependencies\", displayName.getDisplayName());\n                }\n\n                // Make the new state visible in case a dependency resolution listener queries the result, which requires the new state"
            },
            {
              "step": 9,
              "variableName": "String contextDisplayName",
              "startLine": 68,
              "startColumn": 77,
              "endLine": 68,
              "endColumn": 102,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "String",
              "code": "        return mapFailure(failure, type, displayName);\n    }\n\n    public TypedResolveException mapFailure(Throwable failure, String type, String contextDisplayName) {\n        if (!(failure instanceof TypedResolveException)) {\n            return new TypedResolveException(\n                type,"
            },
            {
              "step": 10,
              "variableName": "contextDisplayName",
              "startLine": 72,
              "startColumn": 17,
              "endLine": 72,
              "endColumn": 35,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "String",
              "code": "        if (!(failure instanceof TypedResolveException)) {\n            return new TypedResolveException(\n                type,\n                contextDisplayName,\n                ImmutableList.of(mapRepositoryOverrideFailure(contextDisplayName, failure))\n            );\n        }"
            },
            {
              "step": 11,
              "variableName": "new TypedResolveException(...) : TypedResolveException",
              "startLine": 70,
              "startColumn": 20,
              "endLine": 74,
              "endColumn": 14,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "TypedResolveException",
              "code": "\n    public TypedResolveException mapFailure(Throwable failure, String type, String contextDisplayName) {\n        if (!(failure instanceof TypedResolveException)) {\n            return new TypedResolveException(\n                type,\n                contextDisplayName,\n                ImmutableList.of(mapRepositoryOverrideFailure(contextDisplayName, failure))"
            },
            {
              "step": 12,
              "variableName": "exceptionMapper.mapFailure(e, \"dependencies\", displayName.getDisplayName())",
              "startLine": 772,
              "startColumn": 27,
              "endLine": 772,
              "endColumn": 102,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/configurations/DefaultConfiguration.java",
              "type": "TypedResolveException",
              "code": "                try {\n                    results = resolver.resolveGraph(DefaultConfiguration.this);\n                } catch (Exception e) {\n                    throw exceptionMapper.mapFailure(e, \"dependencies\", displayName.getDisplayName());\n                }\n\n                // Make the new state visible in case a dependency resolution listener queries the result, which requires the new state"
            },
            {
              "step": 13,
              "variableName": "e",
              "startLine": 772,
              "startColumn": 54,
              "endLine": 772,
              "endColumn": 55,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/configurations/DefaultConfiguration.java",
              "type": "Exception",
              "code": "                try {\n                    results = resolver.resolveGraph(DefaultConfiguration.this);\n                } catch (Exception e) {\n                    throw exceptionMapper.mapFailure(e, \"dependencies\", displayName.getDisplayName());\n                }\n\n                // Make the new state visible in case a dependency resolution listener queries the result, which requires the new state"
            },
            {
              "step": 14,
              "variableName": "Throwable failure",
              "startLine": 68,
              "startColumn": 45,
              "endLine": 68,
              "endColumn": 62,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Throwable",
              "code": "        return mapFailure(failure, type, displayName);\n    }\n\n    public TypedResolveException mapFailure(Throwable failure, String type, String contextDisplayName) {\n        if (!(failure instanceof TypedResolveException)) {\n            return new TypedResolveException(\n                type,"
            },
            {
              "step": 15,
              "variableName": "failure",
              "startLine": 73,
              "startColumn": 83,
              "endLine": 73,
              "endColumn": 90,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Throwable",
              "code": "            return new TypedResolveException(\n                type,\n                contextDisplayName,\n                ImmutableList.of(mapRepositoryOverrideFailure(contextDisplayName, failure))\n            );\n        }\n"
            },
            {
              "step": 16,
              "variableName": "Throwable failure",
              "startLine": 94,
              "startColumn": 78,
              "endLine": 94,
              "endColumn": 95,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Throwable",
              "code": "\n    // TODO: We should handle this exception at the source instead of using instanceof to detect it after it is thrown.\n    //       We should try to avoid catching and analyzing runtime exceptions\n    public Throwable mapRepositoryOverrideFailure(String contextDisplayName, Throwable failure) {\n        if (!(failure instanceof ModuleVersionNotFoundException) || !settingsRepositoriesIgnored()) {\n            return failure;\n        }"
            },
            {
              "step": 17,
              "variableName": "failure",
              "startLine": 108,
              "startColumn": 35,
              "endLine": 108,
              "endColumn": 42,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Throwable",
              "code": "        return new TypedResolveException(\n            \"dependencies\",\n            contextDisplayName,\n            Collections.singleton(failure),\n            resolutions\n        );\n    }"
            },
            {
              "step": 18,
              "variableName": "Collections.singleton(failure)",
              "startLine": 108,
              "startColumn": 13,
              "endLine": 108,
              "endColumn": 43,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Set [<element>] : Throwable",
              "code": "        return new TypedResolveException(\n            \"dependencies\",\n            contextDisplayName,\n            Collections.singleton(failure),\n            resolutions\n        );\n    }"
            },
            {
              "step": 19,
              "variableName": "Collections.singleton(failure)",
              "startLine": 108,
              "startColumn": 13,
              "endLine": 108,
              "endColumn": 43,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Set",
              "code": "        return new TypedResolveException(\n            \"dependencies\",\n            contextDisplayName,\n            Collections.singleton(failure),\n            resolutions\n        );\n    }"
            },
            {
              "step": 20,
              "variableName": "Iterable<? extends Throwable> failures",
              "startLine": 42,
              "startColumn": 67,
              "endLine": 42,
              "endColumn": 105,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ivyservice/TypedResolveException.java",
              "type": "Set",
              "code": "    /**\n     * Creates a new instance with resolutions.\n     */\n    public TypedResolveException(String type, String displayName, Iterable<? extends Throwable> failures, List<String> resolutions) {\n        super(buildMessage(type, displayName), failures, false);\n        this.type = type;\n        this.resolutions = ImmutableList.copyOf(resolutions);"
            },
            {
              "step": 21,
              "variableName": "failures",
              "startLine": 43,
              "startColumn": 48,
              "endLine": 43,
              "endColumn": 56,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ivyservice/TypedResolveException.java",
              "type": "Set",
              "code": "     * Creates a new instance with resolutions.\n     */\n    public TypedResolveException(String type, String displayName, Iterable<? extends Throwable> failures, List<String> resolutions) {\n        super(buildMessage(type, displayName), failures, false);\n        this.type = type;\n        this.resolutions = ImmutableList.copyOf(resolutions);\n    }"
            },
            {
              "step": 22,
              "variableName": "Iterable<? extends Throwable> causes",
              "startLine": 77,
              "startColumn": 48,
              "endLine": 77,
              "endColumn": 84,
              "uri": "gradle-8.14.0/subprojects/core-api/src/main/java/org/gradle/api/artifacts/ResolveException.java",
              "type": "Set",
              "code": "     * @since 8.9\n     */\n    @Incubating\n    protected ResolveException(String message, Iterable<? extends Throwable> causes, @SuppressWarnings(\"unused\") boolean dummy) {\n        super(message, causes);\n    }\n}"
            },
            {
              "step": 23,
              "variableName": "causes",
              "startLine": 78,
              "startColumn": 24,
              "endLine": 78,
              "endColumn": 30,
              "uri": "gradle-8.14.0/subprojects/core-api/src/main/java/org/gradle/api/artifacts/ResolveException.java",
              "type": "Set",
              "code": "     */\n    @Incubating\n    protected ResolveException(String message, Iterable<? extends Throwable> causes, @SuppressWarnings(\"unused\") boolean dummy) {\n        super(message, causes);\n    }\n}\n"
            },
            {
              "step": 24,
              "variableName": "Iterable<? extends Throwable> causes",
              "startLine": 47,
              "startColumn": 55,
              "endLine": 47,
              "endColumn": 91,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "Set",
              "code": "        this.causes.addAll(Arrays.asList(causes));\n    }\n\n    public DefaultMultiCauseException(String message, Iterable<? extends Throwable> causes) {\n        super(message);\n        this.message = message;\n        initCauses(causes);"
            },
            {
              "step": 25,
              "variableName": "causes",
              "startLine": 50,
              "startColumn": 20,
              "endLine": 50,
              "endColumn": 26,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "Set",
              "code": "    public DefaultMultiCauseException(String message, Iterable<? extends Throwable> causes) {\n        super(message);\n        this.message = message;\n        initCauses(causes);\n    }\n\n    public DefaultMultiCauseException(Factory<String> messageFactory) {"
            },
            {
              "step": 26,
              "variableName": "Iterable<? extends Throwable> causes",
              "startLine": 112,
              "startColumn": 28,
              "endLine": 112,
              "endColumn": 64,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "Iterable",
              "code": "        return null;\n    }\n\n    public void initCauses(Iterable<? extends Throwable> causes) {\n        this.causes.clear();\n        for (Throwable cause : causes) {\n            this.causes.add(cause);"
            },
            {
              "step": 27,
              "variableName": "cause",
              "startLine": 115,
              "startColumn": 29,
              "endLine": 115,
              "endColumn": 34,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "Throwable",
              "code": "    public void initCauses(Iterable<? extends Throwable> causes) {\n        this.causes.clear();\n        for (Throwable cause : causes) {\n            this.causes.add(cause);\n        }\n    }\n"
            },
            {
              "step": 28,
              "variableName": "this.causes",
              "startLine": 115,
              "startColumn": 13,
              "endLine": 115,
              "endColumn": 24,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "CopyOnWriteArrayList [<element>] : Throwable",
              "code": "    public void initCauses(Iterable<? extends Throwable> causes) {\n        this.causes.clear();\n        for (Throwable cause : causes) {\n            this.causes.add(cause);\n        }\n    }\n"
            },
            {
              "step": 29,
              "variableName": "this",
              "startLine": 115,
              "startColumn": 13,
              "endLine": 115,
              "endColumn": 17,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "DefaultMultiCauseException [causes, <element>] : Throwable",
              "code": "    public void initCauses(Iterable<? extends Throwable> causes) {\n        this.causes.clear();\n        for (Throwable cause : causes) {\n            this.causes.add(cause);\n        }\n    }\n"
            },
            {
              "step": 30,
              "variableName": "projectConfigurationException",
              "startLine": 57,
              "startColumn": 17,
              "endLine": 57,
              "endColumn": 46,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/DefaultExceptionAnalyser.java",
              "type": "ProjectConfigurationException [causes, <element>] : Throwable",
              "code": "                }\n            }\n            if (!additionalFailures.isEmpty()) {\n                projectConfigurationException.initCauses(additionalFailures);\n                failures.add(transform(projectConfigurationException));\n            }\n        } else if (exception instanceof ServiceCreationException) {"
            },
            {
              "step": 31,
              "variableName": "projectConfigurationException",
              "startLine": 58,
              "startColumn": 40,
              "endLine": 58,
              "endColumn": 69,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/DefaultExceptionAnalyser.java",
              "type": "ProjectConfigurationException [causes, <element>] : Throwable",
              "code": "            }\n            if (!additionalFailures.isEmpty()) {\n                projectConfigurationException.initCauses(additionalFailures);\n                failures.add(transform(projectConfigurationException));\n            }\n        } else if (exception instanceof ServiceCreationException) {\n            failures.add(transform(new InitializationException(exception)));"
            },
            {
              "step": 32,
              "variableName": "transform(projectConfigurationException)",
              "startLine": 58,
              "startColumn": 30,
              "endLine": 58,
              "endColumn": 70,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/DefaultExceptionAnalyser.java",
              "type": "LocationAwareException",
              "code": "            }\n            if (!additionalFailures.isEmpty()) {\n                projectConfigurationException.initCauses(additionalFailures);\n                failures.add(transform(projectConfigurationException));\n            }\n        } else if (exception instanceof ServiceCreationException) {\n            failures.add(transform(new InitializationException(exception)));"
            },
            {
              "step": 33,
              "variableName": "failures",
              "startLine": 58,
              "startColumn": 17,
              "endLine": 58,
              "endColumn": 25,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/DefaultExceptionAnalyser.java",
              "type": "Collection [<element>] : LocationAwareException",
              "code": "            }\n            if (!additionalFailures.isEmpty()) {\n                projectConfigurationException.initCauses(additionalFailures);\n                failures.add(transform(projectConfigurationException));\n            }\n        } else if (exception instanceof ServiceCreationException) {\n            failures.add(transform(new InitializationException(exception)));"
            },
            {
              "step": 34,
              "variableName": "result",
              "startLine": 53,
              "startColumn": 54,
              "endLine": 53,
              "endColumn": 60,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/MultipleBuildFailuresExceptionAnalyser.java",
              "type": "ArrayList [<element>] : LocationAwareException",
              "code": "        for (Throwable failure : failures) {\n            if (failure instanceof MultipleBuildFailures) {\n                for (Throwable cause : ((MultipleBuildFailures) failure).getCauses()) {\n                    collector.collectFailures(cause, result);\n                }\n            } else {\n                collector.collectFailures(failure, result);"
            },
            {
              "step": 35,
              "variableName": "result",
              "startLine": 60,
              "startColumn": 39,
              "endLine": 60,
              "endColumn": 45,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/MultipleBuildFailuresExceptionAnalyser.java",
              "type": "ArrayList [<element>] : LocationAwareException",
              "code": "            }\n        }\n        if (result.size() == 1 && result.get(0) instanceof RuntimeException) {\n            return (RuntimeException) result.get(0);\n        } else {\n            return new MultipleBuildFailures(result);\n        }"
            },
            {
              "step": 36,
              "variableName": "result.get(0)",
              "startLine": 60,
              "startColumn": 39,
              "endLine": 60,
              "endColumn": 52,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/MultipleBuildFailuresExceptionAnalyser.java",
              "type": "LocationAwareException",
              "code": "            }\n        }\n        if (result.size() == 1 && result.get(0) instanceof RuntimeException) {\n            return (RuntimeException) result.get(0);\n        } else {\n            return new MultipleBuildFailures(result);\n        }"
            },
            {
              "step": 37,
              "variableName": "(RuntimeException) result.get(0)",
              "startLine": 60,
              "startColumn": 20,
              "endLine": 60,
              "endColumn": 52,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/MultipleBuildFailuresExceptionAnalyser.java",
              "type": "LocationAwareException",
              "code": "            }\n        }\n        if (result.size() == 1 && result.get(0) instanceof RuntimeException) {\n            return (RuntimeException) result.get(0);\n        } else {\n            return new MultipleBuildFailures(result);\n        }"
            },
            {
              "step": 38,
              "variableName": "exceptionAnalyser.transform(finishFailures)",
              "startLine": 72,
              "startColumn": 16,
              "endLine": 72,
              "endColumn": 59,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/internal/buildtree/DefaultBuildTreeFinishExecutor.java",
              "type": "LocationAwareException",
              "code": "            finishFailures.addAll(result.getFailures());\n        });\n\n        return exceptionAnalyser.transform(finishFailures);\n    }\n}\n"
            },
            {
              "step": 39,
              "variableName": "delegate.finishBuildTree(failures)",
              "startLine": 46,
              "startColumn": 28,
              "endLine": 46,
              "endColumn": 62,
              "uri": "gradle-8.14.0/subprojects/composite-builds/src/main/java/org/gradle/composite/internal/OperationFiringBuildTreeFinishExecutor.java",
              "type": "LocationAwareException",
              "code": "            @Override\n            public RuntimeException call(BuildOperationContext context) {\n                try {\n                    return delegate.finishBuildTree(failures);\n                } finally {\n                    context.setResult(RESULT);\n                }"
            },
            {
              "step": 40,
              "variableName": "buildOperation.call(context)",
              "startLine": 239,
              "startColumn": 21,
              "endLine": 239,
              "endColumn": 49,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/testFixtures/java/org/gradle/internal/operations/TestBuildOperationRunner.java",
              "type": "LocationAwareException",
              "code": "            TestBuildOperationContext context = new TestBuildOperationContext(record);\n            T t;\n            try {\n                t = buildOperation.call(context);\n            } catch (Throwable failure) {\n                if (record.failure == null) {\n                    record.failure = failure;"
            },
            {
              "step": 41,
              "variableName": "t",
              "startLine": 246,
              "startColumn": 20,
              "endLine": 246,
              "endColumn": 21,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/testFixtures/java/org/gradle/internal/operations/TestBuildOperationRunner.java",
              "type": "LocationAwareException",
              "code": "                }\n                throw throwAsUncheckedException(failure);\n            }\n            return t;\n        }\n\n        private <O extends BuildOperation> void execute(O buildOperation, BuildOperationWorker<O> worker) {"
            },
            {
              "step": 42,
              "variableName": "log.call(buildOperation)",
              "startLine": 51,
              "startColumn": 16,
              "endLine": 51,
              "endColumn": 40,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/testFixtures/java/org/gradle/internal/operations/TestBuildOperationRunner.java",
              "type": "LocationAwareException",
              "code": "\n    @Override\n    public <T> T call(CallableBuildOperation<T> buildOperation) {\n        return log.call(buildOperation);\n    }\n\n    @Override"
            },
            {
              "step": 43,
              "variableName": "ca",
              "startLine": 115,
              "startColumn": 5,
              "endLine": 121,
              "endColumn": 7,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/configurationcache/ConfigurationCacheBuildOperations.kt",
              "type": "LocationAwareException",
              "code": "\ninternal\nfun <T : Any> BuildOperationRunner.withModelLoadOperation(block: () -> T): T =\n    call(object : CallableBuildOperation<T> {\n        override fun description(): BuildOperationDescriptor.Builder = BuildOperationDescriptor\n            .displayName(\"Load model from configuration cache\")\n            .progressDisplayName(\"Loading model from configuration cache\")"
            },
            {
              "step": 44,
              "variableName": "ca",
              "startLine": 115,
              "startColumn": 5,
              "endLine": 121,
              "endColumn": 7,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/configurationcache/ConfigurationCacheBuildOperations.kt",
              "type": "LocationAwareException",
              "code": "\ninternal\nfun <T : Any> BuildOperationRunner.withModelLoadOperation(block: () -> T): T =\n    call(object : CallableBuildOperation<T> {\n        override fun description(): BuildOperationDescriptor.Builder = BuildOperationDescriptor\n            .displayName(\"Load model from configuration cache\")\n            .progressDisplayName(\"Loading model from configuration cache\")"
            },
            {
              "step": 45,
              "variableName": "b",
              "startLine": 635,
              "startColumn": 9,
              "endLine": 641,
              "endColumn": 10,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "        // No need to record the `ClassLoaderScope` tree when loading\n        scopeRegistryListener.dispose()\n\n        buildOperationRunner.withModelLoadOperation {\n            val storeLoadResult = entryStore.useForStateLoad(StateType.Model) { stateFile: ConfigurationCacheStateFile ->\n                cacheIO.readModelFrom(stateFile)\n            }"
            },
            {
              "step": 46,
              "variableName": "block()",
              "startLine": 668,
              "startColumn": 22,
              "endLine": 668,
              "endColumn": 29,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "    private\n    inline fun <T> runAtConfigurationTime(block: () -> T): T {\n        prepareConfigurationTimeBarrier()\n        val result = block()\n        crossConfigurationTimeBarrier()\n        return result\n    }"
            },
            {
              "step": 47,
              "variableName": "result",
              "startLine": 670,
              "startColumn": 16,
              "endLine": 670,
              "endColumn": 22,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "        prepareConfigurationTimeBarrier()\n        val result = block()\n        crossConfigurationTimeBarrier()\n        return result\n    }\n\n    private"
            },
            {
              "step": 48,
              "variableName": "runAtConfigurationTime(...) : LocationAwareException",
              "startLine": 631,
              "startColumn": 28,
              "endLine": 642,
              "endColumn": 6,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "    data class LoadResultMetadata(val originInvocationId: String? = null)\n\n    private\n    fun loadModel(): Any = runAtConfigurationTime {\n        // No need to record the `ClassLoaderScope` tree when loading\n        scopeRegistryListener.dispose()\n"
            },
            {
              "step": 49,
              "variableName": "loadModel()",
              "startLine": 268,
              "startColumn": 20,
              "endLine": 268,
              "endColumn": 31,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "    override fun <T : Any> loadOrCreateModel(creator: () -> T): T {\n        if (isLoaded) {\n            runLoadedSideEffects()\n            return loadModel().uncheckedCast()\n        }\n\n        return runWorkThatContributesToCacheEntry {"
            },
            {
              "step": 50,
              "variableName": "Any",
              "startLine": 22,
              "startColumn": 15,
              "endLine": 22,
              "endColumn": 18,
              "uri": "gradle-8.14.0/platforms/core-configuration/stdlib-kotlin-extensions/src/main/kotlin/org/gradle/internal/extensions/stdlib/CastExtensions.kt",
              "type": "Object",
              "code": "import org.gradle.internal.Cast\n\n\nfun <T : Any> Any.uncheckedCast(): T =\n    Cast.uncheckedNonnullCast(this)\n"
            },
            {
              "step": 51,
              "variableName": "this",
              "startLine": 23,
              "startColumn": 31,
              "endLine": 23,
              "endColumn": 35,
              "uri": "gradle-8.14.0/platforms/core-configuration/stdlib-kotlin-extensions/src/main/kotlin/org/gradle/internal/extensions/stdlib/CastExtensions.kt",
              "type": "Object",
              "code": "\n\nfun <T : Any> Any.uncheckedCast(): T =\n    Cast.uncheckedNonnullCast(this)\n"
            },
            {
              "step": 52,
              "variableName": "Object object",
              "startLine": 76,
              "startColumn": 46,
              "endLine": 76,
              "endColumn": 59,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/Cast.java",
              "type": "Object",
              "code": "    }\n\n    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})\n    public static <T> T uncheckedNonnullCast(Object object) {\n        return (T) object;\n    }\n}"
            },
            {
              "step": 53,
              "variableName": "(T) object",
              "startLine": 77,
              "startColumn": 16,
              "endLine": 77,
              "endColumn": 26,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/Cast.java",
              "type": "Object",
              "code": "\n    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})\n    public static <T> T uncheckedNonnullCast(Object object) {\n        return (T) object;\n    }\n}\n"
            },
            {
              "step": 54,
              "variableName": "Cast.uncheckedNonnullCast(collectionType)",
              "startLine": 223,
              "startColumn": 16,
              "endLine": 223,
              "endColumn": 57,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/api/internal/provider/AbstractCollectionProperty.java",
              "type": "Class",
              "code": "    @Override\n    @Nonnull\n    public Class<C> getType() {\n        return Cast.uncheckedNonnullCast(collectionType);\n    }\n\n    @Override"
            },
            {
              "step": 55,
              "variableName": "provider.getType()",
              "startLine": 41,
              "startColumn": 35,
              "endLine": 41,
              "endColumn": 53,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/api/internal/provider/OrElseFixedValueProvider.java",
              "type": "Class",
              "code": "    @Nullable\n    @Override\n    public Class<T> getType() {\n        return Cast.uncheckedCast(provider.getType());\n    }\n\n    @Override"
            },
            {
              "step": 56,
              "variableName": "@Nullable Object object",
              "startLine": 71,
              "startColumn": 39,
              "endLine": 71,
              "endColumn": 62,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/Cast.java",
              "type": "Object",
              "code": "\n    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})\n    @Nullable\n    public static <T> T uncheckedCast(@Nullable Object object) {\n        return (T) object;\n    }\n"
            },
            {
              "step": 57,
              "variableName": "(T) object",
              "startLine": 72,
              "startColumn": 16,
              "endLine": 72,
              "endColumn": 26,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/Cast.java",
              "type": "Object",
              "code": "    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})\n    @Nullable\n    public static <T> T uncheckedCast(@Nullable Object object) {\n        return (T) object;\n    }\n\n    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})"
            },
            {
              "step": 58,
              "variableName": "Cast.uncheckedCast(sanitizer.sanitize(t))",
              "startLine": 41,
              "startColumn": 15,
              "endLine": 41,
              "endColumn": 56,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/api/internal/provider/TypeSanitizingTransformer.java",
              "type": "Object",
              "code": "\n    @Override\n    public T transform(T t) {\n        T v = Cast.uncheckedCast(sanitizer.sanitize(t));\n        if (targetType.isInstance(v)) {\n            return v;\n        }"
            },
            {
              "step": 59,
              "variableName": "v",
              "startLine": 43,
              "startColumn": 20,
              "endLine": 43,
              "endColumn": 21,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/api/internal/provider/TypeSanitizingTransformer.java",
              "type": "Object",
              "code": "    public T transform(T t) {\n        T v = Cast.uncheckedCast(sanitizer.sanitize(t));\n        if (targetType.isInstance(v)) {\n            return v;\n        }\n        throw new IllegalArgumentException(String.format(\"Cannot get the value of %s of type %s as the provider associated with this property returned a value of type %s.\", owner.getDisplayName(), targetType.getName(), v.getClass().getName()));\n    }"
            },
            {
              "step": 60,
              "variableName": "definition.transform(registration(path))",
              "startLine": 361,
              "startColumn": 22,
              "endLine": 361,
              "endColumn": 62,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/testFixtures/groovy/org/gradle/model/internal/fixture/ModelRegistryHelperExtension.java",
              "type": "ModelRegistration",
              "code": "    }\n\n    public static void addLink(MutableModelNode node, ModelPath path, Transformer<ModelRegistration, ModelRegistrations.Builder> definition) {\n        node.addLink(definition.transform(registration(path)));\n    }\n\n    public static void addReference(MutableModelNode node, String name, Class<?> type, MutableModelNode target) {"
            },
            {
              "step": 61,
              "variableName": "ModelRegistration registration",
              "startLine": 216,
              "startColumn": 25,
              "endLine": 216,
              "endColumn": 55,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/registry/ModelElementNode.java",
              "type": "ModelRegistration",
              "code": "    }\n\n    @Override\n    public void addLink(ModelRegistration registration) {\n        addNode(new ModelElementNode(modelRegistry, registration, this), registration);\n    }\n"
            },
            {
              "step": 62,
              "variableName": "registration",
              "startLine": 217,
              "startColumn": 74,
              "endLine": 217,
              "endColumn": 86,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/registry/ModelElementNode.java",
              "type": "ModelRegistration",
              "code": "\n    @Override\n    public void addLink(ModelRegistration registration) {\n        addNode(new ModelElementNode(modelRegistry, registration, this), registration);\n    }\n\n    private void addNode(ModelNodeInternal child, ModelRegistration registration) {"
            },
            {
              "step": 63,
              "variableName": "ModelNodeInternal child",
              "startLine": 220,
              "startColumn": 26,
              "endLine": 220,
              "endColumn": 49,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/registry/ModelElementNode.java",
              "type": "ModelNodeInternal",
              "code": "        addNode(new ModelElementNode(modelRegistry, registration, this), registration);\n    }\n\n    private void addNode(ModelNodeInternal child, ModelRegistration registration) {\n        ModelPath childPath = child.getPath();\n        if (!getPath().isDirectChild(childPath)) {\n            throw new IllegalArgumentException(String.format(\"Element registration has a path (%s) which is not a child of this node (%s).\", childPath, getPath()));"
            },
            {
              "step": 64,
              "variableName": "child",
              "startLine": 261,
              "startColumn": 36,
              "endLine": 261,
              "endColumn": 41,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/registry/ModelElementNode.java",
              "type": "ModelNodeInternal",
              "code": "            links = new TreeMap<>();\n        }\n        links.put(child.getPath().getName(), child);\n        modelRegistry.registerNode(child, registration.getActions());\n    }\n\n    @Override"
            },
            {
              "step": 65,
              "variableName": "ModelNodeInternal node",
              "startLine": 120,
              "startColumn": 30,
              "endLine": 120,
              "endColumn": 52,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/registry/DefaultModelRegistry.java",
              "type": "ModelNodeInternal",
              "code": "    }\n\n    @Override\n    public void registerNode(ModelNodeInternal node, Multimap<ModelActionRole, ? extends ModelAction> actions) {\n        // Disabled before 2.3 release due to not wanting to validate task names (which may contain invalid chars), at least not yet\n        // ModelPath.validateName(name);\n        LOGGER.debug(\"Project {} - Registering model element '{}' (hidden = {})\", projectPath, node.getPath(), node.isHidden());"
            },
            {
              "step": 66,
              "variableName": "node",
              "startLine": 124,
              "startColumn": 25,
              "endLine": 124,
              "endColumn": 29,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/registry/DefaultModelRegistry.java",
              "type": "ModelNodeInternal",
              "code": "        // Disabled before 2.3 release due to not wanting to validate task names (which may contain invalid chars), at least not yet\n        // ModelPath.validateName(name);\n        LOGGER.debug(\"Project {} - Registering model element '{}' (hidden = {})\", projectPath, node.getPath(), node.isHidden());\n        addRuleBindings(node, actions);\n        modelGraph.add(node);\n        ruleBindings.nodeCreated(node);\n    }"
            },
            {
              "step": 67,
              "variableName": "node",
              "startLine": 125,
              "startColumn": 24,
              "endLine": 125,
              "endColumn": 28,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/registry/DefaultModelRegistry.java",
              "type": "ModelNodeInternal",
              "code": "        // ModelPath.validateName(name);\n        LOGGER.debug(\"Project {} - Registering model element '{}' (hidden = {})\", projectPath, node.getPath(), node.isHidden());\n        addRuleBindings(node, actions);\n        modelGraph.add(node);\n        ruleBindings.nodeCreated(node);\n    }\n"
            },
            {
              "step": 68,
              "variableName": "node",
              "startLine": 126,
              "startColumn": 34,
              "endLine": 126,
              "endColumn": 38,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/registry/DefaultModelRegistry.java",
              "type": "ModelNodeInternal",
              "code": "        LOGGER.debug(\"Project {} - Registering model element '{}' (hidden = {})\", projectPath, node.getPath(), node.isHidden());\n        addRuleBindings(node, actions);\n        modelGraph.add(node);\n        ruleBindings.nodeCreated(node);\n    }\n\n    private void addRuleBindings(ModelNodeInternal node, Multimap<ModelActionRole, ? extends ModelAction> actions) {"
            },
            {
              "step": 69,
              "variableName": "ModelNodeInternal node",
              "startLine": 44,
              "startColumn": 29,
              "endLine": 44,
              "endColumn": 51,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/registry/RuleBindings.java",
              "type": "ModelNodeInternal",
              "code": "        rulesByInput = new NodeAtStateIndex(\"rulesByInput\");\n    }\n\n    public void nodeCreated(ModelNodeInternal node) {\n        untypedPathReferences.addNode(node);\n    }\n"
            },
            {
              "step": 70,
              "variableName": "node",
              "startLine": 45,
              "startColumn": 39,
              "endLine": 45,
              "endColumn": 43,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/registry/RuleBindings.java",
              "type": "ModelNodeInternal",
              "code": "    }\n\n    public void nodeCreated(ModelNodeInternal node) {\n        untypedPathReferences.addNode(node);\n    }\n\n    public void nodeDiscovered(ModelNodeInternal node) {"
            },
            {
              "step": 71,
              "variableName": "ModelNodeInternal node",
              "startLine": 159,
              "startColumn": 29,
              "endLine": 159,
              "endColumn": 51,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/registry/RuleBindings.java",
              "type": "ModelNodeInternal",
              "code": "    private class PathPredicateIndex {\n        final Map<ModelPath, PredicateMatches> predicates = new LinkedHashMap<>();\n\n        public void addNode(ModelNodeInternal node) {\n            predicatesForPath(node.getPath()).match(node);\n        }\n"
            },
            {
              "step": 72,
              "variableName": "node",
              "startLine": 160,
              "startColumn": 53,
              "endLine": 160,
              "endColumn": 57,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/registry/RuleBindings.java",
              "type": "ModelNodeInternal",
              "code": "        final Map<ModelPath, PredicateMatches> predicates = new LinkedHashMap<>();\n\n        public void addNode(ModelNodeInternal node) {\n            predicatesForPath(node.getPath()).match(node);\n        }\n\n        public void addReference(Reference reference) {"
            },
            {
              "step": 73,
              "variableName": "ModelNodeInternal node",
              "startLine": 137,
              "startColumn": 20,
              "endLine": 137,
              "endColumn": 42,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/registry/RuleBindings.java",
              "type": "ModelNodeInternal",
              "code": "        final List<Reference> references = new ArrayList<Reference>();\n        ModelNodeInternal match;\n\n        void match(ModelNodeInternal node) {\n            for (Reference reference : references) {\n                bound(reference, node);\n            }"
            },
            {
              "step": 74,
              "variableName": "node",
              "startLine": 139,
              "startColumn": 34,
              "endLine": 139,
              "endColumn": 38,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/registry/RuleBindings.java",
              "type": "ModelNodeInternal",
              "code": "\n        void match(ModelNodeInternal node) {\n            for (Reference reference : references) {\n                bound(reference, node);\n            }\n            match = node;\n        }"
            },
            {
              "step": 75,
              "variableName": "ModelNodeInternal node",
              "startLine": 54,
              "startColumn": 45,
              "endLine": 54,
              "endColumn": 67,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/registry/RuleBindings.java",
              "type": "ModelNodeInternal",
              "code": "        scopeReferences.addNodeToScope(node.getPath().getParent(), node);\n    }\n\n    private void bound(Reference reference, ModelNodeInternal node) {\n        ModelBinding binding = reference.binding;\n        binding.onBind(node);\n        reference.index.put(new NodeAtState(node.getPath(), binding.predicate.getState()), reference.owner);"
            },
            {
              "step": 76,
              "variableName": "node",
              "startLine": 56,
              "startColumn": 24,
              "endLine": 56,
              "endColumn": 28,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/registry/RuleBindings.java",
              "type": "ModelNodeInternal",
              "code": "\n    private void bound(Reference reference, ModelNodeInternal node) {\n        ModelBinding binding = reference.binding;\n        binding.onBind(node);\n        reference.index.put(new NodeAtState(node.getPath(), binding.predicate.getState()), reference.owner);\n    }\n"
            },
            {
              "step": 77,
              "variableName": "ModelNodeInternal node",
              "startLine": 70,
              "startColumn": 30,
              "endLine": 70,
              "endColumn": 52,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/registry/ModelBinding.java",
              "type": "ModelNodeInternal",
              "code": "\n    public abstract boolean canBindInState(ModelNode.State state);\n\n    public final void onBind(ModelNodeInternal node) {\n        if (boundTo != null) {\n            ModelRuleDescriptor creatorDescriptor = node.getDescriptor();\n            ModelPath path = node.getPath();"
            },
            {
              "step": 78,
              "variableName": "node",
              "startLine": 79,
              "startColumn": 18,
              "endLine": 79,
              "endColumn": 22,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/registry/ModelBinding.java",
              "type": "ModelNodeInternal",
              "code": "            ));\n        }\n\n        doOnBind(node);\n    }\n\n    protected void doOnBind(ModelNodeInternal node) {"
            },
            {
              "step": 79,
              "variableName": "ModelNodeInternal node",
              "startLine": 40,
              "startColumn": 26,
              "endLine": 40,
              "endColumn": 48,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/registry/PathBinderCreationListener.java",
              "type": "ModelNodeInternal",
              "code": "    }\n\n    @Override\n    public void doOnBind(ModelNodeInternal node) {\n        if (predicate.matches(node)) {\n            boundTo = node;\n            bindAction.execute(this);"
            },
            {
              "step": 80,
              "variableName": "node",
              "startLine": 41,
              "startColumn": 31,
              "endLine": 41,
              "endColumn": 35,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/registry/PathBinderCreationListener.java",
              "type": "ModelNodeInternal",
              "code": "\n    @Override\n    public void doOnBind(ModelNodeInternal node) {\n        if (predicate.matches(node)) {\n            boundTo = node;\n            bindAction.execute(this);\n        } else {"
            },
            {
              "step": 81,
              "variableName": "node",
              "startLine": 46,
              "startColumn": 54,
              "endLine": 46,
              "endColumn": 58,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/registry/PathBinderCreationListener.java",
              "type": "ModelNodeInternal",
              "code": "            bindAction.execute(this);\n        } else {\n            throw new InvalidModelRuleException(referrer, new ModelRuleBindingException(\n                IncompatibleTypeReferenceReporter.of(node, predicate.getReference().getType(), predicate.getReference().getDescription(), writable).asString()\n            ));\n        }\n    }"
            },
            {
              "step": 82,
              "variableName": "String description",
              "startLine": 49,
              "startColumn": 98,
              "endLine": 49,
              "endColumn": 116,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/report/IncompatibleTypeReferenceReporter.java",
              "type": "String",
              "code": "        this.candidateTypes = candidateTypes;\n    }\n\n    public static IncompatibleTypeReferenceReporter of(MutableModelNode node, ModelType<?> type, String description, boolean writable) {\n        ModelPath path = node.getPath();\n        ModelRuleDescriptor creatorDescriptor = node.getDescriptor();\n        return new IncompatibleTypeReferenceReporter("
            },
            {
              "step": 83,
              "variableName": "description",
              "startLine": 53,
              "startColumn": 77,
              "endLine": 53,
              "endColumn": 88,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/report/IncompatibleTypeReferenceReporter.java",
              "type": "String",
              "code": "        ModelPath path = node.getPath();\n        ModelRuleDescriptor creatorDescriptor = node.getDescriptor();\n        return new IncompatibleTypeReferenceReporter(\n            creatorDescriptor.toString(), path.toString(), type.toString(), description, writable,\n            node.getTypeDescriptions()\n        );\n    }"
            },
            {
              "step": 84,
              "variableName": "String description",
              "startLine": 40,
              "startColumn": 88,
              "endLine": 40,
              "endColumn": 106,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/report/IncompatibleTypeReferenceReporter.java",
              "type": "String",
              "code": "    private final boolean writable;\n    private final Iterable<String> candidateTypes;\n\n    public IncompatibleTypeReferenceReporter(String creator, String path, String type, String description, boolean writable, Iterable<String> candidateTypes) {\n        this.creator = creator;\n        this.path = path;\n        this.type = type;"
            },
            {
              "step": 85,
              "variableName": "description",
              "startLine": 44,
              "startColumn": 28,
              "endLine": 44,
              "endColumn": 39,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/report/IncompatibleTypeReferenceReporter.java",
              "type": "String",
              "code": "        this.creator = creator;\n        this.path = path;\n        this.type = type;\n        this.description = description;\n        this.writable = writable;\n        this.candidateTypes = candidateTypes;\n    }"
            },
            {
              "step": 86,
              "variableName": "this",
              "startLine": 44,
              "startColumn": 9,
              "endLine": 44,
              "endColumn": 13,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/report/IncompatibleTypeReferenceReporter.java",
              "type": "IncompatibleTypeReferenceReporter [description] : String",
              "code": "        this.creator = creator;\n        this.path = path;\n        this.type = type;\n        this.description = description;\n        this.writable = writable;\n        this.candidateTypes = candidateTypes;\n    }"
            },
            {
              "step": 87,
              "variableName": "new IncompatibleTypeReferenceReporter(...) : IncompatibleTypeReferenceReporter [description] : String",
              "startLine": 52,
              "startColumn": 16,
              "endLine": 55,
              "endColumn": 10,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/report/IncompatibleTypeReferenceReporter.java",
              "type": "IncompatibleTypeReferenceReporter [description] : String",
              "code": "    public static IncompatibleTypeReferenceReporter of(MutableModelNode node, ModelType<?> type, String description, boolean writable) {\n        ModelPath path = node.getPath();\n        ModelRuleDescriptor creatorDescriptor = node.getDescriptor();\n        return new IncompatibleTypeReferenceReporter(\n            creatorDescriptor.toString(), path.toString(), type.toString(), description, writable,\n            node.getTypeDescriptions()\n        );"
            },
            {
              "step": 88,
              "variableName": "IncompatibleTypeReferenceReporter.of(node, elementType, action.getSubject().getDescription(), true)",
              "startLine": 522,
              "startColumn": 21,
              "endLine": 522,
              "endColumn": 120,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/core/NodeBackedModelMap.java",
              "type": "IncompatibleTypeReferenceReporter [description] : String",
              "code": "            node.ensureAtLeast(ModelNode.State.Discovered);\n            if (!node.canBeViewedAs(elementType)) {\n                throw new InvalidModelRuleException(action.getDescriptor(), new ModelRuleBindingException(\n                    IncompatibleTypeReferenceReporter.of(node, elementType, action.getSubject().getDescription(), true).asString()\n                ));\n            }\n            parent.validateCanBindAction(node, action);"
            },
            {
              "step": 89,
              "variableName": "asString",
              "startLine": 58,
              "startColumn": 19,
              "endLine": 58,
              "endColumn": 27,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/report/IncompatibleTypeReferenceReporter.java",
              "type": "IncompatibleTypeReferenceReporter [description] : String",
              "code": "        );\n    }\n\n    public String asString() {\n        StringWriter string = new StringWriter();\n        writeTo(new PrintWriter(string));\n        return string.toString();"
            },
            {
              "step": 90,
              "variableName": "writeTo(new PrintWriter(string))",
              "startLine": 60,
              "startColumn": 9,
              "endLine": 60,
              "endColumn": 41,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/report/IncompatibleTypeReferenceReporter.java",
              "type": "IncompatibleTypeReferenceReporter [description] : String",
              "code": "\n    public String asString() {\n        StringWriter string = new StringWriter();\n        writeTo(new PrintWriter(string));\n        return string.toString();\n    }\n"
            },
            {
              "step": 91,
              "variableName": "writeTo",
              "startLine": 64,
              "startColumn": 17,
              "endLine": 64,
              "endColumn": 24,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/report/IncompatibleTypeReferenceReporter.java",
              "type": "IncompatibleTypeReferenceReporter [description] : String",
              "code": "        return string.toString();\n    }\n\n    public void writeTo(PrintWriter writer) {\n        //\"type-only model reference of type '%s'%s is ambiguous as multiple model elements are available for this type:%n  %s (created by %s)%n  %s (created by %s)\",\n        writer.print(\"Model reference to element '\");\n        writer.print(path);"
            },
            {
              "step": 92,
              "variableName": "description",
              "startLine": 72,
              "startColumn": 26,
              "endLine": 72,
              "endColumn": 37,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/report/IncompatibleTypeReferenceReporter.java",
              "type": "IncompatibleTypeReferenceReporter [description] : String",
              "code": "        writer.print(type);\n        if (description != null) {\n            writer.print(\" (\");\n            writer.print(description);\n            writer.print(\")\");\n        }\n        writer.println(\" is invalid due to incompatible types.\");"
            },
            {
              "step": 93,
              "variableName": "description",
              "startLine": 72,
              "startColumn": 26,
              "endLine": 72,
              "endColumn": 37,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/report/IncompatibleTypeReferenceReporter.java",
              "type": "",
              "code": "        writer.print(type);\n        if (description != null) {\n            writer.print(\" (\");\n            writer.print(description);\n            writer.print(\")\");\n        }\n        writer.println(\" is invalid due to incompatible types.\");"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "source",
              "startLine": 40,
              "startColumn": 39,
              "endLine": 40,
              "endColumn": 45,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/RegExpNameMapper.java",
              "type": "String",
              "code": "    @Override\n    public String transform(String source) {\n        if (matcher == null) {\n            matcher = pattern.matcher(source);\n        } else {\n            matcher.reset(source);\n        }"
            },
            {
              "step": 1,
              "variableName": "result",
              "startLine": 48,
              "startColumn": 16,
              "endLine": 48,
              "endColumn": 22,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/RegExpNameMapper.java",
              "type": "String",
              "code": "        if (matcher.find()) {\n            result = matcher.replaceFirst(replacement);\n        }\n        return result;\n    }\n}\n"
            },
            {
              "step": 2,
              "variableName": "transformer.transform(value)",
              "startLine": 37,
              "startColumn": 31,
              "endLine": 37,
              "endColumn": 59,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/ChainingTransformer.java",
              "type": "String",
              "code": "    public T transform(T original) {\n        T value = original;\n        for (Transformer<T, T> transformer : transformers) {\n            value = type.cast(transformer.transform(value));\n        }\n        return value;\n    }"
            },
            {
              "step": 3,
              "variableName": "type.cast(transformer.transform(value))",
              "startLine": 37,
              "startColumn": 21,
              "endLine": 37,
              "endColumn": 60,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/ChainingTransformer.java",
              "type": "String",
              "code": "    public T transform(T original) {\n        T value = original;\n        for (Transformer<T, T> transformer : transformers) {\n            value = type.cast(transformer.transform(value));\n        }\n        return value;\n    }"
            },
            {
              "step": 4,
              "variableName": "value",
              "startLine": 39,
              "startColumn": 16,
              "endLine": 39,
              "endColumn": 21,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/ChainingTransformer.java",
              "type": "String",
              "code": "        for (Transformer<T, T> transformer : transformers) {\n            value = type.cast(transformer.transform(value));\n        }\n        return value;\n    }\n\n    public void add(Transformer<T, T> transformer) {"
            },
            {
              "step": 5,
              "variableName": "describer.transform(this)",
              "startLine": 163,
              "startColumn": 16,
              "endLine": 163,
              "endColumn": 41,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/repositories/DefaultMavenArtifactRepository.java",
              "type": "String",
              "code": "\n    @Override\n    public String getDisplayName() {\n        return describer.transform(this);\n    }\n\n    @Override"
            },
            {
              "step": 6,
              "variableName": "describable.getDisplayName()",
              "startLine": 313,
              "startColumn": 35,
              "endLine": 313,
              "endColumn": 63,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "String",
              "code": "        public String getDisplayName() {\n            synchronized (this) {\n                if (displayName == null) {\n                    displayName = describable.getDisplayName();\n                    if (capDisplayName != null || !(describable instanceof DisplayName)) {\n                        describable = null;\n                    }"
            },
            {
              "step": 7,
              "variableName": "displayName",
              "startLine": 318,
              "startColumn": 24,
              "endLine": 318,
              "endColumn": 35,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "String",
              "code": "                        describable = null;\n                    }\n                }\n                return displayName;\n            }\n        }\n    }"
            },
            {
              "step": 8,
              "variableName": "displayName.getDisplayName()",
              "startLine": 772,
              "startColumn": 73,
              "endLine": 772,
              "endColumn": 101,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/configurations/DefaultConfiguration.java",
              "type": "String",
              "code": "                try {\n                    results = resolver.resolveGraph(DefaultConfiguration.this);\n                } catch (Exception e) {\n                    throw exceptionMapper.mapFailure(e, \"dependencies\", displayName.getDisplayName());\n                }\n\n                // Make the new state visible in case a dependency resolution listener queries the result, which requires the new state"
            },
            {
              "step": 9,
              "variableName": "String contextDisplayName",
              "startLine": 68,
              "startColumn": 77,
              "endLine": 68,
              "endColumn": 102,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "String",
              "code": "        return mapFailure(failure, type, displayName);\n    }\n\n    public TypedResolveException mapFailure(Throwable failure, String type, String contextDisplayName) {\n        if (!(failure instanceof TypedResolveException)) {\n            return new TypedResolveException(\n                type,"
            },
            {
              "step": 10,
              "variableName": "contextDisplayName",
              "startLine": 72,
              "startColumn": 17,
              "endLine": 72,
              "endColumn": 35,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "String",
              "code": "        if (!(failure instanceof TypedResolveException)) {\n            return new TypedResolveException(\n                type,\n                contextDisplayName,\n                ImmutableList.of(mapRepositoryOverrideFailure(contextDisplayName, failure))\n            );\n        }"
            },
            {
              "step": 11,
              "variableName": "new TypedResolveException(...) : TypedResolveException",
              "startLine": 70,
              "startColumn": 20,
              "endLine": 74,
              "endColumn": 14,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "TypedResolveException",
              "code": "\n    public TypedResolveException mapFailure(Throwable failure, String type, String contextDisplayName) {\n        if (!(failure instanceof TypedResolveException)) {\n            return new TypedResolveException(\n                type,\n                contextDisplayName,\n                ImmutableList.of(mapRepositoryOverrideFailure(contextDisplayName, failure))"
            },
            {
              "step": 12,
              "variableName": "exceptionMapper.mapFailure(e, \"dependencies\", displayName.getDisplayName())",
              "startLine": 772,
              "startColumn": 27,
              "endLine": 772,
              "endColumn": 102,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/configurations/DefaultConfiguration.java",
              "type": "TypedResolveException",
              "code": "                try {\n                    results = resolver.resolveGraph(DefaultConfiguration.this);\n                } catch (Exception e) {\n                    throw exceptionMapper.mapFailure(e, \"dependencies\", displayName.getDisplayName());\n                }\n\n                // Make the new state visible in case a dependency resolution listener queries the result, which requires the new state"
            },
            {
              "step": 13,
              "variableName": "e",
              "startLine": 772,
              "startColumn": 54,
              "endLine": 772,
              "endColumn": 55,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/configurations/DefaultConfiguration.java",
              "type": "Exception",
              "code": "                try {\n                    results = resolver.resolveGraph(DefaultConfiguration.this);\n                } catch (Exception e) {\n                    throw exceptionMapper.mapFailure(e, \"dependencies\", displayName.getDisplayName());\n                }\n\n                // Make the new state visible in case a dependency resolution listener queries the result, which requires the new state"
            },
            {
              "step": 14,
              "variableName": "Throwable failure",
              "startLine": 68,
              "startColumn": 45,
              "endLine": 68,
              "endColumn": 62,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Throwable",
              "code": "        return mapFailure(failure, type, displayName);\n    }\n\n    public TypedResolveException mapFailure(Throwable failure, String type, String contextDisplayName) {\n        if (!(failure instanceof TypedResolveException)) {\n            return new TypedResolveException(\n                type,"
            },
            {
              "step": 15,
              "variableName": "failure",
              "startLine": 73,
              "startColumn": 83,
              "endLine": 73,
              "endColumn": 90,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Throwable",
              "code": "            return new TypedResolveException(\n                type,\n                contextDisplayName,\n                ImmutableList.of(mapRepositoryOverrideFailure(contextDisplayName, failure))\n            );\n        }\n"
            },
            {
              "step": 16,
              "variableName": "Throwable failure",
              "startLine": 94,
              "startColumn": 78,
              "endLine": 94,
              "endColumn": 95,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Throwable",
              "code": "\n    // TODO: We should handle this exception at the source instead of using instanceof to detect it after it is thrown.\n    //       We should try to avoid catching and analyzing runtime exceptions\n    public Throwable mapRepositoryOverrideFailure(String contextDisplayName, Throwable failure) {\n        if (!(failure instanceof ModuleVersionNotFoundException) || !settingsRepositoriesIgnored()) {\n            return failure;\n        }"
            },
            {
              "step": 17,
              "variableName": "failure",
              "startLine": 108,
              "startColumn": 35,
              "endLine": 108,
              "endColumn": 42,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Throwable",
              "code": "        return new TypedResolveException(\n            \"dependencies\",\n            contextDisplayName,\n            Collections.singleton(failure),\n            resolutions\n        );\n    }"
            },
            {
              "step": 18,
              "variableName": "Collections.singleton(failure)",
              "startLine": 108,
              "startColumn": 13,
              "endLine": 108,
              "endColumn": 43,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Set [<element>] : Throwable",
              "code": "        return new TypedResolveException(\n            \"dependencies\",\n            contextDisplayName,\n            Collections.singleton(failure),\n            resolutions\n        );\n    }"
            },
            {
              "step": 19,
              "variableName": "Collections.singleton(failure)",
              "startLine": 108,
              "startColumn": 13,
              "endLine": 108,
              "endColumn": 43,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Set",
              "code": "        return new TypedResolveException(\n            \"dependencies\",\n            contextDisplayName,\n            Collections.singleton(failure),\n            resolutions\n        );\n    }"
            },
            {
              "step": 20,
              "variableName": "Iterable<? extends Throwable> failures",
              "startLine": 42,
              "startColumn": 67,
              "endLine": 42,
              "endColumn": 105,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ivyservice/TypedResolveException.java",
              "type": "Set",
              "code": "    /**\n     * Creates a new instance with resolutions.\n     */\n    public TypedResolveException(String type, String displayName, Iterable<? extends Throwable> failures, List<String> resolutions) {\n        super(buildMessage(type, displayName), failures, false);\n        this.type = type;\n        this.resolutions = ImmutableList.copyOf(resolutions);"
            },
            {
              "step": 21,
              "variableName": "failures",
              "startLine": 43,
              "startColumn": 48,
              "endLine": 43,
              "endColumn": 56,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ivyservice/TypedResolveException.java",
              "type": "Set",
              "code": "     * Creates a new instance with resolutions.\n     */\n    public TypedResolveException(String type, String displayName, Iterable<? extends Throwable> failures, List<String> resolutions) {\n        super(buildMessage(type, displayName), failures, false);\n        this.type = type;\n        this.resolutions = ImmutableList.copyOf(resolutions);\n    }"
            },
            {
              "step": 22,
              "variableName": "Iterable<? extends Throwable> causes",
              "startLine": 77,
              "startColumn": 48,
              "endLine": 77,
              "endColumn": 84,
              "uri": "gradle-8.14.0/subprojects/core-api/src/main/java/org/gradle/api/artifacts/ResolveException.java",
              "type": "Set",
              "code": "     * @since 8.9\n     */\n    @Incubating\n    protected ResolveException(String message, Iterable<? extends Throwable> causes, @SuppressWarnings(\"unused\") boolean dummy) {\n        super(message, causes);\n    }\n}"
            },
            {
              "step": 23,
              "variableName": "causes",
              "startLine": 78,
              "startColumn": 24,
              "endLine": 78,
              "endColumn": 30,
              "uri": "gradle-8.14.0/subprojects/core-api/src/main/java/org/gradle/api/artifacts/ResolveException.java",
              "type": "Set",
              "code": "     */\n    @Incubating\n    protected ResolveException(String message, Iterable<? extends Throwable> causes, @SuppressWarnings(\"unused\") boolean dummy) {\n        super(message, causes);\n    }\n}\n"
            },
            {
              "step": 24,
              "variableName": "Iterable<? extends Throwable> causes",
              "startLine": 47,
              "startColumn": 55,
              "endLine": 47,
              "endColumn": 91,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "Set",
              "code": "        this.causes.addAll(Arrays.asList(causes));\n    }\n\n    public DefaultMultiCauseException(String message, Iterable<? extends Throwable> causes) {\n        super(message);\n        this.message = message;\n        initCauses(causes);"
            },
            {
              "step": 25,
              "variableName": "causes",
              "startLine": 50,
              "startColumn": 20,
              "endLine": 50,
              "endColumn": 26,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "Set",
              "code": "    public DefaultMultiCauseException(String message, Iterable<? extends Throwable> causes) {\n        super(message);\n        this.message = message;\n        initCauses(causes);\n    }\n\n    public DefaultMultiCauseException(Factory<String> messageFactory) {"
            },
            {
              "step": 26,
              "variableName": "Iterable<? extends Throwable> causes",
              "startLine": 112,
              "startColumn": 28,
              "endLine": 112,
              "endColumn": 64,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "Iterable",
              "code": "        return null;\n    }\n\n    public void initCauses(Iterable<? extends Throwable> causes) {\n        this.causes.clear();\n        for (Throwable cause : causes) {\n            this.causes.add(cause);"
            },
            {
              "step": 27,
              "variableName": "cause",
              "startLine": 115,
              "startColumn": 29,
              "endLine": 115,
              "endColumn": 34,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "Throwable",
              "code": "    public void initCauses(Iterable<? extends Throwable> causes) {\n        this.causes.clear();\n        for (Throwable cause : causes) {\n            this.causes.add(cause);\n        }\n    }\n"
            },
            {
              "step": 28,
              "variableName": "this.causes",
              "startLine": 115,
              "startColumn": 13,
              "endLine": 115,
              "endColumn": 24,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "CopyOnWriteArrayList [<element>] : Throwable",
              "code": "    public void initCauses(Iterable<? extends Throwable> causes) {\n        this.causes.clear();\n        for (Throwable cause : causes) {\n            this.causes.add(cause);\n        }\n    }\n"
            },
            {
              "step": 29,
              "variableName": "this",
              "startLine": 115,
              "startColumn": 13,
              "endLine": 115,
              "endColumn": 17,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "DefaultMultiCauseException [causes, <element>] : Throwable",
              "code": "    public void initCauses(Iterable<? extends Throwable> causes) {\n        this.causes.clear();\n        for (Throwable cause : causes) {\n            this.causes.add(cause);\n        }\n    }\n"
            },
            {
              "step": 30,
              "variableName": "projectConfigurationException",
              "startLine": 57,
              "startColumn": 17,
              "endLine": 57,
              "endColumn": 46,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/DefaultExceptionAnalyser.java",
              "type": "ProjectConfigurationException [causes, <element>] : Throwable",
              "code": "                }\n            }\n            if (!additionalFailures.isEmpty()) {\n                projectConfigurationException.initCauses(additionalFailures);\n                failures.add(transform(projectConfigurationException));\n            }\n        } else if (exception instanceof ServiceCreationException) {"
            },
            {
              "step": 31,
              "variableName": "projectConfigurationException",
              "startLine": 58,
              "startColumn": 40,
              "endLine": 58,
              "endColumn": 69,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/DefaultExceptionAnalyser.java",
              "type": "ProjectConfigurationException [causes, <element>] : Throwable",
              "code": "            }\n            if (!additionalFailures.isEmpty()) {\n                projectConfigurationException.initCauses(additionalFailures);\n                failures.add(transform(projectConfigurationException));\n            }\n        } else if (exception instanceof ServiceCreationException) {\n            failures.add(transform(new InitializationException(exception)));"
            },
            {
              "step": 32,
              "variableName": "transform(projectConfigurationException)",
              "startLine": 58,
              "startColumn": 30,
              "endLine": 58,
              "endColumn": 70,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/DefaultExceptionAnalyser.java",
              "type": "LocationAwareException",
              "code": "            }\n            if (!additionalFailures.isEmpty()) {\n                projectConfigurationException.initCauses(additionalFailures);\n                failures.add(transform(projectConfigurationException));\n            }\n        } else if (exception instanceof ServiceCreationException) {\n            failures.add(transform(new InitializationException(exception)));"
            },
            {
              "step": 33,
              "variableName": "failures",
              "startLine": 58,
              "startColumn": 17,
              "endLine": 58,
              "endColumn": 25,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/DefaultExceptionAnalyser.java",
              "type": "Collection [<element>] : LocationAwareException",
              "code": "            }\n            if (!additionalFailures.isEmpty()) {\n                projectConfigurationException.initCauses(additionalFailures);\n                failures.add(transform(projectConfigurationException));\n            }\n        } else if (exception instanceof ServiceCreationException) {\n            failures.add(transform(new InitializationException(exception)));"
            },
            {
              "step": 34,
              "variableName": "result",
              "startLine": 53,
              "startColumn": 54,
              "endLine": 53,
              "endColumn": 60,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/MultipleBuildFailuresExceptionAnalyser.java",
              "type": "ArrayList [<element>] : LocationAwareException",
              "code": "        for (Throwable failure : failures) {\n            if (failure instanceof MultipleBuildFailures) {\n                for (Throwable cause : ((MultipleBuildFailures) failure).getCauses()) {\n                    collector.collectFailures(cause, result);\n                }\n            } else {\n                collector.collectFailures(failure, result);"
            },
            {
              "step": 35,
              "variableName": "result",
              "startLine": 60,
              "startColumn": 39,
              "endLine": 60,
              "endColumn": 45,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/MultipleBuildFailuresExceptionAnalyser.java",
              "type": "ArrayList [<element>] : LocationAwareException",
              "code": "            }\n        }\n        if (result.size() == 1 && result.get(0) instanceof RuntimeException) {\n            return (RuntimeException) result.get(0);\n        } else {\n            return new MultipleBuildFailures(result);\n        }"
            },
            {
              "step": 36,
              "variableName": "result.get(0)",
              "startLine": 60,
              "startColumn": 39,
              "endLine": 60,
              "endColumn": 52,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/MultipleBuildFailuresExceptionAnalyser.java",
              "type": "LocationAwareException",
              "code": "            }\n        }\n        if (result.size() == 1 && result.get(0) instanceof RuntimeException) {\n            return (RuntimeException) result.get(0);\n        } else {\n            return new MultipleBuildFailures(result);\n        }"
            },
            {
              "step": 37,
              "variableName": "(RuntimeException) result.get(0)",
              "startLine": 60,
              "startColumn": 20,
              "endLine": 60,
              "endColumn": 52,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/MultipleBuildFailuresExceptionAnalyser.java",
              "type": "LocationAwareException",
              "code": "            }\n        }\n        if (result.size() == 1 && result.get(0) instanceof RuntimeException) {\n            return (RuntimeException) result.get(0);\n        } else {\n            return new MultipleBuildFailures(result);\n        }"
            },
            {
              "step": 38,
              "variableName": "exceptionAnalyser.transform(finishFailures)",
              "startLine": 72,
              "startColumn": 16,
              "endLine": 72,
              "endColumn": 59,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/internal/buildtree/DefaultBuildTreeFinishExecutor.java",
              "type": "LocationAwareException",
              "code": "            finishFailures.addAll(result.getFailures());\n        });\n\n        return exceptionAnalyser.transform(finishFailures);\n    }\n}\n"
            },
            {
              "step": 39,
              "variableName": "delegate.finishBuildTree(failures)",
              "startLine": 46,
              "startColumn": 28,
              "endLine": 46,
              "endColumn": 62,
              "uri": "gradle-8.14.0/subprojects/composite-builds/src/main/java/org/gradle/composite/internal/OperationFiringBuildTreeFinishExecutor.java",
              "type": "LocationAwareException",
              "code": "            @Override\n            public RuntimeException call(BuildOperationContext context) {\n                try {\n                    return delegate.finishBuildTree(failures);\n                } finally {\n                    context.setResult(RESULT);\n                }"
            },
            {
              "step": 40,
              "variableName": "buildOperation.call(context)",
              "startLine": 239,
              "startColumn": 21,
              "endLine": 239,
              "endColumn": 49,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/testFixtures/java/org/gradle/internal/operations/TestBuildOperationRunner.java",
              "type": "LocationAwareException",
              "code": "            TestBuildOperationContext context = new TestBuildOperationContext(record);\n            T t;\n            try {\n                t = buildOperation.call(context);\n            } catch (Throwable failure) {\n                if (record.failure == null) {\n                    record.failure = failure;"
            },
            {
              "step": 41,
              "variableName": "t",
              "startLine": 246,
              "startColumn": 20,
              "endLine": 246,
              "endColumn": 21,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/testFixtures/java/org/gradle/internal/operations/TestBuildOperationRunner.java",
              "type": "LocationAwareException",
              "code": "                }\n                throw throwAsUncheckedException(failure);\n            }\n            return t;\n        }\n\n        private <O extends BuildOperation> void execute(O buildOperation, BuildOperationWorker<O> worker) {"
            },
            {
              "step": 42,
              "variableName": "log.call(buildOperation)",
              "startLine": 51,
              "startColumn": 16,
              "endLine": 51,
              "endColumn": 40,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/testFixtures/java/org/gradle/internal/operations/TestBuildOperationRunner.java",
              "type": "LocationAwareException",
              "code": "\n    @Override\n    public <T> T call(CallableBuildOperation<T> buildOperation) {\n        return log.call(buildOperation);\n    }\n\n    @Override"
            },
            {
              "step": 43,
              "variableName": "ca",
              "startLine": 115,
              "startColumn": 5,
              "endLine": 121,
              "endColumn": 7,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/configurationcache/ConfigurationCacheBuildOperations.kt",
              "type": "LocationAwareException",
              "code": "\ninternal\nfun <T : Any> BuildOperationRunner.withModelLoadOperation(block: () -> T): T =\n    call(object : CallableBuildOperation<T> {\n        override fun description(): BuildOperationDescriptor.Builder = BuildOperationDescriptor\n            .displayName(\"Load model from configuration cache\")\n            .progressDisplayName(\"Loading model from configuration cache\")"
            },
            {
              "step": 44,
              "variableName": "ca",
              "startLine": 115,
              "startColumn": 5,
              "endLine": 121,
              "endColumn": 7,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/configurationcache/ConfigurationCacheBuildOperations.kt",
              "type": "LocationAwareException",
              "code": "\ninternal\nfun <T : Any> BuildOperationRunner.withModelLoadOperation(block: () -> T): T =\n    call(object : CallableBuildOperation<T> {\n        override fun description(): BuildOperationDescriptor.Builder = BuildOperationDescriptor\n            .displayName(\"Load model from configuration cache\")\n            .progressDisplayName(\"Loading model from configuration cache\")"
            },
            {
              "step": 45,
              "variableName": "b",
              "startLine": 635,
              "startColumn": 9,
              "endLine": 641,
              "endColumn": 10,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "        // No need to record the `ClassLoaderScope` tree when loading\n        scopeRegistryListener.dispose()\n\n        buildOperationRunner.withModelLoadOperation {\n            val storeLoadResult = entryStore.useForStateLoad(StateType.Model) { stateFile: ConfigurationCacheStateFile ->\n                cacheIO.readModelFrom(stateFile)\n            }"
            },
            {
              "step": 46,
              "variableName": "block()",
              "startLine": 668,
              "startColumn": 22,
              "endLine": 668,
              "endColumn": 29,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "    private\n    inline fun <T> runAtConfigurationTime(block: () -> T): T {\n        prepareConfigurationTimeBarrier()\n        val result = block()\n        crossConfigurationTimeBarrier()\n        return result\n    }"
            },
            {
              "step": 47,
              "variableName": "result",
              "startLine": 670,
              "startColumn": 16,
              "endLine": 670,
              "endColumn": 22,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "        prepareConfigurationTimeBarrier()\n        val result = block()\n        crossConfigurationTimeBarrier()\n        return result\n    }\n\n    private"
            },
            {
              "step": 48,
              "variableName": "runAtConfigurationTime(...) : LocationAwareException",
              "startLine": 631,
              "startColumn": 28,
              "endLine": 642,
              "endColumn": 6,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "    data class LoadResultMetadata(val originInvocationId: String? = null)\n\n    private\n    fun loadModel(): Any = runAtConfigurationTime {\n        // No need to record the `ClassLoaderScope` tree when loading\n        scopeRegistryListener.dispose()\n"
            },
            {
              "step": 49,
              "variableName": "loadModel()",
              "startLine": 268,
              "startColumn": 20,
              "endLine": 268,
              "endColumn": 31,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "    override fun <T : Any> loadOrCreateModel(creator: () -> T): T {\n        if (isLoaded) {\n            runLoadedSideEffects()\n            return loadModel().uncheckedCast()\n        }\n\n        return runWorkThatContributesToCacheEntry {"
            },
            {
              "step": 50,
              "variableName": "Any",
              "startLine": 22,
              "startColumn": 15,
              "endLine": 22,
              "endColumn": 18,
              "uri": "gradle-8.14.0/platforms/core-configuration/stdlib-kotlin-extensions/src/main/kotlin/org/gradle/internal/extensions/stdlib/CastExtensions.kt",
              "type": "Object",
              "code": "import org.gradle.internal.Cast\n\n\nfun <T : Any> Any.uncheckedCast(): T =\n    Cast.uncheckedNonnullCast(this)\n"
            },
            {
              "step": 51,
              "variableName": "this",
              "startLine": 23,
              "startColumn": 31,
              "endLine": 23,
              "endColumn": 35,
              "uri": "gradle-8.14.0/platforms/core-configuration/stdlib-kotlin-extensions/src/main/kotlin/org/gradle/internal/extensions/stdlib/CastExtensions.kt",
              "type": "Object",
              "code": "\n\nfun <T : Any> Any.uncheckedCast(): T =\n    Cast.uncheckedNonnullCast(this)\n"
            },
            {
              "step": 52,
              "variableName": "Object object",
              "startLine": 76,
              "startColumn": 46,
              "endLine": 76,
              "endColumn": 59,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/Cast.java",
              "type": "Object",
              "code": "    }\n\n    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})\n    public static <T> T uncheckedNonnullCast(Object object) {\n        return (T) object;\n    }\n}"
            },
            {
              "step": 53,
              "variableName": "(T) object",
              "startLine": 77,
              "startColumn": 16,
              "endLine": 77,
              "endColumn": 26,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/Cast.java",
              "type": "Object",
              "code": "\n    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})\n    public static <T> T uncheckedNonnullCast(Object object) {\n        return (T) object;\n    }\n}\n"
            },
            {
              "step": 54,
              "variableName": "Cast.uncheckedNonnullCast(collectionType)",
              "startLine": 223,
              "startColumn": 16,
              "endLine": 223,
              "endColumn": 57,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/api/internal/provider/AbstractCollectionProperty.java",
              "type": "Class",
              "code": "    @Override\n    @Nonnull\n    public Class<C> getType() {\n        return Cast.uncheckedNonnullCast(collectionType);\n    }\n\n    @Override"
            },
            {
              "step": 55,
              "variableName": "provider.getType()",
              "startLine": 41,
              "startColumn": 35,
              "endLine": 41,
              "endColumn": 53,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/api/internal/provider/OrElseFixedValueProvider.java",
              "type": "Class",
              "code": "    @Nullable\n    @Override\n    public Class<T> getType() {\n        return Cast.uncheckedCast(provider.getType());\n    }\n\n    @Override"
            },
            {
              "step": 56,
              "variableName": "@Nullable Object object",
              "startLine": 71,
              "startColumn": 39,
              "endLine": 71,
              "endColumn": 62,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/Cast.java",
              "type": "Object",
              "code": "\n    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})\n    @Nullable\n    public static <T> T uncheckedCast(@Nullable Object object) {\n        return (T) object;\n    }\n"
            },
            {
              "step": 57,
              "variableName": "(T) object",
              "startLine": 72,
              "startColumn": 16,
              "endLine": 72,
              "endColumn": 26,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/Cast.java",
              "type": "Object",
              "code": "    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})\n    @Nullable\n    public static <T> T uncheckedCast(@Nullable Object object) {\n        return (T) object;\n    }\n\n    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})"
            },
            {
              "step": 58,
              "variableName": "Cast.uncheckedCast(sanitizer.sanitize(t))",
              "startLine": 41,
              "startColumn": 15,
              "endLine": 41,
              "endColumn": 56,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/api/internal/provider/TypeSanitizingTransformer.java",
              "type": "Object",
              "code": "\n    @Override\n    public T transform(T t) {\n        T v = Cast.uncheckedCast(sanitizer.sanitize(t));\n        if (targetType.isInstance(v)) {\n            return v;\n        }"
            },
            {
              "step": 59,
              "variableName": "v",
              "startLine": 43,
              "startColumn": 20,
              "endLine": 43,
              "endColumn": 21,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/api/internal/provider/TypeSanitizingTransformer.java",
              "type": "Object",
              "code": "    public T transform(T t) {\n        T v = Cast.uncheckedCast(sanitizer.sanitize(t));\n        if (targetType.isInstance(v)) {\n            return v;\n        }\n        throw new IllegalArgumentException(String.format(\"Cannot get the value of %s of type %s as the provider associated with this property returned a value of type %s.\", owner.getDisplayName(), targetType.getName(), v.getClass().getName()));\n    }"
            },
            {
              "step": 60,
              "variableName": "definition.transform(registration(path))",
              "startLine": 361,
              "startColumn": 22,
              "endLine": 361,
              "endColumn": 62,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/testFixtures/groovy/org/gradle/model/internal/fixture/ModelRegistryHelperExtension.java",
              "type": "ModelRegistration",
              "code": "    }\n\n    public static void addLink(MutableModelNode node, ModelPath path, Transformer<ModelRegistration, ModelRegistrations.Builder> definition) {\n        node.addLink(definition.transform(registration(path)));\n    }\n\n    public static void addReference(MutableModelNode node, String name, Class<?> type, MutableModelNode target) {"
            },
            {
              "step": 61,
              "variableName": "ModelRegistration registration",
              "startLine": 216,
              "startColumn": 25,
              "endLine": 216,
              "endColumn": 55,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/registry/ModelElementNode.java",
              "type": "ModelRegistration",
              "code": "    }\n\n    @Override\n    public void addLink(ModelRegistration registration) {\n        addNode(new ModelElementNode(modelRegistry, registration, this), registration);\n    }\n"
            },
            {
              "step": 62,
              "variableName": "registration",
              "startLine": 217,
              "startColumn": 74,
              "endLine": 217,
              "endColumn": 86,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/registry/ModelElementNode.java",
              "type": "ModelRegistration",
              "code": "\n    @Override\n    public void addLink(ModelRegistration registration) {\n        addNode(new ModelElementNode(modelRegistry, registration, this), registration);\n    }\n\n    private void addNode(ModelNodeInternal child, ModelRegistration registration) {"
            },
            {
              "step": 63,
              "variableName": "ModelNodeInternal child",
              "startLine": 220,
              "startColumn": 26,
              "endLine": 220,
              "endColumn": 49,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/registry/ModelElementNode.java",
              "type": "ModelNodeInternal",
              "code": "        addNode(new ModelElementNode(modelRegistry, registration, this), registration);\n    }\n\n    private void addNode(ModelNodeInternal child, ModelRegistration registration) {\n        ModelPath childPath = child.getPath();\n        if (!getPath().isDirectChild(childPath)) {\n            throw new IllegalArgumentException(String.format(\"Element registration has a path (%s) which is not a child of this node (%s).\", childPath, getPath()));"
            },
            {
              "step": 64,
              "variableName": "child",
              "startLine": 261,
              "startColumn": 36,
              "endLine": 261,
              "endColumn": 41,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/registry/ModelElementNode.java",
              "type": "ModelNodeInternal",
              "code": "            links = new TreeMap<>();\n        }\n        links.put(child.getPath().getName(), child);\n        modelRegistry.registerNode(child, registration.getActions());\n    }\n\n    @Override"
            },
            {
              "step": 65,
              "variableName": "ModelNodeInternal node",
              "startLine": 120,
              "startColumn": 30,
              "endLine": 120,
              "endColumn": 52,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/registry/DefaultModelRegistry.java",
              "type": "ModelNodeInternal",
              "code": "    }\n\n    @Override\n    public void registerNode(ModelNodeInternal node, Multimap<ModelActionRole, ? extends ModelAction> actions) {\n        // Disabled before 2.3 release due to not wanting to validate task names (which may contain invalid chars), at least not yet\n        // ModelPath.validateName(name);\n        LOGGER.debug(\"Project {} - Registering model element '{}' (hidden = {})\", projectPath, node.getPath(), node.isHidden());"
            },
            {
              "step": 66,
              "variableName": "node",
              "startLine": 124,
              "startColumn": 25,
              "endLine": 124,
              "endColumn": 29,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/registry/DefaultModelRegistry.java",
              "type": "ModelNodeInternal",
              "code": "        // Disabled before 2.3 release due to not wanting to validate task names (which may contain invalid chars), at least not yet\n        // ModelPath.validateName(name);\n        LOGGER.debug(\"Project {} - Registering model element '{}' (hidden = {})\", projectPath, node.getPath(), node.isHidden());\n        addRuleBindings(node, actions);\n        modelGraph.add(node);\n        ruleBindings.nodeCreated(node);\n    }"
            },
            {
              "step": 67,
              "variableName": "node",
              "startLine": 125,
              "startColumn": 24,
              "endLine": 125,
              "endColumn": 28,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/registry/DefaultModelRegistry.java",
              "type": "ModelNodeInternal",
              "code": "        // ModelPath.validateName(name);\n        LOGGER.debug(\"Project {} - Registering model element '{}' (hidden = {})\", projectPath, node.getPath(), node.isHidden());\n        addRuleBindings(node, actions);\n        modelGraph.add(node);\n        ruleBindings.nodeCreated(node);\n    }\n"
            },
            {
              "step": 68,
              "variableName": "node",
              "startLine": 126,
              "startColumn": 34,
              "endLine": 126,
              "endColumn": 38,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/registry/DefaultModelRegistry.java",
              "type": "ModelNodeInternal",
              "code": "        LOGGER.debug(\"Project {} - Registering model element '{}' (hidden = {})\", projectPath, node.getPath(), node.isHidden());\n        addRuleBindings(node, actions);\n        modelGraph.add(node);\n        ruleBindings.nodeCreated(node);\n    }\n\n    private void addRuleBindings(ModelNodeInternal node, Multimap<ModelActionRole, ? extends ModelAction> actions) {"
            },
            {
              "step": 69,
              "variableName": "ModelNodeInternal node",
              "startLine": 44,
              "startColumn": 29,
              "endLine": 44,
              "endColumn": 51,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/registry/RuleBindings.java",
              "type": "ModelNodeInternal",
              "code": "        rulesByInput = new NodeAtStateIndex(\"rulesByInput\");\n    }\n\n    public void nodeCreated(ModelNodeInternal node) {\n        untypedPathReferences.addNode(node);\n    }\n"
            },
            {
              "step": 70,
              "variableName": "node",
              "startLine": 45,
              "startColumn": 39,
              "endLine": 45,
              "endColumn": 43,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/registry/RuleBindings.java",
              "type": "ModelNodeInternal",
              "code": "    }\n\n    public void nodeCreated(ModelNodeInternal node) {\n        untypedPathReferences.addNode(node);\n    }\n\n    public void nodeDiscovered(ModelNodeInternal node) {"
            },
            {
              "step": 71,
              "variableName": "ModelNodeInternal node",
              "startLine": 159,
              "startColumn": 29,
              "endLine": 159,
              "endColumn": 51,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/registry/RuleBindings.java",
              "type": "ModelNodeInternal",
              "code": "    private class PathPredicateIndex {\n        final Map<ModelPath, PredicateMatches> predicates = new LinkedHashMap<>();\n\n        public void addNode(ModelNodeInternal node) {\n            predicatesForPath(node.getPath()).match(node);\n        }\n"
            },
            {
              "step": 72,
              "variableName": "node",
              "startLine": 160,
              "startColumn": 53,
              "endLine": 160,
              "endColumn": 57,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/registry/RuleBindings.java",
              "type": "ModelNodeInternal",
              "code": "        final Map<ModelPath, PredicateMatches> predicates = new LinkedHashMap<>();\n\n        public void addNode(ModelNodeInternal node) {\n            predicatesForPath(node.getPath()).match(node);\n        }\n\n        public void addReference(Reference reference) {"
            },
            {
              "step": 73,
              "variableName": "ModelNodeInternal node",
              "startLine": 137,
              "startColumn": 20,
              "endLine": 137,
              "endColumn": 42,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/registry/RuleBindings.java",
              "type": "ModelNodeInternal",
              "code": "        final List<Reference> references = new ArrayList<Reference>();\n        ModelNodeInternal match;\n\n        void match(ModelNodeInternal node) {\n            for (Reference reference : references) {\n                bound(reference, node);\n            }"
            },
            {
              "step": 74,
              "variableName": "node",
              "startLine": 139,
              "startColumn": 34,
              "endLine": 139,
              "endColumn": 38,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/registry/RuleBindings.java",
              "type": "ModelNodeInternal",
              "code": "\n        void match(ModelNodeInternal node) {\n            for (Reference reference : references) {\n                bound(reference, node);\n            }\n            match = node;\n        }"
            },
            {
              "step": 75,
              "variableName": "ModelNodeInternal node",
              "startLine": 54,
              "startColumn": 45,
              "endLine": 54,
              "endColumn": 67,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/registry/RuleBindings.java",
              "type": "ModelNodeInternal",
              "code": "        scopeReferences.addNodeToScope(node.getPath().getParent(), node);\n    }\n\n    private void bound(Reference reference, ModelNodeInternal node) {\n        ModelBinding binding = reference.binding;\n        binding.onBind(node);\n        reference.index.put(new NodeAtState(node.getPath(), binding.predicate.getState()), reference.owner);"
            },
            {
              "step": 76,
              "variableName": "node",
              "startLine": 56,
              "startColumn": 24,
              "endLine": 56,
              "endColumn": 28,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/registry/RuleBindings.java",
              "type": "ModelNodeInternal",
              "code": "\n    private void bound(Reference reference, ModelNodeInternal node) {\n        ModelBinding binding = reference.binding;\n        binding.onBind(node);\n        reference.index.put(new NodeAtState(node.getPath(), binding.predicate.getState()), reference.owner);\n    }\n"
            },
            {
              "step": 77,
              "variableName": "ModelNodeInternal node",
              "startLine": 70,
              "startColumn": 30,
              "endLine": 70,
              "endColumn": 52,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/registry/ModelBinding.java",
              "type": "ModelNodeInternal",
              "code": "\n    public abstract boolean canBindInState(ModelNode.State state);\n\n    public final void onBind(ModelNodeInternal node) {\n        if (boundTo != null) {\n            ModelRuleDescriptor creatorDescriptor = node.getDescriptor();\n            ModelPath path = node.getPath();"
            },
            {
              "step": 78,
              "variableName": "node",
              "startLine": 79,
              "startColumn": 18,
              "endLine": 79,
              "endColumn": 22,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/registry/ModelBinding.java",
              "type": "ModelNodeInternal",
              "code": "            ));\n        }\n\n        doOnBind(node);\n    }\n\n    protected void doOnBind(ModelNodeInternal node) {"
            },
            {
              "step": 79,
              "variableName": "ModelNodeInternal node",
              "startLine": 40,
              "startColumn": 26,
              "endLine": 40,
              "endColumn": 48,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/registry/PathBinderCreationListener.java",
              "type": "ModelNodeInternal",
              "code": "    }\n\n    @Override\n    public void doOnBind(ModelNodeInternal node) {\n        if (predicate.matches(node)) {\n            boundTo = node;\n            bindAction.execute(this);"
            },
            {
              "step": 80,
              "variableName": "node",
              "startLine": 41,
              "startColumn": 31,
              "endLine": 41,
              "endColumn": 35,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/registry/PathBinderCreationListener.java",
              "type": "ModelNodeInternal",
              "code": "\n    @Override\n    public void doOnBind(ModelNodeInternal node) {\n        if (predicate.matches(node)) {\n            boundTo = node;\n            bindAction.execute(this);\n        } else {"
            },
            {
              "step": 81,
              "variableName": "node",
              "startLine": 46,
              "startColumn": 54,
              "endLine": 46,
              "endColumn": 58,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/registry/PathBinderCreationListener.java",
              "type": "ModelNodeInternal",
              "code": "            bindAction.execute(this);\n        } else {\n            throw new InvalidModelRuleException(referrer, new ModelRuleBindingException(\n                IncompatibleTypeReferenceReporter.of(node, predicate.getReference().getType(), predicate.getReference().getDescription(), writable).asString()\n            ));\n        }\n    }"
            },
            {
              "step": 82,
              "variableName": "String description",
              "startLine": 49,
              "startColumn": 98,
              "endLine": 49,
              "endColumn": 116,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/report/IncompatibleTypeReferenceReporter.java",
              "type": "String",
              "code": "        this.candidateTypes = candidateTypes;\n    }\n\n    public static IncompatibleTypeReferenceReporter of(MutableModelNode node, ModelType<?> type, String description, boolean writable) {\n        ModelPath path = node.getPath();\n        ModelRuleDescriptor creatorDescriptor = node.getDescriptor();\n        return new IncompatibleTypeReferenceReporter("
            },
            {
              "step": 83,
              "variableName": "description",
              "startLine": 53,
              "startColumn": 77,
              "endLine": 53,
              "endColumn": 88,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/report/IncompatibleTypeReferenceReporter.java",
              "type": "String",
              "code": "        ModelPath path = node.getPath();\n        ModelRuleDescriptor creatorDescriptor = node.getDescriptor();\n        return new IncompatibleTypeReferenceReporter(\n            creatorDescriptor.toString(), path.toString(), type.toString(), description, writable,\n            node.getTypeDescriptions()\n        );\n    }"
            },
            {
              "step": 84,
              "variableName": "String description",
              "startLine": 40,
              "startColumn": 88,
              "endLine": 40,
              "endColumn": 106,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/report/IncompatibleTypeReferenceReporter.java",
              "type": "String",
              "code": "    private final boolean writable;\n    private final Iterable<String> candidateTypes;\n\n    public IncompatibleTypeReferenceReporter(String creator, String path, String type, String description, boolean writable, Iterable<String> candidateTypes) {\n        this.creator = creator;\n        this.path = path;\n        this.type = type;"
            },
            {
              "step": 85,
              "variableName": "description",
              "startLine": 44,
              "startColumn": 28,
              "endLine": 44,
              "endColumn": 39,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/report/IncompatibleTypeReferenceReporter.java",
              "type": "String",
              "code": "        this.creator = creator;\n        this.path = path;\n        this.type = type;\n        this.description = description;\n        this.writable = writable;\n        this.candidateTypes = candidateTypes;\n    }"
            },
            {
              "step": 86,
              "variableName": "this",
              "startLine": 44,
              "startColumn": 9,
              "endLine": 44,
              "endColumn": 13,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/report/IncompatibleTypeReferenceReporter.java",
              "type": "IncompatibleTypeReferenceReporter [description] : String",
              "code": "        this.creator = creator;\n        this.path = path;\n        this.type = type;\n        this.description = description;\n        this.writable = writable;\n        this.candidateTypes = candidateTypes;\n    }"
            },
            {
              "step": 87,
              "variableName": "new IncompatibleTypeReferenceReporter(...) : IncompatibleTypeReferenceReporter [description] : String",
              "startLine": 52,
              "startColumn": 16,
              "endLine": 55,
              "endColumn": 10,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/report/IncompatibleTypeReferenceReporter.java",
              "type": "IncompatibleTypeReferenceReporter [description] : String",
              "code": "    public static IncompatibleTypeReferenceReporter of(MutableModelNode node, ModelType<?> type, String description, boolean writable) {\n        ModelPath path = node.getPath();\n        ModelRuleDescriptor creatorDescriptor = node.getDescriptor();\n        return new IncompatibleTypeReferenceReporter(\n            creatorDescriptor.toString(), path.toString(), type.toString(), description, writable,\n            node.getTypeDescriptions()\n        );"
            },
            {
              "step": 88,
              "variableName": "IncompatibleTypeReferenceReporter.of(node, elementType, action.getSubject().getDescription(), true)",
              "startLine": 522,
              "startColumn": 21,
              "endLine": 522,
              "endColumn": 120,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/core/NodeBackedModelMap.java",
              "type": "IncompatibleTypeReferenceReporter [description] : String",
              "code": "            node.ensureAtLeast(ModelNode.State.Discovered);\n            if (!node.canBeViewedAs(elementType)) {\n                throw new InvalidModelRuleException(action.getDescriptor(), new ModelRuleBindingException(\n                    IncompatibleTypeReferenceReporter.of(node, elementType, action.getSubject().getDescription(), true).asString()\n                ));\n            }\n            parent.validateCanBindAction(node, action);"
            },
            {
              "step": 89,
              "variableName": "asString",
              "startLine": 58,
              "startColumn": 19,
              "endLine": 58,
              "endColumn": 27,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/report/IncompatibleTypeReferenceReporter.java",
              "type": "IncompatibleTypeReferenceReporter [description] : String",
              "code": "        );\n    }\n\n    public String asString() {\n        StringWriter string = new StringWriter();\n        writeTo(new PrintWriter(string));\n        return string.toString();"
            },
            {
              "step": 90,
              "variableName": "writeTo(new PrintWriter(string))",
              "startLine": 60,
              "startColumn": 9,
              "endLine": 60,
              "endColumn": 41,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/report/IncompatibleTypeReferenceReporter.java",
              "type": "IncompatibleTypeReferenceReporter [description] : String",
              "code": "\n    public String asString() {\n        StringWriter string = new StringWriter();\n        writeTo(new PrintWriter(string));\n        return string.toString();\n    }\n"
            },
            {
              "step": 91,
              "variableName": "writeTo",
              "startLine": 64,
              "startColumn": 17,
              "endLine": 64,
              "endColumn": 24,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/report/IncompatibleTypeReferenceReporter.java",
              "type": "IncompatibleTypeReferenceReporter [description] : String",
              "code": "        return string.toString();\n    }\n\n    public void writeTo(PrintWriter writer) {\n        //\"type-only model reference of type '%s'%s is ambiguous as multiple model elements are available for this type:%n  %s (created by %s)%n  %s (created by %s)\",\n        writer.print(\"Model reference to element '\");\n        writer.print(path);"
            },
            {
              "step": 92,
              "variableName": "description",
              "startLine": 72,
              "startColumn": 26,
              "endLine": 72,
              "endColumn": 37,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/report/IncompatibleTypeReferenceReporter.java",
              "type": "IncompatibleTypeReferenceReporter [description] : String",
              "code": "        writer.print(type);\n        if (description != null) {\n            writer.print(\" (\");\n            writer.print(description);\n            writer.print(\")\");\n        }\n        writer.println(\" is invalid due to incompatible types.\");"
            },
            {
              "step": 93,
              "variableName": "description",
              "startLine": 72,
              "startColumn": 26,
              "endLine": 72,
              "endColumn": 37,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/report/IncompatibleTypeReferenceReporter.java",
              "type": "",
              "code": "        writer.print(type);\n        if (description != null) {\n            writer.print(\" (\");\n            writer.print(description);\n            writer.print(\")\");\n        }\n        writer.println(\" is invalid due to incompatible types.\");"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "source",
              "startLine": 42,
              "startColumn": 27,
              "endLine": 42,
              "endColumn": 33,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/RegExpNameMapper.java",
              "type": "String",
              "code": "        if (matcher == null) {\n            matcher = pattern.matcher(source);\n        } else {\n            matcher.reset(source);\n        }\n        String result = source;\n        if (matcher.find()) {"
            },
            {
              "step": 1,
              "variableName": "result",
              "startLine": 48,
              "startColumn": 16,
              "endLine": 48,
              "endColumn": 22,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/RegExpNameMapper.java",
              "type": "String",
              "code": "        if (matcher.find()) {\n            result = matcher.replaceFirst(replacement);\n        }\n        return result;\n    }\n}\n"
            },
            {
              "step": 2,
              "variableName": "transformer.transform(value)",
              "startLine": 37,
              "startColumn": 31,
              "endLine": 37,
              "endColumn": 59,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/ChainingTransformer.java",
              "type": "String",
              "code": "    public T transform(T original) {\n        T value = original;\n        for (Transformer<T, T> transformer : transformers) {\n            value = type.cast(transformer.transform(value));\n        }\n        return value;\n    }"
            },
            {
              "step": 3,
              "variableName": "type.cast(transformer.transform(value))",
              "startLine": 37,
              "startColumn": 21,
              "endLine": 37,
              "endColumn": 60,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/ChainingTransformer.java",
              "type": "String",
              "code": "    public T transform(T original) {\n        T value = original;\n        for (Transformer<T, T> transformer : transformers) {\n            value = type.cast(transformer.transform(value));\n        }\n        return value;\n    }"
            },
            {
              "step": 4,
              "variableName": "value",
              "startLine": 39,
              "startColumn": 16,
              "endLine": 39,
              "endColumn": 21,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/ChainingTransformer.java",
              "type": "String",
              "code": "        for (Transformer<T, T> transformer : transformers) {\n            value = type.cast(transformer.transform(value));\n        }\n        return value;\n    }\n\n    public void add(Transformer<T, T> transformer) {"
            },
            {
              "step": 5,
              "variableName": "describer.transform(this)",
              "startLine": 163,
              "startColumn": 16,
              "endLine": 163,
              "endColumn": 41,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/repositories/DefaultMavenArtifactRepository.java",
              "type": "String",
              "code": "\n    @Override\n    public String getDisplayName() {\n        return describer.transform(this);\n    }\n\n    @Override"
            },
            {
              "step": 6,
              "variableName": "describable.getDisplayName()",
              "startLine": 313,
              "startColumn": 35,
              "endLine": 313,
              "endColumn": 63,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "String",
              "code": "        public String getDisplayName() {\n            synchronized (this) {\n                if (displayName == null) {\n                    displayName = describable.getDisplayName();\n                    if (capDisplayName != null || !(describable instanceof DisplayName)) {\n                        describable = null;\n                    }"
            },
            {
              "step": 7,
              "variableName": "displayName",
              "startLine": 318,
              "startColumn": 24,
              "endLine": 318,
              "endColumn": 35,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "String",
              "code": "                        describable = null;\n                    }\n                }\n                return displayName;\n            }\n        }\n    }"
            },
            {
              "step": 8,
              "variableName": "displayName.getDisplayName()",
              "startLine": 772,
              "startColumn": 73,
              "endLine": 772,
              "endColumn": 101,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/configurations/DefaultConfiguration.java",
              "type": "String",
              "code": "                try {\n                    results = resolver.resolveGraph(DefaultConfiguration.this);\n                } catch (Exception e) {\n                    throw exceptionMapper.mapFailure(e, \"dependencies\", displayName.getDisplayName());\n                }\n\n                // Make the new state visible in case a dependency resolution listener queries the result, which requires the new state"
            },
            {
              "step": 9,
              "variableName": "String contextDisplayName",
              "startLine": 68,
              "startColumn": 77,
              "endLine": 68,
              "endColumn": 102,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "String",
              "code": "        return mapFailure(failure, type, displayName);\n    }\n\n    public TypedResolveException mapFailure(Throwable failure, String type, String contextDisplayName) {\n        if (!(failure instanceof TypedResolveException)) {\n            return new TypedResolveException(\n                type,"
            },
            {
              "step": 10,
              "variableName": "contextDisplayName",
              "startLine": 72,
              "startColumn": 17,
              "endLine": 72,
              "endColumn": 35,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "String",
              "code": "        if (!(failure instanceof TypedResolveException)) {\n            return new TypedResolveException(\n                type,\n                contextDisplayName,\n                ImmutableList.of(mapRepositoryOverrideFailure(contextDisplayName, failure))\n            );\n        }"
            },
            {
              "step": 11,
              "variableName": "new TypedResolveException(...) : TypedResolveException",
              "startLine": 70,
              "startColumn": 20,
              "endLine": 74,
              "endColumn": 14,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "TypedResolveException",
              "code": "\n    public TypedResolveException mapFailure(Throwable failure, String type, String contextDisplayName) {\n        if (!(failure instanceof TypedResolveException)) {\n            return new TypedResolveException(\n                type,\n                contextDisplayName,\n                ImmutableList.of(mapRepositoryOverrideFailure(contextDisplayName, failure))"
            },
            {
              "step": 12,
              "variableName": "exceptionMapper.mapFailure(e, \"dependencies\", displayName.getDisplayName())",
              "startLine": 772,
              "startColumn": 27,
              "endLine": 772,
              "endColumn": 102,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/configurations/DefaultConfiguration.java",
              "type": "TypedResolveException",
              "code": "                try {\n                    results = resolver.resolveGraph(DefaultConfiguration.this);\n                } catch (Exception e) {\n                    throw exceptionMapper.mapFailure(e, \"dependencies\", displayName.getDisplayName());\n                }\n\n                // Make the new state visible in case a dependency resolution listener queries the result, which requires the new state"
            },
            {
              "step": 13,
              "variableName": "e",
              "startLine": 772,
              "startColumn": 54,
              "endLine": 772,
              "endColumn": 55,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/configurations/DefaultConfiguration.java",
              "type": "Exception",
              "code": "                try {\n                    results = resolver.resolveGraph(DefaultConfiguration.this);\n                } catch (Exception e) {\n                    throw exceptionMapper.mapFailure(e, \"dependencies\", displayName.getDisplayName());\n                }\n\n                // Make the new state visible in case a dependency resolution listener queries the result, which requires the new state"
            },
            {
              "step": 14,
              "variableName": "Throwable failure",
              "startLine": 68,
              "startColumn": 45,
              "endLine": 68,
              "endColumn": 62,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Throwable",
              "code": "        return mapFailure(failure, type, displayName);\n    }\n\n    public TypedResolveException mapFailure(Throwable failure, String type, String contextDisplayName) {\n        if (!(failure instanceof TypedResolveException)) {\n            return new TypedResolveException(\n                type,"
            },
            {
              "step": 15,
              "variableName": "failure",
              "startLine": 73,
              "startColumn": 83,
              "endLine": 73,
              "endColumn": 90,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Throwable",
              "code": "            return new TypedResolveException(\n                type,\n                contextDisplayName,\n                ImmutableList.of(mapRepositoryOverrideFailure(contextDisplayName, failure))\n            );\n        }\n"
            },
            {
              "step": 16,
              "variableName": "Throwable failure",
              "startLine": 94,
              "startColumn": 78,
              "endLine": 94,
              "endColumn": 95,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Throwable",
              "code": "\n    // TODO: We should handle this exception at the source instead of using instanceof to detect it after it is thrown.\n    //       We should try to avoid catching and analyzing runtime exceptions\n    public Throwable mapRepositoryOverrideFailure(String contextDisplayName, Throwable failure) {\n        if (!(failure instanceof ModuleVersionNotFoundException) || !settingsRepositoriesIgnored()) {\n            return failure;\n        }"
            },
            {
              "step": 17,
              "variableName": "failure",
              "startLine": 108,
              "startColumn": 35,
              "endLine": 108,
              "endColumn": 42,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Throwable",
              "code": "        return new TypedResolveException(\n            \"dependencies\",\n            contextDisplayName,\n            Collections.singleton(failure),\n            resolutions\n        );\n    }"
            },
            {
              "step": 18,
              "variableName": "Collections.singleton(failure)",
              "startLine": 108,
              "startColumn": 13,
              "endLine": 108,
              "endColumn": 43,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Set [<element>] : Throwable",
              "code": "        return new TypedResolveException(\n            \"dependencies\",\n            contextDisplayName,\n            Collections.singleton(failure),\n            resolutions\n        );\n    }"
            },
            {
              "step": 19,
              "variableName": "Collections.singleton(failure)",
              "startLine": 108,
              "startColumn": 13,
              "endLine": 108,
              "endColumn": 43,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Set",
              "code": "        return new TypedResolveException(\n            \"dependencies\",\n            contextDisplayName,\n            Collections.singleton(failure),\n            resolutions\n        );\n    }"
            },
            {
              "step": 20,
              "variableName": "Iterable<? extends Throwable> failures",
              "startLine": 42,
              "startColumn": 67,
              "endLine": 42,
              "endColumn": 105,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ivyservice/TypedResolveException.java",
              "type": "Set",
              "code": "    /**\n     * Creates a new instance with resolutions.\n     */\n    public TypedResolveException(String type, String displayName, Iterable<? extends Throwable> failures, List<String> resolutions) {\n        super(buildMessage(type, displayName), failures, false);\n        this.type = type;\n        this.resolutions = ImmutableList.copyOf(resolutions);"
            },
            {
              "step": 21,
              "variableName": "failures",
              "startLine": 43,
              "startColumn": 48,
              "endLine": 43,
              "endColumn": 56,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ivyservice/TypedResolveException.java",
              "type": "Set",
              "code": "     * Creates a new instance with resolutions.\n     */\n    public TypedResolveException(String type, String displayName, Iterable<? extends Throwable> failures, List<String> resolutions) {\n        super(buildMessage(type, displayName), failures, false);\n        this.type = type;\n        this.resolutions = ImmutableList.copyOf(resolutions);\n    }"
            },
            {
              "step": 22,
              "variableName": "Iterable<? extends Throwable> causes",
              "startLine": 77,
              "startColumn": 48,
              "endLine": 77,
              "endColumn": 84,
              "uri": "gradle-8.14.0/subprojects/core-api/src/main/java/org/gradle/api/artifacts/ResolveException.java",
              "type": "Set",
              "code": "     * @since 8.9\n     */\n    @Incubating\n    protected ResolveException(String message, Iterable<? extends Throwable> causes, @SuppressWarnings(\"unused\") boolean dummy) {\n        super(message, causes);\n    }\n}"
            },
            {
              "step": 23,
              "variableName": "causes",
              "startLine": 78,
              "startColumn": 24,
              "endLine": 78,
              "endColumn": 30,
              "uri": "gradle-8.14.0/subprojects/core-api/src/main/java/org/gradle/api/artifacts/ResolveException.java",
              "type": "Set",
              "code": "     */\n    @Incubating\n    protected ResolveException(String message, Iterable<? extends Throwable> causes, @SuppressWarnings(\"unused\") boolean dummy) {\n        super(message, causes);\n    }\n}\n"
            },
            {
              "step": 24,
              "variableName": "Iterable<? extends Throwable> causes",
              "startLine": 47,
              "startColumn": 55,
              "endLine": 47,
              "endColumn": 91,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "Set",
              "code": "        this.causes.addAll(Arrays.asList(causes));\n    }\n\n    public DefaultMultiCauseException(String message, Iterable<? extends Throwable> causes) {\n        super(message);\n        this.message = message;\n        initCauses(causes);"
            },
            {
              "step": 25,
              "variableName": "causes",
              "startLine": 50,
              "startColumn": 20,
              "endLine": 50,
              "endColumn": 26,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "Set",
              "code": "    public DefaultMultiCauseException(String message, Iterable<? extends Throwable> causes) {\n        super(message);\n        this.message = message;\n        initCauses(causes);\n    }\n\n    public DefaultMultiCauseException(Factory<String> messageFactory) {"
            },
            {
              "step": 26,
              "variableName": "Iterable<? extends Throwable> causes",
              "startLine": 112,
              "startColumn": 28,
              "endLine": 112,
              "endColumn": 64,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "Iterable",
              "code": "        return null;\n    }\n\n    public void initCauses(Iterable<? extends Throwable> causes) {\n        this.causes.clear();\n        for (Throwable cause : causes) {\n            this.causes.add(cause);"
            },
            {
              "step": 27,
              "variableName": "cause",
              "startLine": 115,
              "startColumn": 29,
              "endLine": 115,
              "endColumn": 34,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "Throwable",
              "code": "    public void initCauses(Iterable<? extends Throwable> causes) {\n        this.causes.clear();\n        for (Throwable cause : causes) {\n            this.causes.add(cause);\n        }\n    }\n"
            },
            {
              "step": 28,
              "variableName": "this.causes",
              "startLine": 115,
              "startColumn": 13,
              "endLine": 115,
              "endColumn": 24,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "CopyOnWriteArrayList [<element>] : Throwable",
              "code": "    public void initCauses(Iterable<? extends Throwable> causes) {\n        this.causes.clear();\n        for (Throwable cause : causes) {\n            this.causes.add(cause);\n        }\n    }\n"
            },
            {
              "step": 29,
              "variableName": "this",
              "startLine": 115,
              "startColumn": 13,
              "endLine": 115,
              "endColumn": 17,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "DefaultMultiCauseException [causes, <element>] : Throwable",
              "code": "    public void initCauses(Iterable<? extends Throwable> causes) {\n        this.causes.clear();\n        for (Throwable cause : causes) {\n            this.causes.add(cause);\n        }\n    }\n"
            },
            {
              "step": 30,
              "variableName": "projectConfigurationException",
              "startLine": 57,
              "startColumn": 17,
              "endLine": 57,
              "endColumn": 46,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/DefaultExceptionAnalyser.java",
              "type": "ProjectConfigurationException [causes, <element>] : Throwable",
              "code": "                }\n            }\n            if (!additionalFailures.isEmpty()) {\n                projectConfigurationException.initCauses(additionalFailures);\n                failures.add(transform(projectConfigurationException));\n            }\n        } else if (exception instanceof ServiceCreationException) {"
            },
            {
              "step": 31,
              "variableName": "projectConfigurationException",
              "startLine": 58,
              "startColumn": 40,
              "endLine": 58,
              "endColumn": 69,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/DefaultExceptionAnalyser.java",
              "type": "ProjectConfigurationException [causes, <element>] : Throwable",
              "code": "            }\n            if (!additionalFailures.isEmpty()) {\n                projectConfigurationException.initCauses(additionalFailures);\n                failures.add(transform(projectConfigurationException));\n            }\n        } else if (exception instanceof ServiceCreationException) {\n            failures.add(transform(new InitializationException(exception)));"
            },
            {
              "step": 32,
              "variableName": "transform(projectConfigurationException)",
              "startLine": 58,
              "startColumn": 30,
              "endLine": 58,
              "endColumn": 70,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/DefaultExceptionAnalyser.java",
              "type": "LocationAwareException",
              "code": "            }\n            if (!additionalFailures.isEmpty()) {\n                projectConfigurationException.initCauses(additionalFailures);\n                failures.add(transform(projectConfigurationException));\n            }\n        } else if (exception instanceof ServiceCreationException) {\n            failures.add(transform(new InitializationException(exception)));"
            },
            {
              "step": 33,
              "variableName": "failures",
              "startLine": 58,
              "startColumn": 17,
              "endLine": 58,
              "endColumn": 25,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/DefaultExceptionAnalyser.java",
              "type": "Collection [<element>] : LocationAwareException",
              "code": "            }\n            if (!additionalFailures.isEmpty()) {\n                projectConfigurationException.initCauses(additionalFailures);\n                failures.add(transform(projectConfigurationException));\n            }\n        } else if (exception instanceof ServiceCreationException) {\n            failures.add(transform(new InitializationException(exception)));"
            },
            {
              "step": 34,
              "variableName": "result",
              "startLine": 53,
              "startColumn": 54,
              "endLine": 53,
              "endColumn": 60,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/MultipleBuildFailuresExceptionAnalyser.java",
              "type": "ArrayList [<element>] : LocationAwareException",
              "code": "        for (Throwable failure : failures) {\n            if (failure instanceof MultipleBuildFailures) {\n                for (Throwable cause : ((MultipleBuildFailures) failure).getCauses()) {\n                    collector.collectFailures(cause, result);\n                }\n            } else {\n                collector.collectFailures(failure, result);"
            },
            {
              "step": 35,
              "variableName": "result",
              "startLine": 60,
              "startColumn": 39,
              "endLine": 60,
              "endColumn": 45,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/MultipleBuildFailuresExceptionAnalyser.java",
              "type": "ArrayList [<element>] : LocationAwareException",
              "code": "            }\n        }\n        if (result.size() == 1 && result.get(0) instanceof RuntimeException) {\n            return (RuntimeException) result.get(0);\n        } else {\n            return new MultipleBuildFailures(result);\n        }"
            },
            {
              "step": 36,
              "variableName": "result.get(0)",
              "startLine": 60,
              "startColumn": 39,
              "endLine": 60,
              "endColumn": 52,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/MultipleBuildFailuresExceptionAnalyser.java",
              "type": "LocationAwareException",
              "code": "            }\n        }\n        if (result.size() == 1 && result.get(0) instanceof RuntimeException) {\n            return (RuntimeException) result.get(0);\n        } else {\n            return new MultipleBuildFailures(result);\n        }"
            },
            {
              "step": 37,
              "variableName": "(RuntimeException) result.get(0)",
              "startLine": 60,
              "startColumn": 20,
              "endLine": 60,
              "endColumn": 52,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/MultipleBuildFailuresExceptionAnalyser.java",
              "type": "LocationAwareException",
              "code": "            }\n        }\n        if (result.size() == 1 && result.get(0) instanceof RuntimeException) {\n            return (RuntimeException) result.get(0);\n        } else {\n            return new MultipleBuildFailures(result);\n        }"
            },
            {
              "step": 38,
              "variableName": "exceptionAnalyser.transform(finishFailures)",
              "startLine": 72,
              "startColumn": 16,
              "endLine": 72,
              "endColumn": 59,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/internal/buildtree/DefaultBuildTreeFinishExecutor.java",
              "type": "LocationAwareException",
              "code": "            finishFailures.addAll(result.getFailures());\n        });\n\n        return exceptionAnalyser.transform(finishFailures);\n    }\n}\n"
            },
            {
              "step": 39,
              "variableName": "delegate.finishBuildTree(failures)",
              "startLine": 46,
              "startColumn": 28,
              "endLine": 46,
              "endColumn": 62,
              "uri": "gradle-8.14.0/subprojects/composite-builds/src/main/java/org/gradle/composite/internal/OperationFiringBuildTreeFinishExecutor.java",
              "type": "LocationAwareException",
              "code": "            @Override\n            public RuntimeException call(BuildOperationContext context) {\n                try {\n                    return delegate.finishBuildTree(failures);\n                } finally {\n                    context.setResult(RESULT);\n                }"
            },
            {
              "step": 40,
              "variableName": "buildOperation.call(context)",
              "startLine": 239,
              "startColumn": 21,
              "endLine": 239,
              "endColumn": 49,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/testFixtures/java/org/gradle/internal/operations/TestBuildOperationRunner.java",
              "type": "LocationAwareException",
              "code": "            TestBuildOperationContext context = new TestBuildOperationContext(record);\n            T t;\n            try {\n                t = buildOperation.call(context);\n            } catch (Throwable failure) {\n                if (record.failure == null) {\n                    record.failure = failure;"
            },
            {
              "step": 41,
              "variableName": "t",
              "startLine": 246,
              "startColumn": 20,
              "endLine": 246,
              "endColumn": 21,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/testFixtures/java/org/gradle/internal/operations/TestBuildOperationRunner.java",
              "type": "LocationAwareException",
              "code": "                }\n                throw throwAsUncheckedException(failure);\n            }\n            return t;\n        }\n\n        private <O extends BuildOperation> void execute(O buildOperation, BuildOperationWorker<O> worker) {"
            },
            {
              "step": 42,
              "variableName": "log.call(buildOperation)",
              "startLine": 51,
              "startColumn": 16,
              "endLine": 51,
              "endColumn": 40,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/testFixtures/java/org/gradle/internal/operations/TestBuildOperationRunner.java",
              "type": "LocationAwareException",
              "code": "\n    @Override\n    public <T> T call(CallableBuildOperation<T> buildOperation) {\n        return log.call(buildOperation);\n    }\n\n    @Override"
            },
            {
              "step": 43,
              "variableName": "ca",
              "startLine": 115,
              "startColumn": 5,
              "endLine": 121,
              "endColumn": 7,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/configurationcache/ConfigurationCacheBuildOperations.kt",
              "type": "LocationAwareException",
              "code": "\ninternal\nfun <T : Any> BuildOperationRunner.withModelLoadOperation(block: () -> T): T =\n    call(object : CallableBuildOperation<T> {\n        override fun description(): BuildOperationDescriptor.Builder = BuildOperationDescriptor\n            .displayName(\"Load model from configuration cache\")\n            .progressDisplayName(\"Loading model from configuration cache\")"
            },
            {
              "step": 44,
              "variableName": "ca",
              "startLine": 115,
              "startColumn": 5,
              "endLine": 121,
              "endColumn": 7,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/configurationcache/ConfigurationCacheBuildOperations.kt",
              "type": "LocationAwareException",
              "code": "\ninternal\nfun <T : Any> BuildOperationRunner.withModelLoadOperation(block: () -> T): T =\n    call(object : CallableBuildOperation<T> {\n        override fun description(): BuildOperationDescriptor.Builder = BuildOperationDescriptor\n            .displayName(\"Load model from configuration cache\")\n            .progressDisplayName(\"Loading model from configuration cache\")"
            },
            {
              "step": 45,
              "variableName": "b",
              "startLine": 635,
              "startColumn": 9,
              "endLine": 641,
              "endColumn": 10,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "        // No need to record the `ClassLoaderScope` tree when loading\n        scopeRegistryListener.dispose()\n\n        buildOperationRunner.withModelLoadOperation {\n            val storeLoadResult = entryStore.useForStateLoad(StateType.Model) { stateFile: ConfigurationCacheStateFile ->\n                cacheIO.readModelFrom(stateFile)\n            }"
            },
            {
              "step": 46,
              "variableName": "block()",
              "startLine": 668,
              "startColumn": 22,
              "endLine": 668,
              "endColumn": 29,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "    private\n    inline fun <T> runAtConfigurationTime(block: () -> T): T {\n        prepareConfigurationTimeBarrier()\n        val result = block()\n        crossConfigurationTimeBarrier()\n        return result\n    }"
            },
            {
              "step": 47,
              "variableName": "result",
              "startLine": 670,
              "startColumn": 16,
              "endLine": 670,
              "endColumn": 22,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "        prepareConfigurationTimeBarrier()\n        val result = block()\n        crossConfigurationTimeBarrier()\n        return result\n    }\n\n    private"
            },
            {
              "step": 48,
              "variableName": "runAtConfigurationTime(...) : LocationAwareException",
              "startLine": 631,
              "startColumn": 28,
              "endLine": 642,
              "endColumn": 6,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "    data class LoadResultMetadata(val originInvocationId: String? = null)\n\n    private\n    fun loadModel(): Any = runAtConfigurationTime {\n        // No need to record the `ClassLoaderScope` tree when loading\n        scopeRegistryListener.dispose()\n"
            },
            {
              "step": 49,
              "variableName": "loadModel()",
              "startLine": 268,
              "startColumn": 20,
              "endLine": 268,
              "endColumn": 31,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "    override fun <T : Any> loadOrCreateModel(creator: () -> T): T {\n        if (isLoaded) {\n            runLoadedSideEffects()\n            return loadModel().uncheckedCast()\n        }\n\n        return runWorkThatContributesToCacheEntry {"
            },
            {
              "step": 50,
              "variableName": "Any",
              "startLine": 22,
              "startColumn": 15,
              "endLine": 22,
              "endColumn": 18,
              "uri": "gradle-8.14.0/platforms/core-configuration/stdlib-kotlin-extensions/src/main/kotlin/org/gradle/internal/extensions/stdlib/CastExtensions.kt",
              "type": "Object",
              "code": "import org.gradle.internal.Cast\n\n\nfun <T : Any> Any.uncheckedCast(): T =\n    Cast.uncheckedNonnullCast(this)\n"
            },
            {
              "step": 51,
              "variableName": "this",
              "startLine": 23,
              "startColumn": 31,
              "endLine": 23,
              "endColumn": 35,
              "uri": "gradle-8.14.0/platforms/core-configuration/stdlib-kotlin-extensions/src/main/kotlin/org/gradle/internal/extensions/stdlib/CastExtensions.kt",
              "type": "Object",
              "code": "\n\nfun <T : Any> Any.uncheckedCast(): T =\n    Cast.uncheckedNonnullCast(this)\n"
            },
            {
              "step": 52,
              "variableName": "Object object",
              "startLine": 76,
              "startColumn": 46,
              "endLine": 76,
              "endColumn": 59,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/Cast.java",
              "type": "Object",
              "code": "    }\n\n    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})\n    public static <T> T uncheckedNonnullCast(Object object) {\n        return (T) object;\n    }\n}"
            },
            {
              "step": 53,
              "variableName": "(T) object",
              "startLine": 77,
              "startColumn": 16,
              "endLine": 77,
              "endColumn": 26,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/Cast.java",
              "type": "Object",
              "code": "\n    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})\n    public static <T> T uncheckedNonnullCast(Object object) {\n        return (T) object;\n    }\n}\n"
            },
            {
              "step": 54,
              "variableName": "Cast.uncheckedNonnullCast(collectionType)",
              "startLine": 223,
              "startColumn": 16,
              "endLine": 223,
              "endColumn": 57,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/api/internal/provider/AbstractCollectionProperty.java",
              "type": "Class",
              "code": "    @Override\n    @Nonnull\n    public Class<C> getType() {\n        return Cast.uncheckedNonnullCast(collectionType);\n    }\n\n    @Override"
            },
            {
              "step": 55,
              "variableName": "provider.getType()",
              "startLine": 41,
              "startColumn": 35,
              "endLine": 41,
              "endColumn": 53,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/api/internal/provider/OrElseFixedValueProvider.java",
              "type": "Class",
              "code": "    @Nullable\n    @Override\n    public Class<T> getType() {\n        return Cast.uncheckedCast(provider.getType());\n    }\n\n    @Override"
            },
            {
              "step": 56,
              "variableName": "@Nullable Object object",
              "startLine": 71,
              "startColumn": 39,
              "endLine": 71,
              "endColumn": 62,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/Cast.java",
              "type": "Object",
              "code": "\n    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})\n    @Nullable\n    public static <T> T uncheckedCast(@Nullable Object object) {\n        return (T) object;\n    }\n"
            },
            {
              "step": 57,
              "variableName": "(T) object",
              "startLine": 72,
              "startColumn": 16,
              "endLine": 72,
              "endColumn": 26,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/Cast.java",
              "type": "Object",
              "code": "    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})\n    @Nullable\n    public static <T> T uncheckedCast(@Nullable Object object) {\n        return (T) object;\n    }\n\n    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})"
            },
            {
              "step": 58,
              "variableName": "Cast.uncheckedCast(sanitizer.sanitize(t))",
              "startLine": 41,
              "startColumn": 15,
              "endLine": 41,
              "endColumn": 56,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/api/internal/provider/TypeSanitizingTransformer.java",
              "type": "Object",
              "code": "\n    @Override\n    public T transform(T t) {\n        T v = Cast.uncheckedCast(sanitizer.sanitize(t));\n        if (targetType.isInstance(v)) {\n            return v;\n        }"
            },
            {
              "step": 59,
              "variableName": "v",
              "startLine": 43,
              "startColumn": 20,
              "endLine": 43,
              "endColumn": 21,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/api/internal/provider/TypeSanitizingTransformer.java",
              "type": "Object",
              "code": "    public T transform(T t) {\n        T v = Cast.uncheckedCast(sanitizer.sanitize(t));\n        if (targetType.isInstance(v)) {\n            return v;\n        }\n        throw new IllegalArgumentException(String.format(\"Cannot get the value of %s of type %s as the provider associated with this property returned a value of type %s.\", owner.getDisplayName(), targetType.getName(), v.getClass().getName()));\n    }"
            },
            {
              "step": 60,
              "variableName": "definition.transform(registration(path))",
              "startLine": 361,
              "startColumn": 22,
              "endLine": 361,
              "endColumn": 62,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/testFixtures/groovy/org/gradle/model/internal/fixture/ModelRegistryHelperExtension.java",
              "type": "ModelRegistration",
              "code": "    }\n\n    public static void addLink(MutableModelNode node, ModelPath path, Transformer<ModelRegistration, ModelRegistrations.Builder> definition) {\n        node.addLink(definition.transform(registration(path)));\n    }\n\n    public static void addReference(MutableModelNode node, String name, Class<?> type, MutableModelNode target) {"
            },
            {
              "step": 61,
              "variableName": "ModelRegistration registration",
              "startLine": 216,
              "startColumn": 25,
              "endLine": 216,
              "endColumn": 55,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/registry/ModelElementNode.java",
              "type": "ModelRegistration",
              "code": "    }\n\n    @Override\n    public void addLink(ModelRegistration registration) {\n        addNode(new ModelElementNode(modelRegistry, registration, this), registration);\n    }\n"
            },
            {
              "step": 62,
              "variableName": "registration",
              "startLine": 217,
              "startColumn": 74,
              "endLine": 217,
              "endColumn": 86,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/registry/ModelElementNode.java",
              "type": "ModelRegistration",
              "code": "\n    @Override\n    public void addLink(ModelRegistration registration) {\n        addNode(new ModelElementNode(modelRegistry, registration, this), registration);\n    }\n\n    private void addNode(ModelNodeInternal child, ModelRegistration registration) {"
            },
            {
              "step": 63,
              "variableName": "ModelNodeInternal child",
              "startLine": 220,
              "startColumn": 26,
              "endLine": 220,
              "endColumn": 49,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/registry/ModelElementNode.java",
              "type": "ModelNodeInternal",
              "code": "        addNode(new ModelElementNode(modelRegistry, registration, this), registration);\n    }\n\n    private void addNode(ModelNodeInternal child, ModelRegistration registration) {\n        ModelPath childPath = child.getPath();\n        if (!getPath().isDirectChild(childPath)) {\n            throw new IllegalArgumentException(String.format(\"Element registration has a path (%s) which is not a child of this node (%s).\", childPath, getPath()));"
            },
            {
              "step": 64,
              "variableName": "child",
              "startLine": 261,
              "startColumn": 36,
              "endLine": 261,
              "endColumn": 41,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/registry/ModelElementNode.java",
              "type": "ModelNodeInternal",
              "code": "            links = new TreeMap<>();\n        }\n        links.put(child.getPath().getName(), child);\n        modelRegistry.registerNode(child, registration.getActions());\n    }\n\n    @Override"
            },
            {
              "step": 65,
              "variableName": "ModelNodeInternal node",
              "startLine": 120,
              "startColumn": 30,
              "endLine": 120,
              "endColumn": 52,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/registry/DefaultModelRegistry.java",
              "type": "ModelNodeInternal",
              "code": "    }\n\n    @Override\n    public void registerNode(ModelNodeInternal node, Multimap<ModelActionRole, ? extends ModelAction> actions) {\n        // Disabled before 2.3 release due to not wanting to validate task names (which may contain invalid chars), at least not yet\n        // ModelPath.validateName(name);\n        LOGGER.debug(\"Project {} - Registering model element '{}' (hidden = {})\", projectPath, node.getPath(), node.isHidden());"
            },
            {
              "step": 66,
              "variableName": "node",
              "startLine": 124,
              "startColumn": 25,
              "endLine": 124,
              "endColumn": 29,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/registry/DefaultModelRegistry.java",
              "type": "ModelNodeInternal",
              "code": "        // Disabled before 2.3 release due to not wanting to validate task names (which may contain invalid chars), at least not yet\n        // ModelPath.validateName(name);\n        LOGGER.debug(\"Project {} - Registering model element '{}' (hidden = {})\", projectPath, node.getPath(), node.isHidden());\n        addRuleBindings(node, actions);\n        modelGraph.add(node);\n        ruleBindings.nodeCreated(node);\n    }"
            },
            {
              "step": 67,
              "variableName": "node",
              "startLine": 125,
              "startColumn": 24,
              "endLine": 125,
              "endColumn": 28,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/registry/DefaultModelRegistry.java",
              "type": "ModelNodeInternal",
              "code": "        // ModelPath.validateName(name);\n        LOGGER.debug(\"Project {} - Registering model element '{}' (hidden = {})\", projectPath, node.getPath(), node.isHidden());\n        addRuleBindings(node, actions);\n        modelGraph.add(node);\n        ruleBindings.nodeCreated(node);\n    }\n"
            },
            {
              "step": 68,
              "variableName": "node",
              "startLine": 126,
              "startColumn": 34,
              "endLine": 126,
              "endColumn": 38,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/registry/DefaultModelRegistry.java",
              "type": "ModelNodeInternal",
              "code": "        LOGGER.debug(\"Project {} - Registering model element '{}' (hidden = {})\", projectPath, node.getPath(), node.isHidden());\n        addRuleBindings(node, actions);\n        modelGraph.add(node);\n        ruleBindings.nodeCreated(node);\n    }\n\n    private void addRuleBindings(ModelNodeInternal node, Multimap<ModelActionRole, ? extends ModelAction> actions) {"
            },
            {
              "step": 69,
              "variableName": "ModelNodeInternal node",
              "startLine": 44,
              "startColumn": 29,
              "endLine": 44,
              "endColumn": 51,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/registry/RuleBindings.java",
              "type": "ModelNodeInternal",
              "code": "        rulesByInput = new NodeAtStateIndex(\"rulesByInput\");\n    }\n\n    public void nodeCreated(ModelNodeInternal node) {\n        untypedPathReferences.addNode(node);\n    }\n"
            },
            {
              "step": 70,
              "variableName": "node",
              "startLine": 45,
              "startColumn": 39,
              "endLine": 45,
              "endColumn": 43,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/registry/RuleBindings.java",
              "type": "ModelNodeInternal",
              "code": "    }\n\n    public void nodeCreated(ModelNodeInternal node) {\n        untypedPathReferences.addNode(node);\n    }\n\n    public void nodeDiscovered(ModelNodeInternal node) {"
            },
            {
              "step": 71,
              "variableName": "ModelNodeInternal node",
              "startLine": 159,
              "startColumn": 29,
              "endLine": 159,
              "endColumn": 51,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/registry/RuleBindings.java",
              "type": "ModelNodeInternal",
              "code": "    private class PathPredicateIndex {\n        final Map<ModelPath, PredicateMatches> predicates = new LinkedHashMap<>();\n\n        public void addNode(ModelNodeInternal node) {\n            predicatesForPath(node.getPath()).match(node);\n        }\n"
            },
            {
              "step": 72,
              "variableName": "node",
              "startLine": 160,
              "startColumn": 53,
              "endLine": 160,
              "endColumn": 57,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/registry/RuleBindings.java",
              "type": "ModelNodeInternal",
              "code": "        final Map<ModelPath, PredicateMatches> predicates = new LinkedHashMap<>();\n\n        public void addNode(ModelNodeInternal node) {\n            predicatesForPath(node.getPath()).match(node);\n        }\n\n        public void addReference(Reference reference) {"
            },
            {
              "step": 73,
              "variableName": "ModelNodeInternal node",
              "startLine": 137,
              "startColumn": 20,
              "endLine": 137,
              "endColumn": 42,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/registry/RuleBindings.java",
              "type": "ModelNodeInternal",
              "code": "        final List<Reference> references = new ArrayList<Reference>();\n        ModelNodeInternal match;\n\n        void match(ModelNodeInternal node) {\n            for (Reference reference : references) {\n                bound(reference, node);\n            }"
            },
            {
              "step": 74,
              "variableName": "node",
              "startLine": 139,
              "startColumn": 34,
              "endLine": 139,
              "endColumn": 38,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/registry/RuleBindings.java",
              "type": "ModelNodeInternal",
              "code": "\n        void match(ModelNodeInternal node) {\n            for (Reference reference : references) {\n                bound(reference, node);\n            }\n            match = node;\n        }"
            },
            {
              "step": 75,
              "variableName": "ModelNodeInternal node",
              "startLine": 54,
              "startColumn": 45,
              "endLine": 54,
              "endColumn": 67,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/registry/RuleBindings.java",
              "type": "ModelNodeInternal",
              "code": "        scopeReferences.addNodeToScope(node.getPath().getParent(), node);\n    }\n\n    private void bound(Reference reference, ModelNodeInternal node) {\n        ModelBinding binding = reference.binding;\n        binding.onBind(node);\n        reference.index.put(new NodeAtState(node.getPath(), binding.predicate.getState()), reference.owner);"
            },
            {
              "step": 76,
              "variableName": "node",
              "startLine": 56,
              "startColumn": 24,
              "endLine": 56,
              "endColumn": 28,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/registry/RuleBindings.java",
              "type": "ModelNodeInternal",
              "code": "\n    private void bound(Reference reference, ModelNodeInternal node) {\n        ModelBinding binding = reference.binding;\n        binding.onBind(node);\n        reference.index.put(new NodeAtState(node.getPath(), binding.predicate.getState()), reference.owner);\n    }\n"
            },
            {
              "step": 77,
              "variableName": "ModelNodeInternal node",
              "startLine": 70,
              "startColumn": 30,
              "endLine": 70,
              "endColumn": 52,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/registry/ModelBinding.java",
              "type": "ModelNodeInternal",
              "code": "\n    public abstract boolean canBindInState(ModelNode.State state);\n\n    public final void onBind(ModelNodeInternal node) {\n        if (boundTo != null) {\n            ModelRuleDescriptor creatorDescriptor = node.getDescriptor();\n            ModelPath path = node.getPath();"
            },
            {
              "step": 78,
              "variableName": "node",
              "startLine": 79,
              "startColumn": 18,
              "endLine": 79,
              "endColumn": 22,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/registry/ModelBinding.java",
              "type": "ModelNodeInternal",
              "code": "            ));\n        }\n\n        doOnBind(node);\n    }\n\n    protected void doOnBind(ModelNodeInternal node) {"
            },
            {
              "step": 79,
              "variableName": "ModelNodeInternal node",
              "startLine": 40,
              "startColumn": 26,
              "endLine": 40,
              "endColumn": 48,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/registry/PathBinderCreationListener.java",
              "type": "ModelNodeInternal",
              "code": "    }\n\n    @Override\n    public void doOnBind(ModelNodeInternal node) {\n        if (predicate.matches(node)) {\n            boundTo = node;\n            bindAction.execute(this);"
            },
            {
              "step": 80,
              "variableName": "node",
              "startLine": 41,
              "startColumn": 31,
              "endLine": 41,
              "endColumn": 35,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/registry/PathBinderCreationListener.java",
              "type": "ModelNodeInternal",
              "code": "\n    @Override\n    public void doOnBind(ModelNodeInternal node) {\n        if (predicate.matches(node)) {\n            boundTo = node;\n            bindAction.execute(this);\n        } else {"
            },
            {
              "step": 81,
              "variableName": "node",
              "startLine": 46,
              "startColumn": 54,
              "endLine": 46,
              "endColumn": 58,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/registry/PathBinderCreationListener.java",
              "type": "ModelNodeInternal",
              "code": "            bindAction.execute(this);\n        } else {\n            throw new InvalidModelRuleException(referrer, new ModelRuleBindingException(\n                IncompatibleTypeReferenceReporter.of(node, predicate.getReference().getType(), predicate.getReference().getDescription(), writable).asString()\n            ));\n        }\n    }"
            },
            {
              "step": 82,
              "variableName": "String description",
              "startLine": 49,
              "startColumn": 98,
              "endLine": 49,
              "endColumn": 116,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/report/IncompatibleTypeReferenceReporter.java",
              "type": "String",
              "code": "        this.candidateTypes = candidateTypes;\n    }\n\n    public static IncompatibleTypeReferenceReporter of(MutableModelNode node, ModelType<?> type, String description, boolean writable) {\n        ModelPath path = node.getPath();\n        ModelRuleDescriptor creatorDescriptor = node.getDescriptor();\n        return new IncompatibleTypeReferenceReporter("
            },
            {
              "step": 83,
              "variableName": "description",
              "startLine": 53,
              "startColumn": 77,
              "endLine": 53,
              "endColumn": 88,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/report/IncompatibleTypeReferenceReporter.java",
              "type": "String",
              "code": "        ModelPath path = node.getPath();\n        ModelRuleDescriptor creatorDescriptor = node.getDescriptor();\n        return new IncompatibleTypeReferenceReporter(\n            creatorDescriptor.toString(), path.toString(), type.toString(), description, writable,\n            node.getTypeDescriptions()\n        );\n    }"
            },
            {
              "step": 84,
              "variableName": "String description",
              "startLine": 40,
              "startColumn": 88,
              "endLine": 40,
              "endColumn": 106,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/report/IncompatibleTypeReferenceReporter.java",
              "type": "String",
              "code": "    private final boolean writable;\n    private final Iterable<String> candidateTypes;\n\n    public IncompatibleTypeReferenceReporter(String creator, String path, String type, String description, boolean writable, Iterable<String> candidateTypes) {\n        this.creator = creator;\n        this.path = path;\n        this.type = type;"
            },
            {
              "step": 85,
              "variableName": "description",
              "startLine": 44,
              "startColumn": 28,
              "endLine": 44,
              "endColumn": 39,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/report/IncompatibleTypeReferenceReporter.java",
              "type": "String",
              "code": "        this.creator = creator;\n        this.path = path;\n        this.type = type;\n        this.description = description;\n        this.writable = writable;\n        this.candidateTypes = candidateTypes;\n    }"
            },
            {
              "step": 86,
              "variableName": "this",
              "startLine": 44,
              "startColumn": 9,
              "endLine": 44,
              "endColumn": 13,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/report/IncompatibleTypeReferenceReporter.java",
              "type": "IncompatibleTypeReferenceReporter [description] : String",
              "code": "        this.creator = creator;\n        this.path = path;\n        this.type = type;\n        this.description = description;\n        this.writable = writable;\n        this.candidateTypes = candidateTypes;\n    }"
            },
            {
              "step": 87,
              "variableName": "new IncompatibleTypeReferenceReporter(...) : IncompatibleTypeReferenceReporter [description] : String",
              "startLine": 52,
              "startColumn": 16,
              "endLine": 55,
              "endColumn": 10,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/report/IncompatibleTypeReferenceReporter.java",
              "type": "IncompatibleTypeReferenceReporter [description] : String",
              "code": "    public static IncompatibleTypeReferenceReporter of(MutableModelNode node, ModelType<?> type, String description, boolean writable) {\n        ModelPath path = node.getPath();\n        ModelRuleDescriptor creatorDescriptor = node.getDescriptor();\n        return new IncompatibleTypeReferenceReporter(\n            creatorDescriptor.toString(), path.toString(), type.toString(), description, writable,\n            node.getTypeDescriptions()\n        );"
            },
            {
              "step": 88,
              "variableName": "IncompatibleTypeReferenceReporter.of(node, elementType, action.getSubject().getDescription(), true)",
              "startLine": 522,
              "startColumn": 21,
              "endLine": 522,
              "endColumn": 120,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/core/NodeBackedModelMap.java",
              "type": "IncompatibleTypeReferenceReporter [description] : String",
              "code": "            node.ensureAtLeast(ModelNode.State.Discovered);\n            if (!node.canBeViewedAs(elementType)) {\n                throw new InvalidModelRuleException(action.getDescriptor(), new ModelRuleBindingException(\n                    IncompatibleTypeReferenceReporter.of(node, elementType, action.getSubject().getDescription(), true).asString()\n                ));\n            }\n            parent.validateCanBindAction(node, action);"
            },
            {
              "step": 89,
              "variableName": "asString",
              "startLine": 58,
              "startColumn": 19,
              "endLine": 58,
              "endColumn": 27,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/report/IncompatibleTypeReferenceReporter.java",
              "type": "IncompatibleTypeReferenceReporter [description] : String",
              "code": "        );\n    }\n\n    public String asString() {\n        StringWriter string = new StringWriter();\n        writeTo(new PrintWriter(string));\n        return string.toString();"
            },
            {
              "step": 90,
              "variableName": "writeTo(new PrintWriter(string))",
              "startLine": 60,
              "startColumn": 9,
              "endLine": 60,
              "endColumn": 41,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/report/IncompatibleTypeReferenceReporter.java",
              "type": "IncompatibleTypeReferenceReporter [description] : String",
              "code": "\n    public String asString() {\n        StringWriter string = new StringWriter();\n        writeTo(new PrintWriter(string));\n        return string.toString();\n    }\n"
            },
            {
              "step": 91,
              "variableName": "writeTo",
              "startLine": 64,
              "startColumn": 17,
              "endLine": 64,
              "endColumn": 24,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/report/IncompatibleTypeReferenceReporter.java",
              "type": "IncompatibleTypeReferenceReporter [description] : String",
              "code": "        return string.toString();\n    }\n\n    public void writeTo(PrintWriter writer) {\n        //\"type-only model reference of type '%s'%s is ambiguous as multiple model elements are available for this type:%n  %s (created by %s)%n  %s (created by %s)\",\n        writer.print(\"Model reference to element '\");\n        writer.print(path);"
            },
            {
              "step": 92,
              "variableName": "description",
              "startLine": 72,
              "startColumn": 26,
              "endLine": 72,
              "endColumn": 37,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/report/IncompatibleTypeReferenceReporter.java",
              "type": "IncompatibleTypeReferenceReporter [description] : String",
              "code": "        writer.print(type);\n        if (description != null) {\n            writer.print(\" (\");\n            writer.print(description);\n            writer.print(\")\");\n        }\n        writer.println(\" is invalid due to incompatible types.\");"
            },
            {
              "step": 93,
              "variableName": "description",
              "startLine": 72,
              "startColumn": 26,
              "endLine": 72,
              "endColumn": 37,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/report/IncompatibleTypeReferenceReporter.java",
              "type": "",
              "code": "        writer.print(type);\n        if (description != null) {\n            writer.print(\" (\");\n            writer.print(description);\n            writer.print(\")\");\n        }\n        writer.println(\" is invalid due to incompatible types.\");"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "src",
              "startLine": 115,
              "startColumn": 13,
              "endLine": 115,
              "endColumn": 16,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "Object",
              "code": "    }\n\n    private static void appendDisplayName(Object src, StringBuilder stringBuilder) {\n        if (src instanceof Describable) {\n            Describable describable = (Describable) src;\n            stringBuilder.append(describable.getDisplayName());\n        } else {"
            },
            {
              "step": 1,
              "variableName": "src",
              "startLine": 119,
              "startColumn": 34,
              "endLine": 119,
              "endColumn": 37,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "Object",
              "code": "            Describable describable = (Describable) src;\n            stringBuilder.append(describable.getDisplayName());\n        } else {\n            stringBuilder.append(src.toString());\n        }\n    }\n"
            },
            {
              "step": 2,
              "variableName": "toString",
              "startLine": 397,
              "startColumn": 19,
              "endLine": 397,
              "endColumn": 27,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "TestFile",
              "code": "    }\n\n    @Override\n    public String toString() {\n        return getPath();\n    }\n"
            },
            {
              "step": 3,
              "variableName": "getPath()",
              "startLine": 398,
              "startColumn": 16,
              "endLine": 398,
              "endColumn": 25,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "TestFile",
              "code": "\n    @Override\n    public String toString() {\n        return getPath();\n    }\n\n    public TestFile writelns(Iterable<String> lines) {"
            },
            {
              "step": 4,
              "variableName": "getPath()",
              "startLine": 398,
              "startColumn": 16,
              "endLine": 398,
              "endColumn": 25,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "String",
              "code": "\n    @Override\n    public String toString() {\n        return getPath();\n    }\n\n    public TestFile writelns(Iterable<String> lines) {"
            },
            {
              "step": 5,
              "variableName": "src.toString()",
              "startLine": 119,
              "startColumn": 34,
              "endLine": 119,
              "endColumn": 48,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "String",
              "code": "            Describable describable = (Describable) src;\n            stringBuilder.append(describable.getDisplayName());\n        } else {\n            stringBuilder.append(src.toString());\n        }\n    }\n"
            },
            {
              "step": 6,
              "variableName": "stringBuilder",
              "startLine": 119,
              "startColumn": 13,
              "endLine": 119,
              "endColumn": 26,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "StringBuilder",
              "code": "            Describable describable = (Describable) src;\n            stringBuilder.append(describable.getDisplayName());\n        } else {\n            stringBuilder.append(src.toString());\n        }\n    }\n"
            },
            {
              "step": 7,
              "variableName": "builder",
              "startLine": 202,
              "startColumn": 38,
              "endLine": 202,
              "endColumn": 45,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "StringBuilder",
              "code": "            StringBuilder builder = new StringBuilder(48);\n            appendDisplayName(part1, builder);\n            builder.append(' ');\n            appendDisplayName(part2, builder);\n            return builder.toString();\n        }\n"
            },
            {
              "step": 8,
              "variableName": "builder",
              "startLine": 203,
              "startColumn": 20,
              "endLine": 203,
              "endColumn": 27,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "StringBuilder",
              "code": "            appendDisplayName(part1, builder);\n            builder.append(' ');\n            appendDisplayName(part2, builder);\n            return builder.toString();\n        }\n\n        @Override"
            },
            {
              "step": 9,
              "variableName": "builder.toString()",
              "startLine": 203,
              "startColumn": 20,
              "endLine": 203,
              "endColumn": 38,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "String",
              "code": "            appendDisplayName(part1, builder);\n            builder.append(' ');\n            appendDisplayName(part2, builder);\n            return builder.toString();\n        }\n\n        @Override"
            },
            {
              "step": 10,
              "variableName": "describable.getDisplayName()",
              "startLine": 313,
              "startColumn": 35,
              "endLine": 313,
              "endColumn": 63,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "String",
              "code": "        public String getDisplayName() {\n            synchronized (this) {\n                if (displayName == null) {\n                    displayName = describable.getDisplayName();\n                    if (capDisplayName != null || !(describable instanceof DisplayName)) {\n                        describable = null;\n                    }"
            },
            {
              "step": 11,
              "variableName": "displayName",
              "startLine": 318,
              "startColumn": 24,
              "endLine": 318,
              "endColumn": 35,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "String",
              "code": "                        describable = null;\n                    }\n                }\n                return displayName;\n            }\n        }\n    }"
            },
            {
              "step": 12,
              "variableName": "displayName.getDisplayName()",
              "startLine": 772,
              "startColumn": 73,
              "endLine": 772,
              "endColumn": 101,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/configurations/DefaultConfiguration.java",
              "type": "String",
              "code": "                try {\n                    results = resolver.resolveGraph(DefaultConfiguration.this);\n                } catch (Exception e) {\n                    throw exceptionMapper.mapFailure(e, \"dependencies\", displayName.getDisplayName());\n                }\n\n                // Make the new state visible in case a dependency resolution listener queries the result, which requires the new state"
            },
            {
              "step": 13,
              "variableName": "String contextDisplayName",
              "startLine": 68,
              "startColumn": 77,
              "endLine": 68,
              "endColumn": 102,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "String",
              "code": "        return mapFailure(failure, type, displayName);\n    }\n\n    public TypedResolveException mapFailure(Throwable failure, String type, String contextDisplayName) {\n        if (!(failure instanceof TypedResolveException)) {\n            return new TypedResolveException(\n                type,"
            },
            {
              "step": 14,
              "variableName": "contextDisplayName",
              "startLine": 72,
              "startColumn": 17,
              "endLine": 72,
              "endColumn": 35,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "String",
              "code": "        if (!(failure instanceof TypedResolveException)) {\n            return new TypedResolveException(\n                type,\n                contextDisplayName,\n                ImmutableList.of(mapRepositoryOverrideFailure(contextDisplayName, failure))\n            );\n        }"
            },
            {
              "step": 15,
              "variableName": "new TypedResolveException(...) : TypedResolveException",
              "startLine": 70,
              "startColumn": 20,
              "endLine": 74,
              "endColumn": 14,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "TypedResolveException",
              "code": "\n    public TypedResolveException mapFailure(Throwable failure, String type, String contextDisplayName) {\n        if (!(failure instanceof TypedResolveException)) {\n            return new TypedResolveException(\n                type,\n                contextDisplayName,\n                ImmutableList.of(mapRepositoryOverrideFailure(contextDisplayName, failure))"
            },
            {
              "step": 16,
              "variableName": "exceptionMapper.mapFailure(e, \"dependencies\", displayName.getDisplayName())",
              "startLine": 772,
              "startColumn": 27,
              "endLine": 772,
              "endColumn": 102,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/configurations/DefaultConfiguration.java",
              "type": "TypedResolveException",
              "code": "                try {\n                    results = resolver.resolveGraph(DefaultConfiguration.this);\n                } catch (Exception e) {\n                    throw exceptionMapper.mapFailure(e, \"dependencies\", displayName.getDisplayName());\n                }\n\n                // Make the new state visible in case a dependency resolution listener queries the result, which requires the new state"
            },
            {
              "step": 17,
              "variableName": "e",
              "startLine": 772,
              "startColumn": 54,
              "endLine": 772,
              "endColumn": 55,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/configurations/DefaultConfiguration.java",
              "type": "Exception",
              "code": "                try {\n                    results = resolver.resolveGraph(DefaultConfiguration.this);\n                } catch (Exception e) {\n                    throw exceptionMapper.mapFailure(e, \"dependencies\", displayName.getDisplayName());\n                }\n\n                // Make the new state visible in case a dependency resolution listener queries the result, which requires the new state"
            },
            {
              "step": 18,
              "variableName": "Throwable failure",
              "startLine": 68,
              "startColumn": 45,
              "endLine": 68,
              "endColumn": 62,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Throwable",
              "code": "        return mapFailure(failure, type, displayName);\n    }\n\n    public TypedResolveException mapFailure(Throwable failure, String type, String contextDisplayName) {\n        if (!(failure instanceof TypedResolveException)) {\n            return new TypedResolveException(\n                type,"
            },
            {
              "step": 19,
              "variableName": "failure",
              "startLine": 73,
              "startColumn": 83,
              "endLine": 73,
              "endColumn": 90,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Throwable",
              "code": "            return new TypedResolveException(\n                type,\n                contextDisplayName,\n                ImmutableList.of(mapRepositoryOverrideFailure(contextDisplayName, failure))\n            );\n        }\n"
            },
            {
              "step": 20,
              "variableName": "Throwable failure",
              "startLine": 94,
              "startColumn": 78,
              "endLine": 94,
              "endColumn": 95,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Throwable",
              "code": "\n    // TODO: We should handle this exception at the source instead of using instanceof to detect it after it is thrown.\n    //       We should try to avoid catching and analyzing runtime exceptions\n    public Throwable mapRepositoryOverrideFailure(String contextDisplayName, Throwable failure) {\n        if (!(failure instanceof ModuleVersionNotFoundException) || !settingsRepositoriesIgnored()) {\n            return failure;\n        }"
            },
            {
              "step": 21,
              "variableName": "failure",
              "startLine": 108,
              "startColumn": 35,
              "endLine": 108,
              "endColumn": 42,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Throwable",
              "code": "        return new TypedResolveException(\n            \"dependencies\",\n            contextDisplayName,\n            Collections.singleton(failure),\n            resolutions\n        );\n    }"
            },
            {
              "step": 22,
              "variableName": "Collections.singleton(failure)",
              "startLine": 108,
              "startColumn": 13,
              "endLine": 108,
              "endColumn": 43,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Set [<element>] : Throwable",
              "code": "        return new TypedResolveException(\n            \"dependencies\",\n            contextDisplayName,\n            Collections.singleton(failure),\n            resolutions\n        );\n    }"
            },
            {
              "step": 23,
              "variableName": "Collections.singleton(failure)",
              "startLine": 108,
              "startColumn": 13,
              "endLine": 108,
              "endColumn": 43,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Set",
              "code": "        return new TypedResolveException(\n            \"dependencies\",\n            contextDisplayName,\n            Collections.singleton(failure),\n            resolutions\n        );\n    }"
            },
            {
              "step": 24,
              "variableName": "Iterable<? extends Throwable> failures",
              "startLine": 42,
              "startColumn": 67,
              "endLine": 42,
              "endColumn": 105,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ivyservice/TypedResolveException.java",
              "type": "Set",
              "code": "    /**\n     * Creates a new instance with resolutions.\n     */\n    public TypedResolveException(String type, String displayName, Iterable<? extends Throwable> failures, List<String> resolutions) {\n        super(buildMessage(type, displayName), failures, false);\n        this.type = type;\n        this.resolutions = ImmutableList.copyOf(resolutions);"
            },
            {
              "step": 25,
              "variableName": "failures",
              "startLine": 43,
              "startColumn": 48,
              "endLine": 43,
              "endColumn": 56,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ivyservice/TypedResolveException.java",
              "type": "Set",
              "code": "     * Creates a new instance with resolutions.\n     */\n    public TypedResolveException(String type, String displayName, Iterable<? extends Throwable> failures, List<String> resolutions) {\n        super(buildMessage(type, displayName), failures, false);\n        this.type = type;\n        this.resolutions = ImmutableList.copyOf(resolutions);\n    }"
            },
            {
              "step": 26,
              "variableName": "Iterable<? extends Throwable> causes",
              "startLine": 77,
              "startColumn": 48,
              "endLine": 77,
              "endColumn": 84,
              "uri": "gradle-8.14.0/subprojects/core-api/src/main/java/org/gradle/api/artifacts/ResolveException.java",
              "type": "Set",
              "code": "     * @since 8.9\n     */\n    @Incubating\n    protected ResolveException(String message, Iterable<? extends Throwable> causes, @SuppressWarnings(\"unused\") boolean dummy) {\n        super(message, causes);\n    }\n}"
            },
            {
              "step": 27,
              "variableName": "causes",
              "startLine": 78,
              "startColumn": 24,
              "endLine": 78,
              "endColumn": 30,
              "uri": "gradle-8.14.0/subprojects/core-api/src/main/java/org/gradle/api/artifacts/ResolveException.java",
              "type": "Set",
              "code": "     */\n    @Incubating\n    protected ResolveException(String message, Iterable<? extends Throwable> causes, @SuppressWarnings(\"unused\") boolean dummy) {\n        super(message, causes);\n    }\n}\n"
            },
            {
              "step": 28,
              "variableName": "Iterable<? extends Throwable> causes",
              "startLine": 47,
              "startColumn": 55,
              "endLine": 47,
              "endColumn": 91,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "Set",
              "code": "        this.causes.addAll(Arrays.asList(causes));\n    }\n\n    public DefaultMultiCauseException(String message, Iterable<? extends Throwable> causes) {\n        super(message);\n        this.message = message;\n        initCauses(causes);"
            },
            {
              "step": 29,
              "variableName": "causes",
              "startLine": 50,
              "startColumn": 20,
              "endLine": 50,
              "endColumn": 26,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "Set",
              "code": "    public DefaultMultiCauseException(String message, Iterable<? extends Throwable> causes) {\n        super(message);\n        this.message = message;\n        initCauses(causes);\n    }\n\n    public DefaultMultiCauseException(Factory<String> messageFactory) {"
            },
            {
              "step": 30,
              "variableName": "Iterable<? extends Throwable> causes",
              "startLine": 112,
              "startColumn": 28,
              "endLine": 112,
              "endColumn": 64,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "Iterable",
              "code": "        return null;\n    }\n\n    public void initCauses(Iterable<? extends Throwable> causes) {\n        this.causes.clear();\n        for (Throwable cause : causes) {\n            this.causes.add(cause);"
            },
            {
              "step": 31,
              "variableName": "cause",
              "startLine": 115,
              "startColumn": 29,
              "endLine": 115,
              "endColumn": 34,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "Throwable",
              "code": "    public void initCauses(Iterable<? extends Throwable> causes) {\n        this.causes.clear();\n        for (Throwable cause : causes) {\n            this.causes.add(cause);\n        }\n    }\n"
            },
            {
              "step": 32,
              "variableName": "this.causes",
              "startLine": 115,
              "startColumn": 13,
              "endLine": 115,
              "endColumn": 24,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "CopyOnWriteArrayList [<element>] : Throwable",
              "code": "    public void initCauses(Iterable<? extends Throwable> causes) {\n        this.causes.clear();\n        for (Throwable cause : causes) {\n            this.causes.add(cause);\n        }\n    }\n"
            },
            {
              "step": 33,
              "variableName": "this",
              "startLine": 115,
              "startColumn": 13,
              "endLine": 115,
              "endColumn": 17,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "DefaultMultiCauseException [causes, <element>] : Throwable",
              "code": "    public void initCauses(Iterable<? extends Throwable> causes) {\n        this.causes.clear();\n        for (Throwable cause : causes) {\n            this.causes.add(cause);\n        }\n    }\n"
            },
            {
              "step": 34,
              "variableName": "projectConfigurationException",
              "startLine": 57,
              "startColumn": 17,
              "endLine": 57,
              "endColumn": 46,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/DefaultExceptionAnalyser.java",
              "type": "ProjectConfigurationException [causes, <element>] : Throwable",
              "code": "                }\n            }\n            if (!additionalFailures.isEmpty()) {\n                projectConfigurationException.initCauses(additionalFailures);\n                failures.add(transform(projectConfigurationException));\n            }\n        } else if (exception instanceof ServiceCreationException) {"
            },
            {
              "step": 35,
              "variableName": "projectConfigurationException",
              "startLine": 58,
              "startColumn": 40,
              "endLine": 58,
              "endColumn": 69,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/DefaultExceptionAnalyser.java",
              "type": "ProjectConfigurationException [causes, <element>] : Throwable",
              "code": "            }\n            if (!additionalFailures.isEmpty()) {\n                projectConfigurationException.initCauses(additionalFailures);\n                failures.add(transform(projectConfigurationException));\n            }\n        } else if (exception instanceof ServiceCreationException) {\n            failures.add(transform(new InitializationException(exception)));"
            },
            {
              "step": 36,
              "variableName": "transform(projectConfigurationException)",
              "startLine": 58,
              "startColumn": 30,
              "endLine": 58,
              "endColumn": 70,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/DefaultExceptionAnalyser.java",
              "type": "LocationAwareException",
              "code": "            }\n            if (!additionalFailures.isEmpty()) {\n                projectConfigurationException.initCauses(additionalFailures);\n                failures.add(transform(projectConfigurationException));\n            }\n        } else if (exception instanceof ServiceCreationException) {\n            failures.add(transform(new InitializationException(exception)));"
            },
            {
              "step": 37,
              "variableName": "failures",
              "startLine": 58,
              "startColumn": 17,
              "endLine": 58,
              "endColumn": 25,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/DefaultExceptionAnalyser.java",
              "type": "Collection [<element>] : LocationAwareException",
              "code": "            }\n            if (!additionalFailures.isEmpty()) {\n                projectConfigurationException.initCauses(additionalFailures);\n                failures.add(transform(projectConfigurationException));\n            }\n        } else if (exception instanceof ServiceCreationException) {\n            failures.add(transform(new InitializationException(exception)));"
            },
            {
              "step": 38,
              "variableName": "result",
              "startLine": 53,
              "startColumn": 54,
              "endLine": 53,
              "endColumn": 60,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/MultipleBuildFailuresExceptionAnalyser.java",
              "type": "ArrayList [<element>] : LocationAwareException",
              "code": "        for (Throwable failure : failures) {\n            if (failure instanceof MultipleBuildFailures) {\n                for (Throwable cause : ((MultipleBuildFailures) failure).getCauses()) {\n                    collector.collectFailures(cause, result);\n                }\n            } else {\n                collector.collectFailures(failure, result);"
            },
            {
              "step": 39,
              "variableName": "result",
              "startLine": 60,
              "startColumn": 39,
              "endLine": 60,
              "endColumn": 45,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/MultipleBuildFailuresExceptionAnalyser.java",
              "type": "ArrayList [<element>] : LocationAwareException",
              "code": "            }\n        }\n        if (result.size() == 1 && result.get(0) instanceof RuntimeException) {\n            return (RuntimeException) result.get(0);\n        } else {\n            return new MultipleBuildFailures(result);\n        }"
            },
            {
              "step": 40,
              "variableName": "result.get(0)",
              "startLine": 60,
              "startColumn": 39,
              "endLine": 60,
              "endColumn": 52,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/MultipleBuildFailuresExceptionAnalyser.java",
              "type": "LocationAwareException",
              "code": "            }\n        }\n        if (result.size() == 1 && result.get(0) instanceof RuntimeException) {\n            return (RuntimeException) result.get(0);\n        } else {\n            return new MultipleBuildFailures(result);\n        }"
            },
            {
              "step": 41,
              "variableName": "(RuntimeException) result.get(0)",
              "startLine": 60,
              "startColumn": 20,
              "endLine": 60,
              "endColumn": 52,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/MultipleBuildFailuresExceptionAnalyser.java",
              "type": "LocationAwareException",
              "code": "            }\n        }\n        if (result.size() == 1 && result.get(0) instanceof RuntimeException) {\n            return (RuntimeException) result.get(0);\n        } else {\n            return new MultipleBuildFailures(result);\n        }"
            },
            {
              "step": 42,
              "variableName": "exceptionAnalyser.transform(finishFailures)",
              "startLine": 72,
              "startColumn": 16,
              "endLine": 72,
              "endColumn": 59,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/internal/buildtree/DefaultBuildTreeFinishExecutor.java",
              "type": "LocationAwareException",
              "code": "            finishFailures.addAll(result.getFailures());\n        });\n\n        return exceptionAnalyser.transform(finishFailures);\n    }\n}\n"
            },
            {
              "step": 43,
              "variableName": "delegate.finishBuildTree(failures)",
              "startLine": 46,
              "startColumn": 28,
              "endLine": 46,
              "endColumn": 62,
              "uri": "gradle-8.14.0/subprojects/composite-builds/src/main/java/org/gradle/composite/internal/OperationFiringBuildTreeFinishExecutor.java",
              "type": "LocationAwareException",
              "code": "            @Override\n            public RuntimeException call(BuildOperationContext context) {\n                try {\n                    return delegate.finishBuildTree(failures);\n                } finally {\n                    context.setResult(RESULT);\n                }"
            },
            {
              "step": 44,
              "variableName": "buildOperation.call(context)",
              "startLine": 239,
              "startColumn": 21,
              "endLine": 239,
              "endColumn": 49,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/testFixtures/java/org/gradle/internal/operations/TestBuildOperationRunner.java",
              "type": "LocationAwareException",
              "code": "            TestBuildOperationContext context = new TestBuildOperationContext(record);\n            T t;\n            try {\n                t = buildOperation.call(context);\n            } catch (Throwable failure) {\n                if (record.failure == null) {\n                    record.failure = failure;"
            },
            {
              "step": 45,
              "variableName": "t",
              "startLine": 246,
              "startColumn": 20,
              "endLine": 246,
              "endColumn": 21,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/testFixtures/java/org/gradle/internal/operations/TestBuildOperationRunner.java",
              "type": "LocationAwareException",
              "code": "                }\n                throw throwAsUncheckedException(failure);\n            }\n            return t;\n        }\n\n        private <O extends BuildOperation> void execute(O buildOperation, BuildOperationWorker<O> worker) {"
            },
            {
              "step": 46,
              "variableName": "log.call(buildOperation)",
              "startLine": 51,
              "startColumn": 16,
              "endLine": 51,
              "endColumn": 40,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/testFixtures/java/org/gradle/internal/operations/TestBuildOperationRunner.java",
              "type": "LocationAwareException",
              "code": "\n    @Override\n    public <T> T call(CallableBuildOperation<T> buildOperation) {\n        return log.call(buildOperation);\n    }\n\n    @Override"
            },
            {
              "step": 47,
              "variableName": "ca",
              "startLine": 115,
              "startColumn": 5,
              "endLine": 121,
              "endColumn": 7,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/configurationcache/ConfigurationCacheBuildOperations.kt",
              "type": "LocationAwareException",
              "code": "\ninternal\nfun <T : Any> BuildOperationRunner.withModelLoadOperation(block: () -> T): T =\n    call(object : CallableBuildOperation<T> {\n        override fun description(): BuildOperationDescriptor.Builder = BuildOperationDescriptor\n            .displayName(\"Load model from configuration cache\")\n            .progressDisplayName(\"Loading model from configuration cache\")"
            },
            {
              "step": 48,
              "variableName": "ca",
              "startLine": 115,
              "startColumn": 5,
              "endLine": 121,
              "endColumn": 7,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/configurationcache/ConfigurationCacheBuildOperations.kt",
              "type": "LocationAwareException",
              "code": "\ninternal\nfun <T : Any> BuildOperationRunner.withModelLoadOperation(block: () -> T): T =\n    call(object : CallableBuildOperation<T> {\n        override fun description(): BuildOperationDescriptor.Builder = BuildOperationDescriptor\n            .displayName(\"Load model from configuration cache\")\n            .progressDisplayName(\"Loading model from configuration cache\")"
            },
            {
              "step": 49,
              "variableName": "b",
              "startLine": 635,
              "startColumn": 9,
              "endLine": 641,
              "endColumn": 10,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "        // No need to record the `ClassLoaderScope` tree when loading\n        scopeRegistryListener.dispose()\n\n        buildOperationRunner.withModelLoadOperation {\n            val storeLoadResult = entryStore.useForStateLoad(StateType.Model) { stateFile: ConfigurationCacheStateFile ->\n                cacheIO.readModelFrom(stateFile)\n            }"
            },
            {
              "step": 50,
              "variableName": "block()",
              "startLine": 668,
              "startColumn": 22,
              "endLine": 668,
              "endColumn": 29,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "    private\n    inline fun <T> runAtConfigurationTime(block: () -> T): T {\n        prepareConfigurationTimeBarrier()\n        val result = block()\n        crossConfigurationTimeBarrier()\n        return result\n    }"
            },
            {
              "step": 51,
              "variableName": "result",
              "startLine": 670,
              "startColumn": 16,
              "endLine": 670,
              "endColumn": 22,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "        prepareConfigurationTimeBarrier()\n        val result = block()\n        crossConfigurationTimeBarrier()\n        return result\n    }\n\n    private"
            },
            {
              "step": 52,
              "variableName": "runAtConfigurationTime(...) : LocationAwareException",
              "startLine": 631,
              "startColumn": 28,
              "endLine": 642,
              "endColumn": 6,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "    data class LoadResultMetadata(val originInvocationId: String? = null)\n\n    private\n    fun loadModel(): Any = runAtConfigurationTime {\n        // No need to record the `ClassLoaderScope` tree when loading\n        scopeRegistryListener.dispose()\n"
            },
            {
              "step": 53,
              "variableName": "loadModel()",
              "startLine": 268,
              "startColumn": 20,
              "endLine": 268,
              "endColumn": 31,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "    override fun <T : Any> loadOrCreateModel(creator: () -> T): T {\n        if (isLoaded) {\n            runLoadedSideEffects()\n            return loadModel().uncheckedCast()\n        }\n\n        return runWorkThatContributesToCacheEntry {"
            },
            {
              "step": 54,
              "variableName": "Any",
              "startLine": 22,
              "startColumn": 15,
              "endLine": 22,
              "endColumn": 18,
              "uri": "gradle-8.14.0/platforms/core-configuration/stdlib-kotlin-extensions/src/main/kotlin/org/gradle/internal/extensions/stdlib/CastExtensions.kt",
              "type": "Object",
              "code": "import org.gradle.internal.Cast\n\n\nfun <T : Any> Any.uncheckedCast(): T =\n    Cast.uncheckedNonnullCast(this)\n"
            },
            {
              "step": 55,
              "variableName": "this",
              "startLine": 23,
              "startColumn": 31,
              "endLine": 23,
              "endColumn": 35,
              "uri": "gradle-8.14.0/platforms/core-configuration/stdlib-kotlin-extensions/src/main/kotlin/org/gradle/internal/extensions/stdlib/CastExtensions.kt",
              "type": "Object",
              "code": "\n\nfun <T : Any> Any.uncheckedCast(): T =\n    Cast.uncheckedNonnullCast(this)\n"
            },
            {
              "step": 56,
              "variableName": "Object object",
              "startLine": 76,
              "startColumn": 46,
              "endLine": 76,
              "endColumn": 59,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/Cast.java",
              "type": "Object",
              "code": "    }\n\n    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})\n    public static <T> T uncheckedNonnullCast(Object object) {\n        return (T) object;\n    }\n}"
            },
            {
              "step": 57,
              "variableName": "(T) object",
              "startLine": 77,
              "startColumn": 16,
              "endLine": 77,
              "endColumn": 26,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/Cast.java",
              "type": "Object",
              "code": "\n    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})\n    public static <T> T uncheckedNonnullCast(Object object) {\n        return (T) object;\n    }\n}\n"
            },
            {
              "step": 58,
              "variableName": "Cast.uncheckedNonnullCast(collectionType)",
              "startLine": 223,
              "startColumn": 16,
              "endLine": 223,
              "endColumn": 57,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/api/internal/provider/AbstractCollectionProperty.java",
              "type": "Class",
              "code": "    @Override\n    @Nonnull\n    public Class<C> getType() {\n        return Cast.uncheckedNonnullCast(collectionType);\n    }\n\n    @Override"
            },
            {
              "step": 59,
              "variableName": "provider.getType()",
              "startLine": 41,
              "startColumn": 35,
              "endLine": 41,
              "endColumn": 53,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/api/internal/provider/OrElseFixedValueProvider.java",
              "type": "Class",
              "code": "    @Nullable\n    @Override\n    public Class<T> getType() {\n        return Cast.uncheckedCast(provider.getType());\n    }\n\n    @Override"
            },
            {
              "step": 60,
              "variableName": "@Nullable Object object",
              "startLine": 71,
              "startColumn": 39,
              "endLine": 71,
              "endColumn": 62,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/Cast.java",
              "type": "Object",
              "code": "\n    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})\n    @Nullable\n    public static <T> T uncheckedCast(@Nullable Object object) {\n        return (T) object;\n    }\n"
            },
            {
              "step": 61,
              "variableName": "(T) object",
              "startLine": 72,
              "startColumn": 16,
              "endLine": 72,
              "endColumn": 26,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/Cast.java",
              "type": "Object",
              "code": "    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})\n    @Nullable\n    public static <T> T uncheckedCast(@Nullable Object object) {\n        return (T) object;\n    }\n\n    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})"
            },
            {
              "step": 62,
              "variableName": "Cast.uncheckedCast(sanitizer.sanitize(t))",
              "startLine": 41,
              "startColumn": 15,
              "endLine": 41,
              "endColumn": 56,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/api/internal/provider/TypeSanitizingTransformer.java",
              "type": "Object",
              "code": "\n    @Override\n    public T transform(T t) {\n        T v = Cast.uncheckedCast(sanitizer.sanitize(t));\n        if (targetType.isInstance(v)) {\n            return v;\n        }"
            },
            {
              "step": 63,
              "variableName": "v",
              "startLine": 43,
              "startColumn": 20,
              "endLine": 43,
              "endColumn": 21,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/api/internal/provider/TypeSanitizingTransformer.java",
              "type": "Object",
              "code": "    public T transform(T t) {\n        T v = Cast.uncheckedCast(sanitizer.sanitize(t));\n        if (targetType.isInstance(v)) {\n            return v;\n        }\n        throw new IllegalArgumentException(String.format(\"Cannot get the value of %s of type %s as the provider associated with this property returned a value of type %s.\", owner.getDisplayName(), targetType.getName(), v.getClass().getName()));\n    }"
            },
            {
              "step": 64,
              "variableName": "definition.transform(registration(path))",
              "startLine": 361,
              "startColumn": 22,
              "endLine": 361,
              "endColumn": 62,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/testFixtures/groovy/org/gradle/model/internal/fixture/ModelRegistryHelperExtension.java",
              "type": "ModelRegistration",
              "code": "    }\n\n    public static void addLink(MutableModelNode node, ModelPath path, Transformer<ModelRegistration, ModelRegistrations.Builder> definition) {\n        node.addLink(definition.transform(registration(path)));\n    }\n\n    public static void addReference(MutableModelNode node, String name, Class<?> type, MutableModelNode target) {"
            },
            {
              "step": 65,
              "variableName": "ModelRegistration registration",
              "startLine": 216,
              "startColumn": 25,
              "endLine": 216,
              "endColumn": 55,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/registry/ModelElementNode.java",
              "type": "ModelRegistration",
              "code": "    }\n\n    @Override\n    public void addLink(ModelRegistration registration) {\n        addNode(new ModelElementNode(modelRegistry, registration, this), registration);\n    }\n"
            },
            {
              "step": 66,
              "variableName": "registration",
              "startLine": 217,
              "startColumn": 74,
              "endLine": 217,
              "endColumn": 86,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/registry/ModelElementNode.java",
              "type": "ModelRegistration",
              "code": "\n    @Override\n    public void addLink(ModelRegistration registration) {\n        addNode(new ModelElementNode(modelRegistry, registration, this), registration);\n    }\n\n    private void addNode(ModelNodeInternal child, ModelRegistration registration) {"
            },
            {
              "step": 67,
              "variableName": "ModelNodeInternal child",
              "startLine": 220,
              "startColumn": 26,
              "endLine": 220,
              "endColumn": 49,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/registry/ModelElementNode.java",
              "type": "ModelNodeInternal",
              "code": "        addNode(new ModelElementNode(modelRegistry, registration, this), registration);\n    }\n\n    private void addNode(ModelNodeInternal child, ModelRegistration registration) {\n        ModelPath childPath = child.getPath();\n        if (!getPath().isDirectChild(childPath)) {\n            throw new IllegalArgumentException(String.format(\"Element registration has a path (%s) which is not a child of this node (%s).\", childPath, getPath()));"
            },
            {
              "step": 68,
              "variableName": "child",
              "startLine": 261,
              "startColumn": 36,
              "endLine": 261,
              "endColumn": 41,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/registry/ModelElementNode.java",
              "type": "ModelNodeInternal",
              "code": "            links = new TreeMap<>();\n        }\n        links.put(child.getPath().getName(), child);\n        modelRegistry.registerNode(child, registration.getActions());\n    }\n\n    @Override"
            },
            {
              "step": 69,
              "variableName": "ModelNodeInternal node",
              "startLine": 120,
              "startColumn": 30,
              "endLine": 120,
              "endColumn": 52,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/registry/DefaultModelRegistry.java",
              "type": "ModelNodeInternal",
              "code": "    }\n\n    @Override\n    public void registerNode(ModelNodeInternal node, Multimap<ModelActionRole, ? extends ModelAction> actions) {\n        // Disabled before 2.3 release due to not wanting to validate task names (which may contain invalid chars), at least not yet\n        // ModelPath.validateName(name);\n        LOGGER.debug(\"Project {} - Registering model element '{}' (hidden = {})\", projectPath, node.getPath(), node.isHidden());"
            },
            {
              "step": 70,
              "variableName": "node",
              "startLine": 124,
              "startColumn": 25,
              "endLine": 124,
              "endColumn": 29,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/registry/DefaultModelRegistry.java",
              "type": "ModelNodeInternal",
              "code": "        // Disabled before 2.3 release due to not wanting to validate task names (which may contain invalid chars), at least not yet\n        // ModelPath.validateName(name);\n        LOGGER.debug(\"Project {} - Registering model element '{}' (hidden = {})\", projectPath, node.getPath(), node.isHidden());\n        addRuleBindings(node, actions);\n        modelGraph.add(node);\n        ruleBindings.nodeCreated(node);\n    }"
            },
            {
              "step": 71,
              "variableName": "node",
              "startLine": 125,
              "startColumn": 24,
              "endLine": 125,
              "endColumn": 28,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/registry/DefaultModelRegistry.java",
              "type": "ModelNodeInternal",
              "code": "        // ModelPath.validateName(name);\n        LOGGER.debug(\"Project {} - Registering model element '{}' (hidden = {})\", projectPath, node.getPath(), node.isHidden());\n        addRuleBindings(node, actions);\n        modelGraph.add(node);\n        ruleBindings.nodeCreated(node);\n    }\n"
            },
            {
              "step": 72,
              "variableName": "node",
              "startLine": 126,
              "startColumn": 34,
              "endLine": 126,
              "endColumn": 38,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/registry/DefaultModelRegistry.java",
              "type": "ModelNodeInternal",
              "code": "        LOGGER.debug(\"Project {} - Registering model element '{}' (hidden = {})\", projectPath, node.getPath(), node.isHidden());\n        addRuleBindings(node, actions);\n        modelGraph.add(node);\n        ruleBindings.nodeCreated(node);\n    }\n\n    private void addRuleBindings(ModelNodeInternal node, Multimap<ModelActionRole, ? extends ModelAction> actions) {"
            },
            {
              "step": 73,
              "variableName": "ModelNodeInternal node",
              "startLine": 44,
              "startColumn": 29,
              "endLine": 44,
              "endColumn": 51,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/registry/RuleBindings.java",
              "type": "ModelNodeInternal",
              "code": "        rulesByInput = new NodeAtStateIndex(\"rulesByInput\");\n    }\n\n    public void nodeCreated(ModelNodeInternal node) {\n        untypedPathReferences.addNode(node);\n    }\n"
            },
            {
              "step": 74,
              "variableName": "node",
              "startLine": 45,
              "startColumn": 39,
              "endLine": 45,
              "endColumn": 43,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/registry/RuleBindings.java",
              "type": "ModelNodeInternal",
              "code": "    }\n\n    public void nodeCreated(ModelNodeInternal node) {\n        untypedPathReferences.addNode(node);\n    }\n\n    public void nodeDiscovered(ModelNodeInternal node) {"
            },
            {
              "step": 75,
              "variableName": "ModelNodeInternal node",
              "startLine": 159,
              "startColumn": 29,
              "endLine": 159,
              "endColumn": 51,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/registry/RuleBindings.java",
              "type": "ModelNodeInternal",
              "code": "    private class PathPredicateIndex {\n        final Map<ModelPath, PredicateMatches> predicates = new LinkedHashMap<>();\n\n        public void addNode(ModelNodeInternal node) {\n            predicatesForPath(node.getPath()).match(node);\n        }\n"
            },
            {
              "step": 76,
              "variableName": "node",
              "startLine": 160,
              "startColumn": 53,
              "endLine": 160,
              "endColumn": 57,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/registry/RuleBindings.java",
              "type": "ModelNodeInternal",
              "code": "        final Map<ModelPath, PredicateMatches> predicates = new LinkedHashMap<>();\n\n        public void addNode(ModelNodeInternal node) {\n            predicatesForPath(node.getPath()).match(node);\n        }\n\n        public void addReference(Reference reference) {"
            },
            {
              "step": 77,
              "variableName": "ModelNodeInternal node",
              "startLine": 137,
              "startColumn": 20,
              "endLine": 137,
              "endColumn": 42,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/registry/RuleBindings.java",
              "type": "ModelNodeInternal",
              "code": "        final List<Reference> references = new ArrayList<Reference>();\n        ModelNodeInternal match;\n\n        void match(ModelNodeInternal node) {\n            for (Reference reference : references) {\n                bound(reference, node);\n            }"
            },
            {
              "step": 78,
              "variableName": "node",
              "startLine": 139,
              "startColumn": 34,
              "endLine": 139,
              "endColumn": 38,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/registry/RuleBindings.java",
              "type": "ModelNodeInternal",
              "code": "\n        void match(ModelNodeInternal node) {\n            for (Reference reference : references) {\n                bound(reference, node);\n            }\n            match = node;\n        }"
            },
            {
              "step": 79,
              "variableName": "ModelNodeInternal node",
              "startLine": 54,
              "startColumn": 45,
              "endLine": 54,
              "endColumn": 67,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/registry/RuleBindings.java",
              "type": "ModelNodeInternal",
              "code": "        scopeReferences.addNodeToScope(node.getPath().getParent(), node);\n    }\n\n    private void bound(Reference reference, ModelNodeInternal node) {\n        ModelBinding binding = reference.binding;\n        binding.onBind(node);\n        reference.index.put(new NodeAtState(node.getPath(), binding.predicate.getState()), reference.owner);"
            },
            {
              "step": 80,
              "variableName": "node",
              "startLine": 56,
              "startColumn": 24,
              "endLine": 56,
              "endColumn": 28,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/registry/RuleBindings.java",
              "type": "ModelNodeInternal",
              "code": "\n    private void bound(Reference reference, ModelNodeInternal node) {\n        ModelBinding binding = reference.binding;\n        binding.onBind(node);\n        reference.index.put(new NodeAtState(node.getPath(), binding.predicate.getState()), reference.owner);\n    }\n"
            },
            {
              "step": 81,
              "variableName": "ModelNodeInternal node",
              "startLine": 70,
              "startColumn": 30,
              "endLine": 70,
              "endColumn": 52,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/registry/ModelBinding.java",
              "type": "ModelNodeInternal",
              "code": "\n    public abstract boolean canBindInState(ModelNode.State state);\n\n    public final void onBind(ModelNodeInternal node) {\n        if (boundTo != null) {\n            ModelRuleDescriptor creatorDescriptor = node.getDescriptor();\n            ModelPath path = node.getPath();"
            },
            {
              "step": 82,
              "variableName": "node",
              "startLine": 79,
              "startColumn": 18,
              "endLine": 79,
              "endColumn": 22,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/registry/ModelBinding.java",
              "type": "ModelNodeInternal",
              "code": "            ));\n        }\n\n        doOnBind(node);\n    }\n\n    protected void doOnBind(ModelNodeInternal node) {"
            },
            {
              "step": 83,
              "variableName": "ModelNodeInternal node",
              "startLine": 40,
              "startColumn": 26,
              "endLine": 40,
              "endColumn": 48,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/registry/PathBinderCreationListener.java",
              "type": "ModelNodeInternal",
              "code": "    }\n\n    @Override\n    public void doOnBind(ModelNodeInternal node) {\n        if (predicate.matches(node)) {\n            boundTo = node;\n            bindAction.execute(this);"
            },
            {
              "step": 84,
              "variableName": "node",
              "startLine": 41,
              "startColumn": 31,
              "endLine": 41,
              "endColumn": 35,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/registry/PathBinderCreationListener.java",
              "type": "ModelNodeInternal",
              "code": "\n    @Override\n    public void doOnBind(ModelNodeInternal node) {\n        if (predicate.matches(node)) {\n            boundTo = node;\n            bindAction.execute(this);\n        } else {"
            },
            {
              "step": 85,
              "variableName": "node",
              "startLine": 46,
              "startColumn": 54,
              "endLine": 46,
              "endColumn": 58,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/registry/PathBinderCreationListener.java",
              "type": "ModelNodeInternal",
              "code": "            bindAction.execute(this);\n        } else {\n            throw new InvalidModelRuleException(referrer, new ModelRuleBindingException(\n                IncompatibleTypeReferenceReporter.of(node, predicate.getReference().getType(), predicate.getReference().getDescription(), writable).asString()\n            ));\n        }\n    }"
            },
            {
              "step": 86,
              "variableName": "String description",
              "startLine": 49,
              "startColumn": 98,
              "endLine": 49,
              "endColumn": 116,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/report/IncompatibleTypeReferenceReporter.java",
              "type": "String",
              "code": "        this.candidateTypes = candidateTypes;\n    }\n\n    public static IncompatibleTypeReferenceReporter of(MutableModelNode node, ModelType<?> type, String description, boolean writable) {\n        ModelPath path = node.getPath();\n        ModelRuleDescriptor creatorDescriptor = node.getDescriptor();\n        return new IncompatibleTypeReferenceReporter("
            },
            {
              "step": 87,
              "variableName": "description",
              "startLine": 53,
              "startColumn": 77,
              "endLine": 53,
              "endColumn": 88,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/report/IncompatibleTypeReferenceReporter.java",
              "type": "String",
              "code": "        ModelPath path = node.getPath();\n        ModelRuleDescriptor creatorDescriptor = node.getDescriptor();\n        return new IncompatibleTypeReferenceReporter(\n            creatorDescriptor.toString(), path.toString(), type.toString(), description, writable,\n            node.getTypeDescriptions()\n        );\n    }"
            },
            {
              "step": 88,
              "variableName": "String description",
              "startLine": 40,
              "startColumn": 88,
              "endLine": 40,
              "endColumn": 106,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/report/IncompatibleTypeReferenceReporter.java",
              "type": "String",
              "code": "    private final boolean writable;\n    private final Iterable<String> candidateTypes;\n\n    public IncompatibleTypeReferenceReporter(String creator, String path, String type, String description, boolean writable, Iterable<String> candidateTypes) {\n        this.creator = creator;\n        this.path = path;\n        this.type = type;"
            },
            {
              "step": 89,
              "variableName": "description",
              "startLine": 44,
              "startColumn": 28,
              "endLine": 44,
              "endColumn": 39,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/report/IncompatibleTypeReferenceReporter.java",
              "type": "String",
              "code": "        this.creator = creator;\n        this.path = path;\n        this.type = type;\n        this.description = description;\n        this.writable = writable;\n        this.candidateTypes = candidateTypes;\n    }"
            },
            {
              "step": 90,
              "variableName": "this",
              "startLine": 44,
              "startColumn": 9,
              "endLine": 44,
              "endColumn": 13,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/report/IncompatibleTypeReferenceReporter.java",
              "type": "IncompatibleTypeReferenceReporter [description] : String",
              "code": "        this.creator = creator;\n        this.path = path;\n        this.type = type;\n        this.description = description;\n        this.writable = writable;\n        this.candidateTypes = candidateTypes;\n    }"
            },
            {
              "step": 91,
              "variableName": "new IncompatibleTypeReferenceReporter(...) : IncompatibleTypeReferenceReporter [description] : String",
              "startLine": 52,
              "startColumn": 16,
              "endLine": 55,
              "endColumn": 10,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/report/IncompatibleTypeReferenceReporter.java",
              "type": "IncompatibleTypeReferenceReporter [description] : String",
              "code": "    public static IncompatibleTypeReferenceReporter of(MutableModelNode node, ModelType<?> type, String description, boolean writable) {\n        ModelPath path = node.getPath();\n        ModelRuleDescriptor creatorDescriptor = node.getDescriptor();\n        return new IncompatibleTypeReferenceReporter(\n            creatorDescriptor.toString(), path.toString(), type.toString(), description, writable,\n            node.getTypeDescriptions()\n        );"
            },
            {
              "step": 92,
              "variableName": "IncompatibleTypeReferenceReporter.of(node, elementType, action.getSubject().getDescription(), true)",
              "startLine": 522,
              "startColumn": 21,
              "endLine": 522,
              "endColumn": 120,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/core/NodeBackedModelMap.java",
              "type": "IncompatibleTypeReferenceReporter [description] : String",
              "code": "            node.ensureAtLeast(ModelNode.State.Discovered);\n            if (!node.canBeViewedAs(elementType)) {\n                throw new InvalidModelRuleException(action.getDescriptor(), new ModelRuleBindingException(\n                    IncompatibleTypeReferenceReporter.of(node, elementType, action.getSubject().getDescription(), true).asString()\n                ));\n            }\n            parent.validateCanBindAction(node, action);"
            },
            {
              "step": 93,
              "variableName": "asString",
              "startLine": 58,
              "startColumn": 19,
              "endLine": 58,
              "endColumn": 27,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/report/IncompatibleTypeReferenceReporter.java",
              "type": "IncompatibleTypeReferenceReporter [description] : String",
              "code": "        );\n    }\n\n    public String asString() {\n        StringWriter string = new StringWriter();\n        writeTo(new PrintWriter(string));\n        return string.toString();"
            },
            {
              "step": 94,
              "variableName": "writeTo(new PrintWriter(string))",
              "startLine": 60,
              "startColumn": 9,
              "endLine": 60,
              "endColumn": 41,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/report/IncompatibleTypeReferenceReporter.java",
              "type": "IncompatibleTypeReferenceReporter [description] : String",
              "code": "\n    public String asString() {\n        StringWriter string = new StringWriter();\n        writeTo(new PrintWriter(string));\n        return string.toString();\n    }\n"
            },
            {
              "step": 95,
              "variableName": "writeTo",
              "startLine": 64,
              "startColumn": 17,
              "endLine": 64,
              "endColumn": 24,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/report/IncompatibleTypeReferenceReporter.java",
              "type": "IncompatibleTypeReferenceReporter [description] : String",
              "code": "        return string.toString();\n    }\n\n    public void writeTo(PrintWriter writer) {\n        //\"type-only model reference of type '%s'%s is ambiguous as multiple model elements are available for this type:%n  %s (created by %s)%n  %s (created by %s)\",\n        writer.print(\"Model reference to element '\");\n        writer.print(path);"
            },
            {
              "step": 96,
              "variableName": "description",
              "startLine": 72,
              "startColumn": 26,
              "endLine": 72,
              "endColumn": 37,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/report/IncompatibleTypeReferenceReporter.java",
              "type": "IncompatibleTypeReferenceReporter [description] : String",
              "code": "        writer.print(type);\n        if (description != null) {\n            writer.print(\" (\");\n            writer.print(description);\n            writer.print(\")\");\n        }\n        writer.println(\" is invalid due to incompatible types.\");"
            },
            {
              "step": 97,
              "variableName": "description",
              "startLine": 72,
              "startColumn": 26,
              "endLine": 72,
              "endColumn": 37,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/report/IncompatibleTypeReferenceReporter.java",
              "type": "",
              "code": "        writer.print(type);\n        if (description != null) {\n            writer.print(\" (\");\n            writer.print(description);\n            writer.print(\")\");\n        }\n        writer.println(\" is invalid due to incompatible types.\");"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 2,
      "fileName": "IncompatibleTypeReferenceReporter.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "source",
              "startLine": 44,
              "startColumn": 25,
              "endLine": 44,
              "endColumn": 31,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/RegExpNameMapper.java",
              "type": "String",
              "code": "        } else {\n            matcher.reset(source);\n        }\n        String result = source;\n        if (matcher.find()) {\n            result = matcher.replaceFirst(replacement);\n        }"
            },
            {
              "step": 1,
              "variableName": "result",
              "startLine": 48,
              "startColumn": 16,
              "endLine": 48,
              "endColumn": 22,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/RegExpNameMapper.java",
              "type": "String",
              "code": "        if (matcher.find()) {\n            result = matcher.replaceFirst(replacement);\n        }\n        return result;\n    }\n}\n"
            },
            {
              "step": 2,
              "variableName": "transformer.transform(value)",
              "startLine": 37,
              "startColumn": 31,
              "endLine": 37,
              "endColumn": 59,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/ChainingTransformer.java",
              "type": "String",
              "code": "    public T transform(T original) {\n        T value = original;\n        for (Transformer<T, T> transformer : transformers) {\n            value = type.cast(transformer.transform(value));\n        }\n        return value;\n    }"
            },
            {
              "step": 3,
              "variableName": "type.cast(transformer.transform(value))",
              "startLine": 37,
              "startColumn": 21,
              "endLine": 37,
              "endColumn": 60,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/ChainingTransformer.java",
              "type": "String",
              "code": "    public T transform(T original) {\n        T value = original;\n        for (Transformer<T, T> transformer : transformers) {\n            value = type.cast(transformer.transform(value));\n        }\n        return value;\n    }"
            },
            {
              "step": 4,
              "variableName": "value",
              "startLine": 39,
              "startColumn": 16,
              "endLine": 39,
              "endColumn": 21,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/ChainingTransformer.java",
              "type": "String",
              "code": "        for (Transformer<T, T> transformer : transformers) {\n            value = type.cast(transformer.transform(value));\n        }\n        return value;\n    }\n\n    public void add(Transformer<T, T> transformer) {"
            },
            {
              "step": 5,
              "variableName": "describer.transform(this)",
              "startLine": 163,
              "startColumn": 16,
              "endLine": 163,
              "endColumn": 41,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/repositories/DefaultMavenArtifactRepository.java",
              "type": "String",
              "code": "\n    @Override\n    public String getDisplayName() {\n        return describer.transform(this);\n    }\n\n    @Override"
            },
            {
              "step": 6,
              "variableName": "describable.getDisplayName()",
              "startLine": 313,
              "startColumn": 35,
              "endLine": 313,
              "endColumn": 63,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "String",
              "code": "        public String getDisplayName() {\n            synchronized (this) {\n                if (displayName == null) {\n                    displayName = describable.getDisplayName();\n                    if (capDisplayName != null || !(describable instanceof DisplayName)) {\n                        describable = null;\n                    }"
            },
            {
              "step": 7,
              "variableName": "displayName",
              "startLine": 318,
              "startColumn": 24,
              "endLine": 318,
              "endColumn": 35,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "String",
              "code": "                        describable = null;\n                    }\n                }\n                return displayName;\n            }\n        }\n    }"
            },
            {
              "step": 8,
              "variableName": "displayName.getDisplayName()",
              "startLine": 772,
              "startColumn": 73,
              "endLine": 772,
              "endColumn": 101,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/configurations/DefaultConfiguration.java",
              "type": "String",
              "code": "                try {\n                    results = resolver.resolveGraph(DefaultConfiguration.this);\n                } catch (Exception e) {\n                    throw exceptionMapper.mapFailure(e, \"dependencies\", displayName.getDisplayName());\n                }\n\n                // Make the new state visible in case a dependency resolution listener queries the result, which requires the new state"
            },
            {
              "step": 9,
              "variableName": "String contextDisplayName",
              "startLine": 68,
              "startColumn": 77,
              "endLine": 68,
              "endColumn": 102,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "String",
              "code": "        return mapFailure(failure, type, displayName);\n    }\n\n    public TypedResolveException mapFailure(Throwable failure, String type, String contextDisplayName) {\n        if (!(failure instanceof TypedResolveException)) {\n            return new TypedResolveException(\n                type,"
            },
            {
              "step": 10,
              "variableName": "contextDisplayName",
              "startLine": 72,
              "startColumn": 17,
              "endLine": 72,
              "endColumn": 35,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "String",
              "code": "        if (!(failure instanceof TypedResolveException)) {\n            return new TypedResolveException(\n                type,\n                contextDisplayName,\n                ImmutableList.of(mapRepositoryOverrideFailure(contextDisplayName, failure))\n            );\n        }"
            },
            {
              "step": 11,
              "variableName": "new TypedResolveException(...) : TypedResolveException",
              "startLine": 70,
              "startColumn": 20,
              "endLine": 74,
              "endColumn": 14,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "TypedResolveException",
              "code": "\n    public TypedResolveException mapFailure(Throwable failure, String type, String contextDisplayName) {\n        if (!(failure instanceof TypedResolveException)) {\n            return new TypedResolveException(\n                type,\n                contextDisplayName,\n                ImmutableList.of(mapRepositoryOverrideFailure(contextDisplayName, failure))"
            },
            {
              "step": 12,
              "variableName": "exceptionMapper.mapFailure(e, \"dependencies\", displayName.getDisplayName())",
              "startLine": 772,
              "startColumn": 27,
              "endLine": 772,
              "endColumn": 102,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/configurations/DefaultConfiguration.java",
              "type": "TypedResolveException",
              "code": "                try {\n                    results = resolver.resolveGraph(DefaultConfiguration.this);\n                } catch (Exception e) {\n                    throw exceptionMapper.mapFailure(e, \"dependencies\", displayName.getDisplayName());\n                }\n\n                // Make the new state visible in case a dependency resolution listener queries the result, which requires the new state"
            },
            {
              "step": 13,
              "variableName": "e",
              "startLine": 772,
              "startColumn": 54,
              "endLine": 772,
              "endColumn": 55,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/configurations/DefaultConfiguration.java",
              "type": "Exception",
              "code": "                try {\n                    results = resolver.resolveGraph(DefaultConfiguration.this);\n                } catch (Exception e) {\n                    throw exceptionMapper.mapFailure(e, \"dependencies\", displayName.getDisplayName());\n                }\n\n                // Make the new state visible in case a dependency resolution listener queries the result, which requires the new state"
            },
            {
              "step": 14,
              "variableName": "Throwable failure",
              "startLine": 68,
              "startColumn": 45,
              "endLine": 68,
              "endColumn": 62,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Throwable",
              "code": "        return mapFailure(failure, type, displayName);\n    }\n\n    public TypedResolveException mapFailure(Throwable failure, String type, String contextDisplayName) {\n        if (!(failure instanceof TypedResolveException)) {\n            return new TypedResolveException(\n                type,"
            },
            {
              "step": 15,
              "variableName": "failure",
              "startLine": 73,
              "startColumn": 83,
              "endLine": 73,
              "endColumn": 90,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Throwable",
              "code": "            return new TypedResolveException(\n                type,\n                contextDisplayName,\n                ImmutableList.of(mapRepositoryOverrideFailure(contextDisplayName, failure))\n            );\n        }\n"
            },
            {
              "step": 16,
              "variableName": "Throwable failure",
              "startLine": 94,
              "startColumn": 78,
              "endLine": 94,
              "endColumn": 95,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Throwable",
              "code": "\n    // TODO: We should handle this exception at the source instead of using instanceof to detect it after it is thrown.\n    //       We should try to avoid catching and analyzing runtime exceptions\n    public Throwable mapRepositoryOverrideFailure(String contextDisplayName, Throwable failure) {\n        if (!(failure instanceof ModuleVersionNotFoundException) || !settingsRepositoriesIgnored()) {\n            return failure;\n        }"
            },
            {
              "step": 17,
              "variableName": "failure",
              "startLine": 108,
              "startColumn": 35,
              "endLine": 108,
              "endColumn": 42,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Throwable",
              "code": "        return new TypedResolveException(\n            \"dependencies\",\n            contextDisplayName,\n            Collections.singleton(failure),\n            resolutions\n        );\n    }"
            },
            {
              "step": 18,
              "variableName": "Collections.singleton(failure)",
              "startLine": 108,
              "startColumn": 13,
              "endLine": 108,
              "endColumn": 43,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Set [<element>] : Throwable",
              "code": "        return new TypedResolveException(\n            \"dependencies\",\n            contextDisplayName,\n            Collections.singleton(failure),\n            resolutions\n        );\n    }"
            },
            {
              "step": 19,
              "variableName": "Collections.singleton(failure)",
              "startLine": 108,
              "startColumn": 13,
              "endLine": 108,
              "endColumn": 43,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Set",
              "code": "        return new TypedResolveException(\n            \"dependencies\",\n            contextDisplayName,\n            Collections.singleton(failure),\n            resolutions\n        );\n    }"
            },
            {
              "step": 20,
              "variableName": "Iterable<? extends Throwable> failures",
              "startLine": 42,
              "startColumn": 67,
              "endLine": 42,
              "endColumn": 105,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ivyservice/TypedResolveException.java",
              "type": "Set",
              "code": "    /**\n     * Creates a new instance with resolutions.\n     */\n    public TypedResolveException(String type, String displayName, Iterable<? extends Throwable> failures, List<String> resolutions) {\n        super(buildMessage(type, displayName), failures, false);\n        this.type = type;\n        this.resolutions = ImmutableList.copyOf(resolutions);"
            },
            {
              "step": 21,
              "variableName": "failures",
              "startLine": 43,
              "startColumn": 48,
              "endLine": 43,
              "endColumn": 56,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ivyservice/TypedResolveException.java",
              "type": "Set",
              "code": "     * Creates a new instance with resolutions.\n     */\n    public TypedResolveException(String type, String displayName, Iterable<? extends Throwable> failures, List<String> resolutions) {\n        super(buildMessage(type, displayName), failures, false);\n        this.type = type;\n        this.resolutions = ImmutableList.copyOf(resolutions);\n    }"
            },
            {
              "step": 22,
              "variableName": "Iterable<? extends Throwable> causes",
              "startLine": 77,
              "startColumn": 48,
              "endLine": 77,
              "endColumn": 84,
              "uri": "gradle-8.14.0/subprojects/core-api/src/main/java/org/gradle/api/artifacts/ResolveException.java",
              "type": "Set",
              "code": "     * @since 8.9\n     */\n    @Incubating\n    protected ResolveException(String message, Iterable<? extends Throwable> causes, @SuppressWarnings(\"unused\") boolean dummy) {\n        super(message, causes);\n    }\n}"
            },
            {
              "step": 23,
              "variableName": "causes",
              "startLine": 78,
              "startColumn": 24,
              "endLine": 78,
              "endColumn": 30,
              "uri": "gradle-8.14.0/subprojects/core-api/src/main/java/org/gradle/api/artifacts/ResolveException.java",
              "type": "Set",
              "code": "     */\n    @Incubating\n    protected ResolveException(String message, Iterable<? extends Throwable> causes, @SuppressWarnings(\"unused\") boolean dummy) {\n        super(message, causes);\n    }\n}\n"
            },
            {
              "step": 24,
              "variableName": "Iterable<? extends Throwable> causes",
              "startLine": 47,
              "startColumn": 55,
              "endLine": 47,
              "endColumn": 91,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "Set",
              "code": "        this.causes.addAll(Arrays.asList(causes));\n    }\n\n    public DefaultMultiCauseException(String message, Iterable<? extends Throwable> causes) {\n        super(message);\n        this.message = message;\n        initCauses(causes);"
            },
            {
              "step": 25,
              "variableName": "causes",
              "startLine": 50,
              "startColumn": 20,
              "endLine": 50,
              "endColumn": 26,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "Set",
              "code": "    public DefaultMultiCauseException(String message, Iterable<? extends Throwable> causes) {\n        super(message);\n        this.message = message;\n        initCauses(causes);\n    }\n\n    public DefaultMultiCauseException(Factory<String> messageFactory) {"
            },
            {
              "step": 26,
              "variableName": "Iterable<? extends Throwable> causes",
              "startLine": 112,
              "startColumn": 28,
              "endLine": 112,
              "endColumn": 64,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "Iterable",
              "code": "        return null;\n    }\n\n    public void initCauses(Iterable<? extends Throwable> causes) {\n        this.causes.clear();\n        for (Throwable cause : causes) {\n            this.causes.add(cause);"
            },
            {
              "step": 27,
              "variableName": "cause",
              "startLine": 115,
              "startColumn": 29,
              "endLine": 115,
              "endColumn": 34,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "Throwable",
              "code": "    public void initCauses(Iterable<? extends Throwable> causes) {\n        this.causes.clear();\n        for (Throwable cause : causes) {\n            this.causes.add(cause);\n        }\n    }\n"
            },
            {
              "step": 28,
              "variableName": "this.causes",
              "startLine": 115,
              "startColumn": 13,
              "endLine": 115,
              "endColumn": 24,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "CopyOnWriteArrayList [<element>] : Throwable",
              "code": "    public void initCauses(Iterable<? extends Throwable> causes) {\n        this.causes.clear();\n        for (Throwable cause : causes) {\n            this.causes.add(cause);\n        }\n    }\n"
            },
            {
              "step": 29,
              "variableName": "this",
              "startLine": 115,
              "startColumn": 13,
              "endLine": 115,
              "endColumn": 17,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "DefaultMultiCauseException [causes, <element>] : Throwable",
              "code": "    public void initCauses(Iterable<? extends Throwable> causes) {\n        this.causes.clear();\n        for (Throwable cause : causes) {\n            this.causes.add(cause);\n        }\n    }\n"
            },
            {
              "step": 30,
              "variableName": "projectConfigurationException",
              "startLine": 57,
              "startColumn": 17,
              "endLine": 57,
              "endColumn": 46,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/DefaultExceptionAnalyser.java",
              "type": "ProjectConfigurationException [causes, <element>] : Throwable",
              "code": "                }\n            }\n            if (!additionalFailures.isEmpty()) {\n                projectConfigurationException.initCauses(additionalFailures);\n                failures.add(transform(projectConfigurationException));\n            }\n        } else if (exception instanceof ServiceCreationException) {"
            },
            {
              "step": 31,
              "variableName": "projectConfigurationException",
              "startLine": 58,
              "startColumn": 40,
              "endLine": 58,
              "endColumn": 69,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/DefaultExceptionAnalyser.java",
              "type": "ProjectConfigurationException [causes, <element>] : Throwable",
              "code": "            }\n            if (!additionalFailures.isEmpty()) {\n                projectConfigurationException.initCauses(additionalFailures);\n                failures.add(transform(projectConfigurationException));\n            }\n        } else if (exception instanceof ServiceCreationException) {\n            failures.add(transform(new InitializationException(exception)));"
            },
            {
              "step": 32,
              "variableName": "transform(projectConfigurationException)",
              "startLine": 58,
              "startColumn": 30,
              "endLine": 58,
              "endColumn": 70,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/DefaultExceptionAnalyser.java",
              "type": "LocationAwareException",
              "code": "            }\n            if (!additionalFailures.isEmpty()) {\n                projectConfigurationException.initCauses(additionalFailures);\n                failures.add(transform(projectConfigurationException));\n            }\n        } else if (exception instanceof ServiceCreationException) {\n            failures.add(transform(new InitializationException(exception)));"
            },
            {
              "step": 33,
              "variableName": "failures",
              "startLine": 58,
              "startColumn": 17,
              "endLine": 58,
              "endColumn": 25,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/DefaultExceptionAnalyser.java",
              "type": "Collection [<element>] : LocationAwareException",
              "code": "            }\n            if (!additionalFailures.isEmpty()) {\n                projectConfigurationException.initCauses(additionalFailures);\n                failures.add(transform(projectConfigurationException));\n            }\n        } else if (exception instanceof ServiceCreationException) {\n            failures.add(transform(new InitializationException(exception)));"
            },
            {
              "step": 34,
              "variableName": "result",
              "startLine": 53,
              "startColumn": 54,
              "endLine": 53,
              "endColumn": 60,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/MultipleBuildFailuresExceptionAnalyser.java",
              "type": "ArrayList [<element>] : LocationAwareException",
              "code": "        for (Throwable failure : failures) {\n            if (failure instanceof MultipleBuildFailures) {\n                for (Throwable cause : ((MultipleBuildFailures) failure).getCauses()) {\n                    collector.collectFailures(cause, result);\n                }\n            } else {\n                collector.collectFailures(failure, result);"
            },
            {
              "step": 35,
              "variableName": "result",
              "startLine": 60,
              "startColumn": 39,
              "endLine": 60,
              "endColumn": 45,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/MultipleBuildFailuresExceptionAnalyser.java",
              "type": "ArrayList [<element>] : LocationAwareException",
              "code": "            }\n        }\n        if (result.size() == 1 && result.get(0) instanceof RuntimeException) {\n            return (RuntimeException) result.get(0);\n        } else {\n            return new MultipleBuildFailures(result);\n        }"
            },
            {
              "step": 36,
              "variableName": "result.get(0)",
              "startLine": 60,
              "startColumn": 39,
              "endLine": 60,
              "endColumn": 52,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/MultipleBuildFailuresExceptionAnalyser.java",
              "type": "LocationAwareException",
              "code": "            }\n        }\n        if (result.size() == 1 && result.get(0) instanceof RuntimeException) {\n            return (RuntimeException) result.get(0);\n        } else {\n            return new MultipleBuildFailures(result);\n        }"
            },
            {
              "step": 37,
              "variableName": "(RuntimeException) result.get(0)",
              "startLine": 60,
              "startColumn": 20,
              "endLine": 60,
              "endColumn": 52,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/MultipleBuildFailuresExceptionAnalyser.java",
              "type": "LocationAwareException",
              "code": "            }\n        }\n        if (result.size() == 1 && result.get(0) instanceof RuntimeException) {\n            return (RuntimeException) result.get(0);\n        } else {\n            return new MultipleBuildFailures(result);\n        }"
            },
            {
              "step": 38,
              "variableName": "exceptionAnalyser.transform(finishFailures)",
              "startLine": 72,
              "startColumn": 16,
              "endLine": 72,
              "endColumn": 59,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/internal/buildtree/DefaultBuildTreeFinishExecutor.java",
              "type": "LocationAwareException",
              "code": "            finishFailures.addAll(result.getFailures());\n        });\n\n        return exceptionAnalyser.transform(finishFailures);\n    }\n}\n"
            },
            {
              "step": 39,
              "variableName": "delegate.finishBuildTree(failures)",
              "startLine": 46,
              "startColumn": 28,
              "endLine": 46,
              "endColumn": 62,
              "uri": "gradle-8.14.0/subprojects/composite-builds/src/main/java/org/gradle/composite/internal/OperationFiringBuildTreeFinishExecutor.java",
              "type": "LocationAwareException",
              "code": "            @Override\n            public RuntimeException call(BuildOperationContext context) {\n                try {\n                    return delegate.finishBuildTree(failures);\n                } finally {\n                    context.setResult(RESULT);\n                }"
            },
            {
              "step": 40,
              "variableName": "buildOperation.call(context)",
              "startLine": 239,
              "startColumn": 21,
              "endLine": 239,
              "endColumn": 49,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/testFixtures/java/org/gradle/internal/operations/TestBuildOperationRunner.java",
              "type": "LocationAwareException",
              "code": "            TestBuildOperationContext context = new TestBuildOperationContext(record);\n            T t;\n            try {\n                t = buildOperation.call(context);\n            } catch (Throwable failure) {\n                if (record.failure == null) {\n                    record.failure = failure;"
            },
            {
              "step": 41,
              "variableName": "t",
              "startLine": 246,
              "startColumn": 20,
              "endLine": 246,
              "endColumn": 21,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/testFixtures/java/org/gradle/internal/operations/TestBuildOperationRunner.java",
              "type": "LocationAwareException",
              "code": "                }\n                throw throwAsUncheckedException(failure);\n            }\n            return t;\n        }\n\n        private <O extends BuildOperation> void execute(O buildOperation, BuildOperationWorker<O> worker) {"
            },
            {
              "step": 42,
              "variableName": "log.call(buildOperation)",
              "startLine": 51,
              "startColumn": 16,
              "endLine": 51,
              "endColumn": 40,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/testFixtures/java/org/gradle/internal/operations/TestBuildOperationRunner.java",
              "type": "LocationAwareException",
              "code": "\n    @Override\n    public <T> T call(CallableBuildOperation<T> buildOperation) {\n        return log.call(buildOperation);\n    }\n\n    @Override"
            },
            {
              "step": 43,
              "variableName": "ca",
              "startLine": 115,
              "startColumn": 5,
              "endLine": 121,
              "endColumn": 7,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/configurationcache/ConfigurationCacheBuildOperations.kt",
              "type": "LocationAwareException",
              "code": "\ninternal\nfun <T : Any> BuildOperationRunner.withModelLoadOperation(block: () -> T): T =\n    call(object : CallableBuildOperation<T> {\n        override fun description(): BuildOperationDescriptor.Builder = BuildOperationDescriptor\n            .displayName(\"Load model from configuration cache\")\n            .progressDisplayName(\"Loading model from configuration cache\")"
            },
            {
              "step": 44,
              "variableName": "ca",
              "startLine": 115,
              "startColumn": 5,
              "endLine": 121,
              "endColumn": 7,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/configurationcache/ConfigurationCacheBuildOperations.kt",
              "type": "LocationAwareException",
              "code": "\ninternal\nfun <T : Any> BuildOperationRunner.withModelLoadOperation(block: () -> T): T =\n    call(object : CallableBuildOperation<T> {\n        override fun description(): BuildOperationDescriptor.Builder = BuildOperationDescriptor\n            .displayName(\"Load model from configuration cache\")\n            .progressDisplayName(\"Loading model from configuration cache\")"
            },
            {
              "step": 45,
              "variableName": "b",
              "startLine": 635,
              "startColumn": 9,
              "endLine": 641,
              "endColumn": 10,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "        // No need to record the `ClassLoaderScope` tree when loading\n        scopeRegistryListener.dispose()\n\n        buildOperationRunner.withModelLoadOperation {\n            val storeLoadResult = entryStore.useForStateLoad(StateType.Model) { stateFile: ConfigurationCacheStateFile ->\n                cacheIO.readModelFrom(stateFile)\n            }"
            },
            {
              "step": 46,
              "variableName": "block()",
              "startLine": 668,
              "startColumn": 22,
              "endLine": 668,
              "endColumn": 29,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "    private\n    inline fun <T> runAtConfigurationTime(block: () -> T): T {\n        prepareConfigurationTimeBarrier()\n        val result = block()\n        crossConfigurationTimeBarrier()\n        return result\n    }"
            },
            {
              "step": 47,
              "variableName": "result",
              "startLine": 670,
              "startColumn": 16,
              "endLine": 670,
              "endColumn": 22,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "        prepareConfigurationTimeBarrier()\n        val result = block()\n        crossConfigurationTimeBarrier()\n        return result\n    }\n\n    private"
            },
            {
              "step": 48,
              "variableName": "runAtConfigurationTime(...) : LocationAwareException",
              "startLine": 631,
              "startColumn": 28,
              "endLine": 642,
              "endColumn": 6,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "    data class LoadResultMetadata(val originInvocationId: String? = null)\n\n    private\n    fun loadModel(): Any = runAtConfigurationTime {\n        // No need to record the `ClassLoaderScope` tree when loading\n        scopeRegistryListener.dispose()\n"
            },
            {
              "step": 49,
              "variableName": "loadModel()",
              "startLine": 268,
              "startColumn": 20,
              "endLine": 268,
              "endColumn": 31,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "    override fun <T : Any> loadOrCreateModel(creator: () -> T): T {\n        if (isLoaded) {\n            runLoadedSideEffects()\n            return loadModel().uncheckedCast()\n        }\n\n        return runWorkThatContributesToCacheEntry {"
            },
            {
              "step": 50,
              "variableName": "Any",
              "startLine": 22,
              "startColumn": 15,
              "endLine": 22,
              "endColumn": 18,
              "uri": "gradle-8.14.0/platforms/core-configuration/stdlib-kotlin-extensions/src/main/kotlin/org/gradle/internal/extensions/stdlib/CastExtensions.kt",
              "type": "Object",
              "code": "import org.gradle.internal.Cast\n\n\nfun <T : Any> Any.uncheckedCast(): T =\n    Cast.uncheckedNonnullCast(this)\n"
            },
            {
              "step": 51,
              "variableName": "this",
              "startLine": 23,
              "startColumn": 31,
              "endLine": 23,
              "endColumn": 35,
              "uri": "gradle-8.14.0/platforms/core-configuration/stdlib-kotlin-extensions/src/main/kotlin/org/gradle/internal/extensions/stdlib/CastExtensions.kt",
              "type": "Object",
              "code": "\n\nfun <T : Any> Any.uncheckedCast(): T =\n    Cast.uncheckedNonnullCast(this)\n"
            },
            {
              "step": 52,
              "variableName": "Object object",
              "startLine": 76,
              "startColumn": 46,
              "endLine": 76,
              "endColumn": 59,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/Cast.java",
              "type": "Object",
              "code": "    }\n\n    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})\n    public static <T> T uncheckedNonnullCast(Object object) {\n        return (T) object;\n    }\n}"
            },
            {
              "step": 53,
              "variableName": "(T) object",
              "startLine": 77,
              "startColumn": 16,
              "endLine": 77,
              "endColumn": 26,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/Cast.java",
              "type": "Object",
              "code": "\n    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})\n    public static <T> T uncheckedNonnullCast(Object object) {\n        return (T) object;\n    }\n}\n"
            },
            {
              "step": 54,
              "variableName": "Cast.uncheckedNonnullCast(collectionType)",
              "startLine": 223,
              "startColumn": 16,
              "endLine": 223,
              "endColumn": 57,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/api/internal/provider/AbstractCollectionProperty.java",
              "type": "Class",
              "code": "    @Override\n    @Nonnull\n    public Class<C> getType() {\n        return Cast.uncheckedNonnullCast(collectionType);\n    }\n\n    @Override"
            },
            {
              "step": 55,
              "variableName": "provider.getType()",
              "startLine": 41,
              "startColumn": 35,
              "endLine": 41,
              "endColumn": 53,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/api/internal/provider/OrElseFixedValueProvider.java",
              "type": "Class",
              "code": "    @Nullable\n    @Override\n    public Class<T> getType() {\n        return Cast.uncheckedCast(provider.getType());\n    }\n\n    @Override"
            },
            {
              "step": 56,
              "variableName": "@Nullable Object object",
              "startLine": 71,
              "startColumn": 39,
              "endLine": 71,
              "endColumn": 62,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/Cast.java",
              "type": "Object",
              "code": "\n    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})\n    @Nullable\n    public static <T> T uncheckedCast(@Nullable Object object) {\n        return (T) object;\n    }\n"
            },
            {
              "step": 57,
              "variableName": "(T) object",
              "startLine": 72,
              "startColumn": 16,
              "endLine": 72,
              "endColumn": 26,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/Cast.java",
              "type": "Object",
              "code": "    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})\n    @Nullable\n    public static <T> T uncheckedCast(@Nullable Object object) {\n        return (T) object;\n    }\n\n    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})"
            },
            {
              "step": 58,
              "variableName": "Cast.uncheckedCast(sanitizer.sanitize(t))",
              "startLine": 41,
              "startColumn": 15,
              "endLine": 41,
              "endColumn": 56,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/api/internal/provider/TypeSanitizingTransformer.java",
              "type": "Object",
              "code": "\n    @Override\n    public T transform(T t) {\n        T v = Cast.uncheckedCast(sanitizer.sanitize(t));\n        if (targetType.isInstance(v)) {\n            return v;\n        }"
            },
            {
              "step": 59,
              "variableName": "v",
              "startLine": 43,
              "startColumn": 20,
              "endLine": 43,
              "endColumn": 21,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/api/internal/provider/TypeSanitizingTransformer.java",
              "type": "Object",
              "code": "    public T transform(T t) {\n        T v = Cast.uncheckedCast(sanitizer.sanitize(t));\n        if (targetType.isInstance(v)) {\n            return v;\n        }\n        throw new IllegalArgumentException(String.format(\"Cannot get the value of %s of type %s as the provider associated with this property returned a value of type %s.\", owner.getDisplayName(), targetType.getName(), v.getClass().getName()));\n    }"
            },
            {
              "step": 60,
              "variableName": "itemDescriptorGenerator.transform(name)",
              "startLine": 82,
              "startColumn": 52,
              "endLine": 82,
              "endColumn": 91,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/model/collection/internal/BridgedCollections.java",
              "type": "String",
              "code": "                                    .descriptor(new SimpleModelRuleDescriptor(new Factory<String>() {\n                                        @Override\n                                        public String create() {\n                                            return itemDescriptorGenerator.transform(name);\n                                        }\n                                    }))\n                                    .build();"
            },
            {
              "step": 61,
              "variableName": "descriptor.create()",
              "startLine": 38,
              "startColumn": 58,
              "endLine": 38,
              "endColumn": 77,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/core/rule/describe/SimpleModelRuleDescriptor.java",
              "type": "String",
              "code": "            @Override\n            public String create() {\n                if (cachedValue == null) {\n                    cachedValue = STRING_INTERNER.intern(descriptor.create());\n                }\n                return cachedValue;\n            }"
            },
            {
              "step": 62,
              "variableName": "@Nullable String sample",
              "startLine": 35,
              "startColumn": 26,
              "endLine": 35,
              "endColumn": 49,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/api/internal/cache/StringInterner.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public String intern(@Nullable String sample) {\n        if (sample == null) {\n            return null;\n        }"
            },
            {
              "step": 63,
              "variableName": "sample",
              "startLine": 39,
              "startColumn": 32,
              "endLine": 39,
              "endColumn": 38,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/api/internal/cache/StringInterner.java",
              "type": "String",
              "code": "        if (sample == null) {\n            return null;\n        }\n        return interner.intern(sample);\n    }\n}\n"
            },
            {
              "step": 64,
              "variableName": "String sample",
              "startLine": 44,
              "startColumn": 26,
              "endLine": 44,
              "endColumn": 39,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/util/internal/SimpleMapInterner.java",
              "type": "String",
              "code": "\n    @Override\n    @SuppressWarnings(\"ALL\")\n    public String intern(String sample) {\n        if (sample == null) {\n            return null;\n        }"
            },
            {
              "step": 65,
              "variableName": "sample",
              "startLine": 53,
              "startColumn": 16,
              "endLine": 53,
              "endColumn": 22,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/util/internal/SimpleMapInterner.java",
              "type": "String",
              "code": "            return interned;\n        }\n        internedStrings.put(sample, sample);\n        return sample;\n    }\n}\n"
            },
            {
              "step": 66,
              "variableName": "interner.intern(sample)",
              "startLine": 39,
              "startColumn": 16,
              "endLine": 39,
              "endColumn": 39,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/api/internal/cache/StringInterner.java",
              "type": "String",
              "code": "        if (sample == null) {\n            return null;\n        }\n        return interner.intern(sample);\n    }\n}\n"
            },
            {
              "step": 67,
              "variableName": "STRING_INTERNER.intern(descriptor.create())",
              "startLine": 38,
              "startColumn": 35,
              "endLine": 38,
              "endColumn": 78,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/core/rule/describe/SimpleModelRuleDescriptor.java",
              "type": "String",
              "code": "            @Override\n            public String create() {\n                if (cachedValue == null) {\n                    cachedValue = STRING_INTERNER.intern(descriptor.create());\n                }\n                return cachedValue;\n            }"
            },
            {
              "step": 68,
              "variableName": "cachedValue",
              "startLine": 40,
              "startColumn": 24,
              "endLine": 40,
              "endColumn": 35,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/core/rule/describe/SimpleModelRuleDescriptor.java",
              "type": "String",
              "code": "                if (cachedValue == null) {\n                    cachedValue = STRING_INTERNER.intern(descriptor.create());\n                }\n                return cachedValue;\n            }\n        };\n    }"
            },
            {
              "step": 69,
              "variableName": "factory.create()",
              "startLine": 59,
              "startColumn": 16,
              "endLine": 59,
              "endColumn": 32,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/core/rule/describe/SimpleModelRuleDescriptor.java",
              "type": "String",
              "code": "    }\n\n    private String getDescriptor() {\n        return factory.create();\n    }\n\n    @Override"
            },
            {
              "step": 70,
              "variableName": "getDescriptor()",
              "startLine": 65,
              "startColumn": 31,
              "endLine": 65,
              "endColumn": 46,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/core/rule/describe/SimpleModelRuleDescriptor.java",
              "type": "String",
              "code": "    @Override\n    public void describeTo(Appendable appendable) {\n        try {\n            appendable.append(getDescriptor());\n        } catch (IOException e) {\n            throw new UncheckedIOException(e);\n        }"
            },
            {
              "step": 71,
              "variableName": "appendable",
              "startLine": 65,
              "startColumn": 13,
              "endLine": 65,
              "endColumn": 23,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/core/rule/describe/SimpleModelRuleDescriptor.java",
              "type": "Appendable",
              "code": "    @Override\n    public void describeTo(Appendable appendable) {\n        try {\n            appendable.append(getDescriptor());\n        } catch (IOException e) {\n            throw new UncheckedIOException(e);\n        }"
            },
            {
              "step": 72,
              "variableName": "sb",
              "startLine": 49,
              "startColumn": 20,
              "endLine": 49,
              "endColumn": 22,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/core/rule/describe/AbstractModelRuleDescriptor.java",
              "type": "StringBuilder",
              "code": "    @Override\n    public String toString() {\n        StringBuilder sb = new StringBuilder();\n        describeTo(sb);\n        return sb.toString();\n    }\n}"
            },
            {
              "step": 73,
              "variableName": "sb",
              "startLine": 50,
              "startColumn": 16,
              "endLine": 50,
              "endColumn": 18,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/core/rule/describe/AbstractModelRuleDescriptor.java",
              "type": "StringBuilder",
              "code": "    public String toString() {\n        StringBuilder sb = new StringBuilder();\n        describeTo(sb);\n        return sb.toString();\n    }\n}\n"
            },
            {
              "step": 74,
              "variableName": "sb.toString()",
              "startLine": 50,
              "startColumn": 16,
              "endLine": 50,
              "endColumn": 29,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/core/rule/describe/AbstractModelRuleDescriptor.java",
              "type": "String",
              "code": "    public String toString() {\n        StringBuilder sb = new StringBuilder();\n        describeTo(sb);\n        return sb.toString();\n    }\n}\n"
            },
            {
              "step": 75,
              "variableName": "creatorDescriptor.toString()",
              "startLine": 53,
              "startColumn": 13,
              "endLine": 53,
              "endColumn": 41,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/report/IncompatibleTypeReferenceReporter.java",
              "type": "String",
              "code": "        ModelPath path = node.getPath();\n        ModelRuleDescriptor creatorDescriptor = node.getDescriptor();\n        return new IncompatibleTypeReferenceReporter(\n            creatorDescriptor.toString(), path.toString(), type.toString(), description, writable,\n            node.getTypeDescriptions()\n        );\n    }"
            },
            {
              "step": 76,
              "variableName": "String creator",
              "startLine": 40,
              "startColumn": 46,
              "endLine": 40,
              "endColumn": 60,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/report/IncompatibleTypeReferenceReporter.java",
              "type": "String",
              "code": "    private final boolean writable;\n    private final Iterable<String> candidateTypes;\n\n    public IncompatibleTypeReferenceReporter(String creator, String path, String type, String description, boolean writable, Iterable<String> candidateTypes) {\n        this.creator = creator;\n        this.path = path;\n        this.type = type;"
            },
            {
              "step": 77,
              "variableName": "creator",
              "startLine": 41,
              "startColumn": 24,
              "endLine": 41,
              "endColumn": 31,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/report/IncompatibleTypeReferenceReporter.java",
              "type": "String",
              "code": "    private final Iterable<String> candidateTypes;\n\n    public IncompatibleTypeReferenceReporter(String creator, String path, String type, String description, boolean writable, Iterable<String> candidateTypes) {\n        this.creator = creator;\n        this.path = path;\n        this.type = type;\n        this.description = description;"
            },
            {
              "step": 78,
              "variableName": "this",
              "startLine": 41,
              "startColumn": 9,
              "endLine": 41,
              "endColumn": 13,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/report/IncompatibleTypeReferenceReporter.java",
              "type": "IncompatibleTypeReferenceReporter [creator] : String",
              "code": "    private final Iterable<String> candidateTypes;\n\n    public IncompatibleTypeReferenceReporter(String creator, String path, String type, String description, boolean writable, Iterable<String> candidateTypes) {\n        this.creator = creator;\n        this.path = path;\n        this.type = type;\n        this.description = description;"
            },
            {
              "step": 79,
              "variableName": "new IncompatibleTypeReferenceReporter(...) : IncompatibleTypeReferenceReporter [creator] : String",
              "startLine": 52,
              "startColumn": 16,
              "endLine": 55,
              "endColumn": 10,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/report/IncompatibleTypeReferenceReporter.java",
              "type": "IncompatibleTypeReferenceReporter [creator] : String",
              "code": "    public static IncompatibleTypeReferenceReporter of(MutableModelNode node, ModelType<?> type, String description, boolean writable) {\n        ModelPath path = node.getPath();\n        ModelRuleDescriptor creatorDescriptor = node.getDescriptor();\n        return new IncompatibleTypeReferenceReporter(\n            creatorDescriptor.toString(), path.toString(), type.toString(), description, writable,\n            node.getTypeDescriptions()\n        );"
            },
            {
              "step": 80,
              "variableName": "IncompatibleTypeReferenceReporter.of(node, elementType, action.getSubject().getDescription(), true)",
              "startLine": 522,
              "startColumn": 21,
              "endLine": 522,
              "endColumn": 120,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/core/NodeBackedModelMap.java",
              "type": "IncompatibleTypeReferenceReporter [creator] : String",
              "code": "            node.ensureAtLeast(ModelNode.State.Discovered);\n            if (!node.canBeViewedAs(elementType)) {\n                throw new InvalidModelRuleException(action.getDescriptor(), new ModelRuleBindingException(\n                    IncompatibleTypeReferenceReporter.of(node, elementType, action.getSubject().getDescription(), true).asString()\n                ));\n            }\n            parent.validateCanBindAction(node, action);"
            },
            {
              "step": 81,
              "variableName": "asString",
              "startLine": 58,
              "startColumn": 19,
              "endLine": 58,
              "endColumn": 27,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/report/IncompatibleTypeReferenceReporter.java",
              "type": "IncompatibleTypeReferenceReporter [creator] : String",
              "code": "        );\n    }\n\n    public String asString() {\n        StringWriter string = new StringWriter();\n        writeTo(new PrintWriter(string));\n        return string.toString();"
            },
            {
              "step": 82,
              "variableName": "writeTo(new PrintWriter(string))",
              "startLine": 60,
              "startColumn": 9,
              "endLine": 60,
              "endColumn": 41,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/report/IncompatibleTypeReferenceReporter.java",
              "type": "IncompatibleTypeReferenceReporter [creator] : String",
              "code": "\n    public String asString() {\n        StringWriter string = new StringWriter();\n        writeTo(new PrintWriter(string));\n        return string.toString();\n    }\n"
            },
            {
              "step": 83,
              "variableName": "writeTo",
              "startLine": 64,
              "startColumn": 17,
              "endLine": 64,
              "endColumn": 24,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/report/IncompatibleTypeReferenceReporter.java",
              "type": "IncompatibleTypeReferenceReporter [creator] : String",
              "code": "        return string.toString();\n    }\n\n    public void writeTo(PrintWriter writer) {\n        //\"type-only model reference of type '%s'%s is ambiguous as multiple model elements are available for this type:%n  %s (created by %s)%n  %s (created by %s)\",\n        writer.print(\"Model reference to element '\");\n        writer.print(path);"
            },
            {
              "step": 84,
              "variableName": "creator",
              "startLine": 77,
              "startColumn": 22,
              "endLine": 77,
              "endColumn": 29,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/report/IncompatibleTypeReferenceReporter.java",
              "type": "IncompatibleTypeReferenceReporter [creator] : String",
              "code": "        }\n        writer.println(\" is invalid due to incompatible types.\");\n        writer.print(\"This element was created by \");\n        writer.print(creator);\n        writer.print(\" and can be \");\n        writer.print(writable ? \"mutated\" : \"read\");\n        writer.println(\" as the following types:\");"
            },
            {
              "step": 85,
              "variableName": "creator",
              "startLine": 77,
              "startColumn": 22,
              "endLine": 77,
              "endColumn": 29,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/report/IncompatibleTypeReferenceReporter.java",
              "type": "",
              "code": "        }\n        writer.println(\" is invalid due to incompatible types.\");\n        writer.print(\"This element was created by \");\n        writer.print(creator);\n        writer.print(\" and can be \");\n        writer.print(writable ? \"mutated\" : \"read\");\n        writer.println(\" as the following types:\");"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "source",
              "startLine": 40,
              "startColumn": 39,
              "endLine": 40,
              "endColumn": 45,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/RegExpNameMapper.java",
              "type": "String",
              "code": "    @Override\n    public String transform(String source) {\n        if (matcher == null) {\n            matcher = pattern.matcher(source);\n        } else {\n            matcher.reset(source);\n        }"
            },
            {
              "step": 1,
              "variableName": "result",
              "startLine": 48,
              "startColumn": 16,
              "endLine": 48,
              "endColumn": 22,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/RegExpNameMapper.java",
              "type": "String",
              "code": "        if (matcher.find()) {\n            result = matcher.replaceFirst(replacement);\n        }\n        return result;\n    }\n}\n"
            },
            {
              "step": 2,
              "variableName": "transformer.transform(value)",
              "startLine": 37,
              "startColumn": 31,
              "endLine": 37,
              "endColumn": 59,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/ChainingTransformer.java",
              "type": "String",
              "code": "    public T transform(T original) {\n        T value = original;\n        for (Transformer<T, T> transformer : transformers) {\n            value = type.cast(transformer.transform(value));\n        }\n        return value;\n    }"
            },
            {
              "step": 3,
              "variableName": "type.cast(transformer.transform(value))",
              "startLine": 37,
              "startColumn": 21,
              "endLine": 37,
              "endColumn": 60,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/ChainingTransformer.java",
              "type": "String",
              "code": "    public T transform(T original) {\n        T value = original;\n        for (Transformer<T, T> transformer : transformers) {\n            value = type.cast(transformer.transform(value));\n        }\n        return value;\n    }"
            },
            {
              "step": 4,
              "variableName": "value",
              "startLine": 39,
              "startColumn": 16,
              "endLine": 39,
              "endColumn": 21,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/ChainingTransformer.java",
              "type": "String",
              "code": "        for (Transformer<T, T> transformer : transformers) {\n            value = type.cast(transformer.transform(value));\n        }\n        return value;\n    }\n\n    public void add(Transformer<T, T> transformer) {"
            },
            {
              "step": 5,
              "variableName": "describer.transform(this)",
              "startLine": 163,
              "startColumn": 16,
              "endLine": 163,
              "endColumn": 41,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/repositories/DefaultMavenArtifactRepository.java",
              "type": "String",
              "code": "\n    @Override\n    public String getDisplayName() {\n        return describer.transform(this);\n    }\n\n    @Override"
            },
            {
              "step": 6,
              "variableName": "describable.getDisplayName()",
              "startLine": 313,
              "startColumn": 35,
              "endLine": 313,
              "endColumn": 63,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "String",
              "code": "        public String getDisplayName() {\n            synchronized (this) {\n                if (displayName == null) {\n                    displayName = describable.getDisplayName();\n                    if (capDisplayName != null || !(describable instanceof DisplayName)) {\n                        describable = null;\n                    }"
            },
            {
              "step": 7,
              "variableName": "displayName",
              "startLine": 318,
              "startColumn": 24,
              "endLine": 318,
              "endColumn": 35,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "String",
              "code": "                        describable = null;\n                    }\n                }\n                return displayName;\n            }\n        }\n    }"
            },
            {
              "step": 8,
              "variableName": "displayName.getDisplayName()",
              "startLine": 772,
              "startColumn": 73,
              "endLine": 772,
              "endColumn": 101,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/configurations/DefaultConfiguration.java",
              "type": "String",
              "code": "                try {\n                    results = resolver.resolveGraph(DefaultConfiguration.this);\n                } catch (Exception e) {\n                    throw exceptionMapper.mapFailure(e, \"dependencies\", displayName.getDisplayName());\n                }\n\n                // Make the new state visible in case a dependency resolution listener queries the result, which requires the new state"
            },
            {
              "step": 9,
              "variableName": "String contextDisplayName",
              "startLine": 68,
              "startColumn": 77,
              "endLine": 68,
              "endColumn": 102,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "String",
              "code": "        return mapFailure(failure, type, displayName);\n    }\n\n    public TypedResolveException mapFailure(Throwable failure, String type, String contextDisplayName) {\n        if (!(failure instanceof TypedResolveException)) {\n            return new TypedResolveException(\n                type,"
            },
            {
              "step": 10,
              "variableName": "contextDisplayName",
              "startLine": 72,
              "startColumn": 17,
              "endLine": 72,
              "endColumn": 35,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "String",
              "code": "        if (!(failure instanceof TypedResolveException)) {\n            return new TypedResolveException(\n                type,\n                contextDisplayName,\n                ImmutableList.of(mapRepositoryOverrideFailure(contextDisplayName, failure))\n            );\n        }"
            },
            {
              "step": 11,
              "variableName": "new TypedResolveException(...) : TypedResolveException",
              "startLine": 70,
              "startColumn": 20,
              "endLine": 74,
              "endColumn": 14,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "TypedResolveException",
              "code": "\n    public TypedResolveException mapFailure(Throwable failure, String type, String contextDisplayName) {\n        if (!(failure instanceof TypedResolveException)) {\n            return new TypedResolveException(\n                type,\n                contextDisplayName,\n                ImmutableList.of(mapRepositoryOverrideFailure(contextDisplayName, failure))"
            },
            {
              "step": 12,
              "variableName": "exceptionMapper.mapFailure(e, \"dependencies\", displayName.getDisplayName())",
              "startLine": 772,
              "startColumn": 27,
              "endLine": 772,
              "endColumn": 102,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/configurations/DefaultConfiguration.java",
              "type": "TypedResolveException",
              "code": "                try {\n                    results = resolver.resolveGraph(DefaultConfiguration.this);\n                } catch (Exception e) {\n                    throw exceptionMapper.mapFailure(e, \"dependencies\", displayName.getDisplayName());\n                }\n\n                // Make the new state visible in case a dependency resolution listener queries the result, which requires the new state"
            },
            {
              "step": 13,
              "variableName": "e",
              "startLine": 772,
              "startColumn": 54,
              "endLine": 772,
              "endColumn": 55,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/configurations/DefaultConfiguration.java",
              "type": "Exception",
              "code": "                try {\n                    results = resolver.resolveGraph(DefaultConfiguration.this);\n                } catch (Exception e) {\n                    throw exceptionMapper.mapFailure(e, \"dependencies\", displayName.getDisplayName());\n                }\n\n                // Make the new state visible in case a dependency resolution listener queries the result, which requires the new state"
            },
            {
              "step": 14,
              "variableName": "Throwable failure",
              "startLine": 68,
              "startColumn": 45,
              "endLine": 68,
              "endColumn": 62,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Throwable",
              "code": "        return mapFailure(failure, type, displayName);\n    }\n\n    public TypedResolveException mapFailure(Throwable failure, String type, String contextDisplayName) {\n        if (!(failure instanceof TypedResolveException)) {\n            return new TypedResolveException(\n                type,"
            },
            {
              "step": 15,
              "variableName": "failure",
              "startLine": 73,
              "startColumn": 83,
              "endLine": 73,
              "endColumn": 90,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Throwable",
              "code": "            return new TypedResolveException(\n                type,\n                contextDisplayName,\n                ImmutableList.of(mapRepositoryOverrideFailure(contextDisplayName, failure))\n            );\n        }\n"
            },
            {
              "step": 16,
              "variableName": "Throwable failure",
              "startLine": 94,
              "startColumn": 78,
              "endLine": 94,
              "endColumn": 95,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Throwable",
              "code": "\n    // TODO: We should handle this exception at the source instead of using instanceof to detect it after it is thrown.\n    //       We should try to avoid catching and analyzing runtime exceptions\n    public Throwable mapRepositoryOverrideFailure(String contextDisplayName, Throwable failure) {\n        if (!(failure instanceof ModuleVersionNotFoundException) || !settingsRepositoriesIgnored()) {\n            return failure;\n        }"
            },
            {
              "step": 17,
              "variableName": "failure",
              "startLine": 108,
              "startColumn": 35,
              "endLine": 108,
              "endColumn": 42,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Throwable",
              "code": "        return new TypedResolveException(\n            \"dependencies\",\n            contextDisplayName,\n            Collections.singleton(failure),\n            resolutions\n        );\n    }"
            },
            {
              "step": 18,
              "variableName": "Collections.singleton(failure)",
              "startLine": 108,
              "startColumn": 13,
              "endLine": 108,
              "endColumn": 43,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Set [<element>] : Throwable",
              "code": "        return new TypedResolveException(\n            \"dependencies\",\n            contextDisplayName,\n            Collections.singleton(failure),\n            resolutions\n        );\n    }"
            },
            {
              "step": 19,
              "variableName": "Collections.singleton(failure)",
              "startLine": 108,
              "startColumn": 13,
              "endLine": 108,
              "endColumn": 43,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Set",
              "code": "        return new TypedResolveException(\n            \"dependencies\",\n            contextDisplayName,\n            Collections.singleton(failure),\n            resolutions\n        );\n    }"
            },
            {
              "step": 20,
              "variableName": "Iterable<? extends Throwable> failures",
              "startLine": 42,
              "startColumn": 67,
              "endLine": 42,
              "endColumn": 105,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ivyservice/TypedResolveException.java",
              "type": "Set",
              "code": "    /**\n     * Creates a new instance with resolutions.\n     */\n    public TypedResolveException(String type, String displayName, Iterable<? extends Throwable> failures, List<String> resolutions) {\n        super(buildMessage(type, displayName), failures, false);\n        this.type = type;\n        this.resolutions = ImmutableList.copyOf(resolutions);"
            },
            {
              "step": 21,
              "variableName": "failures",
              "startLine": 43,
              "startColumn": 48,
              "endLine": 43,
              "endColumn": 56,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ivyservice/TypedResolveException.java",
              "type": "Set",
              "code": "     * Creates a new instance with resolutions.\n     */\n    public TypedResolveException(String type, String displayName, Iterable<? extends Throwable> failures, List<String> resolutions) {\n        super(buildMessage(type, displayName), failures, false);\n        this.type = type;\n        this.resolutions = ImmutableList.copyOf(resolutions);\n    }"
            },
            {
              "step": 22,
              "variableName": "Iterable<? extends Throwable> causes",
              "startLine": 77,
              "startColumn": 48,
              "endLine": 77,
              "endColumn": 84,
              "uri": "gradle-8.14.0/subprojects/core-api/src/main/java/org/gradle/api/artifacts/ResolveException.java",
              "type": "Set",
              "code": "     * @since 8.9\n     */\n    @Incubating\n    protected ResolveException(String message, Iterable<? extends Throwable> causes, @SuppressWarnings(\"unused\") boolean dummy) {\n        super(message, causes);\n    }\n}"
            },
            {
              "step": 23,
              "variableName": "causes",
              "startLine": 78,
              "startColumn": 24,
              "endLine": 78,
              "endColumn": 30,
              "uri": "gradle-8.14.0/subprojects/core-api/src/main/java/org/gradle/api/artifacts/ResolveException.java",
              "type": "Set",
              "code": "     */\n    @Incubating\n    protected ResolveException(String message, Iterable<? extends Throwable> causes, @SuppressWarnings(\"unused\") boolean dummy) {\n        super(message, causes);\n    }\n}\n"
            },
            {
              "step": 24,
              "variableName": "Iterable<? extends Throwable> causes",
              "startLine": 47,
              "startColumn": 55,
              "endLine": 47,
              "endColumn": 91,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "Set",
              "code": "        this.causes.addAll(Arrays.asList(causes));\n    }\n\n    public DefaultMultiCauseException(String message, Iterable<? extends Throwable> causes) {\n        super(message);\n        this.message = message;\n        initCauses(causes);"
            },
            {
              "step": 25,
              "variableName": "causes",
              "startLine": 50,
              "startColumn": 20,
              "endLine": 50,
              "endColumn": 26,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "Set",
              "code": "    public DefaultMultiCauseException(String message, Iterable<? extends Throwable> causes) {\n        super(message);\n        this.message = message;\n        initCauses(causes);\n    }\n\n    public DefaultMultiCauseException(Factory<String> messageFactory) {"
            },
            {
              "step": 26,
              "variableName": "Iterable<? extends Throwable> causes",
              "startLine": 112,
              "startColumn": 28,
              "endLine": 112,
              "endColumn": 64,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "Iterable",
              "code": "        return null;\n    }\n\n    public void initCauses(Iterable<? extends Throwable> causes) {\n        this.causes.clear();\n        for (Throwable cause : causes) {\n            this.causes.add(cause);"
            },
            {
              "step": 27,
              "variableName": "cause",
              "startLine": 115,
              "startColumn": 29,
              "endLine": 115,
              "endColumn": 34,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "Throwable",
              "code": "    public void initCauses(Iterable<? extends Throwable> causes) {\n        this.causes.clear();\n        for (Throwable cause : causes) {\n            this.causes.add(cause);\n        }\n    }\n"
            },
            {
              "step": 28,
              "variableName": "this.causes",
              "startLine": 115,
              "startColumn": 13,
              "endLine": 115,
              "endColumn": 24,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "CopyOnWriteArrayList [<element>] : Throwable",
              "code": "    public void initCauses(Iterable<? extends Throwable> causes) {\n        this.causes.clear();\n        for (Throwable cause : causes) {\n            this.causes.add(cause);\n        }\n    }\n"
            },
            {
              "step": 29,
              "variableName": "this",
              "startLine": 115,
              "startColumn": 13,
              "endLine": 115,
              "endColumn": 17,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "DefaultMultiCauseException [causes, <element>] : Throwable",
              "code": "    public void initCauses(Iterable<? extends Throwable> causes) {\n        this.causes.clear();\n        for (Throwable cause : causes) {\n            this.causes.add(cause);\n        }\n    }\n"
            },
            {
              "step": 30,
              "variableName": "projectConfigurationException",
              "startLine": 57,
              "startColumn": 17,
              "endLine": 57,
              "endColumn": 46,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/DefaultExceptionAnalyser.java",
              "type": "ProjectConfigurationException [causes, <element>] : Throwable",
              "code": "                }\n            }\n            if (!additionalFailures.isEmpty()) {\n                projectConfigurationException.initCauses(additionalFailures);\n                failures.add(transform(projectConfigurationException));\n            }\n        } else if (exception instanceof ServiceCreationException) {"
            },
            {
              "step": 31,
              "variableName": "projectConfigurationException",
              "startLine": 58,
              "startColumn": 40,
              "endLine": 58,
              "endColumn": 69,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/DefaultExceptionAnalyser.java",
              "type": "ProjectConfigurationException [causes, <element>] : Throwable",
              "code": "            }\n            if (!additionalFailures.isEmpty()) {\n                projectConfigurationException.initCauses(additionalFailures);\n                failures.add(transform(projectConfigurationException));\n            }\n        } else if (exception instanceof ServiceCreationException) {\n            failures.add(transform(new InitializationException(exception)));"
            },
            {
              "step": 32,
              "variableName": "transform(projectConfigurationException)",
              "startLine": 58,
              "startColumn": 30,
              "endLine": 58,
              "endColumn": 70,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/DefaultExceptionAnalyser.java",
              "type": "LocationAwareException",
              "code": "            }\n            if (!additionalFailures.isEmpty()) {\n                projectConfigurationException.initCauses(additionalFailures);\n                failures.add(transform(projectConfigurationException));\n            }\n        } else if (exception instanceof ServiceCreationException) {\n            failures.add(transform(new InitializationException(exception)));"
            },
            {
              "step": 33,
              "variableName": "failures",
              "startLine": 58,
              "startColumn": 17,
              "endLine": 58,
              "endColumn": 25,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/DefaultExceptionAnalyser.java",
              "type": "Collection [<element>] : LocationAwareException",
              "code": "            }\n            if (!additionalFailures.isEmpty()) {\n                projectConfigurationException.initCauses(additionalFailures);\n                failures.add(transform(projectConfigurationException));\n            }\n        } else if (exception instanceof ServiceCreationException) {\n            failures.add(transform(new InitializationException(exception)));"
            },
            {
              "step": 34,
              "variableName": "result",
              "startLine": 53,
              "startColumn": 54,
              "endLine": 53,
              "endColumn": 60,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/MultipleBuildFailuresExceptionAnalyser.java",
              "type": "ArrayList [<element>] : LocationAwareException",
              "code": "        for (Throwable failure : failures) {\n            if (failure instanceof MultipleBuildFailures) {\n                for (Throwable cause : ((MultipleBuildFailures) failure).getCauses()) {\n                    collector.collectFailures(cause, result);\n                }\n            } else {\n                collector.collectFailures(failure, result);"
            },
            {
              "step": 35,
              "variableName": "result",
              "startLine": 60,
              "startColumn": 39,
              "endLine": 60,
              "endColumn": 45,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/MultipleBuildFailuresExceptionAnalyser.java",
              "type": "ArrayList [<element>] : LocationAwareException",
              "code": "            }\n        }\n        if (result.size() == 1 && result.get(0) instanceof RuntimeException) {\n            return (RuntimeException) result.get(0);\n        } else {\n            return new MultipleBuildFailures(result);\n        }"
            },
            {
              "step": 36,
              "variableName": "result.get(0)",
              "startLine": 60,
              "startColumn": 39,
              "endLine": 60,
              "endColumn": 52,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/MultipleBuildFailuresExceptionAnalyser.java",
              "type": "LocationAwareException",
              "code": "            }\n        }\n        if (result.size() == 1 && result.get(0) instanceof RuntimeException) {\n            return (RuntimeException) result.get(0);\n        } else {\n            return new MultipleBuildFailures(result);\n        }"
            },
            {
              "step": 37,
              "variableName": "(RuntimeException) result.get(0)",
              "startLine": 60,
              "startColumn": 20,
              "endLine": 60,
              "endColumn": 52,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/MultipleBuildFailuresExceptionAnalyser.java",
              "type": "LocationAwareException",
              "code": "            }\n        }\n        if (result.size() == 1 && result.get(0) instanceof RuntimeException) {\n            return (RuntimeException) result.get(0);\n        } else {\n            return new MultipleBuildFailures(result);\n        }"
            },
            {
              "step": 38,
              "variableName": "exceptionAnalyser.transform(finishFailures)",
              "startLine": 72,
              "startColumn": 16,
              "endLine": 72,
              "endColumn": 59,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/internal/buildtree/DefaultBuildTreeFinishExecutor.java",
              "type": "LocationAwareException",
              "code": "            finishFailures.addAll(result.getFailures());\n        });\n\n        return exceptionAnalyser.transform(finishFailures);\n    }\n}\n"
            },
            {
              "step": 39,
              "variableName": "delegate.finishBuildTree(failures)",
              "startLine": 46,
              "startColumn": 28,
              "endLine": 46,
              "endColumn": 62,
              "uri": "gradle-8.14.0/subprojects/composite-builds/src/main/java/org/gradle/composite/internal/OperationFiringBuildTreeFinishExecutor.java",
              "type": "LocationAwareException",
              "code": "            @Override\n            public RuntimeException call(BuildOperationContext context) {\n                try {\n                    return delegate.finishBuildTree(failures);\n                } finally {\n                    context.setResult(RESULT);\n                }"
            },
            {
              "step": 40,
              "variableName": "buildOperation.call(context)",
              "startLine": 239,
              "startColumn": 21,
              "endLine": 239,
              "endColumn": 49,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/testFixtures/java/org/gradle/internal/operations/TestBuildOperationRunner.java",
              "type": "LocationAwareException",
              "code": "            TestBuildOperationContext context = new TestBuildOperationContext(record);\n            T t;\n            try {\n                t = buildOperation.call(context);\n            } catch (Throwable failure) {\n                if (record.failure == null) {\n                    record.failure = failure;"
            },
            {
              "step": 41,
              "variableName": "t",
              "startLine": 246,
              "startColumn": 20,
              "endLine": 246,
              "endColumn": 21,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/testFixtures/java/org/gradle/internal/operations/TestBuildOperationRunner.java",
              "type": "LocationAwareException",
              "code": "                }\n                throw throwAsUncheckedException(failure);\n            }\n            return t;\n        }\n\n        private <O extends BuildOperation> void execute(O buildOperation, BuildOperationWorker<O> worker) {"
            },
            {
              "step": 42,
              "variableName": "log.call(buildOperation)",
              "startLine": 51,
              "startColumn": 16,
              "endLine": 51,
              "endColumn": 40,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/testFixtures/java/org/gradle/internal/operations/TestBuildOperationRunner.java",
              "type": "LocationAwareException",
              "code": "\n    @Override\n    public <T> T call(CallableBuildOperation<T> buildOperation) {\n        return log.call(buildOperation);\n    }\n\n    @Override"
            },
            {
              "step": 43,
              "variableName": "ca",
              "startLine": 115,
              "startColumn": 5,
              "endLine": 121,
              "endColumn": 7,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/configurationcache/ConfigurationCacheBuildOperations.kt",
              "type": "LocationAwareException",
              "code": "\ninternal\nfun <T : Any> BuildOperationRunner.withModelLoadOperation(block: () -> T): T =\n    call(object : CallableBuildOperation<T> {\n        override fun description(): BuildOperationDescriptor.Builder = BuildOperationDescriptor\n            .displayName(\"Load model from configuration cache\")\n            .progressDisplayName(\"Loading model from configuration cache\")"
            },
            {
              "step": 44,
              "variableName": "ca",
              "startLine": 115,
              "startColumn": 5,
              "endLine": 121,
              "endColumn": 7,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/configurationcache/ConfigurationCacheBuildOperations.kt",
              "type": "LocationAwareException",
              "code": "\ninternal\nfun <T : Any> BuildOperationRunner.withModelLoadOperation(block: () -> T): T =\n    call(object : CallableBuildOperation<T> {\n        override fun description(): BuildOperationDescriptor.Builder = BuildOperationDescriptor\n            .displayName(\"Load model from configuration cache\")\n            .progressDisplayName(\"Loading model from configuration cache\")"
            },
            {
              "step": 45,
              "variableName": "b",
              "startLine": 635,
              "startColumn": 9,
              "endLine": 641,
              "endColumn": 10,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "        // No need to record the `ClassLoaderScope` tree when loading\n        scopeRegistryListener.dispose()\n\n        buildOperationRunner.withModelLoadOperation {\n            val storeLoadResult = entryStore.useForStateLoad(StateType.Model) { stateFile: ConfigurationCacheStateFile ->\n                cacheIO.readModelFrom(stateFile)\n            }"
            },
            {
              "step": 46,
              "variableName": "block()",
              "startLine": 668,
              "startColumn": 22,
              "endLine": 668,
              "endColumn": 29,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "    private\n    inline fun <T> runAtConfigurationTime(block: () -> T): T {\n        prepareConfigurationTimeBarrier()\n        val result = block()\n        crossConfigurationTimeBarrier()\n        return result\n    }"
            },
            {
              "step": 47,
              "variableName": "result",
              "startLine": 670,
              "startColumn": 16,
              "endLine": 670,
              "endColumn": 22,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "        prepareConfigurationTimeBarrier()\n        val result = block()\n        crossConfigurationTimeBarrier()\n        return result\n    }\n\n    private"
            },
            {
              "step": 48,
              "variableName": "runAtConfigurationTime(...) : LocationAwareException",
              "startLine": 631,
              "startColumn": 28,
              "endLine": 642,
              "endColumn": 6,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "    data class LoadResultMetadata(val originInvocationId: String? = null)\n\n    private\n    fun loadModel(): Any = runAtConfigurationTime {\n        // No need to record the `ClassLoaderScope` tree when loading\n        scopeRegistryListener.dispose()\n"
            },
            {
              "step": 49,
              "variableName": "loadModel()",
              "startLine": 268,
              "startColumn": 20,
              "endLine": 268,
              "endColumn": 31,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "    override fun <T : Any> loadOrCreateModel(creator: () -> T): T {\n        if (isLoaded) {\n            runLoadedSideEffects()\n            return loadModel().uncheckedCast()\n        }\n\n        return runWorkThatContributesToCacheEntry {"
            },
            {
              "step": 50,
              "variableName": "Any",
              "startLine": 22,
              "startColumn": 15,
              "endLine": 22,
              "endColumn": 18,
              "uri": "gradle-8.14.0/platforms/core-configuration/stdlib-kotlin-extensions/src/main/kotlin/org/gradle/internal/extensions/stdlib/CastExtensions.kt",
              "type": "Object",
              "code": "import org.gradle.internal.Cast\n\n\nfun <T : Any> Any.uncheckedCast(): T =\n    Cast.uncheckedNonnullCast(this)\n"
            },
            {
              "step": 51,
              "variableName": "this",
              "startLine": 23,
              "startColumn": 31,
              "endLine": 23,
              "endColumn": 35,
              "uri": "gradle-8.14.0/platforms/core-configuration/stdlib-kotlin-extensions/src/main/kotlin/org/gradle/internal/extensions/stdlib/CastExtensions.kt",
              "type": "Object",
              "code": "\n\nfun <T : Any> Any.uncheckedCast(): T =\n    Cast.uncheckedNonnullCast(this)\n"
            },
            {
              "step": 52,
              "variableName": "Object object",
              "startLine": 76,
              "startColumn": 46,
              "endLine": 76,
              "endColumn": 59,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/Cast.java",
              "type": "Object",
              "code": "    }\n\n    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})\n    public static <T> T uncheckedNonnullCast(Object object) {\n        return (T) object;\n    }\n}"
            },
            {
              "step": 53,
              "variableName": "(T) object",
              "startLine": 77,
              "startColumn": 16,
              "endLine": 77,
              "endColumn": 26,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/Cast.java",
              "type": "Object",
              "code": "\n    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})\n    public static <T> T uncheckedNonnullCast(Object object) {\n        return (T) object;\n    }\n}\n"
            },
            {
              "step": 54,
              "variableName": "Cast.uncheckedNonnullCast(collectionType)",
              "startLine": 223,
              "startColumn": 16,
              "endLine": 223,
              "endColumn": 57,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/api/internal/provider/AbstractCollectionProperty.java",
              "type": "Class",
              "code": "    @Override\n    @Nonnull\n    public Class<C> getType() {\n        return Cast.uncheckedNonnullCast(collectionType);\n    }\n\n    @Override"
            },
            {
              "step": 55,
              "variableName": "provider.getType()",
              "startLine": 41,
              "startColumn": 35,
              "endLine": 41,
              "endColumn": 53,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/api/internal/provider/OrElseFixedValueProvider.java",
              "type": "Class",
              "code": "    @Nullable\n    @Override\n    public Class<T> getType() {\n        return Cast.uncheckedCast(provider.getType());\n    }\n\n    @Override"
            },
            {
              "step": 56,
              "variableName": "@Nullable Object object",
              "startLine": 71,
              "startColumn": 39,
              "endLine": 71,
              "endColumn": 62,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/Cast.java",
              "type": "Object",
              "code": "\n    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})\n    @Nullable\n    public static <T> T uncheckedCast(@Nullable Object object) {\n        return (T) object;\n    }\n"
            },
            {
              "step": 57,
              "variableName": "(T) object",
              "startLine": 72,
              "startColumn": 16,
              "endLine": 72,
              "endColumn": 26,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/Cast.java",
              "type": "Object",
              "code": "    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})\n    @Nullable\n    public static <T> T uncheckedCast(@Nullable Object object) {\n        return (T) object;\n    }\n\n    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})"
            },
            {
              "step": 58,
              "variableName": "Cast.uncheckedCast(sanitizer.sanitize(t))",
              "startLine": 41,
              "startColumn": 15,
              "endLine": 41,
              "endColumn": 56,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/api/internal/provider/TypeSanitizingTransformer.java",
              "type": "Object",
              "code": "\n    @Override\n    public T transform(T t) {\n        T v = Cast.uncheckedCast(sanitizer.sanitize(t));\n        if (targetType.isInstance(v)) {\n            return v;\n        }"
            },
            {
              "step": 59,
              "variableName": "v",
              "startLine": 43,
              "startColumn": 20,
              "endLine": 43,
              "endColumn": 21,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/api/internal/provider/TypeSanitizingTransformer.java",
              "type": "Object",
              "code": "    public T transform(T t) {\n        T v = Cast.uncheckedCast(sanitizer.sanitize(t));\n        if (targetType.isInstance(v)) {\n            return v;\n        }\n        throw new IllegalArgumentException(String.format(\"Cannot get the value of %s of type %s as the provider associated with this property returned a value of type %s.\", owner.getDisplayName(), targetType.getName(), v.getClass().getName()));\n    }"
            },
            {
              "step": 60,
              "variableName": "itemDescriptorGenerator.transform(name)",
              "startLine": 82,
              "startColumn": 52,
              "endLine": 82,
              "endColumn": 91,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/model/collection/internal/BridgedCollections.java",
              "type": "String",
              "code": "                                    .descriptor(new SimpleModelRuleDescriptor(new Factory<String>() {\n                                        @Override\n                                        public String create() {\n                                            return itemDescriptorGenerator.transform(name);\n                                        }\n                                    }))\n                                    .build();"
            },
            {
              "step": 61,
              "variableName": "descriptor.create()",
              "startLine": 38,
              "startColumn": 58,
              "endLine": 38,
              "endColumn": 77,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/core/rule/describe/SimpleModelRuleDescriptor.java",
              "type": "String",
              "code": "            @Override\n            public String create() {\n                if (cachedValue == null) {\n                    cachedValue = STRING_INTERNER.intern(descriptor.create());\n                }\n                return cachedValue;\n            }"
            },
            {
              "step": 62,
              "variableName": "@Nullable String sample",
              "startLine": 35,
              "startColumn": 26,
              "endLine": 35,
              "endColumn": 49,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/api/internal/cache/StringInterner.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public String intern(@Nullable String sample) {\n        if (sample == null) {\n            return null;\n        }"
            },
            {
              "step": 63,
              "variableName": "sample",
              "startLine": 39,
              "startColumn": 32,
              "endLine": 39,
              "endColumn": 38,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/api/internal/cache/StringInterner.java",
              "type": "String",
              "code": "        if (sample == null) {\n            return null;\n        }\n        return interner.intern(sample);\n    }\n}\n"
            },
            {
              "step": 64,
              "variableName": "String sample",
              "startLine": 44,
              "startColumn": 26,
              "endLine": 44,
              "endColumn": 39,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/util/internal/SimpleMapInterner.java",
              "type": "String",
              "code": "\n    @Override\n    @SuppressWarnings(\"ALL\")\n    public String intern(String sample) {\n        if (sample == null) {\n            return null;\n        }"
            },
            {
              "step": 65,
              "variableName": "sample",
              "startLine": 53,
              "startColumn": 16,
              "endLine": 53,
              "endColumn": 22,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/util/internal/SimpleMapInterner.java",
              "type": "String",
              "code": "            return interned;\n        }\n        internedStrings.put(sample, sample);\n        return sample;\n    }\n}\n"
            },
            {
              "step": 66,
              "variableName": "interner.intern(sample)",
              "startLine": 39,
              "startColumn": 16,
              "endLine": 39,
              "endColumn": 39,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/api/internal/cache/StringInterner.java",
              "type": "String",
              "code": "        if (sample == null) {\n            return null;\n        }\n        return interner.intern(sample);\n    }\n}\n"
            },
            {
              "step": 67,
              "variableName": "STRING_INTERNER.intern(descriptor.create())",
              "startLine": 38,
              "startColumn": 35,
              "endLine": 38,
              "endColumn": 78,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/core/rule/describe/SimpleModelRuleDescriptor.java",
              "type": "String",
              "code": "            @Override\n            public String create() {\n                if (cachedValue == null) {\n                    cachedValue = STRING_INTERNER.intern(descriptor.create());\n                }\n                return cachedValue;\n            }"
            },
            {
              "step": 68,
              "variableName": "cachedValue",
              "startLine": 40,
              "startColumn": 24,
              "endLine": 40,
              "endColumn": 35,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/core/rule/describe/SimpleModelRuleDescriptor.java",
              "type": "String",
              "code": "                if (cachedValue == null) {\n                    cachedValue = STRING_INTERNER.intern(descriptor.create());\n                }\n                return cachedValue;\n            }\n        };\n    }"
            },
            {
              "step": 69,
              "variableName": "factory.create()",
              "startLine": 59,
              "startColumn": 16,
              "endLine": 59,
              "endColumn": 32,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/core/rule/describe/SimpleModelRuleDescriptor.java",
              "type": "String",
              "code": "    }\n\n    private String getDescriptor() {\n        return factory.create();\n    }\n\n    @Override"
            },
            {
              "step": 70,
              "variableName": "getDescriptor()",
              "startLine": 65,
              "startColumn": 31,
              "endLine": 65,
              "endColumn": 46,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/core/rule/describe/SimpleModelRuleDescriptor.java",
              "type": "String",
              "code": "    @Override\n    public void describeTo(Appendable appendable) {\n        try {\n            appendable.append(getDescriptor());\n        } catch (IOException e) {\n            throw new UncheckedIOException(e);\n        }"
            },
            {
              "step": 71,
              "variableName": "appendable",
              "startLine": 65,
              "startColumn": 13,
              "endLine": 65,
              "endColumn": 23,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/core/rule/describe/SimpleModelRuleDescriptor.java",
              "type": "Appendable",
              "code": "    @Override\n    public void describeTo(Appendable appendable) {\n        try {\n            appendable.append(getDescriptor());\n        } catch (IOException e) {\n            throw new UncheckedIOException(e);\n        }"
            },
            {
              "step": 72,
              "variableName": "sb",
              "startLine": 49,
              "startColumn": 20,
              "endLine": 49,
              "endColumn": 22,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/core/rule/describe/AbstractModelRuleDescriptor.java",
              "type": "StringBuilder",
              "code": "    @Override\n    public String toString() {\n        StringBuilder sb = new StringBuilder();\n        describeTo(sb);\n        return sb.toString();\n    }\n}"
            },
            {
              "step": 73,
              "variableName": "sb",
              "startLine": 50,
              "startColumn": 16,
              "endLine": 50,
              "endColumn": 18,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/core/rule/describe/AbstractModelRuleDescriptor.java",
              "type": "StringBuilder",
              "code": "    public String toString() {\n        StringBuilder sb = new StringBuilder();\n        describeTo(sb);\n        return sb.toString();\n    }\n}\n"
            },
            {
              "step": 74,
              "variableName": "sb.toString()",
              "startLine": 50,
              "startColumn": 16,
              "endLine": 50,
              "endColumn": 29,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/core/rule/describe/AbstractModelRuleDescriptor.java",
              "type": "String",
              "code": "    public String toString() {\n        StringBuilder sb = new StringBuilder();\n        describeTo(sb);\n        return sb.toString();\n    }\n}\n"
            },
            {
              "step": 75,
              "variableName": "creatorDescriptor.toString()",
              "startLine": 53,
              "startColumn": 13,
              "endLine": 53,
              "endColumn": 41,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/report/IncompatibleTypeReferenceReporter.java",
              "type": "String",
              "code": "        ModelPath path = node.getPath();\n        ModelRuleDescriptor creatorDescriptor = node.getDescriptor();\n        return new IncompatibleTypeReferenceReporter(\n            creatorDescriptor.toString(), path.toString(), type.toString(), description, writable,\n            node.getTypeDescriptions()\n        );\n    }"
            },
            {
              "step": 76,
              "variableName": "String creator",
              "startLine": 40,
              "startColumn": 46,
              "endLine": 40,
              "endColumn": 60,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/report/IncompatibleTypeReferenceReporter.java",
              "type": "String",
              "code": "    private final boolean writable;\n    private final Iterable<String> candidateTypes;\n\n    public IncompatibleTypeReferenceReporter(String creator, String path, String type, String description, boolean writable, Iterable<String> candidateTypes) {\n        this.creator = creator;\n        this.path = path;\n        this.type = type;"
            },
            {
              "step": 77,
              "variableName": "creator",
              "startLine": 41,
              "startColumn": 24,
              "endLine": 41,
              "endColumn": 31,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/report/IncompatibleTypeReferenceReporter.java",
              "type": "String",
              "code": "    private final Iterable<String> candidateTypes;\n\n    public IncompatibleTypeReferenceReporter(String creator, String path, String type, String description, boolean writable, Iterable<String> candidateTypes) {\n        this.creator = creator;\n        this.path = path;\n        this.type = type;\n        this.description = description;"
            },
            {
              "step": 78,
              "variableName": "this",
              "startLine": 41,
              "startColumn": 9,
              "endLine": 41,
              "endColumn": 13,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/report/IncompatibleTypeReferenceReporter.java",
              "type": "IncompatibleTypeReferenceReporter [creator] : String",
              "code": "    private final Iterable<String> candidateTypes;\n\n    public IncompatibleTypeReferenceReporter(String creator, String path, String type, String description, boolean writable, Iterable<String> candidateTypes) {\n        this.creator = creator;\n        this.path = path;\n        this.type = type;\n        this.description = description;"
            },
            {
              "step": 79,
              "variableName": "new IncompatibleTypeReferenceReporter(...) : IncompatibleTypeReferenceReporter [creator] : String",
              "startLine": 52,
              "startColumn": 16,
              "endLine": 55,
              "endColumn": 10,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/report/IncompatibleTypeReferenceReporter.java",
              "type": "IncompatibleTypeReferenceReporter [creator] : String",
              "code": "    public static IncompatibleTypeReferenceReporter of(MutableModelNode node, ModelType<?> type, String description, boolean writable) {\n        ModelPath path = node.getPath();\n        ModelRuleDescriptor creatorDescriptor = node.getDescriptor();\n        return new IncompatibleTypeReferenceReporter(\n            creatorDescriptor.toString(), path.toString(), type.toString(), description, writable,\n            node.getTypeDescriptions()\n        );"
            },
            {
              "step": 80,
              "variableName": "IncompatibleTypeReferenceReporter.of(node, elementType, action.getSubject().getDescription(), true)",
              "startLine": 522,
              "startColumn": 21,
              "endLine": 522,
              "endColumn": 120,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/core/NodeBackedModelMap.java",
              "type": "IncompatibleTypeReferenceReporter [creator] : String",
              "code": "            node.ensureAtLeast(ModelNode.State.Discovered);\n            if (!node.canBeViewedAs(elementType)) {\n                throw new InvalidModelRuleException(action.getDescriptor(), new ModelRuleBindingException(\n                    IncompatibleTypeReferenceReporter.of(node, elementType, action.getSubject().getDescription(), true).asString()\n                ));\n            }\n            parent.validateCanBindAction(node, action);"
            },
            {
              "step": 81,
              "variableName": "asString",
              "startLine": 58,
              "startColumn": 19,
              "endLine": 58,
              "endColumn": 27,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/report/IncompatibleTypeReferenceReporter.java",
              "type": "IncompatibleTypeReferenceReporter [creator] : String",
              "code": "        );\n    }\n\n    public String asString() {\n        StringWriter string = new StringWriter();\n        writeTo(new PrintWriter(string));\n        return string.toString();"
            },
            {
              "step": 82,
              "variableName": "writeTo(new PrintWriter(string))",
              "startLine": 60,
              "startColumn": 9,
              "endLine": 60,
              "endColumn": 41,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/report/IncompatibleTypeReferenceReporter.java",
              "type": "IncompatibleTypeReferenceReporter [creator] : String",
              "code": "\n    public String asString() {\n        StringWriter string = new StringWriter();\n        writeTo(new PrintWriter(string));\n        return string.toString();\n    }\n"
            },
            {
              "step": 83,
              "variableName": "writeTo",
              "startLine": 64,
              "startColumn": 17,
              "endLine": 64,
              "endColumn": 24,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/report/IncompatibleTypeReferenceReporter.java",
              "type": "IncompatibleTypeReferenceReporter [creator] : String",
              "code": "        return string.toString();\n    }\n\n    public void writeTo(PrintWriter writer) {\n        //\"type-only model reference of type '%s'%s is ambiguous as multiple model elements are available for this type:%n  %s (created by %s)%n  %s (created by %s)\",\n        writer.print(\"Model reference to element '\");\n        writer.print(path);"
            },
            {
              "step": 84,
              "variableName": "creator",
              "startLine": 77,
              "startColumn": 22,
              "endLine": 77,
              "endColumn": 29,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/report/IncompatibleTypeReferenceReporter.java",
              "type": "IncompatibleTypeReferenceReporter [creator] : String",
              "code": "        }\n        writer.println(\" is invalid due to incompatible types.\");\n        writer.print(\"This element was created by \");\n        writer.print(creator);\n        writer.print(\" and can be \");\n        writer.print(writable ? \"mutated\" : \"read\");\n        writer.println(\" as the following types:\");"
            },
            {
              "step": 85,
              "variableName": "creator",
              "startLine": 77,
              "startColumn": 22,
              "endLine": 77,
              "endColumn": 29,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/report/IncompatibleTypeReferenceReporter.java",
              "type": "",
              "code": "        }\n        writer.println(\" is invalid due to incompatible types.\");\n        writer.print(\"This element was created by \");\n        writer.print(creator);\n        writer.print(\" and can be \");\n        writer.print(writable ? \"mutated\" : \"read\");\n        writer.println(\" as the following types:\");"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "source",
              "startLine": 42,
              "startColumn": 27,
              "endLine": 42,
              "endColumn": 33,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/RegExpNameMapper.java",
              "type": "String",
              "code": "        if (matcher == null) {\n            matcher = pattern.matcher(source);\n        } else {\n            matcher.reset(source);\n        }\n        String result = source;\n        if (matcher.find()) {"
            },
            {
              "step": 1,
              "variableName": "result",
              "startLine": 48,
              "startColumn": 16,
              "endLine": 48,
              "endColumn": 22,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/RegExpNameMapper.java",
              "type": "String",
              "code": "        if (matcher.find()) {\n            result = matcher.replaceFirst(replacement);\n        }\n        return result;\n    }\n}\n"
            },
            {
              "step": 2,
              "variableName": "transformer.transform(value)",
              "startLine": 37,
              "startColumn": 31,
              "endLine": 37,
              "endColumn": 59,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/ChainingTransformer.java",
              "type": "String",
              "code": "    public T transform(T original) {\n        T value = original;\n        for (Transformer<T, T> transformer : transformers) {\n            value = type.cast(transformer.transform(value));\n        }\n        return value;\n    }"
            },
            {
              "step": 3,
              "variableName": "type.cast(transformer.transform(value))",
              "startLine": 37,
              "startColumn": 21,
              "endLine": 37,
              "endColumn": 60,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/ChainingTransformer.java",
              "type": "String",
              "code": "    public T transform(T original) {\n        T value = original;\n        for (Transformer<T, T> transformer : transformers) {\n            value = type.cast(transformer.transform(value));\n        }\n        return value;\n    }"
            },
            {
              "step": 4,
              "variableName": "value",
              "startLine": 39,
              "startColumn": 16,
              "endLine": 39,
              "endColumn": 21,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/ChainingTransformer.java",
              "type": "String",
              "code": "        for (Transformer<T, T> transformer : transformers) {\n            value = type.cast(transformer.transform(value));\n        }\n        return value;\n    }\n\n    public void add(Transformer<T, T> transformer) {"
            },
            {
              "step": 5,
              "variableName": "describer.transform(this)",
              "startLine": 163,
              "startColumn": 16,
              "endLine": 163,
              "endColumn": 41,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/repositories/DefaultMavenArtifactRepository.java",
              "type": "String",
              "code": "\n    @Override\n    public String getDisplayName() {\n        return describer.transform(this);\n    }\n\n    @Override"
            },
            {
              "step": 6,
              "variableName": "describable.getDisplayName()",
              "startLine": 313,
              "startColumn": 35,
              "endLine": 313,
              "endColumn": 63,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "String",
              "code": "        public String getDisplayName() {\n            synchronized (this) {\n                if (displayName == null) {\n                    displayName = describable.getDisplayName();\n                    if (capDisplayName != null || !(describable instanceof DisplayName)) {\n                        describable = null;\n                    }"
            },
            {
              "step": 7,
              "variableName": "displayName",
              "startLine": 318,
              "startColumn": 24,
              "endLine": 318,
              "endColumn": 35,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "String",
              "code": "                        describable = null;\n                    }\n                }\n                return displayName;\n            }\n        }\n    }"
            },
            {
              "step": 8,
              "variableName": "displayName.getDisplayName()",
              "startLine": 772,
              "startColumn": 73,
              "endLine": 772,
              "endColumn": 101,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/configurations/DefaultConfiguration.java",
              "type": "String",
              "code": "                try {\n                    results = resolver.resolveGraph(DefaultConfiguration.this);\n                } catch (Exception e) {\n                    throw exceptionMapper.mapFailure(e, \"dependencies\", displayName.getDisplayName());\n                }\n\n                // Make the new state visible in case a dependency resolution listener queries the result, which requires the new state"
            },
            {
              "step": 9,
              "variableName": "String contextDisplayName",
              "startLine": 68,
              "startColumn": 77,
              "endLine": 68,
              "endColumn": 102,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "String",
              "code": "        return mapFailure(failure, type, displayName);\n    }\n\n    public TypedResolveException mapFailure(Throwable failure, String type, String contextDisplayName) {\n        if (!(failure instanceof TypedResolveException)) {\n            return new TypedResolveException(\n                type,"
            },
            {
              "step": 10,
              "variableName": "contextDisplayName",
              "startLine": 72,
              "startColumn": 17,
              "endLine": 72,
              "endColumn": 35,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "String",
              "code": "        if (!(failure instanceof TypedResolveException)) {\n            return new TypedResolveException(\n                type,\n                contextDisplayName,\n                ImmutableList.of(mapRepositoryOverrideFailure(contextDisplayName, failure))\n            );\n        }"
            },
            {
              "step": 11,
              "variableName": "new TypedResolveException(...) : TypedResolveException",
              "startLine": 70,
              "startColumn": 20,
              "endLine": 74,
              "endColumn": 14,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "TypedResolveException",
              "code": "\n    public TypedResolveException mapFailure(Throwable failure, String type, String contextDisplayName) {\n        if (!(failure instanceof TypedResolveException)) {\n            return new TypedResolveException(\n                type,\n                contextDisplayName,\n                ImmutableList.of(mapRepositoryOverrideFailure(contextDisplayName, failure))"
            },
            {
              "step": 12,
              "variableName": "exceptionMapper.mapFailure(e, \"dependencies\", displayName.getDisplayName())",
              "startLine": 772,
              "startColumn": 27,
              "endLine": 772,
              "endColumn": 102,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/configurations/DefaultConfiguration.java",
              "type": "TypedResolveException",
              "code": "                try {\n                    results = resolver.resolveGraph(DefaultConfiguration.this);\n                } catch (Exception e) {\n                    throw exceptionMapper.mapFailure(e, \"dependencies\", displayName.getDisplayName());\n                }\n\n                // Make the new state visible in case a dependency resolution listener queries the result, which requires the new state"
            },
            {
              "step": 13,
              "variableName": "e",
              "startLine": 772,
              "startColumn": 54,
              "endLine": 772,
              "endColumn": 55,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/configurations/DefaultConfiguration.java",
              "type": "Exception",
              "code": "                try {\n                    results = resolver.resolveGraph(DefaultConfiguration.this);\n                } catch (Exception e) {\n                    throw exceptionMapper.mapFailure(e, \"dependencies\", displayName.getDisplayName());\n                }\n\n                // Make the new state visible in case a dependency resolution listener queries the result, which requires the new state"
            },
            {
              "step": 14,
              "variableName": "Throwable failure",
              "startLine": 68,
              "startColumn": 45,
              "endLine": 68,
              "endColumn": 62,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Throwable",
              "code": "        return mapFailure(failure, type, displayName);\n    }\n\n    public TypedResolveException mapFailure(Throwable failure, String type, String contextDisplayName) {\n        if (!(failure instanceof TypedResolveException)) {\n            return new TypedResolveException(\n                type,"
            },
            {
              "step": 15,
              "variableName": "failure",
              "startLine": 73,
              "startColumn": 83,
              "endLine": 73,
              "endColumn": 90,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Throwable",
              "code": "            return new TypedResolveException(\n                type,\n                contextDisplayName,\n                ImmutableList.of(mapRepositoryOverrideFailure(contextDisplayName, failure))\n            );\n        }\n"
            },
            {
              "step": 16,
              "variableName": "Throwable failure",
              "startLine": 94,
              "startColumn": 78,
              "endLine": 94,
              "endColumn": 95,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Throwable",
              "code": "\n    // TODO: We should handle this exception at the source instead of using instanceof to detect it after it is thrown.\n    //       We should try to avoid catching and analyzing runtime exceptions\n    public Throwable mapRepositoryOverrideFailure(String contextDisplayName, Throwable failure) {\n        if (!(failure instanceof ModuleVersionNotFoundException) || !settingsRepositoriesIgnored()) {\n            return failure;\n        }"
            },
            {
              "step": 17,
              "variableName": "failure",
              "startLine": 108,
              "startColumn": 35,
              "endLine": 108,
              "endColumn": 42,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Throwable",
              "code": "        return new TypedResolveException(\n            \"dependencies\",\n            contextDisplayName,\n            Collections.singleton(failure),\n            resolutions\n        );\n    }"
            },
            {
              "step": 18,
              "variableName": "Collections.singleton(failure)",
              "startLine": 108,
              "startColumn": 13,
              "endLine": 108,
              "endColumn": 43,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Set [<element>] : Throwable",
              "code": "        return new TypedResolveException(\n            \"dependencies\",\n            contextDisplayName,\n            Collections.singleton(failure),\n            resolutions\n        );\n    }"
            },
            {
              "step": 19,
              "variableName": "Collections.singleton(failure)",
              "startLine": 108,
              "startColumn": 13,
              "endLine": 108,
              "endColumn": 43,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Set",
              "code": "        return new TypedResolveException(\n            \"dependencies\",\n            contextDisplayName,\n            Collections.singleton(failure),\n            resolutions\n        );\n    }"
            },
            {
              "step": 20,
              "variableName": "Iterable<? extends Throwable> failures",
              "startLine": 42,
              "startColumn": 67,
              "endLine": 42,
              "endColumn": 105,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ivyservice/TypedResolveException.java",
              "type": "Set",
              "code": "    /**\n     * Creates a new instance with resolutions.\n     */\n    public TypedResolveException(String type, String displayName, Iterable<? extends Throwable> failures, List<String> resolutions) {\n        super(buildMessage(type, displayName), failures, false);\n        this.type = type;\n        this.resolutions = ImmutableList.copyOf(resolutions);"
            },
            {
              "step": 21,
              "variableName": "failures",
              "startLine": 43,
              "startColumn": 48,
              "endLine": 43,
              "endColumn": 56,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ivyservice/TypedResolveException.java",
              "type": "Set",
              "code": "     * Creates a new instance with resolutions.\n     */\n    public TypedResolveException(String type, String displayName, Iterable<? extends Throwable> failures, List<String> resolutions) {\n        super(buildMessage(type, displayName), failures, false);\n        this.type = type;\n        this.resolutions = ImmutableList.copyOf(resolutions);\n    }"
            },
            {
              "step": 22,
              "variableName": "Iterable<? extends Throwable> causes",
              "startLine": 77,
              "startColumn": 48,
              "endLine": 77,
              "endColumn": 84,
              "uri": "gradle-8.14.0/subprojects/core-api/src/main/java/org/gradle/api/artifacts/ResolveException.java",
              "type": "Set",
              "code": "     * @since 8.9\n     */\n    @Incubating\n    protected ResolveException(String message, Iterable<? extends Throwable> causes, @SuppressWarnings(\"unused\") boolean dummy) {\n        super(message, causes);\n    }\n}"
            },
            {
              "step": 23,
              "variableName": "causes",
              "startLine": 78,
              "startColumn": 24,
              "endLine": 78,
              "endColumn": 30,
              "uri": "gradle-8.14.0/subprojects/core-api/src/main/java/org/gradle/api/artifacts/ResolveException.java",
              "type": "Set",
              "code": "     */\n    @Incubating\n    protected ResolveException(String message, Iterable<? extends Throwable> causes, @SuppressWarnings(\"unused\") boolean dummy) {\n        super(message, causes);\n    }\n}\n"
            },
            {
              "step": 24,
              "variableName": "Iterable<? extends Throwable> causes",
              "startLine": 47,
              "startColumn": 55,
              "endLine": 47,
              "endColumn": 91,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "Set",
              "code": "        this.causes.addAll(Arrays.asList(causes));\n    }\n\n    public DefaultMultiCauseException(String message, Iterable<? extends Throwable> causes) {\n        super(message);\n        this.message = message;\n        initCauses(causes);"
            },
            {
              "step": 25,
              "variableName": "causes",
              "startLine": 50,
              "startColumn": 20,
              "endLine": 50,
              "endColumn": 26,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "Set",
              "code": "    public DefaultMultiCauseException(String message, Iterable<? extends Throwable> causes) {\n        super(message);\n        this.message = message;\n        initCauses(causes);\n    }\n\n    public DefaultMultiCauseException(Factory<String> messageFactory) {"
            },
            {
              "step": 26,
              "variableName": "Iterable<? extends Throwable> causes",
              "startLine": 112,
              "startColumn": 28,
              "endLine": 112,
              "endColumn": 64,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "Iterable",
              "code": "        return null;\n    }\n\n    public void initCauses(Iterable<? extends Throwable> causes) {\n        this.causes.clear();\n        for (Throwable cause : causes) {\n            this.causes.add(cause);"
            },
            {
              "step": 27,
              "variableName": "cause",
              "startLine": 115,
              "startColumn": 29,
              "endLine": 115,
              "endColumn": 34,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "Throwable",
              "code": "    public void initCauses(Iterable<? extends Throwable> causes) {\n        this.causes.clear();\n        for (Throwable cause : causes) {\n            this.causes.add(cause);\n        }\n    }\n"
            },
            {
              "step": 28,
              "variableName": "this.causes",
              "startLine": 115,
              "startColumn": 13,
              "endLine": 115,
              "endColumn": 24,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "CopyOnWriteArrayList [<element>] : Throwable",
              "code": "    public void initCauses(Iterable<? extends Throwable> causes) {\n        this.causes.clear();\n        for (Throwable cause : causes) {\n            this.causes.add(cause);\n        }\n    }\n"
            },
            {
              "step": 29,
              "variableName": "this",
              "startLine": 115,
              "startColumn": 13,
              "endLine": 115,
              "endColumn": 17,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "DefaultMultiCauseException [causes, <element>] : Throwable",
              "code": "    public void initCauses(Iterable<? extends Throwable> causes) {\n        this.causes.clear();\n        for (Throwable cause : causes) {\n            this.causes.add(cause);\n        }\n    }\n"
            },
            {
              "step": 30,
              "variableName": "projectConfigurationException",
              "startLine": 57,
              "startColumn": 17,
              "endLine": 57,
              "endColumn": 46,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/DefaultExceptionAnalyser.java",
              "type": "ProjectConfigurationException [causes, <element>] : Throwable",
              "code": "                }\n            }\n            if (!additionalFailures.isEmpty()) {\n                projectConfigurationException.initCauses(additionalFailures);\n                failures.add(transform(projectConfigurationException));\n            }\n        } else if (exception instanceof ServiceCreationException) {"
            },
            {
              "step": 31,
              "variableName": "projectConfigurationException",
              "startLine": 58,
              "startColumn": 40,
              "endLine": 58,
              "endColumn": 69,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/DefaultExceptionAnalyser.java",
              "type": "ProjectConfigurationException [causes, <element>] : Throwable",
              "code": "            }\n            if (!additionalFailures.isEmpty()) {\n                projectConfigurationException.initCauses(additionalFailures);\n                failures.add(transform(projectConfigurationException));\n            }\n        } else if (exception instanceof ServiceCreationException) {\n            failures.add(transform(new InitializationException(exception)));"
            },
            {
              "step": 32,
              "variableName": "transform(projectConfigurationException)",
              "startLine": 58,
              "startColumn": 30,
              "endLine": 58,
              "endColumn": 70,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/DefaultExceptionAnalyser.java",
              "type": "LocationAwareException",
              "code": "            }\n            if (!additionalFailures.isEmpty()) {\n                projectConfigurationException.initCauses(additionalFailures);\n                failures.add(transform(projectConfigurationException));\n            }\n        } else if (exception instanceof ServiceCreationException) {\n            failures.add(transform(new InitializationException(exception)));"
            },
            {
              "step": 33,
              "variableName": "failures",
              "startLine": 58,
              "startColumn": 17,
              "endLine": 58,
              "endColumn": 25,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/DefaultExceptionAnalyser.java",
              "type": "Collection [<element>] : LocationAwareException",
              "code": "            }\n            if (!additionalFailures.isEmpty()) {\n                projectConfigurationException.initCauses(additionalFailures);\n                failures.add(transform(projectConfigurationException));\n            }\n        } else if (exception instanceof ServiceCreationException) {\n            failures.add(transform(new InitializationException(exception)));"
            },
            {
              "step": 34,
              "variableName": "result",
              "startLine": 53,
              "startColumn": 54,
              "endLine": 53,
              "endColumn": 60,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/MultipleBuildFailuresExceptionAnalyser.java",
              "type": "ArrayList [<element>] : LocationAwareException",
              "code": "        for (Throwable failure : failures) {\n            if (failure instanceof MultipleBuildFailures) {\n                for (Throwable cause : ((MultipleBuildFailures) failure).getCauses()) {\n                    collector.collectFailures(cause, result);\n                }\n            } else {\n                collector.collectFailures(failure, result);"
            },
            {
              "step": 35,
              "variableName": "result",
              "startLine": 60,
              "startColumn": 39,
              "endLine": 60,
              "endColumn": 45,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/MultipleBuildFailuresExceptionAnalyser.java",
              "type": "ArrayList [<element>] : LocationAwareException",
              "code": "            }\n        }\n        if (result.size() == 1 && result.get(0) instanceof RuntimeException) {\n            return (RuntimeException) result.get(0);\n        } else {\n            return new MultipleBuildFailures(result);\n        }"
            },
            {
              "step": 36,
              "variableName": "result.get(0)",
              "startLine": 60,
              "startColumn": 39,
              "endLine": 60,
              "endColumn": 52,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/MultipleBuildFailuresExceptionAnalyser.java",
              "type": "LocationAwareException",
              "code": "            }\n        }\n        if (result.size() == 1 && result.get(0) instanceof RuntimeException) {\n            return (RuntimeException) result.get(0);\n        } else {\n            return new MultipleBuildFailures(result);\n        }"
            },
            {
              "step": 37,
              "variableName": "(RuntimeException) result.get(0)",
              "startLine": 60,
              "startColumn": 20,
              "endLine": 60,
              "endColumn": 52,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/MultipleBuildFailuresExceptionAnalyser.java",
              "type": "LocationAwareException",
              "code": "            }\n        }\n        if (result.size() == 1 && result.get(0) instanceof RuntimeException) {\n            return (RuntimeException) result.get(0);\n        } else {\n            return new MultipleBuildFailures(result);\n        }"
            },
            {
              "step": 38,
              "variableName": "exceptionAnalyser.transform(finishFailures)",
              "startLine": 72,
              "startColumn": 16,
              "endLine": 72,
              "endColumn": 59,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/internal/buildtree/DefaultBuildTreeFinishExecutor.java",
              "type": "LocationAwareException",
              "code": "            finishFailures.addAll(result.getFailures());\n        });\n\n        return exceptionAnalyser.transform(finishFailures);\n    }\n}\n"
            },
            {
              "step": 39,
              "variableName": "delegate.finishBuildTree(failures)",
              "startLine": 46,
              "startColumn": 28,
              "endLine": 46,
              "endColumn": 62,
              "uri": "gradle-8.14.0/subprojects/composite-builds/src/main/java/org/gradle/composite/internal/OperationFiringBuildTreeFinishExecutor.java",
              "type": "LocationAwareException",
              "code": "            @Override\n            public RuntimeException call(BuildOperationContext context) {\n                try {\n                    return delegate.finishBuildTree(failures);\n                } finally {\n                    context.setResult(RESULT);\n                }"
            },
            {
              "step": 40,
              "variableName": "buildOperation.call(context)",
              "startLine": 239,
              "startColumn": 21,
              "endLine": 239,
              "endColumn": 49,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/testFixtures/java/org/gradle/internal/operations/TestBuildOperationRunner.java",
              "type": "LocationAwareException",
              "code": "            TestBuildOperationContext context = new TestBuildOperationContext(record);\n            T t;\n            try {\n                t = buildOperation.call(context);\n            } catch (Throwable failure) {\n                if (record.failure == null) {\n                    record.failure = failure;"
            },
            {
              "step": 41,
              "variableName": "t",
              "startLine": 246,
              "startColumn": 20,
              "endLine": 246,
              "endColumn": 21,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/testFixtures/java/org/gradle/internal/operations/TestBuildOperationRunner.java",
              "type": "LocationAwareException",
              "code": "                }\n                throw throwAsUncheckedException(failure);\n            }\n            return t;\n        }\n\n        private <O extends BuildOperation> void execute(O buildOperation, BuildOperationWorker<O> worker) {"
            },
            {
              "step": 42,
              "variableName": "log.call(buildOperation)",
              "startLine": 51,
              "startColumn": 16,
              "endLine": 51,
              "endColumn": 40,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/testFixtures/java/org/gradle/internal/operations/TestBuildOperationRunner.java",
              "type": "LocationAwareException",
              "code": "\n    @Override\n    public <T> T call(CallableBuildOperation<T> buildOperation) {\n        return log.call(buildOperation);\n    }\n\n    @Override"
            },
            {
              "step": 43,
              "variableName": "ca",
              "startLine": 115,
              "startColumn": 5,
              "endLine": 121,
              "endColumn": 7,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/configurationcache/ConfigurationCacheBuildOperations.kt",
              "type": "LocationAwareException",
              "code": "\ninternal\nfun <T : Any> BuildOperationRunner.withModelLoadOperation(block: () -> T): T =\n    call(object : CallableBuildOperation<T> {\n        override fun description(): BuildOperationDescriptor.Builder = BuildOperationDescriptor\n            .displayName(\"Load model from configuration cache\")\n            .progressDisplayName(\"Loading model from configuration cache\")"
            },
            {
              "step": 44,
              "variableName": "ca",
              "startLine": 115,
              "startColumn": 5,
              "endLine": 121,
              "endColumn": 7,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/configurationcache/ConfigurationCacheBuildOperations.kt",
              "type": "LocationAwareException",
              "code": "\ninternal\nfun <T : Any> BuildOperationRunner.withModelLoadOperation(block: () -> T): T =\n    call(object : CallableBuildOperation<T> {\n        override fun description(): BuildOperationDescriptor.Builder = BuildOperationDescriptor\n            .displayName(\"Load model from configuration cache\")\n            .progressDisplayName(\"Loading model from configuration cache\")"
            },
            {
              "step": 45,
              "variableName": "b",
              "startLine": 635,
              "startColumn": 9,
              "endLine": 641,
              "endColumn": 10,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "        // No need to record the `ClassLoaderScope` tree when loading\n        scopeRegistryListener.dispose()\n\n        buildOperationRunner.withModelLoadOperation {\n            val storeLoadResult = entryStore.useForStateLoad(StateType.Model) { stateFile: ConfigurationCacheStateFile ->\n                cacheIO.readModelFrom(stateFile)\n            }"
            },
            {
              "step": 46,
              "variableName": "block()",
              "startLine": 668,
              "startColumn": 22,
              "endLine": 668,
              "endColumn": 29,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "    private\n    inline fun <T> runAtConfigurationTime(block: () -> T): T {\n        prepareConfigurationTimeBarrier()\n        val result = block()\n        crossConfigurationTimeBarrier()\n        return result\n    }"
            },
            {
              "step": 47,
              "variableName": "result",
              "startLine": 670,
              "startColumn": 16,
              "endLine": 670,
              "endColumn": 22,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "        prepareConfigurationTimeBarrier()\n        val result = block()\n        crossConfigurationTimeBarrier()\n        return result\n    }\n\n    private"
            },
            {
              "step": 48,
              "variableName": "runAtConfigurationTime(...) : LocationAwareException",
              "startLine": 631,
              "startColumn": 28,
              "endLine": 642,
              "endColumn": 6,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "    data class LoadResultMetadata(val originInvocationId: String? = null)\n\n    private\n    fun loadModel(): Any = runAtConfigurationTime {\n        // No need to record the `ClassLoaderScope` tree when loading\n        scopeRegistryListener.dispose()\n"
            },
            {
              "step": 49,
              "variableName": "loadModel()",
              "startLine": 268,
              "startColumn": 20,
              "endLine": 268,
              "endColumn": 31,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "    override fun <T : Any> loadOrCreateModel(creator: () -> T): T {\n        if (isLoaded) {\n            runLoadedSideEffects()\n            return loadModel().uncheckedCast()\n        }\n\n        return runWorkThatContributesToCacheEntry {"
            },
            {
              "step": 50,
              "variableName": "Any",
              "startLine": 22,
              "startColumn": 15,
              "endLine": 22,
              "endColumn": 18,
              "uri": "gradle-8.14.0/platforms/core-configuration/stdlib-kotlin-extensions/src/main/kotlin/org/gradle/internal/extensions/stdlib/CastExtensions.kt",
              "type": "Object",
              "code": "import org.gradle.internal.Cast\n\n\nfun <T : Any> Any.uncheckedCast(): T =\n    Cast.uncheckedNonnullCast(this)\n"
            },
            {
              "step": 51,
              "variableName": "this",
              "startLine": 23,
              "startColumn": 31,
              "endLine": 23,
              "endColumn": 35,
              "uri": "gradle-8.14.0/platforms/core-configuration/stdlib-kotlin-extensions/src/main/kotlin/org/gradle/internal/extensions/stdlib/CastExtensions.kt",
              "type": "Object",
              "code": "\n\nfun <T : Any> Any.uncheckedCast(): T =\n    Cast.uncheckedNonnullCast(this)\n"
            },
            {
              "step": 52,
              "variableName": "Object object",
              "startLine": 76,
              "startColumn": 46,
              "endLine": 76,
              "endColumn": 59,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/Cast.java",
              "type": "Object",
              "code": "    }\n\n    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})\n    public static <T> T uncheckedNonnullCast(Object object) {\n        return (T) object;\n    }\n}"
            },
            {
              "step": 53,
              "variableName": "(T) object",
              "startLine": 77,
              "startColumn": 16,
              "endLine": 77,
              "endColumn": 26,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/Cast.java",
              "type": "Object",
              "code": "\n    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})\n    public static <T> T uncheckedNonnullCast(Object object) {\n        return (T) object;\n    }\n}\n"
            },
            {
              "step": 54,
              "variableName": "Cast.uncheckedNonnullCast(collectionType)",
              "startLine": 223,
              "startColumn": 16,
              "endLine": 223,
              "endColumn": 57,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/api/internal/provider/AbstractCollectionProperty.java",
              "type": "Class",
              "code": "    @Override\n    @Nonnull\n    public Class<C> getType() {\n        return Cast.uncheckedNonnullCast(collectionType);\n    }\n\n    @Override"
            },
            {
              "step": 55,
              "variableName": "provider.getType()",
              "startLine": 41,
              "startColumn": 35,
              "endLine": 41,
              "endColumn": 53,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/api/internal/provider/OrElseFixedValueProvider.java",
              "type": "Class",
              "code": "    @Nullable\n    @Override\n    public Class<T> getType() {\n        return Cast.uncheckedCast(provider.getType());\n    }\n\n    @Override"
            },
            {
              "step": 56,
              "variableName": "@Nullable Object object",
              "startLine": 71,
              "startColumn": 39,
              "endLine": 71,
              "endColumn": 62,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/Cast.java",
              "type": "Object",
              "code": "\n    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})\n    @Nullable\n    public static <T> T uncheckedCast(@Nullable Object object) {\n        return (T) object;\n    }\n"
            },
            {
              "step": 57,
              "variableName": "(T) object",
              "startLine": 72,
              "startColumn": 16,
              "endLine": 72,
              "endColumn": 26,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/Cast.java",
              "type": "Object",
              "code": "    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})\n    @Nullable\n    public static <T> T uncheckedCast(@Nullable Object object) {\n        return (T) object;\n    }\n\n    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})"
            },
            {
              "step": 58,
              "variableName": "Cast.uncheckedCast(sanitizer.sanitize(t))",
              "startLine": 41,
              "startColumn": 15,
              "endLine": 41,
              "endColumn": 56,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/api/internal/provider/TypeSanitizingTransformer.java",
              "type": "Object",
              "code": "\n    @Override\n    public T transform(T t) {\n        T v = Cast.uncheckedCast(sanitizer.sanitize(t));\n        if (targetType.isInstance(v)) {\n            return v;\n        }"
            },
            {
              "step": 59,
              "variableName": "v",
              "startLine": 43,
              "startColumn": 20,
              "endLine": 43,
              "endColumn": 21,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/api/internal/provider/TypeSanitizingTransformer.java",
              "type": "Object",
              "code": "    public T transform(T t) {\n        T v = Cast.uncheckedCast(sanitizer.sanitize(t));\n        if (targetType.isInstance(v)) {\n            return v;\n        }\n        throw new IllegalArgumentException(String.format(\"Cannot get the value of %s of type %s as the provider associated with this property returned a value of type %s.\", owner.getDisplayName(), targetType.getName(), v.getClass().getName()));\n    }"
            },
            {
              "step": 60,
              "variableName": "itemDescriptorGenerator.transform(name)",
              "startLine": 82,
              "startColumn": 52,
              "endLine": 82,
              "endColumn": 91,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/model/collection/internal/BridgedCollections.java",
              "type": "String",
              "code": "                                    .descriptor(new SimpleModelRuleDescriptor(new Factory<String>() {\n                                        @Override\n                                        public String create() {\n                                            return itemDescriptorGenerator.transform(name);\n                                        }\n                                    }))\n                                    .build();"
            },
            {
              "step": 61,
              "variableName": "descriptor.create()",
              "startLine": 38,
              "startColumn": 58,
              "endLine": 38,
              "endColumn": 77,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/core/rule/describe/SimpleModelRuleDescriptor.java",
              "type": "String",
              "code": "            @Override\n            public String create() {\n                if (cachedValue == null) {\n                    cachedValue = STRING_INTERNER.intern(descriptor.create());\n                }\n                return cachedValue;\n            }"
            },
            {
              "step": 62,
              "variableName": "@Nullable String sample",
              "startLine": 35,
              "startColumn": 26,
              "endLine": 35,
              "endColumn": 49,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/api/internal/cache/StringInterner.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public String intern(@Nullable String sample) {\n        if (sample == null) {\n            return null;\n        }"
            },
            {
              "step": 63,
              "variableName": "sample",
              "startLine": 39,
              "startColumn": 32,
              "endLine": 39,
              "endColumn": 38,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/api/internal/cache/StringInterner.java",
              "type": "String",
              "code": "        if (sample == null) {\n            return null;\n        }\n        return interner.intern(sample);\n    }\n}\n"
            },
            {
              "step": 64,
              "variableName": "String sample",
              "startLine": 44,
              "startColumn": 26,
              "endLine": 44,
              "endColumn": 39,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/util/internal/SimpleMapInterner.java",
              "type": "String",
              "code": "\n    @Override\n    @SuppressWarnings(\"ALL\")\n    public String intern(String sample) {\n        if (sample == null) {\n            return null;\n        }"
            },
            {
              "step": 65,
              "variableName": "sample",
              "startLine": 53,
              "startColumn": 16,
              "endLine": 53,
              "endColumn": 22,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/util/internal/SimpleMapInterner.java",
              "type": "String",
              "code": "            return interned;\n        }\n        internedStrings.put(sample, sample);\n        return sample;\n    }\n}\n"
            },
            {
              "step": 66,
              "variableName": "interner.intern(sample)",
              "startLine": 39,
              "startColumn": 16,
              "endLine": 39,
              "endColumn": 39,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/api/internal/cache/StringInterner.java",
              "type": "String",
              "code": "        if (sample == null) {\n            return null;\n        }\n        return interner.intern(sample);\n    }\n}\n"
            },
            {
              "step": 67,
              "variableName": "STRING_INTERNER.intern(descriptor.create())",
              "startLine": 38,
              "startColumn": 35,
              "endLine": 38,
              "endColumn": 78,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/core/rule/describe/SimpleModelRuleDescriptor.java",
              "type": "String",
              "code": "            @Override\n            public String create() {\n                if (cachedValue == null) {\n                    cachedValue = STRING_INTERNER.intern(descriptor.create());\n                }\n                return cachedValue;\n            }"
            },
            {
              "step": 68,
              "variableName": "cachedValue",
              "startLine": 40,
              "startColumn": 24,
              "endLine": 40,
              "endColumn": 35,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/core/rule/describe/SimpleModelRuleDescriptor.java",
              "type": "String",
              "code": "                if (cachedValue == null) {\n                    cachedValue = STRING_INTERNER.intern(descriptor.create());\n                }\n                return cachedValue;\n            }\n        };\n    }"
            },
            {
              "step": 69,
              "variableName": "factory.create()",
              "startLine": 59,
              "startColumn": 16,
              "endLine": 59,
              "endColumn": 32,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/core/rule/describe/SimpleModelRuleDescriptor.java",
              "type": "String",
              "code": "    }\n\n    private String getDescriptor() {\n        return factory.create();\n    }\n\n    @Override"
            },
            {
              "step": 70,
              "variableName": "getDescriptor()",
              "startLine": 65,
              "startColumn": 31,
              "endLine": 65,
              "endColumn": 46,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/core/rule/describe/SimpleModelRuleDescriptor.java",
              "type": "String",
              "code": "    @Override\n    public void describeTo(Appendable appendable) {\n        try {\n            appendable.append(getDescriptor());\n        } catch (IOException e) {\n            throw new UncheckedIOException(e);\n        }"
            },
            {
              "step": 71,
              "variableName": "appendable",
              "startLine": 65,
              "startColumn": 13,
              "endLine": 65,
              "endColumn": 23,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/core/rule/describe/SimpleModelRuleDescriptor.java",
              "type": "Appendable",
              "code": "    @Override\n    public void describeTo(Appendable appendable) {\n        try {\n            appendable.append(getDescriptor());\n        } catch (IOException e) {\n            throw new UncheckedIOException(e);\n        }"
            },
            {
              "step": 72,
              "variableName": "sb",
              "startLine": 49,
              "startColumn": 20,
              "endLine": 49,
              "endColumn": 22,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/core/rule/describe/AbstractModelRuleDescriptor.java",
              "type": "StringBuilder",
              "code": "    @Override\n    public String toString() {\n        StringBuilder sb = new StringBuilder();\n        describeTo(sb);\n        return sb.toString();\n    }\n}"
            },
            {
              "step": 73,
              "variableName": "sb",
              "startLine": 50,
              "startColumn": 16,
              "endLine": 50,
              "endColumn": 18,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/core/rule/describe/AbstractModelRuleDescriptor.java",
              "type": "StringBuilder",
              "code": "    public String toString() {\n        StringBuilder sb = new StringBuilder();\n        describeTo(sb);\n        return sb.toString();\n    }\n}\n"
            },
            {
              "step": 74,
              "variableName": "sb.toString()",
              "startLine": 50,
              "startColumn": 16,
              "endLine": 50,
              "endColumn": 29,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/core/rule/describe/AbstractModelRuleDescriptor.java",
              "type": "String",
              "code": "    public String toString() {\n        StringBuilder sb = new StringBuilder();\n        describeTo(sb);\n        return sb.toString();\n    }\n}\n"
            },
            {
              "step": 75,
              "variableName": "creatorDescriptor.toString()",
              "startLine": 53,
              "startColumn": 13,
              "endLine": 53,
              "endColumn": 41,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/report/IncompatibleTypeReferenceReporter.java",
              "type": "String",
              "code": "        ModelPath path = node.getPath();\n        ModelRuleDescriptor creatorDescriptor = node.getDescriptor();\n        return new IncompatibleTypeReferenceReporter(\n            creatorDescriptor.toString(), path.toString(), type.toString(), description, writable,\n            node.getTypeDescriptions()\n        );\n    }"
            },
            {
              "step": 76,
              "variableName": "String creator",
              "startLine": 40,
              "startColumn": 46,
              "endLine": 40,
              "endColumn": 60,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/report/IncompatibleTypeReferenceReporter.java",
              "type": "String",
              "code": "    private final boolean writable;\n    private final Iterable<String> candidateTypes;\n\n    public IncompatibleTypeReferenceReporter(String creator, String path, String type, String description, boolean writable, Iterable<String> candidateTypes) {\n        this.creator = creator;\n        this.path = path;\n        this.type = type;"
            },
            {
              "step": 77,
              "variableName": "creator",
              "startLine": 41,
              "startColumn": 24,
              "endLine": 41,
              "endColumn": 31,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/report/IncompatibleTypeReferenceReporter.java",
              "type": "String",
              "code": "    private final Iterable<String> candidateTypes;\n\n    public IncompatibleTypeReferenceReporter(String creator, String path, String type, String description, boolean writable, Iterable<String> candidateTypes) {\n        this.creator = creator;\n        this.path = path;\n        this.type = type;\n        this.description = description;"
            },
            {
              "step": 78,
              "variableName": "this",
              "startLine": 41,
              "startColumn": 9,
              "endLine": 41,
              "endColumn": 13,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/report/IncompatibleTypeReferenceReporter.java",
              "type": "IncompatibleTypeReferenceReporter [creator] : String",
              "code": "    private final Iterable<String> candidateTypes;\n\n    public IncompatibleTypeReferenceReporter(String creator, String path, String type, String description, boolean writable, Iterable<String> candidateTypes) {\n        this.creator = creator;\n        this.path = path;\n        this.type = type;\n        this.description = description;"
            },
            {
              "step": 79,
              "variableName": "new IncompatibleTypeReferenceReporter(...) : IncompatibleTypeReferenceReporter [creator] : String",
              "startLine": 52,
              "startColumn": 16,
              "endLine": 55,
              "endColumn": 10,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/report/IncompatibleTypeReferenceReporter.java",
              "type": "IncompatibleTypeReferenceReporter [creator] : String",
              "code": "    public static IncompatibleTypeReferenceReporter of(MutableModelNode node, ModelType<?> type, String description, boolean writable) {\n        ModelPath path = node.getPath();\n        ModelRuleDescriptor creatorDescriptor = node.getDescriptor();\n        return new IncompatibleTypeReferenceReporter(\n            creatorDescriptor.toString(), path.toString(), type.toString(), description, writable,\n            node.getTypeDescriptions()\n        );"
            },
            {
              "step": 80,
              "variableName": "IncompatibleTypeReferenceReporter.of(node, elementType, action.getSubject().getDescription(), true)",
              "startLine": 522,
              "startColumn": 21,
              "endLine": 522,
              "endColumn": 120,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/core/NodeBackedModelMap.java",
              "type": "IncompatibleTypeReferenceReporter [creator] : String",
              "code": "            node.ensureAtLeast(ModelNode.State.Discovered);\n            if (!node.canBeViewedAs(elementType)) {\n                throw new InvalidModelRuleException(action.getDescriptor(), new ModelRuleBindingException(\n                    IncompatibleTypeReferenceReporter.of(node, elementType, action.getSubject().getDescription(), true).asString()\n                ));\n            }\n            parent.validateCanBindAction(node, action);"
            },
            {
              "step": 81,
              "variableName": "asString",
              "startLine": 58,
              "startColumn": 19,
              "endLine": 58,
              "endColumn": 27,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/report/IncompatibleTypeReferenceReporter.java",
              "type": "IncompatibleTypeReferenceReporter [creator] : String",
              "code": "        );\n    }\n\n    public String asString() {\n        StringWriter string = new StringWriter();\n        writeTo(new PrintWriter(string));\n        return string.toString();"
            },
            {
              "step": 82,
              "variableName": "writeTo(new PrintWriter(string))",
              "startLine": 60,
              "startColumn": 9,
              "endLine": 60,
              "endColumn": 41,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/report/IncompatibleTypeReferenceReporter.java",
              "type": "IncompatibleTypeReferenceReporter [creator] : String",
              "code": "\n    public String asString() {\n        StringWriter string = new StringWriter();\n        writeTo(new PrintWriter(string));\n        return string.toString();\n    }\n"
            },
            {
              "step": 83,
              "variableName": "writeTo",
              "startLine": 64,
              "startColumn": 17,
              "endLine": 64,
              "endColumn": 24,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/report/IncompatibleTypeReferenceReporter.java",
              "type": "IncompatibleTypeReferenceReporter [creator] : String",
              "code": "        return string.toString();\n    }\n\n    public void writeTo(PrintWriter writer) {\n        //\"type-only model reference of type '%s'%s is ambiguous as multiple model elements are available for this type:%n  %s (created by %s)%n  %s (created by %s)\",\n        writer.print(\"Model reference to element '\");\n        writer.print(path);"
            },
            {
              "step": 84,
              "variableName": "creator",
              "startLine": 77,
              "startColumn": 22,
              "endLine": 77,
              "endColumn": 29,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/report/IncompatibleTypeReferenceReporter.java",
              "type": "IncompatibleTypeReferenceReporter [creator] : String",
              "code": "        }\n        writer.println(\" is invalid due to incompatible types.\");\n        writer.print(\"This element was created by \");\n        writer.print(creator);\n        writer.print(\" and can be \");\n        writer.print(writable ? \"mutated\" : \"read\");\n        writer.println(\" as the following types:\");"
            },
            {
              "step": 85,
              "variableName": "creator",
              "startLine": 77,
              "startColumn": 22,
              "endLine": 77,
              "endColumn": 29,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/report/IncompatibleTypeReferenceReporter.java",
              "type": "",
              "code": "        }\n        writer.println(\" is invalid due to incompatible types.\");\n        writer.print(\"This element was created by \");\n        writer.print(creator);\n        writer.print(\" and can be \");\n        writer.print(writable ? \"mutated\" : \"read\");\n        writer.println(\" as the following types:\");"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "src",
              "startLine": 115,
              "startColumn": 13,
              "endLine": 115,
              "endColumn": 16,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "Object",
              "code": "    }\n\n    private static void appendDisplayName(Object src, StringBuilder stringBuilder) {\n        if (src instanceof Describable) {\n            Describable describable = (Describable) src;\n            stringBuilder.append(describable.getDisplayName());\n        } else {"
            },
            {
              "step": 1,
              "variableName": "src",
              "startLine": 119,
              "startColumn": 34,
              "endLine": 119,
              "endColumn": 37,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "Object",
              "code": "            Describable describable = (Describable) src;\n            stringBuilder.append(describable.getDisplayName());\n        } else {\n            stringBuilder.append(src.toString());\n        }\n    }\n"
            },
            {
              "step": 2,
              "variableName": "toString",
              "startLine": 397,
              "startColumn": 19,
              "endLine": 397,
              "endColumn": 27,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "TestFile",
              "code": "    }\n\n    @Override\n    public String toString() {\n        return getPath();\n    }\n"
            },
            {
              "step": 3,
              "variableName": "getPath()",
              "startLine": 398,
              "startColumn": 16,
              "endLine": 398,
              "endColumn": 25,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "TestFile",
              "code": "\n    @Override\n    public String toString() {\n        return getPath();\n    }\n\n    public TestFile writelns(Iterable<String> lines) {"
            },
            {
              "step": 4,
              "variableName": "getPath()",
              "startLine": 398,
              "startColumn": 16,
              "endLine": 398,
              "endColumn": 25,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "String",
              "code": "\n    @Override\n    public String toString() {\n        return getPath();\n    }\n\n    public TestFile writelns(Iterable<String> lines) {"
            },
            {
              "step": 5,
              "variableName": "src.toString()",
              "startLine": 119,
              "startColumn": 34,
              "endLine": 119,
              "endColumn": 48,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "String",
              "code": "            Describable describable = (Describable) src;\n            stringBuilder.append(describable.getDisplayName());\n        } else {\n            stringBuilder.append(src.toString());\n        }\n    }\n"
            },
            {
              "step": 6,
              "variableName": "stringBuilder",
              "startLine": 119,
              "startColumn": 13,
              "endLine": 119,
              "endColumn": 26,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "StringBuilder",
              "code": "            Describable describable = (Describable) src;\n            stringBuilder.append(describable.getDisplayName());\n        } else {\n            stringBuilder.append(src.toString());\n        }\n    }\n"
            },
            {
              "step": 7,
              "variableName": "builder",
              "startLine": 202,
              "startColumn": 38,
              "endLine": 202,
              "endColumn": 45,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "StringBuilder",
              "code": "            StringBuilder builder = new StringBuilder(48);\n            appendDisplayName(part1, builder);\n            builder.append(' ');\n            appendDisplayName(part2, builder);\n            return builder.toString();\n        }\n"
            },
            {
              "step": 8,
              "variableName": "builder",
              "startLine": 203,
              "startColumn": 20,
              "endLine": 203,
              "endColumn": 27,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "StringBuilder",
              "code": "            appendDisplayName(part1, builder);\n            builder.append(' ');\n            appendDisplayName(part2, builder);\n            return builder.toString();\n        }\n\n        @Override"
            },
            {
              "step": 9,
              "variableName": "builder.toString()",
              "startLine": 203,
              "startColumn": 20,
              "endLine": 203,
              "endColumn": 38,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "String",
              "code": "            appendDisplayName(part1, builder);\n            builder.append(' ');\n            appendDisplayName(part2, builder);\n            return builder.toString();\n        }\n\n        @Override"
            },
            {
              "step": 10,
              "variableName": "describable.getDisplayName()",
              "startLine": 313,
              "startColumn": 35,
              "endLine": 313,
              "endColumn": 63,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "String",
              "code": "        public String getDisplayName() {\n            synchronized (this) {\n                if (displayName == null) {\n                    displayName = describable.getDisplayName();\n                    if (capDisplayName != null || !(describable instanceof DisplayName)) {\n                        describable = null;\n                    }"
            },
            {
              "step": 11,
              "variableName": "displayName",
              "startLine": 318,
              "startColumn": 24,
              "endLine": 318,
              "endColumn": 35,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "String",
              "code": "                        describable = null;\n                    }\n                }\n                return displayName;\n            }\n        }\n    }"
            },
            {
              "step": 12,
              "variableName": "displayName.getDisplayName()",
              "startLine": 772,
              "startColumn": 73,
              "endLine": 772,
              "endColumn": 101,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/configurations/DefaultConfiguration.java",
              "type": "String",
              "code": "                try {\n                    results = resolver.resolveGraph(DefaultConfiguration.this);\n                } catch (Exception e) {\n                    throw exceptionMapper.mapFailure(e, \"dependencies\", displayName.getDisplayName());\n                }\n\n                // Make the new state visible in case a dependency resolution listener queries the result, which requires the new state"
            },
            {
              "step": 13,
              "variableName": "String contextDisplayName",
              "startLine": 68,
              "startColumn": 77,
              "endLine": 68,
              "endColumn": 102,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "String",
              "code": "        return mapFailure(failure, type, displayName);\n    }\n\n    public TypedResolveException mapFailure(Throwable failure, String type, String contextDisplayName) {\n        if (!(failure instanceof TypedResolveException)) {\n            return new TypedResolveException(\n                type,"
            },
            {
              "step": 14,
              "variableName": "contextDisplayName",
              "startLine": 72,
              "startColumn": 17,
              "endLine": 72,
              "endColumn": 35,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "String",
              "code": "        if (!(failure instanceof TypedResolveException)) {\n            return new TypedResolveException(\n                type,\n                contextDisplayName,\n                ImmutableList.of(mapRepositoryOverrideFailure(contextDisplayName, failure))\n            );\n        }"
            },
            {
              "step": 15,
              "variableName": "new TypedResolveException(...) : TypedResolveException",
              "startLine": 70,
              "startColumn": 20,
              "endLine": 74,
              "endColumn": 14,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "TypedResolveException",
              "code": "\n    public TypedResolveException mapFailure(Throwable failure, String type, String contextDisplayName) {\n        if (!(failure instanceof TypedResolveException)) {\n            return new TypedResolveException(\n                type,\n                contextDisplayName,\n                ImmutableList.of(mapRepositoryOverrideFailure(contextDisplayName, failure))"
            },
            {
              "step": 16,
              "variableName": "exceptionMapper.mapFailure(e, \"dependencies\", displayName.getDisplayName())",
              "startLine": 772,
              "startColumn": 27,
              "endLine": 772,
              "endColumn": 102,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/configurations/DefaultConfiguration.java",
              "type": "TypedResolveException",
              "code": "                try {\n                    results = resolver.resolveGraph(DefaultConfiguration.this);\n                } catch (Exception e) {\n                    throw exceptionMapper.mapFailure(e, \"dependencies\", displayName.getDisplayName());\n                }\n\n                // Make the new state visible in case a dependency resolution listener queries the result, which requires the new state"
            },
            {
              "step": 17,
              "variableName": "e",
              "startLine": 772,
              "startColumn": 54,
              "endLine": 772,
              "endColumn": 55,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/configurations/DefaultConfiguration.java",
              "type": "Exception",
              "code": "                try {\n                    results = resolver.resolveGraph(DefaultConfiguration.this);\n                } catch (Exception e) {\n                    throw exceptionMapper.mapFailure(e, \"dependencies\", displayName.getDisplayName());\n                }\n\n                // Make the new state visible in case a dependency resolution listener queries the result, which requires the new state"
            },
            {
              "step": 18,
              "variableName": "Throwable failure",
              "startLine": 68,
              "startColumn": 45,
              "endLine": 68,
              "endColumn": 62,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Throwable",
              "code": "        return mapFailure(failure, type, displayName);\n    }\n\n    public TypedResolveException mapFailure(Throwable failure, String type, String contextDisplayName) {\n        if (!(failure instanceof TypedResolveException)) {\n            return new TypedResolveException(\n                type,"
            },
            {
              "step": 19,
              "variableName": "failure",
              "startLine": 73,
              "startColumn": 83,
              "endLine": 73,
              "endColumn": 90,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Throwable",
              "code": "            return new TypedResolveException(\n                type,\n                contextDisplayName,\n                ImmutableList.of(mapRepositoryOverrideFailure(contextDisplayName, failure))\n            );\n        }\n"
            },
            {
              "step": 20,
              "variableName": "Throwable failure",
              "startLine": 94,
              "startColumn": 78,
              "endLine": 94,
              "endColumn": 95,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Throwable",
              "code": "\n    // TODO: We should handle this exception at the source instead of using instanceof to detect it after it is thrown.\n    //       We should try to avoid catching and analyzing runtime exceptions\n    public Throwable mapRepositoryOverrideFailure(String contextDisplayName, Throwable failure) {\n        if (!(failure instanceof ModuleVersionNotFoundException) || !settingsRepositoriesIgnored()) {\n            return failure;\n        }"
            },
            {
              "step": 21,
              "variableName": "failure",
              "startLine": 108,
              "startColumn": 35,
              "endLine": 108,
              "endColumn": 42,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Throwable",
              "code": "        return new TypedResolveException(\n            \"dependencies\",\n            contextDisplayName,\n            Collections.singleton(failure),\n            resolutions\n        );\n    }"
            },
            {
              "step": 22,
              "variableName": "Collections.singleton(failure)",
              "startLine": 108,
              "startColumn": 13,
              "endLine": 108,
              "endColumn": 43,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Set [<element>] : Throwable",
              "code": "        return new TypedResolveException(\n            \"dependencies\",\n            contextDisplayName,\n            Collections.singleton(failure),\n            resolutions\n        );\n    }"
            },
            {
              "step": 23,
              "variableName": "Collections.singleton(failure)",
              "startLine": 108,
              "startColumn": 13,
              "endLine": 108,
              "endColumn": 43,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Set",
              "code": "        return new TypedResolveException(\n            \"dependencies\",\n            contextDisplayName,\n            Collections.singleton(failure),\n            resolutions\n        );\n    }"
            },
            {
              "step": 24,
              "variableName": "Iterable<? extends Throwable> failures",
              "startLine": 42,
              "startColumn": 67,
              "endLine": 42,
              "endColumn": 105,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ivyservice/TypedResolveException.java",
              "type": "Set",
              "code": "    /**\n     * Creates a new instance with resolutions.\n     */\n    public TypedResolveException(String type, String displayName, Iterable<? extends Throwable> failures, List<String> resolutions) {\n        super(buildMessage(type, displayName), failures, false);\n        this.type = type;\n        this.resolutions = ImmutableList.copyOf(resolutions);"
            },
            {
              "step": 25,
              "variableName": "failures",
              "startLine": 43,
              "startColumn": 48,
              "endLine": 43,
              "endColumn": 56,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ivyservice/TypedResolveException.java",
              "type": "Set",
              "code": "     * Creates a new instance with resolutions.\n     */\n    public TypedResolveException(String type, String displayName, Iterable<? extends Throwable> failures, List<String> resolutions) {\n        super(buildMessage(type, displayName), failures, false);\n        this.type = type;\n        this.resolutions = ImmutableList.copyOf(resolutions);\n    }"
            },
            {
              "step": 26,
              "variableName": "Iterable<? extends Throwable> causes",
              "startLine": 77,
              "startColumn": 48,
              "endLine": 77,
              "endColumn": 84,
              "uri": "gradle-8.14.0/subprojects/core-api/src/main/java/org/gradle/api/artifacts/ResolveException.java",
              "type": "Set",
              "code": "     * @since 8.9\n     */\n    @Incubating\n    protected ResolveException(String message, Iterable<? extends Throwable> causes, @SuppressWarnings(\"unused\") boolean dummy) {\n        super(message, causes);\n    }\n}"
            },
            {
              "step": 27,
              "variableName": "causes",
              "startLine": 78,
              "startColumn": 24,
              "endLine": 78,
              "endColumn": 30,
              "uri": "gradle-8.14.0/subprojects/core-api/src/main/java/org/gradle/api/artifacts/ResolveException.java",
              "type": "Set",
              "code": "     */\n    @Incubating\n    protected ResolveException(String message, Iterable<? extends Throwable> causes, @SuppressWarnings(\"unused\") boolean dummy) {\n        super(message, causes);\n    }\n}\n"
            },
            {
              "step": 28,
              "variableName": "Iterable<? extends Throwable> causes",
              "startLine": 47,
              "startColumn": 55,
              "endLine": 47,
              "endColumn": 91,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "Set",
              "code": "        this.causes.addAll(Arrays.asList(causes));\n    }\n\n    public DefaultMultiCauseException(String message, Iterable<? extends Throwable> causes) {\n        super(message);\n        this.message = message;\n        initCauses(causes);"
            },
            {
              "step": 29,
              "variableName": "causes",
              "startLine": 50,
              "startColumn": 20,
              "endLine": 50,
              "endColumn": 26,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "Set",
              "code": "    public DefaultMultiCauseException(String message, Iterable<? extends Throwable> causes) {\n        super(message);\n        this.message = message;\n        initCauses(causes);\n    }\n\n    public DefaultMultiCauseException(Factory<String> messageFactory) {"
            },
            {
              "step": 30,
              "variableName": "Iterable<? extends Throwable> causes",
              "startLine": 112,
              "startColumn": 28,
              "endLine": 112,
              "endColumn": 64,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "Iterable",
              "code": "        return null;\n    }\n\n    public void initCauses(Iterable<? extends Throwable> causes) {\n        this.causes.clear();\n        for (Throwable cause : causes) {\n            this.causes.add(cause);"
            },
            {
              "step": 31,
              "variableName": "cause",
              "startLine": 115,
              "startColumn": 29,
              "endLine": 115,
              "endColumn": 34,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "Throwable",
              "code": "    public void initCauses(Iterable<? extends Throwable> causes) {\n        this.causes.clear();\n        for (Throwable cause : causes) {\n            this.causes.add(cause);\n        }\n    }\n"
            },
            {
              "step": 32,
              "variableName": "this.causes",
              "startLine": 115,
              "startColumn": 13,
              "endLine": 115,
              "endColumn": 24,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "CopyOnWriteArrayList [<element>] : Throwable",
              "code": "    public void initCauses(Iterable<? extends Throwable> causes) {\n        this.causes.clear();\n        for (Throwable cause : causes) {\n            this.causes.add(cause);\n        }\n    }\n"
            },
            {
              "step": 33,
              "variableName": "this",
              "startLine": 115,
              "startColumn": 13,
              "endLine": 115,
              "endColumn": 17,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "DefaultMultiCauseException [causes, <element>] : Throwable",
              "code": "    public void initCauses(Iterable<? extends Throwable> causes) {\n        this.causes.clear();\n        for (Throwable cause : causes) {\n            this.causes.add(cause);\n        }\n    }\n"
            },
            {
              "step": 34,
              "variableName": "projectConfigurationException",
              "startLine": 57,
              "startColumn": 17,
              "endLine": 57,
              "endColumn": 46,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/DefaultExceptionAnalyser.java",
              "type": "ProjectConfigurationException [causes, <element>] : Throwable",
              "code": "                }\n            }\n            if (!additionalFailures.isEmpty()) {\n                projectConfigurationException.initCauses(additionalFailures);\n                failures.add(transform(projectConfigurationException));\n            }\n        } else if (exception instanceof ServiceCreationException) {"
            },
            {
              "step": 35,
              "variableName": "projectConfigurationException",
              "startLine": 58,
              "startColumn": 40,
              "endLine": 58,
              "endColumn": 69,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/DefaultExceptionAnalyser.java",
              "type": "ProjectConfigurationException [causes, <element>] : Throwable",
              "code": "            }\n            if (!additionalFailures.isEmpty()) {\n                projectConfigurationException.initCauses(additionalFailures);\n                failures.add(transform(projectConfigurationException));\n            }\n        } else if (exception instanceof ServiceCreationException) {\n            failures.add(transform(new InitializationException(exception)));"
            },
            {
              "step": 36,
              "variableName": "transform(projectConfigurationException)",
              "startLine": 58,
              "startColumn": 30,
              "endLine": 58,
              "endColumn": 70,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/DefaultExceptionAnalyser.java",
              "type": "LocationAwareException",
              "code": "            }\n            if (!additionalFailures.isEmpty()) {\n                projectConfigurationException.initCauses(additionalFailures);\n                failures.add(transform(projectConfigurationException));\n            }\n        } else if (exception instanceof ServiceCreationException) {\n            failures.add(transform(new InitializationException(exception)));"
            },
            {
              "step": 37,
              "variableName": "failures",
              "startLine": 58,
              "startColumn": 17,
              "endLine": 58,
              "endColumn": 25,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/DefaultExceptionAnalyser.java",
              "type": "Collection [<element>] : LocationAwareException",
              "code": "            }\n            if (!additionalFailures.isEmpty()) {\n                projectConfigurationException.initCauses(additionalFailures);\n                failures.add(transform(projectConfigurationException));\n            }\n        } else if (exception instanceof ServiceCreationException) {\n            failures.add(transform(new InitializationException(exception)));"
            },
            {
              "step": 38,
              "variableName": "result",
              "startLine": 53,
              "startColumn": 54,
              "endLine": 53,
              "endColumn": 60,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/MultipleBuildFailuresExceptionAnalyser.java",
              "type": "ArrayList [<element>] : LocationAwareException",
              "code": "        for (Throwable failure : failures) {\n            if (failure instanceof MultipleBuildFailures) {\n                for (Throwable cause : ((MultipleBuildFailures) failure).getCauses()) {\n                    collector.collectFailures(cause, result);\n                }\n            } else {\n                collector.collectFailures(failure, result);"
            },
            {
              "step": 39,
              "variableName": "result",
              "startLine": 60,
              "startColumn": 39,
              "endLine": 60,
              "endColumn": 45,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/MultipleBuildFailuresExceptionAnalyser.java",
              "type": "ArrayList [<element>] : LocationAwareException",
              "code": "            }\n        }\n        if (result.size() == 1 && result.get(0) instanceof RuntimeException) {\n            return (RuntimeException) result.get(0);\n        } else {\n            return new MultipleBuildFailures(result);\n        }"
            },
            {
              "step": 40,
              "variableName": "result.get(0)",
              "startLine": 60,
              "startColumn": 39,
              "endLine": 60,
              "endColumn": 52,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/MultipleBuildFailuresExceptionAnalyser.java",
              "type": "LocationAwareException",
              "code": "            }\n        }\n        if (result.size() == 1 && result.get(0) instanceof RuntimeException) {\n            return (RuntimeException) result.get(0);\n        } else {\n            return new MultipleBuildFailures(result);\n        }"
            },
            {
              "step": 41,
              "variableName": "(RuntimeException) result.get(0)",
              "startLine": 60,
              "startColumn": 20,
              "endLine": 60,
              "endColumn": 52,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/MultipleBuildFailuresExceptionAnalyser.java",
              "type": "LocationAwareException",
              "code": "            }\n        }\n        if (result.size() == 1 && result.get(0) instanceof RuntimeException) {\n            return (RuntimeException) result.get(0);\n        } else {\n            return new MultipleBuildFailures(result);\n        }"
            },
            {
              "step": 42,
              "variableName": "exceptionAnalyser.transform(finishFailures)",
              "startLine": 72,
              "startColumn": 16,
              "endLine": 72,
              "endColumn": 59,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/internal/buildtree/DefaultBuildTreeFinishExecutor.java",
              "type": "LocationAwareException",
              "code": "            finishFailures.addAll(result.getFailures());\n        });\n\n        return exceptionAnalyser.transform(finishFailures);\n    }\n}\n"
            },
            {
              "step": 43,
              "variableName": "delegate.finishBuildTree(failures)",
              "startLine": 46,
              "startColumn": 28,
              "endLine": 46,
              "endColumn": 62,
              "uri": "gradle-8.14.0/subprojects/composite-builds/src/main/java/org/gradle/composite/internal/OperationFiringBuildTreeFinishExecutor.java",
              "type": "LocationAwareException",
              "code": "            @Override\n            public RuntimeException call(BuildOperationContext context) {\n                try {\n                    return delegate.finishBuildTree(failures);\n                } finally {\n                    context.setResult(RESULT);\n                }"
            },
            {
              "step": 44,
              "variableName": "buildOperation.call(context)",
              "startLine": 239,
              "startColumn": 21,
              "endLine": 239,
              "endColumn": 49,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/testFixtures/java/org/gradle/internal/operations/TestBuildOperationRunner.java",
              "type": "LocationAwareException",
              "code": "            TestBuildOperationContext context = new TestBuildOperationContext(record);\n            T t;\n            try {\n                t = buildOperation.call(context);\n            } catch (Throwable failure) {\n                if (record.failure == null) {\n                    record.failure = failure;"
            },
            {
              "step": 45,
              "variableName": "t",
              "startLine": 246,
              "startColumn": 20,
              "endLine": 246,
              "endColumn": 21,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/testFixtures/java/org/gradle/internal/operations/TestBuildOperationRunner.java",
              "type": "LocationAwareException",
              "code": "                }\n                throw throwAsUncheckedException(failure);\n            }\n            return t;\n        }\n\n        private <O extends BuildOperation> void execute(O buildOperation, BuildOperationWorker<O> worker) {"
            },
            {
              "step": 46,
              "variableName": "log.call(buildOperation)",
              "startLine": 51,
              "startColumn": 16,
              "endLine": 51,
              "endColumn": 40,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/testFixtures/java/org/gradle/internal/operations/TestBuildOperationRunner.java",
              "type": "LocationAwareException",
              "code": "\n    @Override\n    public <T> T call(CallableBuildOperation<T> buildOperation) {\n        return log.call(buildOperation);\n    }\n\n    @Override"
            },
            {
              "step": 47,
              "variableName": "ca",
              "startLine": 115,
              "startColumn": 5,
              "endLine": 121,
              "endColumn": 7,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/configurationcache/ConfigurationCacheBuildOperations.kt",
              "type": "LocationAwareException",
              "code": "\ninternal\nfun <T : Any> BuildOperationRunner.withModelLoadOperation(block: () -> T): T =\n    call(object : CallableBuildOperation<T> {\n        override fun description(): BuildOperationDescriptor.Builder = BuildOperationDescriptor\n            .displayName(\"Load model from configuration cache\")\n            .progressDisplayName(\"Loading model from configuration cache\")"
            },
            {
              "step": 48,
              "variableName": "ca",
              "startLine": 115,
              "startColumn": 5,
              "endLine": 121,
              "endColumn": 7,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/configurationcache/ConfigurationCacheBuildOperations.kt",
              "type": "LocationAwareException",
              "code": "\ninternal\nfun <T : Any> BuildOperationRunner.withModelLoadOperation(block: () -> T): T =\n    call(object : CallableBuildOperation<T> {\n        override fun description(): BuildOperationDescriptor.Builder = BuildOperationDescriptor\n            .displayName(\"Load model from configuration cache\")\n            .progressDisplayName(\"Loading model from configuration cache\")"
            },
            {
              "step": 49,
              "variableName": "b",
              "startLine": 635,
              "startColumn": 9,
              "endLine": 641,
              "endColumn": 10,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "        // No need to record the `ClassLoaderScope` tree when loading\n        scopeRegistryListener.dispose()\n\n        buildOperationRunner.withModelLoadOperation {\n            val storeLoadResult = entryStore.useForStateLoad(StateType.Model) { stateFile: ConfigurationCacheStateFile ->\n                cacheIO.readModelFrom(stateFile)\n            }"
            },
            {
              "step": 50,
              "variableName": "block()",
              "startLine": 668,
              "startColumn": 22,
              "endLine": 668,
              "endColumn": 29,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "    private\n    inline fun <T> runAtConfigurationTime(block: () -> T): T {\n        prepareConfigurationTimeBarrier()\n        val result = block()\n        crossConfigurationTimeBarrier()\n        return result\n    }"
            },
            {
              "step": 51,
              "variableName": "result",
              "startLine": 670,
              "startColumn": 16,
              "endLine": 670,
              "endColumn": 22,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "        prepareConfigurationTimeBarrier()\n        val result = block()\n        crossConfigurationTimeBarrier()\n        return result\n    }\n\n    private"
            },
            {
              "step": 52,
              "variableName": "runAtConfigurationTime(...) : LocationAwareException",
              "startLine": 631,
              "startColumn": 28,
              "endLine": 642,
              "endColumn": 6,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "    data class LoadResultMetadata(val originInvocationId: String? = null)\n\n    private\n    fun loadModel(): Any = runAtConfigurationTime {\n        // No need to record the `ClassLoaderScope` tree when loading\n        scopeRegistryListener.dispose()\n"
            },
            {
              "step": 53,
              "variableName": "loadModel()",
              "startLine": 268,
              "startColumn": 20,
              "endLine": 268,
              "endColumn": 31,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "    override fun <T : Any> loadOrCreateModel(creator: () -> T): T {\n        if (isLoaded) {\n            runLoadedSideEffects()\n            return loadModel().uncheckedCast()\n        }\n\n        return runWorkThatContributesToCacheEntry {"
            },
            {
              "step": 54,
              "variableName": "Any",
              "startLine": 22,
              "startColumn": 15,
              "endLine": 22,
              "endColumn": 18,
              "uri": "gradle-8.14.0/platforms/core-configuration/stdlib-kotlin-extensions/src/main/kotlin/org/gradle/internal/extensions/stdlib/CastExtensions.kt",
              "type": "Object",
              "code": "import org.gradle.internal.Cast\n\n\nfun <T : Any> Any.uncheckedCast(): T =\n    Cast.uncheckedNonnullCast(this)\n"
            },
            {
              "step": 55,
              "variableName": "this",
              "startLine": 23,
              "startColumn": 31,
              "endLine": 23,
              "endColumn": 35,
              "uri": "gradle-8.14.0/platforms/core-configuration/stdlib-kotlin-extensions/src/main/kotlin/org/gradle/internal/extensions/stdlib/CastExtensions.kt",
              "type": "Object",
              "code": "\n\nfun <T : Any> Any.uncheckedCast(): T =\n    Cast.uncheckedNonnullCast(this)\n"
            },
            {
              "step": 56,
              "variableName": "Object object",
              "startLine": 76,
              "startColumn": 46,
              "endLine": 76,
              "endColumn": 59,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/Cast.java",
              "type": "Object",
              "code": "    }\n\n    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})\n    public static <T> T uncheckedNonnullCast(Object object) {\n        return (T) object;\n    }\n}"
            },
            {
              "step": 57,
              "variableName": "(T) object",
              "startLine": 77,
              "startColumn": 16,
              "endLine": 77,
              "endColumn": 26,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/Cast.java",
              "type": "Object",
              "code": "\n    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})\n    public static <T> T uncheckedNonnullCast(Object object) {\n        return (T) object;\n    }\n}\n"
            },
            {
              "step": 58,
              "variableName": "Cast.uncheckedNonnullCast(collectionType)",
              "startLine": 223,
              "startColumn": 16,
              "endLine": 223,
              "endColumn": 57,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/api/internal/provider/AbstractCollectionProperty.java",
              "type": "Class",
              "code": "    @Override\n    @Nonnull\n    public Class<C> getType() {\n        return Cast.uncheckedNonnullCast(collectionType);\n    }\n\n    @Override"
            },
            {
              "step": 59,
              "variableName": "provider.getType()",
              "startLine": 41,
              "startColumn": 35,
              "endLine": 41,
              "endColumn": 53,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/api/internal/provider/OrElseFixedValueProvider.java",
              "type": "Class",
              "code": "    @Nullable\n    @Override\n    public Class<T> getType() {\n        return Cast.uncheckedCast(provider.getType());\n    }\n\n    @Override"
            },
            {
              "step": 60,
              "variableName": "@Nullable Object object",
              "startLine": 71,
              "startColumn": 39,
              "endLine": 71,
              "endColumn": 62,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/Cast.java",
              "type": "Object",
              "code": "\n    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})\n    @Nullable\n    public static <T> T uncheckedCast(@Nullable Object object) {\n        return (T) object;\n    }\n"
            },
            {
              "step": 61,
              "variableName": "(T) object",
              "startLine": 72,
              "startColumn": 16,
              "endLine": 72,
              "endColumn": 26,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/Cast.java",
              "type": "Object",
              "code": "    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})\n    @Nullable\n    public static <T> T uncheckedCast(@Nullable Object object) {\n        return (T) object;\n    }\n\n    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})"
            },
            {
              "step": 62,
              "variableName": "Cast.uncheckedCast(sanitizer.sanitize(t))",
              "startLine": 41,
              "startColumn": 15,
              "endLine": 41,
              "endColumn": 56,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/api/internal/provider/TypeSanitizingTransformer.java",
              "type": "Object",
              "code": "\n    @Override\n    public T transform(T t) {\n        T v = Cast.uncheckedCast(sanitizer.sanitize(t));\n        if (targetType.isInstance(v)) {\n            return v;\n        }"
            },
            {
              "step": 63,
              "variableName": "v",
              "startLine": 43,
              "startColumn": 20,
              "endLine": 43,
              "endColumn": 21,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/api/internal/provider/TypeSanitizingTransformer.java",
              "type": "Object",
              "code": "    public T transform(T t) {\n        T v = Cast.uncheckedCast(sanitizer.sanitize(t));\n        if (targetType.isInstance(v)) {\n            return v;\n        }\n        throw new IllegalArgumentException(String.format(\"Cannot get the value of %s of type %s as the provider associated with this property returned a value of type %s.\", owner.getDisplayName(), targetType.getName(), v.getClass().getName()));\n    }"
            },
            {
              "step": 64,
              "variableName": "itemDescriptorGenerator.transform(name)",
              "startLine": 82,
              "startColumn": 52,
              "endLine": 82,
              "endColumn": 91,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/model/collection/internal/BridgedCollections.java",
              "type": "String",
              "code": "                                    .descriptor(new SimpleModelRuleDescriptor(new Factory<String>() {\n                                        @Override\n                                        public String create() {\n                                            return itemDescriptorGenerator.transform(name);\n                                        }\n                                    }))\n                                    .build();"
            },
            {
              "step": 65,
              "variableName": "descriptor.create()",
              "startLine": 38,
              "startColumn": 58,
              "endLine": 38,
              "endColumn": 77,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/core/rule/describe/SimpleModelRuleDescriptor.java",
              "type": "String",
              "code": "            @Override\n            public String create() {\n                if (cachedValue == null) {\n                    cachedValue = STRING_INTERNER.intern(descriptor.create());\n                }\n                return cachedValue;\n            }"
            },
            {
              "step": 66,
              "variableName": "@Nullable String sample",
              "startLine": 35,
              "startColumn": 26,
              "endLine": 35,
              "endColumn": 49,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/api/internal/cache/StringInterner.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public String intern(@Nullable String sample) {\n        if (sample == null) {\n            return null;\n        }"
            },
            {
              "step": 67,
              "variableName": "sample",
              "startLine": 39,
              "startColumn": 32,
              "endLine": 39,
              "endColumn": 38,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/api/internal/cache/StringInterner.java",
              "type": "String",
              "code": "        if (sample == null) {\n            return null;\n        }\n        return interner.intern(sample);\n    }\n}\n"
            },
            {
              "step": 68,
              "variableName": "String sample",
              "startLine": 44,
              "startColumn": 26,
              "endLine": 44,
              "endColumn": 39,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/util/internal/SimpleMapInterner.java",
              "type": "String",
              "code": "\n    @Override\n    @SuppressWarnings(\"ALL\")\n    public String intern(String sample) {\n        if (sample == null) {\n            return null;\n        }"
            },
            {
              "step": 69,
              "variableName": "sample",
              "startLine": 53,
              "startColumn": 16,
              "endLine": 53,
              "endColumn": 22,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/util/internal/SimpleMapInterner.java",
              "type": "String",
              "code": "            return interned;\n        }\n        internedStrings.put(sample, sample);\n        return sample;\n    }\n}\n"
            },
            {
              "step": 70,
              "variableName": "interner.intern(sample)",
              "startLine": 39,
              "startColumn": 16,
              "endLine": 39,
              "endColumn": 39,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/api/internal/cache/StringInterner.java",
              "type": "String",
              "code": "        if (sample == null) {\n            return null;\n        }\n        return interner.intern(sample);\n    }\n}\n"
            },
            {
              "step": 71,
              "variableName": "STRING_INTERNER.intern(descriptor.create())",
              "startLine": 38,
              "startColumn": 35,
              "endLine": 38,
              "endColumn": 78,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/core/rule/describe/SimpleModelRuleDescriptor.java",
              "type": "String",
              "code": "            @Override\n            public String create() {\n                if (cachedValue == null) {\n                    cachedValue = STRING_INTERNER.intern(descriptor.create());\n                }\n                return cachedValue;\n            }"
            },
            {
              "step": 72,
              "variableName": "cachedValue",
              "startLine": 40,
              "startColumn": 24,
              "endLine": 40,
              "endColumn": 35,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/core/rule/describe/SimpleModelRuleDescriptor.java",
              "type": "String",
              "code": "                if (cachedValue == null) {\n                    cachedValue = STRING_INTERNER.intern(descriptor.create());\n                }\n                return cachedValue;\n            }\n        };\n    }"
            },
            {
              "step": 73,
              "variableName": "factory.create()",
              "startLine": 59,
              "startColumn": 16,
              "endLine": 59,
              "endColumn": 32,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/core/rule/describe/SimpleModelRuleDescriptor.java",
              "type": "String",
              "code": "    }\n\n    private String getDescriptor() {\n        return factory.create();\n    }\n\n    @Override"
            },
            {
              "step": 74,
              "variableName": "getDescriptor()",
              "startLine": 65,
              "startColumn": 31,
              "endLine": 65,
              "endColumn": 46,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/core/rule/describe/SimpleModelRuleDescriptor.java",
              "type": "String",
              "code": "    @Override\n    public void describeTo(Appendable appendable) {\n        try {\n            appendable.append(getDescriptor());\n        } catch (IOException e) {\n            throw new UncheckedIOException(e);\n        }"
            },
            {
              "step": 75,
              "variableName": "appendable",
              "startLine": 65,
              "startColumn": 13,
              "endLine": 65,
              "endColumn": 23,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/core/rule/describe/SimpleModelRuleDescriptor.java",
              "type": "Appendable",
              "code": "    @Override\n    public void describeTo(Appendable appendable) {\n        try {\n            appendable.append(getDescriptor());\n        } catch (IOException e) {\n            throw new UncheckedIOException(e);\n        }"
            },
            {
              "step": 76,
              "variableName": "sb",
              "startLine": 49,
              "startColumn": 20,
              "endLine": 49,
              "endColumn": 22,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/core/rule/describe/AbstractModelRuleDescriptor.java",
              "type": "StringBuilder",
              "code": "    @Override\n    public String toString() {\n        StringBuilder sb = new StringBuilder();\n        describeTo(sb);\n        return sb.toString();\n    }\n}"
            },
            {
              "step": 77,
              "variableName": "sb",
              "startLine": 50,
              "startColumn": 16,
              "endLine": 50,
              "endColumn": 18,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/core/rule/describe/AbstractModelRuleDescriptor.java",
              "type": "StringBuilder",
              "code": "    public String toString() {\n        StringBuilder sb = new StringBuilder();\n        describeTo(sb);\n        return sb.toString();\n    }\n}\n"
            },
            {
              "step": 78,
              "variableName": "sb.toString()",
              "startLine": 50,
              "startColumn": 16,
              "endLine": 50,
              "endColumn": 29,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/core/rule/describe/AbstractModelRuleDescriptor.java",
              "type": "String",
              "code": "    public String toString() {\n        StringBuilder sb = new StringBuilder();\n        describeTo(sb);\n        return sb.toString();\n    }\n}\n"
            },
            {
              "step": 79,
              "variableName": "creatorDescriptor.toString()",
              "startLine": 53,
              "startColumn": 13,
              "endLine": 53,
              "endColumn": 41,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/report/IncompatibleTypeReferenceReporter.java",
              "type": "String",
              "code": "        ModelPath path = node.getPath();\n        ModelRuleDescriptor creatorDescriptor = node.getDescriptor();\n        return new IncompatibleTypeReferenceReporter(\n            creatorDescriptor.toString(), path.toString(), type.toString(), description, writable,\n            node.getTypeDescriptions()\n        );\n    }"
            },
            {
              "step": 80,
              "variableName": "String creator",
              "startLine": 40,
              "startColumn": 46,
              "endLine": 40,
              "endColumn": 60,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/report/IncompatibleTypeReferenceReporter.java",
              "type": "String",
              "code": "    private final boolean writable;\n    private final Iterable<String> candidateTypes;\n\n    public IncompatibleTypeReferenceReporter(String creator, String path, String type, String description, boolean writable, Iterable<String> candidateTypes) {\n        this.creator = creator;\n        this.path = path;\n        this.type = type;"
            },
            {
              "step": 81,
              "variableName": "creator",
              "startLine": 41,
              "startColumn": 24,
              "endLine": 41,
              "endColumn": 31,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/report/IncompatibleTypeReferenceReporter.java",
              "type": "String",
              "code": "    private final Iterable<String> candidateTypes;\n\n    public IncompatibleTypeReferenceReporter(String creator, String path, String type, String description, boolean writable, Iterable<String> candidateTypes) {\n        this.creator = creator;\n        this.path = path;\n        this.type = type;\n        this.description = description;"
            },
            {
              "step": 82,
              "variableName": "this",
              "startLine": 41,
              "startColumn": 9,
              "endLine": 41,
              "endColumn": 13,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/report/IncompatibleTypeReferenceReporter.java",
              "type": "IncompatibleTypeReferenceReporter [creator] : String",
              "code": "    private final Iterable<String> candidateTypes;\n\n    public IncompatibleTypeReferenceReporter(String creator, String path, String type, String description, boolean writable, Iterable<String> candidateTypes) {\n        this.creator = creator;\n        this.path = path;\n        this.type = type;\n        this.description = description;"
            },
            {
              "step": 83,
              "variableName": "new IncompatibleTypeReferenceReporter(...) : IncompatibleTypeReferenceReporter [creator] : String",
              "startLine": 52,
              "startColumn": 16,
              "endLine": 55,
              "endColumn": 10,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/report/IncompatibleTypeReferenceReporter.java",
              "type": "IncompatibleTypeReferenceReporter [creator] : String",
              "code": "    public static IncompatibleTypeReferenceReporter of(MutableModelNode node, ModelType<?> type, String description, boolean writable) {\n        ModelPath path = node.getPath();\n        ModelRuleDescriptor creatorDescriptor = node.getDescriptor();\n        return new IncompatibleTypeReferenceReporter(\n            creatorDescriptor.toString(), path.toString(), type.toString(), description, writable,\n            node.getTypeDescriptions()\n        );"
            },
            {
              "step": 84,
              "variableName": "IncompatibleTypeReferenceReporter.of(node, elementType, action.getSubject().getDescription(), true)",
              "startLine": 522,
              "startColumn": 21,
              "endLine": 522,
              "endColumn": 120,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/core/NodeBackedModelMap.java",
              "type": "IncompatibleTypeReferenceReporter [creator] : String",
              "code": "            node.ensureAtLeast(ModelNode.State.Discovered);\n            if (!node.canBeViewedAs(elementType)) {\n                throw new InvalidModelRuleException(action.getDescriptor(), new ModelRuleBindingException(\n                    IncompatibleTypeReferenceReporter.of(node, elementType, action.getSubject().getDescription(), true).asString()\n                ));\n            }\n            parent.validateCanBindAction(node, action);"
            },
            {
              "step": 85,
              "variableName": "asString",
              "startLine": 58,
              "startColumn": 19,
              "endLine": 58,
              "endColumn": 27,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/report/IncompatibleTypeReferenceReporter.java",
              "type": "IncompatibleTypeReferenceReporter [creator] : String",
              "code": "        );\n    }\n\n    public String asString() {\n        StringWriter string = new StringWriter();\n        writeTo(new PrintWriter(string));\n        return string.toString();"
            },
            {
              "step": 86,
              "variableName": "writeTo(new PrintWriter(string))",
              "startLine": 60,
              "startColumn": 9,
              "endLine": 60,
              "endColumn": 41,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/report/IncompatibleTypeReferenceReporter.java",
              "type": "IncompatibleTypeReferenceReporter [creator] : String",
              "code": "\n    public String asString() {\n        StringWriter string = new StringWriter();\n        writeTo(new PrintWriter(string));\n        return string.toString();\n    }\n"
            },
            {
              "step": 87,
              "variableName": "writeTo",
              "startLine": 64,
              "startColumn": 17,
              "endLine": 64,
              "endColumn": 24,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/report/IncompatibleTypeReferenceReporter.java",
              "type": "IncompatibleTypeReferenceReporter [creator] : String",
              "code": "        return string.toString();\n    }\n\n    public void writeTo(PrintWriter writer) {\n        //\"type-only model reference of type '%s'%s is ambiguous as multiple model elements are available for this type:%n  %s (created by %s)%n  %s (created by %s)\",\n        writer.print(\"Model reference to element '\");\n        writer.print(path);"
            },
            {
              "step": 88,
              "variableName": "creator",
              "startLine": 77,
              "startColumn": 22,
              "endLine": 77,
              "endColumn": 29,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/report/IncompatibleTypeReferenceReporter.java",
              "type": "IncompatibleTypeReferenceReporter [creator] : String",
              "code": "        }\n        writer.println(\" is invalid due to incompatible types.\");\n        writer.print(\"This element was created by \");\n        writer.print(creator);\n        writer.print(\" and can be \");\n        writer.print(writable ? \"mutated\" : \"read\");\n        writer.println(\" as the following types:\");"
            },
            {
              "step": 89,
              "variableName": "creator",
              "startLine": 77,
              "startColumn": 22,
              "endLine": 77,
              "endColumn": 29,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/model/internal/report/IncompatibleTypeReferenceReporter.java",
              "type": "",
              "code": "        }\n        writer.println(\" is invalid due to incompatible types.\");\n        writer.print(\"This element was created by \");\n        writer.print(creator);\n        writer.print(\" and can be \");\n        writer.print(writable ? \"mutated\" : \"read\");\n        writer.println(\" as the following types:\");"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 3,
      "fileName": "DefaultTimeoutHandler.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "source",
              "startLine": 44,
              "startColumn": 25,
              "endLine": 44,
              "endColumn": 31,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/RegExpNameMapper.java",
              "type": "String",
              "code": "        } else {\n            matcher.reset(source);\n        }\n        String result = source;\n        if (matcher.find()) {\n            result = matcher.replaceFirst(replacement);\n        }"
            },
            {
              "step": 1,
              "variableName": "result",
              "startLine": 48,
              "startColumn": 16,
              "endLine": 48,
              "endColumn": 22,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/RegExpNameMapper.java",
              "type": "String",
              "code": "        if (matcher.find()) {\n            result = matcher.replaceFirst(replacement);\n        }\n        return result;\n    }\n}\n"
            },
            {
              "step": 2,
              "variableName": "transformer.transform(value)",
              "startLine": 37,
              "startColumn": 31,
              "endLine": 37,
              "endColumn": 59,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/ChainingTransformer.java",
              "type": "String",
              "code": "    public T transform(T original) {\n        T value = original;\n        for (Transformer<T, T> transformer : transformers) {\n            value = type.cast(transformer.transform(value));\n        }\n        return value;\n    }"
            },
            {
              "step": 3,
              "variableName": "type.cast(transformer.transform(value))",
              "startLine": 37,
              "startColumn": 21,
              "endLine": 37,
              "endColumn": 60,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/ChainingTransformer.java",
              "type": "String",
              "code": "    public T transform(T original) {\n        T value = original;\n        for (Transformer<T, T> transformer : transformers) {\n            value = type.cast(transformer.transform(value));\n        }\n        return value;\n    }"
            },
            {
              "step": 4,
              "variableName": "value",
              "startLine": 39,
              "startColumn": 16,
              "endLine": 39,
              "endColumn": 21,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/ChainingTransformer.java",
              "type": "String",
              "code": "        for (Transformer<T, T> transformer : transformers) {\n            value = type.cast(transformer.transform(value));\n        }\n        return value;\n    }\n\n    public void add(Transformer<T, T> transformer) {"
            },
            {
              "step": 5,
              "variableName": "describer.transform(this)",
              "startLine": 163,
              "startColumn": 16,
              "endLine": 163,
              "endColumn": 41,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/repositories/DefaultMavenArtifactRepository.java",
              "type": "String",
              "code": "\n    @Override\n    public String getDisplayName() {\n        return describer.transform(this);\n    }\n\n    @Override"
            },
            {
              "step": 6,
              "variableName": "describable.getDisplayName()",
              "startLine": 313,
              "startColumn": 35,
              "endLine": 313,
              "endColumn": 63,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "String",
              "code": "        public String getDisplayName() {\n            synchronized (this) {\n                if (displayName == null) {\n                    displayName = describable.getDisplayName();\n                    if (capDisplayName != null || !(describable instanceof DisplayName)) {\n                        describable = null;\n                    }"
            },
            {
              "step": 7,
              "variableName": "displayName",
              "startLine": 318,
              "startColumn": 24,
              "endLine": 318,
              "endColumn": 35,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "String",
              "code": "                        describable = null;\n                    }\n                }\n                return displayName;\n            }\n        }\n    }"
            },
            {
              "step": 8,
              "variableName": "displayName.getDisplayName()",
              "startLine": 772,
              "startColumn": 73,
              "endLine": 772,
              "endColumn": 101,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/configurations/DefaultConfiguration.java",
              "type": "String",
              "code": "                try {\n                    results = resolver.resolveGraph(DefaultConfiguration.this);\n                } catch (Exception e) {\n                    throw exceptionMapper.mapFailure(e, \"dependencies\", displayName.getDisplayName());\n                }\n\n                // Make the new state visible in case a dependency resolution listener queries the result, which requires the new state"
            },
            {
              "step": 9,
              "variableName": "String contextDisplayName",
              "startLine": 68,
              "startColumn": 77,
              "endLine": 68,
              "endColumn": 102,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "String",
              "code": "        return mapFailure(failure, type, displayName);\n    }\n\n    public TypedResolveException mapFailure(Throwable failure, String type, String contextDisplayName) {\n        if (!(failure instanceof TypedResolveException)) {\n            return new TypedResolveException(\n                type,"
            },
            {
              "step": 10,
              "variableName": "contextDisplayName",
              "startLine": 72,
              "startColumn": 17,
              "endLine": 72,
              "endColumn": 35,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "String",
              "code": "        if (!(failure instanceof TypedResolveException)) {\n            return new TypedResolveException(\n                type,\n                contextDisplayName,\n                ImmutableList.of(mapRepositoryOverrideFailure(contextDisplayName, failure))\n            );\n        }"
            },
            {
              "step": 11,
              "variableName": "new TypedResolveException(...) : TypedResolveException",
              "startLine": 70,
              "startColumn": 20,
              "endLine": 74,
              "endColumn": 14,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "TypedResolveException",
              "code": "\n    public TypedResolveException mapFailure(Throwable failure, String type, String contextDisplayName) {\n        if (!(failure instanceof TypedResolveException)) {\n            return new TypedResolveException(\n                type,\n                contextDisplayName,\n                ImmutableList.of(mapRepositoryOverrideFailure(contextDisplayName, failure))"
            },
            {
              "step": 12,
              "variableName": "exceptionMapper.mapFailure(e, \"dependencies\", displayName.getDisplayName())",
              "startLine": 772,
              "startColumn": 27,
              "endLine": 772,
              "endColumn": 102,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/configurations/DefaultConfiguration.java",
              "type": "TypedResolveException",
              "code": "                try {\n                    results = resolver.resolveGraph(DefaultConfiguration.this);\n                } catch (Exception e) {\n                    throw exceptionMapper.mapFailure(e, \"dependencies\", displayName.getDisplayName());\n                }\n\n                // Make the new state visible in case a dependency resolution listener queries the result, which requires the new state"
            },
            {
              "step": 13,
              "variableName": "e",
              "startLine": 772,
              "startColumn": 54,
              "endLine": 772,
              "endColumn": 55,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/configurations/DefaultConfiguration.java",
              "type": "Exception",
              "code": "                try {\n                    results = resolver.resolveGraph(DefaultConfiguration.this);\n                } catch (Exception e) {\n                    throw exceptionMapper.mapFailure(e, \"dependencies\", displayName.getDisplayName());\n                }\n\n                // Make the new state visible in case a dependency resolution listener queries the result, which requires the new state"
            },
            {
              "step": 14,
              "variableName": "Throwable failure",
              "startLine": 68,
              "startColumn": 45,
              "endLine": 68,
              "endColumn": 62,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Throwable",
              "code": "        return mapFailure(failure, type, displayName);\n    }\n\n    public TypedResolveException mapFailure(Throwable failure, String type, String contextDisplayName) {\n        if (!(failure instanceof TypedResolveException)) {\n            return new TypedResolveException(\n                type,"
            },
            {
              "step": 15,
              "variableName": "failure",
              "startLine": 73,
              "startColumn": 83,
              "endLine": 73,
              "endColumn": 90,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Throwable",
              "code": "            return new TypedResolveException(\n                type,\n                contextDisplayName,\n                ImmutableList.of(mapRepositoryOverrideFailure(contextDisplayName, failure))\n            );\n        }\n"
            },
            {
              "step": 16,
              "variableName": "Throwable failure",
              "startLine": 94,
              "startColumn": 78,
              "endLine": 94,
              "endColumn": 95,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Throwable",
              "code": "\n    // TODO: We should handle this exception at the source instead of using instanceof to detect it after it is thrown.\n    //       We should try to avoid catching and analyzing runtime exceptions\n    public Throwable mapRepositoryOverrideFailure(String contextDisplayName, Throwable failure) {\n        if (!(failure instanceof ModuleVersionNotFoundException) || !settingsRepositoriesIgnored()) {\n            return failure;\n        }"
            },
            {
              "step": 17,
              "variableName": "failure",
              "startLine": 108,
              "startColumn": 35,
              "endLine": 108,
              "endColumn": 42,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Throwable",
              "code": "        return new TypedResolveException(\n            \"dependencies\",\n            contextDisplayName,\n            Collections.singleton(failure),\n            resolutions\n        );\n    }"
            },
            {
              "step": 18,
              "variableName": "Collections.singleton(failure)",
              "startLine": 108,
              "startColumn": 13,
              "endLine": 108,
              "endColumn": 43,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Set [<element>] : Throwable",
              "code": "        return new TypedResolveException(\n            \"dependencies\",\n            contextDisplayName,\n            Collections.singleton(failure),\n            resolutions\n        );\n    }"
            },
            {
              "step": 19,
              "variableName": "Collections.singleton(failure)",
              "startLine": 108,
              "startColumn": 13,
              "endLine": 108,
              "endColumn": 43,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Set",
              "code": "        return new TypedResolveException(\n            \"dependencies\",\n            contextDisplayName,\n            Collections.singleton(failure),\n            resolutions\n        );\n    }"
            },
            {
              "step": 20,
              "variableName": "Iterable<? extends Throwable> failures",
              "startLine": 42,
              "startColumn": 67,
              "endLine": 42,
              "endColumn": 105,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ivyservice/TypedResolveException.java",
              "type": "Set",
              "code": "    /**\n     * Creates a new instance with resolutions.\n     */\n    public TypedResolveException(String type, String displayName, Iterable<? extends Throwable> failures, List<String> resolutions) {\n        super(buildMessage(type, displayName), failures, false);\n        this.type = type;\n        this.resolutions = ImmutableList.copyOf(resolutions);"
            },
            {
              "step": 21,
              "variableName": "failures",
              "startLine": 43,
              "startColumn": 48,
              "endLine": 43,
              "endColumn": 56,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ivyservice/TypedResolveException.java",
              "type": "Set",
              "code": "     * Creates a new instance with resolutions.\n     */\n    public TypedResolveException(String type, String displayName, Iterable<? extends Throwable> failures, List<String> resolutions) {\n        super(buildMessage(type, displayName), failures, false);\n        this.type = type;\n        this.resolutions = ImmutableList.copyOf(resolutions);\n    }"
            },
            {
              "step": 22,
              "variableName": "Iterable<? extends Throwable> causes",
              "startLine": 77,
              "startColumn": 48,
              "endLine": 77,
              "endColumn": 84,
              "uri": "gradle-8.14.0/subprojects/core-api/src/main/java/org/gradle/api/artifacts/ResolveException.java",
              "type": "Set",
              "code": "     * @since 8.9\n     */\n    @Incubating\n    protected ResolveException(String message, Iterable<? extends Throwable> causes, @SuppressWarnings(\"unused\") boolean dummy) {\n        super(message, causes);\n    }\n}"
            },
            {
              "step": 23,
              "variableName": "causes",
              "startLine": 78,
              "startColumn": 24,
              "endLine": 78,
              "endColumn": 30,
              "uri": "gradle-8.14.0/subprojects/core-api/src/main/java/org/gradle/api/artifacts/ResolveException.java",
              "type": "Set",
              "code": "     */\n    @Incubating\n    protected ResolveException(String message, Iterable<? extends Throwable> causes, @SuppressWarnings(\"unused\") boolean dummy) {\n        super(message, causes);\n    }\n}\n"
            },
            {
              "step": 24,
              "variableName": "Iterable<? extends Throwable> causes",
              "startLine": 47,
              "startColumn": 55,
              "endLine": 47,
              "endColumn": 91,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "Set",
              "code": "        this.causes.addAll(Arrays.asList(causes));\n    }\n\n    public DefaultMultiCauseException(String message, Iterable<? extends Throwable> causes) {\n        super(message);\n        this.message = message;\n        initCauses(causes);"
            },
            {
              "step": 25,
              "variableName": "causes",
              "startLine": 50,
              "startColumn": 20,
              "endLine": 50,
              "endColumn": 26,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "Set",
              "code": "    public DefaultMultiCauseException(String message, Iterable<? extends Throwable> causes) {\n        super(message);\n        this.message = message;\n        initCauses(causes);\n    }\n\n    public DefaultMultiCauseException(Factory<String> messageFactory) {"
            },
            {
              "step": 26,
              "variableName": "Iterable<? extends Throwable> causes",
              "startLine": 112,
              "startColumn": 28,
              "endLine": 112,
              "endColumn": 64,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "Iterable",
              "code": "        return null;\n    }\n\n    public void initCauses(Iterable<? extends Throwable> causes) {\n        this.causes.clear();\n        for (Throwable cause : causes) {\n            this.causes.add(cause);"
            },
            {
              "step": 27,
              "variableName": "cause",
              "startLine": 115,
              "startColumn": 29,
              "endLine": 115,
              "endColumn": 34,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "Throwable",
              "code": "    public void initCauses(Iterable<? extends Throwable> causes) {\n        this.causes.clear();\n        for (Throwable cause : causes) {\n            this.causes.add(cause);\n        }\n    }\n"
            },
            {
              "step": 28,
              "variableName": "this.causes",
              "startLine": 115,
              "startColumn": 13,
              "endLine": 115,
              "endColumn": 24,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "CopyOnWriteArrayList [<element>] : Throwable",
              "code": "    public void initCauses(Iterable<? extends Throwable> causes) {\n        this.causes.clear();\n        for (Throwable cause : causes) {\n            this.causes.add(cause);\n        }\n    }\n"
            },
            {
              "step": 29,
              "variableName": "this",
              "startLine": 115,
              "startColumn": 13,
              "endLine": 115,
              "endColumn": 17,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "DefaultMultiCauseException [causes, <element>] : Throwable",
              "code": "    public void initCauses(Iterable<? extends Throwable> causes) {\n        this.causes.clear();\n        for (Throwable cause : causes) {\n            this.causes.add(cause);\n        }\n    }\n"
            },
            {
              "step": 30,
              "variableName": "projectConfigurationException",
              "startLine": 57,
              "startColumn": 17,
              "endLine": 57,
              "endColumn": 46,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/DefaultExceptionAnalyser.java",
              "type": "ProjectConfigurationException [causes, <element>] : Throwable",
              "code": "                }\n            }\n            if (!additionalFailures.isEmpty()) {\n                projectConfigurationException.initCauses(additionalFailures);\n                failures.add(transform(projectConfigurationException));\n            }\n        } else if (exception instanceof ServiceCreationException) {"
            },
            {
              "step": 31,
              "variableName": "projectConfigurationException",
              "startLine": 58,
              "startColumn": 40,
              "endLine": 58,
              "endColumn": 69,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/DefaultExceptionAnalyser.java",
              "type": "ProjectConfigurationException [causes, <element>] : Throwable",
              "code": "            }\n            if (!additionalFailures.isEmpty()) {\n                projectConfigurationException.initCauses(additionalFailures);\n                failures.add(transform(projectConfigurationException));\n            }\n        } else if (exception instanceof ServiceCreationException) {\n            failures.add(transform(new InitializationException(exception)));"
            },
            {
              "step": 32,
              "variableName": "transform(projectConfigurationException)",
              "startLine": 58,
              "startColumn": 30,
              "endLine": 58,
              "endColumn": 70,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/DefaultExceptionAnalyser.java",
              "type": "LocationAwareException",
              "code": "            }\n            if (!additionalFailures.isEmpty()) {\n                projectConfigurationException.initCauses(additionalFailures);\n                failures.add(transform(projectConfigurationException));\n            }\n        } else if (exception instanceof ServiceCreationException) {\n            failures.add(transform(new InitializationException(exception)));"
            },
            {
              "step": 33,
              "variableName": "failures",
              "startLine": 58,
              "startColumn": 17,
              "endLine": 58,
              "endColumn": 25,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/DefaultExceptionAnalyser.java",
              "type": "Collection [<element>] : LocationAwareException",
              "code": "            }\n            if (!additionalFailures.isEmpty()) {\n                projectConfigurationException.initCauses(additionalFailures);\n                failures.add(transform(projectConfigurationException));\n            }\n        } else if (exception instanceof ServiceCreationException) {\n            failures.add(transform(new InitializationException(exception)));"
            },
            {
              "step": 34,
              "variableName": "result",
              "startLine": 53,
              "startColumn": 54,
              "endLine": 53,
              "endColumn": 60,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/MultipleBuildFailuresExceptionAnalyser.java",
              "type": "ArrayList [<element>] : LocationAwareException",
              "code": "        for (Throwable failure : failures) {\n            if (failure instanceof MultipleBuildFailures) {\n                for (Throwable cause : ((MultipleBuildFailures) failure).getCauses()) {\n                    collector.collectFailures(cause, result);\n                }\n            } else {\n                collector.collectFailures(failure, result);"
            },
            {
              "step": 35,
              "variableName": "result",
              "startLine": 60,
              "startColumn": 39,
              "endLine": 60,
              "endColumn": 45,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/MultipleBuildFailuresExceptionAnalyser.java",
              "type": "ArrayList [<element>] : LocationAwareException",
              "code": "            }\n        }\n        if (result.size() == 1 && result.get(0) instanceof RuntimeException) {\n            return (RuntimeException) result.get(0);\n        } else {\n            return new MultipleBuildFailures(result);\n        }"
            },
            {
              "step": 36,
              "variableName": "result.get(0)",
              "startLine": 60,
              "startColumn": 39,
              "endLine": 60,
              "endColumn": 52,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/MultipleBuildFailuresExceptionAnalyser.java",
              "type": "LocationAwareException",
              "code": "            }\n        }\n        if (result.size() == 1 && result.get(0) instanceof RuntimeException) {\n            return (RuntimeException) result.get(0);\n        } else {\n            return new MultipleBuildFailures(result);\n        }"
            },
            {
              "step": 37,
              "variableName": "(RuntimeException) result.get(0)",
              "startLine": 60,
              "startColumn": 20,
              "endLine": 60,
              "endColumn": 52,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/MultipleBuildFailuresExceptionAnalyser.java",
              "type": "LocationAwareException",
              "code": "            }\n        }\n        if (result.size() == 1 && result.get(0) instanceof RuntimeException) {\n            return (RuntimeException) result.get(0);\n        } else {\n            return new MultipleBuildFailures(result);\n        }"
            },
            {
              "step": 38,
              "variableName": "exceptionAnalyser.transform(finishFailures)",
              "startLine": 72,
              "startColumn": 16,
              "endLine": 72,
              "endColumn": 59,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/internal/buildtree/DefaultBuildTreeFinishExecutor.java",
              "type": "LocationAwareException",
              "code": "            finishFailures.addAll(result.getFailures());\n        });\n\n        return exceptionAnalyser.transform(finishFailures);\n    }\n}\n"
            },
            {
              "step": 39,
              "variableName": "delegate.finishBuildTree(failures)",
              "startLine": 46,
              "startColumn": 28,
              "endLine": 46,
              "endColumn": 62,
              "uri": "gradle-8.14.0/subprojects/composite-builds/src/main/java/org/gradle/composite/internal/OperationFiringBuildTreeFinishExecutor.java",
              "type": "LocationAwareException",
              "code": "            @Override\n            public RuntimeException call(BuildOperationContext context) {\n                try {\n                    return delegate.finishBuildTree(failures);\n                } finally {\n                    context.setResult(RESULT);\n                }"
            },
            {
              "step": 40,
              "variableName": "buildOperation.call(context)",
              "startLine": 239,
              "startColumn": 21,
              "endLine": 239,
              "endColumn": 49,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/testFixtures/java/org/gradle/internal/operations/TestBuildOperationRunner.java",
              "type": "LocationAwareException",
              "code": "            TestBuildOperationContext context = new TestBuildOperationContext(record);\n            T t;\n            try {\n                t = buildOperation.call(context);\n            } catch (Throwable failure) {\n                if (record.failure == null) {\n                    record.failure = failure;"
            },
            {
              "step": 41,
              "variableName": "t",
              "startLine": 246,
              "startColumn": 20,
              "endLine": 246,
              "endColumn": 21,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/testFixtures/java/org/gradle/internal/operations/TestBuildOperationRunner.java",
              "type": "LocationAwareException",
              "code": "                }\n                throw throwAsUncheckedException(failure);\n            }\n            return t;\n        }\n\n        private <O extends BuildOperation> void execute(O buildOperation, BuildOperationWorker<O> worker) {"
            },
            {
              "step": 42,
              "variableName": "log.call(buildOperation)",
              "startLine": 51,
              "startColumn": 16,
              "endLine": 51,
              "endColumn": 40,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/testFixtures/java/org/gradle/internal/operations/TestBuildOperationRunner.java",
              "type": "LocationAwareException",
              "code": "\n    @Override\n    public <T> T call(CallableBuildOperation<T> buildOperation) {\n        return log.call(buildOperation);\n    }\n\n    @Override"
            },
            {
              "step": 43,
              "variableName": "ca",
              "startLine": 115,
              "startColumn": 5,
              "endLine": 121,
              "endColumn": 7,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/configurationcache/ConfigurationCacheBuildOperations.kt",
              "type": "LocationAwareException",
              "code": "\ninternal\nfun <T : Any> BuildOperationRunner.withModelLoadOperation(block: () -> T): T =\n    call(object : CallableBuildOperation<T> {\n        override fun description(): BuildOperationDescriptor.Builder = BuildOperationDescriptor\n            .displayName(\"Load model from configuration cache\")\n            .progressDisplayName(\"Loading model from configuration cache\")"
            },
            {
              "step": 44,
              "variableName": "ca",
              "startLine": 115,
              "startColumn": 5,
              "endLine": 121,
              "endColumn": 7,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/configurationcache/ConfigurationCacheBuildOperations.kt",
              "type": "LocationAwareException",
              "code": "\ninternal\nfun <T : Any> BuildOperationRunner.withModelLoadOperation(block: () -> T): T =\n    call(object : CallableBuildOperation<T> {\n        override fun description(): BuildOperationDescriptor.Builder = BuildOperationDescriptor\n            .displayName(\"Load model from configuration cache\")\n            .progressDisplayName(\"Loading model from configuration cache\")"
            },
            {
              "step": 45,
              "variableName": "b",
              "startLine": 635,
              "startColumn": 9,
              "endLine": 641,
              "endColumn": 10,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "        // No need to record the `ClassLoaderScope` tree when loading\n        scopeRegistryListener.dispose()\n\n        buildOperationRunner.withModelLoadOperation {\n            val storeLoadResult = entryStore.useForStateLoad(StateType.Model) { stateFile: ConfigurationCacheStateFile ->\n                cacheIO.readModelFrom(stateFile)\n            }"
            },
            {
              "step": 46,
              "variableName": "block()",
              "startLine": 668,
              "startColumn": 22,
              "endLine": 668,
              "endColumn": 29,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "    private\n    inline fun <T> runAtConfigurationTime(block: () -> T): T {\n        prepareConfigurationTimeBarrier()\n        val result = block()\n        crossConfigurationTimeBarrier()\n        return result\n    }"
            },
            {
              "step": 47,
              "variableName": "result",
              "startLine": 670,
              "startColumn": 16,
              "endLine": 670,
              "endColumn": 22,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "        prepareConfigurationTimeBarrier()\n        val result = block()\n        crossConfigurationTimeBarrier()\n        return result\n    }\n\n    private"
            },
            {
              "step": 48,
              "variableName": "runAtConfigurationTime(...) : LocationAwareException",
              "startLine": 631,
              "startColumn": 28,
              "endLine": 642,
              "endColumn": 6,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "    data class LoadResultMetadata(val originInvocationId: String? = null)\n\n    private\n    fun loadModel(): Any = runAtConfigurationTime {\n        // No need to record the `ClassLoaderScope` tree when loading\n        scopeRegistryListener.dispose()\n"
            },
            {
              "step": 49,
              "variableName": "loadModel()",
              "startLine": 268,
              "startColumn": 20,
              "endLine": 268,
              "endColumn": 31,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "    override fun <T : Any> loadOrCreateModel(creator: () -> T): T {\n        if (isLoaded) {\n            runLoadedSideEffects()\n            return loadModel().uncheckedCast()\n        }\n\n        return runWorkThatContributesToCacheEntry {"
            },
            {
              "step": 50,
              "variableName": "Any",
              "startLine": 22,
              "startColumn": 15,
              "endLine": 22,
              "endColumn": 18,
              "uri": "gradle-8.14.0/platforms/core-configuration/stdlib-kotlin-extensions/src/main/kotlin/org/gradle/internal/extensions/stdlib/CastExtensions.kt",
              "type": "Object",
              "code": "import org.gradle.internal.Cast\n\n\nfun <T : Any> Any.uncheckedCast(): T =\n    Cast.uncheckedNonnullCast(this)\n"
            },
            {
              "step": 51,
              "variableName": "this",
              "startLine": 23,
              "startColumn": 31,
              "endLine": 23,
              "endColumn": 35,
              "uri": "gradle-8.14.0/platforms/core-configuration/stdlib-kotlin-extensions/src/main/kotlin/org/gradle/internal/extensions/stdlib/CastExtensions.kt",
              "type": "Object",
              "code": "\n\nfun <T : Any> Any.uncheckedCast(): T =\n    Cast.uncheckedNonnullCast(this)\n"
            },
            {
              "step": 52,
              "variableName": "Object object",
              "startLine": 76,
              "startColumn": 46,
              "endLine": 76,
              "endColumn": 59,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/Cast.java",
              "type": "Object",
              "code": "    }\n\n    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})\n    public static <T> T uncheckedNonnullCast(Object object) {\n        return (T) object;\n    }\n}"
            },
            {
              "step": 53,
              "variableName": "(T) object",
              "startLine": 77,
              "startColumn": 16,
              "endLine": 77,
              "endColumn": 26,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/Cast.java",
              "type": "Object",
              "code": "\n    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})\n    public static <T> T uncheckedNonnullCast(Object object) {\n        return (T) object;\n    }\n}\n"
            },
            {
              "step": 54,
              "variableName": "Cast.uncheckedNonnullCast(collectionType)",
              "startLine": 223,
              "startColumn": 16,
              "endLine": 223,
              "endColumn": 57,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/api/internal/provider/AbstractCollectionProperty.java",
              "type": "Class",
              "code": "    @Override\n    @Nonnull\n    public Class<C> getType() {\n        return Cast.uncheckedNonnullCast(collectionType);\n    }\n\n    @Override"
            },
            {
              "step": 55,
              "variableName": "provider.getType()",
              "startLine": 41,
              "startColumn": 35,
              "endLine": 41,
              "endColumn": 53,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/api/internal/provider/OrElseFixedValueProvider.java",
              "type": "Class",
              "code": "    @Nullable\n    @Override\n    public Class<T> getType() {\n        return Cast.uncheckedCast(provider.getType());\n    }\n\n    @Override"
            },
            {
              "step": 56,
              "variableName": "@Nullable Object object",
              "startLine": 71,
              "startColumn": 39,
              "endLine": 71,
              "endColumn": 62,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/Cast.java",
              "type": "Object",
              "code": "\n    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})\n    @Nullable\n    public static <T> T uncheckedCast(@Nullable Object object) {\n        return (T) object;\n    }\n"
            },
            {
              "step": 57,
              "variableName": "(T) object",
              "startLine": 72,
              "startColumn": 16,
              "endLine": 72,
              "endColumn": 26,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/Cast.java",
              "type": "Object",
              "code": "    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})\n    @Nullable\n    public static <T> T uncheckedCast(@Nullable Object object) {\n        return (T) object;\n    }\n\n    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})"
            },
            {
              "step": 58,
              "variableName": "Cast.uncheckedCast(sanitizer.sanitize(t))",
              "startLine": 41,
              "startColumn": 15,
              "endLine": 41,
              "endColumn": 56,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/api/internal/provider/TypeSanitizingTransformer.java",
              "type": "Object",
              "code": "\n    @Override\n    public T transform(T t) {\n        T v = Cast.uncheckedCast(sanitizer.sanitize(t));\n        if (targetType.isInstance(v)) {\n            return v;\n        }"
            },
            {
              "step": 59,
              "variableName": "v",
              "startLine": 43,
              "startColumn": 20,
              "endLine": 43,
              "endColumn": 21,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/api/internal/provider/TypeSanitizingTransformer.java",
              "type": "Object",
              "code": "    public T transform(T t) {\n        T v = Cast.uncheckedCast(sanitizer.sanitize(t));\n        if (targetType.isInstance(v)) {\n            return v;\n        }\n        throw new IllegalArgumentException(String.format(\"Cannot get the value of %s of type %s as the provider associated with this property returned a value of type %s.\", owner.getDisplayName(), targetType.getName(), v.getClass().getName()));\n    }"
            },
            {
              "step": 60,
              "variableName": "describer.transform(this)",
              "startLine": 163,
              "startColumn": 16,
              "endLine": 163,
              "endColumn": 41,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/repositories/DefaultMavenArtifactRepository.java",
              "type": "String",
              "code": "\n    @Override\n    public String getDisplayName() {\n        return describer.transform(this);\n    }\n\n    @Override"
            },
            {
              "step": 61,
              "variableName": "workUnitDescription.getDisplayName()",
              "startLine": 146,
              "startColumn": 44,
              "endLine": 146,
              "endColumn": 80,
              "uri": "gradle-8.14.0/platforms/core-execution/execution/src/main/java/org/gradle/internal/execution/timeout/impl/DefaultTimeoutHandler.java",
              "type": "",
              "code": "                StringBuilder logMessageBuilder = new StringBuilder();\n                try (PrintWriter logMessageWriter = new PrintWriter(CharStreams.asWriter(logMessageBuilder))) {\n                    logMessageWriter.print(\"Current stacktrace of timed out but not yet stopped \");\n                    logMessageWriter.print(workUnitDescription.getDisplayName());\n                    logMessageWriter.println(\":\");\n                    for (StackTraceElement traceElement : currentStackTrace) {\n                        logMessageWriter.println(\"  at \" + traceElement);"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "source",
              "startLine": 40,
              "startColumn": 39,
              "endLine": 40,
              "endColumn": 45,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/RegExpNameMapper.java",
              "type": "String",
              "code": "    @Override\n    public String transform(String source) {\n        if (matcher == null) {\n            matcher = pattern.matcher(source);\n        } else {\n            matcher.reset(source);\n        }"
            },
            {
              "step": 1,
              "variableName": "result",
              "startLine": 48,
              "startColumn": 16,
              "endLine": 48,
              "endColumn": 22,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/RegExpNameMapper.java",
              "type": "String",
              "code": "        if (matcher.find()) {\n            result = matcher.replaceFirst(replacement);\n        }\n        return result;\n    }\n}\n"
            },
            {
              "step": 2,
              "variableName": "transformer.transform(value)",
              "startLine": 37,
              "startColumn": 31,
              "endLine": 37,
              "endColumn": 59,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/ChainingTransformer.java",
              "type": "String",
              "code": "    public T transform(T original) {\n        T value = original;\n        for (Transformer<T, T> transformer : transformers) {\n            value = type.cast(transformer.transform(value));\n        }\n        return value;\n    }"
            },
            {
              "step": 3,
              "variableName": "type.cast(transformer.transform(value))",
              "startLine": 37,
              "startColumn": 21,
              "endLine": 37,
              "endColumn": 60,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/ChainingTransformer.java",
              "type": "String",
              "code": "    public T transform(T original) {\n        T value = original;\n        for (Transformer<T, T> transformer : transformers) {\n            value = type.cast(transformer.transform(value));\n        }\n        return value;\n    }"
            },
            {
              "step": 4,
              "variableName": "value",
              "startLine": 39,
              "startColumn": 16,
              "endLine": 39,
              "endColumn": 21,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/ChainingTransformer.java",
              "type": "String",
              "code": "        for (Transformer<T, T> transformer : transformers) {\n            value = type.cast(transformer.transform(value));\n        }\n        return value;\n    }\n\n    public void add(Transformer<T, T> transformer) {"
            },
            {
              "step": 5,
              "variableName": "describer.transform(this)",
              "startLine": 163,
              "startColumn": 16,
              "endLine": 163,
              "endColumn": 41,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/repositories/DefaultMavenArtifactRepository.java",
              "type": "String",
              "code": "\n    @Override\n    public String getDisplayName() {\n        return describer.transform(this);\n    }\n\n    @Override"
            },
            {
              "step": 6,
              "variableName": "describable.getDisplayName()",
              "startLine": 313,
              "startColumn": 35,
              "endLine": 313,
              "endColumn": 63,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "String",
              "code": "        public String getDisplayName() {\n            synchronized (this) {\n                if (displayName == null) {\n                    displayName = describable.getDisplayName();\n                    if (capDisplayName != null || !(describable instanceof DisplayName)) {\n                        describable = null;\n                    }"
            },
            {
              "step": 7,
              "variableName": "displayName",
              "startLine": 318,
              "startColumn": 24,
              "endLine": 318,
              "endColumn": 35,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "String",
              "code": "                        describable = null;\n                    }\n                }\n                return displayName;\n            }\n        }\n    }"
            },
            {
              "step": 8,
              "variableName": "displayName.getDisplayName()",
              "startLine": 772,
              "startColumn": 73,
              "endLine": 772,
              "endColumn": 101,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/configurations/DefaultConfiguration.java",
              "type": "String",
              "code": "                try {\n                    results = resolver.resolveGraph(DefaultConfiguration.this);\n                } catch (Exception e) {\n                    throw exceptionMapper.mapFailure(e, \"dependencies\", displayName.getDisplayName());\n                }\n\n                // Make the new state visible in case a dependency resolution listener queries the result, which requires the new state"
            },
            {
              "step": 9,
              "variableName": "String contextDisplayName",
              "startLine": 68,
              "startColumn": 77,
              "endLine": 68,
              "endColumn": 102,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "String",
              "code": "        return mapFailure(failure, type, displayName);\n    }\n\n    public TypedResolveException mapFailure(Throwable failure, String type, String contextDisplayName) {\n        if (!(failure instanceof TypedResolveException)) {\n            return new TypedResolveException(\n                type,"
            },
            {
              "step": 10,
              "variableName": "contextDisplayName",
              "startLine": 72,
              "startColumn": 17,
              "endLine": 72,
              "endColumn": 35,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "String",
              "code": "        if (!(failure instanceof TypedResolveException)) {\n            return new TypedResolveException(\n                type,\n                contextDisplayName,\n                ImmutableList.of(mapRepositoryOverrideFailure(contextDisplayName, failure))\n            );\n        }"
            },
            {
              "step": 11,
              "variableName": "new TypedResolveException(...) : TypedResolveException",
              "startLine": 70,
              "startColumn": 20,
              "endLine": 74,
              "endColumn": 14,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "TypedResolveException",
              "code": "\n    public TypedResolveException mapFailure(Throwable failure, String type, String contextDisplayName) {\n        if (!(failure instanceof TypedResolveException)) {\n            return new TypedResolveException(\n                type,\n                contextDisplayName,\n                ImmutableList.of(mapRepositoryOverrideFailure(contextDisplayName, failure))"
            },
            {
              "step": 12,
              "variableName": "exceptionMapper.mapFailure(e, \"dependencies\", displayName.getDisplayName())",
              "startLine": 772,
              "startColumn": 27,
              "endLine": 772,
              "endColumn": 102,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/configurations/DefaultConfiguration.java",
              "type": "TypedResolveException",
              "code": "                try {\n                    results = resolver.resolveGraph(DefaultConfiguration.this);\n                } catch (Exception e) {\n                    throw exceptionMapper.mapFailure(e, \"dependencies\", displayName.getDisplayName());\n                }\n\n                // Make the new state visible in case a dependency resolution listener queries the result, which requires the new state"
            },
            {
              "step": 13,
              "variableName": "e",
              "startLine": 772,
              "startColumn": 54,
              "endLine": 772,
              "endColumn": 55,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/configurations/DefaultConfiguration.java",
              "type": "Exception",
              "code": "                try {\n                    results = resolver.resolveGraph(DefaultConfiguration.this);\n                } catch (Exception e) {\n                    throw exceptionMapper.mapFailure(e, \"dependencies\", displayName.getDisplayName());\n                }\n\n                // Make the new state visible in case a dependency resolution listener queries the result, which requires the new state"
            },
            {
              "step": 14,
              "variableName": "Throwable failure",
              "startLine": 68,
              "startColumn": 45,
              "endLine": 68,
              "endColumn": 62,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Throwable",
              "code": "        return mapFailure(failure, type, displayName);\n    }\n\n    public TypedResolveException mapFailure(Throwable failure, String type, String contextDisplayName) {\n        if (!(failure instanceof TypedResolveException)) {\n            return new TypedResolveException(\n                type,"
            },
            {
              "step": 15,
              "variableName": "failure",
              "startLine": 73,
              "startColumn": 83,
              "endLine": 73,
              "endColumn": 90,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Throwable",
              "code": "            return new TypedResolveException(\n                type,\n                contextDisplayName,\n                ImmutableList.of(mapRepositoryOverrideFailure(contextDisplayName, failure))\n            );\n        }\n"
            },
            {
              "step": 16,
              "variableName": "Throwable failure",
              "startLine": 94,
              "startColumn": 78,
              "endLine": 94,
              "endColumn": 95,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Throwable",
              "code": "\n    // TODO: We should handle this exception at the source instead of using instanceof to detect it after it is thrown.\n    //       We should try to avoid catching and analyzing runtime exceptions\n    public Throwable mapRepositoryOverrideFailure(String contextDisplayName, Throwable failure) {\n        if (!(failure instanceof ModuleVersionNotFoundException) || !settingsRepositoriesIgnored()) {\n            return failure;\n        }"
            },
            {
              "step": 17,
              "variableName": "failure",
              "startLine": 108,
              "startColumn": 35,
              "endLine": 108,
              "endColumn": 42,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Throwable",
              "code": "        return new TypedResolveException(\n            \"dependencies\",\n            contextDisplayName,\n            Collections.singleton(failure),\n            resolutions\n        );\n    }"
            },
            {
              "step": 18,
              "variableName": "Collections.singleton(failure)",
              "startLine": 108,
              "startColumn": 13,
              "endLine": 108,
              "endColumn": 43,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Set [<element>] : Throwable",
              "code": "        return new TypedResolveException(\n            \"dependencies\",\n            contextDisplayName,\n            Collections.singleton(failure),\n            resolutions\n        );\n    }"
            },
            {
              "step": 19,
              "variableName": "Collections.singleton(failure)",
              "startLine": 108,
              "startColumn": 13,
              "endLine": 108,
              "endColumn": 43,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Set",
              "code": "        return new TypedResolveException(\n            \"dependencies\",\n            contextDisplayName,\n            Collections.singleton(failure),\n            resolutions\n        );\n    }"
            },
            {
              "step": 20,
              "variableName": "Iterable<? extends Throwable> failures",
              "startLine": 42,
              "startColumn": 67,
              "endLine": 42,
              "endColumn": 105,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ivyservice/TypedResolveException.java",
              "type": "Set",
              "code": "    /**\n     * Creates a new instance with resolutions.\n     */\n    public TypedResolveException(String type, String displayName, Iterable<? extends Throwable> failures, List<String> resolutions) {\n        super(buildMessage(type, displayName), failures, false);\n        this.type = type;\n        this.resolutions = ImmutableList.copyOf(resolutions);"
            },
            {
              "step": 21,
              "variableName": "failures",
              "startLine": 43,
              "startColumn": 48,
              "endLine": 43,
              "endColumn": 56,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ivyservice/TypedResolveException.java",
              "type": "Set",
              "code": "     * Creates a new instance with resolutions.\n     */\n    public TypedResolveException(String type, String displayName, Iterable<? extends Throwable> failures, List<String> resolutions) {\n        super(buildMessage(type, displayName), failures, false);\n        this.type = type;\n        this.resolutions = ImmutableList.copyOf(resolutions);\n    }"
            },
            {
              "step": 22,
              "variableName": "Iterable<? extends Throwable> causes",
              "startLine": 77,
              "startColumn": 48,
              "endLine": 77,
              "endColumn": 84,
              "uri": "gradle-8.14.0/subprojects/core-api/src/main/java/org/gradle/api/artifacts/ResolveException.java",
              "type": "Set",
              "code": "     * @since 8.9\n     */\n    @Incubating\n    protected ResolveException(String message, Iterable<? extends Throwable> causes, @SuppressWarnings(\"unused\") boolean dummy) {\n        super(message, causes);\n    }\n}"
            },
            {
              "step": 23,
              "variableName": "causes",
              "startLine": 78,
              "startColumn": 24,
              "endLine": 78,
              "endColumn": 30,
              "uri": "gradle-8.14.0/subprojects/core-api/src/main/java/org/gradle/api/artifacts/ResolveException.java",
              "type": "Set",
              "code": "     */\n    @Incubating\n    protected ResolveException(String message, Iterable<? extends Throwable> causes, @SuppressWarnings(\"unused\") boolean dummy) {\n        super(message, causes);\n    }\n}\n"
            },
            {
              "step": 24,
              "variableName": "Iterable<? extends Throwable> causes",
              "startLine": 47,
              "startColumn": 55,
              "endLine": 47,
              "endColumn": 91,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "Set",
              "code": "        this.causes.addAll(Arrays.asList(causes));\n    }\n\n    public DefaultMultiCauseException(String message, Iterable<? extends Throwable> causes) {\n        super(message);\n        this.message = message;\n        initCauses(causes);"
            },
            {
              "step": 25,
              "variableName": "causes",
              "startLine": 50,
              "startColumn": 20,
              "endLine": 50,
              "endColumn": 26,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "Set",
              "code": "    public DefaultMultiCauseException(String message, Iterable<? extends Throwable> causes) {\n        super(message);\n        this.message = message;\n        initCauses(causes);\n    }\n\n    public DefaultMultiCauseException(Factory<String> messageFactory) {"
            },
            {
              "step": 26,
              "variableName": "Iterable<? extends Throwable> causes",
              "startLine": 112,
              "startColumn": 28,
              "endLine": 112,
              "endColumn": 64,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "Iterable",
              "code": "        return null;\n    }\n\n    public void initCauses(Iterable<? extends Throwable> causes) {\n        this.causes.clear();\n        for (Throwable cause : causes) {\n            this.causes.add(cause);"
            },
            {
              "step": 27,
              "variableName": "cause",
              "startLine": 115,
              "startColumn": 29,
              "endLine": 115,
              "endColumn": 34,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "Throwable",
              "code": "    public void initCauses(Iterable<? extends Throwable> causes) {\n        this.causes.clear();\n        for (Throwable cause : causes) {\n            this.causes.add(cause);\n        }\n    }\n"
            },
            {
              "step": 28,
              "variableName": "this.causes",
              "startLine": 115,
              "startColumn": 13,
              "endLine": 115,
              "endColumn": 24,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "CopyOnWriteArrayList [<element>] : Throwable",
              "code": "    public void initCauses(Iterable<? extends Throwable> causes) {\n        this.causes.clear();\n        for (Throwable cause : causes) {\n            this.causes.add(cause);\n        }\n    }\n"
            },
            {
              "step": 29,
              "variableName": "this",
              "startLine": 115,
              "startColumn": 13,
              "endLine": 115,
              "endColumn": 17,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "DefaultMultiCauseException [causes, <element>] : Throwable",
              "code": "    public void initCauses(Iterable<? extends Throwable> causes) {\n        this.causes.clear();\n        for (Throwable cause : causes) {\n            this.causes.add(cause);\n        }\n    }\n"
            },
            {
              "step": 30,
              "variableName": "projectConfigurationException",
              "startLine": 57,
              "startColumn": 17,
              "endLine": 57,
              "endColumn": 46,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/DefaultExceptionAnalyser.java",
              "type": "ProjectConfigurationException [causes, <element>] : Throwable",
              "code": "                }\n            }\n            if (!additionalFailures.isEmpty()) {\n                projectConfigurationException.initCauses(additionalFailures);\n                failures.add(transform(projectConfigurationException));\n            }\n        } else if (exception instanceof ServiceCreationException) {"
            },
            {
              "step": 31,
              "variableName": "projectConfigurationException",
              "startLine": 58,
              "startColumn": 40,
              "endLine": 58,
              "endColumn": 69,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/DefaultExceptionAnalyser.java",
              "type": "ProjectConfigurationException [causes, <element>] : Throwable",
              "code": "            }\n            if (!additionalFailures.isEmpty()) {\n                projectConfigurationException.initCauses(additionalFailures);\n                failures.add(transform(projectConfigurationException));\n            }\n        } else if (exception instanceof ServiceCreationException) {\n            failures.add(transform(new InitializationException(exception)));"
            },
            {
              "step": 32,
              "variableName": "transform(projectConfigurationException)",
              "startLine": 58,
              "startColumn": 30,
              "endLine": 58,
              "endColumn": 70,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/DefaultExceptionAnalyser.java",
              "type": "LocationAwareException",
              "code": "            }\n            if (!additionalFailures.isEmpty()) {\n                projectConfigurationException.initCauses(additionalFailures);\n                failures.add(transform(projectConfigurationException));\n            }\n        } else if (exception instanceof ServiceCreationException) {\n            failures.add(transform(new InitializationException(exception)));"
            },
            {
              "step": 33,
              "variableName": "failures",
              "startLine": 58,
              "startColumn": 17,
              "endLine": 58,
              "endColumn": 25,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/DefaultExceptionAnalyser.java",
              "type": "Collection [<element>] : LocationAwareException",
              "code": "            }\n            if (!additionalFailures.isEmpty()) {\n                projectConfigurationException.initCauses(additionalFailures);\n                failures.add(transform(projectConfigurationException));\n            }\n        } else if (exception instanceof ServiceCreationException) {\n            failures.add(transform(new InitializationException(exception)));"
            },
            {
              "step": 34,
              "variableName": "result",
              "startLine": 53,
              "startColumn": 54,
              "endLine": 53,
              "endColumn": 60,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/MultipleBuildFailuresExceptionAnalyser.java",
              "type": "ArrayList [<element>] : LocationAwareException",
              "code": "        for (Throwable failure : failures) {\n            if (failure instanceof MultipleBuildFailures) {\n                for (Throwable cause : ((MultipleBuildFailures) failure).getCauses()) {\n                    collector.collectFailures(cause, result);\n                }\n            } else {\n                collector.collectFailures(failure, result);"
            },
            {
              "step": 35,
              "variableName": "result",
              "startLine": 60,
              "startColumn": 39,
              "endLine": 60,
              "endColumn": 45,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/MultipleBuildFailuresExceptionAnalyser.java",
              "type": "ArrayList [<element>] : LocationAwareException",
              "code": "            }\n        }\n        if (result.size() == 1 && result.get(0) instanceof RuntimeException) {\n            return (RuntimeException) result.get(0);\n        } else {\n            return new MultipleBuildFailures(result);\n        }"
            },
            {
              "step": 36,
              "variableName": "result.get(0)",
              "startLine": 60,
              "startColumn": 39,
              "endLine": 60,
              "endColumn": 52,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/MultipleBuildFailuresExceptionAnalyser.java",
              "type": "LocationAwareException",
              "code": "            }\n        }\n        if (result.size() == 1 && result.get(0) instanceof RuntimeException) {\n            return (RuntimeException) result.get(0);\n        } else {\n            return new MultipleBuildFailures(result);\n        }"
            },
            {
              "step": 37,
              "variableName": "(RuntimeException) result.get(0)",
              "startLine": 60,
              "startColumn": 20,
              "endLine": 60,
              "endColumn": 52,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/MultipleBuildFailuresExceptionAnalyser.java",
              "type": "LocationAwareException",
              "code": "            }\n        }\n        if (result.size() == 1 && result.get(0) instanceof RuntimeException) {\n            return (RuntimeException) result.get(0);\n        } else {\n            return new MultipleBuildFailures(result);\n        }"
            },
            {
              "step": 38,
              "variableName": "exceptionAnalyser.transform(finishFailures)",
              "startLine": 72,
              "startColumn": 16,
              "endLine": 72,
              "endColumn": 59,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/internal/buildtree/DefaultBuildTreeFinishExecutor.java",
              "type": "LocationAwareException",
              "code": "            finishFailures.addAll(result.getFailures());\n        });\n\n        return exceptionAnalyser.transform(finishFailures);\n    }\n}\n"
            },
            {
              "step": 39,
              "variableName": "delegate.finishBuildTree(failures)",
              "startLine": 46,
              "startColumn": 28,
              "endLine": 46,
              "endColumn": 62,
              "uri": "gradle-8.14.0/subprojects/composite-builds/src/main/java/org/gradle/composite/internal/OperationFiringBuildTreeFinishExecutor.java",
              "type": "LocationAwareException",
              "code": "            @Override\n            public RuntimeException call(BuildOperationContext context) {\n                try {\n                    return delegate.finishBuildTree(failures);\n                } finally {\n                    context.setResult(RESULT);\n                }"
            },
            {
              "step": 40,
              "variableName": "buildOperation.call(context)",
              "startLine": 239,
              "startColumn": 21,
              "endLine": 239,
              "endColumn": 49,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/testFixtures/java/org/gradle/internal/operations/TestBuildOperationRunner.java",
              "type": "LocationAwareException",
              "code": "            TestBuildOperationContext context = new TestBuildOperationContext(record);\n            T t;\n            try {\n                t = buildOperation.call(context);\n            } catch (Throwable failure) {\n                if (record.failure == null) {\n                    record.failure = failure;"
            },
            {
              "step": 41,
              "variableName": "t",
              "startLine": 246,
              "startColumn": 20,
              "endLine": 246,
              "endColumn": 21,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/testFixtures/java/org/gradle/internal/operations/TestBuildOperationRunner.java",
              "type": "LocationAwareException",
              "code": "                }\n                throw throwAsUncheckedException(failure);\n            }\n            return t;\n        }\n\n        private <O extends BuildOperation> void execute(O buildOperation, BuildOperationWorker<O> worker) {"
            },
            {
              "step": 42,
              "variableName": "log.call(buildOperation)",
              "startLine": 51,
              "startColumn": 16,
              "endLine": 51,
              "endColumn": 40,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/testFixtures/java/org/gradle/internal/operations/TestBuildOperationRunner.java",
              "type": "LocationAwareException",
              "code": "\n    @Override\n    public <T> T call(CallableBuildOperation<T> buildOperation) {\n        return log.call(buildOperation);\n    }\n\n    @Override"
            },
            {
              "step": 43,
              "variableName": "ca",
              "startLine": 115,
              "startColumn": 5,
              "endLine": 121,
              "endColumn": 7,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/configurationcache/ConfigurationCacheBuildOperations.kt",
              "type": "LocationAwareException",
              "code": "\ninternal\nfun <T : Any> BuildOperationRunner.withModelLoadOperation(block: () -> T): T =\n    call(object : CallableBuildOperation<T> {\n        override fun description(): BuildOperationDescriptor.Builder = BuildOperationDescriptor\n            .displayName(\"Load model from configuration cache\")\n            .progressDisplayName(\"Loading model from configuration cache\")"
            },
            {
              "step": 44,
              "variableName": "ca",
              "startLine": 115,
              "startColumn": 5,
              "endLine": 121,
              "endColumn": 7,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/configurationcache/ConfigurationCacheBuildOperations.kt",
              "type": "LocationAwareException",
              "code": "\ninternal\nfun <T : Any> BuildOperationRunner.withModelLoadOperation(block: () -> T): T =\n    call(object : CallableBuildOperation<T> {\n        override fun description(): BuildOperationDescriptor.Builder = BuildOperationDescriptor\n            .displayName(\"Load model from configuration cache\")\n            .progressDisplayName(\"Loading model from configuration cache\")"
            },
            {
              "step": 45,
              "variableName": "b",
              "startLine": 635,
              "startColumn": 9,
              "endLine": 641,
              "endColumn": 10,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "        // No need to record the `ClassLoaderScope` tree when loading\n        scopeRegistryListener.dispose()\n\n        buildOperationRunner.withModelLoadOperation {\n            val storeLoadResult = entryStore.useForStateLoad(StateType.Model) { stateFile: ConfigurationCacheStateFile ->\n                cacheIO.readModelFrom(stateFile)\n            }"
            },
            {
              "step": 46,
              "variableName": "block()",
              "startLine": 668,
              "startColumn": 22,
              "endLine": 668,
              "endColumn": 29,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "    private\n    inline fun <T> runAtConfigurationTime(block: () -> T): T {\n        prepareConfigurationTimeBarrier()\n        val result = block()\n        crossConfigurationTimeBarrier()\n        return result\n    }"
            },
            {
              "step": 47,
              "variableName": "result",
              "startLine": 670,
              "startColumn": 16,
              "endLine": 670,
              "endColumn": 22,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "        prepareConfigurationTimeBarrier()\n        val result = block()\n        crossConfigurationTimeBarrier()\n        return result\n    }\n\n    private"
            },
            {
              "step": 48,
              "variableName": "runAtConfigurationTime(...) : LocationAwareException",
              "startLine": 631,
              "startColumn": 28,
              "endLine": 642,
              "endColumn": 6,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "    data class LoadResultMetadata(val originInvocationId: String? = null)\n\n    private\n    fun loadModel(): Any = runAtConfigurationTime {\n        // No need to record the `ClassLoaderScope` tree when loading\n        scopeRegistryListener.dispose()\n"
            },
            {
              "step": 49,
              "variableName": "loadModel()",
              "startLine": 268,
              "startColumn": 20,
              "endLine": 268,
              "endColumn": 31,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "    override fun <T : Any> loadOrCreateModel(creator: () -> T): T {\n        if (isLoaded) {\n            runLoadedSideEffects()\n            return loadModel().uncheckedCast()\n        }\n\n        return runWorkThatContributesToCacheEntry {"
            },
            {
              "step": 50,
              "variableName": "Any",
              "startLine": 22,
              "startColumn": 15,
              "endLine": 22,
              "endColumn": 18,
              "uri": "gradle-8.14.0/platforms/core-configuration/stdlib-kotlin-extensions/src/main/kotlin/org/gradle/internal/extensions/stdlib/CastExtensions.kt",
              "type": "Object",
              "code": "import org.gradle.internal.Cast\n\n\nfun <T : Any> Any.uncheckedCast(): T =\n    Cast.uncheckedNonnullCast(this)\n"
            },
            {
              "step": 51,
              "variableName": "this",
              "startLine": 23,
              "startColumn": 31,
              "endLine": 23,
              "endColumn": 35,
              "uri": "gradle-8.14.0/platforms/core-configuration/stdlib-kotlin-extensions/src/main/kotlin/org/gradle/internal/extensions/stdlib/CastExtensions.kt",
              "type": "Object",
              "code": "\n\nfun <T : Any> Any.uncheckedCast(): T =\n    Cast.uncheckedNonnullCast(this)\n"
            },
            {
              "step": 52,
              "variableName": "Object object",
              "startLine": 76,
              "startColumn": 46,
              "endLine": 76,
              "endColumn": 59,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/Cast.java",
              "type": "Object",
              "code": "    }\n\n    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})\n    public static <T> T uncheckedNonnullCast(Object object) {\n        return (T) object;\n    }\n}"
            },
            {
              "step": 53,
              "variableName": "(T) object",
              "startLine": 77,
              "startColumn": 16,
              "endLine": 77,
              "endColumn": 26,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/Cast.java",
              "type": "Object",
              "code": "\n    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})\n    public static <T> T uncheckedNonnullCast(Object object) {\n        return (T) object;\n    }\n}\n"
            },
            {
              "step": 54,
              "variableName": "Cast.uncheckedNonnullCast(collectionType)",
              "startLine": 223,
              "startColumn": 16,
              "endLine": 223,
              "endColumn": 57,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/api/internal/provider/AbstractCollectionProperty.java",
              "type": "Class",
              "code": "    @Override\n    @Nonnull\n    public Class<C> getType() {\n        return Cast.uncheckedNonnullCast(collectionType);\n    }\n\n    @Override"
            },
            {
              "step": 55,
              "variableName": "provider.getType()",
              "startLine": 41,
              "startColumn": 35,
              "endLine": 41,
              "endColumn": 53,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/api/internal/provider/OrElseFixedValueProvider.java",
              "type": "Class",
              "code": "    @Nullable\n    @Override\n    public Class<T> getType() {\n        return Cast.uncheckedCast(provider.getType());\n    }\n\n    @Override"
            },
            {
              "step": 56,
              "variableName": "@Nullable Object object",
              "startLine": 71,
              "startColumn": 39,
              "endLine": 71,
              "endColumn": 62,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/Cast.java",
              "type": "Object",
              "code": "\n    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})\n    @Nullable\n    public static <T> T uncheckedCast(@Nullable Object object) {\n        return (T) object;\n    }\n"
            },
            {
              "step": 57,
              "variableName": "(T) object",
              "startLine": 72,
              "startColumn": 16,
              "endLine": 72,
              "endColumn": 26,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/Cast.java",
              "type": "Object",
              "code": "    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})\n    @Nullable\n    public static <T> T uncheckedCast(@Nullable Object object) {\n        return (T) object;\n    }\n\n    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})"
            },
            {
              "step": 58,
              "variableName": "Cast.uncheckedCast(sanitizer.sanitize(t))",
              "startLine": 41,
              "startColumn": 15,
              "endLine": 41,
              "endColumn": 56,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/api/internal/provider/TypeSanitizingTransformer.java",
              "type": "Object",
              "code": "\n    @Override\n    public T transform(T t) {\n        T v = Cast.uncheckedCast(sanitizer.sanitize(t));\n        if (targetType.isInstance(v)) {\n            return v;\n        }"
            },
            {
              "step": 59,
              "variableName": "v",
              "startLine": 43,
              "startColumn": 20,
              "endLine": 43,
              "endColumn": 21,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/api/internal/provider/TypeSanitizingTransformer.java",
              "type": "Object",
              "code": "    public T transform(T t) {\n        T v = Cast.uncheckedCast(sanitizer.sanitize(t));\n        if (targetType.isInstance(v)) {\n            return v;\n        }\n        throw new IllegalArgumentException(String.format(\"Cannot get the value of %s of type %s as the provider associated with this property returned a value of type %s.\", owner.getDisplayName(), targetType.getName(), v.getClass().getName()));\n    }"
            },
            {
              "step": 60,
              "variableName": "describer.transform(this)",
              "startLine": 163,
              "startColumn": 16,
              "endLine": 163,
              "endColumn": 41,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/repositories/DefaultMavenArtifactRepository.java",
              "type": "String",
              "code": "\n    @Override\n    public String getDisplayName() {\n        return describer.transform(this);\n    }\n\n    @Override"
            },
            {
              "step": 61,
              "variableName": "workUnitDescription.getDisplayName()",
              "startLine": 146,
              "startColumn": 44,
              "endLine": 146,
              "endColumn": 80,
              "uri": "gradle-8.14.0/platforms/core-execution/execution/src/main/java/org/gradle/internal/execution/timeout/impl/DefaultTimeoutHandler.java",
              "type": "",
              "code": "                StringBuilder logMessageBuilder = new StringBuilder();\n                try (PrintWriter logMessageWriter = new PrintWriter(CharStreams.asWriter(logMessageBuilder))) {\n                    logMessageWriter.print(\"Current stacktrace of timed out but not yet stopped \");\n                    logMessageWriter.print(workUnitDescription.getDisplayName());\n                    logMessageWriter.println(\":\");\n                    for (StackTraceElement traceElement : currentStackTrace) {\n                        logMessageWriter.println(\"  at \" + traceElement);"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "source",
              "startLine": 42,
              "startColumn": 27,
              "endLine": 42,
              "endColumn": 33,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/RegExpNameMapper.java",
              "type": "String",
              "code": "        if (matcher == null) {\n            matcher = pattern.matcher(source);\n        } else {\n            matcher.reset(source);\n        }\n        String result = source;\n        if (matcher.find()) {"
            },
            {
              "step": 1,
              "variableName": "result",
              "startLine": 48,
              "startColumn": 16,
              "endLine": 48,
              "endColumn": 22,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/RegExpNameMapper.java",
              "type": "String",
              "code": "        if (matcher.find()) {\n            result = matcher.replaceFirst(replacement);\n        }\n        return result;\n    }\n}\n"
            },
            {
              "step": 2,
              "variableName": "transformer.transform(value)",
              "startLine": 37,
              "startColumn": 31,
              "endLine": 37,
              "endColumn": 59,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/ChainingTransformer.java",
              "type": "String",
              "code": "    public T transform(T original) {\n        T value = original;\n        for (Transformer<T, T> transformer : transformers) {\n            value = type.cast(transformer.transform(value));\n        }\n        return value;\n    }"
            },
            {
              "step": 3,
              "variableName": "type.cast(transformer.transform(value))",
              "startLine": 37,
              "startColumn": 21,
              "endLine": 37,
              "endColumn": 60,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/ChainingTransformer.java",
              "type": "String",
              "code": "    public T transform(T original) {\n        T value = original;\n        for (Transformer<T, T> transformer : transformers) {\n            value = type.cast(transformer.transform(value));\n        }\n        return value;\n    }"
            },
            {
              "step": 4,
              "variableName": "value",
              "startLine": 39,
              "startColumn": 16,
              "endLine": 39,
              "endColumn": 21,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/ChainingTransformer.java",
              "type": "String",
              "code": "        for (Transformer<T, T> transformer : transformers) {\n            value = type.cast(transformer.transform(value));\n        }\n        return value;\n    }\n\n    public void add(Transformer<T, T> transformer) {"
            },
            {
              "step": 5,
              "variableName": "describer.transform(this)",
              "startLine": 163,
              "startColumn": 16,
              "endLine": 163,
              "endColumn": 41,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/repositories/DefaultMavenArtifactRepository.java",
              "type": "String",
              "code": "\n    @Override\n    public String getDisplayName() {\n        return describer.transform(this);\n    }\n\n    @Override"
            },
            {
              "step": 6,
              "variableName": "describable.getDisplayName()",
              "startLine": 313,
              "startColumn": 35,
              "endLine": 313,
              "endColumn": 63,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "String",
              "code": "        public String getDisplayName() {\n            synchronized (this) {\n                if (displayName == null) {\n                    displayName = describable.getDisplayName();\n                    if (capDisplayName != null || !(describable instanceof DisplayName)) {\n                        describable = null;\n                    }"
            },
            {
              "step": 7,
              "variableName": "displayName",
              "startLine": 318,
              "startColumn": 24,
              "endLine": 318,
              "endColumn": 35,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "String",
              "code": "                        describable = null;\n                    }\n                }\n                return displayName;\n            }\n        }\n    }"
            },
            {
              "step": 8,
              "variableName": "displayName.getDisplayName()",
              "startLine": 772,
              "startColumn": 73,
              "endLine": 772,
              "endColumn": 101,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/configurations/DefaultConfiguration.java",
              "type": "String",
              "code": "                try {\n                    results = resolver.resolveGraph(DefaultConfiguration.this);\n                } catch (Exception e) {\n                    throw exceptionMapper.mapFailure(e, \"dependencies\", displayName.getDisplayName());\n                }\n\n                // Make the new state visible in case a dependency resolution listener queries the result, which requires the new state"
            },
            {
              "step": 9,
              "variableName": "String contextDisplayName",
              "startLine": 68,
              "startColumn": 77,
              "endLine": 68,
              "endColumn": 102,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "String",
              "code": "        return mapFailure(failure, type, displayName);\n    }\n\n    public TypedResolveException mapFailure(Throwable failure, String type, String contextDisplayName) {\n        if (!(failure instanceof TypedResolveException)) {\n            return new TypedResolveException(\n                type,"
            },
            {
              "step": 10,
              "variableName": "contextDisplayName",
              "startLine": 72,
              "startColumn": 17,
              "endLine": 72,
              "endColumn": 35,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "String",
              "code": "        if (!(failure instanceof TypedResolveException)) {\n            return new TypedResolveException(\n                type,\n                contextDisplayName,\n                ImmutableList.of(mapRepositoryOverrideFailure(contextDisplayName, failure))\n            );\n        }"
            },
            {
              "step": 11,
              "variableName": "new TypedResolveException(...) : TypedResolveException",
              "startLine": 70,
              "startColumn": 20,
              "endLine": 74,
              "endColumn": 14,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "TypedResolveException",
              "code": "\n    public TypedResolveException mapFailure(Throwable failure, String type, String contextDisplayName) {\n        if (!(failure instanceof TypedResolveException)) {\n            return new TypedResolveException(\n                type,\n                contextDisplayName,\n                ImmutableList.of(mapRepositoryOverrideFailure(contextDisplayName, failure))"
            },
            {
              "step": 12,
              "variableName": "exceptionMapper.mapFailure(e, \"dependencies\", displayName.getDisplayName())",
              "startLine": 772,
              "startColumn": 27,
              "endLine": 772,
              "endColumn": 102,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/configurations/DefaultConfiguration.java",
              "type": "TypedResolveException",
              "code": "                try {\n                    results = resolver.resolveGraph(DefaultConfiguration.this);\n                } catch (Exception e) {\n                    throw exceptionMapper.mapFailure(e, \"dependencies\", displayName.getDisplayName());\n                }\n\n                // Make the new state visible in case a dependency resolution listener queries the result, which requires the new state"
            },
            {
              "step": 13,
              "variableName": "e",
              "startLine": 772,
              "startColumn": 54,
              "endLine": 772,
              "endColumn": 55,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/configurations/DefaultConfiguration.java",
              "type": "Exception",
              "code": "                try {\n                    results = resolver.resolveGraph(DefaultConfiguration.this);\n                } catch (Exception e) {\n                    throw exceptionMapper.mapFailure(e, \"dependencies\", displayName.getDisplayName());\n                }\n\n                // Make the new state visible in case a dependency resolution listener queries the result, which requires the new state"
            },
            {
              "step": 14,
              "variableName": "Throwable failure",
              "startLine": 68,
              "startColumn": 45,
              "endLine": 68,
              "endColumn": 62,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Throwable",
              "code": "        return mapFailure(failure, type, displayName);\n    }\n\n    public TypedResolveException mapFailure(Throwable failure, String type, String contextDisplayName) {\n        if (!(failure instanceof TypedResolveException)) {\n            return new TypedResolveException(\n                type,"
            },
            {
              "step": 15,
              "variableName": "failure",
              "startLine": 73,
              "startColumn": 83,
              "endLine": 73,
              "endColumn": 90,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Throwable",
              "code": "            return new TypedResolveException(\n                type,\n                contextDisplayName,\n                ImmutableList.of(mapRepositoryOverrideFailure(contextDisplayName, failure))\n            );\n        }\n"
            },
            {
              "step": 16,
              "variableName": "Throwable failure",
              "startLine": 94,
              "startColumn": 78,
              "endLine": 94,
              "endColumn": 95,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Throwable",
              "code": "\n    // TODO: We should handle this exception at the source instead of using instanceof to detect it after it is thrown.\n    //       We should try to avoid catching and analyzing runtime exceptions\n    public Throwable mapRepositoryOverrideFailure(String contextDisplayName, Throwable failure) {\n        if (!(failure instanceof ModuleVersionNotFoundException) || !settingsRepositoriesIgnored()) {\n            return failure;\n        }"
            },
            {
              "step": 17,
              "variableName": "failure",
              "startLine": 108,
              "startColumn": 35,
              "endLine": 108,
              "endColumn": 42,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Throwable",
              "code": "        return new TypedResolveException(\n            \"dependencies\",\n            contextDisplayName,\n            Collections.singleton(failure),\n            resolutions\n        );\n    }"
            },
            {
              "step": 18,
              "variableName": "Collections.singleton(failure)",
              "startLine": 108,
              "startColumn": 13,
              "endLine": 108,
              "endColumn": 43,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Set [<element>] : Throwable",
              "code": "        return new TypedResolveException(\n            \"dependencies\",\n            contextDisplayName,\n            Collections.singleton(failure),\n            resolutions\n        );\n    }"
            },
            {
              "step": 19,
              "variableName": "Collections.singleton(failure)",
              "startLine": 108,
              "startColumn": 13,
              "endLine": 108,
              "endColumn": 43,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Set",
              "code": "        return new TypedResolveException(\n            \"dependencies\",\n            contextDisplayName,\n            Collections.singleton(failure),\n            resolutions\n        );\n    }"
            },
            {
              "step": 20,
              "variableName": "Iterable<? extends Throwable> failures",
              "startLine": 42,
              "startColumn": 67,
              "endLine": 42,
              "endColumn": 105,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ivyservice/TypedResolveException.java",
              "type": "Set",
              "code": "    /**\n     * Creates a new instance with resolutions.\n     */\n    public TypedResolveException(String type, String displayName, Iterable<? extends Throwable> failures, List<String> resolutions) {\n        super(buildMessage(type, displayName), failures, false);\n        this.type = type;\n        this.resolutions = ImmutableList.copyOf(resolutions);"
            },
            {
              "step": 21,
              "variableName": "failures",
              "startLine": 43,
              "startColumn": 48,
              "endLine": 43,
              "endColumn": 56,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ivyservice/TypedResolveException.java",
              "type": "Set",
              "code": "     * Creates a new instance with resolutions.\n     */\n    public TypedResolveException(String type, String displayName, Iterable<? extends Throwable> failures, List<String> resolutions) {\n        super(buildMessage(type, displayName), failures, false);\n        this.type = type;\n        this.resolutions = ImmutableList.copyOf(resolutions);\n    }"
            },
            {
              "step": 22,
              "variableName": "Iterable<? extends Throwable> causes",
              "startLine": 77,
              "startColumn": 48,
              "endLine": 77,
              "endColumn": 84,
              "uri": "gradle-8.14.0/subprojects/core-api/src/main/java/org/gradle/api/artifacts/ResolveException.java",
              "type": "Set",
              "code": "     * @since 8.9\n     */\n    @Incubating\n    protected ResolveException(String message, Iterable<? extends Throwable> causes, @SuppressWarnings(\"unused\") boolean dummy) {\n        super(message, causes);\n    }\n}"
            },
            {
              "step": 23,
              "variableName": "causes",
              "startLine": 78,
              "startColumn": 24,
              "endLine": 78,
              "endColumn": 30,
              "uri": "gradle-8.14.0/subprojects/core-api/src/main/java/org/gradle/api/artifacts/ResolveException.java",
              "type": "Set",
              "code": "     */\n    @Incubating\n    protected ResolveException(String message, Iterable<? extends Throwable> causes, @SuppressWarnings(\"unused\") boolean dummy) {\n        super(message, causes);\n    }\n}\n"
            },
            {
              "step": 24,
              "variableName": "Iterable<? extends Throwable> causes",
              "startLine": 47,
              "startColumn": 55,
              "endLine": 47,
              "endColumn": 91,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "Set",
              "code": "        this.causes.addAll(Arrays.asList(causes));\n    }\n\n    public DefaultMultiCauseException(String message, Iterable<? extends Throwable> causes) {\n        super(message);\n        this.message = message;\n        initCauses(causes);"
            },
            {
              "step": 25,
              "variableName": "causes",
              "startLine": 50,
              "startColumn": 20,
              "endLine": 50,
              "endColumn": 26,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "Set",
              "code": "    public DefaultMultiCauseException(String message, Iterable<? extends Throwable> causes) {\n        super(message);\n        this.message = message;\n        initCauses(causes);\n    }\n\n    public DefaultMultiCauseException(Factory<String> messageFactory) {"
            },
            {
              "step": 26,
              "variableName": "Iterable<? extends Throwable> causes",
              "startLine": 112,
              "startColumn": 28,
              "endLine": 112,
              "endColumn": 64,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "Iterable",
              "code": "        return null;\n    }\n\n    public void initCauses(Iterable<? extends Throwable> causes) {\n        this.causes.clear();\n        for (Throwable cause : causes) {\n            this.causes.add(cause);"
            },
            {
              "step": 27,
              "variableName": "cause",
              "startLine": 115,
              "startColumn": 29,
              "endLine": 115,
              "endColumn": 34,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "Throwable",
              "code": "    public void initCauses(Iterable<? extends Throwable> causes) {\n        this.causes.clear();\n        for (Throwable cause : causes) {\n            this.causes.add(cause);\n        }\n    }\n"
            },
            {
              "step": 28,
              "variableName": "this.causes",
              "startLine": 115,
              "startColumn": 13,
              "endLine": 115,
              "endColumn": 24,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "CopyOnWriteArrayList [<element>] : Throwable",
              "code": "    public void initCauses(Iterable<? extends Throwable> causes) {\n        this.causes.clear();\n        for (Throwable cause : causes) {\n            this.causes.add(cause);\n        }\n    }\n"
            },
            {
              "step": 29,
              "variableName": "this",
              "startLine": 115,
              "startColumn": 13,
              "endLine": 115,
              "endColumn": 17,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "DefaultMultiCauseException [causes, <element>] : Throwable",
              "code": "    public void initCauses(Iterable<? extends Throwable> causes) {\n        this.causes.clear();\n        for (Throwable cause : causes) {\n            this.causes.add(cause);\n        }\n    }\n"
            },
            {
              "step": 30,
              "variableName": "projectConfigurationException",
              "startLine": 57,
              "startColumn": 17,
              "endLine": 57,
              "endColumn": 46,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/DefaultExceptionAnalyser.java",
              "type": "ProjectConfigurationException [causes, <element>] : Throwable",
              "code": "                }\n            }\n            if (!additionalFailures.isEmpty()) {\n                projectConfigurationException.initCauses(additionalFailures);\n                failures.add(transform(projectConfigurationException));\n            }\n        } else if (exception instanceof ServiceCreationException) {"
            },
            {
              "step": 31,
              "variableName": "projectConfigurationException",
              "startLine": 58,
              "startColumn": 40,
              "endLine": 58,
              "endColumn": 69,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/DefaultExceptionAnalyser.java",
              "type": "ProjectConfigurationException [causes, <element>] : Throwable",
              "code": "            }\n            if (!additionalFailures.isEmpty()) {\n                projectConfigurationException.initCauses(additionalFailures);\n                failures.add(transform(projectConfigurationException));\n            }\n        } else if (exception instanceof ServiceCreationException) {\n            failures.add(transform(new InitializationException(exception)));"
            },
            {
              "step": 32,
              "variableName": "transform(projectConfigurationException)",
              "startLine": 58,
              "startColumn": 30,
              "endLine": 58,
              "endColumn": 70,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/DefaultExceptionAnalyser.java",
              "type": "LocationAwareException",
              "code": "            }\n            if (!additionalFailures.isEmpty()) {\n                projectConfigurationException.initCauses(additionalFailures);\n                failures.add(transform(projectConfigurationException));\n            }\n        } else if (exception instanceof ServiceCreationException) {\n            failures.add(transform(new InitializationException(exception)));"
            },
            {
              "step": 33,
              "variableName": "failures",
              "startLine": 58,
              "startColumn": 17,
              "endLine": 58,
              "endColumn": 25,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/DefaultExceptionAnalyser.java",
              "type": "Collection [<element>] : LocationAwareException",
              "code": "            }\n            if (!additionalFailures.isEmpty()) {\n                projectConfigurationException.initCauses(additionalFailures);\n                failures.add(transform(projectConfigurationException));\n            }\n        } else if (exception instanceof ServiceCreationException) {\n            failures.add(transform(new InitializationException(exception)));"
            },
            {
              "step": 34,
              "variableName": "result",
              "startLine": 53,
              "startColumn": 54,
              "endLine": 53,
              "endColumn": 60,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/MultipleBuildFailuresExceptionAnalyser.java",
              "type": "ArrayList [<element>] : LocationAwareException",
              "code": "        for (Throwable failure : failures) {\n            if (failure instanceof MultipleBuildFailures) {\n                for (Throwable cause : ((MultipleBuildFailures) failure).getCauses()) {\n                    collector.collectFailures(cause, result);\n                }\n            } else {\n                collector.collectFailures(failure, result);"
            },
            {
              "step": 35,
              "variableName": "result",
              "startLine": 60,
              "startColumn": 39,
              "endLine": 60,
              "endColumn": 45,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/MultipleBuildFailuresExceptionAnalyser.java",
              "type": "ArrayList [<element>] : LocationAwareException",
              "code": "            }\n        }\n        if (result.size() == 1 && result.get(0) instanceof RuntimeException) {\n            return (RuntimeException) result.get(0);\n        } else {\n            return new MultipleBuildFailures(result);\n        }"
            },
            {
              "step": 36,
              "variableName": "result.get(0)",
              "startLine": 60,
              "startColumn": 39,
              "endLine": 60,
              "endColumn": 52,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/MultipleBuildFailuresExceptionAnalyser.java",
              "type": "LocationAwareException",
              "code": "            }\n        }\n        if (result.size() == 1 && result.get(0) instanceof RuntimeException) {\n            return (RuntimeException) result.get(0);\n        } else {\n            return new MultipleBuildFailures(result);\n        }"
            },
            {
              "step": 37,
              "variableName": "(RuntimeException) result.get(0)",
              "startLine": 60,
              "startColumn": 20,
              "endLine": 60,
              "endColumn": 52,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/MultipleBuildFailuresExceptionAnalyser.java",
              "type": "LocationAwareException",
              "code": "            }\n        }\n        if (result.size() == 1 && result.get(0) instanceof RuntimeException) {\n            return (RuntimeException) result.get(0);\n        } else {\n            return new MultipleBuildFailures(result);\n        }"
            },
            {
              "step": 38,
              "variableName": "exceptionAnalyser.transform(finishFailures)",
              "startLine": 72,
              "startColumn": 16,
              "endLine": 72,
              "endColumn": 59,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/internal/buildtree/DefaultBuildTreeFinishExecutor.java",
              "type": "LocationAwareException",
              "code": "            finishFailures.addAll(result.getFailures());\n        });\n\n        return exceptionAnalyser.transform(finishFailures);\n    }\n}\n"
            },
            {
              "step": 39,
              "variableName": "delegate.finishBuildTree(failures)",
              "startLine": 46,
              "startColumn": 28,
              "endLine": 46,
              "endColumn": 62,
              "uri": "gradle-8.14.0/subprojects/composite-builds/src/main/java/org/gradle/composite/internal/OperationFiringBuildTreeFinishExecutor.java",
              "type": "LocationAwareException",
              "code": "            @Override\n            public RuntimeException call(BuildOperationContext context) {\n                try {\n                    return delegate.finishBuildTree(failures);\n                } finally {\n                    context.setResult(RESULT);\n                }"
            },
            {
              "step": 40,
              "variableName": "buildOperation.call(context)",
              "startLine": 239,
              "startColumn": 21,
              "endLine": 239,
              "endColumn": 49,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/testFixtures/java/org/gradle/internal/operations/TestBuildOperationRunner.java",
              "type": "LocationAwareException",
              "code": "            TestBuildOperationContext context = new TestBuildOperationContext(record);\n            T t;\n            try {\n                t = buildOperation.call(context);\n            } catch (Throwable failure) {\n                if (record.failure == null) {\n                    record.failure = failure;"
            },
            {
              "step": 41,
              "variableName": "t",
              "startLine": 246,
              "startColumn": 20,
              "endLine": 246,
              "endColumn": 21,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/testFixtures/java/org/gradle/internal/operations/TestBuildOperationRunner.java",
              "type": "LocationAwareException",
              "code": "                }\n                throw throwAsUncheckedException(failure);\n            }\n            return t;\n        }\n\n        private <O extends BuildOperation> void execute(O buildOperation, BuildOperationWorker<O> worker) {"
            },
            {
              "step": 42,
              "variableName": "log.call(buildOperation)",
              "startLine": 51,
              "startColumn": 16,
              "endLine": 51,
              "endColumn": 40,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/testFixtures/java/org/gradle/internal/operations/TestBuildOperationRunner.java",
              "type": "LocationAwareException",
              "code": "\n    @Override\n    public <T> T call(CallableBuildOperation<T> buildOperation) {\n        return log.call(buildOperation);\n    }\n\n    @Override"
            },
            {
              "step": 43,
              "variableName": "ca",
              "startLine": 115,
              "startColumn": 5,
              "endLine": 121,
              "endColumn": 7,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/configurationcache/ConfigurationCacheBuildOperations.kt",
              "type": "LocationAwareException",
              "code": "\ninternal\nfun <T : Any> BuildOperationRunner.withModelLoadOperation(block: () -> T): T =\n    call(object : CallableBuildOperation<T> {\n        override fun description(): BuildOperationDescriptor.Builder = BuildOperationDescriptor\n            .displayName(\"Load model from configuration cache\")\n            .progressDisplayName(\"Loading model from configuration cache\")"
            },
            {
              "step": 44,
              "variableName": "ca",
              "startLine": 115,
              "startColumn": 5,
              "endLine": 121,
              "endColumn": 7,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/configurationcache/ConfigurationCacheBuildOperations.kt",
              "type": "LocationAwareException",
              "code": "\ninternal\nfun <T : Any> BuildOperationRunner.withModelLoadOperation(block: () -> T): T =\n    call(object : CallableBuildOperation<T> {\n        override fun description(): BuildOperationDescriptor.Builder = BuildOperationDescriptor\n            .displayName(\"Load model from configuration cache\")\n            .progressDisplayName(\"Loading model from configuration cache\")"
            },
            {
              "step": 45,
              "variableName": "b",
              "startLine": 635,
              "startColumn": 9,
              "endLine": 641,
              "endColumn": 10,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "        // No need to record the `ClassLoaderScope` tree when loading\n        scopeRegistryListener.dispose()\n\n        buildOperationRunner.withModelLoadOperation {\n            val storeLoadResult = entryStore.useForStateLoad(StateType.Model) { stateFile: ConfigurationCacheStateFile ->\n                cacheIO.readModelFrom(stateFile)\n            }"
            },
            {
              "step": 46,
              "variableName": "block()",
              "startLine": 668,
              "startColumn": 22,
              "endLine": 668,
              "endColumn": 29,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "    private\n    inline fun <T> runAtConfigurationTime(block: () -> T): T {\n        prepareConfigurationTimeBarrier()\n        val result = block()\n        crossConfigurationTimeBarrier()\n        return result\n    }"
            },
            {
              "step": 47,
              "variableName": "result",
              "startLine": 670,
              "startColumn": 16,
              "endLine": 670,
              "endColumn": 22,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "        prepareConfigurationTimeBarrier()\n        val result = block()\n        crossConfigurationTimeBarrier()\n        return result\n    }\n\n    private"
            },
            {
              "step": 48,
              "variableName": "runAtConfigurationTime(...) : LocationAwareException",
              "startLine": 631,
              "startColumn": 28,
              "endLine": 642,
              "endColumn": 6,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "    data class LoadResultMetadata(val originInvocationId: String? = null)\n\n    private\n    fun loadModel(): Any = runAtConfigurationTime {\n        // No need to record the `ClassLoaderScope` tree when loading\n        scopeRegistryListener.dispose()\n"
            },
            {
              "step": 49,
              "variableName": "loadModel()",
              "startLine": 268,
              "startColumn": 20,
              "endLine": 268,
              "endColumn": 31,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "    override fun <T : Any> loadOrCreateModel(creator: () -> T): T {\n        if (isLoaded) {\n            runLoadedSideEffects()\n            return loadModel().uncheckedCast()\n        }\n\n        return runWorkThatContributesToCacheEntry {"
            },
            {
              "step": 50,
              "variableName": "Any",
              "startLine": 22,
              "startColumn": 15,
              "endLine": 22,
              "endColumn": 18,
              "uri": "gradle-8.14.0/platforms/core-configuration/stdlib-kotlin-extensions/src/main/kotlin/org/gradle/internal/extensions/stdlib/CastExtensions.kt",
              "type": "Object",
              "code": "import org.gradle.internal.Cast\n\n\nfun <T : Any> Any.uncheckedCast(): T =\n    Cast.uncheckedNonnullCast(this)\n"
            },
            {
              "step": 51,
              "variableName": "this",
              "startLine": 23,
              "startColumn": 31,
              "endLine": 23,
              "endColumn": 35,
              "uri": "gradle-8.14.0/platforms/core-configuration/stdlib-kotlin-extensions/src/main/kotlin/org/gradle/internal/extensions/stdlib/CastExtensions.kt",
              "type": "Object",
              "code": "\n\nfun <T : Any> Any.uncheckedCast(): T =\n    Cast.uncheckedNonnullCast(this)\n"
            },
            {
              "step": 52,
              "variableName": "Object object",
              "startLine": 76,
              "startColumn": 46,
              "endLine": 76,
              "endColumn": 59,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/Cast.java",
              "type": "Object",
              "code": "    }\n\n    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})\n    public static <T> T uncheckedNonnullCast(Object object) {\n        return (T) object;\n    }\n}"
            },
            {
              "step": 53,
              "variableName": "(T) object",
              "startLine": 77,
              "startColumn": 16,
              "endLine": 77,
              "endColumn": 26,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/Cast.java",
              "type": "Object",
              "code": "\n    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})\n    public static <T> T uncheckedNonnullCast(Object object) {\n        return (T) object;\n    }\n}\n"
            },
            {
              "step": 54,
              "variableName": "Cast.uncheckedNonnullCast(collectionType)",
              "startLine": 223,
              "startColumn": 16,
              "endLine": 223,
              "endColumn": 57,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/api/internal/provider/AbstractCollectionProperty.java",
              "type": "Class",
              "code": "    @Override\n    @Nonnull\n    public Class<C> getType() {\n        return Cast.uncheckedNonnullCast(collectionType);\n    }\n\n    @Override"
            },
            {
              "step": 55,
              "variableName": "provider.getType()",
              "startLine": 41,
              "startColumn": 35,
              "endLine": 41,
              "endColumn": 53,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/api/internal/provider/OrElseFixedValueProvider.java",
              "type": "Class",
              "code": "    @Nullable\n    @Override\n    public Class<T> getType() {\n        return Cast.uncheckedCast(provider.getType());\n    }\n\n    @Override"
            },
            {
              "step": 56,
              "variableName": "@Nullable Object object",
              "startLine": 71,
              "startColumn": 39,
              "endLine": 71,
              "endColumn": 62,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/Cast.java",
              "type": "Object",
              "code": "\n    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})\n    @Nullable\n    public static <T> T uncheckedCast(@Nullable Object object) {\n        return (T) object;\n    }\n"
            },
            {
              "step": 57,
              "variableName": "(T) object",
              "startLine": 72,
              "startColumn": 16,
              "endLine": 72,
              "endColumn": 26,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/Cast.java",
              "type": "Object",
              "code": "    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})\n    @Nullable\n    public static <T> T uncheckedCast(@Nullable Object object) {\n        return (T) object;\n    }\n\n    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})"
            },
            {
              "step": 58,
              "variableName": "Cast.uncheckedCast(sanitizer.sanitize(t))",
              "startLine": 41,
              "startColumn": 15,
              "endLine": 41,
              "endColumn": 56,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/api/internal/provider/TypeSanitizingTransformer.java",
              "type": "Object",
              "code": "\n    @Override\n    public T transform(T t) {\n        T v = Cast.uncheckedCast(sanitizer.sanitize(t));\n        if (targetType.isInstance(v)) {\n            return v;\n        }"
            },
            {
              "step": 59,
              "variableName": "v",
              "startLine": 43,
              "startColumn": 20,
              "endLine": 43,
              "endColumn": 21,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/api/internal/provider/TypeSanitizingTransformer.java",
              "type": "Object",
              "code": "    public T transform(T t) {\n        T v = Cast.uncheckedCast(sanitizer.sanitize(t));\n        if (targetType.isInstance(v)) {\n            return v;\n        }\n        throw new IllegalArgumentException(String.format(\"Cannot get the value of %s of type %s as the provider associated with this property returned a value of type %s.\", owner.getDisplayName(), targetType.getName(), v.getClass().getName()));\n    }"
            },
            {
              "step": 60,
              "variableName": "describer.transform(this)",
              "startLine": 163,
              "startColumn": 16,
              "endLine": 163,
              "endColumn": 41,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/repositories/DefaultMavenArtifactRepository.java",
              "type": "String",
              "code": "\n    @Override\n    public String getDisplayName() {\n        return describer.transform(this);\n    }\n\n    @Override"
            },
            {
              "step": 61,
              "variableName": "workUnitDescription.getDisplayName()",
              "startLine": 146,
              "startColumn": 44,
              "endLine": 146,
              "endColumn": 80,
              "uri": "gradle-8.14.0/platforms/core-execution/execution/src/main/java/org/gradle/internal/execution/timeout/impl/DefaultTimeoutHandler.java",
              "type": "",
              "code": "                StringBuilder logMessageBuilder = new StringBuilder();\n                try (PrintWriter logMessageWriter = new PrintWriter(CharStreams.asWriter(logMessageBuilder))) {\n                    logMessageWriter.print(\"Current stacktrace of timed out but not yet stopped \");\n                    logMessageWriter.print(workUnitDescription.getDisplayName());\n                    logMessageWriter.println(\":\");\n                    for (StackTraceElement traceElement : currentStackTrace) {\n                        logMessageWriter.println(\"  at \" + traceElement);"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "src",
              "startLine": 115,
              "startColumn": 13,
              "endLine": 115,
              "endColumn": 16,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "Object",
              "code": "    }\n\n    private static void appendDisplayName(Object src, StringBuilder stringBuilder) {\n        if (src instanceof Describable) {\n            Describable describable = (Describable) src;\n            stringBuilder.append(describable.getDisplayName());\n        } else {"
            },
            {
              "step": 1,
              "variableName": "src",
              "startLine": 119,
              "startColumn": 34,
              "endLine": 119,
              "endColumn": 37,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "Object",
              "code": "            Describable describable = (Describable) src;\n            stringBuilder.append(describable.getDisplayName());\n        } else {\n            stringBuilder.append(src.toString());\n        }\n    }\n"
            },
            {
              "step": 2,
              "variableName": "toString",
              "startLine": 397,
              "startColumn": 19,
              "endLine": 397,
              "endColumn": 27,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "TestFile",
              "code": "    }\n\n    @Override\n    public String toString() {\n        return getPath();\n    }\n"
            },
            {
              "step": 3,
              "variableName": "getPath()",
              "startLine": 398,
              "startColumn": 16,
              "endLine": 398,
              "endColumn": 25,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "TestFile",
              "code": "\n    @Override\n    public String toString() {\n        return getPath();\n    }\n\n    public TestFile writelns(Iterable<String> lines) {"
            },
            {
              "step": 4,
              "variableName": "getPath()",
              "startLine": 398,
              "startColumn": 16,
              "endLine": 398,
              "endColumn": 25,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "String",
              "code": "\n    @Override\n    public String toString() {\n        return getPath();\n    }\n\n    public TestFile writelns(Iterable<String> lines) {"
            },
            {
              "step": 5,
              "variableName": "src.toString()",
              "startLine": 119,
              "startColumn": 34,
              "endLine": 119,
              "endColumn": 48,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "String",
              "code": "            Describable describable = (Describable) src;\n            stringBuilder.append(describable.getDisplayName());\n        } else {\n            stringBuilder.append(src.toString());\n        }\n    }\n"
            },
            {
              "step": 6,
              "variableName": "stringBuilder",
              "startLine": 119,
              "startColumn": 13,
              "endLine": 119,
              "endColumn": 26,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "StringBuilder",
              "code": "            Describable describable = (Describable) src;\n            stringBuilder.append(describable.getDisplayName());\n        } else {\n            stringBuilder.append(src.toString());\n        }\n    }\n"
            },
            {
              "step": 7,
              "variableName": "builder",
              "startLine": 202,
              "startColumn": 38,
              "endLine": 202,
              "endColumn": 45,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "StringBuilder",
              "code": "            StringBuilder builder = new StringBuilder(48);\n            appendDisplayName(part1, builder);\n            builder.append(' ');\n            appendDisplayName(part2, builder);\n            return builder.toString();\n        }\n"
            },
            {
              "step": 8,
              "variableName": "builder",
              "startLine": 203,
              "startColumn": 20,
              "endLine": 203,
              "endColumn": 27,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "StringBuilder",
              "code": "            appendDisplayName(part1, builder);\n            builder.append(' ');\n            appendDisplayName(part2, builder);\n            return builder.toString();\n        }\n\n        @Override"
            },
            {
              "step": 9,
              "variableName": "builder.toString()",
              "startLine": 203,
              "startColumn": 20,
              "endLine": 203,
              "endColumn": 38,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "String",
              "code": "            appendDisplayName(part1, builder);\n            builder.append(' ');\n            appendDisplayName(part2, builder);\n            return builder.toString();\n        }\n\n        @Override"
            },
            {
              "step": 10,
              "variableName": "describable.getDisplayName()",
              "startLine": 313,
              "startColumn": 35,
              "endLine": 313,
              "endColumn": 63,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "String",
              "code": "        public String getDisplayName() {\n            synchronized (this) {\n                if (displayName == null) {\n                    displayName = describable.getDisplayName();\n                    if (capDisplayName != null || !(describable instanceof DisplayName)) {\n                        describable = null;\n                    }"
            },
            {
              "step": 11,
              "variableName": "displayName",
              "startLine": 318,
              "startColumn": 24,
              "endLine": 318,
              "endColumn": 35,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "String",
              "code": "                        describable = null;\n                    }\n                }\n                return displayName;\n            }\n        }\n    }"
            },
            {
              "step": 12,
              "variableName": "displayName.getDisplayName()",
              "startLine": 772,
              "startColumn": 73,
              "endLine": 772,
              "endColumn": 101,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/configurations/DefaultConfiguration.java",
              "type": "String",
              "code": "                try {\n                    results = resolver.resolveGraph(DefaultConfiguration.this);\n                } catch (Exception e) {\n                    throw exceptionMapper.mapFailure(e, \"dependencies\", displayName.getDisplayName());\n                }\n\n                // Make the new state visible in case a dependency resolution listener queries the result, which requires the new state"
            },
            {
              "step": 13,
              "variableName": "String contextDisplayName",
              "startLine": 68,
              "startColumn": 77,
              "endLine": 68,
              "endColumn": 102,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "String",
              "code": "        return mapFailure(failure, type, displayName);\n    }\n\n    public TypedResolveException mapFailure(Throwable failure, String type, String contextDisplayName) {\n        if (!(failure instanceof TypedResolveException)) {\n            return new TypedResolveException(\n                type,"
            },
            {
              "step": 14,
              "variableName": "contextDisplayName",
              "startLine": 72,
              "startColumn": 17,
              "endLine": 72,
              "endColumn": 35,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "String",
              "code": "        if (!(failure instanceof TypedResolveException)) {\n            return new TypedResolveException(\n                type,\n                contextDisplayName,\n                ImmutableList.of(mapRepositoryOverrideFailure(contextDisplayName, failure))\n            );\n        }"
            },
            {
              "step": 15,
              "variableName": "new TypedResolveException(...) : TypedResolveException",
              "startLine": 70,
              "startColumn": 20,
              "endLine": 74,
              "endColumn": 14,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "TypedResolveException",
              "code": "\n    public TypedResolveException mapFailure(Throwable failure, String type, String contextDisplayName) {\n        if (!(failure instanceof TypedResolveException)) {\n            return new TypedResolveException(\n                type,\n                contextDisplayName,\n                ImmutableList.of(mapRepositoryOverrideFailure(contextDisplayName, failure))"
            },
            {
              "step": 16,
              "variableName": "exceptionMapper.mapFailure(e, \"dependencies\", displayName.getDisplayName())",
              "startLine": 772,
              "startColumn": 27,
              "endLine": 772,
              "endColumn": 102,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/configurations/DefaultConfiguration.java",
              "type": "TypedResolveException",
              "code": "                try {\n                    results = resolver.resolveGraph(DefaultConfiguration.this);\n                } catch (Exception e) {\n                    throw exceptionMapper.mapFailure(e, \"dependencies\", displayName.getDisplayName());\n                }\n\n                // Make the new state visible in case a dependency resolution listener queries the result, which requires the new state"
            },
            {
              "step": 17,
              "variableName": "e",
              "startLine": 772,
              "startColumn": 54,
              "endLine": 772,
              "endColumn": 55,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/configurations/DefaultConfiguration.java",
              "type": "Exception",
              "code": "                try {\n                    results = resolver.resolveGraph(DefaultConfiguration.this);\n                } catch (Exception e) {\n                    throw exceptionMapper.mapFailure(e, \"dependencies\", displayName.getDisplayName());\n                }\n\n                // Make the new state visible in case a dependency resolution listener queries the result, which requires the new state"
            },
            {
              "step": 18,
              "variableName": "Throwable failure",
              "startLine": 68,
              "startColumn": 45,
              "endLine": 68,
              "endColumn": 62,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Throwable",
              "code": "        return mapFailure(failure, type, displayName);\n    }\n\n    public TypedResolveException mapFailure(Throwable failure, String type, String contextDisplayName) {\n        if (!(failure instanceof TypedResolveException)) {\n            return new TypedResolveException(\n                type,"
            },
            {
              "step": 19,
              "variableName": "failure",
              "startLine": 73,
              "startColumn": 83,
              "endLine": 73,
              "endColumn": 90,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Throwable",
              "code": "            return new TypedResolveException(\n                type,\n                contextDisplayName,\n                ImmutableList.of(mapRepositoryOverrideFailure(contextDisplayName, failure))\n            );\n        }\n"
            },
            {
              "step": 20,
              "variableName": "Throwable failure",
              "startLine": 94,
              "startColumn": 78,
              "endLine": 94,
              "endColumn": 95,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Throwable",
              "code": "\n    // TODO: We should handle this exception at the source instead of using instanceof to detect it after it is thrown.\n    //       We should try to avoid catching and analyzing runtime exceptions\n    public Throwable mapRepositoryOverrideFailure(String contextDisplayName, Throwable failure) {\n        if (!(failure instanceof ModuleVersionNotFoundException) || !settingsRepositoriesIgnored()) {\n            return failure;\n        }"
            },
            {
              "step": 21,
              "variableName": "failure",
              "startLine": 108,
              "startColumn": 35,
              "endLine": 108,
              "endColumn": 42,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Throwable",
              "code": "        return new TypedResolveException(\n            \"dependencies\",\n            contextDisplayName,\n            Collections.singleton(failure),\n            resolutions\n        );\n    }"
            },
            {
              "step": 22,
              "variableName": "Collections.singleton(failure)",
              "startLine": 108,
              "startColumn": 13,
              "endLine": 108,
              "endColumn": 43,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Set [<element>] : Throwable",
              "code": "        return new TypedResolveException(\n            \"dependencies\",\n            contextDisplayName,\n            Collections.singleton(failure),\n            resolutions\n        );\n    }"
            },
            {
              "step": 23,
              "variableName": "Collections.singleton(failure)",
              "startLine": 108,
              "startColumn": 13,
              "endLine": 108,
              "endColumn": 43,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Set",
              "code": "        return new TypedResolveException(\n            \"dependencies\",\n            contextDisplayName,\n            Collections.singleton(failure),\n            resolutions\n        );\n    }"
            },
            {
              "step": 24,
              "variableName": "Iterable<? extends Throwable> failures",
              "startLine": 42,
              "startColumn": 67,
              "endLine": 42,
              "endColumn": 105,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ivyservice/TypedResolveException.java",
              "type": "Set",
              "code": "    /**\n     * Creates a new instance with resolutions.\n     */\n    public TypedResolveException(String type, String displayName, Iterable<? extends Throwable> failures, List<String> resolutions) {\n        super(buildMessage(type, displayName), failures, false);\n        this.type = type;\n        this.resolutions = ImmutableList.copyOf(resolutions);"
            },
            {
              "step": 25,
              "variableName": "failures",
              "startLine": 43,
              "startColumn": 48,
              "endLine": 43,
              "endColumn": 56,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ivyservice/TypedResolveException.java",
              "type": "Set",
              "code": "     * Creates a new instance with resolutions.\n     */\n    public TypedResolveException(String type, String displayName, Iterable<? extends Throwable> failures, List<String> resolutions) {\n        super(buildMessage(type, displayName), failures, false);\n        this.type = type;\n        this.resolutions = ImmutableList.copyOf(resolutions);\n    }"
            },
            {
              "step": 26,
              "variableName": "Iterable<? extends Throwable> causes",
              "startLine": 77,
              "startColumn": 48,
              "endLine": 77,
              "endColumn": 84,
              "uri": "gradle-8.14.0/subprojects/core-api/src/main/java/org/gradle/api/artifacts/ResolveException.java",
              "type": "Set",
              "code": "     * @since 8.9\n     */\n    @Incubating\n    protected ResolveException(String message, Iterable<? extends Throwable> causes, @SuppressWarnings(\"unused\") boolean dummy) {\n        super(message, causes);\n    }\n}"
            },
            {
              "step": 27,
              "variableName": "causes",
              "startLine": 78,
              "startColumn": 24,
              "endLine": 78,
              "endColumn": 30,
              "uri": "gradle-8.14.0/subprojects/core-api/src/main/java/org/gradle/api/artifacts/ResolveException.java",
              "type": "Set",
              "code": "     */\n    @Incubating\n    protected ResolveException(String message, Iterable<? extends Throwable> causes, @SuppressWarnings(\"unused\") boolean dummy) {\n        super(message, causes);\n    }\n}\n"
            },
            {
              "step": 28,
              "variableName": "Iterable<? extends Throwable> causes",
              "startLine": 47,
              "startColumn": 55,
              "endLine": 47,
              "endColumn": 91,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "Set",
              "code": "        this.causes.addAll(Arrays.asList(causes));\n    }\n\n    public DefaultMultiCauseException(String message, Iterable<? extends Throwable> causes) {\n        super(message);\n        this.message = message;\n        initCauses(causes);"
            },
            {
              "step": 29,
              "variableName": "causes",
              "startLine": 50,
              "startColumn": 20,
              "endLine": 50,
              "endColumn": 26,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "Set",
              "code": "    public DefaultMultiCauseException(String message, Iterable<? extends Throwable> causes) {\n        super(message);\n        this.message = message;\n        initCauses(causes);\n    }\n\n    public DefaultMultiCauseException(Factory<String> messageFactory) {"
            },
            {
              "step": 30,
              "variableName": "Iterable<? extends Throwable> causes",
              "startLine": 112,
              "startColumn": 28,
              "endLine": 112,
              "endColumn": 64,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "Iterable",
              "code": "        return null;\n    }\n\n    public void initCauses(Iterable<? extends Throwable> causes) {\n        this.causes.clear();\n        for (Throwable cause : causes) {\n            this.causes.add(cause);"
            },
            {
              "step": 31,
              "variableName": "cause",
              "startLine": 115,
              "startColumn": 29,
              "endLine": 115,
              "endColumn": 34,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "Throwable",
              "code": "    public void initCauses(Iterable<? extends Throwable> causes) {\n        this.causes.clear();\n        for (Throwable cause : causes) {\n            this.causes.add(cause);\n        }\n    }\n"
            },
            {
              "step": 32,
              "variableName": "this.causes",
              "startLine": 115,
              "startColumn": 13,
              "endLine": 115,
              "endColumn": 24,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "CopyOnWriteArrayList [<element>] : Throwable",
              "code": "    public void initCauses(Iterable<? extends Throwable> causes) {\n        this.causes.clear();\n        for (Throwable cause : causes) {\n            this.causes.add(cause);\n        }\n    }\n"
            },
            {
              "step": 33,
              "variableName": "this",
              "startLine": 115,
              "startColumn": 13,
              "endLine": 115,
              "endColumn": 17,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "DefaultMultiCauseException [causes, <element>] : Throwable",
              "code": "    public void initCauses(Iterable<? extends Throwable> causes) {\n        this.causes.clear();\n        for (Throwable cause : causes) {\n            this.causes.add(cause);\n        }\n    }\n"
            },
            {
              "step": 34,
              "variableName": "projectConfigurationException",
              "startLine": 57,
              "startColumn": 17,
              "endLine": 57,
              "endColumn": 46,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/DefaultExceptionAnalyser.java",
              "type": "ProjectConfigurationException [causes, <element>] : Throwable",
              "code": "                }\n            }\n            if (!additionalFailures.isEmpty()) {\n                projectConfigurationException.initCauses(additionalFailures);\n                failures.add(transform(projectConfigurationException));\n            }\n        } else if (exception instanceof ServiceCreationException) {"
            },
            {
              "step": 35,
              "variableName": "projectConfigurationException",
              "startLine": 58,
              "startColumn": 40,
              "endLine": 58,
              "endColumn": 69,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/DefaultExceptionAnalyser.java",
              "type": "ProjectConfigurationException [causes, <element>] : Throwable",
              "code": "            }\n            if (!additionalFailures.isEmpty()) {\n                projectConfigurationException.initCauses(additionalFailures);\n                failures.add(transform(projectConfigurationException));\n            }\n        } else if (exception instanceof ServiceCreationException) {\n            failures.add(transform(new InitializationException(exception)));"
            },
            {
              "step": 36,
              "variableName": "transform(projectConfigurationException)",
              "startLine": 58,
              "startColumn": 30,
              "endLine": 58,
              "endColumn": 70,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/DefaultExceptionAnalyser.java",
              "type": "LocationAwareException",
              "code": "            }\n            if (!additionalFailures.isEmpty()) {\n                projectConfigurationException.initCauses(additionalFailures);\n                failures.add(transform(projectConfigurationException));\n            }\n        } else if (exception instanceof ServiceCreationException) {\n            failures.add(transform(new InitializationException(exception)));"
            },
            {
              "step": 37,
              "variableName": "failures",
              "startLine": 58,
              "startColumn": 17,
              "endLine": 58,
              "endColumn": 25,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/DefaultExceptionAnalyser.java",
              "type": "Collection [<element>] : LocationAwareException",
              "code": "            }\n            if (!additionalFailures.isEmpty()) {\n                projectConfigurationException.initCauses(additionalFailures);\n                failures.add(transform(projectConfigurationException));\n            }\n        } else if (exception instanceof ServiceCreationException) {\n            failures.add(transform(new InitializationException(exception)));"
            },
            {
              "step": 38,
              "variableName": "result",
              "startLine": 53,
              "startColumn": 54,
              "endLine": 53,
              "endColumn": 60,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/MultipleBuildFailuresExceptionAnalyser.java",
              "type": "ArrayList [<element>] : LocationAwareException",
              "code": "        for (Throwable failure : failures) {\n            if (failure instanceof MultipleBuildFailures) {\n                for (Throwable cause : ((MultipleBuildFailures) failure).getCauses()) {\n                    collector.collectFailures(cause, result);\n                }\n            } else {\n                collector.collectFailures(failure, result);"
            },
            {
              "step": 39,
              "variableName": "result",
              "startLine": 60,
              "startColumn": 39,
              "endLine": 60,
              "endColumn": 45,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/MultipleBuildFailuresExceptionAnalyser.java",
              "type": "ArrayList [<element>] : LocationAwareException",
              "code": "            }\n        }\n        if (result.size() == 1 && result.get(0) instanceof RuntimeException) {\n            return (RuntimeException) result.get(0);\n        } else {\n            return new MultipleBuildFailures(result);\n        }"
            },
            {
              "step": 40,
              "variableName": "result.get(0)",
              "startLine": 60,
              "startColumn": 39,
              "endLine": 60,
              "endColumn": 52,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/MultipleBuildFailuresExceptionAnalyser.java",
              "type": "LocationAwareException",
              "code": "            }\n        }\n        if (result.size() == 1 && result.get(0) instanceof RuntimeException) {\n            return (RuntimeException) result.get(0);\n        } else {\n            return new MultipleBuildFailures(result);\n        }"
            },
            {
              "step": 41,
              "variableName": "(RuntimeException) result.get(0)",
              "startLine": 60,
              "startColumn": 20,
              "endLine": 60,
              "endColumn": 52,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/MultipleBuildFailuresExceptionAnalyser.java",
              "type": "LocationAwareException",
              "code": "            }\n        }\n        if (result.size() == 1 && result.get(0) instanceof RuntimeException) {\n            return (RuntimeException) result.get(0);\n        } else {\n            return new MultipleBuildFailures(result);\n        }"
            },
            {
              "step": 42,
              "variableName": "exceptionAnalyser.transform(finishFailures)",
              "startLine": 72,
              "startColumn": 16,
              "endLine": 72,
              "endColumn": 59,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/internal/buildtree/DefaultBuildTreeFinishExecutor.java",
              "type": "LocationAwareException",
              "code": "            finishFailures.addAll(result.getFailures());\n        });\n\n        return exceptionAnalyser.transform(finishFailures);\n    }\n}\n"
            },
            {
              "step": 43,
              "variableName": "delegate.finishBuildTree(failures)",
              "startLine": 46,
              "startColumn": 28,
              "endLine": 46,
              "endColumn": 62,
              "uri": "gradle-8.14.0/subprojects/composite-builds/src/main/java/org/gradle/composite/internal/OperationFiringBuildTreeFinishExecutor.java",
              "type": "LocationAwareException",
              "code": "            @Override\n            public RuntimeException call(BuildOperationContext context) {\n                try {\n                    return delegate.finishBuildTree(failures);\n                } finally {\n                    context.setResult(RESULT);\n                }"
            },
            {
              "step": 44,
              "variableName": "buildOperation.call(context)",
              "startLine": 239,
              "startColumn": 21,
              "endLine": 239,
              "endColumn": 49,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/testFixtures/java/org/gradle/internal/operations/TestBuildOperationRunner.java",
              "type": "LocationAwareException",
              "code": "            TestBuildOperationContext context = new TestBuildOperationContext(record);\n            T t;\n            try {\n                t = buildOperation.call(context);\n            } catch (Throwable failure) {\n                if (record.failure == null) {\n                    record.failure = failure;"
            },
            {
              "step": 45,
              "variableName": "t",
              "startLine": 246,
              "startColumn": 20,
              "endLine": 246,
              "endColumn": 21,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/testFixtures/java/org/gradle/internal/operations/TestBuildOperationRunner.java",
              "type": "LocationAwareException",
              "code": "                }\n                throw throwAsUncheckedException(failure);\n            }\n            return t;\n        }\n\n        private <O extends BuildOperation> void execute(O buildOperation, BuildOperationWorker<O> worker) {"
            },
            {
              "step": 46,
              "variableName": "log.call(buildOperation)",
              "startLine": 51,
              "startColumn": 16,
              "endLine": 51,
              "endColumn": 40,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/testFixtures/java/org/gradle/internal/operations/TestBuildOperationRunner.java",
              "type": "LocationAwareException",
              "code": "\n    @Override\n    public <T> T call(CallableBuildOperation<T> buildOperation) {\n        return log.call(buildOperation);\n    }\n\n    @Override"
            },
            {
              "step": 47,
              "variableName": "ca",
              "startLine": 115,
              "startColumn": 5,
              "endLine": 121,
              "endColumn": 7,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/configurationcache/ConfigurationCacheBuildOperations.kt",
              "type": "LocationAwareException",
              "code": "\ninternal\nfun <T : Any> BuildOperationRunner.withModelLoadOperation(block: () -> T): T =\n    call(object : CallableBuildOperation<T> {\n        override fun description(): BuildOperationDescriptor.Builder = BuildOperationDescriptor\n            .displayName(\"Load model from configuration cache\")\n            .progressDisplayName(\"Loading model from configuration cache\")"
            },
            {
              "step": 48,
              "variableName": "ca",
              "startLine": 115,
              "startColumn": 5,
              "endLine": 121,
              "endColumn": 7,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/configurationcache/ConfigurationCacheBuildOperations.kt",
              "type": "LocationAwareException",
              "code": "\ninternal\nfun <T : Any> BuildOperationRunner.withModelLoadOperation(block: () -> T): T =\n    call(object : CallableBuildOperation<T> {\n        override fun description(): BuildOperationDescriptor.Builder = BuildOperationDescriptor\n            .displayName(\"Load model from configuration cache\")\n            .progressDisplayName(\"Loading model from configuration cache\")"
            },
            {
              "step": 49,
              "variableName": "b",
              "startLine": 635,
              "startColumn": 9,
              "endLine": 641,
              "endColumn": 10,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "        // No need to record the `ClassLoaderScope` tree when loading\n        scopeRegistryListener.dispose()\n\n        buildOperationRunner.withModelLoadOperation {\n            val storeLoadResult = entryStore.useForStateLoad(StateType.Model) { stateFile: ConfigurationCacheStateFile ->\n                cacheIO.readModelFrom(stateFile)\n            }"
            },
            {
              "step": 50,
              "variableName": "block()",
              "startLine": 668,
              "startColumn": 22,
              "endLine": 668,
              "endColumn": 29,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "    private\n    inline fun <T> runAtConfigurationTime(block: () -> T): T {\n        prepareConfigurationTimeBarrier()\n        val result = block()\n        crossConfigurationTimeBarrier()\n        return result\n    }"
            },
            {
              "step": 51,
              "variableName": "result",
              "startLine": 670,
              "startColumn": 16,
              "endLine": 670,
              "endColumn": 22,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "        prepareConfigurationTimeBarrier()\n        val result = block()\n        crossConfigurationTimeBarrier()\n        return result\n    }\n\n    private"
            },
            {
              "step": 52,
              "variableName": "runAtConfigurationTime(...) : LocationAwareException",
              "startLine": 631,
              "startColumn": 28,
              "endLine": 642,
              "endColumn": 6,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "    data class LoadResultMetadata(val originInvocationId: String? = null)\n\n    private\n    fun loadModel(): Any = runAtConfigurationTime {\n        // No need to record the `ClassLoaderScope` tree when loading\n        scopeRegistryListener.dispose()\n"
            },
            {
              "step": 53,
              "variableName": "loadModel()",
              "startLine": 268,
              "startColumn": 20,
              "endLine": 268,
              "endColumn": 31,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "    override fun <T : Any> loadOrCreateModel(creator: () -> T): T {\n        if (isLoaded) {\n            runLoadedSideEffects()\n            return loadModel().uncheckedCast()\n        }\n\n        return runWorkThatContributesToCacheEntry {"
            },
            {
              "step": 54,
              "variableName": "Any",
              "startLine": 22,
              "startColumn": 15,
              "endLine": 22,
              "endColumn": 18,
              "uri": "gradle-8.14.0/platforms/core-configuration/stdlib-kotlin-extensions/src/main/kotlin/org/gradle/internal/extensions/stdlib/CastExtensions.kt",
              "type": "Object",
              "code": "import org.gradle.internal.Cast\n\n\nfun <T : Any> Any.uncheckedCast(): T =\n    Cast.uncheckedNonnullCast(this)\n"
            },
            {
              "step": 55,
              "variableName": "this",
              "startLine": 23,
              "startColumn": 31,
              "endLine": 23,
              "endColumn": 35,
              "uri": "gradle-8.14.0/platforms/core-configuration/stdlib-kotlin-extensions/src/main/kotlin/org/gradle/internal/extensions/stdlib/CastExtensions.kt",
              "type": "Object",
              "code": "\n\nfun <T : Any> Any.uncheckedCast(): T =\n    Cast.uncheckedNonnullCast(this)\n"
            },
            {
              "step": 56,
              "variableName": "Object object",
              "startLine": 76,
              "startColumn": 46,
              "endLine": 76,
              "endColumn": 59,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/Cast.java",
              "type": "Object",
              "code": "    }\n\n    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})\n    public static <T> T uncheckedNonnullCast(Object object) {\n        return (T) object;\n    }\n}"
            },
            {
              "step": 57,
              "variableName": "(T) object",
              "startLine": 77,
              "startColumn": 16,
              "endLine": 77,
              "endColumn": 26,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/Cast.java",
              "type": "Object",
              "code": "\n    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})\n    public static <T> T uncheckedNonnullCast(Object object) {\n        return (T) object;\n    }\n}\n"
            },
            {
              "step": 58,
              "variableName": "Cast.uncheckedNonnullCast(collectionType)",
              "startLine": 223,
              "startColumn": 16,
              "endLine": 223,
              "endColumn": 57,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/api/internal/provider/AbstractCollectionProperty.java",
              "type": "Class",
              "code": "    @Override\n    @Nonnull\n    public Class<C> getType() {\n        return Cast.uncheckedNonnullCast(collectionType);\n    }\n\n    @Override"
            },
            {
              "step": 59,
              "variableName": "provider.getType()",
              "startLine": 41,
              "startColumn": 35,
              "endLine": 41,
              "endColumn": 53,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/api/internal/provider/OrElseFixedValueProvider.java",
              "type": "Class",
              "code": "    @Nullable\n    @Override\n    public Class<T> getType() {\n        return Cast.uncheckedCast(provider.getType());\n    }\n\n    @Override"
            },
            {
              "step": 60,
              "variableName": "@Nullable Object object",
              "startLine": 71,
              "startColumn": 39,
              "endLine": 71,
              "endColumn": 62,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/Cast.java",
              "type": "Object",
              "code": "\n    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})\n    @Nullable\n    public static <T> T uncheckedCast(@Nullable Object object) {\n        return (T) object;\n    }\n"
            },
            {
              "step": 61,
              "variableName": "(T) object",
              "startLine": 72,
              "startColumn": 16,
              "endLine": 72,
              "endColumn": 26,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/Cast.java",
              "type": "Object",
              "code": "    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})\n    @Nullable\n    public static <T> T uncheckedCast(@Nullable Object object) {\n        return (T) object;\n    }\n\n    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})"
            },
            {
              "step": 62,
              "variableName": "Cast.uncheckedCast(sanitizer.sanitize(t))",
              "startLine": 41,
              "startColumn": 15,
              "endLine": 41,
              "endColumn": 56,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/api/internal/provider/TypeSanitizingTransformer.java",
              "type": "Object",
              "code": "\n    @Override\n    public T transform(T t) {\n        T v = Cast.uncheckedCast(sanitizer.sanitize(t));\n        if (targetType.isInstance(v)) {\n            return v;\n        }"
            },
            {
              "step": 63,
              "variableName": "v",
              "startLine": 43,
              "startColumn": 20,
              "endLine": 43,
              "endColumn": 21,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/api/internal/provider/TypeSanitizingTransformer.java",
              "type": "Object",
              "code": "    public T transform(T t) {\n        T v = Cast.uncheckedCast(sanitizer.sanitize(t));\n        if (targetType.isInstance(v)) {\n            return v;\n        }\n        throw new IllegalArgumentException(String.format(\"Cannot get the value of %s of type %s as the provider associated with this property returned a value of type %s.\", owner.getDisplayName(), targetType.getName(), v.getClass().getName()));\n    }"
            },
            {
              "step": 64,
              "variableName": "describer.transform(this)",
              "startLine": 163,
              "startColumn": 16,
              "endLine": 163,
              "endColumn": 41,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/repositories/DefaultMavenArtifactRepository.java",
              "type": "String",
              "code": "\n    @Override\n    public String getDisplayName() {\n        return describer.transform(this);\n    }\n\n    @Override"
            },
            {
              "step": 65,
              "variableName": "workUnitDescription.getDisplayName()",
              "startLine": 146,
              "startColumn": 44,
              "endLine": 146,
              "endColumn": 80,
              "uri": "gradle-8.14.0/platforms/core-execution/execution/src/main/java/org/gradle/internal/execution/timeout/impl/DefaultTimeoutHandler.java",
              "type": "",
              "code": "                StringBuilder logMessageBuilder = new StringBuilder();\n                try (PrintWriter logMessageWriter = new PrintWriter(CharStreams.asWriter(logMessageBuilder))) {\n                    logMessageWriter.print(\"Current stacktrace of timed out but not yet stopped \");\n                    logMessageWriter.print(workUnitDescription.getDisplayName());\n                    logMessageWriter.println(\":\");\n                    for (StackTraceElement traceElement : currentStackTrace) {\n                        logMessageWriter.println(\"  at \" + traceElement);"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 4,
      "fileName": "DefaultCommandLineActionFactory.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "source",
              "startLine": 44,
              "startColumn": 25,
              "endLine": 44,
              "endColumn": 31,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/RegExpNameMapper.java",
              "type": "String",
              "code": "        } else {\n            matcher.reset(source);\n        }\n        String result = source;\n        if (matcher.find()) {\n            result = matcher.replaceFirst(replacement);\n        }"
            },
            {
              "step": 1,
              "variableName": "result",
              "startLine": 48,
              "startColumn": 16,
              "endLine": 48,
              "endColumn": 22,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/RegExpNameMapper.java",
              "type": "String",
              "code": "        if (matcher.find()) {\n            result = matcher.replaceFirst(replacement);\n        }\n        return result;\n    }\n}\n"
            },
            {
              "step": 2,
              "variableName": "transformer.transform(value)",
              "startLine": 37,
              "startColumn": 31,
              "endLine": 37,
              "endColumn": 59,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/ChainingTransformer.java",
              "type": "String",
              "code": "    public T transform(T original) {\n        T value = original;\n        for (Transformer<T, T> transformer : transformers) {\n            value = type.cast(transformer.transform(value));\n        }\n        return value;\n    }"
            },
            {
              "step": 3,
              "variableName": "type.cast(transformer.transform(value))",
              "startLine": 37,
              "startColumn": 21,
              "endLine": 37,
              "endColumn": 60,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/ChainingTransformer.java",
              "type": "String",
              "code": "    public T transform(T original) {\n        T value = original;\n        for (Transformer<T, T> transformer : transformers) {\n            value = type.cast(transformer.transform(value));\n        }\n        return value;\n    }"
            },
            {
              "step": 4,
              "variableName": "value",
              "startLine": 39,
              "startColumn": 16,
              "endLine": 39,
              "endColumn": 21,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/ChainingTransformer.java",
              "type": "String",
              "code": "        for (Transformer<T, T> transformer : transformers) {\n            value = type.cast(transformer.transform(value));\n        }\n        return value;\n    }\n\n    public void add(Transformer<T, T> transformer) {"
            },
            {
              "step": 5,
              "variableName": "describer.transform(this)",
              "startLine": 163,
              "startColumn": 16,
              "endLine": 163,
              "endColumn": 41,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/repositories/DefaultMavenArtifactRepository.java",
              "type": "String",
              "code": "\n    @Override\n    public String getDisplayName() {\n        return describer.transform(this);\n    }\n\n    @Override"
            },
            {
              "step": 6,
              "variableName": "describable.getDisplayName()",
              "startLine": 313,
              "startColumn": 35,
              "endLine": 313,
              "endColumn": 63,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "String",
              "code": "        public String getDisplayName() {\n            synchronized (this) {\n                if (displayName == null) {\n                    displayName = describable.getDisplayName();\n                    if (capDisplayName != null || !(describable instanceof DisplayName)) {\n                        describable = null;\n                    }"
            },
            {
              "step": 7,
              "variableName": "displayName",
              "startLine": 318,
              "startColumn": 24,
              "endLine": 318,
              "endColumn": 35,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "String",
              "code": "                        describable = null;\n                    }\n                }\n                return displayName;\n            }\n        }\n    }"
            },
            {
              "step": 8,
              "variableName": "displayName.getDisplayName()",
              "startLine": 772,
              "startColumn": 73,
              "endLine": 772,
              "endColumn": 101,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/configurations/DefaultConfiguration.java",
              "type": "String",
              "code": "                try {\n                    results = resolver.resolveGraph(DefaultConfiguration.this);\n                } catch (Exception e) {\n                    throw exceptionMapper.mapFailure(e, \"dependencies\", displayName.getDisplayName());\n                }\n\n                // Make the new state visible in case a dependency resolution listener queries the result, which requires the new state"
            },
            {
              "step": 9,
              "variableName": "String contextDisplayName",
              "startLine": 68,
              "startColumn": 77,
              "endLine": 68,
              "endColumn": 102,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "String",
              "code": "        return mapFailure(failure, type, displayName);\n    }\n\n    public TypedResolveException mapFailure(Throwable failure, String type, String contextDisplayName) {\n        if (!(failure instanceof TypedResolveException)) {\n            return new TypedResolveException(\n                type,"
            },
            {
              "step": 10,
              "variableName": "contextDisplayName",
              "startLine": 72,
              "startColumn": 17,
              "endLine": 72,
              "endColumn": 35,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "String",
              "code": "        if (!(failure instanceof TypedResolveException)) {\n            return new TypedResolveException(\n                type,\n                contextDisplayName,\n                ImmutableList.of(mapRepositoryOverrideFailure(contextDisplayName, failure))\n            );\n        }"
            },
            {
              "step": 11,
              "variableName": "new TypedResolveException(...) : TypedResolveException",
              "startLine": 70,
              "startColumn": 20,
              "endLine": 74,
              "endColumn": 14,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "TypedResolveException",
              "code": "\n    public TypedResolveException mapFailure(Throwable failure, String type, String contextDisplayName) {\n        if (!(failure instanceof TypedResolveException)) {\n            return new TypedResolveException(\n                type,\n                contextDisplayName,\n                ImmutableList.of(mapRepositoryOverrideFailure(contextDisplayName, failure))"
            },
            {
              "step": 12,
              "variableName": "exceptionMapper.mapFailure(e, \"dependencies\", displayName.getDisplayName())",
              "startLine": 772,
              "startColumn": 27,
              "endLine": 772,
              "endColumn": 102,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/configurations/DefaultConfiguration.java",
              "type": "TypedResolveException",
              "code": "                try {\n                    results = resolver.resolveGraph(DefaultConfiguration.this);\n                } catch (Exception e) {\n                    throw exceptionMapper.mapFailure(e, \"dependencies\", displayName.getDisplayName());\n                }\n\n                // Make the new state visible in case a dependency resolution listener queries the result, which requires the new state"
            },
            {
              "step": 13,
              "variableName": "e",
              "startLine": 772,
              "startColumn": 54,
              "endLine": 772,
              "endColumn": 55,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/configurations/DefaultConfiguration.java",
              "type": "Exception",
              "code": "                try {\n                    results = resolver.resolveGraph(DefaultConfiguration.this);\n                } catch (Exception e) {\n                    throw exceptionMapper.mapFailure(e, \"dependencies\", displayName.getDisplayName());\n                }\n\n                // Make the new state visible in case a dependency resolution listener queries the result, which requires the new state"
            },
            {
              "step": 14,
              "variableName": "Throwable failure",
              "startLine": 68,
              "startColumn": 45,
              "endLine": 68,
              "endColumn": 62,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Throwable",
              "code": "        return mapFailure(failure, type, displayName);\n    }\n\n    public TypedResolveException mapFailure(Throwable failure, String type, String contextDisplayName) {\n        if (!(failure instanceof TypedResolveException)) {\n            return new TypedResolveException(\n                type,"
            },
            {
              "step": 15,
              "variableName": "failure",
              "startLine": 73,
              "startColumn": 83,
              "endLine": 73,
              "endColumn": 90,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Throwable",
              "code": "            return new TypedResolveException(\n                type,\n                contextDisplayName,\n                ImmutableList.of(mapRepositoryOverrideFailure(contextDisplayName, failure))\n            );\n        }\n"
            },
            {
              "step": 16,
              "variableName": "Throwable failure",
              "startLine": 94,
              "startColumn": 78,
              "endLine": 94,
              "endColumn": 95,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Throwable",
              "code": "\n    // TODO: We should handle this exception at the source instead of using instanceof to detect it after it is thrown.\n    //       We should try to avoid catching and analyzing runtime exceptions\n    public Throwable mapRepositoryOverrideFailure(String contextDisplayName, Throwable failure) {\n        if (!(failure instanceof ModuleVersionNotFoundException) || !settingsRepositoriesIgnored()) {\n            return failure;\n        }"
            },
            {
              "step": 17,
              "variableName": "failure",
              "startLine": 108,
              "startColumn": 35,
              "endLine": 108,
              "endColumn": 42,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Throwable",
              "code": "        return new TypedResolveException(\n            \"dependencies\",\n            contextDisplayName,\n            Collections.singleton(failure),\n            resolutions\n        );\n    }"
            },
            {
              "step": 18,
              "variableName": "Collections.singleton(failure)",
              "startLine": 108,
              "startColumn": 13,
              "endLine": 108,
              "endColumn": 43,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Set [<element>] : Throwable",
              "code": "        return new TypedResolveException(\n            \"dependencies\",\n            contextDisplayName,\n            Collections.singleton(failure),\n            resolutions\n        );\n    }"
            },
            {
              "step": 19,
              "variableName": "Collections.singleton(failure)",
              "startLine": 108,
              "startColumn": 13,
              "endLine": 108,
              "endColumn": 43,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Set",
              "code": "        return new TypedResolveException(\n            \"dependencies\",\n            contextDisplayName,\n            Collections.singleton(failure),\n            resolutions\n        );\n    }"
            },
            {
              "step": 20,
              "variableName": "Iterable<? extends Throwable> failures",
              "startLine": 42,
              "startColumn": 67,
              "endLine": 42,
              "endColumn": 105,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ivyservice/TypedResolveException.java",
              "type": "Set",
              "code": "    /**\n     * Creates a new instance with resolutions.\n     */\n    public TypedResolveException(String type, String displayName, Iterable<? extends Throwable> failures, List<String> resolutions) {\n        super(buildMessage(type, displayName), failures, false);\n        this.type = type;\n        this.resolutions = ImmutableList.copyOf(resolutions);"
            },
            {
              "step": 21,
              "variableName": "failures",
              "startLine": 43,
              "startColumn": 48,
              "endLine": 43,
              "endColumn": 56,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ivyservice/TypedResolveException.java",
              "type": "Set",
              "code": "     * Creates a new instance with resolutions.\n     */\n    public TypedResolveException(String type, String displayName, Iterable<? extends Throwable> failures, List<String> resolutions) {\n        super(buildMessage(type, displayName), failures, false);\n        this.type = type;\n        this.resolutions = ImmutableList.copyOf(resolutions);\n    }"
            },
            {
              "step": 22,
              "variableName": "Iterable<? extends Throwable> causes",
              "startLine": 77,
              "startColumn": 48,
              "endLine": 77,
              "endColumn": 84,
              "uri": "gradle-8.14.0/subprojects/core-api/src/main/java/org/gradle/api/artifacts/ResolveException.java",
              "type": "Set",
              "code": "     * @since 8.9\n     */\n    @Incubating\n    protected ResolveException(String message, Iterable<? extends Throwable> causes, @SuppressWarnings(\"unused\") boolean dummy) {\n        super(message, causes);\n    }\n}"
            },
            {
              "step": 23,
              "variableName": "causes",
              "startLine": 78,
              "startColumn": 24,
              "endLine": 78,
              "endColumn": 30,
              "uri": "gradle-8.14.0/subprojects/core-api/src/main/java/org/gradle/api/artifacts/ResolveException.java",
              "type": "Set",
              "code": "     */\n    @Incubating\n    protected ResolveException(String message, Iterable<? extends Throwable> causes, @SuppressWarnings(\"unused\") boolean dummy) {\n        super(message, causes);\n    }\n}\n"
            },
            {
              "step": 24,
              "variableName": "Iterable<? extends Throwable> causes",
              "startLine": 47,
              "startColumn": 55,
              "endLine": 47,
              "endColumn": 91,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "Set",
              "code": "        this.causes.addAll(Arrays.asList(causes));\n    }\n\n    public DefaultMultiCauseException(String message, Iterable<? extends Throwable> causes) {\n        super(message);\n        this.message = message;\n        initCauses(causes);"
            },
            {
              "step": 25,
              "variableName": "causes",
              "startLine": 50,
              "startColumn": 20,
              "endLine": 50,
              "endColumn": 26,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "Set",
              "code": "    public DefaultMultiCauseException(String message, Iterable<? extends Throwable> causes) {\n        super(message);\n        this.message = message;\n        initCauses(causes);\n    }\n\n    public DefaultMultiCauseException(Factory<String> messageFactory) {"
            },
            {
              "step": 26,
              "variableName": "Iterable<? extends Throwable> causes",
              "startLine": 112,
              "startColumn": 28,
              "endLine": 112,
              "endColumn": 64,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "Iterable",
              "code": "        return null;\n    }\n\n    public void initCauses(Iterable<? extends Throwable> causes) {\n        this.causes.clear();\n        for (Throwable cause : causes) {\n            this.causes.add(cause);"
            },
            {
              "step": 27,
              "variableName": "cause",
              "startLine": 115,
              "startColumn": 29,
              "endLine": 115,
              "endColumn": 34,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "Throwable",
              "code": "    public void initCauses(Iterable<? extends Throwable> causes) {\n        this.causes.clear();\n        for (Throwable cause : causes) {\n            this.causes.add(cause);\n        }\n    }\n"
            },
            {
              "step": 28,
              "variableName": "this.causes",
              "startLine": 115,
              "startColumn": 13,
              "endLine": 115,
              "endColumn": 24,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "CopyOnWriteArrayList [<element>] : Throwable",
              "code": "    public void initCauses(Iterable<? extends Throwable> causes) {\n        this.causes.clear();\n        for (Throwable cause : causes) {\n            this.causes.add(cause);\n        }\n    }\n"
            },
            {
              "step": 29,
              "variableName": "this",
              "startLine": 115,
              "startColumn": 13,
              "endLine": 115,
              "endColumn": 17,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "DefaultMultiCauseException [causes, <element>] : Throwable",
              "code": "    public void initCauses(Iterable<? extends Throwable> causes) {\n        this.causes.clear();\n        for (Throwable cause : causes) {\n            this.causes.add(cause);\n        }\n    }\n"
            },
            {
              "step": 30,
              "variableName": "projectConfigurationException",
              "startLine": 57,
              "startColumn": 17,
              "endLine": 57,
              "endColumn": 46,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/DefaultExceptionAnalyser.java",
              "type": "ProjectConfigurationException [causes, <element>] : Throwable",
              "code": "                }\n            }\n            if (!additionalFailures.isEmpty()) {\n                projectConfigurationException.initCauses(additionalFailures);\n                failures.add(transform(projectConfigurationException));\n            }\n        } else if (exception instanceof ServiceCreationException) {"
            },
            {
              "step": 31,
              "variableName": "projectConfigurationException",
              "startLine": 58,
              "startColumn": 40,
              "endLine": 58,
              "endColumn": 69,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/DefaultExceptionAnalyser.java",
              "type": "ProjectConfigurationException [causes, <element>] : Throwable",
              "code": "            }\n            if (!additionalFailures.isEmpty()) {\n                projectConfigurationException.initCauses(additionalFailures);\n                failures.add(transform(projectConfigurationException));\n            }\n        } else if (exception instanceof ServiceCreationException) {\n            failures.add(transform(new InitializationException(exception)));"
            },
            {
              "step": 32,
              "variableName": "transform(projectConfigurationException)",
              "startLine": 58,
              "startColumn": 30,
              "endLine": 58,
              "endColumn": 70,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/DefaultExceptionAnalyser.java",
              "type": "LocationAwareException",
              "code": "            }\n            if (!additionalFailures.isEmpty()) {\n                projectConfigurationException.initCauses(additionalFailures);\n                failures.add(transform(projectConfigurationException));\n            }\n        } else if (exception instanceof ServiceCreationException) {\n            failures.add(transform(new InitializationException(exception)));"
            },
            {
              "step": 33,
              "variableName": "failures",
              "startLine": 58,
              "startColumn": 17,
              "endLine": 58,
              "endColumn": 25,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/DefaultExceptionAnalyser.java",
              "type": "Collection [<element>] : LocationAwareException",
              "code": "            }\n            if (!additionalFailures.isEmpty()) {\n                projectConfigurationException.initCauses(additionalFailures);\n                failures.add(transform(projectConfigurationException));\n            }\n        } else if (exception instanceof ServiceCreationException) {\n            failures.add(transform(new InitializationException(exception)));"
            },
            {
              "step": 34,
              "variableName": "result",
              "startLine": 53,
              "startColumn": 54,
              "endLine": 53,
              "endColumn": 60,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/MultipleBuildFailuresExceptionAnalyser.java",
              "type": "ArrayList [<element>] : LocationAwareException",
              "code": "        for (Throwable failure : failures) {\n            if (failure instanceof MultipleBuildFailures) {\n                for (Throwable cause : ((MultipleBuildFailures) failure).getCauses()) {\n                    collector.collectFailures(cause, result);\n                }\n            } else {\n                collector.collectFailures(failure, result);"
            },
            {
              "step": 35,
              "variableName": "result",
              "startLine": 60,
              "startColumn": 39,
              "endLine": 60,
              "endColumn": 45,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/MultipleBuildFailuresExceptionAnalyser.java",
              "type": "ArrayList [<element>] : LocationAwareException",
              "code": "            }\n        }\n        if (result.size() == 1 && result.get(0) instanceof RuntimeException) {\n            return (RuntimeException) result.get(0);\n        } else {\n            return new MultipleBuildFailures(result);\n        }"
            },
            {
              "step": 36,
              "variableName": "result.get(0)",
              "startLine": 60,
              "startColumn": 39,
              "endLine": 60,
              "endColumn": 52,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/MultipleBuildFailuresExceptionAnalyser.java",
              "type": "LocationAwareException",
              "code": "            }\n        }\n        if (result.size() == 1 && result.get(0) instanceof RuntimeException) {\n            return (RuntimeException) result.get(0);\n        } else {\n            return new MultipleBuildFailures(result);\n        }"
            },
            {
              "step": 37,
              "variableName": "(RuntimeException) result.get(0)",
              "startLine": 60,
              "startColumn": 20,
              "endLine": 60,
              "endColumn": 52,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/MultipleBuildFailuresExceptionAnalyser.java",
              "type": "LocationAwareException",
              "code": "            }\n        }\n        if (result.size() == 1 && result.get(0) instanceof RuntimeException) {\n            return (RuntimeException) result.get(0);\n        } else {\n            return new MultipleBuildFailures(result);\n        }"
            },
            {
              "step": 38,
              "variableName": "exceptionAnalyser.transform(finishFailures)",
              "startLine": 72,
              "startColumn": 16,
              "endLine": 72,
              "endColumn": 59,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/internal/buildtree/DefaultBuildTreeFinishExecutor.java",
              "type": "LocationAwareException",
              "code": "            finishFailures.addAll(result.getFailures());\n        });\n\n        return exceptionAnalyser.transform(finishFailures);\n    }\n}\n"
            },
            {
              "step": 39,
              "variableName": "delegate.finishBuildTree(failures)",
              "startLine": 46,
              "startColumn": 28,
              "endLine": 46,
              "endColumn": 62,
              "uri": "gradle-8.14.0/subprojects/composite-builds/src/main/java/org/gradle/composite/internal/OperationFiringBuildTreeFinishExecutor.java",
              "type": "LocationAwareException",
              "code": "            @Override\n            public RuntimeException call(BuildOperationContext context) {\n                try {\n                    return delegate.finishBuildTree(failures);\n                } finally {\n                    context.setResult(RESULT);\n                }"
            },
            {
              "step": 40,
              "variableName": "buildOperation.call(context)",
              "startLine": 239,
              "startColumn": 21,
              "endLine": 239,
              "endColumn": 49,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/testFixtures/java/org/gradle/internal/operations/TestBuildOperationRunner.java",
              "type": "LocationAwareException",
              "code": "            TestBuildOperationContext context = new TestBuildOperationContext(record);\n            T t;\n            try {\n                t = buildOperation.call(context);\n            } catch (Throwable failure) {\n                if (record.failure == null) {\n                    record.failure = failure;"
            },
            {
              "step": 41,
              "variableName": "t",
              "startLine": 246,
              "startColumn": 20,
              "endLine": 246,
              "endColumn": 21,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/testFixtures/java/org/gradle/internal/operations/TestBuildOperationRunner.java",
              "type": "LocationAwareException",
              "code": "                }\n                throw throwAsUncheckedException(failure);\n            }\n            return t;\n        }\n\n        private <O extends BuildOperation> void execute(O buildOperation, BuildOperationWorker<O> worker) {"
            },
            {
              "step": 42,
              "variableName": "log.call(buildOperation)",
              "startLine": 51,
              "startColumn": 16,
              "endLine": 51,
              "endColumn": 40,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/testFixtures/java/org/gradle/internal/operations/TestBuildOperationRunner.java",
              "type": "LocationAwareException",
              "code": "\n    @Override\n    public <T> T call(CallableBuildOperation<T> buildOperation) {\n        return log.call(buildOperation);\n    }\n\n    @Override"
            },
            {
              "step": 43,
              "variableName": "ca",
              "startLine": 115,
              "startColumn": 5,
              "endLine": 121,
              "endColumn": 7,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/configurationcache/ConfigurationCacheBuildOperations.kt",
              "type": "LocationAwareException",
              "code": "\ninternal\nfun <T : Any> BuildOperationRunner.withModelLoadOperation(block: () -> T): T =\n    call(object : CallableBuildOperation<T> {\n        override fun description(): BuildOperationDescriptor.Builder = BuildOperationDescriptor\n            .displayName(\"Load model from configuration cache\")\n            .progressDisplayName(\"Loading model from configuration cache\")"
            },
            {
              "step": 44,
              "variableName": "ca",
              "startLine": 115,
              "startColumn": 5,
              "endLine": 121,
              "endColumn": 7,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/configurationcache/ConfigurationCacheBuildOperations.kt",
              "type": "LocationAwareException",
              "code": "\ninternal\nfun <T : Any> BuildOperationRunner.withModelLoadOperation(block: () -> T): T =\n    call(object : CallableBuildOperation<T> {\n        override fun description(): BuildOperationDescriptor.Builder = BuildOperationDescriptor\n            .displayName(\"Load model from configuration cache\")\n            .progressDisplayName(\"Loading model from configuration cache\")"
            },
            {
              "step": 45,
              "variableName": "b",
              "startLine": 635,
              "startColumn": 9,
              "endLine": 641,
              "endColumn": 10,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "        // No need to record the `ClassLoaderScope` tree when loading\n        scopeRegistryListener.dispose()\n\n        buildOperationRunner.withModelLoadOperation {\n            val storeLoadResult = entryStore.useForStateLoad(StateType.Model) { stateFile: ConfigurationCacheStateFile ->\n                cacheIO.readModelFrom(stateFile)\n            }"
            },
            {
              "step": 46,
              "variableName": "block()",
              "startLine": 668,
              "startColumn": 22,
              "endLine": 668,
              "endColumn": 29,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "    private\n    inline fun <T> runAtConfigurationTime(block: () -> T): T {\n        prepareConfigurationTimeBarrier()\n        val result = block()\n        crossConfigurationTimeBarrier()\n        return result\n    }"
            },
            {
              "step": 47,
              "variableName": "result",
              "startLine": 670,
              "startColumn": 16,
              "endLine": 670,
              "endColumn": 22,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "        prepareConfigurationTimeBarrier()\n        val result = block()\n        crossConfigurationTimeBarrier()\n        return result\n    }\n\n    private"
            },
            {
              "step": 48,
              "variableName": "runAtConfigurationTime(...) : LocationAwareException",
              "startLine": 631,
              "startColumn": 28,
              "endLine": 642,
              "endColumn": 6,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "    data class LoadResultMetadata(val originInvocationId: String? = null)\n\n    private\n    fun loadModel(): Any = runAtConfigurationTime {\n        // No need to record the `ClassLoaderScope` tree when loading\n        scopeRegistryListener.dispose()\n"
            },
            {
              "step": 49,
              "variableName": "loadModel()",
              "startLine": 268,
              "startColumn": 20,
              "endLine": 268,
              "endColumn": 31,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "    override fun <T : Any> loadOrCreateModel(creator: () -> T): T {\n        if (isLoaded) {\n            runLoadedSideEffects()\n            return loadModel().uncheckedCast()\n        }\n\n        return runWorkThatContributesToCacheEntry {"
            },
            {
              "step": 50,
              "variableName": "Any",
              "startLine": 22,
              "startColumn": 15,
              "endLine": 22,
              "endColumn": 18,
              "uri": "gradle-8.14.0/platforms/core-configuration/stdlib-kotlin-extensions/src/main/kotlin/org/gradle/internal/extensions/stdlib/CastExtensions.kt",
              "type": "Object",
              "code": "import org.gradle.internal.Cast\n\n\nfun <T : Any> Any.uncheckedCast(): T =\n    Cast.uncheckedNonnullCast(this)\n"
            },
            {
              "step": 51,
              "variableName": "this",
              "startLine": 23,
              "startColumn": 31,
              "endLine": 23,
              "endColumn": 35,
              "uri": "gradle-8.14.0/platforms/core-configuration/stdlib-kotlin-extensions/src/main/kotlin/org/gradle/internal/extensions/stdlib/CastExtensions.kt",
              "type": "Object",
              "code": "\n\nfun <T : Any> Any.uncheckedCast(): T =\n    Cast.uncheckedNonnullCast(this)\n"
            },
            {
              "step": 52,
              "variableName": "Object object",
              "startLine": 76,
              "startColumn": 46,
              "endLine": 76,
              "endColumn": 59,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/Cast.java",
              "type": "Object",
              "code": "    }\n\n    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})\n    public static <T> T uncheckedNonnullCast(Object object) {\n        return (T) object;\n    }\n}"
            },
            {
              "step": 53,
              "variableName": "(T) object",
              "startLine": 77,
              "startColumn": 16,
              "endLine": 77,
              "endColumn": 26,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/Cast.java",
              "type": "Object",
              "code": "\n    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})\n    public static <T> T uncheckedNonnullCast(Object object) {\n        return (T) object;\n    }\n}\n"
            },
            {
              "step": 54,
              "variableName": "Cast.uncheckedNonnullCast(collectionType)",
              "startLine": 223,
              "startColumn": 16,
              "endLine": 223,
              "endColumn": 57,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/api/internal/provider/AbstractCollectionProperty.java",
              "type": "Class",
              "code": "    @Override\n    @Nonnull\n    public Class<C> getType() {\n        return Cast.uncheckedNonnullCast(collectionType);\n    }\n\n    @Override"
            },
            {
              "step": 55,
              "variableName": "provider.getType()",
              "startLine": 41,
              "startColumn": 35,
              "endLine": 41,
              "endColumn": 53,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/api/internal/provider/OrElseFixedValueProvider.java",
              "type": "Class",
              "code": "    @Nullable\n    @Override\n    public Class<T> getType() {\n        return Cast.uncheckedCast(provider.getType());\n    }\n\n    @Override"
            },
            {
              "step": 56,
              "variableName": "@Nullable Object object",
              "startLine": 71,
              "startColumn": 39,
              "endLine": 71,
              "endColumn": 62,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/Cast.java",
              "type": "Object",
              "code": "\n    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})\n    @Nullable\n    public static <T> T uncheckedCast(@Nullable Object object) {\n        return (T) object;\n    }\n"
            },
            {
              "step": 57,
              "variableName": "(T) object",
              "startLine": 72,
              "startColumn": 16,
              "endLine": 72,
              "endColumn": 26,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/Cast.java",
              "type": "Object",
              "code": "    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})\n    @Nullable\n    public static <T> T uncheckedCast(@Nullable Object object) {\n        return (T) object;\n    }\n\n    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})"
            },
            {
              "step": 58,
              "variableName": "Cast.uncheckedCast(value)",
              "startLine": 153,
              "startColumn": 16,
              "endLine": 153,
              "endColumn": 41,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/api/internal/attributes/DefaultImmutableAttributesContainer.java",
              "type": "Object",
              "code": "            value = isolatable.coerce(key.getType());\n        }\n\n        return Cast.uncheckedCast(value);\n    }\n\n    /**"
            },
            {
              "step": 59,
              "variableName": "attributes.getAttribute(ProjectInternal.STATUS_ATTRIBUTE)",
              "startLine": 48,
              "startColumn": 16,
              "endLine": 48,
              "endColumn": 73,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ivyservice/ivyresolve/UserProvidedMetadata.java",
              "type": "String",
              "code": "\n    @Override\n    public String getStatus() {\n        return attributes.getAttribute(ProjectInternal.STATUS_ATTRIBUTE);\n    }\n\n    @Override"
            },
            {
              "step": 60,
              "variableName": "updatedMetadata.getStatus()",
              "startLine": 206,
              "startColumn": 162,
              "endLine": 206,
              "endColumn": 189,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/dsl/DefaultComponentMetadataProcessor.java",
              "type": "String",
              "code": "            updatedMetadata = details.asImmutable();\n        }\n        if (!updatedMetadata.getStatusScheme().contains(updatedMetadata.getStatus())) {\n            throw new ModuleVersionResolveException(updatedMetadata.getId(), () -> String.format(\"Unexpected status '%s' specified for %s. Expected one of: %s\", updatedMetadata.getStatus(), updatedMetadata.getId().toString(), updatedMetadata.getStatusScheme()));\n        }\n        return updatedMetadata;\n    }"
            },
            {
              "step": 61,
              "variableName": "String.format(\"Unexpected status '%s' specified for %s. Expected one of: %s\", updatedMetadata.getStatus(), updatedMetadata.getId().toString(), updatedMetadata.getStatusScheme())",
              "startLine": 206,
              "startColumn": 84,
              "endLine": 206,
              "endColumn": 261,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/dsl/DefaultComponentMetadataProcessor.java",
              "type": "Object[] [[]] : String",
              "code": "            updatedMetadata = details.asImmutable();\n        }\n        if (!updatedMetadata.getStatusScheme().contains(updatedMetadata.getStatus())) {\n            throw new ModuleVersionResolveException(updatedMetadata.getId(), () -> String.format(\"Unexpected status '%s' specified for %s. Expected one of: %s\", updatedMetadata.getStatus(), updatedMetadata.getId().toString(), updatedMetadata.getStatusScheme()));\n        }\n        return updatedMetadata;\n    }"
            },
            {
              "step": 62,
              "variableName": "String.format(\"Unexpected status '%s' specified for %s. Expected one of: %s\", updatedMetadata.getStatus(), updatedMetadata.getId().toString(), updatedMetadata.getStatusScheme())",
              "startLine": 206,
              "startColumn": 84,
              "endLine": 206,
              "endColumn": 261,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/dsl/DefaultComponentMetadataProcessor.java",
              "type": "String",
              "code": "            updatedMetadata = details.asImmutable();\n        }\n        if (!updatedMetadata.getStatusScheme().contains(updatedMetadata.getStatus())) {\n            throw new ModuleVersionResolveException(updatedMetadata.getId(), () -> String.format(\"Unexpected status '%s' specified for %s. Expected one of: %s\", updatedMetadata.getStatus(), updatedMetadata.getId().toString(), updatedMetadata.getStatusScheme()));\n        }\n        return updatedMetadata;\n    }"
            },
            {
              "step": 63,
              "variableName": "messageFactory.create()",
              "startLine": 173,
              "startColumn": 23,
              "endLine": 173,
              "endColumn": 46,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "String",
              "code": "    @Override\n    public String getMessage() {\n        if (messageFactory != null) {\n            message = messageFactory.create();\n            messageFactory = null;\n            return message;\n        }"
            },
            {
              "step": 64,
              "variableName": "message",
              "startLine": 175,
              "startColumn": 20,
              "endLine": 175,
              "endColumn": 27,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "String",
              "code": "        if (messageFactory != null) {\n            message = messageFactory.create();\n            messageFactory = null;\n            return message;\n        }\n        return message;\n    }"
            },
            {
              "step": 65,
              "variableName": "exception.getMessage()",
              "startLine": 196,
              "startColumn": 32,
              "endLine": 196,
              "endColumn": 54,
              "uri": "gradle-8.14.0/platforms/core-runtime/gradle-cli/src/main/java/org/gradle/launcher/cli/DefaultCommandLineActionFactory.java",
              "type": "",
              "code": "        @Override\n        public void execute(ExecutionListener executionListener) {\n            System.err.println();\n            System.err.println(exception.getMessage());\n            showUsage(System.err, parser, getSuggestedTaskSelector());\n            executionListener.onFailure(exception);\n        }"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "source",
              "startLine": 40,
              "startColumn": 39,
              "endLine": 40,
              "endColumn": 45,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/RegExpNameMapper.java",
              "type": "String",
              "code": "    @Override\n    public String transform(String source) {\n        if (matcher == null) {\n            matcher = pattern.matcher(source);\n        } else {\n            matcher.reset(source);\n        }"
            },
            {
              "step": 1,
              "variableName": "result",
              "startLine": 48,
              "startColumn": 16,
              "endLine": 48,
              "endColumn": 22,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/RegExpNameMapper.java",
              "type": "String",
              "code": "        if (matcher.find()) {\n            result = matcher.replaceFirst(replacement);\n        }\n        return result;\n    }\n}\n"
            },
            {
              "step": 2,
              "variableName": "transformer.transform(value)",
              "startLine": 37,
              "startColumn": 31,
              "endLine": 37,
              "endColumn": 59,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/ChainingTransformer.java",
              "type": "String",
              "code": "    public T transform(T original) {\n        T value = original;\n        for (Transformer<T, T> transformer : transformers) {\n            value = type.cast(transformer.transform(value));\n        }\n        return value;\n    }"
            },
            {
              "step": 3,
              "variableName": "type.cast(transformer.transform(value))",
              "startLine": 37,
              "startColumn": 21,
              "endLine": 37,
              "endColumn": 60,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/ChainingTransformer.java",
              "type": "String",
              "code": "    public T transform(T original) {\n        T value = original;\n        for (Transformer<T, T> transformer : transformers) {\n            value = type.cast(transformer.transform(value));\n        }\n        return value;\n    }"
            },
            {
              "step": 4,
              "variableName": "value",
              "startLine": 39,
              "startColumn": 16,
              "endLine": 39,
              "endColumn": 21,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/ChainingTransformer.java",
              "type": "String",
              "code": "        for (Transformer<T, T> transformer : transformers) {\n            value = type.cast(transformer.transform(value));\n        }\n        return value;\n    }\n\n    public void add(Transformer<T, T> transformer) {"
            },
            {
              "step": 5,
              "variableName": "describer.transform(this)",
              "startLine": 163,
              "startColumn": 16,
              "endLine": 163,
              "endColumn": 41,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/repositories/DefaultMavenArtifactRepository.java",
              "type": "String",
              "code": "\n    @Override\n    public String getDisplayName() {\n        return describer.transform(this);\n    }\n\n    @Override"
            },
            {
              "step": 6,
              "variableName": "describable.getDisplayName()",
              "startLine": 313,
              "startColumn": 35,
              "endLine": 313,
              "endColumn": 63,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "String",
              "code": "        public String getDisplayName() {\n            synchronized (this) {\n                if (displayName == null) {\n                    displayName = describable.getDisplayName();\n                    if (capDisplayName != null || !(describable instanceof DisplayName)) {\n                        describable = null;\n                    }"
            },
            {
              "step": 7,
              "variableName": "displayName",
              "startLine": 318,
              "startColumn": 24,
              "endLine": 318,
              "endColumn": 35,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "String",
              "code": "                        describable = null;\n                    }\n                }\n                return displayName;\n            }\n        }\n    }"
            },
            {
              "step": 8,
              "variableName": "displayName.getDisplayName()",
              "startLine": 772,
              "startColumn": 73,
              "endLine": 772,
              "endColumn": 101,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/configurations/DefaultConfiguration.java",
              "type": "String",
              "code": "                try {\n                    results = resolver.resolveGraph(DefaultConfiguration.this);\n                } catch (Exception e) {\n                    throw exceptionMapper.mapFailure(e, \"dependencies\", displayName.getDisplayName());\n                }\n\n                // Make the new state visible in case a dependency resolution listener queries the result, which requires the new state"
            },
            {
              "step": 9,
              "variableName": "String contextDisplayName",
              "startLine": 68,
              "startColumn": 77,
              "endLine": 68,
              "endColumn": 102,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "String",
              "code": "        return mapFailure(failure, type, displayName);\n    }\n\n    public TypedResolveException mapFailure(Throwable failure, String type, String contextDisplayName) {\n        if (!(failure instanceof TypedResolveException)) {\n            return new TypedResolveException(\n                type,"
            },
            {
              "step": 10,
              "variableName": "contextDisplayName",
              "startLine": 72,
              "startColumn": 17,
              "endLine": 72,
              "endColumn": 35,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "String",
              "code": "        if (!(failure instanceof TypedResolveException)) {\n            return new TypedResolveException(\n                type,\n                contextDisplayName,\n                ImmutableList.of(mapRepositoryOverrideFailure(contextDisplayName, failure))\n            );\n        }"
            },
            {
              "step": 11,
              "variableName": "new TypedResolveException(...) : TypedResolveException",
              "startLine": 70,
              "startColumn": 20,
              "endLine": 74,
              "endColumn": 14,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "TypedResolveException",
              "code": "\n    public TypedResolveException mapFailure(Throwable failure, String type, String contextDisplayName) {\n        if (!(failure instanceof TypedResolveException)) {\n            return new TypedResolveException(\n                type,\n                contextDisplayName,\n                ImmutableList.of(mapRepositoryOverrideFailure(contextDisplayName, failure))"
            },
            {
              "step": 12,
              "variableName": "exceptionMapper.mapFailure(e, \"dependencies\", displayName.getDisplayName())",
              "startLine": 772,
              "startColumn": 27,
              "endLine": 772,
              "endColumn": 102,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/configurations/DefaultConfiguration.java",
              "type": "TypedResolveException",
              "code": "                try {\n                    results = resolver.resolveGraph(DefaultConfiguration.this);\n                } catch (Exception e) {\n                    throw exceptionMapper.mapFailure(e, \"dependencies\", displayName.getDisplayName());\n                }\n\n                // Make the new state visible in case a dependency resolution listener queries the result, which requires the new state"
            },
            {
              "step": 13,
              "variableName": "e",
              "startLine": 772,
              "startColumn": 54,
              "endLine": 772,
              "endColumn": 55,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/configurations/DefaultConfiguration.java",
              "type": "Exception",
              "code": "                try {\n                    results = resolver.resolveGraph(DefaultConfiguration.this);\n                } catch (Exception e) {\n                    throw exceptionMapper.mapFailure(e, \"dependencies\", displayName.getDisplayName());\n                }\n\n                // Make the new state visible in case a dependency resolution listener queries the result, which requires the new state"
            },
            {
              "step": 14,
              "variableName": "Throwable failure",
              "startLine": 68,
              "startColumn": 45,
              "endLine": 68,
              "endColumn": 62,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Throwable",
              "code": "        return mapFailure(failure, type, displayName);\n    }\n\n    public TypedResolveException mapFailure(Throwable failure, String type, String contextDisplayName) {\n        if (!(failure instanceof TypedResolveException)) {\n            return new TypedResolveException(\n                type,"
            },
            {
              "step": 15,
              "variableName": "failure",
              "startLine": 73,
              "startColumn": 83,
              "endLine": 73,
              "endColumn": 90,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Throwable",
              "code": "            return new TypedResolveException(\n                type,\n                contextDisplayName,\n                ImmutableList.of(mapRepositoryOverrideFailure(contextDisplayName, failure))\n            );\n        }\n"
            },
            {
              "step": 16,
              "variableName": "Throwable failure",
              "startLine": 94,
              "startColumn": 78,
              "endLine": 94,
              "endColumn": 95,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Throwable",
              "code": "\n    // TODO: We should handle this exception at the source instead of using instanceof to detect it after it is thrown.\n    //       We should try to avoid catching and analyzing runtime exceptions\n    public Throwable mapRepositoryOverrideFailure(String contextDisplayName, Throwable failure) {\n        if (!(failure instanceof ModuleVersionNotFoundException) || !settingsRepositoriesIgnored()) {\n            return failure;\n        }"
            },
            {
              "step": 17,
              "variableName": "failure",
              "startLine": 108,
              "startColumn": 35,
              "endLine": 108,
              "endColumn": 42,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Throwable",
              "code": "        return new TypedResolveException(\n            \"dependencies\",\n            contextDisplayName,\n            Collections.singleton(failure),\n            resolutions\n        );\n    }"
            },
            {
              "step": 18,
              "variableName": "Collections.singleton(failure)",
              "startLine": 108,
              "startColumn": 13,
              "endLine": 108,
              "endColumn": 43,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Set [<element>] : Throwable",
              "code": "        return new TypedResolveException(\n            \"dependencies\",\n            contextDisplayName,\n            Collections.singleton(failure),\n            resolutions\n        );\n    }"
            },
            {
              "step": 19,
              "variableName": "Collections.singleton(failure)",
              "startLine": 108,
              "startColumn": 13,
              "endLine": 108,
              "endColumn": 43,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Set",
              "code": "        return new TypedResolveException(\n            \"dependencies\",\n            contextDisplayName,\n            Collections.singleton(failure),\n            resolutions\n        );\n    }"
            },
            {
              "step": 20,
              "variableName": "Iterable<? extends Throwable> failures",
              "startLine": 42,
              "startColumn": 67,
              "endLine": 42,
              "endColumn": 105,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ivyservice/TypedResolveException.java",
              "type": "Set",
              "code": "    /**\n     * Creates a new instance with resolutions.\n     */\n    public TypedResolveException(String type, String displayName, Iterable<? extends Throwable> failures, List<String> resolutions) {\n        super(buildMessage(type, displayName), failures, false);\n        this.type = type;\n        this.resolutions = ImmutableList.copyOf(resolutions);"
            },
            {
              "step": 21,
              "variableName": "failures",
              "startLine": 43,
              "startColumn": 48,
              "endLine": 43,
              "endColumn": 56,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ivyservice/TypedResolveException.java",
              "type": "Set",
              "code": "     * Creates a new instance with resolutions.\n     */\n    public TypedResolveException(String type, String displayName, Iterable<? extends Throwable> failures, List<String> resolutions) {\n        super(buildMessage(type, displayName), failures, false);\n        this.type = type;\n        this.resolutions = ImmutableList.copyOf(resolutions);\n    }"
            },
            {
              "step": 22,
              "variableName": "Iterable<? extends Throwable> causes",
              "startLine": 77,
              "startColumn": 48,
              "endLine": 77,
              "endColumn": 84,
              "uri": "gradle-8.14.0/subprojects/core-api/src/main/java/org/gradle/api/artifacts/ResolveException.java",
              "type": "Set",
              "code": "     * @since 8.9\n     */\n    @Incubating\n    protected ResolveException(String message, Iterable<? extends Throwable> causes, @SuppressWarnings(\"unused\") boolean dummy) {\n        super(message, causes);\n    }\n}"
            },
            {
              "step": 23,
              "variableName": "causes",
              "startLine": 78,
              "startColumn": 24,
              "endLine": 78,
              "endColumn": 30,
              "uri": "gradle-8.14.0/subprojects/core-api/src/main/java/org/gradle/api/artifacts/ResolveException.java",
              "type": "Set",
              "code": "     */\n    @Incubating\n    protected ResolveException(String message, Iterable<? extends Throwable> causes, @SuppressWarnings(\"unused\") boolean dummy) {\n        super(message, causes);\n    }\n}\n"
            },
            {
              "step": 24,
              "variableName": "Iterable<? extends Throwable> causes",
              "startLine": 47,
              "startColumn": 55,
              "endLine": 47,
              "endColumn": 91,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "Set",
              "code": "        this.causes.addAll(Arrays.asList(causes));\n    }\n\n    public DefaultMultiCauseException(String message, Iterable<? extends Throwable> causes) {\n        super(message);\n        this.message = message;\n        initCauses(causes);"
            },
            {
              "step": 25,
              "variableName": "causes",
              "startLine": 50,
              "startColumn": 20,
              "endLine": 50,
              "endColumn": 26,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "Set",
              "code": "    public DefaultMultiCauseException(String message, Iterable<? extends Throwable> causes) {\n        super(message);\n        this.message = message;\n        initCauses(causes);\n    }\n\n    public DefaultMultiCauseException(Factory<String> messageFactory) {"
            },
            {
              "step": 26,
              "variableName": "Iterable<? extends Throwable> causes",
              "startLine": 112,
              "startColumn": 28,
              "endLine": 112,
              "endColumn": 64,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "Iterable",
              "code": "        return null;\n    }\n\n    public void initCauses(Iterable<? extends Throwable> causes) {\n        this.causes.clear();\n        for (Throwable cause : causes) {\n            this.causes.add(cause);"
            },
            {
              "step": 27,
              "variableName": "cause",
              "startLine": 115,
              "startColumn": 29,
              "endLine": 115,
              "endColumn": 34,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "Throwable",
              "code": "    public void initCauses(Iterable<? extends Throwable> causes) {\n        this.causes.clear();\n        for (Throwable cause : causes) {\n            this.causes.add(cause);\n        }\n    }\n"
            },
            {
              "step": 28,
              "variableName": "this.causes",
              "startLine": 115,
              "startColumn": 13,
              "endLine": 115,
              "endColumn": 24,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "CopyOnWriteArrayList [<element>] : Throwable",
              "code": "    public void initCauses(Iterable<? extends Throwable> causes) {\n        this.causes.clear();\n        for (Throwable cause : causes) {\n            this.causes.add(cause);\n        }\n    }\n"
            },
            {
              "step": 29,
              "variableName": "this",
              "startLine": 115,
              "startColumn": 13,
              "endLine": 115,
              "endColumn": 17,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "DefaultMultiCauseException [causes, <element>] : Throwable",
              "code": "    public void initCauses(Iterable<? extends Throwable> causes) {\n        this.causes.clear();\n        for (Throwable cause : causes) {\n            this.causes.add(cause);\n        }\n    }\n"
            },
            {
              "step": 30,
              "variableName": "projectConfigurationException",
              "startLine": 57,
              "startColumn": 17,
              "endLine": 57,
              "endColumn": 46,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/DefaultExceptionAnalyser.java",
              "type": "ProjectConfigurationException [causes, <element>] : Throwable",
              "code": "                }\n            }\n            if (!additionalFailures.isEmpty()) {\n                projectConfigurationException.initCauses(additionalFailures);\n                failures.add(transform(projectConfigurationException));\n            }\n        } else if (exception instanceof ServiceCreationException) {"
            },
            {
              "step": 31,
              "variableName": "projectConfigurationException",
              "startLine": 58,
              "startColumn": 40,
              "endLine": 58,
              "endColumn": 69,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/DefaultExceptionAnalyser.java",
              "type": "ProjectConfigurationException [causes, <element>] : Throwable",
              "code": "            }\n            if (!additionalFailures.isEmpty()) {\n                projectConfigurationException.initCauses(additionalFailures);\n                failures.add(transform(projectConfigurationException));\n            }\n        } else if (exception instanceof ServiceCreationException) {\n            failures.add(transform(new InitializationException(exception)));"
            },
            {
              "step": 32,
              "variableName": "transform(projectConfigurationException)",
              "startLine": 58,
              "startColumn": 30,
              "endLine": 58,
              "endColumn": 70,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/DefaultExceptionAnalyser.java",
              "type": "LocationAwareException",
              "code": "            }\n            if (!additionalFailures.isEmpty()) {\n                projectConfigurationException.initCauses(additionalFailures);\n                failures.add(transform(projectConfigurationException));\n            }\n        } else if (exception instanceof ServiceCreationException) {\n            failures.add(transform(new InitializationException(exception)));"
            },
            {
              "step": 33,
              "variableName": "failures",
              "startLine": 58,
              "startColumn": 17,
              "endLine": 58,
              "endColumn": 25,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/DefaultExceptionAnalyser.java",
              "type": "Collection [<element>] : LocationAwareException",
              "code": "            }\n            if (!additionalFailures.isEmpty()) {\n                projectConfigurationException.initCauses(additionalFailures);\n                failures.add(transform(projectConfigurationException));\n            }\n        } else if (exception instanceof ServiceCreationException) {\n            failures.add(transform(new InitializationException(exception)));"
            },
            {
              "step": 34,
              "variableName": "result",
              "startLine": 53,
              "startColumn": 54,
              "endLine": 53,
              "endColumn": 60,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/MultipleBuildFailuresExceptionAnalyser.java",
              "type": "ArrayList [<element>] : LocationAwareException",
              "code": "        for (Throwable failure : failures) {\n            if (failure instanceof MultipleBuildFailures) {\n                for (Throwable cause : ((MultipleBuildFailures) failure).getCauses()) {\n                    collector.collectFailures(cause, result);\n                }\n            } else {\n                collector.collectFailures(failure, result);"
            },
            {
              "step": 35,
              "variableName": "result",
              "startLine": 60,
              "startColumn": 39,
              "endLine": 60,
              "endColumn": 45,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/MultipleBuildFailuresExceptionAnalyser.java",
              "type": "ArrayList [<element>] : LocationAwareException",
              "code": "            }\n        }\n        if (result.size() == 1 && result.get(0) instanceof RuntimeException) {\n            return (RuntimeException) result.get(0);\n        } else {\n            return new MultipleBuildFailures(result);\n        }"
            },
            {
              "step": 36,
              "variableName": "result.get(0)",
              "startLine": 60,
              "startColumn": 39,
              "endLine": 60,
              "endColumn": 52,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/MultipleBuildFailuresExceptionAnalyser.java",
              "type": "LocationAwareException",
              "code": "            }\n        }\n        if (result.size() == 1 && result.get(0) instanceof RuntimeException) {\n            return (RuntimeException) result.get(0);\n        } else {\n            return new MultipleBuildFailures(result);\n        }"
            },
            {
              "step": 37,
              "variableName": "(RuntimeException) result.get(0)",
              "startLine": 60,
              "startColumn": 20,
              "endLine": 60,
              "endColumn": 52,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/MultipleBuildFailuresExceptionAnalyser.java",
              "type": "LocationAwareException",
              "code": "            }\n        }\n        if (result.size() == 1 && result.get(0) instanceof RuntimeException) {\n            return (RuntimeException) result.get(0);\n        } else {\n            return new MultipleBuildFailures(result);\n        }"
            },
            {
              "step": 38,
              "variableName": "exceptionAnalyser.transform(finishFailures)",
              "startLine": 72,
              "startColumn": 16,
              "endLine": 72,
              "endColumn": 59,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/internal/buildtree/DefaultBuildTreeFinishExecutor.java",
              "type": "LocationAwareException",
              "code": "            finishFailures.addAll(result.getFailures());\n        });\n\n        return exceptionAnalyser.transform(finishFailures);\n    }\n}\n"
            },
            {
              "step": 39,
              "variableName": "delegate.finishBuildTree(failures)",
              "startLine": 46,
              "startColumn": 28,
              "endLine": 46,
              "endColumn": 62,
              "uri": "gradle-8.14.0/subprojects/composite-builds/src/main/java/org/gradle/composite/internal/OperationFiringBuildTreeFinishExecutor.java",
              "type": "LocationAwareException",
              "code": "            @Override\n            public RuntimeException call(BuildOperationContext context) {\n                try {\n                    return delegate.finishBuildTree(failures);\n                } finally {\n                    context.setResult(RESULT);\n                }"
            },
            {
              "step": 40,
              "variableName": "buildOperation.call(context)",
              "startLine": 239,
              "startColumn": 21,
              "endLine": 239,
              "endColumn": 49,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/testFixtures/java/org/gradle/internal/operations/TestBuildOperationRunner.java",
              "type": "LocationAwareException",
              "code": "            TestBuildOperationContext context = new TestBuildOperationContext(record);\n            T t;\n            try {\n                t = buildOperation.call(context);\n            } catch (Throwable failure) {\n                if (record.failure == null) {\n                    record.failure = failure;"
            },
            {
              "step": 41,
              "variableName": "t",
              "startLine": 246,
              "startColumn": 20,
              "endLine": 246,
              "endColumn": 21,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/testFixtures/java/org/gradle/internal/operations/TestBuildOperationRunner.java",
              "type": "LocationAwareException",
              "code": "                }\n                throw throwAsUncheckedException(failure);\n            }\n            return t;\n        }\n\n        private <O extends BuildOperation> void execute(O buildOperation, BuildOperationWorker<O> worker) {"
            },
            {
              "step": 42,
              "variableName": "log.call(buildOperation)",
              "startLine": 51,
              "startColumn": 16,
              "endLine": 51,
              "endColumn": 40,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/testFixtures/java/org/gradle/internal/operations/TestBuildOperationRunner.java",
              "type": "LocationAwareException",
              "code": "\n    @Override\n    public <T> T call(CallableBuildOperation<T> buildOperation) {\n        return log.call(buildOperation);\n    }\n\n    @Override"
            },
            {
              "step": 43,
              "variableName": "ca",
              "startLine": 115,
              "startColumn": 5,
              "endLine": 121,
              "endColumn": 7,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/configurationcache/ConfigurationCacheBuildOperations.kt",
              "type": "LocationAwareException",
              "code": "\ninternal\nfun <T : Any> BuildOperationRunner.withModelLoadOperation(block: () -> T): T =\n    call(object : CallableBuildOperation<T> {\n        override fun description(): BuildOperationDescriptor.Builder = BuildOperationDescriptor\n            .displayName(\"Load model from configuration cache\")\n            .progressDisplayName(\"Loading model from configuration cache\")"
            },
            {
              "step": 44,
              "variableName": "ca",
              "startLine": 115,
              "startColumn": 5,
              "endLine": 121,
              "endColumn": 7,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/configurationcache/ConfigurationCacheBuildOperations.kt",
              "type": "LocationAwareException",
              "code": "\ninternal\nfun <T : Any> BuildOperationRunner.withModelLoadOperation(block: () -> T): T =\n    call(object : CallableBuildOperation<T> {\n        override fun description(): BuildOperationDescriptor.Builder = BuildOperationDescriptor\n            .displayName(\"Load model from configuration cache\")\n            .progressDisplayName(\"Loading model from configuration cache\")"
            },
            {
              "step": 45,
              "variableName": "b",
              "startLine": 635,
              "startColumn": 9,
              "endLine": 641,
              "endColumn": 10,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "        // No need to record the `ClassLoaderScope` tree when loading\n        scopeRegistryListener.dispose()\n\n        buildOperationRunner.withModelLoadOperation {\n            val storeLoadResult = entryStore.useForStateLoad(StateType.Model) { stateFile: ConfigurationCacheStateFile ->\n                cacheIO.readModelFrom(stateFile)\n            }"
            },
            {
              "step": 46,
              "variableName": "block()",
              "startLine": 668,
              "startColumn": 22,
              "endLine": 668,
              "endColumn": 29,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "    private\n    inline fun <T> runAtConfigurationTime(block: () -> T): T {\n        prepareConfigurationTimeBarrier()\n        val result = block()\n        crossConfigurationTimeBarrier()\n        return result\n    }"
            },
            {
              "step": 47,
              "variableName": "result",
              "startLine": 670,
              "startColumn": 16,
              "endLine": 670,
              "endColumn": 22,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "        prepareConfigurationTimeBarrier()\n        val result = block()\n        crossConfigurationTimeBarrier()\n        return result\n    }\n\n    private"
            },
            {
              "step": 48,
              "variableName": "runAtConfigurationTime(...) : LocationAwareException",
              "startLine": 631,
              "startColumn": 28,
              "endLine": 642,
              "endColumn": 6,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "    data class LoadResultMetadata(val originInvocationId: String? = null)\n\n    private\n    fun loadModel(): Any = runAtConfigurationTime {\n        // No need to record the `ClassLoaderScope` tree when loading\n        scopeRegistryListener.dispose()\n"
            },
            {
              "step": 49,
              "variableName": "loadModel()",
              "startLine": 268,
              "startColumn": 20,
              "endLine": 268,
              "endColumn": 31,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "    override fun <T : Any> loadOrCreateModel(creator: () -> T): T {\n        if (isLoaded) {\n            runLoadedSideEffects()\n            return loadModel().uncheckedCast()\n        }\n\n        return runWorkThatContributesToCacheEntry {"
            },
            {
              "step": 50,
              "variableName": "Any",
              "startLine": 22,
              "startColumn": 15,
              "endLine": 22,
              "endColumn": 18,
              "uri": "gradle-8.14.0/platforms/core-configuration/stdlib-kotlin-extensions/src/main/kotlin/org/gradle/internal/extensions/stdlib/CastExtensions.kt",
              "type": "Object",
              "code": "import org.gradle.internal.Cast\n\n\nfun <T : Any> Any.uncheckedCast(): T =\n    Cast.uncheckedNonnullCast(this)\n"
            },
            {
              "step": 51,
              "variableName": "this",
              "startLine": 23,
              "startColumn": 31,
              "endLine": 23,
              "endColumn": 35,
              "uri": "gradle-8.14.0/platforms/core-configuration/stdlib-kotlin-extensions/src/main/kotlin/org/gradle/internal/extensions/stdlib/CastExtensions.kt",
              "type": "Object",
              "code": "\n\nfun <T : Any> Any.uncheckedCast(): T =\n    Cast.uncheckedNonnullCast(this)\n"
            },
            {
              "step": 52,
              "variableName": "Object object",
              "startLine": 76,
              "startColumn": 46,
              "endLine": 76,
              "endColumn": 59,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/Cast.java",
              "type": "Object",
              "code": "    }\n\n    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})\n    public static <T> T uncheckedNonnullCast(Object object) {\n        return (T) object;\n    }\n}"
            },
            {
              "step": 53,
              "variableName": "(T) object",
              "startLine": 77,
              "startColumn": 16,
              "endLine": 77,
              "endColumn": 26,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/Cast.java",
              "type": "Object",
              "code": "\n    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})\n    public static <T> T uncheckedNonnullCast(Object object) {\n        return (T) object;\n    }\n}\n"
            },
            {
              "step": 54,
              "variableName": "Cast.uncheckedNonnullCast(collectionType)",
              "startLine": 223,
              "startColumn": 16,
              "endLine": 223,
              "endColumn": 57,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/api/internal/provider/AbstractCollectionProperty.java",
              "type": "Class",
              "code": "    @Override\n    @Nonnull\n    public Class<C> getType() {\n        return Cast.uncheckedNonnullCast(collectionType);\n    }\n\n    @Override"
            },
            {
              "step": 55,
              "variableName": "provider.getType()",
              "startLine": 41,
              "startColumn": 35,
              "endLine": 41,
              "endColumn": 53,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/api/internal/provider/OrElseFixedValueProvider.java",
              "type": "Class",
              "code": "    @Nullable\n    @Override\n    public Class<T> getType() {\n        return Cast.uncheckedCast(provider.getType());\n    }\n\n    @Override"
            },
            {
              "step": 56,
              "variableName": "@Nullable Object object",
              "startLine": 71,
              "startColumn": 39,
              "endLine": 71,
              "endColumn": 62,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/Cast.java",
              "type": "Object",
              "code": "\n    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})\n    @Nullable\n    public static <T> T uncheckedCast(@Nullable Object object) {\n        return (T) object;\n    }\n"
            },
            {
              "step": 57,
              "variableName": "(T) object",
              "startLine": 72,
              "startColumn": 16,
              "endLine": 72,
              "endColumn": 26,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/Cast.java",
              "type": "Object",
              "code": "    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})\n    @Nullable\n    public static <T> T uncheckedCast(@Nullable Object object) {\n        return (T) object;\n    }\n\n    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})"
            },
            {
              "step": 58,
              "variableName": "Cast.uncheckedCast(value)",
              "startLine": 153,
              "startColumn": 16,
              "endLine": 153,
              "endColumn": 41,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/api/internal/attributes/DefaultImmutableAttributesContainer.java",
              "type": "Object",
              "code": "            value = isolatable.coerce(key.getType());\n        }\n\n        return Cast.uncheckedCast(value);\n    }\n\n    /**"
            },
            {
              "step": 59,
              "variableName": "attributes.getAttribute(ProjectInternal.STATUS_ATTRIBUTE)",
              "startLine": 48,
              "startColumn": 16,
              "endLine": 48,
              "endColumn": 73,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ivyservice/ivyresolve/UserProvidedMetadata.java",
              "type": "String",
              "code": "\n    @Override\n    public String getStatus() {\n        return attributes.getAttribute(ProjectInternal.STATUS_ATTRIBUTE);\n    }\n\n    @Override"
            },
            {
              "step": 60,
              "variableName": "updatedMetadata.getStatus()",
              "startLine": 206,
              "startColumn": 162,
              "endLine": 206,
              "endColumn": 189,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/dsl/DefaultComponentMetadataProcessor.java",
              "type": "String",
              "code": "            updatedMetadata = details.asImmutable();\n        }\n        if (!updatedMetadata.getStatusScheme().contains(updatedMetadata.getStatus())) {\n            throw new ModuleVersionResolveException(updatedMetadata.getId(), () -> String.format(\"Unexpected status '%s' specified for %s. Expected one of: %s\", updatedMetadata.getStatus(), updatedMetadata.getId().toString(), updatedMetadata.getStatusScheme()));\n        }\n        return updatedMetadata;\n    }"
            },
            {
              "step": 61,
              "variableName": "String.format(\"Unexpected status '%s' specified for %s. Expected one of: %s\", updatedMetadata.getStatus(), updatedMetadata.getId().toString(), updatedMetadata.getStatusScheme())",
              "startLine": 206,
              "startColumn": 84,
              "endLine": 206,
              "endColumn": 261,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/dsl/DefaultComponentMetadataProcessor.java",
              "type": "Object[] [[]] : String",
              "code": "            updatedMetadata = details.asImmutable();\n        }\n        if (!updatedMetadata.getStatusScheme().contains(updatedMetadata.getStatus())) {\n            throw new ModuleVersionResolveException(updatedMetadata.getId(), () -> String.format(\"Unexpected status '%s' specified for %s. Expected one of: %s\", updatedMetadata.getStatus(), updatedMetadata.getId().toString(), updatedMetadata.getStatusScheme()));\n        }\n        return updatedMetadata;\n    }"
            },
            {
              "step": 62,
              "variableName": "String.format(\"Unexpected status '%s' specified for %s. Expected one of: %s\", updatedMetadata.getStatus(), updatedMetadata.getId().toString(), updatedMetadata.getStatusScheme())",
              "startLine": 206,
              "startColumn": 84,
              "endLine": 206,
              "endColumn": 261,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/dsl/DefaultComponentMetadataProcessor.java",
              "type": "String",
              "code": "            updatedMetadata = details.asImmutable();\n        }\n        if (!updatedMetadata.getStatusScheme().contains(updatedMetadata.getStatus())) {\n            throw new ModuleVersionResolveException(updatedMetadata.getId(), () -> String.format(\"Unexpected status '%s' specified for %s. Expected one of: %s\", updatedMetadata.getStatus(), updatedMetadata.getId().toString(), updatedMetadata.getStatusScheme()));\n        }\n        return updatedMetadata;\n    }"
            },
            {
              "step": 63,
              "variableName": "messageFactory.create()",
              "startLine": 173,
              "startColumn": 23,
              "endLine": 173,
              "endColumn": 46,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "String",
              "code": "    @Override\n    public String getMessage() {\n        if (messageFactory != null) {\n            message = messageFactory.create();\n            messageFactory = null;\n            return message;\n        }"
            },
            {
              "step": 64,
              "variableName": "message",
              "startLine": 175,
              "startColumn": 20,
              "endLine": 175,
              "endColumn": 27,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "String",
              "code": "        if (messageFactory != null) {\n            message = messageFactory.create();\n            messageFactory = null;\n            return message;\n        }\n        return message;\n    }"
            },
            {
              "step": 65,
              "variableName": "exception.getMessage()",
              "startLine": 196,
              "startColumn": 32,
              "endLine": 196,
              "endColumn": 54,
              "uri": "gradle-8.14.0/platforms/core-runtime/gradle-cli/src/main/java/org/gradle/launcher/cli/DefaultCommandLineActionFactory.java",
              "type": "",
              "code": "        @Override\n        public void execute(ExecutionListener executionListener) {\n            System.err.println();\n            System.err.println(exception.getMessage());\n            showUsage(System.err, parser, getSuggestedTaskSelector());\n            executionListener.onFailure(exception);\n        }"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "source",
              "startLine": 42,
              "startColumn": 27,
              "endLine": 42,
              "endColumn": 33,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/RegExpNameMapper.java",
              "type": "String",
              "code": "        if (matcher == null) {\n            matcher = pattern.matcher(source);\n        } else {\n            matcher.reset(source);\n        }\n        String result = source;\n        if (matcher.find()) {"
            },
            {
              "step": 1,
              "variableName": "result",
              "startLine": 48,
              "startColumn": 16,
              "endLine": 48,
              "endColumn": 22,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/RegExpNameMapper.java",
              "type": "String",
              "code": "        if (matcher.find()) {\n            result = matcher.replaceFirst(replacement);\n        }\n        return result;\n    }\n}\n"
            },
            {
              "step": 2,
              "variableName": "transformer.transform(value)",
              "startLine": 37,
              "startColumn": 31,
              "endLine": 37,
              "endColumn": 59,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/ChainingTransformer.java",
              "type": "String",
              "code": "    public T transform(T original) {\n        T value = original;\n        for (Transformer<T, T> transformer : transformers) {\n            value = type.cast(transformer.transform(value));\n        }\n        return value;\n    }"
            },
            {
              "step": 3,
              "variableName": "type.cast(transformer.transform(value))",
              "startLine": 37,
              "startColumn": 21,
              "endLine": 37,
              "endColumn": 60,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/ChainingTransformer.java",
              "type": "String",
              "code": "    public T transform(T original) {\n        T value = original;\n        for (Transformer<T, T> transformer : transformers) {\n            value = type.cast(transformer.transform(value));\n        }\n        return value;\n    }"
            },
            {
              "step": 4,
              "variableName": "value",
              "startLine": 39,
              "startColumn": 16,
              "endLine": 39,
              "endColumn": 21,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/ChainingTransformer.java",
              "type": "String",
              "code": "        for (Transformer<T, T> transformer : transformers) {\n            value = type.cast(transformer.transform(value));\n        }\n        return value;\n    }\n\n    public void add(Transformer<T, T> transformer) {"
            },
            {
              "step": 5,
              "variableName": "describer.transform(this)",
              "startLine": 163,
              "startColumn": 16,
              "endLine": 163,
              "endColumn": 41,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/repositories/DefaultMavenArtifactRepository.java",
              "type": "String",
              "code": "\n    @Override\n    public String getDisplayName() {\n        return describer.transform(this);\n    }\n\n    @Override"
            },
            {
              "step": 6,
              "variableName": "describable.getDisplayName()",
              "startLine": 313,
              "startColumn": 35,
              "endLine": 313,
              "endColumn": 63,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "String",
              "code": "        public String getDisplayName() {\n            synchronized (this) {\n                if (displayName == null) {\n                    displayName = describable.getDisplayName();\n                    if (capDisplayName != null || !(describable instanceof DisplayName)) {\n                        describable = null;\n                    }"
            },
            {
              "step": 7,
              "variableName": "displayName",
              "startLine": 318,
              "startColumn": 24,
              "endLine": 318,
              "endColumn": 35,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "String",
              "code": "                        describable = null;\n                    }\n                }\n                return displayName;\n            }\n        }\n    }"
            },
            {
              "step": 8,
              "variableName": "displayName.getDisplayName()",
              "startLine": 772,
              "startColumn": 73,
              "endLine": 772,
              "endColumn": 101,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/configurations/DefaultConfiguration.java",
              "type": "String",
              "code": "                try {\n                    results = resolver.resolveGraph(DefaultConfiguration.this);\n                } catch (Exception e) {\n                    throw exceptionMapper.mapFailure(e, \"dependencies\", displayName.getDisplayName());\n                }\n\n                // Make the new state visible in case a dependency resolution listener queries the result, which requires the new state"
            },
            {
              "step": 9,
              "variableName": "String contextDisplayName",
              "startLine": 68,
              "startColumn": 77,
              "endLine": 68,
              "endColumn": 102,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "String",
              "code": "        return mapFailure(failure, type, displayName);\n    }\n\n    public TypedResolveException mapFailure(Throwable failure, String type, String contextDisplayName) {\n        if (!(failure instanceof TypedResolveException)) {\n            return new TypedResolveException(\n                type,"
            },
            {
              "step": 10,
              "variableName": "contextDisplayName",
              "startLine": 72,
              "startColumn": 17,
              "endLine": 72,
              "endColumn": 35,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "String",
              "code": "        if (!(failure instanceof TypedResolveException)) {\n            return new TypedResolveException(\n                type,\n                contextDisplayName,\n                ImmutableList.of(mapRepositoryOverrideFailure(contextDisplayName, failure))\n            );\n        }"
            },
            {
              "step": 11,
              "variableName": "new TypedResolveException(...) : TypedResolveException",
              "startLine": 70,
              "startColumn": 20,
              "endLine": 74,
              "endColumn": 14,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "TypedResolveException",
              "code": "\n    public TypedResolveException mapFailure(Throwable failure, String type, String contextDisplayName) {\n        if (!(failure instanceof TypedResolveException)) {\n            return new TypedResolveException(\n                type,\n                contextDisplayName,\n                ImmutableList.of(mapRepositoryOverrideFailure(contextDisplayName, failure))"
            },
            {
              "step": 12,
              "variableName": "exceptionMapper.mapFailure(e, \"dependencies\", displayName.getDisplayName())",
              "startLine": 772,
              "startColumn": 27,
              "endLine": 772,
              "endColumn": 102,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/configurations/DefaultConfiguration.java",
              "type": "TypedResolveException",
              "code": "                try {\n                    results = resolver.resolveGraph(DefaultConfiguration.this);\n                } catch (Exception e) {\n                    throw exceptionMapper.mapFailure(e, \"dependencies\", displayName.getDisplayName());\n                }\n\n                // Make the new state visible in case a dependency resolution listener queries the result, which requires the new state"
            },
            {
              "step": 13,
              "variableName": "e",
              "startLine": 772,
              "startColumn": 54,
              "endLine": 772,
              "endColumn": 55,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/configurations/DefaultConfiguration.java",
              "type": "Exception",
              "code": "                try {\n                    results = resolver.resolveGraph(DefaultConfiguration.this);\n                } catch (Exception e) {\n                    throw exceptionMapper.mapFailure(e, \"dependencies\", displayName.getDisplayName());\n                }\n\n                // Make the new state visible in case a dependency resolution listener queries the result, which requires the new state"
            },
            {
              "step": 14,
              "variableName": "Throwable failure",
              "startLine": 68,
              "startColumn": 45,
              "endLine": 68,
              "endColumn": 62,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Throwable",
              "code": "        return mapFailure(failure, type, displayName);\n    }\n\n    public TypedResolveException mapFailure(Throwable failure, String type, String contextDisplayName) {\n        if (!(failure instanceof TypedResolveException)) {\n            return new TypedResolveException(\n                type,"
            },
            {
              "step": 15,
              "variableName": "failure",
              "startLine": 73,
              "startColumn": 83,
              "endLine": 73,
              "endColumn": 90,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Throwable",
              "code": "            return new TypedResolveException(\n                type,\n                contextDisplayName,\n                ImmutableList.of(mapRepositoryOverrideFailure(contextDisplayName, failure))\n            );\n        }\n"
            },
            {
              "step": 16,
              "variableName": "Throwable failure",
              "startLine": 94,
              "startColumn": 78,
              "endLine": 94,
              "endColumn": 95,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Throwable",
              "code": "\n    // TODO: We should handle this exception at the source instead of using instanceof to detect it after it is thrown.\n    //       We should try to avoid catching and analyzing runtime exceptions\n    public Throwable mapRepositoryOverrideFailure(String contextDisplayName, Throwable failure) {\n        if (!(failure instanceof ModuleVersionNotFoundException) || !settingsRepositoriesIgnored()) {\n            return failure;\n        }"
            },
            {
              "step": 17,
              "variableName": "failure",
              "startLine": 108,
              "startColumn": 35,
              "endLine": 108,
              "endColumn": 42,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Throwable",
              "code": "        return new TypedResolveException(\n            \"dependencies\",\n            contextDisplayName,\n            Collections.singleton(failure),\n            resolutions\n        );\n    }"
            },
            {
              "step": 18,
              "variableName": "Collections.singleton(failure)",
              "startLine": 108,
              "startColumn": 13,
              "endLine": 108,
              "endColumn": 43,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Set [<element>] : Throwable",
              "code": "        return new TypedResolveException(\n            \"dependencies\",\n            contextDisplayName,\n            Collections.singleton(failure),\n            resolutions\n        );\n    }"
            },
            {
              "step": 19,
              "variableName": "Collections.singleton(failure)",
              "startLine": 108,
              "startColumn": 13,
              "endLine": 108,
              "endColumn": 43,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Set",
              "code": "        return new TypedResolveException(\n            \"dependencies\",\n            contextDisplayName,\n            Collections.singleton(failure),\n            resolutions\n        );\n    }"
            },
            {
              "step": 20,
              "variableName": "Iterable<? extends Throwable> failures",
              "startLine": 42,
              "startColumn": 67,
              "endLine": 42,
              "endColumn": 105,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ivyservice/TypedResolveException.java",
              "type": "Set",
              "code": "    /**\n     * Creates a new instance with resolutions.\n     */\n    public TypedResolveException(String type, String displayName, Iterable<? extends Throwable> failures, List<String> resolutions) {\n        super(buildMessage(type, displayName), failures, false);\n        this.type = type;\n        this.resolutions = ImmutableList.copyOf(resolutions);"
            },
            {
              "step": 21,
              "variableName": "failures",
              "startLine": 43,
              "startColumn": 48,
              "endLine": 43,
              "endColumn": 56,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ivyservice/TypedResolveException.java",
              "type": "Set",
              "code": "     * Creates a new instance with resolutions.\n     */\n    public TypedResolveException(String type, String displayName, Iterable<? extends Throwable> failures, List<String> resolutions) {\n        super(buildMessage(type, displayName), failures, false);\n        this.type = type;\n        this.resolutions = ImmutableList.copyOf(resolutions);\n    }"
            },
            {
              "step": 22,
              "variableName": "Iterable<? extends Throwable> causes",
              "startLine": 77,
              "startColumn": 48,
              "endLine": 77,
              "endColumn": 84,
              "uri": "gradle-8.14.0/subprojects/core-api/src/main/java/org/gradle/api/artifacts/ResolveException.java",
              "type": "Set",
              "code": "     * @since 8.9\n     */\n    @Incubating\n    protected ResolveException(String message, Iterable<? extends Throwable> causes, @SuppressWarnings(\"unused\") boolean dummy) {\n        super(message, causes);\n    }\n}"
            },
            {
              "step": 23,
              "variableName": "causes",
              "startLine": 78,
              "startColumn": 24,
              "endLine": 78,
              "endColumn": 30,
              "uri": "gradle-8.14.0/subprojects/core-api/src/main/java/org/gradle/api/artifacts/ResolveException.java",
              "type": "Set",
              "code": "     */\n    @Incubating\n    protected ResolveException(String message, Iterable<? extends Throwable> causes, @SuppressWarnings(\"unused\") boolean dummy) {\n        super(message, causes);\n    }\n}\n"
            },
            {
              "step": 24,
              "variableName": "Iterable<? extends Throwable> causes",
              "startLine": 47,
              "startColumn": 55,
              "endLine": 47,
              "endColumn": 91,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "Set",
              "code": "        this.causes.addAll(Arrays.asList(causes));\n    }\n\n    public DefaultMultiCauseException(String message, Iterable<? extends Throwable> causes) {\n        super(message);\n        this.message = message;\n        initCauses(causes);"
            },
            {
              "step": 25,
              "variableName": "causes",
              "startLine": 50,
              "startColumn": 20,
              "endLine": 50,
              "endColumn": 26,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "Set",
              "code": "    public DefaultMultiCauseException(String message, Iterable<? extends Throwable> causes) {\n        super(message);\n        this.message = message;\n        initCauses(causes);\n    }\n\n    public DefaultMultiCauseException(Factory<String> messageFactory) {"
            },
            {
              "step": 26,
              "variableName": "Iterable<? extends Throwable> causes",
              "startLine": 112,
              "startColumn": 28,
              "endLine": 112,
              "endColumn": 64,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "Iterable",
              "code": "        return null;\n    }\n\n    public void initCauses(Iterable<? extends Throwable> causes) {\n        this.causes.clear();\n        for (Throwable cause : causes) {\n            this.causes.add(cause);"
            },
            {
              "step": 27,
              "variableName": "cause",
              "startLine": 115,
              "startColumn": 29,
              "endLine": 115,
              "endColumn": 34,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "Throwable",
              "code": "    public void initCauses(Iterable<? extends Throwable> causes) {\n        this.causes.clear();\n        for (Throwable cause : causes) {\n            this.causes.add(cause);\n        }\n    }\n"
            },
            {
              "step": 28,
              "variableName": "this.causes",
              "startLine": 115,
              "startColumn": 13,
              "endLine": 115,
              "endColumn": 24,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "CopyOnWriteArrayList [<element>] : Throwable",
              "code": "    public void initCauses(Iterable<? extends Throwable> causes) {\n        this.causes.clear();\n        for (Throwable cause : causes) {\n            this.causes.add(cause);\n        }\n    }\n"
            },
            {
              "step": 29,
              "variableName": "this",
              "startLine": 115,
              "startColumn": 13,
              "endLine": 115,
              "endColumn": 17,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "DefaultMultiCauseException [causes, <element>] : Throwable",
              "code": "    public void initCauses(Iterable<? extends Throwable> causes) {\n        this.causes.clear();\n        for (Throwable cause : causes) {\n            this.causes.add(cause);\n        }\n    }\n"
            },
            {
              "step": 30,
              "variableName": "projectConfigurationException",
              "startLine": 57,
              "startColumn": 17,
              "endLine": 57,
              "endColumn": 46,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/DefaultExceptionAnalyser.java",
              "type": "ProjectConfigurationException [causes, <element>] : Throwable",
              "code": "                }\n            }\n            if (!additionalFailures.isEmpty()) {\n                projectConfigurationException.initCauses(additionalFailures);\n                failures.add(transform(projectConfigurationException));\n            }\n        } else if (exception instanceof ServiceCreationException) {"
            },
            {
              "step": 31,
              "variableName": "projectConfigurationException",
              "startLine": 58,
              "startColumn": 40,
              "endLine": 58,
              "endColumn": 69,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/DefaultExceptionAnalyser.java",
              "type": "ProjectConfigurationException [causes, <element>] : Throwable",
              "code": "            }\n            if (!additionalFailures.isEmpty()) {\n                projectConfigurationException.initCauses(additionalFailures);\n                failures.add(transform(projectConfigurationException));\n            }\n        } else if (exception instanceof ServiceCreationException) {\n            failures.add(transform(new InitializationException(exception)));"
            },
            {
              "step": 32,
              "variableName": "transform(projectConfigurationException)",
              "startLine": 58,
              "startColumn": 30,
              "endLine": 58,
              "endColumn": 70,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/DefaultExceptionAnalyser.java",
              "type": "LocationAwareException",
              "code": "            }\n            if (!additionalFailures.isEmpty()) {\n                projectConfigurationException.initCauses(additionalFailures);\n                failures.add(transform(projectConfigurationException));\n            }\n        } else if (exception instanceof ServiceCreationException) {\n            failures.add(transform(new InitializationException(exception)));"
            },
            {
              "step": 33,
              "variableName": "failures",
              "startLine": 58,
              "startColumn": 17,
              "endLine": 58,
              "endColumn": 25,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/DefaultExceptionAnalyser.java",
              "type": "Collection [<element>] : LocationAwareException",
              "code": "            }\n            if (!additionalFailures.isEmpty()) {\n                projectConfigurationException.initCauses(additionalFailures);\n                failures.add(transform(projectConfigurationException));\n            }\n        } else if (exception instanceof ServiceCreationException) {\n            failures.add(transform(new InitializationException(exception)));"
            },
            {
              "step": 34,
              "variableName": "result",
              "startLine": 53,
              "startColumn": 54,
              "endLine": 53,
              "endColumn": 60,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/MultipleBuildFailuresExceptionAnalyser.java",
              "type": "ArrayList [<element>] : LocationAwareException",
              "code": "        for (Throwable failure : failures) {\n            if (failure instanceof MultipleBuildFailures) {\n                for (Throwable cause : ((MultipleBuildFailures) failure).getCauses()) {\n                    collector.collectFailures(cause, result);\n                }\n            } else {\n                collector.collectFailures(failure, result);"
            },
            {
              "step": 35,
              "variableName": "result",
              "startLine": 60,
              "startColumn": 39,
              "endLine": 60,
              "endColumn": 45,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/MultipleBuildFailuresExceptionAnalyser.java",
              "type": "ArrayList [<element>] : LocationAwareException",
              "code": "            }\n        }\n        if (result.size() == 1 && result.get(0) instanceof RuntimeException) {\n            return (RuntimeException) result.get(0);\n        } else {\n            return new MultipleBuildFailures(result);\n        }"
            },
            {
              "step": 36,
              "variableName": "result.get(0)",
              "startLine": 60,
              "startColumn": 39,
              "endLine": 60,
              "endColumn": 52,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/MultipleBuildFailuresExceptionAnalyser.java",
              "type": "LocationAwareException",
              "code": "            }\n        }\n        if (result.size() == 1 && result.get(0) instanceof RuntimeException) {\n            return (RuntimeException) result.get(0);\n        } else {\n            return new MultipleBuildFailures(result);\n        }"
            },
            {
              "step": 37,
              "variableName": "(RuntimeException) result.get(0)",
              "startLine": 60,
              "startColumn": 20,
              "endLine": 60,
              "endColumn": 52,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/MultipleBuildFailuresExceptionAnalyser.java",
              "type": "LocationAwareException",
              "code": "            }\n        }\n        if (result.size() == 1 && result.get(0) instanceof RuntimeException) {\n            return (RuntimeException) result.get(0);\n        } else {\n            return new MultipleBuildFailures(result);\n        }"
            },
            {
              "step": 38,
              "variableName": "exceptionAnalyser.transform(finishFailures)",
              "startLine": 72,
              "startColumn": 16,
              "endLine": 72,
              "endColumn": 59,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/internal/buildtree/DefaultBuildTreeFinishExecutor.java",
              "type": "LocationAwareException",
              "code": "            finishFailures.addAll(result.getFailures());\n        });\n\n        return exceptionAnalyser.transform(finishFailures);\n    }\n}\n"
            },
            {
              "step": 39,
              "variableName": "delegate.finishBuildTree(failures)",
              "startLine": 46,
              "startColumn": 28,
              "endLine": 46,
              "endColumn": 62,
              "uri": "gradle-8.14.0/subprojects/composite-builds/src/main/java/org/gradle/composite/internal/OperationFiringBuildTreeFinishExecutor.java",
              "type": "LocationAwareException",
              "code": "            @Override\n            public RuntimeException call(BuildOperationContext context) {\n                try {\n                    return delegate.finishBuildTree(failures);\n                } finally {\n                    context.setResult(RESULT);\n                }"
            },
            {
              "step": 40,
              "variableName": "buildOperation.call(context)",
              "startLine": 239,
              "startColumn": 21,
              "endLine": 239,
              "endColumn": 49,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/testFixtures/java/org/gradle/internal/operations/TestBuildOperationRunner.java",
              "type": "LocationAwareException",
              "code": "            TestBuildOperationContext context = new TestBuildOperationContext(record);\n            T t;\n            try {\n                t = buildOperation.call(context);\n            } catch (Throwable failure) {\n                if (record.failure == null) {\n                    record.failure = failure;"
            },
            {
              "step": 41,
              "variableName": "t",
              "startLine": 246,
              "startColumn": 20,
              "endLine": 246,
              "endColumn": 21,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/testFixtures/java/org/gradle/internal/operations/TestBuildOperationRunner.java",
              "type": "LocationAwareException",
              "code": "                }\n                throw throwAsUncheckedException(failure);\n            }\n            return t;\n        }\n\n        private <O extends BuildOperation> void execute(O buildOperation, BuildOperationWorker<O> worker) {"
            },
            {
              "step": 42,
              "variableName": "log.call(buildOperation)",
              "startLine": 51,
              "startColumn": 16,
              "endLine": 51,
              "endColumn": 40,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/testFixtures/java/org/gradle/internal/operations/TestBuildOperationRunner.java",
              "type": "LocationAwareException",
              "code": "\n    @Override\n    public <T> T call(CallableBuildOperation<T> buildOperation) {\n        return log.call(buildOperation);\n    }\n\n    @Override"
            },
            {
              "step": 43,
              "variableName": "ca",
              "startLine": 115,
              "startColumn": 5,
              "endLine": 121,
              "endColumn": 7,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/configurationcache/ConfigurationCacheBuildOperations.kt",
              "type": "LocationAwareException",
              "code": "\ninternal\nfun <T : Any> BuildOperationRunner.withModelLoadOperation(block: () -> T): T =\n    call(object : CallableBuildOperation<T> {\n        override fun description(): BuildOperationDescriptor.Builder = BuildOperationDescriptor\n            .displayName(\"Load model from configuration cache\")\n            .progressDisplayName(\"Loading model from configuration cache\")"
            },
            {
              "step": 44,
              "variableName": "ca",
              "startLine": 115,
              "startColumn": 5,
              "endLine": 121,
              "endColumn": 7,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/configurationcache/ConfigurationCacheBuildOperations.kt",
              "type": "LocationAwareException",
              "code": "\ninternal\nfun <T : Any> BuildOperationRunner.withModelLoadOperation(block: () -> T): T =\n    call(object : CallableBuildOperation<T> {\n        override fun description(): BuildOperationDescriptor.Builder = BuildOperationDescriptor\n            .displayName(\"Load model from configuration cache\")\n            .progressDisplayName(\"Loading model from configuration cache\")"
            },
            {
              "step": 45,
              "variableName": "b",
              "startLine": 635,
              "startColumn": 9,
              "endLine": 641,
              "endColumn": 10,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "        // No need to record the `ClassLoaderScope` tree when loading\n        scopeRegistryListener.dispose()\n\n        buildOperationRunner.withModelLoadOperation {\n            val storeLoadResult = entryStore.useForStateLoad(StateType.Model) { stateFile: ConfigurationCacheStateFile ->\n                cacheIO.readModelFrom(stateFile)\n            }"
            },
            {
              "step": 46,
              "variableName": "block()",
              "startLine": 668,
              "startColumn": 22,
              "endLine": 668,
              "endColumn": 29,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "    private\n    inline fun <T> runAtConfigurationTime(block: () -> T): T {\n        prepareConfigurationTimeBarrier()\n        val result = block()\n        crossConfigurationTimeBarrier()\n        return result\n    }"
            },
            {
              "step": 47,
              "variableName": "result",
              "startLine": 670,
              "startColumn": 16,
              "endLine": 670,
              "endColumn": 22,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "        prepareConfigurationTimeBarrier()\n        val result = block()\n        crossConfigurationTimeBarrier()\n        return result\n    }\n\n    private"
            },
            {
              "step": 48,
              "variableName": "runAtConfigurationTime(...) : LocationAwareException",
              "startLine": 631,
              "startColumn": 28,
              "endLine": 642,
              "endColumn": 6,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "    data class LoadResultMetadata(val originInvocationId: String? = null)\n\n    private\n    fun loadModel(): Any = runAtConfigurationTime {\n        // No need to record the `ClassLoaderScope` tree when loading\n        scopeRegistryListener.dispose()\n"
            },
            {
              "step": 49,
              "variableName": "loadModel()",
              "startLine": 268,
              "startColumn": 20,
              "endLine": 268,
              "endColumn": 31,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "    override fun <T : Any> loadOrCreateModel(creator: () -> T): T {\n        if (isLoaded) {\n            runLoadedSideEffects()\n            return loadModel().uncheckedCast()\n        }\n\n        return runWorkThatContributesToCacheEntry {"
            },
            {
              "step": 50,
              "variableName": "Any",
              "startLine": 22,
              "startColumn": 15,
              "endLine": 22,
              "endColumn": 18,
              "uri": "gradle-8.14.0/platforms/core-configuration/stdlib-kotlin-extensions/src/main/kotlin/org/gradle/internal/extensions/stdlib/CastExtensions.kt",
              "type": "Object",
              "code": "import org.gradle.internal.Cast\n\n\nfun <T : Any> Any.uncheckedCast(): T =\n    Cast.uncheckedNonnullCast(this)\n"
            },
            {
              "step": 51,
              "variableName": "this",
              "startLine": 23,
              "startColumn": 31,
              "endLine": 23,
              "endColumn": 35,
              "uri": "gradle-8.14.0/platforms/core-configuration/stdlib-kotlin-extensions/src/main/kotlin/org/gradle/internal/extensions/stdlib/CastExtensions.kt",
              "type": "Object",
              "code": "\n\nfun <T : Any> Any.uncheckedCast(): T =\n    Cast.uncheckedNonnullCast(this)\n"
            },
            {
              "step": 52,
              "variableName": "Object object",
              "startLine": 76,
              "startColumn": 46,
              "endLine": 76,
              "endColumn": 59,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/Cast.java",
              "type": "Object",
              "code": "    }\n\n    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})\n    public static <T> T uncheckedNonnullCast(Object object) {\n        return (T) object;\n    }\n}"
            },
            {
              "step": 53,
              "variableName": "(T) object",
              "startLine": 77,
              "startColumn": 16,
              "endLine": 77,
              "endColumn": 26,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/Cast.java",
              "type": "Object",
              "code": "\n    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})\n    public static <T> T uncheckedNonnullCast(Object object) {\n        return (T) object;\n    }\n}\n"
            },
            {
              "step": 54,
              "variableName": "Cast.uncheckedNonnullCast(collectionType)",
              "startLine": 223,
              "startColumn": 16,
              "endLine": 223,
              "endColumn": 57,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/api/internal/provider/AbstractCollectionProperty.java",
              "type": "Class",
              "code": "    @Override\n    @Nonnull\n    public Class<C> getType() {\n        return Cast.uncheckedNonnullCast(collectionType);\n    }\n\n    @Override"
            },
            {
              "step": 55,
              "variableName": "provider.getType()",
              "startLine": 41,
              "startColumn": 35,
              "endLine": 41,
              "endColumn": 53,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/api/internal/provider/OrElseFixedValueProvider.java",
              "type": "Class",
              "code": "    @Nullable\n    @Override\n    public Class<T> getType() {\n        return Cast.uncheckedCast(provider.getType());\n    }\n\n    @Override"
            },
            {
              "step": 56,
              "variableName": "@Nullable Object object",
              "startLine": 71,
              "startColumn": 39,
              "endLine": 71,
              "endColumn": 62,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/Cast.java",
              "type": "Object",
              "code": "\n    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})\n    @Nullable\n    public static <T> T uncheckedCast(@Nullable Object object) {\n        return (T) object;\n    }\n"
            },
            {
              "step": 57,
              "variableName": "(T) object",
              "startLine": 72,
              "startColumn": 16,
              "endLine": 72,
              "endColumn": 26,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/Cast.java",
              "type": "Object",
              "code": "    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})\n    @Nullable\n    public static <T> T uncheckedCast(@Nullable Object object) {\n        return (T) object;\n    }\n\n    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})"
            },
            {
              "step": 58,
              "variableName": "Cast.uncheckedCast(value)",
              "startLine": 153,
              "startColumn": 16,
              "endLine": 153,
              "endColumn": 41,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/api/internal/attributes/DefaultImmutableAttributesContainer.java",
              "type": "Object",
              "code": "            value = isolatable.coerce(key.getType());\n        }\n\n        return Cast.uncheckedCast(value);\n    }\n\n    /**"
            },
            {
              "step": 59,
              "variableName": "attributes.getAttribute(ProjectInternal.STATUS_ATTRIBUTE)",
              "startLine": 48,
              "startColumn": 16,
              "endLine": 48,
              "endColumn": 73,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ivyservice/ivyresolve/UserProvidedMetadata.java",
              "type": "String",
              "code": "\n    @Override\n    public String getStatus() {\n        return attributes.getAttribute(ProjectInternal.STATUS_ATTRIBUTE);\n    }\n\n    @Override"
            },
            {
              "step": 60,
              "variableName": "updatedMetadata.getStatus()",
              "startLine": 206,
              "startColumn": 162,
              "endLine": 206,
              "endColumn": 189,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/dsl/DefaultComponentMetadataProcessor.java",
              "type": "String",
              "code": "            updatedMetadata = details.asImmutable();\n        }\n        if (!updatedMetadata.getStatusScheme().contains(updatedMetadata.getStatus())) {\n            throw new ModuleVersionResolveException(updatedMetadata.getId(), () -> String.format(\"Unexpected status '%s' specified for %s. Expected one of: %s\", updatedMetadata.getStatus(), updatedMetadata.getId().toString(), updatedMetadata.getStatusScheme()));\n        }\n        return updatedMetadata;\n    }"
            },
            {
              "step": 61,
              "variableName": "String.format(\"Unexpected status '%s' specified for %s. Expected one of: %s\", updatedMetadata.getStatus(), updatedMetadata.getId().toString(), updatedMetadata.getStatusScheme())",
              "startLine": 206,
              "startColumn": 84,
              "endLine": 206,
              "endColumn": 261,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/dsl/DefaultComponentMetadataProcessor.java",
              "type": "Object[] [[]] : String",
              "code": "            updatedMetadata = details.asImmutable();\n        }\n        if (!updatedMetadata.getStatusScheme().contains(updatedMetadata.getStatus())) {\n            throw new ModuleVersionResolveException(updatedMetadata.getId(), () -> String.format(\"Unexpected status '%s' specified for %s. Expected one of: %s\", updatedMetadata.getStatus(), updatedMetadata.getId().toString(), updatedMetadata.getStatusScheme()));\n        }\n        return updatedMetadata;\n    }"
            },
            {
              "step": 62,
              "variableName": "String.format(\"Unexpected status '%s' specified for %s. Expected one of: %s\", updatedMetadata.getStatus(), updatedMetadata.getId().toString(), updatedMetadata.getStatusScheme())",
              "startLine": 206,
              "startColumn": 84,
              "endLine": 206,
              "endColumn": 261,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/dsl/DefaultComponentMetadataProcessor.java",
              "type": "String",
              "code": "            updatedMetadata = details.asImmutable();\n        }\n        if (!updatedMetadata.getStatusScheme().contains(updatedMetadata.getStatus())) {\n            throw new ModuleVersionResolveException(updatedMetadata.getId(), () -> String.format(\"Unexpected status '%s' specified for %s. Expected one of: %s\", updatedMetadata.getStatus(), updatedMetadata.getId().toString(), updatedMetadata.getStatusScheme()));\n        }\n        return updatedMetadata;\n    }"
            },
            {
              "step": 63,
              "variableName": "messageFactory.create()",
              "startLine": 173,
              "startColumn": 23,
              "endLine": 173,
              "endColumn": 46,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "String",
              "code": "    @Override\n    public String getMessage() {\n        if (messageFactory != null) {\n            message = messageFactory.create();\n            messageFactory = null;\n            return message;\n        }"
            },
            {
              "step": 64,
              "variableName": "message",
              "startLine": 175,
              "startColumn": 20,
              "endLine": 175,
              "endColumn": 27,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "String",
              "code": "        if (messageFactory != null) {\n            message = messageFactory.create();\n            messageFactory = null;\n            return message;\n        }\n        return message;\n    }"
            },
            {
              "step": 65,
              "variableName": "exception.getMessage()",
              "startLine": 196,
              "startColumn": 32,
              "endLine": 196,
              "endColumn": 54,
              "uri": "gradle-8.14.0/platforms/core-runtime/gradle-cli/src/main/java/org/gradle/launcher/cli/DefaultCommandLineActionFactory.java",
              "type": "",
              "code": "        @Override\n        public void execute(ExecutionListener executionListener) {\n            System.err.println();\n            System.err.println(exception.getMessage());\n            showUsage(System.err, parser, getSuggestedTaskSelector());\n            executionListener.onFailure(exception);\n        }"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "src",
              "startLine": 115,
              "startColumn": 13,
              "endLine": 115,
              "endColumn": 16,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "Object",
              "code": "    }\n\n    private static void appendDisplayName(Object src, StringBuilder stringBuilder) {\n        if (src instanceof Describable) {\n            Describable describable = (Describable) src;\n            stringBuilder.append(describable.getDisplayName());\n        } else {"
            },
            {
              "step": 1,
              "variableName": "src",
              "startLine": 119,
              "startColumn": 34,
              "endLine": 119,
              "endColumn": 37,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "Object",
              "code": "            Describable describable = (Describable) src;\n            stringBuilder.append(describable.getDisplayName());\n        } else {\n            stringBuilder.append(src.toString());\n        }\n    }\n"
            },
            {
              "step": 2,
              "variableName": "toString",
              "startLine": 397,
              "startColumn": 19,
              "endLine": 397,
              "endColumn": 27,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "TestFile",
              "code": "    }\n\n    @Override\n    public String toString() {\n        return getPath();\n    }\n"
            },
            {
              "step": 3,
              "variableName": "getPath()",
              "startLine": 398,
              "startColumn": 16,
              "endLine": 398,
              "endColumn": 25,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "TestFile",
              "code": "\n    @Override\n    public String toString() {\n        return getPath();\n    }\n\n    public TestFile writelns(Iterable<String> lines) {"
            },
            {
              "step": 4,
              "variableName": "getPath()",
              "startLine": 398,
              "startColumn": 16,
              "endLine": 398,
              "endColumn": 25,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "String",
              "code": "\n    @Override\n    public String toString() {\n        return getPath();\n    }\n\n    public TestFile writelns(Iterable<String> lines) {"
            },
            {
              "step": 5,
              "variableName": "src.toString()",
              "startLine": 119,
              "startColumn": 34,
              "endLine": 119,
              "endColumn": 48,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "String",
              "code": "            Describable describable = (Describable) src;\n            stringBuilder.append(describable.getDisplayName());\n        } else {\n            stringBuilder.append(src.toString());\n        }\n    }\n"
            },
            {
              "step": 6,
              "variableName": "stringBuilder",
              "startLine": 119,
              "startColumn": 13,
              "endLine": 119,
              "endColumn": 26,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "StringBuilder",
              "code": "            Describable describable = (Describable) src;\n            stringBuilder.append(describable.getDisplayName());\n        } else {\n            stringBuilder.append(src.toString());\n        }\n    }\n"
            },
            {
              "step": 7,
              "variableName": "builder",
              "startLine": 202,
              "startColumn": 38,
              "endLine": 202,
              "endColumn": 45,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "StringBuilder",
              "code": "            StringBuilder builder = new StringBuilder(48);\n            appendDisplayName(part1, builder);\n            builder.append(' ');\n            appendDisplayName(part2, builder);\n            return builder.toString();\n        }\n"
            },
            {
              "step": 8,
              "variableName": "builder",
              "startLine": 203,
              "startColumn": 20,
              "endLine": 203,
              "endColumn": 27,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "StringBuilder",
              "code": "            appendDisplayName(part1, builder);\n            builder.append(' ');\n            appendDisplayName(part2, builder);\n            return builder.toString();\n        }\n\n        @Override"
            },
            {
              "step": 9,
              "variableName": "builder.toString()",
              "startLine": 203,
              "startColumn": 20,
              "endLine": 203,
              "endColumn": 38,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "String",
              "code": "            appendDisplayName(part1, builder);\n            builder.append(' ');\n            appendDisplayName(part2, builder);\n            return builder.toString();\n        }\n\n        @Override"
            },
            {
              "step": 10,
              "variableName": "describable.getDisplayName()",
              "startLine": 313,
              "startColumn": 35,
              "endLine": 313,
              "endColumn": 63,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "String",
              "code": "        public String getDisplayName() {\n            synchronized (this) {\n                if (displayName == null) {\n                    displayName = describable.getDisplayName();\n                    if (capDisplayName != null || !(describable instanceof DisplayName)) {\n                        describable = null;\n                    }"
            },
            {
              "step": 11,
              "variableName": "displayName",
              "startLine": 318,
              "startColumn": 24,
              "endLine": 318,
              "endColumn": 35,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "String",
              "code": "                        describable = null;\n                    }\n                }\n                return displayName;\n            }\n        }\n    }"
            },
            {
              "step": 12,
              "variableName": "displayName.getDisplayName()",
              "startLine": 772,
              "startColumn": 73,
              "endLine": 772,
              "endColumn": 101,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/configurations/DefaultConfiguration.java",
              "type": "String",
              "code": "                try {\n                    results = resolver.resolveGraph(DefaultConfiguration.this);\n                } catch (Exception e) {\n                    throw exceptionMapper.mapFailure(e, \"dependencies\", displayName.getDisplayName());\n                }\n\n                // Make the new state visible in case a dependency resolution listener queries the result, which requires the new state"
            },
            {
              "step": 13,
              "variableName": "String contextDisplayName",
              "startLine": 68,
              "startColumn": 77,
              "endLine": 68,
              "endColumn": 102,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "String",
              "code": "        return mapFailure(failure, type, displayName);\n    }\n\n    public TypedResolveException mapFailure(Throwable failure, String type, String contextDisplayName) {\n        if (!(failure instanceof TypedResolveException)) {\n            return new TypedResolveException(\n                type,"
            },
            {
              "step": 14,
              "variableName": "contextDisplayName",
              "startLine": 72,
              "startColumn": 17,
              "endLine": 72,
              "endColumn": 35,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "String",
              "code": "        if (!(failure instanceof TypedResolveException)) {\n            return new TypedResolveException(\n                type,\n                contextDisplayName,\n                ImmutableList.of(mapRepositoryOverrideFailure(contextDisplayName, failure))\n            );\n        }"
            },
            {
              "step": 15,
              "variableName": "new TypedResolveException(...) : TypedResolveException",
              "startLine": 70,
              "startColumn": 20,
              "endLine": 74,
              "endColumn": 14,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "TypedResolveException",
              "code": "\n    public TypedResolveException mapFailure(Throwable failure, String type, String contextDisplayName) {\n        if (!(failure instanceof TypedResolveException)) {\n            return new TypedResolveException(\n                type,\n                contextDisplayName,\n                ImmutableList.of(mapRepositoryOverrideFailure(contextDisplayName, failure))"
            },
            {
              "step": 16,
              "variableName": "exceptionMapper.mapFailure(e, \"dependencies\", displayName.getDisplayName())",
              "startLine": 772,
              "startColumn": 27,
              "endLine": 772,
              "endColumn": 102,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/configurations/DefaultConfiguration.java",
              "type": "TypedResolveException",
              "code": "                try {\n                    results = resolver.resolveGraph(DefaultConfiguration.this);\n                } catch (Exception e) {\n                    throw exceptionMapper.mapFailure(e, \"dependencies\", displayName.getDisplayName());\n                }\n\n                // Make the new state visible in case a dependency resolution listener queries the result, which requires the new state"
            },
            {
              "step": 17,
              "variableName": "e",
              "startLine": 772,
              "startColumn": 54,
              "endLine": 772,
              "endColumn": 55,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/configurations/DefaultConfiguration.java",
              "type": "Exception",
              "code": "                try {\n                    results = resolver.resolveGraph(DefaultConfiguration.this);\n                } catch (Exception e) {\n                    throw exceptionMapper.mapFailure(e, \"dependencies\", displayName.getDisplayName());\n                }\n\n                // Make the new state visible in case a dependency resolution listener queries the result, which requires the new state"
            },
            {
              "step": 18,
              "variableName": "Throwable failure",
              "startLine": 68,
              "startColumn": 45,
              "endLine": 68,
              "endColumn": 62,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Throwable",
              "code": "        return mapFailure(failure, type, displayName);\n    }\n\n    public TypedResolveException mapFailure(Throwable failure, String type, String contextDisplayName) {\n        if (!(failure instanceof TypedResolveException)) {\n            return new TypedResolveException(\n                type,"
            },
            {
              "step": 19,
              "variableName": "failure",
              "startLine": 73,
              "startColumn": 83,
              "endLine": 73,
              "endColumn": 90,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Throwable",
              "code": "            return new TypedResolveException(\n                type,\n                contextDisplayName,\n                ImmutableList.of(mapRepositoryOverrideFailure(contextDisplayName, failure))\n            );\n        }\n"
            },
            {
              "step": 20,
              "variableName": "Throwable failure",
              "startLine": 94,
              "startColumn": 78,
              "endLine": 94,
              "endColumn": 95,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Throwable",
              "code": "\n    // TODO: We should handle this exception at the source instead of using instanceof to detect it after it is thrown.\n    //       We should try to avoid catching and analyzing runtime exceptions\n    public Throwable mapRepositoryOverrideFailure(String contextDisplayName, Throwable failure) {\n        if (!(failure instanceof ModuleVersionNotFoundException) || !settingsRepositoriesIgnored()) {\n            return failure;\n        }"
            },
            {
              "step": 21,
              "variableName": "failure",
              "startLine": 108,
              "startColumn": 35,
              "endLine": 108,
              "endColumn": 42,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Throwable",
              "code": "        return new TypedResolveException(\n            \"dependencies\",\n            contextDisplayName,\n            Collections.singleton(failure),\n            resolutions\n        );\n    }"
            },
            {
              "step": 22,
              "variableName": "Collections.singleton(failure)",
              "startLine": 108,
              "startColumn": 13,
              "endLine": 108,
              "endColumn": 43,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Set [<element>] : Throwable",
              "code": "        return new TypedResolveException(\n            \"dependencies\",\n            contextDisplayName,\n            Collections.singleton(failure),\n            resolutions\n        );\n    }"
            },
            {
              "step": 23,
              "variableName": "Collections.singleton(failure)",
              "startLine": 108,
              "startColumn": 13,
              "endLine": 108,
              "endColumn": 43,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Set",
              "code": "        return new TypedResolveException(\n            \"dependencies\",\n            contextDisplayName,\n            Collections.singleton(failure),\n            resolutions\n        );\n    }"
            },
            {
              "step": 24,
              "variableName": "Iterable<? extends Throwable> failures",
              "startLine": 42,
              "startColumn": 67,
              "endLine": 42,
              "endColumn": 105,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ivyservice/TypedResolveException.java",
              "type": "Set",
              "code": "    /**\n     * Creates a new instance with resolutions.\n     */\n    public TypedResolveException(String type, String displayName, Iterable<? extends Throwable> failures, List<String> resolutions) {\n        super(buildMessage(type, displayName), failures, false);\n        this.type = type;\n        this.resolutions = ImmutableList.copyOf(resolutions);"
            },
            {
              "step": 25,
              "variableName": "failures",
              "startLine": 43,
              "startColumn": 48,
              "endLine": 43,
              "endColumn": 56,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ivyservice/TypedResolveException.java",
              "type": "Set",
              "code": "     * Creates a new instance with resolutions.\n     */\n    public TypedResolveException(String type, String displayName, Iterable<? extends Throwable> failures, List<String> resolutions) {\n        super(buildMessage(type, displayName), failures, false);\n        this.type = type;\n        this.resolutions = ImmutableList.copyOf(resolutions);\n    }"
            },
            {
              "step": 26,
              "variableName": "Iterable<? extends Throwable> causes",
              "startLine": 77,
              "startColumn": 48,
              "endLine": 77,
              "endColumn": 84,
              "uri": "gradle-8.14.0/subprojects/core-api/src/main/java/org/gradle/api/artifacts/ResolveException.java",
              "type": "Set",
              "code": "     * @since 8.9\n     */\n    @Incubating\n    protected ResolveException(String message, Iterable<? extends Throwable> causes, @SuppressWarnings(\"unused\") boolean dummy) {\n        super(message, causes);\n    }\n}"
            },
            {
              "step": 27,
              "variableName": "causes",
              "startLine": 78,
              "startColumn": 24,
              "endLine": 78,
              "endColumn": 30,
              "uri": "gradle-8.14.0/subprojects/core-api/src/main/java/org/gradle/api/artifacts/ResolveException.java",
              "type": "Set",
              "code": "     */\n    @Incubating\n    protected ResolveException(String message, Iterable<? extends Throwable> causes, @SuppressWarnings(\"unused\") boolean dummy) {\n        super(message, causes);\n    }\n}\n"
            },
            {
              "step": 28,
              "variableName": "Iterable<? extends Throwable> causes",
              "startLine": 47,
              "startColumn": 55,
              "endLine": 47,
              "endColumn": 91,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "Set",
              "code": "        this.causes.addAll(Arrays.asList(causes));\n    }\n\n    public DefaultMultiCauseException(String message, Iterable<? extends Throwable> causes) {\n        super(message);\n        this.message = message;\n        initCauses(causes);"
            },
            {
              "step": 29,
              "variableName": "causes",
              "startLine": 50,
              "startColumn": 20,
              "endLine": 50,
              "endColumn": 26,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "Set",
              "code": "    public DefaultMultiCauseException(String message, Iterable<? extends Throwable> causes) {\n        super(message);\n        this.message = message;\n        initCauses(causes);\n    }\n\n    public DefaultMultiCauseException(Factory<String> messageFactory) {"
            },
            {
              "step": 30,
              "variableName": "Iterable<? extends Throwable> causes",
              "startLine": 112,
              "startColumn": 28,
              "endLine": 112,
              "endColumn": 64,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "Iterable",
              "code": "        return null;\n    }\n\n    public void initCauses(Iterable<? extends Throwable> causes) {\n        this.causes.clear();\n        for (Throwable cause : causes) {\n            this.causes.add(cause);"
            },
            {
              "step": 31,
              "variableName": "cause",
              "startLine": 115,
              "startColumn": 29,
              "endLine": 115,
              "endColumn": 34,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "Throwable",
              "code": "    public void initCauses(Iterable<? extends Throwable> causes) {\n        this.causes.clear();\n        for (Throwable cause : causes) {\n            this.causes.add(cause);\n        }\n    }\n"
            },
            {
              "step": 32,
              "variableName": "this.causes",
              "startLine": 115,
              "startColumn": 13,
              "endLine": 115,
              "endColumn": 24,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "CopyOnWriteArrayList [<element>] : Throwable",
              "code": "    public void initCauses(Iterable<? extends Throwable> causes) {\n        this.causes.clear();\n        for (Throwable cause : causes) {\n            this.causes.add(cause);\n        }\n    }\n"
            },
            {
              "step": 33,
              "variableName": "this",
              "startLine": 115,
              "startColumn": 13,
              "endLine": 115,
              "endColumn": 17,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "DefaultMultiCauseException [causes, <element>] : Throwable",
              "code": "    public void initCauses(Iterable<? extends Throwable> causes) {\n        this.causes.clear();\n        for (Throwable cause : causes) {\n            this.causes.add(cause);\n        }\n    }\n"
            },
            {
              "step": 34,
              "variableName": "projectConfigurationException",
              "startLine": 57,
              "startColumn": 17,
              "endLine": 57,
              "endColumn": 46,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/DefaultExceptionAnalyser.java",
              "type": "ProjectConfigurationException [causes, <element>] : Throwable",
              "code": "                }\n            }\n            if (!additionalFailures.isEmpty()) {\n                projectConfigurationException.initCauses(additionalFailures);\n                failures.add(transform(projectConfigurationException));\n            }\n        } else if (exception instanceof ServiceCreationException) {"
            },
            {
              "step": 35,
              "variableName": "projectConfigurationException",
              "startLine": 58,
              "startColumn": 40,
              "endLine": 58,
              "endColumn": 69,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/DefaultExceptionAnalyser.java",
              "type": "ProjectConfigurationException [causes, <element>] : Throwable",
              "code": "            }\n            if (!additionalFailures.isEmpty()) {\n                projectConfigurationException.initCauses(additionalFailures);\n                failures.add(transform(projectConfigurationException));\n            }\n        } else if (exception instanceof ServiceCreationException) {\n            failures.add(transform(new InitializationException(exception)));"
            },
            {
              "step": 36,
              "variableName": "transform(projectConfigurationException)",
              "startLine": 58,
              "startColumn": 30,
              "endLine": 58,
              "endColumn": 70,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/DefaultExceptionAnalyser.java",
              "type": "LocationAwareException",
              "code": "            }\n            if (!additionalFailures.isEmpty()) {\n                projectConfigurationException.initCauses(additionalFailures);\n                failures.add(transform(projectConfigurationException));\n            }\n        } else if (exception instanceof ServiceCreationException) {\n            failures.add(transform(new InitializationException(exception)));"
            },
            {
              "step": 37,
              "variableName": "failures",
              "startLine": 58,
              "startColumn": 17,
              "endLine": 58,
              "endColumn": 25,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/DefaultExceptionAnalyser.java",
              "type": "Collection [<element>] : LocationAwareException",
              "code": "            }\n            if (!additionalFailures.isEmpty()) {\n                projectConfigurationException.initCauses(additionalFailures);\n                failures.add(transform(projectConfigurationException));\n            }\n        } else if (exception instanceof ServiceCreationException) {\n            failures.add(transform(new InitializationException(exception)));"
            },
            {
              "step": 38,
              "variableName": "result",
              "startLine": 53,
              "startColumn": 54,
              "endLine": 53,
              "endColumn": 60,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/MultipleBuildFailuresExceptionAnalyser.java",
              "type": "ArrayList [<element>] : LocationAwareException",
              "code": "        for (Throwable failure : failures) {\n            if (failure instanceof MultipleBuildFailures) {\n                for (Throwable cause : ((MultipleBuildFailures) failure).getCauses()) {\n                    collector.collectFailures(cause, result);\n                }\n            } else {\n                collector.collectFailures(failure, result);"
            },
            {
              "step": 39,
              "variableName": "result",
              "startLine": 60,
              "startColumn": 39,
              "endLine": 60,
              "endColumn": 45,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/MultipleBuildFailuresExceptionAnalyser.java",
              "type": "ArrayList [<element>] : LocationAwareException",
              "code": "            }\n        }\n        if (result.size() == 1 && result.get(0) instanceof RuntimeException) {\n            return (RuntimeException) result.get(0);\n        } else {\n            return new MultipleBuildFailures(result);\n        }"
            },
            {
              "step": 40,
              "variableName": "result.get(0)",
              "startLine": 60,
              "startColumn": 39,
              "endLine": 60,
              "endColumn": 52,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/MultipleBuildFailuresExceptionAnalyser.java",
              "type": "LocationAwareException",
              "code": "            }\n        }\n        if (result.size() == 1 && result.get(0) instanceof RuntimeException) {\n            return (RuntimeException) result.get(0);\n        } else {\n            return new MultipleBuildFailures(result);\n        }"
            },
            {
              "step": 41,
              "variableName": "(RuntimeException) result.get(0)",
              "startLine": 60,
              "startColumn": 20,
              "endLine": 60,
              "endColumn": 52,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/MultipleBuildFailuresExceptionAnalyser.java",
              "type": "LocationAwareException",
              "code": "            }\n        }\n        if (result.size() == 1 && result.get(0) instanceof RuntimeException) {\n            return (RuntimeException) result.get(0);\n        } else {\n            return new MultipleBuildFailures(result);\n        }"
            },
            {
              "step": 42,
              "variableName": "exceptionAnalyser.transform(finishFailures)",
              "startLine": 72,
              "startColumn": 16,
              "endLine": 72,
              "endColumn": 59,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/internal/buildtree/DefaultBuildTreeFinishExecutor.java",
              "type": "LocationAwareException",
              "code": "            finishFailures.addAll(result.getFailures());\n        });\n\n        return exceptionAnalyser.transform(finishFailures);\n    }\n}\n"
            },
            {
              "step": 43,
              "variableName": "delegate.finishBuildTree(failures)",
              "startLine": 46,
              "startColumn": 28,
              "endLine": 46,
              "endColumn": 62,
              "uri": "gradle-8.14.0/subprojects/composite-builds/src/main/java/org/gradle/composite/internal/OperationFiringBuildTreeFinishExecutor.java",
              "type": "LocationAwareException",
              "code": "            @Override\n            public RuntimeException call(BuildOperationContext context) {\n                try {\n                    return delegate.finishBuildTree(failures);\n                } finally {\n                    context.setResult(RESULT);\n                }"
            },
            {
              "step": 44,
              "variableName": "buildOperation.call(context)",
              "startLine": 239,
              "startColumn": 21,
              "endLine": 239,
              "endColumn": 49,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/testFixtures/java/org/gradle/internal/operations/TestBuildOperationRunner.java",
              "type": "LocationAwareException",
              "code": "            TestBuildOperationContext context = new TestBuildOperationContext(record);\n            T t;\n            try {\n                t = buildOperation.call(context);\n            } catch (Throwable failure) {\n                if (record.failure == null) {\n                    record.failure = failure;"
            },
            {
              "step": 45,
              "variableName": "t",
              "startLine": 246,
              "startColumn": 20,
              "endLine": 246,
              "endColumn": 21,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/testFixtures/java/org/gradle/internal/operations/TestBuildOperationRunner.java",
              "type": "LocationAwareException",
              "code": "                }\n                throw throwAsUncheckedException(failure);\n            }\n            return t;\n        }\n\n        private <O extends BuildOperation> void execute(O buildOperation, BuildOperationWorker<O> worker) {"
            },
            {
              "step": 46,
              "variableName": "log.call(buildOperation)",
              "startLine": 51,
              "startColumn": 16,
              "endLine": 51,
              "endColumn": 40,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/testFixtures/java/org/gradle/internal/operations/TestBuildOperationRunner.java",
              "type": "LocationAwareException",
              "code": "\n    @Override\n    public <T> T call(CallableBuildOperation<T> buildOperation) {\n        return log.call(buildOperation);\n    }\n\n    @Override"
            },
            {
              "step": 47,
              "variableName": "ca",
              "startLine": 115,
              "startColumn": 5,
              "endLine": 121,
              "endColumn": 7,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/configurationcache/ConfigurationCacheBuildOperations.kt",
              "type": "LocationAwareException",
              "code": "\ninternal\nfun <T : Any> BuildOperationRunner.withModelLoadOperation(block: () -> T): T =\n    call(object : CallableBuildOperation<T> {\n        override fun description(): BuildOperationDescriptor.Builder = BuildOperationDescriptor\n            .displayName(\"Load model from configuration cache\")\n            .progressDisplayName(\"Loading model from configuration cache\")"
            },
            {
              "step": 48,
              "variableName": "ca",
              "startLine": 115,
              "startColumn": 5,
              "endLine": 121,
              "endColumn": 7,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/configurationcache/ConfigurationCacheBuildOperations.kt",
              "type": "LocationAwareException",
              "code": "\ninternal\nfun <T : Any> BuildOperationRunner.withModelLoadOperation(block: () -> T): T =\n    call(object : CallableBuildOperation<T> {\n        override fun description(): BuildOperationDescriptor.Builder = BuildOperationDescriptor\n            .displayName(\"Load model from configuration cache\")\n            .progressDisplayName(\"Loading model from configuration cache\")"
            },
            {
              "step": 49,
              "variableName": "b",
              "startLine": 635,
              "startColumn": 9,
              "endLine": 641,
              "endColumn": 10,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "        // No need to record the `ClassLoaderScope` tree when loading\n        scopeRegistryListener.dispose()\n\n        buildOperationRunner.withModelLoadOperation {\n            val storeLoadResult = entryStore.useForStateLoad(StateType.Model) { stateFile: ConfigurationCacheStateFile ->\n                cacheIO.readModelFrom(stateFile)\n            }"
            },
            {
              "step": 50,
              "variableName": "block()",
              "startLine": 668,
              "startColumn": 22,
              "endLine": 668,
              "endColumn": 29,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "    private\n    inline fun <T> runAtConfigurationTime(block: () -> T): T {\n        prepareConfigurationTimeBarrier()\n        val result = block()\n        crossConfigurationTimeBarrier()\n        return result\n    }"
            },
            {
              "step": 51,
              "variableName": "result",
              "startLine": 670,
              "startColumn": 16,
              "endLine": 670,
              "endColumn": 22,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "        prepareConfigurationTimeBarrier()\n        val result = block()\n        crossConfigurationTimeBarrier()\n        return result\n    }\n\n    private"
            },
            {
              "step": 52,
              "variableName": "runAtConfigurationTime(...) : LocationAwareException",
              "startLine": 631,
              "startColumn": 28,
              "endLine": 642,
              "endColumn": 6,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "    data class LoadResultMetadata(val originInvocationId: String? = null)\n\n    private\n    fun loadModel(): Any = runAtConfigurationTime {\n        // No need to record the `ClassLoaderScope` tree when loading\n        scopeRegistryListener.dispose()\n"
            },
            {
              "step": 53,
              "variableName": "loadModel()",
              "startLine": 268,
              "startColumn": 20,
              "endLine": 268,
              "endColumn": 31,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "    override fun <T : Any> loadOrCreateModel(creator: () -> T): T {\n        if (isLoaded) {\n            runLoadedSideEffects()\n            return loadModel().uncheckedCast()\n        }\n\n        return runWorkThatContributesToCacheEntry {"
            },
            {
              "step": 54,
              "variableName": "Any",
              "startLine": 22,
              "startColumn": 15,
              "endLine": 22,
              "endColumn": 18,
              "uri": "gradle-8.14.0/platforms/core-configuration/stdlib-kotlin-extensions/src/main/kotlin/org/gradle/internal/extensions/stdlib/CastExtensions.kt",
              "type": "Object",
              "code": "import org.gradle.internal.Cast\n\n\nfun <T : Any> Any.uncheckedCast(): T =\n    Cast.uncheckedNonnullCast(this)\n"
            },
            {
              "step": 55,
              "variableName": "this",
              "startLine": 23,
              "startColumn": 31,
              "endLine": 23,
              "endColumn": 35,
              "uri": "gradle-8.14.0/platforms/core-configuration/stdlib-kotlin-extensions/src/main/kotlin/org/gradle/internal/extensions/stdlib/CastExtensions.kt",
              "type": "Object",
              "code": "\n\nfun <T : Any> Any.uncheckedCast(): T =\n    Cast.uncheckedNonnullCast(this)\n"
            },
            {
              "step": 56,
              "variableName": "Object object",
              "startLine": 76,
              "startColumn": 46,
              "endLine": 76,
              "endColumn": 59,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/Cast.java",
              "type": "Object",
              "code": "    }\n\n    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})\n    public static <T> T uncheckedNonnullCast(Object object) {\n        return (T) object;\n    }\n}"
            },
            {
              "step": 57,
              "variableName": "(T) object",
              "startLine": 77,
              "startColumn": 16,
              "endLine": 77,
              "endColumn": 26,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/Cast.java",
              "type": "Object",
              "code": "\n    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})\n    public static <T> T uncheckedNonnullCast(Object object) {\n        return (T) object;\n    }\n}\n"
            },
            {
              "step": 58,
              "variableName": "Cast.uncheckedNonnullCast(collectionType)",
              "startLine": 223,
              "startColumn": 16,
              "endLine": 223,
              "endColumn": 57,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/api/internal/provider/AbstractCollectionProperty.java",
              "type": "Class",
              "code": "    @Override\n    @Nonnull\n    public Class<C> getType() {\n        return Cast.uncheckedNonnullCast(collectionType);\n    }\n\n    @Override"
            },
            {
              "step": 59,
              "variableName": "provider.getType()",
              "startLine": 41,
              "startColumn": 35,
              "endLine": 41,
              "endColumn": 53,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/api/internal/provider/OrElseFixedValueProvider.java",
              "type": "Class",
              "code": "    @Nullable\n    @Override\n    public Class<T> getType() {\n        return Cast.uncheckedCast(provider.getType());\n    }\n\n    @Override"
            },
            {
              "step": 60,
              "variableName": "@Nullable Object object",
              "startLine": 71,
              "startColumn": 39,
              "endLine": 71,
              "endColumn": 62,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/Cast.java",
              "type": "Object",
              "code": "\n    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})\n    @Nullable\n    public static <T> T uncheckedCast(@Nullable Object object) {\n        return (T) object;\n    }\n"
            },
            {
              "step": 61,
              "variableName": "(T) object",
              "startLine": 72,
              "startColumn": 16,
              "endLine": 72,
              "endColumn": 26,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/Cast.java",
              "type": "Object",
              "code": "    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})\n    @Nullable\n    public static <T> T uncheckedCast(@Nullable Object object) {\n        return (T) object;\n    }\n\n    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})"
            },
            {
              "step": 62,
              "variableName": "Cast.uncheckedCast(value)",
              "startLine": 153,
              "startColumn": 16,
              "endLine": 153,
              "endColumn": 41,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/api/internal/attributes/DefaultImmutableAttributesContainer.java",
              "type": "Object",
              "code": "            value = isolatable.coerce(key.getType());\n        }\n\n        return Cast.uncheckedCast(value);\n    }\n\n    /**"
            },
            {
              "step": 63,
              "variableName": "attributes.getAttribute(ProjectInternal.STATUS_ATTRIBUTE)",
              "startLine": 48,
              "startColumn": 16,
              "endLine": 48,
              "endColumn": 73,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ivyservice/ivyresolve/UserProvidedMetadata.java",
              "type": "String",
              "code": "\n    @Override\n    public String getStatus() {\n        return attributes.getAttribute(ProjectInternal.STATUS_ATTRIBUTE);\n    }\n\n    @Override"
            },
            {
              "step": 64,
              "variableName": "updatedMetadata.getStatus()",
              "startLine": 206,
              "startColumn": 162,
              "endLine": 206,
              "endColumn": 189,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/dsl/DefaultComponentMetadataProcessor.java",
              "type": "String",
              "code": "            updatedMetadata = details.asImmutable();\n        }\n        if (!updatedMetadata.getStatusScheme().contains(updatedMetadata.getStatus())) {\n            throw new ModuleVersionResolveException(updatedMetadata.getId(), () -> String.format(\"Unexpected status '%s' specified for %s. Expected one of: %s\", updatedMetadata.getStatus(), updatedMetadata.getId().toString(), updatedMetadata.getStatusScheme()));\n        }\n        return updatedMetadata;\n    }"
            },
            {
              "step": 65,
              "variableName": "String.format(\"Unexpected status '%s' specified for %s. Expected one of: %s\", updatedMetadata.getStatus(), updatedMetadata.getId().toString(), updatedMetadata.getStatusScheme())",
              "startLine": 206,
              "startColumn": 84,
              "endLine": 206,
              "endColumn": 261,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/dsl/DefaultComponentMetadataProcessor.java",
              "type": "Object[] [[]] : String",
              "code": "            updatedMetadata = details.asImmutable();\n        }\n        if (!updatedMetadata.getStatusScheme().contains(updatedMetadata.getStatus())) {\n            throw new ModuleVersionResolveException(updatedMetadata.getId(), () -> String.format(\"Unexpected status '%s' specified for %s. Expected one of: %s\", updatedMetadata.getStatus(), updatedMetadata.getId().toString(), updatedMetadata.getStatusScheme()));\n        }\n        return updatedMetadata;\n    }"
            },
            {
              "step": 66,
              "variableName": "String.format(\"Unexpected status '%s' specified for %s. Expected one of: %s\", updatedMetadata.getStatus(), updatedMetadata.getId().toString(), updatedMetadata.getStatusScheme())",
              "startLine": 206,
              "startColumn": 84,
              "endLine": 206,
              "endColumn": 261,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/dsl/DefaultComponentMetadataProcessor.java",
              "type": "String",
              "code": "            updatedMetadata = details.asImmutable();\n        }\n        if (!updatedMetadata.getStatusScheme().contains(updatedMetadata.getStatus())) {\n            throw new ModuleVersionResolveException(updatedMetadata.getId(), () -> String.format(\"Unexpected status '%s' specified for %s. Expected one of: %s\", updatedMetadata.getStatus(), updatedMetadata.getId().toString(), updatedMetadata.getStatusScheme()));\n        }\n        return updatedMetadata;\n    }"
            },
            {
              "step": 67,
              "variableName": "messageFactory.create()",
              "startLine": 173,
              "startColumn": 23,
              "endLine": 173,
              "endColumn": 46,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "String",
              "code": "    @Override\n    public String getMessage() {\n        if (messageFactory != null) {\n            message = messageFactory.create();\n            messageFactory = null;\n            return message;\n        }"
            },
            {
              "step": 68,
              "variableName": "message",
              "startLine": 175,
              "startColumn": 20,
              "endLine": 175,
              "endColumn": 27,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "String",
              "code": "        if (messageFactory != null) {\n            message = messageFactory.create();\n            messageFactory = null;\n            return message;\n        }\n        return message;\n    }"
            },
            {
              "step": 69,
              "variableName": "exception.getMessage()",
              "startLine": 196,
              "startColumn": 32,
              "endLine": 196,
              "endColumn": 54,
              "uri": "gradle-8.14.0/platforms/core-runtime/gradle-cli/src/main/java/org/gradle/launcher/cli/DefaultCommandLineActionFactory.java",
              "type": "",
              "code": "        @Override\n        public void execute(ExecutionListener executionListener) {\n            System.err.println();\n            System.err.println(exception.getMessage());\n            showUsage(System.err, parser, getSuggestedTaskSelector());\n            executionListener.onFailure(exception);\n        }"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 5,
      "fileName": "DefaultCommandLineActionFactory.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "source",
              "startLine": 44,
              "startColumn": 25,
              "endLine": 44,
              "endColumn": 31,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/RegExpNameMapper.java",
              "type": "String",
              "code": "        } else {\n            matcher.reset(source);\n        }\n        String result = source;\n        if (matcher.find()) {\n            result = matcher.replaceFirst(replacement);\n        }"
            },
            {
              "step": 1,
              "variableName": "result",
              "startLine": 48,
              "startColumn": 16,
              "endLine": 48,
              "endColumn": 22,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/RegExpNameMapper.java",
              "type": "String",
              "code": "        if (matcher.find()) {\n            result = matcher.replaceFirst(replacement);\n        }\n        return result;\n    }\n}\n"
            },
            {
              "step": 2,
              "variableName": "transformer.transform(value)",
              "startLine": 37,
              "startColumn": 31,
              "endLine": 37,
              "endColumn": 59,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/ChainingTransformer.java",
              "type": "String",
              "code": "    public T transform(T original) {\n        T value = original;\n        for (Transformer<T, T> transformer : transformers) {\n            value = type.cast(transformer.transform(value));\n        }\n        return value;\n    }"
            },
            {
              "step": 3,
              "variableName": "type.cast(transformer.transform(value))",
              "startLine": 37,
              "startColumn": 21,
              "endLine": 37,
              "endColumn": 60,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/ChainingTransformer.java",
              "type": "String",
              "code": "    public T transform(T original) {\n        T value = original;\n        for (Transformer<T, T> transformer : transformers) {\n            value = type.cast(transformer.transform(value));\n        }\n        return value;\n    }"
            },
            {
              "step": 4,
              "variableName": "value",
              "startLine": 39,
              "startColumn": 16,
              "endLine": 39,
              "endColumn": 21,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/ChainingTransformer.java",
              "type": "String",
              "code": "        for (Transformer<T, T> transformer : transformers) {\n            value = type.cast(transformer.transform(value));\n        }\n        return value;\n    }\n\n    public void add(Transformer<T, T> transformer) {"
            },
            {
              "step": 5,
              "variableName": "describer.transform(this)",
              "startLine": 163,
              "startColumn": 16,
              "endLine": 163,
              "endColumn": 41,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/repositories/DefaultMavenArtifactRepository.java",
              "type": "String",
              "code": "\n    @Override\n    public String getDisplayName() {\n        return describer.transform(this);\n    }\n\n    @Override"
            },
            {
              "step": 6,
              "variableName": "describable.getDisplayName()",
              "startLine": 313,
              "startColumn": 35,
              "endLine": 313,
              "endColumn": 63,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "String",
              "code": "        public String getDisplayName() {\n            synchronized (this) {\n                if (displayName == null) {\n                    displayName = describable.getDisplayName();\n                    if (capDisplayName != null || !(describable instanceof DisplayName)) {\n                        describable = null;\n                    }"
            },
            {
              "step": 7,
              "variableName": "displayName",
              "startLine": 318,
              "startColumn": 24,
              "endLine": 318,
              "endColumn": 35,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "String",
              "code": "                        describable = null;\n                    }\n                }\n                return displayName;\n            }\n        }\n    }"
            },
            {
              "step": 8,
              "variableName": "displayName.getDisplayName()",
              "startLine": 772,
              "startColumn": 73,
              "endLine": 772,
              "endColumn": 101,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/configurations/DefaultConfiguration.java",
              "type": "String",
              "code": "                try {\n                    results = resolver.resolveGraph(DefaultConfiguration.this);\n                } catch (Exception e) {\n                    throw exceptionMapper.mapFailure(e, \"dependencies\", displayName.getDisplayName());\n                }\n\n                // Make the new state visible in case a dependency resolution listener queries the result, which requires the new state"
            },
            {
              "step": 9,
              "variableName": "String contextDisplayName",
              "startLine": 68,
              "startColumn": 77,
              "endLine": 68,
              "endColumn": 102,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "String",
              "code": "        return mapFailure(failure, type, displayName);\n    }\n\n    public TypedResolveException mapFailure(Throwable failure, String type, String contextDisplayName) {\n        if (!(failure instanceof TypedResolveException)) {\n            return new TypedResolveException(\n                type,"
            },
            {
              "step": 10,
              "variableName": "contextDisplayName",
              "startLine": 72,
              "startColumn": 17,
              "endLine": 72,
              "endColumn": 35,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "String",
              "code": "        if (!(failure instanceof TypedResolveException)) {\n            return new TypedResolveException(\n                type,\n                contextDisplayName,\n                ImmutableList.of(mapRepositoryOverrideFailure(contextDisplayName, failure))\n            );\n        }"
            },
            {
              "step": 11,
              "variableName": "new TypedResolveException(...) : TypedResolveException",
              "startLine": 70,
              "startColumn": 20,
              "endLine": 74,
              "endColumn": 14,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "TypedResolveException",
              "code": "\n    public TypedResolveException mapFailure(Throwable failure, String type, String contextDisplayName) {\n        if (!(failure instanceof TypedResolveException)) {\n            return new TypedResolveException(\n                type,\n                contextDisplayName,\n                ImmutableList.of(mapRepositoryOverrideFailure(contextDisplayName, failure))"
            },
            {
              "step": 12,
              "variableName": "exceptionMapper.mapFailure(e, \"dependencies\", displayName.getDisplayName())",
              "startLine": 772,
              "startColumn": 27,
              "endLine": 772,
              "endColumn": 102,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/configurations/DefaultConfiguration.java",
              "type": "TypedResolveException",
              "code": "                try {\n                    results = resolver.resolveGraph(DefaultConfiguration.this);\n                } catch (Exception e) {\n                    throw exceptionMapper.mapFailure(e, \"dependencies\", displayName.getDisplayName());\n                }\n\n                // Make the new state visible in case a dependency resolution listener queries the result, which requires the new state"
            },
            {
              "step": 13,
              "variableName": "e",
              "startLine": 772,
              "startColumn": 54,
              "endLine": 772,
              "endColumn": 55,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/configurations/DefaultConfiguration.java",
              "type": "Exception",
              "code": "                try {\n                    results = resolver.resolveGraph(DefaultConfiguration.this);\n                } catch (Exception e) {\n                    throw exceptionMapper.mapFailure(e, \"dependencies\", displayName.getDisplayName());\n                }\n\n                // Make the new state visible in case a dependency resolution listener queries the result, which requires the new state"
            },
            {
              "step": 14,
              "variableName": "Throwable failure",
              "startLine": 68,
              "startColumn": 45,
              "endLine": 68,
              "endColumn": 62,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Throwable",
              "code": "        return mapFailure(failure, type, displayName);\n    }\n\n    public TypedResolveException mapFailure(Throwable failure, String type, String contextDisplayName) {\n        if (!(failure instanceof TypedResolveException)) {\n            return new TypedResolveException(\n                type,"
            },
            {
              "step": 15,
              "variableName": "failure",
              "startLine": 73,
              "startColumn": 83,
              "endLine": 73,
              "endColumn": 90,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Throwable",
              "code": "            return new TypedResolveException(\n                type,\n                contextDisplayName,\n                ImmutableList.of(mapRepositoryOverrideFailure(contextDisplayName, failure))\n            );\n        }\n"
            },
            {
              "step": 16,
              "variableName": "Throwable failure",
              "startLine": 94,
              "startColumn": 78,
              "endLine": 94,
              "endColumn": 95,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Throwable",
              "code": "\n    // TODO: We should handle this exception at the source instead of using instanceof to detect it after it is thrown.\n    //       We should try to avoid catching and analyzing runtime exceptions\n    public Throwable mapRepositoryOverrideFailure(String contextDisplayName, Throwable failure) {\n        if (!(failure instanceof ModuleVersionNotFoundException) || !settingsRepositoriesIgnored()) {\n            return failure;\n        }"
            },
            {
              "step": 17,
              "variableName": "failure",
              "startLine": 108,
              "startColumn": 35,
              "endLine": 108,
              "endColumn": 42,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Throwable",
              "code": "        return new TypedResolveException(\n            \"dependencies\",\n            contextDisplayName,\n            Collections.singleton(failure),\n            resolutions\n        );\n    }"
            },
            {
              "step": 18,
              "variableName": "Collections.singleton(failure)",
              "startLine": 108,
              "startColumn": 13,
              "endLine": 108,
              "endColumn": 43,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Set [<element>] : Throwable",
              "code": "        return new TypedResolveException(\n            \"dependencies\",\n            contextDisplayName,\n            Collections.singleton(failure),\n            resolutions\n        );\n    }"
            },
            {
              "step": 19,
              "variableName": "Collections.singleton(failure)",
              "startLine": 108,
              "startColumn": 13,
              "endLine": 108,
              "endColumn": 43,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Set",
              "code": "        return new TypedResolveException(\n            \"dependencies\",\n            contextDisplayName,\n            Collections.singleton(failure),\n            resolutions\n        );\n    }"
            },
            {
              "step": 20,
              "variableName": "Iterable<? extends Throwable> failures",
              "startLine": 42,
              "startColumn": 67,
              "endLine": 42,
              "endColumn": 105,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ivyservice/TypedResolveException.java",
              "type": "Set",
              "code": "    /**\n     * Creates a new instance with resolutions.\n     */\n    public TypedResolveException(String type, String displayName, Iterable<? extends Throwable> failures, List<String> resolutions) {\n        super(buildMessage(type, displayName), failures, false);\n        this.type = type;\n        this.resolutions = ImmutableList.copyOf(resolutions);"
            },
            {
              "step": 21,
              "variableName": "failures",
              "startLine": 43,
              "startColumn": 48,
              "endLine": 43,
              "endColumn": 56,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ivyservice/TypedResolveException.java",
              "type": "Set",
              "code": "     * Creates a new instance with resolutions.\n     */\n    public TypedResolveException(String type, String displayName, Iterable<? extends Throwable> failures, List<String> resolutions) {\n        super(buildMessage(type, displayName), failures, false);\n        this.type = type;\n        this.resolutions = ImmutableList.copyOf(resolutions);\n    }"
            },
            {
              "step": 22,
              "variableName": "Iterable<? extends Throwable> causes",
              "startLine": 77,
              "startColumn": 48,
              "endLine": 77,
              "endColumn": 84,
              "uri": "gradle-8.14.0/subprojects/core-api/src/main/java/org/gradle/api/artifacts/ResolveException.java",
              "type": "Set",
              "code": "     * @since 8.9\n     */\n    @Incubating\n    protected ResolveException(String message, Iterable<? extends Throwable> causes, @SuppressWarnings(\"unused\") boolean dummy) {\n        super(message, causes);\n    }\n}"
            },
            {
              "step": 23,
              "variableName": "causes",
              "startLine": 78,
              "startColumn": 24,
              "endLine": 78,
              "endColumn": 30,
              "uri": "gradle-8.14.0/subprojects/core-api/src/main/java/org/gradle/api/artifacts/ResolveException.java",
              "type": "Set",
              "code": "     */\n    @Incubating\n    protected ResolveException(String message, Iterable<? extends Throwable> causes, @SuppressWarnings(\"unused\") boolean dummy) {\n        super(message, causes);\n    }\n}\n"
            },
            {
              "step": 24,
              "variableName": "Iterable<? extends Throwable> causes",
              "startLine": 47,
              "startColumn": 55,
              "endLine": 47,
              "endColumn": 91,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "Set",
              "code": "        this.causes.addAll(Arrays.asList(causes));\n    }\n\n    public DefaultMultiCauseException(String message, Iterable<? extends Throwable> causes) {\n        super(message);\n        this.message = message;\n        initCauses(causes);"
            },
            {
              "step": 25,
              "variableName": "causes",
              "startLine": 50,
              "startColumn": 20,
              "endLine": 50,
              "endColumn": 26,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "Set",
              "code": "    public DefaultMultiCauseException(String message, Iterable<? extends Throwable> causes) {\n        super(message);\n        this.message = message;\n        initCauses(causes);\n    }\n\n    public DefaultMultiCauseException(Factory<String> messageFactory) {"
            },
            {
              "step": 26,
              "variableName": "Iterable<? extends Throwable> causes",
              "startLine": 112,
              "startColumn": 28,
              "endLine": 112,
              "endColumn": 64,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "Iterable",
              "code": "        return null;\n    }\n\n    public void initCauses(Iterable<? extends Throwable> causes) {\n        this.causes.clear();\n        for (Throwable cause : causes) {\n            this.causes.add(cause);"
            },
            {
              "step": 27,
              "variableName": "cause",
              "startLine": 115,
              "startColumn": 29,
              "endLine": 115,
              "endColumn": 34,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "Throwable",
              "code": "    public void initCauses(Iterable<? extends Throwable> causes) {\n        this.causes.clear();\n        for (Throwable cause : causes) {\n            this.causes.add(cause);\n        }\n    }\n"
            },
            {
              "step": 28,
              "variableName": "this.causes",
              "startLine": 115,
              "startColumn": 13,
              "endLine": 115,
              "endColumn": 24,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "CopyOnWriteArrayList [<element>] : Throwable",
              "code": "    public void initCauses(Iterable<? extends Throwable> causes) {\n        this.causes.clear();\n        for (Throwable cause : causes) {\n            this.causes.add(cause);\n        }\n    }\n"
            },
            {
              "step": 29,
              "variableName": "this",
              "startLine": 115,
              "startColumn": 13,
              "endLine": 115,
              "endColumn": 17,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "DefaultMultiCauseException [causes, <element>] : Throwable",
              "code": "    public void initCauses(Iterable<? extends Throwable> causes) {\n        this.causes.clear();\n        for (Throwable cause : causes) {\n            this.causes.add(cause);\n        }\n    }\n"
            },
            {
              "step": 30,
              "variableName": "projectConfigurationException",
              "startLine": 57,
              "startColumn": 17,
              "endLine": 57,
              "endColumn": 46,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/DefaultExceptionAnalyser.java",
              "type": "ProjectConfigurationException [causes, <element>] : Throwable",
              "code": "                }\n            }\n            if (!additionalFailures.isEmpty()) {\n                projectConfigurationException.initCauses(additionalFailures);\n                failures.add(transform(projectConfigurationException));\n            }\n        } else if (exception instanceof ServiceCreationException) {"
            },
            {
              "step": 31,
              "variableName": "projectConfigurationException",
              "startLine": 58,
              "startColumn": 40,
              "endLine": 58,
              "endColumn": 69,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/DefaultExceptionAnalyser.java",
              "type": "ProjectConfigurationException [causes, <element>] : Throwable",
              "code": "            }\n            if (!additionalFailures.isEmpty()) {\n                projectConfigurationException.initCauses(additionalFailures);\n                failures.add(transform(projectConfigurationException));\n            }\n        } else if (exception instanceof ServiceCreationException) {\n            failures.add(transform(new InitializationException(exception)));"
            },
            {
              "step": 32,
              "variableName": "transform(projectConfigurationException)",
              "startLine": 58,
              "startColumn": 30,
              "endLine": 58,
              "endColumn": 70,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/DefaultExceptionAnalyser.java",
              "type": "LocationAwareException",
              "code": "            }\n            if (!additionalFailures.isEmpty()) {\n                projectConfigurationException.initCauses(additionalFailures);\n                failures.add(transform(projectConfigurationException));\n            }\n        } else if (exception instanceof ServiceCreationException) {\n            failures.add(transform(new InitializationException(exception)));"
            },
            {
              "step": 33,
              "variableName": "failures",
              "startLine": 58,
              "startColumn": 17,
              "endLine": 58,
              "endColumn": 25,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/DefaultExceptionAnalyser.java",
              "type": "Collection [<element>] : LocationAwareException",
              "code": "            }\n            if (!additionalFailures.isEmpty()) {\n                projectConfigurationException.initCauses(additionalFailures);\n                failures.add(transform(projectConfigurationException));\n            }\n        } else if (exception instanceof ServiceCreationException) {\n            failures.add(transform(new InitializationException(exception)));"
            },
            {
              "step": 34,
              "variableName": "result",
              "startLine": 53,
              "startColumn": 54,
              "endLine": 53,
              "endColumn": 60,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/MultipleBuildFailuresExceptionAnalyser.java",
              "type": "ArrayList [<element>] : LocationAwareException",
              "code": "        for (Throwable failure : failures) {\n            if (failure instanceof MultipleBuildFailures) {\n                for (Throwable cause : ((MultipleBuildFailures) failure).getCauses()) {\n                    collector.collectFailures(cause, result);\n                }\n            } else {\n                collector.collectFailures(failure, result);"
            },
            {
              "step": 35,
              "variableName": "result",
              "startLine": 60,
              "startColumn": 39,
              "endLine": 60,
              "endColumn": 45,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/MultipleBuildFailuresExceptionAnalyser.java",
              "type": "ArrayList [<element>] : LocationAwareException",
              "code": "            }\n        }\n        if (result.size() == 1 && result.get(0) instanceof RuntimeException) {\n            return (RuntimeException) result.get(0);\n        } else {\n            return new MultipleBuildFailures(result);\n        }"
            },
            {
              "step": 36,
              "variableName": "result.get(0)",
              "startLine": 60,
              "startColumn": 39,
              "endLine": 60,
              "endColumn": 52,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/MultipleBuildFailuresExceptionAnalyser.java",
              "type": "LocationAwareException",
              "code": "            }\n        }\n        if (result.size() == 1 && result.get(0) instanceof RuntimeException) {\n            return (RuntimeException) result.get(0);\n        } else {\n            return new MultipleBuildFailures(result);\n        }"
            },
            {
              "step": 37,
              "variableName": "(RuntimeException) result.get(0)",
              "startLine": 60,
              "startColumn": 20,
              "endLine": 60,
              "endColumn": 52,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/MultipleBuildFailuresExceptionAnalyser.java",
              "type": "LocationAwareException",
              "code": "            }\n        }\n        if (result.size() == 1 && result.get(0) instanceof RuntimeException) {\n            return (RuntimeException) result.get(0);\n        } else {\n            return new MultipleBuildFailures(result);\n        }"
            },
            {
              "step": 38,
              "variableName": "exceptionAnalyser.transform(finishFailures)",
              "startLine": 72,
              "startColumn": 16,
              "endLine": 72,
              "endColumn": 59,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/internal/buildtree/DefaultBuildTreeFinishExecutor.java",
              "type": "LocationAwareException",
              "code": "            finishFailures.addAll(result.getFailures());\n        });\n\n        return exceptionAnalyser.transform(finishFailures);\n    }\n}\n"
            },
            {
              "step": 39,
              "variableName": "delegate.finishBuildTree(failures)",
              "startLine": 46,
              "startColumn": 28,
              "endLine": 46,
              "endColumn": 62,
              "uri": "gradle-8.14.0/subprojects/composite-builds/src/main/java/org/gradle/composite/internal/OperationFiringBuildTreeFinishExecutor.java",
              "type": "LocationAwareException",
              "code": "            @Override\n            public RuntimeException call(BuildOperationContext context) {\n                try {\n                    return delegate.finishBuildTree(failures);\n                } finally {\n                    context.setResult(RESULT);\n                }"
            },
            {
              "step": 40,
              "variableName": "buildOperation.call(context)",
              "startLine": 239,
              "startColumn": 21,
              "endLine": 239,
              "endColumn": 49,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/testFixtures/java/org/gradle/internal/operations/TestBuildOperationRunner.java",
              "type": "LocationAwareException",
              "code": "            TestBuildOperationContext context = new TestBuildOperationContext(record);\n            T t;\n            try {\n                t = buildOperation.call(context);\n            } catch (Throwable failure) {\n                if (record.failure == null) {\n                    record.failure = failure;"
            },
            {
              "step": 41,
              "variableName": "t",
              "startLine": 246,
              "startColumn": 20,
              "endLine": 246,
              "endColumn": 21,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/testFixtures/java/org/gradle/internal/operations/TestBuildOperationRunner.java",
              "type": "LocationAwareException",
              "code": "                }\n                throw throwAsUncheckedException(failure);\n            }\n            return t;\n        }\n\n        private <O extends BuildOperation> void execute(O buildOperation, BuildOperationWorker<O> worker) {"
            },
            {
              "step": 42,
              "variableName": "log.call(buildOperation)",
              "startLine": 51,
              "startColumn": 16,
              "endLine": 51,
              "endColumn": 40,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/testFixtures/java/org/gradle/internal/operations/TestBuildOperationRunner.java",
              "type": "LocationAwareException",
              "code": "\n    @Override\n    public <T> T call(CallableBuildOperation<T> buildOperation) {\n        return log.call(buildOperation);\n    }\n\n    @Override"
            },
            {
              "step": 43,
              "variableName": "ca",
              "startLine": 115,
              "startColumn": 5,
              "endLine": 121,
              "endColumn": 7,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/configurationcache/ConfigurationCacheBuildOperations.kt",
              "type": "LocationAwareException",
              "code": "\ninternal\nfun <T : Any> BuildOperationRunner.withModelLoadOperation(block: () -> T): T =\n    call(object : CallableBuildOperation<T> {\n        override fun description(): BuildOperationDescriptor.Builder = BuildOperationDescriptor\n            .displayName(\"Load model from configuration cache\")\n            .progressDisplayName(\"Loading model from configuration cache\")"
            },
            {
              "step": 44,
              "variableName": "ca",
              "startLine": 115,
              "startColumn": 5,
              "endLine": 121,
              "endColumn": 7,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/configurationcache/ConfigurationCacheBuildOperations.kt",
              "type": "LocationAwareException",
              "code": "\ninternal\nfun <T : Any> BuildOperationRunner.withModelLoadOperation(block: () -> T): T =\n    call(object : CallableBuildOperation<T> {\n        override fun description(): BuildOperationDescriptor.Builder = BuildOperationDescriptor\n            .displayName(\"Load model from configuration cache\")\n            .progressDisplayName(\"Loading model from configuration cache\")"
            },
            {
              "step": 45,
              "variableName": "b",
              "startLine": 635,
              "startColumn": 9,
              "endLine": 641,
              "endColumn": 10,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "        // No need to record the `ClassLoaderScope` tree when loading\n        scopeRegistryListener.dispose()\n\n        buildOperationRunner.withModelLoadOperation {\n            val storeLoadResult = entryStore.useForStateLoad(StateType.Model) { stateFile: ConfigurationCacheStateFile ->\n                cacheIO.readModelFrom(stateFile)\n            }"
            },
            {
              "step": 46,
              "variableName": "block()",
              "startLine": 668,
              "startColumn": 22,
              "endLine": 668,
              "endColumn": 29,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "    private\n    inline fun <T> runAtConfigurationTime(block: () -> T): T {\n        prepareConfigurationTimeBarrier()\n        val result = block()\n        crossConfigurationTimeBarrier()\n        return result\n    }"
            },
            {
              "step": 47,
              "variableName": "result",
              "startLine": 670,
              "startColumn": 16,
              "endLine": 670,
              "endColumn": 22,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "        prepareConfigurationTimeBarrier()\n        val result = block()\n        crossConfigurationTimeBarrier()\n        return result\n    }\n\n    private"
            },
            {
              "step": 48,
              "variableName": "runAtConfigurationTime(...) : LocationAwareException",
              "startLine": 631,
              "startColumn": 28,
              "endLine": 642,
              "endColumn": 6,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "    data class LoadResultMetadata(val originInvocationId: String? = null)\n\n    private\n    fun loadModel(): Any = runAtConfigurationTime {\n        // No need to record the `ClassLoaderScope` tree when loading\n        scopeRegistryListener.dispose()\n"
            },
            {
              "step": 49,
              "variableName": "loadModel()",
              "startLine": 268,
              "startColumn": 20,
              "endLine": 268,
              "endColumn": 31,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "    override fun <T : Any> loadOrCreateModel(creator: () -> T): T {\n        if (isLoaded) {\n            runLoadedSideEffects()\n            return loadModel().uncheckedCast()\n        }\n\n        return runWorkThatContributesToCacheEntry {"
            },
            {
              "step": 50,
              "variableName": "Any",
              "startLine": 22,
              "startColumn": 15,
              "endLine": 22,
              "endColumn": 18,
              "uri": "gradle-8.14.0/platforms/core-configuration/stdlib-kotlin-extensions/src/main/kotlin/org/gradle/internal/extensions/stdlib/CastExtensions.kt",
              "type": "Object",
              "code": "import org.gradle.internal.Cast\n\n\nfun <T : Any> Any.uncheckedCast(): T =\n    Cast.uncheckedNonnullCast(this)\n"
            },
            {
              "step": 51,
              "variableName": "this",
              "startLine": 23,
              "startColumn": 31,
              "endLine": 23,
              "endColumn": 35,
              "uri": "gradle-8.14.0/platforms/core-configuration/stdlib-kotlin-extensions/src/main/kotlin/org/gradle/internal/extensions/stdlib/CastExtensions.kt",
              "type": "Object",
              "code": "\n\nfun <T : Any> Any.uncheckedCast(): T =\n    Cast.uncheckedNonnullCast(this)\n"
            },
            {
              "step": 52,
              "variableName": "Object object",
              "startLine": 76,
              "startColumn": 46,
              "endLine": 76,
              "endColumn": 59,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/Cast.java",
              "type": "Object",
              "code": "    }\n\n    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})\n    public static <T> T uncheckedNonnullCast(Object object) {\n        return (T) object;\n    }\n}"
            },
            {
              "step": 53,
              "variableName": "(T) object",
              "startLine": 77,
              "startColumn": 16,
              "endLine": 77,
              "endColumn": 26,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/Cast.java",
              "type": "Object",
              "code": "\n    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})\n    public static <T> T uncheckedNonnullCast(Object object) {\n        return (T) object;\n    }\n}\n"
            },
            {
              "step": 54,
              "variableName": "Cast.uncheckedNonnullCast(defaultValue)",
              "startLine": 112,
              "startColumn": 73,
              "endLine": 112,
              "endColumn": 112,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/api/internal/provider/AbstractMinimalProvider.java",
              "type": "Object",
              "code": "\n    @Override\n    public T getOrElse(T defaultValue) {\n        return calculateOwnValue(ValueConsumer.IgnoreUnsafeRead).orElse(Cast.uncheckedNonnullCast(defaultValue));\n    }\n\n    @Override"
            },
            {
              "step": 55,
              "variableName": "T defaultValue",
              "startLine": 610,
              "startColumn": 25,
              "endLine": 610,
              "endColumn": 39,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/api/internal/provider/ValueSupplier.java",
              "type": "Object",
              "code": "        }\n\n        @Override\n        public T orElse(T defaultValue) {\n            return defaultValue;\n        }\n"
            },
            {
              "step": 56,
              "variableName": "defaultValue",
              "startLine": 611,
              "startColumn": 20,
              "endLine": 611,
              "endColumn": 32,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/api/internal/provider/ValueSupplier.java",
              "type": "Object",
              "code": "\n        @Override\n        public T orElse(T defaultValue) {\n            return defaultValue;\n        }\n\n        @Override"
            },
            {
              "step": 57,
              "variableName": "calculateOwnValue(ValueConsumer.IgnoreUnsafeRead).orElse(Cast.uncheckedNonnullCast(defaultValue))",
              "startLine": 112,
              "startColumn": 16,
              "endLine": 112,
              "endColumn": 113,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/api/internal/provider/AbstractMinimalProvider.java",
              "type": "Object",
              "code": "\n    @Override\n    public T getOrElse(T defaultValue) {\n        return calculateOwnValue(ValueConsumer.IgnoreUnsafeRead).orElse(Cast.uncheckedNonnullCast(defaultValue));\n    }\n\n    @Override"
            },
            {
              "step": 58,
              "variableName": "getNativeImageCapable().getOrElse(false)",
              "startLine": 105,
              "startColumn": 13,
              "endLine": 105,
              "endColumn": 53,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-configuration/src/main/java/org/gradle/buildconfiguration/tasks/UpdateDaemonJvm.java",
              "type": "Boolean",
              "code": "            getPropertiesFile().get().getAsFile(),\n            getLanguageVersion().get(),\n            jvmVendorCriteria,\n            getNativeImageCapable().getOrElse(false),\n            getToolchainDownloadUrls().get()\n        );\n    }"
            },
            {
              "step": 59,
              "variableName": "File propertiesFile",
              "startLine": 45,
              "startColumn": 9,
              "endLine": 45,
              "endColumn": 28,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-configuration/src/main/java/org/gradle/internal/buildconfiguration/tasks/DaemonJvmPropertiesModifier.java",
              "type": "File",
              "code": "    }\n\n    public void updateJvmCriteria(\n        File propertiesFile,\n        JavaLanguageVersion toolchainVersion,\n        @Nullable String toolchainVendor,\n        boolean nativeImageCapable,"
            },
            {
              "step": 60,
              "variableName": "propertiesFile",
              "startLine": 67,
              "startColumn": 33,
              "endLine": 67,
              "endColumn": 47,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-configuration/src/main/java/org/gradle/internal/buildconfiguration/tasks/DaemonJvmPropertiesModifier.java",
              "type": "File",
              "code": "            daemonJvmProperties.put(toolchainUrlProperty, uri.toString());\n        });\n\n        GFileUtils.parentMkdirs(propertiesFile);\n        try {\n            PropertiesUtils.store(daemonJvmProperties, propertiesFile, \"This file is generated by \" + DaemonJvmPropertiesConfigurator.TASK_NAME);\n        } catch (IOException e) {"
            },
            {
              "step": 61,
              "variableName": "File child",
              "startLine": 241,
              "startColumn": 37,
              "endLine": 241,
              "endColumn": 47,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/util/internal/GFileUtils.java",
              "type": "File",
              "code": "     * @return The parent dir file\n     * @see #mkdirs(java.io.File)\n     */\n    public static File parentMkdirs(File child) {\n        File parent = child.getParentFile();\n        mkdirs(parent);\n        return parent;"
            },
            {
              "step": 62,
              "variableName": "child",
              "startLine": 242,
              "startColumn": 23,
              "endLine": 242,
              "endColumn": 28,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/util/internal/GFileUtils.java",
              "type": "File",
              "code": "     * @see #mkdirs(java.io.File)\n     */\n    public static File parentMkdirs(File child) {\n        File parent = child.getParentFile();\n        mkdirs(parent);\n        return parent;\n    }"
            },
            {
              "step": 63,
              "variableName": "getParentFile",
              "startLine": 392,
              "startColumn": 21,
              "endLine": 392,
              "endColumn": 34,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "TestFile",
              "code": "    }\n\n    @Override\n    public TestFile getParentFile() {\n        return super.getParentFile() == null ? null : new TestFile(super.getParentFile());\n    }\n"
            },
            {
              "step": 64,
              "variableName": "super",
              "startLine": 393,
              "startColumn": 68,
              "endLine": 393,
              "endColumn": 73,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "TestFile",
              "code": "\n    @Override\n    public TestFile getParentFile() {\n        return super.getParentFile() == null ? null : new TestFile(super.getParentFile());\n    }\n\n    @Override"
            },
            {
              "step": 65,
              "variableName": "super.getParentFile()",
              "startLine": 393,
              "startColumn": 68,
              "endLine": 393,
              "endColumn": 89,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "File",
              "code": "\n    @Override\n    public TestFile getParentFile() {\n        return super.getParentFile() == null ? null : new TestFile(super.getParentFile());\n    }\n\n    @Override"
            },
            {
              "step": 66,
              "variableName": "File file",
              "startLine": 77,
              "startColumn": 21,
              "endLine": 77,
              "endColumn": 30,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "File",
              "code": "    private boolean useNativeTools;\n    private final File relativeBase;\n\n    public TestFile(File file, Object... path) {\n        super(join(file, path).getAbsolutePath());\n        this.relativeBase = file;\n    }"
            },
            {
              "step": 67,
              "variableName": "file",
              "startLine": 78,
              "startColumn": 20,
              "endLine": 78,
              "endColumn": 24,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "File",
              "code": "    private final File relativeBase;\n\n    public TestFile(File file, Object... path) {\n        super(join(file, path).getAbsolutePath());\n        this.relativeBase = file;\n    }\n"
            },
            {
              "step": 68,
              "variableName": "File file",
              "startLine": 126,
              "startColumn": 30,
              "endLine": 126,
              "endColumn": 39,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "File",
              "code": "        }\n    }\n\n    private static File join(File file, Object[] path) {\n        File current = file.getAbsoluteFile();\n        for (Object p : path) {\n            current = new File(current, p.toString());"
            },
            {
              "step": 69,
              "variableName": "file",
              "startLine": 127,
              "startColumn": 24,
              "endLine": 127,
              "endColumn": 28,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "File",
              "code": "    }\n\n    private static File join(File file, Object[] path) {\n        File current = file.getAbsoluteFile();\n        for (Object p : path) {\n            current = new File(current, p.toString());\n        }"
            },
            {
              "step": 70,
              "variableName": "file.getAbsoluteFile()",
              "startLine": 127,
              "startColumn": 24,
              "endLine": 127,
              "endColumn": 46,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "File",
              "code": "    }\n\n    private static File join(File file, Object[] path) {\n        File current = file.getAbsoluteFile();\n        for (Object p : path) {\n            current = new File(current, p.toString());\n        }"
            },
            {
              "step": 71,
              "variableName": "current",
              "startLine": 132,
              "startColumn": 20,
              "endLine": 132,
              "endColumn": 27,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "File",
              "code": "            current = new File(current, p.toString());\n        }\n        try {\n            return current.getCanonicalFile();\n        } catch (IOException e) {\n            throw new RuntimeException(String.format(\"Could not canonicalise '%s'.\", current), e);\n        }"
            },
            {
              "step": 72,
              "variableName": "getCanonicalFile",
              "startLine": 109,
              "startColumn": 17,
              "endLine": 109,
              "endColumn": 33,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "TestFile",
              "code": "    }\n\n    @Override\n    public File getCanonicalFile() throws IOException {\n        return new File(getAbsolutePath()).getCanonicalFile();\n    }\n"
            },
            {
              "step": 73,
              "variableName": "getAbsolutePath()",
              "startLine": 110,
              "startColumn": 25,
              "endLine": 110,
              "endColumn": 42,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "TestFile",
              "code": "\n    @Override\n    public File getCanonicalFile() throws IOException {\n        return new File(getAbsolutePath()).getCanonicalFile();\n    }\n\n    @Override"
            },
            {
              "step": 74,
              "variableName": "getAbsolutePath()",
              "startLine": 110,
              "startColumn": 25,
              "endLine": 110,
              "endColumn": 42,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "String",
              "code": "\n    @Override\n    public File getCanonicalFile() throws IOException {\n        return new File(getAbsolutePath()).getCanonicalFile();\n    }\n\n    @Override"
            },
            {
              "step": 75,
              "variableName": "new File(getAbsolutePath())",
              "startLine": 110,
              "startColumn": 16,
              "endLine": 110,
              "endColumn": 43,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "File",
              "code": "\n    @Override\n    public File getCanonicalFile() throws IOException {\n        return new File(getAbsolutePath()).getCanonicalFile();\n    }\n\n    @Override"
            },
            {
              "step": 76,
              "variableName": "new File(getAbsolutePath()).getCanonicalFile()",
              "startLine": 110,
              "startColumn": 16,
              "endLine": 110,
              "endColumn": 62,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "File",
              "code": "\n    @Override\n    public File getCanonicalFile() throws IOException {\n        return new File(getAbsolutePath()).getCanonicalFile();\n    }\n\n    @Override"
            },
            {
              "step": 77,
              "variableName": "current.getCanonicalFile()",
              "startLine": 132,
              "startColumn": 20,
              "endLine": 132,
              "endColumn": 46,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "File",
              "code": "            current = new File(current, p.toString());\n        }\n        try {\n            return current.getCanonicalFile();\n        } catch (IOException e) {\n            throw new RuntimeException(String.format(\"Could not canonicalise '%s'.\", current), e);\n        }"
            },
            {
              "step": 78,
              "variableName": "join(file, path)",
              "startLine": 78,
              "startColumn": 15,
              "endLine": 78,
              "endColumn": 31,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "File",
              "code": "    private final File relativeBase;\n\n    public TestFile(File file, Object... path) {\n        super(join(file, path).getAbsolutePath());\n        this.relativeBase = file;\n    }\n"
            },
            {
              "step": 79,
              "variableName": "join(file, path).getAbsolutePath()",
              "startLine": 78,
              "startColumn": 15,
              "endLine": 78,
              "endColumn": 49,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "String",
              "code": "    private final File relativeBase;\n\n    public TestFile(File file, Object... path) {\n        super(join(file, path).getAbsolutePath());\n        this.relativeBase = file;\n    }\n"
            },
            {
              "step": 80,
              "variableName": "super(join(file, path).getAbsolutePath());",
              "startLine": 78,
              "startColumn": 9,
              "endLine": 78,
              "endColumn": 51,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "TestFile",
              "code": "    private final File relativeBase;\n\n    public TestFile(File file, Object... path) {\n        super(join(file, path).getAbsolutePath());\n        this.relativeBase = file;\n    }\n"
            },
            {
              "step": 81,
              "variableName": "new TestFile(child)",
              "startLine": 210,
              "startColumn": 24,
              "endLine": 210,
              "endColumn": 43,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "TestFile",
              "code": "        TestFile[] files = new TestFile[children.length];\n        for (int i = 0; i < children.length; i++) {\n            File child = children[i];\n            files[i] = new TestFile(child);\n        }\n        return files;\n    }"
            },
            {
              "step": 82,
              "variableName": "files",
              "startLine": 210,
              "startColumn": 13,
              "endLine": 210,
              "endColumn": 18,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "TestFile[] [[]] : TestFile",
              "code": "        TestFile[] files = new TestFile[children.length];\n        for (int i = 0; i < children.length; i++) {\n            File child = children[i];\n            files[i] = new TestFile(child);\n        }\n        return files;\n    }"
            },
            {
              "step": 83,
              "variableName": "files",
              "startLine": 212,
              "startColumn": 16,
              "endLine": 212,
              "endColumn": 21,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "TestFile[] [[]] : TestFile",
              "code": "            File child = children[i];\n            files[i] = new TestFile(child);\n        }\n        return files;\n    }\n\n    public String getText() {"
            },
            {
              "step": 84,
              "variableName": "asFile.listFiles()",
              "startLine": 44,
              "startColumn": 30,
              "endLine": 44,
              "endColumn": 48,
              "uri": "gradle-8.14.0/build-logic/cleanup/src/main/kotlin/gradlebuild/cleanup/Cleanup.kt",
              "type": "TestFile[] [[]] : TestFile",
              "code": "@Suppress(\"LoopWithTooManyJumpStatements\")\nfun FileSystemOperations.removeOldVersionsFromDir(dir: Directory, shouldDelete: Spec<GradleVersion>, dirPrefix: String = \"\", dirSuffix: String = \"\") {\n    if (dir.asFile.isDirectory) {\n        for (cacheDir in dir.asFile.listFiles()) {\n            val cacheDirName = cacheDir.name\n            if (!cacheDirName.startsWith(dirPrefix) || !cacheDirName.endsWith(dirSuffix)) {\n                continue"
            },
            {
              "step": 85,
              "variableName": "listFiles()",
              "startLine": 44,
              "startColumn": 37,
              "endLine": 44,
              "endColumn": 48,
              "uri": "gradle-8.14.0/build-logic/cleanup/src/main/kotlin/gradlebuild/cleanup/Cleanup.kt",
              "type": "TestFile[] [[]] : TestFile",
              "code": "@Suppress(\"LoopWithTooManyJumpStatements\")\nfun FileSystemOperations.removeOldVersionsFromDir(dir: Directory, shouldDelete: Spec<GradleVersion>, dirPrefix: String = \"\", dirSuffix: String = \"\") {\n    if (dir.asFile.isDirectory) {\n        for (cacheDir in dir.asFile.listFiles()) {\n            val cacheDirName = cacheDir.name\n            if (!cacheDirName.startsWith(dirPrefix) || !cacheDirName.endsWith(dirSuffix)) {\n                continue"
            },
            {
              "step": 86,
              "variableName": "listFiles()",
              "startLine": 44,
              "startColumn": 37,
              "endLine": 44,
              "endColumn": 48,
              "uri": "gradle-8.14.0/build-logic/cleanup/src/main/kotlin/gradlebuild/cleanup/Cleanup.kt",
              "type": "TestFile[] [[]] : TestFile",
              "code": "@Suppress(\"LoopWithTooManyJumpStatements\")\nfun FileSystemOperations.removeOldVersionsFromDir(dir: Directory, shouldDelete: Spec<GradleVersion>, dirPrefix: String = \"\", dirSuffix: String = \"\") {\n    if (dir.asFile.isDirectory) {\n        for (cacheDir in dir.asFile.listFiles()) {\n            val cacheDirName = cacheDir.name\n            if (!cacheDirName.startsWith(dirPrefix) || !cacheDirName.endsWith(dirSuffix)) {\n                continue"
            },
            {
              "step": 87,
              "variableName": "cacheDir",
              "startLine": 45,
              "startColumn": 32,
              "endLine": 45,
              "endColumn": 40,
              "uri": "gradle-8.14.0/build-logic/cleanup/src/main/kotlin/gradlebuild/cleanup/Cleanup.kt",
              "type": "TestFile",
              "code": "fun FileSystemOperations.removeOldVersionsFromDir(dir: Directory, shouldDelete: Spec<GradleVersion>, dirPrefix: String = \"\", dirSuffix: String = \"\") {\n    if (dir.asFile.isDirectory) {\n        for (cacheDir in dir.asFile.listFiles()) {\n            val cacheDirName = cacheDir.name\n            if (!cacheDirName.startsWith(dirPrefix) || !cacheDirName.endsWith(dirSuffix)) {\n                continue\n            }"
            },
            {
              "step": 88,
              "variableName": "cacheDir",
              "startLine": 45,
              "startColumn": 32,
              "endLine": 45,
              "endColumn": 40,
              "uri": "gradle-8.14.0/build-logic/cleanup/src/main/kotlin/gradlebuild/cleanup/Cleanup.kt",
              "type": "TestFile",
              "code": "fun FileSystemOperations.removeOldVersionsFromDir(dir: Directory, shouldDelete: Spec<GradleVersion>, dirPrefix: String = \"\", dirSuffix: String = \"\") {\n    if (dir.asFile.isDirectory) {\n        for (cacheDir in dir.asFile.listFiles()) {\n            val cacheDirName = cacheDir.name\n            if (!cacheDirName.startsWith(dirPrefix) || !cacheDirName.endsWith(dirSuffix)) {\n                continue\n            }"
            },
            {
              "step": 89,
              "variableName": "cacheDir.name",
              "startLine": 45,
              "startColumn": 32,
              "endLine": 45,
              "endColumn": 45,
              "uri": "gradle-8.14.0/build-logic/cleanup/src/main/kotlin/gradlebuild/cleanup/Cleanup.kt",
              "type": "String",
              "code": "fun FileSystemOperations.removeOldVersionsFromDir(dir: Directory, shouldDelete: Spec<GradleVersion>, dirPrefix: String = \"\", dirSuffix: String = \"\") {\n    if (dir.asFile.isDirectory) {\n        for (cacheDir in dir.asFile.listFiles()) {\n            val cacheDirName = cacheDir.name\n            if (!cacheDirName.startsWith(dirPrefix) || !cacheDirName.endsWith(dirSuffix)) {\n                continue\n            }"
            },
            {
              "step": 90,
              "variableName": "cacheDirName",
              "startLine": 49,
              "startColumn": 30,
              "endLine": 49,
              "endColumn": 42,
              "uri": "gradle-8.14.0/build-logic/cleanup/src/main/kotlin/gradlebuild/cleanup/Cleanup.kt",
              "type": "String",
              "code": "            if (!cacheDirName.startsWith(dirPrefix) || !cacheDirName.endsWith(dirSuffix)) {\n                continue\n            }\n            val dirVersion = cacheDirName.removePrefix(dirPrefix).removeSuffix(dirSuffix)\n            if (!dirVersion.matches(dirVersionPattern)) {\n                continue\n            }"
            },
            {
              "step": 91,
              "variableName": "cacheDirName.removePrefix(dirPrefix)",
              "startLine": 49,
              "startColumn": 30,
              "endLine": 49,
              "endColumn": 66,
              "uri": "gradle-8.14.0/build-logic/cleanup/src/main/kotlin/gradlebuild/cleanup/Cleanup.kt",
              "type": "String",
              "code": "            if (!cacheDirName.startsWith(dirPrefix) || !cacheDirName.endsWith(dirSuffix)) {\n                continue\n            }\n            val dirVersion = cacheDirName.removePrefix(dirPrefix).removeSuffix(dirSuffix)\n            if (!dirVersion.matches(dirVersionPattern)) {\n                continue\n            }"
            },
            {
              "step": 92,
              "variableName": "cacheDirName.removePrefix(dirPrefix).removeSuffix(dirSuffix)",
              "startLine": 49,
              "startColumn": 30,
              "endLine": 49,
              "endColumn": 90,
              "uri": "gradle-8.14.0/build-logic/cleanup/src/main/kotlin/gradlebuild/cleanup/Cleanup.kt",
              "type": "String",
              "code": "            if (!cacheDirName.startsWith(dirPrefix) || !cacheDirName.endsWith(dirSuffix)) {\n                continue\n            }\n            val dirVersion = cacheDirName.removePrefix(dirPrefix).removeSuffix(dirSuffix)\n            if (!dirVersion.matches(dirVersionPattern)) {\n                continue\n            }"
            },
            {
              "step": 93,
              "variableName": "dirVersion",
              "startLine": 56,
              "startColumn": 43,
              "endLine": 56,
              "endColumn": 53,
              "uri": "gradle-8.14.0/build-logic/cleanup/src/main/kotlin/gradlebuild/cleanup/Cleanup.kt",
              "type": "String",
              "code": "\n            val cacheVersion =\n                try {\n                    GradleVersion.version(dirVersion)\n                } catch (_: IllegalArgumentException) {\n                    // Ignore\n                    continue"
            },
            {
              "step": 94,
              "variableName": "String version",
              "startLine": 72,
              "startColumn": 41,
              "endLine": 72,
              "endColumn": 55,
              "uri": "gradle-8.14.0/platforms/core-runtime/logging/src/main/java/org/gradle/util/GradleVersion.java",
              "type": "String",
              "code": "     *\n     * @throws IllegalArgumentException On unrecognized version string.\n     */\n    public static GradleVersion version(String version) throws IllegalArgumentException {\n        return DefaultGradleVersion.version(version);\n    }\n"
            },
            {
              "step": 95,
              "variableName": "version",
              "startLine": 73,
              "startColumn": 45,
              "endLine": 73,
              "endColumn": 52,
              "uri": "gradle-8.14.0/platforms/core-runtime/logging/src/main/java/org/gradle/util/GradleVersion.java",
              "type": "String",
              "code": "     * @throws IllegalArgumentException On unrecognized version string.\n     */\n    public static GradleVersion version(String version) throws IllegalArgumentException {\n        return DefaultGradleVersion.version(version);\n    }\n\n    /**"
            },
            {
              "step": 96,
              "variableName": "String version",
              "startLine": 105,
              "startColumn": 48,
              "endLine": 105,
              "endColumn": 62,
              "uri": "gradle-8.14.0/platforms/core-runtime/logging/src/main/java/org/gradle/util/internal/DefaultGradleVersion.java",
              "type": "String",
              "code": "     *\n     * @throws IllegalArgumentException On unrecognized version string.\n     */\n    public static DefaultGradleVersion version(String version) throws IllegalArgumentException {\n        return new DefaultGradleVersion(version, null, null);\n    }\n"
            },
            {
              "step": 97,
              "variableName": "version",
              "startLine": 106,
              "startColumn": 41,
              "endLine": 106,
              "endColumn": 48,
              "uri": "gradle-8.14.0/platforms/core-runtime/logging/src/main/java/org/gradle/util/internal/DefaultGradleVersion.java",
              "type": "String",
              "code": "     * @throws IllegalArgumentException On unrecognized version string.\n     */\n    public static DefaultGradleVersion version(String version) throws IllegalArgumentException {\n        return new DefaultGradleVersion(version, null, null);\n    }\n\n    private DefaultGradleVersion(String version, String buildTime, String commitId) {"
            },
            {
              "step": 98,
              "variableName": "String version",
              "startLine": 109,
              "startColumn": 34,
              "endLine": 109,
              "endColumn": 48,
              "uri": "gradle-8.14.0/platforms/core-runtime/logging/src/main/java/org/gradle/util/internal/DefaultGradleVersion.java",
              "type": "String",
              "code": "        return new DefaultGradleVersion(version, null, null);\n    }\n\n    private DefaultGradleVersion(String version, String buildTime, String commitId) {\n        this.version = version;\n        this.buildTime = buildTime;\n        Matcher matcher = VERSION_PATTERN.matcher(version);"
            },
            {
              "step": 99,
              "variableName": "version",
              "startLine": 112,
              "startColumn": 51,
              "endLine": 112,
              "endColumn": 58,
              "uri": "gradle-8.14.0/platforms/core-runtime/logging/src/main/java/org/gradle/util/internal/DefaultGradleVersion.java",
              "type": "String",
              "code": "    private DefaultGradleVersion(String version, String buildTime, String commitId) {\n        this.version = version;\n        this.buildTime = buildTime;\n        Matcher matcher = VERSION_PATTERN.matcher(version);\n        if (!matcher.matches()) {\n            throw new IllegalArgumentException(format(\"'%s' is not a valid Gradle version string (examples: '1.0', '1.0-rc-1')\", version));\n        }"
            },
            {
              "step": 100,
              "variableName": "VERSION_PATTERN.matcher(version)",
              "startLine": 112,
              "startColumn": 27,
              "endLine": 112,
              "endColumn": 59,
              "uri": "gradle-8.14.0/platforms/core-runtime/logging/src/main/java/org/gradle/util/internal/DefaultGradleVersion.java",
              "type": "Matcher",
              "code": "    private DefaultGradleVersion(String version, String buildTime, String commitId) {\n        this.version = version;\n        this.buildTime = buildTime;\n        Matcher matcher = VERSION_PATTERN.matcher(version);\n        if (!matcher.matches()) {\n            throw new IllegalArgumentException(format(\"'%s' is not a valid Gradle version string (examples: '1.0', '1.0-rc-1')\", version));\n        }"
            },
            {
              "step": 101,
              "variableName": "matcher",
              "startLine": 120,
              "startColumn": 54,
              "endLine": 120,
              "endColumn": 61,
              "uri": "gradle-8.14.0/platforms/core-runtime/logging/src/main/java/org/gradle/util/internal/DefaultGradleVersion.java",
              "type": "Matcher",
              "code": "        versionPart = matcher.group(1);\n        majorPart = Integer.parseInt(matcher.group(2), 10);\n\n        this.commitId = setOrParseCommitId(commitId, matcher);\n        this.stage = parseStage(matcher);\n        this.snapshot = parseSnapshot(matcher);\n    }"
            },
            {
              "step": 102,
              "variableName": "String commitId",
              "startLine": 169,
              "startColumn": 39,
              "endLine": 169,
              "endColumn": 54,
              "uri": "gradle-8.14.0/platforms/core-runtime/logging/src/main/java/org/gradle/util/internal/DefaultGradleVersion.java",
              "type": "String",
              "code": "        return stage.equals(matcher.group(5));\n    }\n\n    private String setOrParseCommitId(String commitId, Matcher matcher) {\n        if (commitId != null || !isCommitVersion(matcher)) {\n            return commitId;\n        } else {"
            },
            {
              "step": 103,
              "variableName": "commitId",
              "startLine": 171,
              "startColumn": 20,
              "endLine": 171,
              "endColumn": 28,
              "uri": "gradle-8.14.0/platforms/core-runtime/logging/src/main/java/org/gradle/util/internal/DefaultGradleVersion.java",
              "type": "String",
              "code": "\n    private String setOrParseCommitId(String commitId, Matcher matcher) {\n        if (commitId != null || !isCommitVersion(matcher)) {\n            return commitId;\n        } else {\n            return matcher.group(6);\n        }"
            },
            {
              "step": 104,
              "variableName": "setOrParseCommitId(commitId, matcher)",
              "startLine": 120,
              "startColumn": 25,
              "endLine": 120,
              "endColumn": 62,
              "uri": "gradle-8.14.0/platforms/core-runtime/logging/src/main/java/org/gradle/util/internal/DefaultGradleVersion.java",
              "type": "String",
              "code": "        versionPart = matcher.group(1);\n        majorPart = Integer.parseInt(matcher.group(2), 10);\n\n        this.commitId = setOrParseCommitId(commitId, matcher);\n        this.stage = parseStage(matcher);\n        this.snapshot = parseSnapshot(matcher);\n    }"
            },
            {
              "step": 105,
              "variableName": "this",
              "startLine": 120,
              "startColumn": 9,
              "endLine": 120,
              "endColumn": 13,
              "uri": "gradle-8.14.0/platforms/core-runtime/logging/src/main/java/org/gradle/util/internal/DefaultGradleVersion.java",
              "type": "DefaultGradleVersion [commitId] : String",
              "code": "        versionPart = matcher.group(1);\n        majorPart = Integer.parseInt(matcher.group(2), 10);\n\n        this.commitId = setOrParseCommitId(commitId, matcher);\n        this.stage = parseStage(matcher);\n        this.snapshot = parseSnapshot(matcher);\n    }"
            },
            {
              "step": 106,
              "variableName": "new DefaultGradleVersion(version, \"unknown\".equals(buildTimestamp) ? null : buildTimestamp, commitId)",
              "startLine": 86,
              "startColumn": 23,
              "endLine": 86,
              "endColumn": 124,
              "uri": "gradle-8.14.0/platforms/core-runtime/logging/src/main/java/org/gradle/util/internal/DefaultGradleVersion.java",
              "type": "DefaultGradleVersion [commitId] : String",
              "code": "            String buildTimestamp = properties.get(\"buildTimestampIso\").toString();\n            String commitId = properties.get(\"commitId\").toString();\n\n            CURRENT = new DefaultGradleVersion(version, \"unknown\".equals(buildTimestamp) ? null : buildTimestamp, commitId);\n        } catch (Exception e) {\n            throw new GradleException(format(\"Could not load version details from resource '%s'.\", resource), e);\n        } finally {"
            },
            {
              "step": 107,
              "variableName": "CURRENT",
              "startLine": 52,
              "startColumn": 47,
              "endLine": 52,
              "endColumn": 54,
              "uri": "gradle-8.14.0/platforms/core-runtime/logging/src/main/java/org/gradle/util/internal/DefaultGradleVersion.java",
              "type": "DefaultGradleVersion [commitId] : String",
              "code": "    private final Long snapshot;\n    private final String versionPart;\n    private final Stage stage;\n    private static final DefaultGradleVersion CURRENT;\n\n    public static final String RESOURCE_NAME = \"/org/gradle/build-receipt.properties\";\n    public static final String VERSION_OVERRIDE_VAR = \"GRADLE_VERSION_OVERRIDE\";"
            },
            {
              "step": 108,
              "variableName": "CURRENT",
              "startLine": 97,
              "startColumn": 16,
              "endLine": 97,
              "endColumn": 23,
              "uri": "gradle-8.14.0/platforms/core-runtime/logging/src/main/java/org/gradle/util/internal/DefaultGradleVersion.java",
              "type": "DefaultGradleVersion [commitId] : String",
              "code": "    }\n\n    public static DefaultGradleVersion current() {\n        return CURRENT;\n    }\n\n    /**"
            },
            {
              "step": 109,
              "variableName": "DefaultGradleVersion.current()",
              "startLine": 249,
              "startColumn": 51,
              "endLine": 249,
              "endColumn": 81,
              "uri": "gradle-8.14.0/platforms/core-runtime/gradle-cli/src/main/java/org/gradle/launcher/cli/DefaultCommandLineActionFactory.java",
              "type": "DefaultGradleVersion [commitId] : String",
              "code": "\n        @Override\n        public void execute(ExecutionListener executionListener) {\n            DefaultGradleVersion currentVersion = DefaultGradleVersion.current();\n\n            System.out.println();\n            System.out.println(\"------------------------------------------------------------\");"
            },
            {
              "step": 110,
              "variableName": "currentVersion",
              "startLine": 258,
              "startColumn": 47,
              "endLine": 258,
              "endColumn": 61,
              "uri": "gradle-8.14.0/platforms/core-runtime/gradle-cli/src/main/java/org/gradle/launcher/cli/DefaultCommandLineActionFactory.java",
              "type": "DefaultGradleVersion [commitId] : String",
              "code": "            System.out.println();\n            printAligned(ImmutableList.of(\n                new Line.KeyValue(\"Build time\", currentVersion.getBuildTimestamp()),\n                new Line.KeyValue(\"Revision\", currentVersion.getGitRevision()),\n                new Line.Blank(),\n                new Line.KeyValue(\"Kotlin\", KotlinDslVersion.current().getKotlinVersion()),\n                new Line.KeyValue(\"Groovy\", ReleaseInfo.getVersion()),"
            },
            {
              "step": 111,
              "variableName": "getGitRevision",
              "startLine": 205,
              "startColumn": 19,
              "endLine": 205,
              "endColumn": 33,
              "uri": "gradle-8.14.0/platforms/core-runtime/logging/src/main/java/org/gradle/util/internal/DefaultGradleVersion.java",
              "type": "DefaultGradleVersion [commitId] : String",
              "code": "        return getGitRevision();\n    }\n\n    public String getGitRevision() {\n        return commitId;\n    }\n"
            },
            {
              "step": 112,
              "variableName": "commitId",
              "startLine": 206,
              "startColumn": 16,
              "endLine": 206,
              "endColumn": 24,
              "uri": "gradle-8.14.0/platforms/core-runtime/logging/src/main/java/org/gradle/util/internal/DefaultGradleVersion.java",
              "type": "DefaultGradleVersion [commitId] : String",
              "code": "    }\n\n    public String getGitRevision() {\n        return commitId;\n    }\n\n    @Override"
            },
            {
              "step": 113,
              "variableName": "commitId",
              "startLine": 206,
              "startColumn": 16,
              "endLine": 206,
              "endColumn": 24,
              "uri": "gradle-8.14.0/platforms/core-runtime/logging/src/main/java/org/gradle/util/internal/DefaultGradleVersion.java",
              "type": "String",
              "code": "    }\n\n    public String getGitRevision() {\n        return commitId;\n    }\n\n    @Override"
            },
            {
              "step": 114,
              "variableName": "currentVersion.getGitRevision()",
              "startLine": 258,
              "startColumn": 47,
              "endLine": 258,
              "endColumn": 78,
              "uri": "gradle-8.14.0/platforms/core-runtime/gradle-cli/src/main/java/org/gradle/launcher/cli/DefaultCommandLineActionFactory.java",
              "type": "String",
              "code": "            System.out.println();\n            printAligned(ImmutableList.of(\n                new Line.KeyValue(\"Build time\", currentVersion.getBuildTimestamp()),\n                new Line.KeyValue(\"Revision\", currentVersion.getGitRevision()),\n                new Line.Blank(),\n                new Line.KeyValue(\"Kotlin\", KotlinDslVersion.current().getKotlinVersion()),\n                new Line.KeyValue(\"Groovy\", ReleaseInfo.getVersion()),"
            },
            {
              "step": 115,
              "variableName": "String value",
              "startLine": 275,
              "startColumn": 45,
              "endLine": 275,
              "endColumn": 57,
              "uri": "gradle-8.14.0/platforms/core-runtime/gradle-cli/src/main/java/org/gradle/launcher/cli/DefaultCommandLineActionFactory.java",
              "type": "String",
              "code": "                private final String key;\n                private final String value;\n\n                public KeyValue(String key, String value) {\n                    this.key = key;\n                    this.value = value;\n                }"
            },
            {
              "step": 116,
              "variableName": "value",
              "startLine": 277,
              "startColumn": 34,
              "endLine": 277,
              "endColumn": 39,
              "uri": "gradle-8.14.0/platforms/core-runtime/gradle-cli/src/main/java/org/gradle/launcher/cli/DefaultCommandLineActionFactory.java",
              "type": "String",
              "code": "\n                public KeyValue(String key, String value) {\n                    this.key = key;\n                    this.value = value;\n                }\n            }\n"
            },
            {
              "step": 117,
              "variableName": "this",
              "startLine": 277,
              "startColumn": 21,
              "endLine": 277,
              "endColumn": 25,
              "uri": "gradle-8.14.0/platforms/core-runtime/gradle-cli/src/main/java/org/gradle/launcher/cli/DefaultCommandLineActionFactory.java",
              "type": "KeyValue [value] : String",
              "code": "\n                public KeyValue(String key, String value) {\n                    this.key = key;\n                    this.value = value;\n                }\n            }\n"
            },
            {
              "step": 118,
              "variableName": "new Line.KeyValue(\"Revision\", currentVersion.getGitRevision())",
              "startLine": 258,
              "startColumn": 17,
              "endLine": 258,
              "endColumn": 79,
              "uri": "gradle-8.14.0/platforms/core-runtime/gradle-cli/src/main/java/org/gradle/launcher/cli/DefaultCommandLineActionFactory.java",
              "type": "KeyValue [value] : String",
              "code": "            System.out.println();\n            printAligned(ImmutableList.of(\n                new Line.KeyValue(\"Build time\", currentVersion.getBuildTimestamp()),\n                new Line.KeyValue(\"Revision\", currentVersion.getGitRevision()),\n                new Line.Blank(),\n                new Line.KeyValue(\"Kotlin\", KotlinDslVersion.current().getKotlinVersion()),\n                new Line.KeyValue(\"Groovy\", ReleaseInfo.getVersion()),"
            },
            {
              "step": 119,
              "variableName": "of(...) : ImmutableList [<element>, value] : String",
              "startLine": 256,
              "startColumn": 26,
              "endLine": 267,
              "endColumn": 14,
              "uri": "gradle-8.14.0/platforms/core-runtime/gradle-cli/src/main/java/org/gradle/launcher/cli/DefaultCommandLineActionFactory.java",
              "type": "ImmutableList [<element>, value] : String",
              "code": "            System.out.println(\"Gradle \" + currentVersion.getVersion());\n            System.out.println(\"------------------------------------------------------------\");\n            System.out.println();\n            printAligned(ImmutableList.of(\n                new Line.KeyValue(\"Build time\", currentVersion.getBuildTimestamp()),\n                new Line.KeyValue(\"Revision\", currentVersion.getGitRevision()),\n                new Line.Blank(),"
            },
            {
              "step": 120,
              "variableName": "List<Line> lines",
              "startLine": 304,
              "startColumn": 42,
              "endLine": 304,
              "endColumn": 58,
              "uri": "gradle-8.14.0/platforms/core-runtime/gradle-cli/src/main/java/org/gradle/launcher/cli/DefaultCommandLineActionFactory.java",
              "type": "ImmutableList [<element>, value] : String",
              "code": "         *\n         * @param lines the lines to print\n         */\n        private static void printAligned(List<Line> lines) {\n            int maxKeyLength = lines.stream()\n                .filter(line -> line instanceof Line.KeyValue)\n                .map(line -> ((Line.KeyValue) line).key.length())"
            },
            {
              "step": 121,
              "variableName": "lines",
              "startLine": 310,
              "startColumn": 30,
              "endLine": 310,
              "endColumn": 35,
              "uri": "gradle-8.14.0/platforms/core-runtime/gradle-cli/src/main/java/org/gradle/launcher/cli/DefaultCommandLineActionFactory.java",
              "type": "ImmutableList [<element>, value] : String",
              "code": "                .map(line -> ((Line.KeyValue) line).key.length())\n                .max(Integer::compare)\n                .orElse(0);\n            for (Line line : lines) {\n                if (line instanceof Line.KeyValue) {\n                    Line.KeyValue keyValue = (Line.KeyValue) line;\n                    System.out.print(keyValue.key + \": \");"
            },
            {
              "step": 122,
              "variableName": "line",
              "startLine": 311,
              "startColumn": 21,
              "endLine": 311,
              "endColumn": 25,
              "uri": "gradle-8.14.0/platforms/core-runtime/gradle-cli/src/main/java/org/gradle/launcher/cli/DefaultCommandLineActionFactory.java",
              "type": "KeyValue [value] : String",
              "code": "                .max(Integer::compare)\n                .orElse(0);\n            for (Line line : lines) {\n                if (line instanceof Line.KeyValue) {\n                    Line.KeyValue keyValue = (Line.KeyValue) line;\n                    System.out.print(keyValue.key + \": \");\n                    // Add one to account for colon"
            },
            {
              "step": 123,
              "variableName": "(Line.KeyValue) line",
              "startLine": 312,
              "startColumn": 46,
              "endLine": 312,
              "endColumn": 66,
              "uri": "gradle-8.14.0/platforms/core-runtime/gradle-cli/src/main/java/org/gradle/launcher/cli/DefaultCommandLineActionFactory.java",
              "type": "KeyValue [value] : String",
              "code": "                .orElse(0);\n            for (Line line : lines) {\n                if (line instanceof Line.KeyValue) {\n                    Line.KeyValue keyValue = (Line.KeyValue) line;\n                    System.out.print(keyValue.key + \": \");\n                    // Add one to account for colon\n                    for (int i = keyValue.key.length(); i < maxKeyLength + 1; i++) {"
            },
            {
              "step": 124,
              "variableName": "keyValue",
              "startLine": 318,
              "startColumn": 40,
              "endLine": 318,
              "endColumn": 48,
              "uri": "gradle-8.14.0/platforms/core-runtime/gradle-cli/src/main/java/org/gradle/launcher/cli/DefaultCommandLineActionFactory.java",
              "type": "KeyValue [value] : String",
              "code": "                    for (int i = keyValue.key.length(); i < maxKeyLength + 1; i++) {\n                        System.out.print(' ');\n                    }\n                    System.out.println(keyValue.value);\n                } else {\n                    System.out.println();\n                }"
            },
            {
              "step": 125,
              "variableName": "keyValue.value",
              "startLine": 318,
              "startColumn": 40,
              "endLine": 318,
              "endColumn": 54,
              "uri": "gradle-8.14.0/platforms/core-runtime/gradle-cli/src/main/java/org/gradle/launcher/cli/DefaultCommandLineActionFactory.java",
              "type": "",
              "code": "                    for (int i = keyValue.key.length(); i < maxKeyLength + 1; i++) {\n                        System.out.print(' ');\n                    }\n                    System.out.println(keyValue.value);\n                } else {\n                    System.out.println();\n                }"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "source",
              "startLine": 40,
              "startColumn": 39,
              "endLine": 40,
              "endColumn": 45,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/RegExpNameMapper.java",
              "type": "String",
              "code": "    @Override\n    public String transform(String source) {\n        if (matcher == null) {\n            matcher = pattern.matcher(source);\n        } else {\n            matcher.reset(source);\n        }"
            },
            {
              "step": 1,
              "variableName": "result",
              "startLine": 48,
              "startColumn": 16,
              "endLine": 48,
              "endColumn": 22,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/RegExpNameMapper.java",
              "type": "String",
              "code": "        if (matcher.find()) {\n            result = matcher.replaceFirst(replacement);\n        }\n        return result;\n    }\n}\n"
            },
            {
              "step": 2,
              "variableName": "transformer.transform(value)",
              "startLine": 37,
              "startColumn": 31,
              "endLine": 37,
              "endColumn": 59,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/ChainingTransformer.java",
              "type": "String",
              "code": "    public T transform(T original) {\n        T value = original;\n        for (Transformer<T, T> transformer : transformers) {\n            value = type.cast(transformer.transform(value));\n        }\n        return value;\n    }"
            },
            {
              "step": 3,
              "variableName": "type.cast(transformer.transform(value))",
              "startLine": 37,
              "startColumn": 21,
              "endLine": 37,
              "endColumn": 60,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/ChainingTransformer.java",
              "type": "String",
              "code": "    public T transform(T original) {\n        T value = original;\n        for (Transformer<T, T> transformer : transformers) {\n            value = type.cast(transformer.transform(value));\n        }\n        return value;\n    }"
            },
            {
              "step": 4,
              "variableName": "value",
              "startLine": 39,
              "startColumn": 16,
              "endLine": 39,
              "endColumn": 21,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/ChainingTransformer.java",
              "type": "String",
              "code": "        for (Transformer<T, T> transformer : transformers) {\n            value = type.cast(transformer.transform(value));\n        }\n        return value;\n    }\n\n    public void add(Transformer<T, T> transformer) {"
            },
            {
              "step": 5,
              "variableName": "describer.transform(this)",
              "startLine": 163,
              "startColumn": 16,
              "endLine": 163,
              "endColumn": 41,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/repositories/DefaultMavenArtifactRepository.java",
              "type": "String",
              "code": "\n    @Override\n    public String getDisplayName() {\n        return describer.transform(this);\n    }\n\n    @Override"
            },
            {
              "step": 6,
              "variableName": "describable.getDisplayName()",
              "startLine": 313,
              "startColumn": 35,
              "endLine": 313,
              "endColumn": 63,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "String",
              "code": "        public String getDisplayName() {\n            synchronized (this) {\n                if (displayName == null) {\n                    displayName = describable.getDisplayName();\n                    if (capDisplayName != null || !(describable instanceof DisplayName)) {\n                        describable = null;\n                    }"
            },
            {
              "step": 7,
              "variableName": "displayName",
              "startLine": 318,
              "startColumn": 24,
              "endLine": 318,
              "endColumn": 35,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "String",
              "code": "                        describable = null;\n                    }\n                }\n                return displayName;\n            }\n        }\n    }"
            },
            {
              "step": 8,
              "variableName": "displayName.getDisplayName()",
              "startLine": 772,
              "startColumn": 73,
              "endLine": 772,
              "endColumn": 101,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/configurations/DefaultConfiguration.java",
              "type": "String",
              "code": "                try {\n                    results = resolver.resolveGraph(DefaultConfiguration.this);\n                } catch (Exception e) {\n                    throw exceptionMapper.mapFailure(e, \"dependencies\", displayName.getDisplayName());\n                }\n\n                // Make the new state visible in case a dependency resolution listener queries the result, which requires the new state"
            },
            {
              "step": 9,
              "variableName": "String contextDisplayName",
              "startLine": 68,
              "startColumn": 77,
              "endLine": 68,
              "endColumn": 102,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "String",
              "code": "        return mapFailure(failure, type, displayName);\n    }\n\n    public TypedResolveException mapFailure(Throwable failure, String type, String contextDisplayName) {\n        if (!(failure instanceof TypedResolveException)) {\n            return new TypedResolveException(\n                type,"
            },
            {
              "step": 10,
              "variableName": "contextDisplayName",
              "startLine": 72,
              "startColumn": 17,
              "endLine": 72,
              "endColumn": 35,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "String",
              "code": "        if (!(failure instanceof TypedResolveException)) {\n            return new TypedResolveException(\n                type,\n                contextDisplayName,\n                ImmutableList.of(mapRepositoryOverrideFailure(contextDisplayName, failure))\n            );\n        }"
            },
            {
              "step": 11,
              "variableName": "new TypedResolveException(...) : TypedResolveException",
              "startLine": 70,
              "startColumn": 20,
              "endLine": 74,
              "endColumn": 14,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "TypedResolveException",
              "code": "\n    public TypedResolveException mapFailure(Throwable failure, String type, String contextDisplayName) {\n        if (!(failure instanceof TypedResolveException)) {\n            return new TypedResolveException(\n                type,\n                contextDisplayName,\n                ImmutableList.of(mapRepositoryOverrideFailure(contextDisplayName, failure))"
            },
            {
              "step": 12,
              "variableName": "exceptionMapper.mapFailure(e, \"dependencies\", displayName.getDisplayName())",
              "startLine": 772,
              "startColumn": 27,
              "endLine": 772,
              "endColumn": 102,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/configurations/DefaultConfiguration.java",
              "type": "TypedResolveException",
              "code": "                try {\n                    results = resolver.resolveGraph(DefaultConfiguration.this);\n                } catch (Exception e) {\n                    throw exceptionMapper.mapFailure(e, \"dependencies\", displayName.getDisplayName());\n                }\n\n                // Make the new state visible in case a dependency resolution listener queries the result, which requires the new state"
            },
            {
              "step": 13,
              "variableName": "e",
              "startLine": 772,
              "startColumn": 54,
              "endLine": 772,
              "endColumn": 55,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/configurations/DefaultConfiguration.java",
              "type": "Exception",
              "code": "                try {\n                    results = resolver.resolveGraph(DefaultConfiguration.this);\n                } catch (Exception e) {\n                    throw exceptionMapper.mapFailure(e, \"dependencies\", displayName.getDisplayName());\n                }\n\n                // Make the new state visible in case a dependency resolution listener queries the result, which requires the new state"
            },
            {
              "step": 14,
              "variableName": "Throwable failure",
              "startLine": 68,
              "startColumn": 45,
              "endLine": 68,
              "endColumn": 62,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Throwable",
              "code": "        return mapFailure(failure, type, displayName);\n    }\n\n    public TypedResolveException mapFailure(Throwable failure, String type, String contextDisplayName) {\n        if (!(failure instanceof TypedResolveException)) {\n            return new TypedResolveException(\n                type,"
            },
            {
              "step": 15,
              "variableName": "failure",
              "startLine": 73,
              "startColumn": 83,
              "endLine": 73,
              "endColumn": 90,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Throwable",
              "code": "            return new TypedResolveException(\n                type,\n                contextDisplayName,\n                ImmutableList.of(mapRepositoryOverrideFailure(contextDisplayName, failure))\n            );\n        }\n"
            },
            {
              "step": 16,
              "variableName": "Throwable failure",
              "startLine": 94,
              "startColumn": 78,
              "endLine": 94,
              "endColumn": 95,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Throwable",
              "code": "\n    // TODO: We should handle this exception at the source instead of using instanceof to detect it after it is thrown.\n    //       We should try to avoid catching and analyzing runtime exceptions\n    public Throwable mapRepositoryOverrideFailure(String contextDisplayName, Throwable failure) {\n        if (!(failure instanceof ModuleVersionNotFoundException) || !settingsRepositoriesIgnored()) {\n            return failure;\n        }"
            },
            {
              "step": 17,
              "variableName": "failure",
              "startLine": 108,
              "startColumn": 35,
              "endLine": 108,
              "endColumn": 42,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Throwable",
              "code": "        return new TypedResolveException(\n            \"dependencies\",\n            contextDisplayName,\n            Collections.singleton(failure),\n            resolutions\n        );\n    }"
            },
            {
              "step": 18,
              "variableName": "Collections.singleton(failure)",
              "startLine": 108,
              "startColumn": 13,
              "endLine": 108,
              "endColumn": 43,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Set [<element>] : Throwable",
              "code": "        return new TypedResolveException(\n            \"dependencies\",\n            contextDisplayName,\n            Collections.singleton(failure),\n            resolutions\n        );\n    }"
            },
            {
              "step": 19,
              "variableName": "Collections.singleton(failure)",
              "startLine": 108,
              "startColumn": 13,
              "endLine": 108,
              "endColumn": 43,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Set",
              "code": "        return new TypedResolveException(\n            \"dependencies\",\n            contextDisplayName,\n            Collections.singleton(failure),\n            resolutions\n        );\n    }"
            },
            {
              "step": 20,
              "variableName": "Iterable<? extends Throwable> failures",
              "startLine": 42,
              "startColumn": 67,
              "endLine": 42,
              "endColumn": 105,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ivyservice/TypedResolveException.java",
              "type": "Set",
              "code": "    /**\n     * Creates a new instance with resolutions.\n     */\n    public TypedResolveException(String type, String displayName, Iterable<? extends Throwable> failures, List<String> resolutions) {\n        super(buildMessage(type, displayName), failures, false);\n        this.type = type;\n        this.resolutions = ImmutableList.copyOf(resolutions);"
            },
            {
              "step": 21,
              "variableName": "failures",
              "startLine": 43,
              "startColumn": 48,
              "endLine": 43,
              "endColumn": 56,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ivyservice/TypedResolveException.java",
              "type": "Set",
              "code": "     * Creates a new instance with resolutions.\n     */\n    public TypedResolveException(String type, String displayName, Iterable<? extends Throwable> failures, List<String> resolutions) {\n        super(buildMessage(type, displayName), failures, false);\n        this.type = type;\n        this.resolutions = ImmutableList.copyOf(resolutions);\n    }"
            },
            {
              "step": 22,
              "variableName": "Iterable<? extends Throwable> causes",
              "startLine": 77,
              "startColumn": 48,
              "endLine": 77,
              "endColumn": 84,
              "uri": "gradle-8.14.0/subprojects/core-api/src/main/java/org/gradle/api/artifacts/ResolveException.java",
              "type": "Set",
              "code": "     * @since 8.9\n     */\n    @Incubating\n    protected ResolveException(String message, Iterable<? extends Throwable> causes, @SuppressWarnings(\"unused\") boolean dummy) {\n        super(message, causes);\n    }\n}"
            },
            {
              "step": 23,
              "variableName": "causes",
              "startLine": 78,
              "startColumn": 24,
              "endLine": 78,
              "endColumn": 30,
              "uri": "gradle-8.14.0/subprojects/core-api/src/main/java/org/gradle/api/artifacts/ResolveException.java",
              "type": "Set",
              "code": "     */\n    @Incubating\n    protected ResolveException(String message, Iterable<? extends Throwable> causes, @SuppressWarnings(\"unused\") boolean dummy) {\n        super(message, causes);\n    }\n}\n"
            },
            {
              "step": 24,
              "variableName": "Iterable<? extends Throwable> causes",
              "startLine": 47,
              "startColumn": 55,
              "endLine": 47,
              "endColumn": 91,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "Set",
              "code": "        this.causes.addAll(Arrays.asList(causes));\n    }\n\n    public DefaultMultiCauseException(String message, Iterable<? extends Throwable> causes) {\n        super(message);\n        this.message = message;\n        initCauses(causes);"
            },
            {
              "step": 25,
              "variableName": "causes",
              "startLine": 50,
              "startColumn": 20,
              "endLine": 50,
              "endColumn": 26,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "Set",
              "code": "    public DefaultMultiCauseException(String message, Iterable<? extends Throwable> causes) {\n        super(message);\n        this.message = message;\n        initCauses(causes);\n    }\n\n    public DefaultMultiCauseException(Factory<String> messageFactory) {"
            },
            {
              "step": 26,
              "variableName": "Iterable<? extends Throwable> causes",
              "startLine": 112,
              "startColumn": 28,
              "endLine": 112,
              "endColumn": 64,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "Iterable",
              "code": "        return null;\n    }\n\n    public void initCauses(Iterable<? extends Throwable> causes) {\n        this.causes.clear();\n        for (Throwable cause : causes) {\n            this.causes.add(cause);"
            },
            {
              "step": 27,
              "variableName": "cause",
              "startLine": 115,
              "startColumn": 29,
              "endLine": 115,
              "endColumn": 34,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "Throwable",
              "code": "    public void initCauses(Iterable<? extends Throwable> causes) {\n        this.causes.clear();\n        for (Throwable cause : causes) {\n            this.causes.add(cause);\n        }\n    }\n"
            },
            {
              "step": 28,
              "variableName": "this.causes",
              "startLine": 115,
              "startColumn": 13,
              "endLine": 115,
              "endColumn": 24,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "CopyOnWriteArrayList [<element>] : Throwable",
              "code": "    public void initCauses(Iterable<? extends Throwable> causes) {\n        this.causes.clear();\n        for (Throwable cause : causes) {\n            this.causes.add(cause);\n        }\n    }\n"
            },
            {
              "step": 29,
              "variableName": "this",
              "startLine": 115,
              "startColumn": 13,
              "endLine": 115,
              "endColumn": 17,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "DefaultMultiCauseException [causes, <element>] : Throwable",
              "code": "    public void initCauses(Iterable<? extends Throwable> causes) {\n        this.causes.clear();\n        for (Throwable cause : causes) {\n            this.causes.add(cause);\n        }\n    }\n"
            },
            {
              "step": 30,
              "variableName": "projectConfigurationException",
              "startLine": 57,
              "startColumn": 17,
              "endLine": 57,
              "endColumn": 46,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/DefaultExceptionAnalyser.java",
              "type": "ProjectConfigurationException [causes, <element>] : Throwable",
              "code": "                }\n            }\n            if (!additionalFailures.isEmpty()) {\n                projectConfigurationException.initCauses(additionalFailures);\n                failures.add(transform(projectConfigurationException));\n            }\n        } else if (exception instanceof ServiceCreationException) {"
            },
            {
              "step": 31,
              "variableName": "projectConfigurationException",
              "startLine": 58,
              "startColumn": 40,
              "endLine": 58,
              "endColumn": 69,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/DefaultExceptionAnalyser.java",
              "type": "ProjectConfigurationException [causes, <element>] : Throwable",
              "code": "            }\n            if (!additionalFailures.isEmpty()) {\n                projectConfigurationException.initCauses(additionalFailures);\n                failures.add(transform(projectConfigurationException));\n            }\n        } else if (exception instanceof ServiceCreationException) {\n            failures.add(transform(new InitializationException(exception)));"
            },
            {
              "step": 32,
              "variableName": "transform(projectConfigurationException)",
              "startLine": 58,
              "startColumn": 30,
              "endLine": 58,
              "endColumn": 70,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/DefaultExceptionAnalyser.java",
              "type": "LocationAwareException",
              "code": "            }\n            if (!additionalFailures.isEmpty()) {\n                projectConfigurationException.initCauses(additionalFailures);\n                failures.add(transform(projectConfigurationException));\n            }\n        } else if (exception instanceof ServiceCreationException) {\n            failures.add(transform(new InitializationException(exception)));"
            },
            {
              "step": 33,
              "variableName": "failures",
              "startLine": 58,
              "startColumn": 17,
              "endLine": 58,
              "endColumn": 25,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/DefaultExceptionAnalyser.java",
              "type": "Collection [<element>] : LocationAwareException",
              "code": "            }\n            if (!additionalFailures.isEmpty()) {\n                projectConfigurationException.initCauses(additionalFailures);\n                failures.add(transform(projectConfigurationException));\n            }\n        } else if (exception instanceof ServiceCreationException) {\n            failures.add(transform(new InitializationException(exception)));"
            },
            {
              "step": 34,
              "variableName": "result",
              "startLine": 53,
              "startColumn": 54,
              "endLine": 53,
              "endColumn": 60,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/MultipleBuildFailuresExceptionAnalyser.java",
              "type": "ArrayList [<element>] : LocationAwareException",
              "code": "        for (Throwable failure : failures) {\n            if (failure instanceof MultipleBuildFailures) {\n                for (Throwable cause : ((MultipleBuildFailures) failure).getCauses()) {\n                    collector.collectFailures(cause, result);\n                }\n            } else {\n                collector.collectFailures(failure, result);"
            },
            {
              "step": 35,
              "variableName": "result",
              "startLine": 60,
              "startColumn": 39,
              "endLine": 60,
              "endColumn": 45,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/MultipleBuildFailuresExceptionAnalyser.java",
              "type": "ArrayList [<element>] : LocationAwareException",
              "code": "            }\n        }\n        if (result.size() == 1 && result.get(0) instanceof RuntimeException) {\n            return (RuntimeException) result.get(0);\n        } else {\n            return new MultipleBuildFailures(result);\n        }"
            },
            {
              "step": 36,
              "variableName": "result.get(0)",
              "startLine": 60,
              "startColumn": 39,
              "endLine": 60,
              "endColumn": 52,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/MultipleBuildFailuresExceptionAnalyser.java",
              "type": "LocationAwareException",
              "code": "            }\n        }\n        if (result.size() == 1 && result.get(0) instanceof RuntimeException) {\n            return (RuntimeException) result.get(0);\n        } else {\n            return new MultipleBuildFailures(result);\n        }"
            },
            {
              "step": 37,
              "variableName": "(RuntimeException) result.get(0)",
              "startLine": 60,
              "startColumn": 20,
              "endLine": 60,
              "endColumn": 52,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/MultipleBuildFailuresExceptionAnalyser.java",
              "type": "LocationAwareException",
              "code": "            }\n        }\n        if (result.size() == 1 && result.get(0) instanceof RuntimeException) {\n            return (RuntimeException) result.get(0);\n        } else {\n            return new MultipleBuildFailures(result);\n        }"
            },
            {
              "step": 38,
              "variableName": "exceptionAnalyser.transform(finishFailures)",
              "startLine": 72,
              "startColumn": 16,
              "endLine": 72,
              "endColumn": 59,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/internal/buildtree/DefaultBuildTreeFinishExecutor.java",
              "type": "LocationAwareException",
              "code": "            finishFailures.addAll(result.getFailures());\n        });\n\n        return exceptionAnalyser.transform(finishFailures);\n    }\n}\n"
            },
            {
              "step": 39,
              "variableName": "delegate.finishBuildTree(failures)",
              "startLine": 46,
              "startColumn": 28,
              "endLine": 46,
              "endColumn": 62,
              "uri": "gradle-8.14.0/subprojects/composite-builds/src/main/java/org/gradle/composite/internal/OperationFiringBuildTreeFinishExecutor.java",
              "type": "LocationAwareException",
              "code": "            @Override\n            public RuntimeException call(BuildOperationContext context) {\n                try {\n                    return delegate.finishBuildTree(failures);\n                } finally {\n                    context.setResult(RESULT);\n                }"
            },
            {
              "step": 40,
              "variableName": "buildOperation.call(context)",
              "startLine": 239,
              "startColumn": 21,
              "endLine": 239,
              "endColumn": 49,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/testFixtures/java/org/gradle/internal/operations/TestBuildOperationRunner.java",
              "type": "LocationAwareException",
              "code": "            TestBuildOperationContext context = new TestBuildOperationContext(record);\n            T t;\n            try {\n                t = buildOperation.call(context);\n            } catch (Throwable failure) {\n                if (record.failure == null) {\n                    record.failure = failure;"
            },
            {
              "step": 41,
              "variableName": "t",
              "startLine": 246,
              "startColumn": 20,
              "endLine": 246,
              "endColumn": 21,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/testFixtures/java/org/gradle/internal/operations/TestBuildOperationRunner.java",
              "type": "LocationAwareException",
              "code": "                }\n                throw throwAsUncheckedException(failure);\n            }\n            return t;\n        }\n\n        private <O extends BuildOperation> void execute(O buildOperation, BuildOperationWorker<O> worker) {"
            },
            {
              "step": 42,
              "variableName": "log.call(buildOperation)",
              "startLine": 51,
              "startColumn": 16,
              "endLine": 51,
              "endColumn": 40,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/testFixtures/java/org/gradle/internal/operations/TestBuildOperationRunner.java",
              "type": "LocationAwareException",
              "code": "\n    @Override\n    public <T> T call(CallableBuildOperation<T> buildOperation) {\n        return log.call(buildOperation);\n    }\n\n    @Override"
            },
            {
              "step": 43,
              "variableName": "ca",
              "startLine": 115,
              "startColumn": 5,
              "endLine": 121,
              "endColumn": 7,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/configurationcache/ConfigurationCacheBuildOperations.kt",
              "type": "LocationAwareException",
              "code": "\ninternal\nfun <T : Any> BuildOperationRunner.withModelLoadOperation(block: () -> T): T =\n    call(object : CallableBuildOperation<T> {\n        override fun description(): BuildOperationDescriptor.Builder = BuildOperationDescriptor\n            .displayName(\"Load model from configuration cache\")\n            .progressDisplayName(\"Loading model from configuration cache\")"
            },
            {
              "step": 44,
              "variableName": "ca",
              "startLine": 115,
              "startColumn": 5,
              "endLine": 121,
              "endColumn": 7,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/configurationcache/ConfigurationCacheBuildOperations.kt",
              "type": "LocationAwareException",
              "code": "\ninternal\nfun <T : Any> BuildOperationRunner.withModelLoadOperation(block: () -> T): T =\n    call(object : CallableBuildOperation<T> {\n        override fun description(): BuildOperationDescriptor.Builder = BuildOperationDescriptor\n            .displayName(\"Load model from configuration cache\")\n            .progressDisplayName(\"Loading model from configuration cache\")"
            },
            {
              "step": 45,
              "variableName": "b",
              "startLine": 635,
              "startColumn": 9,
              "endLine": 641,
              "endColumn": 10,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "        // No need to record the `ClassLoaderScope` tree when loading\n        scopeRegistryListener.dispose()\n\n        buildOperationRunner.withModelLoadOperation {\n            val storeLoadResult = entryStore.useForStateLoad(StateType.Model) { stateFile: ConfigurationCacheStateFile ->\n                cacheIO.readModelFrom(stateFile)\n            }"
            },
            {
              "step": 46,
              "variableName": "block()",
              "startLine": 668,
              "startColumn": 22,
              "endLine": 668,
              "endColumn": 29,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "    private\n    inline fun <T> runAtConfigurationTime(block: () -> T): T {\n        prepareConfigurationTimeBarrier()\n        val result = block()\n        crossConfigurationTimeBarrier()\n        return result\n    }"
            },
            {
              "step": 47,
              "variableName": "result",
              "startLine": 670,
              "startColumn": 16,
              "endLine": 670,
              "endColumn": 22,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "        prepareConfigurationTimeBarrier()\n        val result = block()\n        crossConfigurationTimeBarrier()\n        return result\n    }\n\n    private"
            },
            {
              "step": 48,
              "variableName": "runAtConfigurationTime(...) : LocationAwareException",
              "startLine": 631,
              "startColumn": 28,
              "endLine": 642,
              "endColumn": 6,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "    data class LoadResultMetadata(val originInvocationId: String? = null)\n\n    private\n    fun loadModel(): Any = runAtConfigurationTime {\n        // No need to record the `ClassLoaderScope` tree when loading\n        scopeRegistryListener.dispose()\n"
            },
            {
              "step": 49,
              "variableName": "loadModel()",
              "startLine": 268,
              "startColumn": 20,
              "endLine": 268,
              "endColumn": 31,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "    override fun <T : Any> loadOrCreateModel(creator: () -> T): T {\n        if (isLoaded) {\n            runLoadedSideEffects()\n            return loadModel().uncheckedCast()\n        }\n\n        return runWorkThatContributesToCacheEntry {"
            },
            {
              "step": 50,
              "variableName": "Any",
              "startLine": 22,
              "startColumn": 15,
              "endLine": 22,
              "endColumn": 18,
              "uri": "gradle-8.14.0/platforms/core-configuration/stdlib-kotlin-extensions/src/main/kotlin/org/gradle/internal/extensions/stdlib/CastExtensions.kt",
              "type": "Object",
              "code": "import org.gradle.internal.Cast\n\n\nfun <T : Any> Any.uncheckedCast(): T =\n    Cast.uncheckedNonnullCast(this)\n"
            },
            {
              "step": 51,
              "variableName": "this",
              "startLine": 23,
              "startColumn": 31,
              "endLine": 23,
              "endColumn": 35,
              "uri": "gradle-8.14.0/platforms/core-configuration/stdlib-kotlin-extensions/src/main/kotlin/org/gradle/internal/extensions/stdlib/CastExtensions.kt",
              "type": "Object",
              "code": "\n\nfun <T : Any> Any.uncheckedCast(): T =\n    Cast.uncheckedNonnullCast(this)\n"
            },
            {
              "step": 52,
              "variableName": "Object object",
              "startLine": 76,
              "startColumn": 46,
              "endLine": 76,
              "endColumn": 59,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/Cast.java",
              "type": "Object",
              "code": "    }\n\n    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})\n    public static <T> T uncheckedNonnullCast(Object object) {\n        return (T) object;\n    }\n}"
            },
            {
              "step": 53,
              "variableName": "(T) object",
              "startLine": 77,
              "startColumn": 16,
              "endLine": 77,
              "endColumn": 26,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/Cast.java",
              "type": "Object",
              "code": "\n    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})\n    public static <T> T uncheckedNonnullCast(Object object) {\n        return (T) object;\n    }\n}\n"
            },
            {
              "step": 54,
              "variableName": "Cast.uncheckedNonnullCast(defaultValue)",
              "startLine": 112,
              "startColumn": 73,
              "endLine": 112,
              "endColumn": 112,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/api/internal/provider/AbstractMinimalProvider.java",
              "type": "Object",
              "code": "\n    @Override\n    public T getOrElse(T defaultValue) {\n        return calculateOwnValue(ValueConsumer.IgnoreUnsafeRead).orElse(Cast.uncheckedNonnullCast(defaultValue));\n    }\n\n    @Override"
            },
            {
              "step": 55,
              "variableName": "T defaultValue",
              "startLine": 610,
              "startColumn": 25,
              "endLine": 610,
              "endColumn": 39,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/api/internal/provider/ValueSupplier.java",
              "type": "Object",
              "code": "        }\n\n        @Override\n        public T orElse(T defaultValue) {\n            return defaultValue;\n        }\n"
            },
            {
              "step": 56,
              "variableName": "defaultValue",
              "startLine": 611,
              "startColumn": 20,
              "endLine": 611,
              "endColumn": 32,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/api/internal/provider/ValueSupplier.java",
              "type": "Object",
              "code": "\n        @Override\n        public T orElse(T defaultValue) {\n            return defaultValue;\n        }\n\n        @Override"
            },
            {
              "step": 57,
              "variableName": "calculateOwnValue(ValueConsumer.IgnoreUnsafeRead).orElse(Cast.uncheckedNonnullCast(defaultValue))",
              "startLine": 112,
              "startColumn": 16,
              "endLine": 112,
              "endColumn": 113,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/api/internal/provider/AbstractMinimalProvider.java",
              "type": "Object",
              "code": "\n    @Override\n    public T getOrElse(T defaultValue) {\n        return calculateOwnValue(ValueConsumer.IgnoreUnsafeRead).orElse(Cast.uncheckedNonnullCast(defaultValue));\n    }\n\n    @Override"
            },
            {
              "step": 58,
              "variableName": "getNativeImageCapable().getOrElse(false)",
              "startLine": 105,
              "startColumn": 13,
              "endLine": 105,
              "endColumn": 53,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-configuration/src/main/java/org/gradle/buildconfiguration/tasks/UpdateDaemonJvm.java",
              "type": "Boolean",
              "code": "            getPropertiesFile().get().getAsFile(),\n            getLanguageVersion().get(),\n            jvmVendorCriteria,\n            getNativeImageCapable().getOrElse(false),\n            getToolchainDownloadUrls().get()\n        );\n    }"
            },
            {
              "step": 59,
              "variableName": "File propertiesFile",
              "startLine": 45,
              "startColumn": 9,
              "endLine": 45,
              "endColumn": 28,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-configuration/src/main/java/org/gradle/internal/buildconfiguration/tasks/DaemonJvmPropertiesModifier.java",
              "type": "File",
              "code": "    }\n\n    public void updateJvmCriteria(\n        File propertiesFile,\n        JavaLanguageVersion toolchainVersion,\n        @Nullable String toolchainVendor,\n        boolean nativeImageCapable,"
            },
            {
              "step": 60,
              "variableName": "propertiesFile",
              "startLine": 67,
              "startColumn": 33,
              "endLine": 67,
              "endColumn": 47,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-configuration/src/main/java/org/gradle/internal/buildconfiguration/tasks/DaemonJvmPropertiesModifier.java",
              "type": "File",
              "code": "            daemonJvmProperties.put(toolchainUrlProperty, uri.toString());\n        });\n\n        GFileUtils.parentMkdirs(propertiesFile);\n        try {\n            PropertiesUtils.store(daemonJvmProperties, propertiesFile, \"This file is generated by \" + DaemonJvmPropertiesConfigurator.TASK_NAME);\n        } catch (IOException e) {"
            },
            {
              "step": 61,
              "variableName": "File child",
              "startLine": 241,
              "startColumn": 37,
              "endLine": 241,
              "endColumn": 47,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/util/internal/GFileUtils.java",
              "type": "File",
              "code": "     * @return The parent dir file\n     * @see #mkdirs(java.io.File)\n     */\n    public static File parentMkdirs(File child) {\n        File parent = child.getParentFile();\n        mkdirs(parent);\n        return parent;"
            },
            {
              "step": 62,
              "variableName": "child",
              "startLine": 242,
              "startColumn": 23,
              "endLine": 242,
              "endColumn": 28,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/util/internal/GFileUtils.java",
              "type": "File",
              "code": "     * @see #mkdirs(java.io.File)\n     */\n    public static File parentMkdirs(File child) {\n        File parent = child.getParentFile();\n        mkdirs(parent);\n        return parent;\n    }"
            },
            {
              "step": 63,
              "variableName": "getParentFile",
              "startLine": 392,
              "startColumn": 21,
              "endLine": 392,
              "endColumn": 34,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "TestFile",
              "code": "    }\n\n    @Override\n    public TestFile getParentFile() {\n        return super.getParentFile() == null ? null : new TestFile(super.getParentFile());\n    }\n"
            },
            {
              "step": 64,
              "variableName": "super",
              "startLine": 393,
              "startColumn": 68,
              "endLine": 393,
              "endColumn": 73,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "TestFile",
              "code": "\n    @Override\n    public TestFile getParentFile() {\n        return super.getParentFile() == null ? null : new TestFile(super.getParentFile());\n    }\n\n    @Override"
            },
            {
              "step": 65,
              "variableName": "super.getParentFile()",
              "startLine": 393,
              "startColumn": 68,
              "endLine": 393,
              "endColumn": 89,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "File",
              "code": "\n    @Override\n    public TestFile getParentFile() {\n        return super.getParentFile() == null ? null : new TestFile(super.getParentFile());\n    }\n\n    @Override"
            },
            {
              "step": 66,
              "variableName": "File file",
              "startLine": 77,
              "startColumn": 21,
              "endLine": 77,
              "endColumn": 30,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "File",
              "code": "    private boolean useNativeTools;\n    private final File relativeBase;\n\n    public TestFile(File file, Object... path) {\n        super(join(file, path).getAbsolutePath());\n        this.relativeBase = file;\n    }"
            },
            {
              "step": 67,
              "variableName": "file",
              "startLine": 78,
              "startColumn": 20,
              "endLine": 78,
              "endColumn": 24,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "File",
              "code": "    private final File relativeBase;\n\n    public TestFile(File file, Object... path) {\n        super(join(file, path).getAbsolutePath());\n        this.relativeBase = file;\n    }\n"
            },
            {
              "step": 68,
              "variableName": "File file",
              "startLine": 126,
              "startColumn": 30,
              "endLine": 126,
              "endColumn": 39,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "File",
              "code": "        }\n    }\n\n    private static File join(File file, Object[] path) {\n        File current = file.getAbsoluteFile();\n        for (Object p : path) {\n            current = new File(current, p.toString());"
            },
            {
              "step": 69,
              "variableName": "file",
              "startLine": 127,
              "startColumn": 24,
              "endLine": 127,
              "endColumn": 28,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "File",
              "code": "    }\n\n    private static File join(File file, Object[] path) {\n        File current = file.getAbsoluteFile();\n        for (Object p : path) {\n            current = new File(current, p.toString());\n        }"
            },
            {
              "step": 70,
              "variableName": "file.getAbsoluteFile()",
              "startLine": 127,
              "startColumn": 24,
              "endLine": 127,
              "endColumn": 46,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "File",
              "code": "    }\n\n    private static File join(File file, Object[] path) {\n        File current = file.getAbsoluteFile();\n        for (Object p : path) {\n            current = new File(current, p.toString());\n        }"
            },
            {
              "step": 71,
              "variableName": "current",
              "startLine": 132,
              "startColumn": 20,
              "endLine": 132,
              "endColumn": 27,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "File",
              "code": "            current = new File(current, p.toString());\n        }\n        try {\n            return current.getCanonicalFile();\n        } catch (IOException e) {\n            throw new RuntimeException(String.format(\"Could not canonicalise '%s'.\", current), e);\n        }"
            },
            {
              "step": 72,
              "variableName": "getCanonicalFile",
              "startLine": 109,
              "startColumn": 17,
              "endLine": 109,
              "endColumn": 33,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "TestFile",
              "code": "    }\n\n    @Override\n    public File getCanonicalFile() throws IOException {\n        return new File(getAbsolutePath()).getCanonicalFile();\n    }\n"
            },
            {
              "step": 73,
              "variableName": "getAbsolutePath()",
              "startLine": 110,
              "startColumn": 25,
              "endLine": 110,
              "endColumn": 42,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "TestFile",
              "code": "\n    @Override\n    public File getCanonicalFile() throws IOException {\n        return new File(getAbsolutePath()).getCanonicalFile();\n    }\n\n    @Override"
            },
            {
              "step": 74,
              "variableName": "getAbsolutePath()",
              "startLine": 110,
              "startColumn": 25,
              "endLine": 110,
              "endColumn": 42,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "String",
              "code": "\n    @Override\n    public File getCanonicalFile() throws IOException {\n        return new File(getAbsolutePath()).getCanonicalFile();\n    }\n\n    @Override"
            },
            {
              "step": 75,
              "variableName": "new File(getAbsolutePath())",
              "startLine": 110,
              "startColumn": 16,
              "endLine": 110,
              "endColumn": 43,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "File",
              "code": "\n    @Override\n    public File getCanonicalFile() throws IOException {\n        return new File(getAbsolutePath()).getCanonicalFile();\n    }\n\n    @Override"
            },
            {
              "step": 76,
              "variableName": "new File(getAbsolutePath()).getCanonicalFile()",
              "startLine": 110,
              "startColumn": 16,
              "endLine": 110,
              "endColumn": 62,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "File",
              "code": "\n    @Override\n    public File getCanonicalFile() throws IOException {\n        return new File(getAbsolutePath()).getCanonicalFile();\n    }\n\n    @Override"
            },
            {
              "step": 77,
              "variableName": "current.getCanonicalFile()",
              "startLine": 132,
              "startColumn": 20,
              "endLine": 132,
              "endColumn": 46,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "File",
              "code": "            current = new File(current, p.toString());\n        }\n        try {\n            return current.getCanonicalFile();\n        } catch (IOException e) {\n            throw new RuntimeException(String.format(\"Could not canonicalise '%s'.\", current), e);\n        }"
            },
            {
              "step": 78,
              "variableName": "join(file, path)",
              "startLine": 78,
              "startColumn": 15,
              "endLine": 78,
              "endColumn": 31,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "File",
              "code": "    private final File relativeBase;\n\n    public TestFile(File file, Object... path) {\n        super(join(file, path).getAbsolutePath());\n        this.relativeBase = file;\n    }\n"
            },
            {
              "step": 79,
              "variableName": "join(file, path).getAbsolutePath()",
              "startLine": 78,
              "startColumn": 15,
              "endLine": 78,
              "endColumn": 49,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "String",
              "code": "    private final File relativeBase;\n\n    public TestFile(File file, Object... path) {\n        super(join(file, path).getAbsolutePath());\n        this.relativeBase = file;\n    }\n"
            },
            {
              "step": 80,
              "variableName": "super(join(file, path).getAbsolutePath());",
              "startLine": 78,
              "startColumn": 9,
              "endLine": 78,
              "endColumn": 51,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "TestFile",
              "code": "    private final File relativeBase;\n\n    public TestFile(File file, Object... path) {\n        super(join(file, path).getAbsolutePath());\n        this.relativeBase = file;\n    }\n"
            },
            {
              "step": 81,
              "variableName": "new TestFile(child)",
              "startLine": 210,
              "startColumn": 24,
              "endLine": 210,
              "endColumn": 43,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "TestFile",
              "code": "        TestFile[] files = new TestFile[children.length];\n        for (int i = 0; i < children.length; i++) {\n            File child = children[i];\n            files[i] = new TestFile(child);\n        }\n        return files;\n    }"
            },
            {
              "step": 82,
              "variableName": "files",
              "startLine": 210,
              "startColumn": 13,
              "endLine": 210,
              "endColumn": 18,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "TestFile[] [[]] : TestFile",
              "code": "        TestFile[] files = new TestFile[children.length];\n        for (int i = 0; i < children.length; i++) {\n            File child = children[i];\n            files[i] = new TestFile(child);\n        }\n        return files;\n    }"
            },
            {
              "step": 83,
              "variableName": "files",
              "startLine": 212,
              "startColumn": 16,
              "endLine": 212,
              "endColumn": 21,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "TestFile[] [[]] : TestFile",
              "code": "            File child = children[i];\n            files[i] = new TestFile(child);\n        }\n        return files;\n    }\n\n    public String getText() {"
            },
            {
              "step": 84,
              "variableName": "asFile.listFiles()",
              "startLine": 44,
              "startColumn": 30,
              "endLine": 44,
              "endColumn": 48,
              "uri": "gradle-8.14.0/build-logic/cleanup/src/main/kotlin/gradlebuild/cleanup/Cleanup.kt",
              "type": "TestFile[] [[]] : TestFile",
              "code": "@Suppress(\"LoopWithTooManyJumpStatements\")\nfun FileSystemOperations.removeOldVersionsFromDir(dir: Directory, shouldDelete: Spec<GradleVersion>, dirPrefix: String = \"\", dirSuffix: String = \"\") {\n    if (dir.asFile.isDirectory) {\n        for (cacheDir in dir.asFile.listFiles()) {\n            val cacheDirName = cacheDir.name\n            if (!cacheDirName.startsWith(dirPrefix) || !cacheDirName.endsWith(dirSuffix)) {\n                continue"
            },
            {
              "step": 85,
              "variableName": "listFiles()",
              "startLine": 44,
              "startColumn": 37,
              "endLine": 44,
              "endColumn": 48,
              "uri": "gradle-8.14.0/build-logic/cleanup/src/main/kotlin/gradlebuild/cleanup/Cleanup.kt",
              "type": "TestFile[] [[]] : TestFile",
              "code": "@Suppress(\"LoopWithTooManyJumpStatements\")\nfun FileSystemOperations.removeOldVersionsFromDir(dir: Directory, shouldDelete: Spec<GradleVersion>, dirPrefix: String = \"\", dirSuffix: String = \"\") {\n    if (dir.asFile.isDirectory) {\n        for (cacheDir in dir.asFile.listFiles()) {\n            val cacheDirName = cacheDir.name\n            if (!cacheDirName.startsWith(dirPrefix) || !cacheDirName.endsWith(dirSuffix)) {\n                continue"
            },
            {
              "step": 86,
              "variableName": "listFiles()",
              "startLine": 44,
              "startColumn": 37,
              "endLine": 44,
              "endColumn": 48,
              "uri": "gradle-8.14.0/build-logic/cleanup/src/main/kotlin/gradlebuild/cleanup/Cleanup.kt",
              "type": "TestFile[] [[]] : TestFile",
              "code": "@Suppress(\"LoopWithTooManyJumpStatements\")\nfun FileSystemOperations.removeOldVersionsFromDir(dir: Directory, shouldDelete: Spec<GradleVersion>, dirPrefix: String = \"\", dirSuffix: String = \"\") {\n    if (dir.asFile.isDirectory) {\n        for (cacheDir in dir.asFile.listFiles()) {\n            val cacheDirName = cacheDir.name\n            if (!cacheDirName.startsWith(dirPrefix) || !cacheDirName.endsWith(dirSuffix)) {\n                continue"
            },
            {
              "step": 87,
              "variableName": "cacheDir",
              "startLine": 45,
              "startColumn": 32,
              "endLine": 45,
              "endColumn": 40,
              "uri": "gradle-8.14.0/build-logic/cleanup/src/main/kotlin/gradlebuild/cleanup/Cleanup.kt",
              "type": "TestFile",
              "code": "fun FileSystemOperations.removeOldVersionsFromDir(dir: Directory, shouldDelete: Spec<GradleVersion>, dirPrefix: String = \"\", dirSuffix: String = \"\") {\n    if (dir.asFile.isDirectory) {\n        for (cacheDir in dir.asFile.listFiles()) {\n            val cacheDirName = cacheDir.name\n            if (!cacheDirName.startsWith(dirPrefix) || !cacheDirName.endsWith(dirSuffix)) {\n                continue\n            }"
            },
            {
              "step": 88,
              "variableName": "cacheDir",
              "startLine": 45,
              "startColumn": 32,
              "endLine": 45,
              "endColumn": 40,
              "uri": "gradle-8.14.0/build-logic/cleanup/src/main/kotlin/gradlebuild/cleanup/Cleanup.kt",
              "type": "TestFile",
              "code": "fun FileSystemOperations.removeOldVersionsFromDir(dir: Directory, shouldDelete: Spec<GradleVersion>, dirPrefix: String = \"\", dirSuffix: String = \"\") {\n    if (dir.asFile.isDirectory) {\n        for (cacheDir in dir.asFile.listFiles()) {\n            val cacheDirName = cacheDir.name\n            if (!cacheDirName.startsWith(dirPrefix) || !cacheDirName.endsWith(dirSuffix)) {\n                continue\n            }"
            },
            {
              "step": 89,
              "variableName": "cacheDir.name",
              "startLine": 45,
              "startColumn": 32,
              "endLine": 45,
              "endColumn": 45,
              "uri": "gradle-8.14.0/build-logic/cleanup/src/main/kotlin/gradlebuild/cleanup/Cleanup.kt",
              "type": "String",
              "code": "fun FileSystemOperations.removeOldVersionsFromDir(dir: Directory, shouldDelete: Spec<GradleVersion>, dirPrefix: String = \"\", dirSuffix: String = \"\") {\n    if (dir.asFile.isDirectory) {\n        for (cacheDir in dir.asFile.listFiles()) {\n            val cacheDirName = cacheDir.name\n            if (!cacheDirName.startsWith(dirPrefix) || !cacheDirName.endsWith(dirSuffix)) {\n                continue\n            }"
            },
            {
              "step": 90,
              "variableName": "cacheDirName",
              "startLine": 49,
              "startColumn": 30,
              "endLine": 49,
              "endColumn": 42,
              "uri": "gradle-8.14.0/build-logic/cleanup/src/main/kotlin/gradlebuild/cleanup/Cleanup.kt",
              "type": "String",
              "code": "            if (!cacheDirName.startsWith(dirPrefix) || !cacheDirName.endsWith(dirSuffix)) {\n                continue\n            }\n            val dirVersion = cacheDirName.removePrefix(dirPrefix).removeSuffix(dirSuffix)\n            if (!dirVersion.matches(dirVersionPattern)) {\n                continue\n            }"
            },
            {
              "step": 91,
              "variableName": "cacheDirName.removePrefix(dirPrefix)",
              "startLine": 49,
              "startColumn": 30,
              "endLine": 49,
              "endColumn": 66,
              "uri": "gradle-8.14.0/build-logic/cleanup/src/main/kotlin/gradlebuild/cleanup/Cleanup.kt",
              "type": "String",
              "code": "            if (!cacheDirName.startsWith(dirPrefix) || !cacheDirName.endsWith(dirSuffix)) {\n                continue\n            }\n            val dirVersion = cacheDirName.removePrefix(dirPrefix).removeSuffix(dirSuffix)\n            if (!dirVersion.matches(dirVersionPattern)) {\n                continue\n            }"
            },
            {
              "step": 92,
              "variableName": "cacheDirName.removePrefix(dirPrefix).removeSuffix(dirSuffix)",
              "startLine": 49,
              "startColumn": 30,
              "endLine": 49,
              "endColumn": 90,
              "uri": "gradle-8.14.0/build-logic/cleanup/src/main/kotlin/gradlebuild/cleanup/Cleanup.kt",
              "type": "String",
              "code": "            if (!cacheDirName.startsWith(dirPrefix) || !cacheDirName.endsWith(dirSuffix)) {\n                continue\n            }\n            val dirVersion = cacheDirName.removePrefix(dirPrefix).removeSuffix(dirSuffix)\n            if (!dirVersion.matches(dirVersionPattern)) {\n                continue\n            }"
            },
            {
              "step": 93,
              "variableName": "dirVersion",
              "startLine": 56,
              "startColumn": 43,
              "endLine": 56,
              "endColumn": 53,
              "uri": "gradle-8.14.0/build-logic/cleanup/src/main/kotlin/gradlebuild/cleanup/Cleanup.kt",
              "type": "String",
              "code": "\n            val cacheVersion =\n                try {\n                    GradleVersion.version(dirVersion)\n                } catch (_: IllegalArgumentException) {\n                    // Ignore\n                    continue"
            },
            {
              "step": 94,
              "variableName": "String version",
              "startLine": 72,
              "startColumn": 41,
              "endLine": 72,
              "endColumn": 55,
              "uri": "gradle-8.14.0/platforms/core-runtime/logging/src/main/java/org/gradle/util/GradleVersion.java",
              "type": "String",
              "code": "     *\n     * @throws IllegalArgumentException On unrecognized version string.\n     */\n    public static GradleVersion version(String version) throws IllegalArgumentException {\n        return DefaultGradleVersion.version(version);\n    }\n"
            },
            {
              "step": 95,
              "variableName": "version",
              "startLine": 73,
              "startColumn": 45,
              "endLine": 73,
              "endColumn": 52,
              "uri": "gradle-8.14.0/platforms/core-runtime/logging/src/main/java/org/gradle/util/GradleVersion.java",
              "type": "String",
              "code": "     * @throws IllegalArgumentException On unrecognized version string.\n     */\n    public static GradleVersion version(String version) throws IllegalArgumentException {\n        return DefaultGradleVersion.version(version);\n    }\n\n    /**"
            },
            {
              "step": 96,
              "variableName": "String version",
              "startLine": 105,
              "startColumn": 48,
              "endLine": 105,
              "endColumn": 62,
              "uri": "gradle-8.14.0/platforms/core-runtime/logging/src/main/java/org/gradle/util/internal/DefaultGradleVersion.java",
              "type": "String",
              "code": "     *\n     * @throws IllegalArgumentException On unrecognized version string.\n     */\n    public static DefaultGradleVersion version(String version) throws IllegalArgumentException {\n        return new DefaultGradleVersion(version, null, null);\n    }\n"
            },
            {
              "step": 97,
              "variableName": "version",
              "startLine": 106,
              "startColumn": 41,
              "endLine": 106,
              "endColumn": 48,
              "uri": "gradle-8.14.0/platforms/core-runtime/logging/src/main/java/org/gradle/util/internal/DefaultGradleVersion.java",
              "type": "String",
              "code": "     * @throws IllegalArgumentException On unrecognized version string.\n     */\n    public static DefaultGradleVersion version(String version) throws IllegalArgumentException {\n        return new DefaultGradleVersion(version, null, null);\n    }\n\n    private DefaultGradleVersion(String version, String buildTime, String commitId) {"
            },
            {
              "step": 98,
              "variableName": "String version",
              "startLine": 109,
              "startColumn": 34,
              "endLine": 109,
              "endColumn": 48,
              "uri": "gradle-8.14.0/platforms/core-runtime/logging/src/main/java/org/gradle/util/internal/DefaultGradleVersion.java",
              "type": "String",
              "code": "        return new DefaultGradleVersion(version, null, null);\n    }\n\n    private DefaultGradleVersion(String version, String buildTime, String commitId) {\n        this.version = version;\n        this.buildTime = buildTime;\n        Matcher matcher = VERSION_PATTERN.matcher(version);"
            },
            {
              "step": 99,
              "variableName": "version",
              "startLine": 112,
              "startColumn": 51,
              "endLine": 112,
              "endColumn": 58,
              "uri": "gradle-8.14.0/platforms/core-runtime/logging/src/main/java/org/gradle/util/internal/DefaultGradleVersion.java",
              "type": "String",
              "code": "    private DefaultGradleVersion(String version, String buildTime, String commitId) {\n        this.version = version;\n        this.buildTime = buildTime;\n        Matcher matcher = VERSION_PATTERN.matcher(version);\n        if (!matcher.matches()) {\n            throw new IllegalArgumentException(format(\"'%s' is not a valid Gradle version string (examples: '1.0', '1.0-rc-1')\", version));\n        }"
            },
            {
              "step": 100,
              "variableName": "VERSION_PATTERN.matcher(version)",
              "startLine": 112,
              "startColumn": 27,
              "endLine": 112,
              "endColumn": 59,
              "uri": "gradle-8.14.0/platforms/core-runtime/logging/src/main/java/org/gradle/util/internal/DefaultGradleVersion.java",
              "type": "Matcher",
              "code": "    private DefaultGradleVersion(String version, String buildTime, String commitId) {\n        this.version = version;\n        this.buildTime = buildTime;\n        Matcher matcher = VERSION_PATTERN.matcher(version);\n        if (!matcher.matches()) {\n            throw new IllegalArgumentException(format(\"'%s' is not a valid Gradle version string (examples: '1.0', '1.0-rc-1')\", version));\n        }"
            },
            {
              "step": 101,
              "variableName": "matcher",
              "startLine": 120,
              "startColumn": 54,
              "endLine": 120,
              "endColumn": 61,
              "uri": "gradle-8.14.0/platforms/core-runtime/logging/src/main/java/org/gradle/util/internal/DefaultGradleVersion.java",
              "type": "Matcher",
              "code": "        versionPart = matcher.group(1);\n        majorPart = Integer.parseInt(matcher.group(2), 10);\n\n        this.commitId = setOrParseCommitId(commitId, matcher);\n        this.stage = parseStage(matcher);\n        this.snapshot = parseSnapshot(matcher);\n    }"
            },
            {
              "step": 102,
              "variableName": "String commitId",
              "startLine": 169,
              "startColumn": 39,
              "endLine": 169,
              "endColumn": 54,
              "uri": "gradle-8.14.0/platforms/core-runtime/logging/src/main/java/org/gradle/util/internal/DefaultGradleVersion.java",
              "type": "String",
              "code": "        return stage.equals(matcher.group(5));\n    }\n\n    private String setOrParseCommitId(String commitId, Matcher matcher) {\n        if (commitId != null || !isCommitVersion(matcher)) {\n            return commitId;\n        } else {"
            },
            {
              "step": 103,
              "variableName": "commitId",
              "startLine": 171,
              "startColumn": 20,
              "endLine": 171,
              "endColumn": 28,
              "uri": "gradle-8.14.0/platforms/core-runtime/logging/src/main/java/org/gradle/util/internal/DefaultGradleVersion.java",
              "type": "String",
              "code": "\n    private String setOrParseCommitId(String commitId, Matcher matcher) {\n        if (commitId != null || !isCommitVersion(matcher)) {\n            return commitId;\n        } else {\n            return matcher.group(6);\n        }"
            },
            {
              "step": 104,
              "variableName": "setOrParseCommitId(commitId, matcher)",
              "startLine": 120,
              "startColumn": 25,
              "endLine": 120,
              "endColumn": 62,
              "uri": "gradle-8.14.0/platforms/core-runtime/logging/src/main/java/org/gradle/util/internal/DefaultGradleVersion.java",
              "type": "String",
              "code": "        versionPart = matcher.group(1);\n        majorPart = Integer.parseInt(matcher.group(2), 10);\n\n        this.commitId = setOrParseCommitId(commitId, matcher);\n        this.stage = parseStage(matcher);\n        this.snapshot = parseSnapshot(matcher);\n    }"
            },
            {
              "step": 105,
              "variableName": "this",
              "startLine": 120,
              "startColumn": 9,
              "endLine": 120,
              "endColumn": 13,
              "uri": "gradle-8.14.0/platforms/core-runtime/logging/src/main/java/org/gradle/util/internal/DefaultGradleVersion.java",
              "type": "DefaultGradleVersion [commitId] : String",
              "code": "        versionPart = matcher.group(1);\n        majorPart = Integer.parseInt(matcher.group(2), 10);\n\n        this.commitId = setOrParseCommitId(commitId, matcher);\n        this.stage = parseStage(matcher);\n        this.snapshot = parseSnapshot(matcher);\n    }"
            },
            {
              "step": 106,
              "variableName": "new DefaultGradleVersion(version, \"unknown\".equals(buildTimestamp) ? null : buildTimestamp, commitId)",
              "startLine": 86,
              "startColumn": 23,
              "endLine": 86,
              "endColumn": 124,
              "uri": "gradle-8.14.0/platforms/core-runtime/logging/src/main/java/org/gradle/util/internal/DefaultGradleVersion.java",
              "type": "DefaultGradleVersion [commitId] : String",
              "code": "            String buildTimestamp = properties.get(\"buildTimestampIso\").toString();\n            String commitId = properties.get(\"commitId\").toString();\n\n            CURRENT = new DefaultGradleVersion(version, \"unknown\".equals(buildTimestamp) ? null : buildTimestamp, commitId);\n        } catch (Exception e) {\n            throw new GradleException(format(\"Could not load version details from resource '%s'.\", resource), e);\n        } finally {"
            },
            {
              "step": 107,
              "variableName": "CURRENT",
              "startLine": 52,
              "startColumn": 47,
              "endLine": 52,
              "endColumn": 54,
              "uri": "gradle-8.14.0/platforms/core-runtime/logging/src/main/java/org/gradle/util/internal/DefaultGradleVersion.java",
              "type": "DefaultGradleVersion [commitId] : String",
              "code": "    private final Long snapshot;\n    private final String versionPart;\n    private final Stage stage;\n    private static final DefaultGradleVersion CURRENT;\n\n    public static final String RESOURCE_NAME = \"/org/gradle/build-receipt.properties\";\n    public static final String VERSION_OVERRIDE_VAR = \"GRADLE_VERSION_OVERRIDE\";"
            },
            {
              "step": 108,
              "variableName": "CURRENT",
              "startLine": 97,
              "startColumn": 16,
              "endLine": 97,
              "endColumn": 23,
              "uri": "gradle-8.14.0/platforms/core-runtime/logging/src/main/java/org/gradle/util/internal/DefaultGradleVersion.java",
              "type": "DefaultGradleVersion [commitId] : String",
              "code": "    }\n\n    public static DefaultGradleVersion current() {\n        return CURRENT;\n    }\n\n    /**"
            },
            {
              "step": 109,
              "variableName": "DefaultGradleVersion.current()",
              "startLine": 249,
              "startColumn": 51,
              "endLine": 249,
              "endColumn": 81,
              "uri": "gradle-8.14.0/platforms/core-runtime/gradle-cli/src/main/java/org/gradle/launcher/cli/DefaultCommandLineActionFactory.java",
              "type": "DefaultGradleVersion [commitId] : String",
              "code": "\n        @Override\n        public void execute(ExecutionListener executionListener) {\n            DefaultGradleVersion currentVersion = DefaultGradleVersion.current();\n\n            System.out.println();\n            System.out.println(\"------------------------------------------------------------\");"
            },
            {
              "step": 110,
              "variableName": "currentVersion",
              "startLine": 258,
              "startColumn": 47,
              "endLine": 258,
              "endColumn": 61,
              "uri": "gradle-8.14.0/platforms/core-runtime/gradle-cli/src/main/java/org/gradle/launcher/cli/DefaultCommandLineActionFactory.java",
              "type": "DefaultGradleVersion [commitId] : String",
              "code": "            System.out.println();\n            printAligned(ImmutableList.of(\n                new Line.KeyValue(\"Build time\", currentVersion.getBuildTimestamp()),\n                new Line.KeyValue(\"Revision\", currentVersion.getGitRevision()),\n                new Line.Blank(),\n                new Line.KeyValue(\"Kotlin\", KotlinDslVersion.current().getKotlinVersion()),\n                new Line.KeyValue(\"Groovy\", ReleaseInfo.getVersion()),"
            },
            {
              "step": 111,
              "variableName": "getGitRevision",
              "startLine": 205,
              "startColumn": 19,
              "endLine": 205,
              "endColumn": 33,
              "uri": "gradle-8.14.0/platforms/core-runtime/logging/src/main/java/org/gradle/util/internal/DefaultGradleVersion.java",
              "type": "DefaultGradleVersion [commitId] : String",
              "code": "        return getGitRevision();\n    }\n\n    public String getGitRevision() {\n        return commitId;\n    }\n"
            },
            {
              "step": 112,
              "variableName": "commitId",
              "startLine": 206,
              "startColumn": 16,
              "endLine": 206,
              "endColumn": 24,
              "uri": "gradle-8.14.0/platforms/core-runtime/logging/src/main/java/org/gradle/util/internal/DefaultGradleVersion.java",
              "type": "DefaultGradleVersion [commitId] : String",
              "code": "    }\n\n    public String getGitRevision() {\n        return commitId;\n    }\n\n    @Override"
            },
            {
              "step": 113,
              "variableName": "commitId",
              "startLine": 206,
              "startColumn": 16,
              "endLine": 206,
              "endColumn": 24,
              "uri": "gradle-8.14.0/platforms/core-runtime/logging/src/main/java/org/gradle/util/internal/DefaultGradleVersion.java",
              "type": "String",
              "code": "    }\n\n    public String getGitRevision() {\n        return commitId;\n    }\n\n    @Override"
            },
            {
              "step": 114,
              "variableName": "currentVersion.getGitRevision()",
              "startLine": 258,
              "startColumn": 47,
              "endLine": 258,
              "endColumn": 78,
              "uri": "gradle-8.14.0/platforms/core-runtime/gradle-cli/src/main/java/org/gradle/launcher/cli/DefaultCommandLineActionFactory.java",
              "type": "String",
              "code": "            System.out.println();\n            printAligned(ImmutableList.of(\n                new Line.KeyValue(\"Build time\", currentVersion.getBuildTimestamp()),\n                new Line.KeyValue(\"Revision\", currentVersion.getGitRevision()),\n                new Line.Blank(),\n                new Line.KeyValue(\"Kotlin\", KotlinDslVersion.current().getKotlinVersion()),\n                new Line.KeyValue(\"Groovy\", ReleaseInfo.getVersion()),"
            },
            {
              "step": 115,
              "variableName": "String value",
              "startLine": 275,
              "startColumn": 45,
              "endLine": 275,
              "endColumn": 57,
              "uri": "gradle-8.14.0/platforms/core-runtime/gradle-cli/src/main/java/org/gradle/launcher/cli/DefaultCommandLineActionFactory.java",
              "type": "String",
              "code": "                private final String key;\n                private final String value;\n\n                public KeyValue(String key, String value) {\n                    this.key = key;\n                    this.value = value;\n                }"
            },
            {
              "step": 116,
              "variableName": "value",
              "startLine": 277,
              "startColumn": 34,
              "endLine": 277,
              "endColumn": 39,
              "uri": "gradle-8.14.0/platforms/core-runtime/gradle-cli/src/main/java/org/gradle/launcher/cli/DefaultCommandLineActionFactory.java",
              "type": "String",
              "code": "\n                public KeyValue(String key, String value) {\n                    this.key = key;\n                    this.value = value;\n                }\n            }\n"
            },
            {
              "step": 117,
              "variableName": "this",
              "startLine": 277,
              "startColumn": 21,
              "endLine": 277,
              "endColumn": 25,
              "uri": "gradle-8.14.0/platforms/core-runtime/gradle-cli/src/main/java/org/gradle/launcher/cli/DefaultCommandLineActionFactory.java",
              "type": "KeyValue [value] : String",
              "code": "\n                public KeyValue(String key, String value) {\n                    this.key = key;\n                    this.value = value;\n                }\n            }\n"
            },
            {
              "step": 118,
              "variableName": "new Line.KeyValue(\"Revision\", currentVersion.getGitRevision())",
              "startLine": 258,
              "startColumn": 17,
              "endLine": 258,
              "endColumn": 79,
              "uri": "gradle-8.14.0/platforms/core-runtime/gradle-cli/src/main/java/org/gradle/launcher/cli/DefaultCommandLineActionFactory.java",
              "type": "KeyValue [value] : String",
              "code": "            System.out.println();\n            printAligned(ImmutableList.of(\n                new Line.KeyValue(\"Build time\", currentVersion.getBuildTimestamp()),\n                new Line.KeyValue(\"Revision\", currentVersion.getGitRevision()),\n                new Line.Blank(),\n                new Line.KeyValue(\"Kotlin\", KotlinDslVersion.current().getKotlinVersion()),\n                new Line.KeyValue(\"Groovy\", ReleaseInfo.getVersion()),"
            },
            {
              "step": 119,
              "variableName": "of(...) : ImmutableList [<element>, value] : String",
              "startLine": 256,
              "startColumn": 26,
              "endLine": 267,
              "endColumn": 14,
              "uri": "gradle-8.14.0/platforms/core-runtime/gradle-cli/src/main/java/org/gradle/launcher/cli/DefaultCommandLineActionFactory.java",
              "type": "ImmutableList [<element>, value] : String",
              "code": "            System.out.println(\"Gradle \" + currentVersion.getVersion());\n            System.out.println(\"------------------------------------------------------------\");\n            System.out.println();\n            printAligned(ImmutableList.of(\n                new Line.KeyValue(\"Build time\", currentVersion.getBuildTimestamp()),\n                new Line.KeyValue(\"Revision\", currentVersion.getGitRevision()),\n                new Line.Blank(),"
            },
            {
              "step": 120,
              "variableName": "List<Line> lines",
              "startLine": 304,
              "startColumn": 42,
              "endLine": 304,
              "endColumn": 58,
              "uri": "gradle-8.14.0/platforms/core-runtime/gradle-cli/src/main/java/org/gradle/launcher/cli/DefaultCommandLineActionFactory.java",
              "type": "ImmutableList [<element>, value] : String",
              "code": "         *\n         * @param lines the lines to print\n         */\n        private static void printAligned(List<Line> lines) {\n            int maxKeyLength = lines.stream()\n                .filter(line -> line instanceof Line.KeyValue)\n                .map(line -> ((Line.KeyValue) line).key.length())"
            },
            {
              "step": 121,
              "variableName": "lines",
              "startLine": 310,
              "startColumn": 30,
              "endLine": 310,
              "endColumn": 35,
              "uri": "gradle-8.14.0/platforms/core-runtime/gradle-cli/src/main/java/org/gradle/launcher/cli/DefaultCommandLineActionFactory.java",
              "type": "ImmutableList [<element>, value] : String",
              "code": "                .map(line -> ((Line.KeyValue) line).key.length())\n                .max(Integer::compare)\n                .orElse(0);\n            for (Line line : lines) {\n                if (line instanceof Line.KeyValue) {\n                    Line.KeyValue keyValue = (Line.KeyValue) line;\n                    System.out.print(keyValue.key + \": \");"
            },
            {
              "step": 122,
              "variableName": "line",
              "startLine": 311,
              "startColumn": 21,
              "endLine": 311,
              "endColumn": 25,
              "uri": "gradle-8.14.0/platforms/core-runtime/gradle-cli/src/main/java/org/gradle/launcher/cli/DefaultCommandLineActionFactory.java",
              "type": "KeyValue [value] : String",
              "code": "                .max(Integer::compare)\n                .orElse(0);\n            for (Line line : lines) {\n                if (line instanceof Line.KeyValue) {\n                    Line.KeyValue keyValue = (Line.KeyValue) line;\n                    System.out.print(keyValue.key + \": \");\n                    // Add one to account for colon"
            },
            {
              "step": 123,
              "variableName": "(Line.KeyValue) line",
              "startLine": 312,
              "startColumn": 46,
              "endLine": 312,
              "endColumn": 66,
              "uri": "gradle-8.14.0/platforms/core-runtime/gradle-cli/src/main/java/org/gradle/launcher/cli/DefaultCommandLineActionFactory.java",
              "type": "KeyValue [value] : String",
              "code": "                .orElse(0);\n            for (Line line : lines) {\n                if (line instanceof Line.KeyValue) {\n                    Line.KeyValue keyValue = (Line.KeyValue) line;\n                    System.out.print(keyValue.key + \": \");\n                    // Add one to account for colon\n                    for (int i = keyValue.key.length(); i < maxKeyLength + 1; i++) {"
            },
            {
              "step": 124,
              "variableName": "keyValue",
              "startLine": 318,
              "startColumn": 40,
              "endLine": 318,
              "endColumn": 48,
              "uri": "gradle-8.14.0/platforms/core-runtime/gradle-cli/src/main/java/org/gradle/launcher/cli/DefaultCommandLineActionFactory.java",
              "type": "KeyValue [value] : String",
              "code": "                    for (int i = keyValue.key.length(); i < maxKeyLength + 1; i++) {\n                        System.out.print(' ');\n                    }\n                    System.out.println(keyValue.value);\n                } else {\n                    System.out.println();\n                }"
            },
            {
              "step": 125,
              "variableName": "keyValue.value",
              "startLine": 318,
              "startColumn": 40,
              "endLine": 318,
              "endColumn": 54,
              "uri": "gradle-8.14.0/platforms/core-runtime/gradle-cli/src/main/java/org/gradle/launcher/cli/DefaultCommandLineActionFactory.java",
              "type": "",
              "code": "                    for (int i = keyValue.key.length(); i < maxKeyLength + 1; i++) {\n                        System.out.print(' ');\n                    }\n                    System.out.println(keyValue.value);\n                } else {\n                    System.out.println();\n                }"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "source",
              "startLine": 42,
              "startColumn": 27,
              "endLine": 42,
              "endColumn": 33,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/RegExpNameMapper.java",
              "type": "String",
              "code": "        if (matcher == null) {\n            matcher = pattern.matcher(source);\n        } else {\n            matcher.reset(source);\n        }\n        String result = source;\n        if (matcher.find()) {"
            },
            {
              "step": 1,
              "variableName": "result",
              "startLine": 48,
              "startColumn": 16,
              "endLine": 48,
              "endColumn": 22,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/RegExpNameMapper.java",
              "type": "String",
              "code": "        if (matcher.find()) {\n            result = matcher.replaceFirst(replacement);\n        }\n        return result;\n    }\n}\n"
            },
            {
              "step": 2,
              "variableName": "transformer.transform(value)",
              "startLine": 37,
              "startColumn": 31,
              "endLine": 37,
              "endColumn": 59,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/ChainingTransformer.java",
              "type": "String",
              "code": "    public T transform(T original) {\n        T value = original;\n        for (Transformer<T, T> transformer : transformers) {\n            value = type.cast(transformer.transform(value));\n        }\n        return value;\n    }"
            },
            {
              "step": 3,
              "variableName": "type.cast(transformer.transform(value))",
              "startLine": 37,
              "startColumn": 21,
              "endLine": 37,
              "endColumn": 60,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/ChainingTransformer.java",
              "type": "String",
              "code": "    public T transform(T original) {\n        T value = original;\n        for (Transformer<T, T> transformer : transformers) {\n            value = type.cast(transformer.transform(value));\n        }\n        return value;\n    }"
            },
            {
              "step": 4,
              "variableName": "value",
              "startLine": 39,
              "startColumn": 16,
              "endLine": 39,
              "endColumn": 21,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/ChainingTransformer.java",
              "type": "String",
              "code": "        for (Transformer<T, T> transformer : transformers) {\n            value = type.cast(transformer.transform(value));\n        }\n        return value;\n    }\n\n    public void add(Transformer<T, T> transformer) {"
            },
            {
              "step": 5,
              "variableName": "describer.transform(this)",
              "startLine": 163,
              "startColumn": 16,
              "endLine": 163,
              "endColumn": 41,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/repositories/DefaultMavenArtifactRepository.java",
              "type": "String",
              "code": "\n    @Override\n    public String getDisplayName() {\n        return describer.transform(this);\n    }\n\n    @Override"
            },
            {
              "step": 6,
              "variableName": "describable.getDisplayName()",
              "startLine": 313,
              "startColumn": 35,
              "endLine": 313,
              "endColumn": 63,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "String",
              "code": "        public String getDisplayName() {\n            synchronized (this) {\n                if (displayName == null) {\n                    displayName = describable.getDisplayName();\n                    if (capDisplayName != null || !(describable instanceof DisplayName)) {\n                        describable = null;\n                    }"
            },
            {
              "step": 7,
              "variableName": "displayName",
              "startLine": 318,
              "startColumn": 24,
              "endLine": 318,
              "endColumn": 35,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "String",
              "code": "                        describable = null;\n                    }\n                }\n                return displayName;\n            }\n        }\n    }"
            },
            {
              "step": 8,
              "variableName": "displayName.getDisplayName()",
              "startLine": 772,
              "startColumn": 73,
              "endLine": 772,
              "endColumn": 101,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/configurations/DefaultConfiguration.java",
              "type": "String",
              "code": "                try {\n                    results = resolver.resolveGraph(DefaultConfiguration.this);\n                } catch (Exception e) {\n                    throw exceptionMapper.mapFailure(e, \"dependencies\", displayName.getDisplayName());\n                }\n\n                // Make the new state visible in case a dependency resolution listener queries the result, which requires the new state"
            },
            {
              "step": 9,
              "variableName": "String contextDisplayName",
              "startLine": 68,
              "startColumn": 77,
              "endLine": 68,
              "endColumn": 102,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "String",
              "code": "        return mapFailure(failure, type, displayName);\n    }\n\n    public TypedResolveException mapFailure(Throwable failure, String type, String contextDisplayName) {\n        if (!(failure instanceof TypedResolveException)) {\n            return new TypedResolveException(\n                type,"
            },
            {
              "step": 10,
              "variableName": "contextDisplayName",
              "startLine": 72,
              "startColumn": 17,
              "endLine": 72,
              "endColumn": 35,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "String",
              "code": "        if (!(failure instanceof TypedResolveException)) {\n            return new TypedResolveException(\n                type,\n                contextDisplayName,\n                ImmutableList.of(mapRepositoryOverrideFailure(contextDisplayName, failure))\n            );\n        }"
            },
            {
              "step": 11,
              "variableName": "new TypedResolveException(...) : TypedResolveException",
              "startLine": 70,
              "startColumn": 20,
              "endLine": 74,
              "endColumn": 14,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "TypedResolveException",
              "code": "\n    public TypedResolveException mapFailure(Throwable failure, String type, String contextDisplayName) {\n        if (!(failure instanceof TypedResolveException)) {\n            return new TypedResolveException(\n                type,\n                contextDisplayName,\n                ImmutableList.of(mapRepositoryOverrideFailure(contextDisplayName, failure))"
            },
            {
              "step": 12,
              "variableName": "exceptionMapper.mapFailure(e, \"dependencies\", displayName.getDisplayName())",
              "startLine": 772,
              "startColumn": 27,
              "endLine": 772,
              "endColumn": 102,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/configurations/DefaultConfiguration.java",
              "type": "TypedResolveException",
              "code": "                try {\n                    results = resolver.resolveGraph(DefaultConfiguration.this);\n                } catch (Exception e) {\n                    throw exceptionMapper.mapFailure(e, \"dependencies\", displayName.getDisplayName());\n                }\n\n                // Make the new state visible in case a dependency resolution listener queries the result, which requires the new state"
            },
            {
              "step": 13,
              "variableName": "e",
              "startLine": 772,
              "startColumn": 54,
              "endLine": 772,
              "endColumn": 55,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/configurations/DefaultConfiguration.java",
              "type": "Exception",
              "code": "                try {\n                    results = resolver.resolveGraph(DefaultConfiguration.this);\n                } catch (Exception e) {\n                    throw exceptionMapper.mapFailure(e, \"dependencies\", displayName.getDisplayName());\n                }\n\n                // Make the new state visible in case a dependency resolution listener queries the result, which requires the new state"
            },
            {
              "step": 14,
              "variableName": "Throwable failure",
              "startLine": 68,
              "startColumn": 45,
              "endLine": 68,
              "endColumn": 62,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Throwable",
              "code": "        return mapFailure(failure, type, displayName);\n    }\n\n    public TypedResolveException mapFailure(Throwable failure, String type, String contextDisplayName) {\n        if (!(failure instanceof TypedResolveException)) {\n            return new TypedResolveException(\n                type,"
            },
            {
              "step": 15,
              "variableName": "failure",
              "startLine": 73,
              "startColumn": 83,
              "endLine": 73,
              "endColumn": 90,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Throwable",
              "code": "            return new TypedResolveException(\n                type,\n                contextDisplayName,\n                ImmutableList.of(mapRepositoryOverrideFailure(contextDisplayName, failure))\n            );\n        }\n"
            },
            {
              "step": 16,
              "variableName": "Throwable failure",
              "startLine": 94,
              "startColumn": 78,
              "endLine": 94,
              "endColumn": 95,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Throwable",
              "code": "\n    // TODO: We should handle this exception at the source instead of using instanceof to detect it after it is thrown.\n    //       We should try to avoid catching and analyzing runtime exceptions\n    public Throwable mapRepositoryOverrideFailure(String contextDisplayName, Throwable failure) {\n        if (!(failure instanceof ModuleVersionNotFoundException) || !settingsRepositoriesIgnored()) {\n            return failure;\n        }"
            },
            {
              "step": 17,
              "variableName": "failure",
              "startLine": 108,
              "startColumn": 35,
              "endLine": 108,
              "endColumn": 42,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Throwable",
              "code": "        return new TypedResolveException(\n            \"dependencies\",\n            contextDisplayName,\n            Collections.singleton(failure),\n            resolutions\n        );\n    }"
            },
            {
              "step": 18,
              "variableName": "Collections.singleton(failure)",
              "startLine": 108,
              "startColumn": 13,
              "endLine": 108,
              "endColumn": 43,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Set [<element>] : Throwable",
              "code": "        return new TypedResolveException(\n            \"dependencies\",\n            contextDisplayName,\n            Collections.singleton(failure),\n            resolutions\n        );\n    }"
            },
            {
              "step": 19,
              "variableName": "Collections.singleton(failure)",
              "startLine": 108,
              "startColumn": 13,
              "endLine": 108,
              "endColumn": 43,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Set",
              "code": "        return new TypedResolveException(\n            \"dependencies\",\n            contextDisplayName,\n            Collections.singleton(failure),\n            resolutions\n        );\n    }"
            },
            {
              "step": 20,
              "variableName": "Iterable<? extends Throwable> failures",
              "startLine": 42,
              "startColumn": 67,
              "endLine": 42,
              "endColumn": 105,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ivyservice/TypedResolveException.java",
              "type": "Set",
              "code": "    /**\n     * Creates a new instance with resolutions.\n     */\n    public TypedResolveException(String type, String displayName, Iterable<? extends Throwable> failures, List<String> resolutions) {\n        super(buildMessage(type, displayName), failures, false);\n        this.type = type;\n        this.resolutions = ImmutableList.copyOf(resolutions);"
            },
            {
              "step": 21,
              "variableName": "failures",
              "startLine": 43,
              "startColumn": 48,
              "endLine": 43,
              "endColumn": 56,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ivyservice/TypedResolveException.java",
              "type": "Set",
              "code": "     * Creates a new instance with resolutions.\n     */\n    public TypedResolveException(String type, String displayName, Iterable<? extends Throwable> failures, List<String> resolutions) {\n        super(buildMessage(type, displayName), failures, false);\n        this.type = type;\n        this.resolutions = ImmutableList.copyOf(resolutions);\n    }"
            },
            {
              "step": 22,
              "variableName": "Iterable<? extends Throwable> causes",
              "startLine": 77,
              "startColumn": 48,
              "endLine": 77,
              "endColumn": 84,
              "uri": "gradle-8.14.0/subprojects/core-api/src/main/java/org/gradle/api/artifacts/ResolveException.java",
              "type": "Set",
              "code": "     * @since 8.9\n     */\n    @Incubating\n    protected ResolveException(String message, Iterable<? extends Throwable> causes, @SuppressWarnings(\"unused\") boolean dummy) {\n        super(message, causes);\n    }\n}"
            },
            {
              "step": 23,
              "variableName": "causes",
              "startLine": 78,
              "startColumn": 24,
              "endLine": 78,
              "endColumn": 30,
              "uri": "gradle-8.14.0/subprojects/core-api/src/main/java/org/gradle/api/artifacts/ResolveException.java",
              "type": "Set",
              "code": "     */\n    @Incubating\n    protected ResolveException(String message, Iterable<? extends Throwable> causes, @SuppressWarnings(\"unused\") boolean dummy) {\n        super(message, causes);\n    }\n}\n"
            },
            {
              "step": 24,
              "variableName": "Iterable<? extends Throwable> causes",
              "startLine": 47,
              "startColumn": 55,
              "endLine": 47,
              "endColumn": 91,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "Set",
              "code": "        this.causes.addAll(Arrays.asList(causes));\n    }\n\n    public DefaultMultiCauseException(String message, Iterable<? extends Throwable> causes) {\n        super(message);\n        this.message = message;\n        initCauses(causes);"
            },
            {
              "step": 25,
              "variableName": "causes",
              "startLine": 50,
              "startColumn": 20,
              "endLine": 50,
              "endColumn": 26,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "Set",
              "code": "    public DefaultMultiCauseException(String message, Iterable<? extends Throwable> causes) {\n        super(message);\n        this.message = message;\n        initCauses(causes);\n    }\n\n    public DefaultMultiCauseException(Factory<String> messageFactory) {"
            },
            {
              "step": 26,
              "variableName": "Iterable<? extends Throwable> causes",
              "startLine": 112,
              "startColumn": 28,
              "endLine": 112,
              "endColumn": 64,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "Iterable",
              "code": "        return null;\n    }\n\n    public void initCauses(Iterable<? extends Throwable> causes) {\n        this.causes.clear();\n        for (Throwable cause : causes) {\n            this.causes.add(cause);"
            },
            {
              "step": 27,
              "variableName": "cause",
              "startLine": 115,
              "startColumn": 29,
              "endLine": 115,
              "endColumn": 34,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "Throwable",
              "code": "    public void initCauses(Iterable<? extends Throwable> causes) {\n        this.causes.clear();\n        for (Throwable cause : causes) {\n            this.causes.add(cause);\n        }\n    }\n"
            },
            {
              "step": 28,
              "variableName": "this.causes",
              "startLine": 115,
              "startColumn": 13,
              "endLine": 115,
              "endColumn": 24,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "CopyOnWriteArrayList [<element>] : Throwable",
              "code": "    public void initCauses(Iterable<? extends Throwable> causes) {\n        this.causes.clear();\n        for (Throwable cause : causes) {\n            this.causes.add(cause);\n        }\n    }\n"
            },
            {
              "step": 29,
              "variableName": "this",
              "startLine": 115,
              "startColumn": 13,
              "endLine": 115,
              "endColumn": 17,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "DefaultMultiCauseException [causes, <element>] : Throwable",
              "code": "    public void initCauses(Iterable<? extends Throwable> causes) {\n        this.causes.clear();\n        for (Throwable cause : causes) {\n            this.causes.add(cause);\n        }\n    }\n"
            },
            {
              "step": 30,
              "variableName": "projectConfigurationException",
              "startLine": 57,
              "startColumn": 17,
              "endLine": 57,
              "endColumn": 46,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/DefaultExceptionAnalyser.java",
              "type": "ProjectConfigurationException [causes, <element>] : Throwable",
              "code": "                }\n            }\n            if (!additionalFailures.isEmpty()) {\n                projectConfigurationException.initCauses(additionalFailures);\n                failures.add(transform(projectConfigurationException));\n            }\n        } else if (exception instanceof ServiceCreationException) {"
            },
            {
              "step": 31,
              "variableName": "projectConfigurationException",
              "startLine": 58,
              "startColumn": 40,
              "endLine": 58,
              "endColumn": 69,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/DefaultExceptionAnalyser.java",
              "type": "ProjectConfigurationException [causes, <element>] : Throwable",
              "code": "            }\n            if (!additionalFailures.isEmpty()) {\n                projectConfigurationException.initCauses(additionalFailures);\n                failures.add(transform(projectConfigurationException));\n            }\n        } else if (exception instanceof ServiceCreationException) {\n            failures.add(transform(new InitializationException(exception)));"
            },
            {
              "step": 32,
              "variableName": "transform(projectConfigurationException)",
              "startLine": 58,
              "startColumn": 30,
              "endLine": 58,
              "endColumn": 70,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/DefaultExceptionAnalyser.java",
              "type": "LocationAwareException",
              "code": "            }\n            if (!additionalFailures.isEmpty()) {\n                projectConfigurationException.initCauses(additionalFailures);\n                failures.add(transform(projectConfigurationException));\n            }\n        } else if (exception instanceof ServiceCreationException) {\n            failures.add(transform(new InitializationException(exception)));"
            },
            {
              "step": 33,
              "variableName": "failures",
              "startLine": 58,
              "startColumn": 17,
              "endLine": 58,
              "endColumn": 25,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/DefaultExceptionAnalyser.java",
              "type": "Collection [<element>] : LocationAwareException",
              "code": "            }\n            if (!additionalFailures.isEmpty()) {\n                projectConfigurationException.initCauses(additionalFailures);\n                failures.add(transform(projectConfigurationException));\n            }\n        } else if (exception instanceof ServiceCreationException) {\n            failures.add(transform(new InitializationException(exception)));"
            },
            {
              "step": 34,
              "variableName": "result",
              "startLine": 53,
              "startColumn": 54,
              "endLine": 53,
              "endColumn": 60,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/MultipleBuildFailuresExceptionAnalyser.java",
              "type": "ArrayList [<element>] : LocationAwareException",
              "code": "        for (Throwable failure : failures) {\n            if (failure instanceof MultipleBuildFailures) {\n                for (Throwable cause : ((MultipleBuildFailures) failure).getCauses()) {\n                    collector.collectFailures(cause, result);\n                }\n            } else {\n                collector.collectFailures(failure, result);"
            },
            {
              "step": 35,
              "variableName": "result",
              "startLine": 60,
              "startColumn": 39,
              "endLine": 60,
              "endColumn": 45,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/MultipleBuildFailuresExceptionAnalyser.java",
              "type": "ArrayList [<element>] : LocationAwareException",
              "code": "            }\n        }\n        if (result.size() == 1 && result.get(0) instanceof RuntimeException) {\n            return (RuntimeException) result.get(0);\n        } else {\n            return new MultipleBuildFailures(result);\n        }"
            },
            {
              "step": 36,
              "variableName": "result.get(0)",
              "startLine": 60,
              "startColumn": 39,
              "endLine": 60,
              "endColumn": 52,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/MultipleBuildFailuresExceptionAnalyser.java",
              "type": "LocationAwareException",
              "code": "            }\n        }\n        if (result.size() == 1 && result.get(0) instanceof RuntimeException) {\n            return (RuntimeException) result.get(0);\n        } else {\n            return new MultipleBuildFailures(result);\n        }"
            },
            {
              "step": 37,
              "variableName": "(RuntimeException) result.get(0)",
              "startLine": 60,
              "startColumn": 20,
              "endLine": 60,
              "endColumn": 52,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/MultipleBuildFailuresExceptionAnalyser.java",
              "type": "LocationAwareException",
              "code": "            }\n        }\n        if (result.size() == 1 && result.get(0) instanceof RuntimeException) {\n            return (RuntimeException) result.get(0);\n        } else {\n            return new MultipleBuildFailures(result);\n        }"
            },
            {
              "step": 38,
              "variableName": "exceptionAnalyser.transform(finishFailures)",
              "startLine": 72,
              "startColumn": 16,
              "endLine": 72,
              "endColumn": 59,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/internal/buildtree/DefaultBuildTreeFinishExecutor.java",
              "type": "LocationAwareException",
              "code": "            finishFailures.addAll(result.getFailures());\n        });\n\n        return exceptionAnalyser.transform(finishFailures);\n    }\n}\n"
            },
            {
              "step": 39,
              "variableName": "delegate.finishBuildTree(failures)",
              "startLine": 46,
              "startColumn": 28,
              "endLine": 46,
              "endColumn": 62,
              "uri": "gradle-8.14.0/subprojects/composite-builds/src/main/java/org/gradle/composite/internal/OperationFiringBuildTreeFinishExecutor.java",
              "type": "LocationAwareException",
              "code": "            @Override\n            public RuntimeException call(BuildOperationContext context) {\n                try {\n                    return delegate.finishBuildTree(failures);\n                } finally {\n                    context.setResult(RESULT);\n                }"
            },
            {
              "step": 40,
              "variableName": "buildOperation.call(context)",
              "startLine": 239,
              "startColumn": 21,
              "endLine": 239,
              "endColumn": 49,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/testFixtures/java/org/gradle/internal/operations/TestBuildOperationRunner.java",
              "type": "LocationAwareException",
              "code": "            TestBuildOperationContext context = new TestBuildOperationContext(record);\n            T t;\n            try {\n                t = buildOperation.call(context);\n            } catch (Throwable failure) {\n                if (record.failure == null) {\n                    record.failure = failure;"
            },
            {
              "step": 41,
              "variableName": "t",
              "startLine": 246,
              "startColumn": 20,
              "endLine": 246,
              "endColumn": 21,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/testFixtures/java/org/gradle/internal/operations/TestBuildOperationRunner.java",
              "type": "LocationAwareException",
              "code": "                }\n                throw throwAsUncheckedException(failure);\n            }\n            return t;\n        }\n\n        private <O extends BuildOperation> void execute(O buildOperation, BuildOperationWorker<O> worker) {"
            },
            {
              "step": 42,
              "variableName": "log.call(buildOperation)",
              "startLine": 51,
              "startColumn": 16,
              "endLine": 51,
              "endColumn": 40,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/testFixtures/java/org/gradle/internal/operations/TestBuildOperationRunner.java",
              "type": "LocationAwareException",
              "code": "\n    @Override\n    public <T> T call(CallableBuildOperation<T> buildOperation) {\n        return log.call(buildOperation);\n    }\n\n    @Override"
            },
            {
              "step": 43,
              "variableName": "ca",
              "startLine": 115,
              "startColumn": 5,
              "endLine": 121,
              "endColumn": 7,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/configurationcache/ConfigurationCacheBuildOperations.kt",
              "type": "LocationAwareException",
              "code": "\ninternal\nfun <T : Any> BuildOperationRunner.withModelLoadOperation(block: () -> T): T =\n    call(object : CallableBuildOperation<T> {\n        override fun description(): BuildOperationDescriptor.Builder = BuildOperationDescriptor\n            .displayName(\"Load model from configuration cache\")\n            .progressDisplayName(\"Loading model from configuration cache\")"
            },
            {
              "step": 44,
              "variableName": "ca",
              "startLine": 115,
              "startColumn": 5,
              "endLine": 121,
              "endColumn": 7,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/configurationcache/ConfigurationCacheBuildOperations.kt",
              "type": "LocationAwareException",
              "code": "\ninternal\nfun <T : Any> BuildOperationRunner.withModelLoadOperation(block: () -> T): T =\n    call(object : CallableBuildOperation<T> {\n        override fun description(): BuildOperationDescriptor.Builder = BuildOperationDescriptor\n            .displayName(\"Load model from configuration cache\")\n            .progressDisplayName(\"Loading model from configuration cache\")"
            },
            {
              "step": 45,
              "variableName": "b",
              "startLine": 635,
              "startColumn": 9,
              "endLine": 641,
              "endColumn": 10,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "        // No need to record the `ClassLoaderScope` tree when loading\n        scopeRegistryListener.dispose()\n\n        buildOperationRunner.withModelLoadOperation {\n            val storeLoadResult = entryStore.useForStateLoad(StateType.Model) { stateFile: ConfigurationCacheStateFile ->\n                cacheIO.readModelFrom(stateFile)\n            }"
            },
            {
              "step": 46,
              "variableName": "block()",
              "startLine": 668,
              "startColumn": 22,
              "endLine": 668,
              "endColumn": 29,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "    private\n    inline fun <T> runAtConfigurationTime(block: () -> T): T {\n        prepareConfigurationTimeBarrier()\n        val result = block()\n        crossConfigurationTimeBarrier()\n        return result\n    }"
            },
            {
              "step": 47,
              "variableName": "result",
              "startLine": 670,
              "startColumn": 16,
              "endLine": 670,
              "endColumn": 22,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "        prepareConfigurationTimeBarrier()\n        val result = block()\n        crossConfigurationTimeBarrier()\n        return result\n    }\n\n    private"
            },
            {
              "step": 48,
              "variableName": "runAtConfigurationTime(...) : LocationAwareException",
              "startLine": 631,
              "startColumn": 28,
              "endLine": 642,
              "endColumn": 6,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "    data class LoadResultMetadata(val originInvocationId: String? = null)\n\n    private\n    fun loadModel(): Any = runAtConfigurationTime {\n        // No need to record the `ClassLoaderScope` tree when loading\n        scopeRegistryListener.dispose()\n"
            },
            {
              "step": 49,
              "variableName": "loadModel()",
              "startLine": 268,
              "startColumn": 20,
              "endLine": 268,
              "endColumn": 31,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "    override fun <T : Any> loadOrCreateModel(creator: () -> T): T {\n        if (isLoaded) {\n            runLoadedSideEffects()\n            return loadModel().uncheckedCast()\n        }\n\n        return runWorkThatContributesToCacheEntry {"
            },
            {
              "step": 50,
              "variableName": "Any",
              "startLine": 22,
              "startColumn": 15,
              "endLine": 22,
              "endColumn": 18,
              "uri": "gradle-8.14.0/platforms/core-configuration/stdlib-kotlin-extensions/src/main/kotlin/org/gradle/internal/extensions/stdlib/CastExtensions.kt",
              "type": "Object",
              "code": "import org.gradle.internal.Cast\n\n\nfun <T : Any> Any.uncheckedCast(): T =\n    Cast.uncheckedNonnullCast(this)\n"
            },
            {
              "step": 51,
              "variableName": "this",
              "startLine": 23,
              "startColumn": 31,
              "endLine": 23,
              "endColumn": 35,
              "uri": "gradle-8.14.0/platforms/core-configuration/stdlib-kotlin-extensions/src/main/kotlin/org/gradle/internal/extensions/stdlib/CastExtensions.kt",
              "type": "Object",
              "code": "\n\nfun <T : Any> Any.uncheckedCast(): T =\n    Cast.uncheckedNonnullCast(this)\n"
            },
            {
              "step": 52,
              "variableName": "Object object",
              "startLine": 76,
              "startColumn": 46,
              "endLine": 76,
              "endColumn": 59,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/Cast.java",
              "type": "Object",
              "code": "    }\n\n    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})\n    public static <T> T uncheckedNonnullCast(Object object) {\n        return (T) object;\n    }\n}"
            },
            {
              "step": 53,
              "variableName": "(T) object",
              "startLine": 77,
              "startColumn": 16,
              "endLine": 77,
              "endColumn": 26,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/Cast.java",
              "type": "Object",
              "code": "\n    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})\n    public static <T> T uncheckedNonnullCast(Object object) {\n        return (T) object;\n    }\n}\n"
            },
            {
              "step": 54,
              "variableName": "Cast.uncheckedNonnullCast(defaultValue)",
              "startLine": 112,
              "startColumn": 73,
              "endLine": 112,
              "endColumn": 112,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/api/internal/provider/AbstractMinimalProvider.java",
              "type": "Object",
              "code": "\n    @Override\n    public T getOrElse(T defaultValue) {\n        return calculateOwnValue(ValueConsumer.IgnoreUnsafeRead).orElse(Cast.uncheckedNonnullCast(defaultValue));\n    }\n\n    @Override"
            },
            {
              "step": 55,
              "variableName": "T defaultValue",
              "startLine": 610,
              "startColumn": 25,
              "endLine": 610,
              "endColumn": 39,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/api/internal/provider/ValueSupplier.java",
              "type": "Object",
              "code": "        }\n\n        @Override\n        public T orElse(T defaultValue) {\n            return defaultValue;\n        }\n"
            },
            {
              "step": 56,
              "variableName": "defaultValue",
              "startLine": 611,
              "startColumn": 20,
              "endLine": 611,
              "endColumn": 32,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/api/internal/provider/ValueSupplier.java",
              "type": "Object",
              "code": "\n        @Override\n        public T orElse(T defaultValue) {\n            return defaultValue;\n        }\n\n        @Override"
            },
            {
              "step": 57,
              "variableName": "calculateOwnValue(ValueConsumer.IgnoreUnsafeRead).orElse(Cast.uncheckedNonnullCast(defaultValue))",
              "startLine": 112,
              "startColumn": 16,
              "endLine": 112,
              "endColumn": 113,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/api/internal/provider/AbstractMinimalProvider.java",
              "type": "Object",
              "code": "\n    @Override\n    public T getOrElse(T defaultValue) {\n        return calculateOwnValue(ValueConsumer.IgnoreUnsafeRead).orElse(Cast.uncheckedNonnullCast(defaultValue));\n    }\n\n    @Override"
            },
            {
              "step": 58,
              "variableName": "getNativeImageCapable().getOrElse(false)",
              "startLine": 105,
              "startColumn": 13,
              "endLine": 105,
              "endColumn": 53,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-configuration/src/main/java/org/gradle/buildconfiguration/tasks/UpdateDaemonJvm.java",
              "type": "Boolean",
              "code": "            getPropertiesFile().get().getAsFile(),\n            getLanguageVersion().get(),\n            jvmVendorCriteria,\n            getNativeImageCapable().getOrElse(false),\n            getToolchainDownloadUrls().get()\n        );\n    }"
            },
            {
              "step": 59,
              "variableName": "File propertiesFile",
              "startLine": 45,
              "startColumn": 9,
              "endLine": 45,
              "endColumn": 28,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-configuration/src/main/java/org/gradle/internal/buildconfiguration/tasks/DaemonJvmPropertiesModifier.java",
              "type": "File",
              "code": "    }\n\n    public void updateJvmCriteria(\n        File propertiesFile,\n        JavaLanguageVersion toolchainVersion,\n        @Nullable String toolchainVendor,\n        boolean nativeImageCapable,"
            },
            {
              "step": 60,
              "variableName": "propertiesFile",
              "startLine": 67,
              "startColumn": 33,
              "endLine": 67,
              "endColumn": 47,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-configuration/src/main/java/org/gradle/internal/buildconfiguration/tasks/DaemonJvmPropertiesModifier.java",
              "type": "File",
              "code": "            daemonJvmProperties.put(toolchainUrlProperty, uri.toString());\n        });\n\n        GFileUtils.parentMkdirs(propertiesFile);\n        try {\n            PropertiesUtils.store(daemonJvmProperties, propertiesFile, \"This file is generated by \" + DaemonJvmPropertiesConfigurator.TASK_NAME);\n        } catch (IOException e) {"
            },
            {
              "step": 61,
              "variableName": "File child",
              "startLine": 241,
              "startColumn": 37,
              "endLine": 241,
              "endColumn": 47,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/util/internal/GFileUtils.java",
              "type": "File",
              "code": "     * @return The parent dir file\n     * @see #mkdirs(java.io.File)\n     */\n    public static File parentMkdirs(File child) {\n        File parent = child.getParentFile();\n        mkdirs(parent);\n        return parent;"
            },
            {
              "step": 62,
              "variableName": "child",
              "startLine": 242,
              "startColumn": 23,
              "endLine": 242,
              "endColumn": 28,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/util/internal/GFileUtils.java",
              "type": "File",
              "code": "     * @see #mkdirs(java.io.File)\n     */\n    public static File parentMkdirs(File child) {\n        File parent = child.getParentFile();\n        mkdirs(parent);\n        return parent;\n    }"
            },
            {
              "step": 63,
              "variableName": "getParentFile",
              "startLine": 392,
              "startColumn": 21,
              "endLine": 392,
              "endColumn": 34,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "TestFile",
              "code": "    }\n\n    @Override\n    public TestFile getParentFile() {\n        return super.getParentFile() == null ? null : new TestFile(super.getParentFile());\n    }\n"
            },
            {
              "step": 64,
              "variableName": "super",
              "startLine": 393,
              "startColumn": 68,
              "endLine": 393,
              "endColumn": 73,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "TestFile",
              "code": "\n    @Override\n    public TestFile getParentFile() {\n        return super.getParentFile() == null ? null : new TestFile(super.getParentFile());\n    }\n\n    @Override"
            },
            {
              "step": 65,
              "variableName": "super.getParentFile()",
              "startLine": 393,
              "startColumn": 68,
              "endLine": 393,
              "endColumn": 89,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "File",
              "code": "\n    @Override\n    public TestFile getParentFile() {\n        return super.getParentFile() == null ? null : new TestFile(super.getParentFile());\n    }\n\n    @Override"
            },
            {
              "step": 66,
              "variableName": "File file",
              "startLine": 77,
              "startColumn": 21,
              "endLine": 77,
              "endColumn": 30,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "File",
              "code": "    private boolean useNativeTools;\n    private final File relativeBase;\n\n    public TestFile(File file, Object... path) {\n        super(join(file, path).getAbsolutePath());\n        this.relativeBase = file;\n    }"
            },
            {
              "step": 67,
              "variableName": "file",
              "startLine": 78,
              "startColumn": 20,
              "endLine": 78,
              "endColumn": 24,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "File",
              "code": "    private final File relativeBase;\n\n    public TestFile(File file, Object... path) {\n        super(join(file, path).getAbsolutePath());\n        this.relativeBase = file;\n    }\n"
            },
            {
              "step": 68,
              "variableName": "File file",
              "startLine": 126,
              "startColumn": 30,
              "endLine": 126,
              "endColumn": 39,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "File",
              "code": "        }\n    }\n\n    private static File join(File file, Object[] path) {\n        File current = file.getAbsoluteFile();\n        for (Object p : path) {\n            current = new File(current, p.toString());"
            },
            {
              "step": 69,
              "variableName": "file",
              "startLine": 127,
              "startColumn": 24,
              "endLine": 127,
              "endColumn": 28,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "File",
              "code": "    }\n\n    private static File join(File file, Object[] path) {\n        File current = file.getAbsoluteFile();\n        for (Object p : path) {\n            current = new File(current, p.toString());\n        }"
            },
            {
              "step": 70,
              "variableName": "file.getAbsoluteFile()",
              "startLine": 127,
              "startColumn": 24,
              "endLine": 127,
              "endColumn": 46,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "File",
              "code": "    }\n\n    private static File join(File file, Object[] path) {\n        File current = file.getAbsoluteFile();\n        for (Object p : path) {\n            current = new File(current, p.toString());\n        }"
            },
            {
              "step": 71,
              "variableName": "current",
              "startLine": 132,
              "startColumn": 20,
              "endLine": 132,
              "endColumn": 27,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "File",
              "code": "            current = new File(current, p.toString());\n        }\n        try {\n            return current.getCanonicalFile();\n        } catch (IOException e) {\n            throw new RuntimeException(String.format(\"Could not canonicalise '%s'.\", current), e);\n        }"
            },
            {
              "step": 72,
              "variableName": "getCanonicalFile",
              "startLine": 109,
              "startColumn": 17,
              "endLine": 109,
              "endColumn": 33,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "TestFile",
              "code": "    }\n\n    @Override\n    public File getCanonicalFile() throws IOException {\n        return new File(getAbsolutePath()).getCanonicalFile();\n    }\n"
            },
            {
              "step": 73,
              "variableName": "getAbsolutePath()",
              "startLine": 110,
              "startColumn": 25,
              "endLine": 110,
              "endColumn": 42,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "TestFile",
              "code": "\n    @Override\n    public File getCanonicalFile() throws IOException {\n        return new File(getAbsolutePath()).getCanonicalFile();\n    }\n\n    @Override"
            },
            {
              "step": 74,
              "variableName": "getAbsolutePath()",
              "startLine": 110,
              "startColumn": 25,
              "endLine": 110,
              "endColumn": 42,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "String",
              "code": "\n    @Override\n    public File getCanonicalFile() throws IOException {\n        return new File(getAbsolutePath()).getCanonicalFile();\n    }\n\n    @Override"
            },
            {
              "step": 75,
              "variableName": "new File(getAbsolutePath())",
              "startLine": 110,
              "startColumn": 16,
              "endLine": 110,
              "endColumn": 43,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "File",
              "code": "\n    @Override\n    public File getCanonicalFile() throws IOException {\n        return new File(getAbsolutePath()).getCanonicalFile();\n    }\n\n    @Override"
            },
            {
              "step": 76,
              "variableName": "new File(getAbsolutePath()).getCanonicalFile()",
              "startLine": 110,
              "startColumn": 16,
              "endLine": 110,
              "endColumn": 62,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "File",
              "code": "\n    @Override\n    public File getCanonicalFile() throws IOException {\n        return new File(getAbsolutePath()).getCanonicalFile();\n    }\n\n    @Override"
            },
            {
              "step": 77,
              "variableName": "current.getCanonicalFile()",
              "startLine": 132,
              "startColumn": 20,
              "endLine": 132,
              "endColumn": 46,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "File",
              "code": "            current = new File(current, p.toString());\n        }\n        try {\n            return current.getCanonicalFile();\n        } catch (IOException e) {\n            throw new RuntimeException(String.format(\"Could not canonicalise '%s'.\", current), e);\n        }"
            },
            {
              "step": 78,
              "variableName": "join(file, path)",
              "startLine": 78,
              "startColumn": 15,
              "endLine": 78,
              "endColumn": 31,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "File",
              "code": "    private final File relativeBase;\n\n    public TestFile(File file, Object... path) {\n        super(join(file, path).getAbsolutePath());\n        this.relativeBase = file;\n    }\n"
            },
            {
              "step": 79,
              "variableName": "join(file, path).getAbsolutePath()",
              "startLine": 78,
              "startColumn": 15,
              "endLine": 78,
              "endColumn": 49,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "String",
              "code": "    private final File relativeBase;\n\n    public TestFile(File file, Object... path) {\n        super(join(file, path).getAbsolutePath());\n        this.relativeBase = file;\n    }\n"
            },
            {
              "step": 80,
              "variableName": "super(join(file, path).getAbsolutePath());",
              "startLine": 78,
              "startColumn": 9,
              "endLine": 78,
              "endColumn": 51,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "TestFile",
              "code": "    private final File relativeBase;\n\n    public TestFile(File file, Object... path) {\n        super(join(file, path).getAbsolutePath());\n        this.relativeBase = file;\n    }\n"
            },
            {
              "step": 81,
              "variableName": "new TestFile(child)",
              "startLine": 210,
              "startColumn": 24,
              "endLine": 210,
              "endColumn": 43,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "TestFile",
              "code": "        TestFile[] files = new TestFile[children.length];\n        for (int i = 0; i < children.length; i++) {\n            File child = children[i];\n            files[i] = new TestFile(child);\n        }\n        return files;\n    }"
            },
            {
              "step": 82,
              "variableName": "files",
              "startLine": 210,
              "startColumn": 13,
              "endLine": 210,
              "endColumn": 18,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "TestFile[] [[]] : TestFile",
              "code": "        TestFile[] files = new TestFile[children.length];\n        for (int i = 0; i < children.length; i++) {\n            File child = children[i];\n            files[i] = new TestFile(child);\n        }\n        return files;\n    }"
            },
            {
              "step": 83,
              "variableName": "files",
              "startLine": 212,
              "startColumn": 16,
              "endLine": 212,
              "endColumn": 21,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "TestFile[] [[]] : TestFile",
              "code": "            File child = children[i];\n            files[i] = new TestFile(child);\n        }\n        return files;\n    }\n\n    public String getText() {"
            },
            {
              "step": 84,
              "variableName": "asFile.listFiles()",
              "startLine": 44,
              "startColumn": 30,
              "endLine": 44,
              "endColumn": 48,
              "uri": "gradle-8.14.0/build-logic/cleanup/src/main/kotlin/gradlebuild/cleanup/Cleanup.kt",
              "type": "TestFile[] [[]] : TestFile",
              "code": "@Suppress(\"LoopWithTooManyJumpStatements\")\nfun FileSystemOperations.removeOldVersionsFromDir(dir: Directory, shouldDelete: Spec<GradleVersion>, dirPrefix: String = \"\", dirSuffix: String = \"\") {\n    if (dir.asFile.isDirectory) {\n        for (cacheDir in dir.asFile.listFiles()) {\n            val cacheDirName = cacheDir.name\n            if (!cacheDirName.startsWith(dirPrefix) || !cacheDirName.endsWith(dirSuffix)) {\n                continue"
            },
            {
              "step": 85,
              "variableName": "listFiles()",
              "startLine": 44,
              "startColumn": 37,
              "endLine": 44,
              "endColumn": 48,
              "uri": "gradle-8.14.0/build-logic/cleanup/src/main/kotlin/gradlebuild/cleanup/Cleanup.kt",
              "type": "TestFile[] [[]] : TestFile",
              "code": "@Suppress(\"LoopWithTooManyJumpStatements\")\nfun FileSystemOperations.removeOldVersionsFromDir(dir: Directory, shouldDelete: Spec<GradleVersion>, dirPrefix: String = \"\", dirSuffix: String = \"\") {\n    if (dir.asFile.isDirectory) {\n        for (cacheDir in dir.asFile.listFiles()) {\n            val cacheDirName = cacheDir.name\n            if (!cacheDirName.startsWith(dirPrefix) || !cacheDirName.endsWith(dirSuffix)) {\n                continue"
            },
            {
              "step": 86,
              "variableName": "listFiles()",
              "startLine": 44,
              "startColumn": 37,
              "endLine": 44,
              "endColumn": 48,
              "uri": "gradle-8.14.0/build-logic/cleanup/src/main/kotlin/gradlebuild/cleanup/Cleanup.kt",
              "type": "TestFile[] [[]] : TestFile",
              "code": "@Suppress(\"LoopWithTooManyJumpStatements\")\nfun FileSystemOperations.removeOldVersionsFromDir(dir: Directory, shouldDelete: Spec<GradleVersion>, dirPrefix: String = \"\", dirSuffix: String = \"\") {\n    if (dir.asFile.isDirectory) {\n        for (cacheDir in dir.asFile.listFiles()) {\n            val cacheDirName = cacheDir.name\n            if (!cacheDirName.startsWith(dirPrefix) || !cacheDirName.endsWith(dirSuffix)) {\n                continue"
            },
            {
              "step": 87,
              "variableName": "cacheDir",
              "startLine": 45,
              "startColumn": 32,
              "endLine": 45,
              "endColumn": 40,
              "uri": "gradle-8.14.0/build-logic/cleanup/src/main/kotlin/gradlebuild/cleanup/Cleanup.kt",
              "type": "TestFile",
              "code": "fun FileSystemOperations.removeOldVersionsFromDir(dir: Directory, shouldDelete: Spec<GradleVersion>, dirPrefix: String = \"\", dirSuffix: String = \"\") {\n    if (dir.asFile.isDirectory) {\n        for (cacheDir in dir.asFile.listFiles()) {\n            val cacheDirName = cacheDir.name\n            if (!cacheDirName.startsWith(dirPrefix) || !cacheDirName.endsWith(dirSuffix)) {\n                continue\n            }"
            },
            {
              "step": 88,
              "variableName": "cacheDir",
              "startLine": 45,
              "startColumn": 32,
              "endLine": 45,
              "endColumn": 40,
              "uri": "gradle-8.14.0/build-logic/cleanup/src/main/kotlin/gradlebuild/cleanup/Cleanup.kt",
              "type": "TestFile",
              "code": "fun FileSystemOperations.removeOldVersionsFromDir(dir: Directory, shouldDelete: Spec<GradleVersion>, dirPrefix: String = \"\", dirSuffix: String = \"\") {\n    if (dir.asFile.isDirectory) {\n        for (cacheDir in dir.asFile.listFiles()) {\n            val cacheDirName = cacheDir.name\n            if (!cacheDirName.startsWith(dirPrefix) || !cacheDirName.endsWith(dirSuffix)) {\n                continue\n            }"
            },
            {
              "step": 89,
              "variableName": "cacheDir.name",
              "startLine": 45,
              "startColumn": 32,
              "endLine": 45,
              "endColumn": 45,
              "uri": "gradle-8.14.0/build-logic/cleanup/src/main/kotlin/gradlebuild/cleanup/Cleanup.kt",
              "type": "String",
              "code": "fun FileSystemOperations.removeOldVersionsFromDir(dir: Directory, shouldDelete: Spec<GradleVersion>, dirPrefix: String = \"\", dirSuffix: String = \"\") {\n    if (dir.asFile.isDirectory) {\n        for (cacheDir in dir.asFile.listFiles()) {\n            val cacheDirName = cacheDir.name\n            if (!cacheDirName.startsWith(dirPrefix) || !cacheDirName.endsWith(dirSuffix)) {\n                continue\n            }"
            },
            {
              "step": 90,
              "variableName": "cacheDirName",
              "startLine": 49,
              "startColumn": 30,
              "endLine": 49,
              "endColumn": 42,
              "uri": "gradle-8.14.0/build-logic/cleanup/src/main/kotlin/gradlebuild/cleanup/Cleanup.kt",
              "type": "String",
              "code": "            if (!cacheDirName.startsWith(dirPrefix) || !cacheDirName.endsWith(dirSuffix)) {\n                continue\n            }\n            val dirVersion = cacheDirName.removePrefix(dirPrefix).removeSuffix(dirSuffix)\n            if (!dirVersion.matches(dirVersionPattern)) {\n                continue\n            }"
            },
            {
              "step": 91,
              "variableName": "cacheDirName.removePrefix(dirPrefix)",
              "startLine": 49,
              "startColumn": 30,
              "endLine": 49,
              "endColumn": 66,
              "uri": "gradle-8.14.0/build-logic/cleanup/src/main/kotlin/gradlebuild/cleanup/Cleanup.kt",
              "type": "String",
              "code": "            if (!cacheDirName.startsWith(dirPrefix) || !cacheDirName.endsWith(dirSuffix)) {\n                continue\n            }\n            val dirVersion = cacheDirName.removePrefix(dirPrefix).removeSuffix(dirSuffix)\n            if (!dirVersion.matches(dirVersionPattern)) {\n                continue\n            }"
            },
            {
              "step": 92,
              "variableName": "cacheDirName.removePrefix(dirPrefix).removeSuffix(dirSuffix)",
              "startLine": 49,
              "startColumn": 30,
              "endLine": 49,
              "endColumn": 90,
              "uri": "gradle-8.14.0/build-logic/cleanup/src/main/kotlin/gradlebuild/cleanup/Cleanup.kt",
              "type": "String",
              "code": "            if (!cacheDirName.startsWith(dirPrefix) || !cacheDirName.endsWith(dirSuffix)) {\n                continue\n            }\n            val dirVersion = cacheDirName.removePrefix(dirPrefix).removeSuffix(dirSuffix)\n            if (!dirVersion.matches(dirVersionPattern)) {\n                continue\n            }"
            },
            {
              "step": 93,
              "variableName": "dirVersion",
              "startLine": 56,
              "startColumn": 43,
              "endLine": 56,
              "endColumn": 53,
              "uri": "gradle-8.14.0/build-logic/cleanup/src/main/kotlin/gradlebuild/cleanup/Cleanup.kt",
              "type": "String",
              "code": "\n            val cacheVersion =\n                try {\n                    GradleVersion.version(dirVersion)\n                } catch (_: IllegalArgumentException) {\n                    // Ignore\n                    continue"
            },
            {
              "step": 94,
              "variableName": "String version",
              "startLine": 72,
              "startColumn": 41,
              "endLine": 72,
              "endColumn": 55,
              "uri": "gradle-8.14.0/platforms/core-runtime/logging/src/main/java/org/gradle/util/GradleVersion.java",
              "type": "String",
              "code": "     *\n     * @throws IllegalArgumentException On unrecognized version string.\n     */\n    public static GradleVersion version(String version) throws IllegalArgumentException {\n        return DefaultGradleVersion.version(version);\n    }\n"
            },
            {
              "step": 95,
              "variableName": "version",
              "startLine": 73,
              "startColumn": 45,
              "endLine": 73,
              "endColumn": 52,
              "uri": "gradle-8.14.0/platforms/core-runtime/logging/src/main/java/org/gradle/util/GradleVersion.java",
              "type": "String",
              "code": "     * @throws IllegalArgumentException On unrecognized version string.\n     */\n    public static GradleVersion version(String version) throws IllegalArgumentException {\n        return DefaultGradleVersion.version(version);\n    }\n\n    /**"
            },
            {
              "step": 96,
              "variableName": "String version",
              "startLine": 105,
              "startColumn": 48,
              "endLine": 105,
              "endColumn": 62,
              "uri": "gradle-8.14.0/platforms/core-runtime/logging/src/main/java/org/gradle/util/internal/DefaultGradleVersion.java",
              "type": "String",
              "code": "     *\n     * @throws IllegalArgumentException On unrecognized version string.\n     */\n    public static DefaultGradleVersion version(String version) throws IllegalArgumentException {\n        return new DefaultGradleVersion(version, null, null);\n    }\n"
            },
            {
              "step": 97,
              "variableName": "version",
              "startLine": 106,
              "startColumn": 41,
              "endLine": 106,
              "endColumn": 48,
              "uri": "gradle-8.14.0/platforms/core-runtime/logging/src/main/java/org/gradle/util/internal/DefaultGradleVersion.java",
              "type": "String",
              "code": "     * @throws IllegalArgumentException On unrecognized version string.\n     */\n    public static DefaultGradleVersion version(String version) throws IllegalArgumentException {\n        return new DefaultGradleVersion(version, null, null);\n    }\n\n    private DefaultGradleVersion(String version, String buildTime, String commitId) {"
            },
            {
              "step": 98,
              "variableName": "String version",
              "startLine": 109,
              "startColumn": 34,
              "endLine": 109,
              "endColumn": 48,
              "uri": "gradle-8.14.0/platforms/core-runtime/logging/src/main/java/org/gradle/util/internal/DefaultGradleVersion.java",
              "type": "String",
              "code": "        return new DefaultGradleVersion(version, null, null);\n    }\n\n    private DefaultGradleVersion(String version, String buildTime, String commitId) {\n        this.version = version;\n        this.buildTime = buildTime;\n        Matcher matcher = VERSION_PATTERN.matcher(version);"
            },
            {
              "step": 99,
              "variableName": "version",
              "startLine": 112,
              "startColumn": 51,
              "endLine": 112,
              "endColumn": 58,
              "uri": "gradle-8.14.0/platforms/core-runtime/logging/src/main/java/org/gradle/util/internal/DefaultGradleVersion.java",
              "type": "String",
              "code": "    private DefaultGradleVersion(String version, String buildTime, String commitId) {\n        this.version = version;\n        this.buildTime = buildTime;\n        Matcher matcher = VERSION_PATTERN.matcher(version);\n        if (!matcher.matches()) {\n            throw new IllegalArgumentException(format(\"'%s' is not a valid Gradle version string (examples: '1.0', '1.0-rc-1')\", version));\n        }"
            },
            {
              "step": 100,
              "variableName": "VERSION_PATTERN.matcher(version)",
              "startLine": 112,
              "startColumn": 27,
              "endLine": 112,
              "endColumn": 59,
              "uri": "gradle-8.14.0/platforms/core-runtime/logging/src/main/java/org/gradle/util/internal/DefaultGradleVersion.java",
              "type": "Matcher",
              "code": "    private DefaultGradleVersion(String version, String buildTime, String commitId) {\n        this.version = version;\n        this.buildTime = buildTime;\n        Matcher matcher = VERSION_PATTERN.matcher(version);\n        if (!matcher.matches()) {\n            throw new IllegalArgumentException(format(\"'%s' is not a valid Gradle version string (examples: '1.0', '1.0-rc-1')\", version));\n        }"
            },
            {
              "step": 101,
              "variableName": "matcher",
              "startLine": 120,
              "startColumn": 54,
              "endLine": 120,
              "endColumn": 61,
              "uri": "gradle-8.14.0/platforms/core-runtime/logging/src/main/java/org/gradle/util/internal/DefaultGradleVersion.java",
              "type": "Matcher",
              "code": "        versionPart = matcher.group(1);\n        majorPart = Integer.parseInt(matcher.group(2), 10);\n\n        this.commitId = setOrParseCommitId(commitId, matcher);\n        this.stage = parseStage(matcher);\n        this.snapshot = parseSnapshot(matcher);\n    }"
            },
            {
              "step": 102,
              "variableName": "String commitId",
              "startLine": 169,
              "startColumn": 39,
              "endLine": 169,
              "endColumn": 54,
              "uri": "gradle-8.14.0/platforms/core-runtime/logging/src/main/java/org/gradle/util/internal/DefaultGradleVersion.java",
              "type": "String",
              "code": "        return stage.equals(matcher.group(5));\n    }\n\n    private String setOrParseCommitId(String commitId, Matcher matcher) {\n        if (commitId != null || !isCommitVersion(matcher)) {\n            return commitId;\n        } else {"
            },
            {
              "step": 103,
              "variableName": "commitId",
              "startLine": 171,
              "startColumn": 20,
              "endLine": 171,
              "endColumn": 28,
              "uri": "gradle-8.14.0/platforms/core-runtime/logging/src/main/java/org/gradle/util/internal/DefaultGradleVersion.java",
              "type": "String",
              "code": "\n    private String setOrParseCommitId(String commitId, Matcher matcher) {\n        if (commitId != null || !isCommitVersion(matcher)) {\n            return commitId;\n        } else {\n            return matcher.group(6);\n        }"
            },
            {
              "step": 104,
              "variableName": "setOrParseCommitId(commitId, matcher)",
              "startLine": 120,
              "startColumn": 25,
              "endLine": 120,
              "endColumn": 62,
              "uri": "gradle-8.14.0/platforms/core-runtime/logging/src/main/java/org/gradle/util/internal/DefaultGradleVersion.java",
              "type": "String",
              "code": "        versionPart = matcher.group(1);\n        majorPart = Integer.parseInt(matcher.group(2), 10);\n\n        this.commitId = setOrParseCommitId(commitId, matcher);\n        this.stage = parseStage(matcher);\n        this.snapshot = parseSnapshot(matcher);\n    }"
            },
            {
              "step": 105,
              "variableName": "this",
              "startLine": 120,
              "startColumn": 9,
              "endLine": 120,
              "endColumn": 13,
              "uri": "gradle-8.14.0/platforms/core-runtime/logging/src/main/java/org/gradle/util/internal/DefaultGradleVersion.java",
              "type": "DefaultGradleVersion [commitId] : String",
              "code": "        versionPart = matcher.group(1);\n        majorPart = Integer.parseInt(matcher.group(2), 10);\n\n        this.commitId = setOrParseCommitId(commitId, matcher);\n        this.stage = parseStage(matcher);\n        this.snapshot = parseSnapshot(matcher);\n    }"
            },
            {
              "step": 106,
              "variableName": "new DefaultGradleVersion(version, \"unknown\".equals(buildTimestamp) ? null : buildTimestamp, commitId)",
              "startLine": 86,
              "startColumn": 23,
              "endLine": 86,
              "endColumn": 124,
              "uri": "gradle-8.14.0/platforms/core-runtime/logging/src/main/java/org/gradle/util/internal/DefaultGradleVersion.java",
              "type": "DefaultGradleVersion [commitId] : String",
              "code": "            String buildTimestamp = properties.get(\"buildTimestampIso\").toString();\n            String commitId = properties.get(\"commitId\").toString();\n\n            CURRENT = new DefaultGradleVersion(version, \"unknown\".equals(buildTimestamp) ? null : buildTimestamp, commitId);\n        } catch (Exception e) {\n            throw new GradleException(format(\"Could not load version details from resource '%s'.\", resource), e);\n        } finally {"
            },
            {
              "step": 107,
              "variableName": "CURRENT",
              "startLine": 52,
              "startColumn": 47,
              "endLine": 52,
              "endColumn": 54,
              "uri": "gradle-8.14.0/platforms/core-runtime/logging/src/main/java/org/gradle/util/internal/DefaultGradleVersion.java",
              "type": "DefaultGradleVersion [commitId] : String",
              "code": "    private final Long snapshot;\n    private final String versionPart;\n    private final Stage stage;\n    private static final DefaultGradleVersion CURRENT;\n\n    public static final String RESOURCE_NAME = \"/org/gradle/build-receipt.properties\";\n    public static final String VERSION_OVERRIDE_VAR = \"GRADLE_VERSION_OVERRIDE\";"
            },
            {
              "step": 108,
              "variableName": "CURRENT",
              "startLine": 97,
              "startColumn": 16,
              "endLine": 97,
              "endColumn": 23,
              "uri": "gradle-8.14.0/platforms/core-runtime/logging/src/main/java/org/gradle/util/internal/DefaultGradleVersion.java",
              "type": "DefaultGradleVersion [commitId] : String",
              "code": "    }\n\n    public static DefaultGradleVersion current() {\n        return CURRENT;\n    }\n\n    /**"
            },
            {
              "step": 109,
              "variableName": "DefaultGradleVersion.current()",
              "startLine": 249,
              "startColumn": 51,
              "endLine": 249,
              "endColumn": 81,
              "uri": "gradle-8.14.0/platforms/core-runtime/gradle-cli/src/main/java/org/gradle/launcher/cli/DefaultCommandLineActionFactory.java",
              "type": "DefaultGradleVersion [commitId] : String",
              "code": "\n        @Override\n        public void execute(ExecutionListener executionListener) {\n            DefaultGradleVersion currentVersion = DefaultGradleVersion.current();\n\n            System.out.println();\n            System.out.println(\"------------------------------------------------------------\");"
            },
            {
              "step": 110,
              "variableName": "currentVersion",
              "startLine": 258,
              "startColumn": 47,
              "endLine": 258,
              "endColumn": 61,
              "uri": "gradle-8.14.0/platforms/core-runtime/gradle-cli/src/main/java/org/gradle/launcher/cli/DefaultCommandLineActionFactory.java",
              "type": "DefaultGradleVersion [commitId] : String",
              "code": "            System.out.println();\n            printAligned(ImmutableList.of(\n                new Line.KeyValue(\"Build time\", currentVersion.getBuildTimestamp()),\n                new Line.KeyValue(\"Revision\", currentVersion.getGitRevision()),\n                new Line.Blank(),\n                new Line.KeyValue(\"Kotlin\", KotlinDslVersion.current().getKotlinVersion()),\n                new Line.KeyValue(\"Groovy\", ReleaseInfo.getVersion()),"
            },
            {
              "step": 111,
              "variableName": "getGitRevision",
              "startLine": 205,
              "startColumn": 19,
              "endLine": 205,
              "endColumn": 33,
              "uri": "gradle-8.14.0/platforms/core-runtime/logging/src/main/java/org/gradle/util/internal/DefaultGradleVersion.java",
              "type": "DefaultGradleVersion [commitId] : String",
              "code": "        return getGitRevision();\n    }\n\n    public String getGitRevision() {\n        return commitId;\n    }\n"
            },
            {
              "step": 112,
              "variableName": "commitId",
              "startLine": 206,
              "startColumn": 16,
              "endLine": 206,
              "endColumn": 24,
              "uri": "gradle-8.14.0/platforms/core-runtime/logging/src/main/java/org/gradle/util/internal/DefaultGradleVersion.java",
              "type": "DefaultGradleVersion [commitId] : String",
              "code": "    }\n\n    public String getGitRevision() {\n        return commitId;\n    }\n\n    @Override"
            },
            {
              "step": 113,
              "variableName": "commitId",
              "startLine": 206,
              "startColumn": 16,
              "endLine": 206,
              "endColumn": 24,
              "uri": "gradle-8.14.0/platforms/core-runtime/logging/src/main/java/org/gradle/util/internal/DefaultGradleVersion.java",
              "type": "String",
              "code": "    }\n\n    public String getGitRevision() {\n        return commitId;\n    }\n\n    @Override"
            },
            {
              "step": 114,
              "variableName": "currentVersion.getGitRevision()",
              "startLine": 258,
              "startColumn": 47,
              "endLine": 258,
              "endColumn": 78,
              "uri": "gradle-8.14.0/platforms/core-runtime/gradle-cli/src/main/java/org/gradle/launcher/cli/DefaultCommandLineActionFactory.java",
              "type": "String",
              "code": "            System.out.println();\n            printAligned(ImmutableList.of(\n                new Line.KeyValue(\"Build time\", currentVersion.getBuildTimestamp()),\n                new Line.KeyValue(\"Revision\", currentVersion.getGitRevision()),\n                new Line.Blank(),\n                new Line.KeyValue(\"Kotlin\", KotlinDslVersion.current().getKotlinVersion()),\n                new Line.KeyValue(\"Groovy\", ReleaseInfo.getVersion()),"
            },
            {
              "step": 115,
              "variableName": "String value",
              "startLine": 275,
              "startColumn": 45,
              "endLine": 275,
              "endColumn": 57,
              "uri": "gradle-8.14.0/platforms/core-runtime/gradle-cli/src/main/java/org/gradle/launcher/cli/DefaultCommandLineActionFactory.java",
              "type": "String",
              "code": "                private final String key;\n                private final String value;\n\n                public KeyValue(String key, String value) {\n                    this.key = key;\n                    this.value = value;\n                }"
            },
            {
              "step": 116,
              "variableName": "value",
              "startLine": 277,
              "startColumn": 34,
              "endLine": 277,
              "endColumn": 39,
              "uri": "gradle-8.14.0/platforms/core-runtime/gradle-cli/src/main/java/org/gradle/launcher/cli/DefaultCommandLineActionFactory.java",
              "type": "String",
              "code": "\n                public KeyValue(String key, String value) {\n                    this.key = key;\n                    this.value = value;\n                }\n            }\n"
            },
            {
              "step": 117,
              "variableName": "this",
              "startLine": 277,
              "startColumn": 21,
              "endLine": 277,
              "endColumn": 25,
              "uri": "gradle-8.14.0/platforms/core-runtime/gradle-cli/src/main/java/org/gradle/launcher/cli/DefaultCommandLineActionFactory.java",
              "type": "KeyValue [value] : String",
              "code": "\n                public KeyValue(String key, String value) {\n                    this.key = key;\n                    this.value = value;\n                }\n            }\n"
            },
            {
              "step": 118,
              "variableName": "new Line.KeyValue(\"Revision\", currentVersion.getGitRevision())",
              "startLine": 258,
              "startColumn": 17,
              "endLine": 258,
              "endColumn": 79,
              "uri": "gradle-8.14.0/platforms/core-runtime/gradle-cli/src/main/java/org/gradle/launcher/cli/DefaultCommandLineActionFactory.java",
              "type": "KeyValue [value] : String",
              "code": "            System.out.println();\n            printAligned(ImmutableList.of(\n                new Line.KeyValue(\"Build time\", currentVersion.getBuildTimestamp()),\n                new Line.KeyValue(\"Revision\", currentVersion.getGitRevision()),\n                new Line.Blank(),\n                new Line.KeyValue(\"Kotlin\", KotlinDslVersion.current().getKotlinVersion()),\n                new Line.KeyValue(\"Groovy\", ReleaseInfo.getVersion()),"
            },
            {
              "step": 119,
              "variableName": "of(...) : ImmutableList [<element>, value] : String",
              "startLine": 256,
              "startColumn": 26,
              "endLine": 267,
              "endColumn": 14,
              "uri": "gradle-8.14.0/platforms/core-runtime/gradle-cli/src/main/java/org/gradle/launcher/cli/DefaultCommandLineActionFactory.java",
              "type": "ImmutableList [<element>, value] : String",
              "code": "            System.out.println(\"Gradle \" + currentVersion.getVersion());\n            System.out.println(\"------------------------------------------------------------\");\n            System.out.println();\n            printAligned(ImmutableList.of(\n                new Line.KeyValue(\"Build time\", currentVersion.getBuildTimestamp()),\n                new Line.KeyValue(\"Revision\", currentVersion.getGitRevision()),\n                new Line.Blank(),"
            },
            {
              "step": 120,
              "variableName": "List<Line> lines",
              "startLine": 304,
              "startColumn": 42,
              "endLine": 304,
              "endColumn": 58,
              "uri": "gradle-8.14.0/platforms/core-runtime/gradle-cli/src/main/java/org/gradle/launcher/cli/DefaultCommandLineActionFactory.java",
              "type": "ImmutableList [<element>, value] : String",
              "code": "         *\n         * @param lines the lines to print\n         */\n        private static void printAligned(List<Line> lines) {\n            int maxKeyLength = lines.stream()\n                .filter(line -> line instanceof Line.KeyValue)\n                .map(line -> ((Line.KeyValue) line).key.length())"
            },
            {
              "step": 121,
              "variableName": "lines",
              "startLine": 310,
              "startColumn": 30,
              "endLine": 310,
              "endColumn": 35,
              "uri": "gradle-8.14.0/platforms/core-runtime/gradle-cli/src/main/java/org/gradle/launcher/cli/DefaultCommandLineActionFactory.java",
              "type": "ImmutableList [<element>, value] : String",
              "code": "                .map(line -> ((Line.KeyValue) line).key.length())\n                .max(Integer::compare)\n                .orElse(0);\n            for (Line line : lines) {\n                if (line instanceof Line.KeyValue) {\n                    Line.KeyValue keyValue = (Line.KeyValue) line;\n                    System.out.print(keyValue.key + \": \");"
            },
            {
              "step": 122,
              "variableName": "line",
              "startLine": 311,
              "startColumn": 21,
              "endLine": 311,
              "endColumn": 25,
              "uri": "gradle-8.14.0/platforms/core-runtime/gradle-cli/src/main/java/org/gradle/launcher/cli/DefaultCommandLineActionFactory.java",
              "type": "KeyValue [value] : String",
              "code": "                .max(Integer::compare)\n                .orElse(0);\n            for (Line line : lines) {\n                if (line instanceof Line.KeyValue) {\n                    Line.KeyValue keyValue = (Line.KeyValue) line;\n                    System.out.print(keyValue.key + \": \");\n                    // Add one to account for colon"
            },
            {
              "step": 123,
              "variableName": "(Line.KeyValue) line",
              "startLine": 312,
              "startColumn": 46,
              "endLine": 312,
              "endColumn": 66,
              "uri": "gradle-8.14.0/platforms/core-runtime/gradle-cli/src/main/java/org/gradle/launcher/cli/DefaultCommandLineActionFactory.java",
              "type": "KeyValue [value] : String",
              "code": "                .orElse(0);\n            for (Line line : lines) {\n                if (line instanceof Line.KeyValue) {\n                    Line.KeyValue keyValue = (Line.KeyValue) line;\n                    System.out.print(keyValue.key + \": \");\n                    // Add one to account for colon\n                    for (int i = keyValue.key.length(); i < maxKeyLength + 1; i++) {"
            },
            {
              "step": 124,
              "variableName": "keyValue",
              "startLine": 318,
              "startColumn": 40,
              "endLine": 318,
              "endColumn": 48,
              "uri": "gradle-8.14.0/platforms/core-runtime/gradle-cli/src/main/java/org/gradle/launcher/cli/DefaultCommandLineActionFactory.java",
              "type": "KeyValue [value] : String",
              "code": "                    for (int i = keyValue.key.length(); i < maxKeyLength + 1; i++) {\n                        System.out.print(' ');\n                    }\n                    System.out.println(keyValue.value);\n                } else {\n                    System.out.println();\n                }"
            },
            {
              "step": 125,
              "variableName": "keyValue.value",
              "startLine": 318,
              "startColumn": 40,
              "endLine": 318,
              "endColumn": 54,
              "uri": "gradle-8.14.0/platforms/core-runtime/gradle-cli/src/main/java/org/gradle/launcher/cli/DefaultCommandLineActionFactory.java",
              "type": "",
              "code": "                    for (int i = keyValue.key.length(); i < maxKeyLength + 1; i++) {\n                        System.out.print(' ');\n                    }\n                    System.out.println(keyValue.value);\n                } else {\n                    System.out.println();\n                }"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "src",
              "startLine": 115,
              "startColumn": 13,
              "endLine": 115,
              "endColumn": 16,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "Object",
              "code": "    }\n\n    private static void appendDisplayName(Object src, StringBuilder stringBuilder) {\n        if (src instanceof Describable) {\n            Describable describable = (Describable) src;\n            stringBuilder.append(describable.getDisplayName());\n        } else {"
            },
            {
              "step": 1,
              "variableName": "src",
              "startLine": 119,
              "startColumn": 34,
              "endLine": 119,
              "endColumn": 37,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "Object",
              "code": "            Describable describable = (Describable) src;\n            stringBuilder.append(describable.getDisplayName());\n        } else {\n            stringBuilder.append(src.toString());\n        }\n    }\n"
            },
            {
              "step": 2,
              "variableName": "toString",
              "startLine": 397,
              "startColumn": 19,
              "endLine": 397,
              "endColumn": 27,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "TestFile",
              "code": "    }\n\n    @Override\n    public String toString() {\n        return getPath();\n    }\n"
            },
            {
              "step": 3,
              "variableName": "getPath()",
              "startLine": 398,
              "startColumn": 16,
              "endLine": 398,
              "endColumn": 25,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "TestFile",
              "code": "\n    @Override\n    public String toString() {\n        return getPath();\n    }\n\n    public TestFile writelns(Iterable<String> lines) {"
            },
            {
              "step": 4,
              "variableName": "getPath()",
              "startLine": 398,
              "startColumn": 16,
              "endLine": 398,
              "endColumn": 25,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "String",
              "code": "\n    @Override\n    public String toString() {\n        return getPath();\n    }\n\n    public TestFile writelns(Iterable<String> lines) {"
            },
            {
              "step": 5,
              "variableName": "src.toString()",
              "startLine": 119,
              "startColumn": 34,
              "endLine": 119,
              "endColumn": 48,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "String",
              "code": "            Describable describable = (Describable) src;\n            stringBuilder.append(describable.getDisplayName());\n        } else {\n            stringBuilder.append(src.toString());\n        }\n    }\n"
            },
            {
              "step": 6,
              "variableName": "stringBuilder",
              "startLine": 119,
              "startColumn": 13,
              "endLine": 119,
              "endColumn": 26,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "StringBuilder",
              "code": "            Describable describable = (Describable) src;\n            stringBuilder.append(describable.getDisplayName());\n        } else {\n            stringBuilder.append(src.toString());\n        }\n    }\n"
            },
            {
              "step": 7,
              "variableName": "builder",
              "startLine": 202,
              "startColumn": 38,
              "endLine": 202,
              "endColumn": 45,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "StringBuilder",
              "code": "            StringBuilder builder = new StringBuilder(48);\n            appendDisplayName(part1, builder);\n            builder.append(' ');\n            appendDisplayName(part2, builder);\n            return builder.toString();\n        }\n"
            },
            {
              "step": 8,
              "variableName": "builder",
              "startLine": 203,
              "startColumn": 20,
              "endLine": 203,
              "endColumn": 27,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "StringBuilder",
              "code": "            appendDisplayName(part1, builder);\n            builder.append(' ');\n            appendDisplayName(part2, builder);\n            return builder.toString();\n        }\n\n        @Override"
            },
            {
              "step": 9,
              "variableName": "builder.toString()",
              "startLine": 203,
              "startColumn": 20,
              "endLine": 203,
              "endColumn": 38,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "String",
              "code": "            appendDisplayName(part1, builder);\n            builder.append(' ');\n            appendDisplayName(part2, builder);\n            return builder.toString();\n        }\n\n        @Override"
            },
            {
              "step": 10,
              "variableName": "describable.getDisplayName()",
              "startLine": 313,
              "startColumn": 35,
              "endLine": 313,
              "endColumn": 63,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "String",
              "code": "        public String getDisplayName() {\n            synchronized (this) {\n                if (displayName == null) {\n                    displayName = describable.getDisplayName();\n                    if (capDisplayName != null || !(describable instanceof DisplayName)) {\n                        describable = null;\n                    }"
            },
            {
              "step": 11,
              "variableName": "displayName",
              "startLine": 318,
              "startColumn": 24,
              "endLine": 318,
              "endColumn": 35,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "String",
              "code": "                        describable = null;\n                    }\n                }\n                return displayName;\n            }\n        }\n    }"
            },
            {
              "step": 12,
              "variableName": "displayName.getDisplayName()",
              "startLine": 772,
              "startColumn": 73,
              "endLine": 772,
              "endColumn": 101,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/configurations/DefaultConfiguration.java",
              "type": "String",
              "code": "                try {\n                    results = resolver.resolveGraph(DefaultConfiguration.this);\n                } catch (Exception e) {\n                    throw exceptionMapper.mapFailure(e, \"dependencies\", displayName.getDisplayName());\n                }\n\n                // Make the new state visible in case a dependency resolution listener queries the result, which requires the new state"
            },
            {
              "step": 13,
              "variableName": "String contextDisplayName",
              "startLine": 68,
              "startColumn": 77,
              "endLine": 68,
              "endColumn": 102,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "String",
              "code": "        return mapFailure(failure, type, displayName);\n    }\n\n    public TypedResolveException mapFailure(Throwable failure, String type, String contextDisplayName) {\n        if (!(failure instanceof TypedResolveException)) {\n            return new TypedResolveException(\n                type,"
            },
            {
              "step": 14,
              "variableName": "contextDisplayName",
              "startLine": 72,
              "startColumn": 17,
              "endLine": 72,
              "endColumn": 35,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "String",
              "code": "        if (!(failure instanceof TypedResolveException)) {\n            return new TypedResolveException(\n                type,\n                contextDisplayName,\n                ImmutableList.of(mapRepositoryOverrideFailure(contextDisplayName, failure))\n            );\n        }"
            },
            {
              "step": 15,
              "variableName": "new TypedResolveException(...) : TypedResolveException",
              "startLine": 70,
              "startColumn": 20,
              "endLine": 74,
              "endColumn": 14,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "TypedResolveException",
              "code": "\n    public TypedResolveException mapFailure(Throwable failure, String type, String contextDisplayName) {\n        if (!(failure instanceof TypedResolveException)) {\n            return new TypedResolveException(\n                type,\n                contextDisplayName,\n                ImmutableList.of(mapRepositoryOverrideFailure(contextDisplayName, failure))"
            },
            {
              "step": 16,
              "variableName": "exceptionMapper.mapFailure(e, \"dependencies\", displayName.getDisplayName())",
              "startLine": 772,
              "startColumn": 27,
              "endLine": 772,
              "endColumn": 102,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/configurations/DefaultConfiguration.java",
              "type": "TypedResolveException",
              "code": "                try {\n                    results = resolver.resolveGraph(DefaultConfiguration.this);\n                } catch (Exception e) {\n                    throw exceptionMapper.mapFailure(e, \"dependencies\", displayName.getDisplayName());\n                }\n\n                // Make the new state visible in case a dependency resolution listener queries the result, which requires the new state"
            },
            {
              "step": 17,
              "variableName": "e",
              "startLine": 772,
              "startColumn": 54,
              "endLine": 772,
              "endColumn": 55,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/configurations/DefaultConfiguration.java",
              "type": "Exception",
              "code": "                try {\n                    results = resolver.resolveGraph(DefaultConfiguration.this);\n                } catch (Exception e) {\n                    throw exceptionMapper.mapFailure(e, \"dependencies\", displayName.getDisplayName());\n                }\n\n                // Make the new state visible in case a dependency resolution listener queries the result, which requires the new state"
            },
            {
              "step": 18,
              "variableName": "Throwable failure",
              "startLine": 68,
              "startColumn": 45,
              "endLine": 68,
              "endColumn": 62,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Throwable",
              "code": "        return mapFailure(failure, type, displayName);\n    }\n\n    public TypedResolveException mapFailure(Throwable failure, String type, String contextDisplayName) {\n        if (!(failure instanceof TypedResolveException)) {\n            return new TypedResolveException(\n                type,"
            },
            {
              "step": 19,
              "variableName": "failure",
              "startLine": 73,
              "startColumn": 83,
              "endLine": 73,
              "endColumn": 90,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Throwable",
              "code": "            return new TypedResolveException(\n                type,\n                contextDisplayName,\n                ImmutableList.of(mapRepositoryOverrideFailure(contextDisplayName, failure))\n            );\n        }\n"
            },
            {
              "step": 20,
              "variableName": "Throwable failure",
              "startLine": 94,
              "startColumn": 78,
              "endLine": 94,
              "endColumn": 95,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Throwable",
              "code": "\n    // TODO: We should handle this exception at the source instead of using instanceof to detect it after it is thrown.\n    //       We should try to avoid catching and analyzing runtime exceptions\n    public Throwable mapRepositoryOverrideFailure(String contextDisplayName, Throwable failure) {\n        if (!(failure instanceof ModuleVersionNotFoundException) || !settingsRepositoriesIgnored()) {\n            return failure;\n        }"
            },
            {
              "step": 21,
              "variableName": "failure",
              "startLine": 108,
              "startColumn": 35,
              "endLine": 108,
              "endColumn": 42,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Throwable",
              "code": "        return new TypedResolveException(\n            \"dependencies\",\n            contextDisplayName,\n            Collections.singleton(failure),\n            resolutions\n        );\n    }"
            },
            {
              "step": 22,
              "variableName": "Collections.singleton(failure)",
              "startLine": 108,
              "startColumn": 13,
              "endLine": 108,
              "endColumn": 43,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Set [<element>] : Throwable",
              "code": "        return new TypedResolveException(\n            \"dependencies\",\n            contextDisplayName,\n            Collections.singleton(failure),\n            resolutions\n        );\n    }"
            },
            {
              "step": 23,
              "variableName": "Collections.singleton(failure)",
              "startLine": 108,
              "startColumn": 13,
              "endLine": 108,
              "endColumn": 43,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Set",
              "code": "        return new TypedResolveException(\n            \"dependencies\",\n            contextDisplayName,\n            Collections.singleton(failure),\n            resolutions\n        );\n    }"
            },
            {
              "step": 24,
              "variableName": "Iterable<? extends Throwable> failures",
              "startLine": 42,
              "startColumn": 67,
              "endLine": 42,
              "endColumn": 105,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ivyservice/TypedResolveException.java",
              "type": "Set",
              "code": "    /**\n     * Creates a new instance with resolutions.\n     */\n    public TypedResolveException(String type, String displayName, Iterable<? extends Throwable> failures, List<String> resolutions) {\n        super(buildMessage(type, displayName), failures, false);\n        this.type = type;\n        this.resolutions = ImmutableList.copyOf(resolutions);"
            },
            {
              "step": 25,
              "variableName": "failures",
              "startLine": 43,
              "startColumn": 48,
              "endLine": 43,
              "endColumn": 56,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ivyservice/TypedResolveException.java",
              "type": "Set",
              "code": "     * Creates a new instance with resolutions.\n     */\n    public TypedResolveException(String type, String displayName, Iterable<? extends Throwable> failures, List<String> resolutions) {\n        super(buildMessage(type, displayName), failures, false);\n        this.type = type;\n        this.resolutions = ImmutableList.copyOf(resolutions);\n    }"
            },
            {
              "step": 26,
              "variableName": "Iterable<? extends Throwable> causes",
              "startLine": 77,
              "startColumn": 48,
              "endLine": 77,
              "endColumn": 84,
              "uri": "gradle-8.14.0/subprojects/core-api/src/main/java/org/gradle/api/artifacts/ResolveException.java",
              "type": "Set",
              "code": "     * @since 8.9\n     */\n    @Incubating\n    protected ResolveException(String message, Iterable<? extends Throwable> causes, @SuppressWarnings(\"unused\") boolean dummy) {\n        super(message, causes);\n    }\n}"
            },
            {
              "step": 27,
              "variableName": "causes",
              "startLine": 78,
              "startColumn": 24,
              "endLine": 78,
              "endColumn": 30,
              "uri": "gradle-8.14.0/subprojects/core-api/src/main/java/org/gradle/api/artifacts/ResolveException.java",
              "type": "Set",
              "code": "     */\n    @Incubating\n    protected ResolveException(String message, Iterable<? extends Throwable> causes, @SuppressWarnings(\"unused\") boolean dummy) {\n        super(message, causes);\n    }\n}\n"
            },
            {
              "step": 28,
              "variableName": "Iterable<? extends Throwable> causes",
              "startLine": 47,
              "startColumn": 55,
              "endLine": 47,
              "endColumn": 91,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "Set",
              "code": "        this.causes.addAll(Arrays.asList(causes));\n    }\n\n    public DefaultMultiCauseException(String message, Iterable<? extends Throwable> causes) {\n        super(message);\n        this.message = message;\n        initCauses(causes);"
            },
            {
              "step": 29,
              "variableName": "causes",
              "startLine": 50,
              "startColumn": 20,
              "endLine": 50,
              "endColumn": 26,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "Set",
              "code": "    public DefaultMultiCauseException(String message, Iterable<? extends Throwable> causes) {\n        super(message);\n        this.message = message;\n        initCauses(causes);\n    }\n\n    public DefaultMultiCauseException(Factory<String> messageFactory) {"
            },
            {
              "step": 30,
              "variableName": "Iterable<? extends Throwable> causes",
              "startLine": 112,
              "startColumn": 28,
              "endLine": 112,
              "endColumn": 64,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "Iterable",
              "code": "        return null;\n    }\n\n    public void initCauses(Iterable<? extends Throwable> causes) {\n        this.causes.clear();\n        for (Throwable cause : causes) {\n            this.causes.add(cause);"
            },
            {
              "step": 31,
              "variableName": "cause",
              "startLine": 115,
              "startColumn": 29,
              "endLine": 115,
              "endColumn": 34,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "Throwable",
              "code": "    public void initCauses(Iterable<? extends Throwable> causes) {\n        this.causes.clear();\n        for (Throwable cause : causes) {\n            this.causes.add(cause);\n        }\n    }\n"
            },
            {
              "step": 32,
              "variableName": "this.causes",
              "startLine": 115,
              "startColumn": 13,
              "endLine": 115,
              "endColumn": 24,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "CopyOnWriteArrayList [<element>] : Throwable",
              "code": "    public void initCauses(Iterable<? extends Throwable> causes) {\n        this.causes.clear();\n        for (Throwable cause : causes) {\n            this.causes.add(cause);\n        }\n    }\n"
            },
            {
              "step": 33,
              "variableName": "this",
              "startLine": 115,
              "startColumn": 13,
              "endLine": 115,
              "endColumn": 17,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "DefaultMultiCauseException [causes, <element>] : Throwable",
              "code": "    public void initCauses(Iterable<? extends Throwable> causes) {\n        this.causes.clear();\n        for (Throwable cause : causes) {\n            this.causes.add(cause);\n        }\n    }\n"
            },
            {
              "step": 34,
              "variableName": "projectConfigurationException",
              "startLine": 57,
              "startColumn": 17,
              "endLine": 57,
              "endColumn": 46,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/DefaultExceptionAnalyser.java",
              "type": "ProjectConfigurationException [causes, <element>] : Throwable",
              "code": "                }\n            }\n            if (!additionalFailures.isEmpty()) {\n                projectConfigurationException.initCauses(additionalFailures);\n                failures.add(transform(projectConfigurationException));\n            }\n        } else if (exception instanceof ServiceCreationException) {"
            },
            {
              "step": 35,
              "variableName": "projectConfigurationException",
              "startLine": 58,
              "startColumn": 40,
              "endLine": 58,
              "endColumn": 69,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/DefaultExceptionAnalyser.java",
              "type": "ProjectConfigurationException [causes, <element>] : Throwable",
              "code": "            }\n            if (!additionalFailures.isEmpty()) {\n                projectConfigurationException.initCauses(additionalFailures);\n                failures.add(transform(projectConfigurationException));\n            }\n        } else if (exception instanceof ServiceCreationException) {\n            failures.add(transform(new InitializationException(exception)));"
            },
            {
              "step": 36,
              "variableName": "transform(projectConfigurationException)",
              "startLine": 58,
              "startColumn": 30,
              "endLine": 58,
              "endColumn": 70,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/DefaultExceptionAnalyser.java",
              "type": "LocationAwareException",
              "code": "            }\n            if (!additionalFailures.isEmpty()) {\n                projectConfigurationException.initCauses(additionalFailures);\n                failures.add(transform(projectConfigurationException));\n            }\n        } else if (exception instanceof ServiceCreationException) {\n            failures.add(transform(new InitializationException(exception)));"
            },
            {
              "step": 37,
              "variableName": "failures",
              "startLine": 58,
              "startColumn": 17,
              "endLine": 58,
              "endColumn": 25,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/DefaultExceptionAnalyser.java",
              "type": "Collection [<element>] : LocationAwareException",
              "code": "            }\n            if (!additionalFailures.isEmpty()) {\n                projectConfigurationException.initCauses(additionalFailures);\n                failures.add(transform(projectConfigurationException));\n            }\n        } else if (exception instanceof ServiceCreationException) {\n            failures.add(transform(new InitializationException(exception)));"
            },
            {
              "step": 38,
              "variableName": "result",
              "startLine": 53,
              "startColumn": 54,
              "endLine": 53,
              "endColumn": 60,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/MultipleBuildFailuresExceptionAnalyser.java",
              "type": "ArrayList [<element>] : LocationAwareException",
              "code": "        for (Throwable failure : failures) {\n            if (failure instanceof MultipleBuildFailures) {\n                for (Throwable cause : ((MultipleBuildFailures) failure).getCauses()) {\n                    collector.collectFailures(cause, result);\n                }\n            } else {\n                collector.collectFailures(failure, result);"
            },
            {
              "step": 39,
              "variableName": "result",
              "startLine": 60,
              "startColumn": 39,
              "endLine": 60,
              "endColumn": 45,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/MultipleBuildFailuresExceptionAnalyser.java",
              "type": "ArrayList [<element>] : LocationAwareException",
              "code": "            }\n        }\n        if (result.size() == 1 && result.get(0) instanceof RuntimeException) {\n            return (RuntimeException) result.get(0);\n        } else {\n            return new MultipleBuildFailures(result);\n        }"
            },
            {
              "step": 40,
              "variableName": "result.get(0)",
              "startLine": 60,
              "startColumn": 39,
              "endLine": 60,
              "endColumn": 52,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/MultipleBuildFailuresExceptionAnalyser.java",
              "type": "LocationAwareException",
              "code": "            }\n        }\n        if (result.size() == 1 && result.get(0) instanceof RuntimeException) {\n            return (RuntimeException) result.get(0);\n        } else {\n            return new MultipleBuildFailures(result);\n        }"
            },
            {
              "step": 41,
              "variableName": "(RuntimeException) result.get(0)",
              "startLine": 60,
              "startColumn": 20,
              "endLine": 60,
              "endColumn": 52,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/MultipleBuildFailuresExceptionAnalyser.java",
              "type": "LocationAwareException",
              "code": "            }\n        }\n        if (result.size() == 1 && result.get(0) instanceof RuntimeException) {\n            return (RuntimeException) result.get(0);\n        } else {\n            return new MultipleBuildFailures(result);\n        }"
            },
            {
              "step": 42,
              "variableName": "exceptionAnalyser.transform(finishFailures)",
              "startLine": 72,
              "startColumn": 16,
              "endLine": 72,
              "endColumn": 59,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/internal/buildtree/DefaultBuildTreeFinishExecutor.java",
              "type": "LocationAwareException",
              "code": "            finishFailures.addAll(result.getFailures());\n        });\n\n        return exceptionAnalyser.transform(finishFailures);\n    }\n}\n"
            },
            {
              "step": 43,
              "variableName": "delegate.finishBuildTree(failures)",
              "startLine": 46,
              "startColumn": 28,
              "endLine": 46,
              "endColumn": 62,
              "uri": "gradle-8.14.0/subprojects/composite-builds/src/main/java/org/gradle/composite/internal/OperationFiringBuildTreeFinishExecutor.java",
              "type": "LocationAwareException",
              "code": "            @Override\n            public RuntimeException call(BuildOperationContext context) {\n                try {\n                    return delegate.finishBuildTree(failures);\n                } finally {\n                    context.setResult(RESULT);\n                }"
            },
            {
              "step": 44,
              "variableName": "buildOperation.call(context)",
              "startLine": 239,
              "startColumn": 21,
              "endLine": 239,
              "endColumn": 49,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/testFixtures/java/org/gradle/internal/operations/TestBuildOperationRunner.java",
              "type": "LocationAwareException",
              "code": "            TestBuildOperationContext context = new TestBuildOperationContext(record);\n            T t;\n            try {\n                t = buildOperation.call(context);\n            } catch (Throwable failure) {\n                if (record.failure == null) {\n                    record.failure = failure;"
            },
            {
              "step": 45,
              "variableName": "t",
              "startLine": 246,
              "startColumn": 20,
              "endLine": 246,
              "endColumn": 21,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/testFixtures/java/org/gradle/internal/operations/TestBuildOperationRunner.java",
              "type": "LocationAwareException",
              "code": "                }\n                throw throwAsUncheckedException(failure);\n            }\n            return t;\n        }\n\n        private <O extends BuildOperation> void execute(O buildOperation, BuildOperationWorker<O> worker) {"
            },
            {
              "step": 46,
              "variableName": "log.call(buildOperation)",
              "startLine": 51,
              "startColumn": 16,
              "endLine": 51,
              "endColumn": 40,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/testFixtures/java/org/gradle/internal/operations/TestBuildOperationRunner.java",
              "type": "LocationAwareException",
              "code": "\n    @Override\n    public <T> T call(CallableBuildOperation<T> buildOperation) {\n        return log.call(buildOperation);\n    }\n\n    @Override"
            },
            {
              "step": 47,
              "variableName": "ca",
              "startLine": 115,
              "startColumn": 5,
              "endLine": 121,
              "endColumn": 7,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/configurationcache/ConfigurationCacheBuildOperations.kt",
              "type": "LocationAwareException",
              "code": "\ninternal\nfun <T : Any> BuildOperationRunner.withModelLoadOperation(block: () -> T): T =\n    call(object : CallableBuildOperation<T> {\n        override fun description(): BuildOperationDescriptor.Builder = BuildOperationDescriptor\n            .displayName(\"Load model from configuration cache\")\n            .progressDisplayName(\"Loading model from configuration cache\")"
            },
            {
              "step": 48,
              "variableName": "ca",
              "startLine": 115,
              "startColumn": 5,
              "endLine": 121,
              "endColumn": 7,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/configurationcache/ConfigurationCacheBuildOperations.kt",
              "type": "LocationAwareException",
              "code": "\ninternal\nfun <T : Any> BuildOperationRunner.withModelLoadOperation(block: () -> T): T =\n    call(object : CallableBuildOperation<T> {\n        override fun description(): BuildOperationDescriptor.Builder = BuildOperationDescriptor\n            .displayName(\"Load model from configuration cache\")\n            .progressDisplayName(\"Loading model from configuration cache\")"
            },
            {
              "step": 49,
              "variableName": "b",
              "startLine": 635,
              "startColumn": 9,
              "endLine": 641,
              "endColumn": 10,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "        // No need to record the `ClassLoaderScope` tree when loading\n        scopeRegistryListener.dispose()\n\n        buildOperationRunner.withModelLoadOperation {\n            val storeLoadResult = entryStore.useForStateLoad(StateType.Model) { stateFile: ConfigurationCacheStateFile ->\n                cacheIO.readModelFrom(stateFile)\n            }"
            },
            {
              "step": 50,
              "variableName": "block()",
              "startLine": 668,
              "startColumn": 22,
              "endLine": 668,
              "endColumn": 29,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "    private\n    inline fun <T> runAtConfigurationTime(block: () -> T): T {\n        prepareConfigurationTimeBarrier()\n        val result = block()\n        crossConfigurationTimeBarrier()\n        return result\n    }"
            },
            {
              "step": 51,
              "variableName": "result",
              "startLine": 670,
              "startColumn": 16,
              "endLine": 670,
              "endColumn": 22,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "        prepareConfigurationTimeBarrier()\n        val result = block()\n        crossConfigurationTimeBarrier()\n        return result\n    }\n\n    private"
            },
            {
              "step": 52,
              "variableName": "runAtConfigurationTime(...) : LocationAwareException",
              "startLine": 631,
              "startColumn": 28,
              "endLine": 642,
              "endColumn": 6,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "    data class LoadResultMetadata(val originInvocationId: String? = null)\n\n    private\n    fun loadModel(): Any = runAtConfigurationTime {\n        // No need to record the `ClassLoaderScope` tree when loading\n        scopeRegistryListener.dispose()\n"
            },
            {
              "step": 53,
              "variableName": "loadModel()",
              "startLine": 268,
              "startColumn": 20,
              "endLine": 268,
              "endColumn": 31,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "    override fun <T : Any> loadOrCreateModel(creator: () -> T): T {\n        if (isLoaded) {\n            runLoadedSideEffects()\n            return loadModel().uncheckedCast()\n        }\n\n        return runWorkThatContributesToCacheEntry {"
            },
            {
              "step": 54,
              "variableName": "Any",
              "startLine": 22,
              "startColumn": 15,
              "endLine": 22,
              "endColumn": 18,
              "uri": "gradle-8.14.0/platforms/core-configuration/stdlib-kotlin-extensions/src/main/kotlin/org/gradle/internal/extensions/stdlib/CastExtensions.kt",
              "type": "Object",
              "code": "import org.gradle.internal.Cast\n\n\nfun <T : Any> Any.uncheckedCast(): T =\n    Cast.uncheckedNonnullCast(this)\n"
            },
            {
              "step": 55,
              "variableName": "this",
              "startLine": 23,
              "startColumn": 31,
              "endLine": 23,
              "endColumn": 35,
              "uri": "gradle-8.14.0/platforms/core-configuration/stdlib-kotlin-extensions/src/main/kotlin/org/gradle/internal/extensions/stdlib/CastExtensions.kt",
              "type": "Object",
              "code": "\n\nfun <T : Any> Any.uncheckedCast(): T =\n    Cast.uncheckedNonnullCast(this)\n"
            },
            {
              "step": 56,
              "variableName": "Object object",
              "startLine": 76,
              "startColumn": 46,
              "endLine": 76,
              "endColumn": 59,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/Cast.java",
              "type": "Object",
              "code": "    }\n\n    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})\n    public static <T> T uncheckedNonnullCast(Object object) {\n        return (T) object;\n    }\n}"
            },
            {
              "step": 57,
              "variableName": "(T) object",
              "startLine": 77,
              "startColumn": 16,
              "endLine": 77,
              "endColumn": 26,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/Cast.java",
              "type": "Object",
              "code": "\n    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})\n    public static <T> T uncheckedNonnullCast(Object object) {\n        return (T) object;\n    }\n}\n"
            },
            {
              "step": 58,
              "variableName": "Cast.uncheckedNonnullCast(defaultValue)",
              "startLine": 112,
              "startColumn": 73,
              "endLine": 112,
              "endColumn": 112,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/api/internal/provider/AbstractMinimalProvider.java",
              "type": "Object",
              "code": "\n    @Override\n    public T getOrElse(T defaultValue) {\n        return calculateOwnValue(ValueConsumer.IgnoreUnsafeRead).orElse(Cast.uncheckedNonnullCast(defaultValue));\n    }\n\n    @Override"
            },
            {
              "step": 59,
              "variableName": "T defaultValue",
              "startLine": 610,
              "startColumn": 25,
              "endLine": 610,
              "endColumn": 39,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/api/internal/provider/ValueSupplier.java",
              "type": "Object",
              "code": "        }\n\n        @Override\n        public T orElse(T defaultValue) {\n            return defaultValue;\n        }\n"
            },
            {
              "step": 60,
              "variableName": "defaultValue",
              "startLine": 611,
              "startColumn": 20,
              "endLine": 611,
              "endColumn": 32,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/api/internal/provider/ValueSupplier.java",
              "type": "Object",
              "code": "\n        @Override\n        public T orElse(T defaultValue) {\n            return defaultValue;\n        }\n\n        @Override"
            },
            {
              "step": 61,
              "variableName": "calculateOwnValue(ValueConsumer.IgnoreUnsafeRead).orElse(Cast.uncheckedNonnullCast(defaultValue))",
              "startLine": 112,
              "startColumn": 16,
              "endLine": 112,
              "endColumn": 113,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/api/internal/provider/AbstractMinimalProvider.java",
              "type": "Object",
              "code": "\n    @Override\n    public T getOrElse(T defaultValue) {\n        return calculateOwnValue(ValueConsumer.IgnoreUnsafeRead).orElse(Cast.uncheckedNonnullCast(defaultValue));\n    }\n\n    @Override"
            },
            {
              "step": 62,
              "variableName": "getNativeImageCapable().getOrElse(false)",
              "startLine": 105,
              "startColumn": 13,
              "endLine": 105,
              "endColumn": 53,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-configuration/src/main/java/org/gradle/buildconfiguration/tasks/UpdateDaemonJvm.java",
              "type": "Boolean",
              "code": "            getPropertiesFile().get().getAsFile(),\n            getLanguageVersion().get(),\n            jvmVendorCriteria,\n            getNativeImageCapable().getOrElse(false),\n            getToolchainDownloadUrls().get()\n        );\n    }"
            },
            {
              "step": 63,
              "variableName": "File propertiesFile",
              "startLine": 45,
              "startColumn": 9,
              "endLine": 45,
              "endColumn": 28,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-configuration/src/main/java/org/gradle/internal/buildconfiguration/tasks/DaemonJvmPropertiesModifier.java",
              "type": "File",
              "code": "    }\n\n    public void updateJvmCriteria(\n        File propertiesFile,\n        JavaLanguageVersion toolchainVersion,\n        @Nullable String toolchainVendor,\n        boolean nativeImageCapable,"
            },
            {
              "step": 64,
              "variableName": "propertiesFile",
              "startLine": 67,
              "startColumn": 33,
              "endLine": 67,
              "endColumn": 47,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-configuration/src/main/java/org/gradle/internal/buildconfiguration/tasks/DaemonJvmPropertiesModifier.java",
              "type": "File",
              "code": "            daemonJvmProperties.put(toolchainUrlProperty, uri.toString());\n        });\n\n        GFileUtils.parentMkdirs(propertiesFile);\n        try {\n            PropertiesUtils.store(daemonJvmProperties, propertiesFile, \"This file is generated by \" + DaemonJvmPropertiesConfigurator.TASK_NAME);\n        } catch (IOException e) {"
            },
            {
              "step": 65,
              "variableName": "File child",
              "startLine": 241,
              "startColumn": 37,
              "endLine": 241,
              "endColumn": 47,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/util/internal/GFileUtils.java",
              "type": "File",
              "code": "     * @return The parent dir file\n     * @see #mkdirs(java.io.File)\n     */\n    public static File parentMkdirs(File child) {\n        File parent = child.getParentFile();\n        mkdirs(parent);\n        return parent;"
            },
            {
              "step": 66,
              "variableName": "child",
              "startLine": 242,
              "startColumn": 23,
              "endLine": 242,
              "endColumn": 28,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/util/internal/GFileUtils.java",
              "type": "File",
              "code": "     * @see #mkdirs(java.io.File)\n     */\n    public static File parentMkdirs(File child) {\n        File parent = child.getParentFile();\n        mkdirs(parent);\n        return parent;\n    }"
            },
            {
              "step": 67,
              "variableName": "getParentFile",
              "startLine": 392,
              "startColumn": 21,
              "endLine": 392,
              "endColumn": 34,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "TestFile",
              "code": "    }\n\n    @Override\n    public TestFile getParentFile() {\n        return super.getParentFile() == null ? null : new TestFile(super.getParentFile());\n    }\n"
            },
            {
              "step": 68,
              "variableName": "super",
              "startLine": 393,
              "startColumn": 68,
              "endLine": 393,
              "endColumn": 73,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "TestFile",
              "code": "\n    @Override\n    public TestFile getParentFile() {\n        return super.getParentFile() == null ? null : new TestFile(super.getParentFile());\n    }\n\n    @Override"
            },
            {
              "step": 69,
              "variableName": "super.getParentFile()",
              "startLine": 393,
              "startColumn": 68,
              "endLine": 393,
              "endColumn": 89,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "File",
              "code": "\n    @Override\n    public TestFile getParentFile() {\n        return super.getParentFile() == null ? null : new TestFile(super.getParentFile());\n    }\n\n    @Override"
            },
            {
              "step": 70,
              "variableName": "File file",
              "startLine": 77,
              "startColumn": 21,
              "endLine": 77,
              "endColumn": 30,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "File",
              "code": "    private boolean useNativeTools;\n    private final File relativeBase;\n\n    public TestFile(File file, Object... path) {\n        super(join(file, path).getAbsolutePath());\n        this.relativeBase = file;\n    }"
            },
            {
              "step": 71,
              "variableName": "file",
              "startLine": 78,
              "startColumn": 20,
              "endLine": 78,
              "endColumn": 24,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "File",
              "code": "    private final File relativeBase;\n\n    public TestFile(File file, Object... path) {\n        super(join(file, path).getAbsolutePath());\n        this.relativeBase = file;\n    }\n"
            },
            {
              "step": 72,
              "variableName": "File file",
              "startLine": 126,
              "startColumn": 30,
              "endLine": 126,
              "endColumn": 39,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "File",
              "code": "        }\n    }\n\n    private static File join(File file, Object[] path) {\n        File current = file.getAbsoluteFile();\n        for (Object p : path) {\n            current = new File(current, p.toString());"
            },
            {
              "step": 73,
              "variableName": "file",
              "startLine": 127,
              "startColumn": 24,
              "endLine": 127,
              "endColumn": 28,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "File",
              "code": "    }\n\n    private static File join(File file, Object[] path) {\n        File current = file.getAbsoluteFile();\n        for (Object p : path) {\n            current = new File(current, p.toString());\n        }"
            },
            {
              "step": 74,
              "variableName": "file.getAbsoluteFile()",
              "startLine": 127,
              "startColumn": 24,
              "endLine": 127,
              "endColumn": 46,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "File",
              "code": "    }\n\n    private static File join(File file, Object[] path) {\n        File current = file.getAbsoluteFile();\n        for (Object p : path) {\n            current = new File(current, p.toString());\n        }"
            },
            {
              "step": 75,
              "variableName": "current",
              "startLine": 132,
              "startColumn": 20,
              "endLine": 132,
              "endColumn": 27,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "File",
              "code": "            current = new File(current, p.toString());\n        }\n        try {\n            return current.getCanonicalFile();\n        } catch (IOException e) {\n            throw new RuntimeException(String.format(\"Could not canonicalise '%s'.\", current), e);\n        }"
            },
            {
              "step": 76,
              "variableName": "getCanonicalFile",
              "startLine": 109,
              "startColumn": 17,
              "endLine": 109,
              "endColumn": 33,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "TestFile",
              "code": "    }\n\n    @Override\n    public File getCanonicalFile() throws IOException {\n        return new File(getAbsolutePath()).getCanonicalFile();\n    }\n"
            },
            {
              "step": 77,
              "variableName": "getAbsolutePath()",
              "startLine": 110,
              "startColumn": 25,
              "endLine": 110,
              "endColumn": 42,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "TestFile",
              "code": "\n    @Override\n    public File getCanonicalFile() throws IOException {\n        return new File(getAbsolutePath()).getCanonicalFile();\n    }\n\n    @Override"
            },
            {
              "step": 78,
              "variableName": "getAbsolutePath()",
              "startLine": 110,
              "startColumn": 25,
              "endLine": 110,
              "endColumn": 42,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "String",
              "code": "\n    @Override\n    public File getCanonicalFile() throws IOException {\n        return new File(getAbsolutePath()).getCanonicalFile();\n    }\n\n    @Override"
            },
            {
              "step": 79,
              "variableName": "new File(getAbsolutePath())",
              "startLine": 110,
              "startColumn": 16,
              "endLine": 110,
              "endColumn": 43,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "File",
              "code": "\n    @Override\n    public File getCanonicalFile() throws IOException {\n        return new File(getAbsolutePath()).getCanonicalFile();\n    }\n\n    @Override"
            },
            {
              "step": 80,
              "variableName": "new File(getAbsolutePath()).getCanonicalFile()",
              "startLine": 110,
              "startColumn": 16,
              "endLine": 110,
              "endColumn": 62,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "File",
              "code": "\n    @Override\n    public File getCanonicalFile() throws IOException {\n        return new File(getAbsolutePath()).getCanonicalFile();\n    }\n\n    @Override"
            },
            {
              "step": 81,
              "variableName": "current.getCanonicalFile()",
              "startLine": 132,
              "startColumn": 20,
              "endLine": 132,
              "endColumn": 46,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "File",
              "code": "            current = new File(current, p.toString());\n        }\n        try {\n            return current.getCanonicalFile();\n        } catch (IOException e) {\n            throw new RuntimeException(String.format(\"Could not canonicalise '%s'.\", current), e);\n        }"
            },
            {
              "step": 82,
              "variableName": "join(file, path)",
              "startLine": 78,
              "startColumn": 15,
              "endLine": 78,
              "endColumn": 31,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "File",
              "code": "    private final File relativeBase;\n\n    public TestFile(File file, Object... path) {\n        super(join(file, path).getAbsolutePath());\n        this.relativeBase = file;\n    }\n"
            },
            {
              "step": 83,
              "variableName": "join(file, path).getAbsolutePath()",
              "startLine": 78,
              "startColumn": 15,
              "endLine": 78,
              "endColumn": 49,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "String",
              "code": "    private final File relativeBase;\n\n    public TestFile(File file, Object... path) {\n        super(join(file, path).getAbsolutePath());\n        this.relativeBase = file;\n    }\n"
            },
            {
              "step": 84,
              "variableName": "super(join(file, path).getAbsolutePath());",
              "startLine": 78,
              "startColumn": 9,
              "endLine": 78,
              "endColumn": 51,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "TestFile",
              "code": "    private final File relativeBase;\n\n    public TestFile(File file, Object... path) {\n        super(join(file, path).getAbsolutePath());\n        this.relativeBase = file;\n    }\n"
            },
            {
              "step": 85,
              "variableName": "new TestFile(child)",
              "startLine": 210,
              "startColumn": 24,
              "endLine": 210,
              "endColumn": 43,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "TestFile",
              "code": "        TestFile[] files = new TestFile[children.length];\n        for (int i = 0; i < children.length; i++) {\n            File child = children[i];\n            files[i] = new TestFile(child);\n        }\n        return files;\n    }"
            },
            {
              "step": 86,
              "variableName": "files",
              "startLine": 210,
              "startColumn": 13,
              "endLine": 210,
              "endColumn": 18,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "TestFile[] [[]] : TestFile",
              "code": "        TestFile[] files = new TestFile[children.length];\n        for (int i = 0; i < children.length; i++) {\n            File child = children[i];\n            files[i] = new TestFile(child);\n        }\n        return files;\n    }"
            },
            {
              "step": 87,
              "variableName": "files",
              "startLine": 212,
              "startColumn": 16,
              "endLine": 212,
              "endColumn": 21,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "TestFile[] [[]] : TestFile",
              "code": "            File child = children[i];\n            files[i] = new TestFile(child);\n        }\n        return files;\n    }\n\n    public String getText() {"
            },
            {
              "step": 88,
              "variableName": "asFile.listFiles()",
              "startLine": 44,
              "startColumn": 30,
              "endLine": 44,
              "endColumn": 48,
              "uri": "gradle-8.14.0/build-logic/cleanup/src/main/kotlin/gradlebuild/cleanup/Cleanup.kt",
              "type": "TestFile[] [[]] : TestFile",
              "code": "@Suppress(\"LoopWithTooManyJumpStatements\")\nfun FileSystemOperations.removeOldVersionsFromDir(dir: Directory, shouldDelete: Spec<GradleVersion>, dirPrefix: String = \"\", dirSuffix: String = \"\") {\n    if (dir.asFile.isDirectory) {\n        for (cacheDir in dir.asFile.listFiles()) {\n            val cacheDirName = cacheDir.name\n            if (!cacheDirName.startsWith(dirPrefix) || !cacheDirName.endsWith(dirSuffix)) {\n                continue"
            },
            {
              "step": 89,
              "variableName": "listFiles()",
              "startLine": 44,
              "startColumn": 37,
              "endLine": 44,
              "endColumn": 48,
              "uri": "gradle-8.14.0/build-logic/cleanup/src/main/kotlin/gradlebuild/cleanup/Cleanup.kt",
              "type": "TestFile[] [[]] : TestFile",
              "code": "@Suppress(\"LoopWithTooManyJumpStatements\")\nfun FileSystemOperations.removeOldVersionsFromDir(dir: Directory, shouldDelete: Spec<GradleVersion>, dirPrefix: String = \"\", dirSuffix: String = \"\") {\n    if (dir.asFile.isDirectory) {\n        for (cacheDir in dir.asFile.listFiles()) {\n            val cacheDirName = cacheDir.name\n            if (!cacheDirName.startsWith(dirPrefix) || !cacheDirName.endsWith(dirSuffix)) {\n                continue"
            },
            {
              "step": 90,
              "variableName": "listFiles()",
              "startLine": 44,
              "startColumn": 37,
              "endLine": 44,
              "endColumn": 48,
              "uri": "gradle-8.14.0/build-logic/cleanup/src/main/kotlin/gradlebuild/cleanup/Cleanup.kt",
              "type": "TestFile[] [[]] : TestFile",
              "code": "@Suppress(\"LoopWithTooManyJumpStatements\")\nfun FileSystemOperations.removeOldVersionsFromDir(dir: Directory, shouldDelete: Spec<GradleVersion>, dirPrefix: String = \"\", dirSuffix: String = \"\") {\n    if (dir.asFile.isDirectory) {\n        for (cacheDir in dir.asFile.listFiles()) {\n            val cacheDirName = cacheDir.name\n            if (!cacheDirName.startsWith(dirPrefix) || !cacheDirName.endsWith(dirSuffix)) {\n                continue"
            },
            {
              "step": 91,
              "variableName": "cacheDir",
              "startLine": 45,
              "startColumn": 32,
              "endLine": 45,
              "endColumn": 40,
              "uri": "gradle-8.14.0/build-logic/cleanup/src/main/kotlin/gradlebuild/cleanup/Cleanup.kt",
              "type": "TestFile",
              "code": "fun FileSystemOperations.removeOldVersionsFromDir(dir: Directory, shouldDelete: Spec<GradleVersion>, dirPrefix: String = \"\", dirSuffix: String = \"\") {\n    if (dir.asFile.isDirectory) {\n        for (cacheDir in dir.asFile.listFiles()) {\n            val cacheDirName = cacheDir.name\n            if (!cacheDirName.startsWith(dirPrefix) || !cacheDirName.endsWith(dirSuffix)) {\n                continue\n            }"
            },
            {
              "step": 92,
              "variableName": "cacheDir",
              "startLine": 45,
              "startColumn": 32,
              "endLine": 45,
              "endColumn": 40,
              "uri": "gradle-8.14.0/build-logic/cleanup/src/main/kotlin/gradlebuild/cleanup/Cleanup.kt",
              "type": "TestFile",
              "code": "fun FileSystemOperations.removeOldVersionsFromDir(dir: Directory, shouldDelete: Spec<GradleVersion>, dirPrefix: String = \"\", dirSuffix: String = \"\") {\n    if (dir.asFile.isDirectory) {\n        for (cacheDir in dir.asFile.listFiles()) {\n            val cacheDirName = cacheDir.name\n            if (!cacheDirName.startsWith(dirPrefix) || !cacheDirName.endsWith(dirSuffix)) {\n                continue\n            }"
            },
            {
              "step": 93,
              "variableName": "cacheDir.name",
              "startLine": 45,
              "startColumn": 32,
              "endLine": 45,
              "endColumn": 45,
              "uri": "gradle-8.14.0/build-logic/cleanup/src/main/kotlin/gradlebuild/cleanup/Cleanup.kt",
              "type": "String",
              "code": "fun FileSystemOperations.removeOldVersionsFromDir(dir: Directory, shouldDelete: Spec<GradleVersion>, dirPrefix: String = \"\", dirSuffix: String = \"\") {\n    if (dir.asFile.isDirectory) {\n        for (cacheDir in dir.asFile.listFiles()) {\n            val cacheDirName = cacheDir.name\n            if (!cacheDirName.startsWith(dirPrefix) || !cacheDirName.endsWith(dirSuffix)) {\n                continue\n            }"
            },
            {
              "step": 94,
              "variableName": "cacheDirName",
              "startLine": 49,
              "startColumn": 30,
              "endLine": 49,
              "endColumn": 42,
              "uri": "gradle-8.14.0/build-logic/cleanup/src/main/kotlin/gradlebuild/cleanup/Cleanup.kt",
              "type": "String",
              "code": "            if (!cacheDirName.startsWith(dirPrefix) || !cacheDirName.endsWith(dirSuffix)) {\n                continue\n            }\n            val dirVersion = cacheDirName.removePrefix(dirPrefix).removeSuffix(dirSuffix)\n            if (!dirVersion.matches(dirVersionPattern)) {\n                continue\n            }"
            },
            {
              "step": 95,
              "variableName": "cacheDirName.removePrefix(dirPrefix)",
              "startLine": 49,
              "startColumn": 30,
              "endLine": 49,
              "endColumn": 66,
              "uri": "gradle-8.14.0/build-logic/cleanup/src/main/kotlin/gradlebuild/cleanup/Cleanup.kt",
              "type": "String",
              "code": "            if (!cacheDirName.startsWith(dirPrefix) || !cacheDirName.endsWith(dirSuffix)) {\n                continue\n            }\n            val dirVersion = cacheDirName.removePrefix(dirPrefix).removeSuffix(dirSuffix)\n            if (!dirVersion.matches(dirVersionPattern)) {\n                continue\n            }"
            },
            {
              "step": 96,
              "variableName": "cacheDirName.removePrefix(dirPrefix).removeSuffix(dirSuffix)",
              "startLine": 49,
              "startColumn": 30,
              "endLine": 49,
              "endColumn": 90,
              "uri": "gradle-8.14.0/build-logic/cleanup/src/main/kotlin/gradlebuild/cleanup/Cleanup.kt",
              "type": "String",
              "code": "            if (!cacheDirName.startsWith(dirPrefix) || !cacheDirName.endsWith(dirSuffix)) {\n                continue\n            }\n            val dirVersion = cacheDirName.removePrefix(dirPrefix).removeSuffix(dirSuffix)\n            if (!dirVersion.matches(dirVersionPattern)) {\n                continue\n            }"
            },
            {
              "step": 97,
              "variableName": "dirVersion",
              "startLine": 56,
              "startColumn": 43,
              "endLine": 56,
              "endColumn": 53,
              "uri": "gradle-8.14.0/build-logic/cleanup/src/main/kotlin/gradlebuild/cleanup/Cleanup.kt",
              "type": "String",
              "code": "\n            val cacheVersion =\n                try {\n                    GradleVersion.version(dirVersion)\n                } catch (_: IllegalArgumentException) {\n                    // Ignore\n                    continue"
            },
            {
              "step": 98,
              "variableName": "String version",
              "startLine": 72,
              "startColumn": 41,
              "endLine": 72,
              "endColumn": 55,
              "uri": "gradle-8.14.0/platforms/core-runtime/logging/src/main/java/org/gradle/util/GradleVersion.java",
              "type": "String",
              "code": "     *\n     * @throws IllegalArgumentException On unrecognized version string.\n     */\n    public static GradleVersion version(String version) throws IllegalArgumentException {\n        return DefaultGradleVersion.version(version);\n    }\n"
            },
            {
              "step": 99,
              "variableName": "version",
              "startLine": 73,
              "startColumn": 45,
              "endLine": 73,
              "endColumn": 52,
              "uri": "gradle-8.14.0/platforms/core-runtime/logging/src/main/java/org/gradle/util/GradleVersion.java",
              "type": "String",
              "code": "     * @throws IllegalArgumentException On unrecognized version string.\n     */\n    public static GradleVersion version(String version) throws IllegalArgumentException {\n        return DefaultGradleVersion.version(version);\n    }\n\n    /**"
            },
            {
              "step": 100,
              "variableName": "String version",
              "startLine": 105,
              "startColumn": 48,
              "endLine": 105,
              "endColumn": 62,
              "uri": "gradle-8.14.0/platforms/core-runtime/logging/src/main/java/org/gradle/util/internal/DefaultGradleVersion.java",
              "type": "String",
              "code": "     *\n     * @throws IllegalArgumentException On unrecognized version string.\n     */\n    public static DefaultGradleVersion version(String version) throws IllegalArgumentException {\n        return new DefaultGradleVersion(version, null, null);\n    }\n"
            },
            {
              "step": 101,
              "variableName": "version",
              "startLine": 106,
              "startColumn": 41,
              "endLine": 106,
              "endColumn": 48,
              "uri": "gradle-8.14.0/platforms/core-runtime/logging/src/main/java/org/gradle/util/internal/DefaultGradleVersion.java",
              "type": "String",
              "code": "     * @throws IllegalArgumentException On unrecognized version string.\n     */\n    public static DefaultGradleVersion version(String version) throws IllegalArgumentException {\n        return new DefaultGradleVersion(version, null, null);\n    }\n\n    private DefaultGradleVersion(String version, String buildTime, String commitId) {"
            },
            {
              "step": 102,
              "variableName": "String version",
              "startLine": 109,
              "startColumn": 34,
              "endLine": 109,
              "endColumn": 48,
              "uri": "gradle-8.14.0/platforms/core-runtime/logging/src/main/java/org/gradle/util/internal/DefaultGradleVersion.java",
              "type": "String",
              "code": "        return new DefaultGradleVersion(version, null, null);\n    }\n\n    private DefaultGradleVersion(String version, String buildTime, String commitId) {\n        this.version = version;\n        this.buildTime = buildTime;\n        Matcher matcher = VERSION_PATTERN.matcher(version);"
            },
            {
              "step": 103,
              "variableName": "version",
              "startLine": 112,
              "startColumn": 51,
              "endLine": 112,
              "endColumn": 58,
              "uri": "gradle-8.14.0/platforms/core-runtime/logging/src/main/java/org/gradle/util/internal/DefaultGradleVersion.java",
              "type": "String",
              "code": "    private DefaultGradleVersion(String version, String buildTime, String commitId) {\n        this.version = version;\n        this.buildTime = buildTime;\n        Matcher matcher = VERSION_PATTERN.matcher(version);\n        if (!matcher.matches()) {\n            throw new IllegalArgumentException(format(\"'%s' is not a valid Gradle version string (examples: '1.0', '1.0-rc-1')\", version));\n        }"
            },
            {
              "step": 104,
              "variableName": "VERSION_PATTERN.matcher(version)",
              "startLine": 112,
              "startColumn": 27,
              "endLine": 112,
              "endColumn": 59,
              "uri": "gradle-8.14.0/platforms/core-runtime/logging/src/main/java/org/gradle/util/internal/DefaultGradleVersion.java",
              "type": "Matcher",
              "code": "    private DefaultGradleVersion(String version, String buildTime, String commitId) {\n        this.version = version;\n        this.buildTime = buildTime;\n        Matcher matcher = VERSION_PATTERN.matcher(version);\n        if (!matcher.matches()) {\n            throw new IllegalArgumentException(format(\"'%s' is not a valid Gradle version string (examples: '1.0', '1.0-rc-1')\", version));\n        }"
            },
            {
              "step": 105,
              "variableName": "matcher",
              "startLine": 120,
              "startColumn": 54,
              "endLine": 120,
              "endColumn": 61,
              "uri": "gradle-8.14.0/platforms/core-runtime/logging/src/main/java/org/gradle/util/internal/DefaultGradleVersion.java",
              "type": "Matcher",
              "code": "        versionPart = matcher.group(1);\n        majorPart = Integer.parseInt(matcher.group(2), 10);\n\n        this.commitId = setOrParseCommitId(commitId, matcher);\n        this.stage = parseStage(matcher);\n        this.snapshot = parseSnapshot(matcher);\n    }"
            },
            {
              "step": 106,
              "variableName": "String commitId",
              "startLine": 169,
              "startColumn": 39,
              "endLine": 169,
              "endColumn": 54,
              "uri": "gradle-8.14.0/platforms/core-runtime/logging/src/main/java/org/gradle/util/internal/DefaultGradleVersion.java",
              "type": "String",
              "code": "        return stage.equals(matcher.group(5));\n    }\n\n    private String setOrParseCommitId(String commitId, Matcher matcher) {\n        if (commitId != null || !isCommitVersion(matcher)) {\n            return commitId;\n        } else {"
            },
            {
              "step": 107,
              "variableName": "commitId",
              "startLine": 171,
              "startColumn": 20,
              "endLine": 171,
              "endColumn": 28,
              "uri": "gradle-8.14.0/platforms/core-runtime/logging/src/main/java/org/gradle/util/internal/DefaultGradleVersion.java",
              "type": "String",
              "code": "\n    private String setOrParseCommitId(String commitId, Matcher matcher) {\n        if (commitId != null || !isCommitVersion(matcher)) {\n            return commitId;\n        } else {\n            return matcher.group(6);\n        }"
            },
            {
              "step": 108,
              "variableName": "setOrParseCommitId(commitId, matcher)",
              "startLine": 120,
              "startColumn": 25,
              "endLine": 120,
              "endColumn": 62,
              "uri": "gradle-8.14.0/platforms/core-runtime/logging/src/main/java/org/gradle/util/internal/DefaultGradleVersion.java",
              "type": "String",
              "code": "        versionPart = matcher.group(1);\n        majorPart = Integer.parseInt(matcher.group(2), 10);\n\n        this.commitId = setOrParseCommitId(commitId, matcher);\n        this.stage = parseStage(matcher);\n        this.snapshot = parseSnapshot(matcher);\n    }"
            },
            {
              "step": 109,
              "variableName": "this",
              "startLine": 120,
              "startColumn": 9,
              "endLine": 120,
              "endColumn": 13,
              "uri": "gradle-8.14.0/platforms/core-runtime/logging/src/main/java/org/gradle/util/internal/DefaultGradleVersion.java",
              "type": "DefaultGradleVersion [commitId] : String",
              "code": "        versionPart = matcher.group(1);\n        majorPart = Integer.parseInt(matcher.group(2), 10);\n\n        this.commitId = setOrParseCommitId(commitId, matcher);\n        this.stage = parseStage(matcher);\n        this.snapshot = parseSnapshot(matcher);\n    }"
            },
            {
              "step": 110,
              "variableName": "new DefaultGradleVersion(version, \"unknown\".equals(buildTimestamp) ? null : buildTimestamp, commitId)",
              "startLine": 86,
              "startColumn": 23,
              "endLine": 86,
              "endColumn": 124,
              "uri": "gradle-8.14.0/platforms/core-runtime/logging/src/main/java/org/gradle/util/internal/DefaultGradleVersion.java",
              "type": "DefaultGradleVersion [commitId] : String",
              "code": "            String buildTimestamp = properties.get(\"buildTimestampIso\").toString();\n            String commitId = properties.get(\"commitId\").toString();\n\n            CURRENT = new DefaultGradleVersion(version, \"unknown\".equals(buildTimestamp) ? null : buildTimestamp, commitId);\n        } catch (Exception e) {\n            throw new GradleException(format(\"Could not load version details from resource '%s'.\", resource), e);\n        } finally {"
            },
            {
              "step": 111,
              "variableName": "CURRENT",
              "startLine": 52,
              "startColumn": 47,
              "endLine": 52,
              "endColumn": 54,
              "uri": "gradle-8.14.0/platforms/core-runtime/logging/src/main/java/org/gradle/util/internal/DefaultGradleVersion.java",
              "type": "DefaultGradleVersion [commitId] : String",
              "code": "    private final Long snapshot;\n    private final String versionPart;\n    private final Stage stage;\n    private static final DefaultGradleVersion CURRENT;\n\n    public static final String RESOURCE_NAME = \"/org/gradle/build-receipt.properties\";\n    public static final String VERSION_OVERRIDE_VAR = \"GRADLE_VERSION_OVERRIDE\";"
            },
            {
              "step": 112,
              "variableName": "CURRENT",
              "startLine": 97,
              "startColumn": 16,
              "endLine": 97,
              "endColumn": 23,
              "uri": "gradle-8.14.0/platforms/core-runtime/logging/src/main/java/org/gradle/util/internal/DefaultGradleVersion.java",
              "type": "DefaultGradleVersion [commitId] : String",
              "code": "    }\n\n    public static DefaultGradleVersion current() {\n        return CURRENT;\n    }\n\n    /**"
            },
            {
              "step": 113,
              "variableName": "DefaultGradleVersion.current()",
              "startLine": 249,
              "startColumn": 51,
              "endLine": 249,
              "endColumn": 81,
              "uri": "gradle-8.14.0/platforms/core-runtime/gradle-cli/src/main/java/org/gradle/launcher/cli/DefaultCommandLineActionFactory.java",
              "type": "DefaultGradleVersion [commitId] : String",
              "code": "\n        @Override\n        public void execute(ExecutionListener executionListener) {\n            DefaultGradleVersion currentVersion = DefaultGradleVersion.current();\n\n            System.out.println();\n            System.out.println(\"------------------------------------------------------------\");"
            },
            {
              "step": 114,
              "variableName": "currentVersion",
              "startLine": 258,
              "startColumn": 47,
              "endLine": 258,
              "endColumn": 61,
              "uri": "gradle-8.14.0/platforms/core-runtime/gradle-cli/src/main/java/org/gradle/launcher/cli/DefaultCommandLineActionFactory.java",
              "type": "DefaultGradleVersion [commitId] : String",
              "code": "            System.out.println();\n            printAligned(ImmutableList.of(\n                new Line.KeyValue(\"Build time\", currentVersion.getBuildTimestamp()),\n                new Line.KeyValue(\"Revision\", currentVersion.getGitRevision()),\n                new Line.Blank(),\n                new Line.KeyValue(\"Kotlin\", KotlinDslVersion.current().getKotlinVersion()),\n                new Line.KeyValue(\"Groovy\", ReleaseInfo.getVersion()),"
            },
            {
              "step": 115,
              "variableName": "getGitRevision",
              "startLine": 205,
              "startColumn": 19,
              "endLine": 205,
              "endColumn": 33,
              "uri": "gradle-8.14.0/platforms/core-runtime/logging/src/main/java/org/gradle/util/internal/DefaultGradleVersion.java",
              "type": "DefaultGradleVersion [commitId] : String",
              "code": "        return getGitRevision();\n    }\n\n    public String getGitRevision() {\n        return commitId;\n    }\n"
            },
            {
              "step": 116,
              "variableName": "commitId",
              "startLine": 206,
              "startColumn": 16,
              "endLine": 206,
              "endColumn": 24,
              "uri": "gradle-8.14.0/platforms/core-runtime/logging/src/main/java/org/gradle/util/internal/DefaultGradleVersion.java",
              "type": "DefaultGradleVersion [commitId] : String",
              "code": "    }\n\n    public String getGitRevision() {\n        return commitId;\n    }\n\n    @Override"
            },
            {
              "step": 117,
              "variableName": "commitId",
              "startLine": 206,
              "startColumn": 16,
              "endLine": 206,
              "endColumn": 24,
              "uri": "gradle-8.14.0/platforms/core-runtime/logging/src/main/java/org/gradle/util/internal/DefaultGradleVersion.java",
              "type": "String",
              "code": "    }\n\n    public String getGitRevision() {\n        return commitId;\n    }\n\n    @Override"
            },
            {
              "step": 118,
              "variableName": "currentVersion.getGitRevision()",
              "startLine": 258,
              "startColumn": 47,
              "endLine": 258,
              "endColumn": 78,
              "uri": "gradle-8.14.0/platforms/core-runtime/gradle-cli/src/main/java/org/gradle/launcher/cli/DefaultCommandLineActionFactory.java",
              "type": "String",
              "code": "            System.out.println();\n            printAligned(ImmutableList.of(\n                new Line.KeyValue(\"Build time\", currentVersion.getBuildTimestamp()),\n                new Line.KeyValue(\"Revision\", currentVersion.getGitRevision()),\n                new Line.Blank(),\n                new Line.KeyValue(\"Kotlin\", KotlinDslVersion.current().getKotlinVersion()),\n                new Line.KeyValue(\"Groovy\", ReleaseInfo.getVersion()),"
            },
            {
              "step": 119,
              "variableName": "String value",
              "startLine": 275,
              "startColumn": 45,
              "endLine": 275,
              "endColumn": 57,
              "uri": "gradle-8.14.0/platforms/core-runtime/gradle-cli/src/main/java/org/gradle/launcher/cli/DefaultCommandLineActionFactory.java",
              "type": "String",
              "code": "                private final String key;\n                private final String value;\n\n                public KeyValue(String key, String value) {\n                    this.key = key;\n                    this.value = value;\n                }"
            },
            {
              "step": 120,
              "variableName": "value",
              "startLine": 277,
              "startColumn": 34,
              "endLine": 277,
              "endColumn": 39,
              "uri": "gradle-8.14.0/platforms/core-runtime/gradle-cli/src/main/java/org/gradle/launcher/cli/DefaultCommandLineActionFactory.java",
              "type": "String",
              "code": "\n                public KeyValue(String key, String value) {\n                    this.key = key;\n                    this.value = value;\n                }\n            }\n"
            },
            {
              "step": 121,
              "variableName": "this",
              "startLine": 277,
              "startColumn": 21,
              "endLine": 277,
              "endColumn": 25,
              "uri": "gradle-8.14.0/platforms/core-runtime/gradle-cli/src/main/java/org/gradle/launcher/cli/DefaultCommandLineActionFactory.java",
              "type": "KeyValue [value] : String",
              "code": "\n                public KeyValue(String key, String value) {\n                    this.key = key;\n                    this.value = value;\n                }\n            }\n"
            },
            {
              "step": 122,
              "variableName": "new Line.KeyValue(\"Revision\", currentVersion.getGitRevision())",
              "startLine": 258,
              "startColumn": 17,
              "endLine": 258,
              "endColumn": 79,
              "uri": "gradle-8.14.0/platforms/core-runtime/gradle-cli/src/main/java/org/gradle/launcher/cli/DefaultCommandLineActionFactory.java",
              "type": "KeyValue [value] : String",
              "code": "            System.out.println();\n            printAligned(ImmutableList.of(\n                new Line.KeyValue(\"Build time\", currentVersion.getBuildTimestamp()),\n                new Line.KeyValue(\"Revision\", currentVersion.getGitRevision()),\n                new Line.Blank(),\n                new Line.KeyValue(\"Kotlin\", KotlinDslVersion.current().getKotlinVersion()),\n                new Line.KeyValue(\"Groovy\", ReleaseInfo.getVersion()),"
            },
            {
              "step": 123,
              "variableName": "of(...) : ImmutableList [<element>, value] : String",
              "startLine": 256,
              "startColumn": 26,
              "endLine": 267,
              "endColumn": 14,
              "uri": "gradle-8.14.0/platforms/core-runtime/gradle-cli/src/main/java/org/gradle/launcher/cli/DefaultCommandLineActionFactory.java",
              "type": "ImmutableList [<element>, value] : String",
              "code": "            System.out.println(\"Gradle \" + currentVersion.getVersion());\n            System.out.println(\"------------------------------------------------------------\");\n            System.out.println();\n            printAligned(ImmutableList.of(\n                new Line.KeyValue(\"Build time\", currentVersion.getBuildTimestamp()),\n                new Line.KeyValue(\"Revision\", currentVersion.getGitRevision()),\n                new Line.Blank(),"
            },
            {
              "step": 124,
              "variableName": "List<Line> lines",
              "startLine": 304,
              "startColumn": 42,
              "endLine": 304,
              "endColumn": 58,
              "uri": "gradle-8.14.0/platforms/core-runtime/gradle-cli/src/main/java/org/gradle/launcher/cli/DefaultCommandLineActionFactory.java",
              "type": "ImmutableList [<element>, value] : String",
              "code": "         *\n         * @param lines the lines to print\n         */\n        private static void printAligned(List<Line> lines) {\n            int maxKeyLength = lines.stream()\n                .filter(line -> line instanceof Line.KeyValue)\n                .map(line -> ((Line.KeyValue) line).key.length())"
            },
            {
              "step": 125,
              "variableName": "lines",
              "startLine": 310,
              "startColumn": 30,
              "endLine": 310,
              "endColumn": 35,
              "uri": "gradle-8.14.0/platforms/core-runtime/gradle-cli/src/main/java/org/gradle/launcher/cli/DefaultCommandLineActionFactory.java",
              "type": "ImmutableList [<element>, value] : String",
              "code": "                .map(line -> ((Line.KeyValue) line).key.length())\n                .max(Integer::compare)\n                .orElse(0);\n            for (Line line : lines) {\n                if (line instanceof Line.KeyValue) {\n                    Line.KeyValue keyValue = (Line.KeyValue) line;\n                    System.out.print(keyValue.key + \": \");"
            },
            {
              "step": 126,
              "variableName": "line",
              "startLine": 311,
              "startColumn": 21,
              "endLine": 311,
              "endColumn": 25,
              "uri": "gradle-8.14.0/platforms/core-runtime/gradle-cli/src/main/java/org/gradle/launcher/cli/DefaultCommandLineActionFactory.java",
              "type": "KeyValue [value] : String",
              "code": "                .max(Integer::compare)\n                .orElse(0);\n            for (Line line : lines) {\n                if (line instanceof Line.KeyValue) {\n                    Line.KeyValue keyValue = (Line.KeyValue) line;\n                    System.out.print(keyValue.key + \": \");\n                    // Add one to account for colon"
            },
            {
              "step": 127,
              "variableName": "(Line.KeyValue) line",
              "startLine": 312,
              "startColumn": 46,
              "endLine": 312,
              "endColumn": 66,
              "uri": "gradle-8.14.0/platforms/core-runtime/gradle-cli/src/main/java/org/gradle/launcher/cli/DefaultCommandLineActionFactory.java",
              "type": "KeyValue [value] : String",
              "code": "                .orElse(0);\n            for (Line line : lines) {\n                if (line instanceof Line.KeyValue) {\n                    Line.KeyValue keyValue = (Line.KeyValue) line;\n                    System.out.print(keyValue.key + \": \");\n                    // Add one to account for colon\n                    for (int i = keyValue.key.length(); i < maxKeyLength + 1; i++) {"
            },
            {
              "step": 128,
              "variableName": "keyValue",
              "startLine": 318,
              "startColumn": 40,
              "endLine": 318,
              "endColumn": 48,
              "uri": "gradle-8.14.0/platforms/core-runtime/gradle-cli/src/main/java/org/gradle/launcher/cli/DefaultCommandLineActionFactory.java",
              "type": "KeyValue [value] : String",
              "code": "                    for (int i = keyValue.key.length(); i < maxKeyLength + 1; i++) {\n                        System.out.print(' ');\n                    }\n                    System.out.println(keyValue.value);\n                } else {\n                    System.out.println();\n                }"
            },
            {
              "step": 129,
              "variableName": "keyValue.value",
              "startLine": 318,
              "startColumn": 40,
              "endLine": 318,
              "endColumn": 54,
              "uri": "gradle-8.14.0/platforms/core-runtime/gradle-cli/src/main/java/org/gradle/launcher/cli/DefaultCommandLineActionFactory.java",
              "type": "",
              "code": "                    for (int i = keyValue.key.length(); i < maxKeyLength + 1; i++) {\n                        System.out.print(' ');\n                    }\n                    System.out.println(keyValue.value);\n                } else {\n                    System.out.println();\n                }"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 6,
      "fileName": "Install.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "source",
              "startLine": 44,
              "startColumn": 25,
              "endLine": 44,
              "endColumn": 31,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/RegExpNameMapper.java",
              "type": "String",
              "code": "        } else {\n            matcher.reset(source);\n        }\n        String result = source;\n        if (matcher.find()) {\n            result = matcher.replaceFirst(replacement);\n        }"
            },
            {
              "step": 1,
              "variableName": "result",
              "startLine": 48,
              "startColumn": 16,
              "endLine": 48,
              "endColumn": 22,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/RegExpNameMapper.java",
              "type": "String",
              "code": "        if (matcher.find()) {\n            result = matcher.replaceFirst(replacement);\n        }\n        return result;\n    }\n}\n"
            },
            {
              "step": 2,
              "variableName": "transformer.transform(value)",
              "startLine": 37,
              "startColumn": 31,
              "endLine": 37,
              "endColumn": 59,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/ChainingTransformer.java",
              "type": "String",
              "code": "    public T transform(T original) {\n        T value = original;\n        for (Transformer<T, T> transformer : transformers) {\n            value = type.cast(transformer.transform(value));\n        }\n        return value;\n    }"
            },
            {
              "step": 3,
              "variableName": "type.cast(transformer.transform(value))",
              "startLine": 37,
              "startColumn": 21,
              "endLine": 37,
              "endColumn": 60,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/ChainingTransformer.java",
              "type": "String",
              "code": "    public T transform(T original) {\n        T value = original;\n        for (Transformer<T, T> transformer : transformers) {\n            value = type.cast(transformer.transform(value));\n        }\n        return value;\n    }"
            },
            {
              "step": 4,
              "variableName": "value",
              "startLine": 39,
              "startColumn": 16,
              "endLine": 39,
              "endColumn": 21,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/ChainingTransformer.java",
              "type": "String",
              "code": "        for (Transformer<T, T> transformer : transformers) {\n            value = type.cast(transformer.transform(value));\n        }\n        return value;\n    }\n\n    public void add(Transformer<T, T> transformer) {"
            },
            {
              "step": 5,
              "variableName": "describer.transform(this)",
              "startLine": 163,
              "startColumn": 16,
              "endLine": 163,
              "endColumn": 41,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/repositories/DefaultMavenArtifactRepository.java",
              "type": "String",
              "code": "\n    @Override\n    public String getDisplayName() {\n        return describer.transform(this);\n    }\n\n    @Override"
            },
            {
              "step": 6,
              "variableName": "describable.getDisplayName()",
              "startLine": 313,
              "startColumn": 35,
              "endLine": 313,
              "endColumn": 63,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "String",
              "code": "        public String getDisplayName() {\n            synchronized (this) {\n                if (displayName == null) {\n                    displayName = describable.getDisplayName();\n                    if (capDisplayName != null || !(describable instanceof DisplayName)) {\n                        describable = null;\n                    }"
            },
            {
              "step": 7,
              "variableName": "displayName",
              "startLine": 318,
              "startColumn": 24,
              "endLine": 318,
              "endColumn": 35,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "String",
              "code": "                        describable = null;\n                    }\n                }\n                return displayName;\n            }\n        }\n    }"
            },
            {
              "step": 8,
              "variableName": "displayName.getDisplayName()",
              "startLine": 772,
              "startColumn": 73,
              "endLine": 772,
              "endColumn": 101,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/configurations/DefaultConfiguration.java",
              "type": "String",
              "code": "                try {\n                    results = resolver.resolveGraph(DefaultConfiguration.this);\n                } catch (Exception e) {\n                    throw exceptionMapper.mapFailure(e, \"dependencies\", displayName.getDisplayName());\n                }\n\n                // Make the new state visible in case a dependency resolution listener queries the result, which requires the new state"
            },
            {
              "step": 9,
              "variableName": "String contextDisplayName",
              "startLine": 68,
              "startColumn": 77,
              "endLine": 68,
              "endColumn": 102,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "String",
              "code": "        return mapFailure(failure, type, displayName);\n    }\n\n    public TypedResolveException mapFailure(Throwable failure, String type, String contextDisplayName) {\n        if (!(failure instanceof TypedResolveException)) {\n            return new TypedResolveException(\n                type,"
            },
            {
              "step": 10,
              "variableName": "contextDisplayName",
              "startLine": 72,
              "startColumn": 17,
              "endLine": 72,
              "endColumn": 35,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "String",
              "code": "        if (!(failure instanceof TypedResolveException)) {\n            return new TypedResolveException(\n                type,\n                contextDisplayName,\n                ImmutableList.of(mapRepositoryOverrideFailure(contextDisplayName, failure))\n            );\n        }"
            },
            {
              "step": 11,
              "variableName": "new TypedResolveException(...) : TypedResolveException",
              "startLine": 70,
              "startColumn": 20,
              "endLine": 74,
              "endColumn": 14,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "TypedResolveException",
              "code": "\n    public TypedResolveException mapFailure(Throwable failure, String type, String contextDisplayName) {\n        if (!(failure instanceof TypedResolveException)) {\n            return new TypedResolveException(\n                type,\n                contextDisplayName,\n                ImmutableList.of(mapRepositoryOverrideFailure(contextDisplayName, failure))"
            },
            {
              "step": 12,
              "variableName": "exceptionMapper.mapFailure(e, \"dependencies\", displayName.getDisplayName())",
              "startLine": 772,
              "startColumn": 27,
              "endLine": 772,
              "endColumn": 102,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/configurations/DefaultConfiguration.java",
              "type": "TypedResolveException",
              "code": "                try {\n                    results = resolver.resolveGraph(DefaultConfiguration.this);\n                } catch (Exception e) {\n                    throw exceptionMapper.mapFailure(e, \"dependencies\", displayName.getDisplayName());\n                }\n\n                // Make the new state visible in case a dependency resolution listener queries the result, which requires the new state"
            },
            {
              "step": 13,
              "variableName": "e",
              "startLine": 772,
              "startColumn": 54,
              "endLine": 772,
              "endColumn": 55,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/configurations/DefaultConfiguration.java",
              "type": "Exception",
              "code": "                try {\n                    results = resolver.resolveGraph(DefaultConfiguration.this);\n                } catch (Exception e) {\n                    throw exceptionMapper.mapFailure(e, \"dependencies\", displayName.getDisplayName());\n                }\n\n                // Make the new state visible in case a dependency resolution listener queries the result, which requires the new state"
            },
            {
              "step": 14,
              "variableName": "Throwable failure",
              "startLine": 68,
              "startColumn": 45,
              "endLine": 68,
              "endColumn": 62,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Throwable",
              "code": "        return mapFailure(failure, type, displayName);\n    }\n\n    public TypedResolveException mapFailure(Throwable failure, String type, String contextDisplayName) {\n        if (!(failure instanceof TypedResolveException)) {\n            return new TypedResolveException(\n                type,"
            },
            {
              "step": 15,
              "variableName": "failure",
              "startLine": 73,
              "startColumn": 83,
              "endLine": 73,
              "endColumn": 90,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Throwable",
              "code": "            return new TypedResolveException(\n                type,\n                contextDisplayName,\n                ImmutableList.of(mapRepositoryOverrideFailure(contextDisplayName, failure))\n            );\n        }\n"
            },
            {
              "step": 16,
              "variableName": "Throwable failure",
              "startLine": 94,
              "startColumn": 78,
              "endLine": 94,
              "endColumn": 95,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Throwable",
              "code": "\n    // TODO: We should handle this exception at the source instead of using instanceof to detect it after it is thrown.\n    //       We should try to avoid catching and analyzing runtime exceptions\n    public Throwable mapRepositoryOverrideFailure(String contextDisplayName, Throwable failure) {\n        if (!(failure instanceof ModuleVersionNotFoundException) || !settingsRepositoriesIgnored()) {\n            return failure;\n        }"
            },
            {
              "step": 17,
              "variableName": "failure",
              "startLine": 108,
              "startColumn": 35,
              "endLine": 108,
              "endColumn": 42,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Throwable",
              "code": "        return new TypedResolveException(\n            \"dependencies\",\n            contextDisplayName,\n            Collections.singleton(failure),\n            resolutions\n        );\n    }"
            },
            {
              "step": 18,
              "variableName": "Collections.singleton(failure)",
              "startLine": 108,
              "startColumn": 13,
              "endLine": 108,
              "endColumn": 43,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Set [<element>] : Throwable",
              "code": "        return new TypedResolveException(\n            \"dependencies\",\n            contextDisplayName,\n            Collections.singleton(failure),\n            resolutions\n        );\n    }"
            },
            {
              "step": 19,
              "variableName": "Collections.singleton(failure)",
              "startLine": 108,
              "startColumn": 13,
              "endLine": 108,
              "endColumn": 43,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Set",
              "code": "        return new TypedResolveException(\n            \"dependencies\",\n            contextDisplayName,\n            Collections.singleton(failure),\n            resolutions\n        );\n    }"
            },
            {
              "step": 20,
              "variableName": "Iterable<? extends Throwable> failures",
              "startLine": 42,
              "startColumn": 67,
              "endLine": 42,
              "endColumn": 105,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ivyservice/TypedResolveException.java",
              "type": "Set",
              "code": "    /**\n     * Creates a new instance with resolutions.\n     */\n    public TypedResolveException(String type, String displayName, Iterable<? extends Throwable> failures, List<String> resolutions) {\n        super(buildMessage(type, displayName), failures, false);\n        this.type = type;\n        this.resolutions = ImmutableList.copyOf(resolutions);"
            },
            {
              "step": 21,
              "variableName": "failures",
              "startLine": 43,
              "startColumn": 48,
              "endLine": 43,
              "endColumn": 56,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ivyservice/TypedResolveException.java",
              "type": "Set",
              "code": "     * Creates a new instance with resolutions.\n     */\n    public TypedResolveException(String type, String displayName, Iterable<? extends Throwable> failures, List<String> resolutions) {\n        super(buildMessage(type, displayName), failures, false);\n        this.type = type;\n        this.resolutions = ImmutableList.copyOf(resolutions);\n    }"
            },
            {
              "step": 22,
              "variableName": "Iterable<? extends Throwable> causes",
              "startLine": 77,
              "startColumn": 48,
              "endLine": 77,
              "endColumn": 84,
              "uri": "gradle-8.14.0/subprojects/core-api/src/main/java/org/gradle/api/artifacts/ResolveException.java",
              "type": "Set",
              "code": "     * @since 8.9\n     */\n    @Incubating\n    protected ResolveException(String message, Iterable<? extends Throwable> causes, @SuppressWarnings(\"unused\") boolean dummy) {\n        super(message, causes);\n    }\n}"
            },
            {
              "step": 23,
              "variableName": "causes",
              "startLine": 78,
              "startColumn": 24,
              "endLine": 78,
              "endColumn": 30,
              "uri": "gradle-8.14.0/subprojects/core-api/src/main/java/org/gradle/api/artifacts/ResolveException.java",
              "type": "Set",
              "code": "     */\n    @Incubating\n    protected ResolveException(String message, Iterable<? extends Throwable> causes, @SuppressWarnings(\"unused\") boolean dummy) {\n        super(message, causes);\n    }\n}\n"
            },
            {
              "step": 24,
              "variableName": "Iterable<? extends Throwable> causes",
              "startLine": 47,
              "startColumn": 55,
              "endLine": 47,
              "endColumn": 91,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "Set",
              "code": "        this.causes.addAll(Arrays.asList(causes));\n    }\n\n    public DefaultMultiCauseException(String message, Iterable<? extends Throwable> causes) {\n        super(message);\n        this.message = message;\n        initCauses(causes);"
            },
            {
              "step": 25,
              "variableName": "causes",
              "startLine": 50,
              "startColumn": 20,
              "endLine": 50,
              "endColumn": 26,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "Set",
              "code": "    public DefaultMultiCauseException(String message, Iterable<? extends Throwable> causes) {\n        super(message);\n        this.message = message;\n        initCauses(causes);\n    }\n\n    public DefaultMultiCauseException(Factory<String> messageFactory) {"
            },
            {
              "step": 26,
              "variableName": "Iterable<? extends Throwable> causes",
              "startLine": 112,
              "startColumn": 28,
              "endLine": 112,
              "endColumn": 64,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "Iterable",
              "code": "        return null;\n    }\n\n    public void initCauses(Iterable<? extends Throwable> causes) {\n        this.causes.clear();\n        for (Throwable cause : causes) {\n            this.causes.add(cause);"
            },
            {
              "step": 27,
              "variableName": "cause",
              "startLine": 115,
              "startColumn": 29,
              "endLine": 115,
              "endColumn": 34,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "Throwable",
              "code": "    public void initCauses(Iterable<? extends Throwable> causes) {\n        this.causes.clear();\n        for (Throwable cause : causes) {\n            this.causes.add(cause);\n        }\n    }\n"
            },
            {
              "step": 28,
              "variableName": "this.causes",
              "startLine": 115,
              "startColumn": 13,
              "endLine": 115,
              "endColumn": 24,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "CopyOnWriteArrayList [<element>] : Throwable",
              "code": "    public void initCauses(Iterable<? extends Throwable> causes) {\n        this.causes.clear();\n        for (Throwable cause : causes) {\n            this.causes.add(cause);\n        }\n    }\n"
            },
            {
              "step": 29,
              "variableName": "this",
              "startLine": 115,
              "startColumn": 13,
              "endLine": 115,
              "endColumn": 17,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "DefaultMultiCauseException [causes, <element>] : Throwable",
              "code": "    public void initCauses(Iterable<? extends Throwable> causes) {\n        this.causes.clear();\n        for (Throwable cause : causes) {\n            this.causes.add(cause);\n        }\n    }\n"
            },
            {
              "step": 30,
              "variableName": "projectConfigurationException",
              "startLine": 57,
              "startColumn": 17,
              "endLine": 57,
              "endColumn": 46,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/DefaultExceptionAnalyser.java",
              "type": "ProjectConfigurationException [causes, <element>] : Throwable",
              "code": "                }\n            }\n            if (!additionalFailures.isEmpty()) {\n                projectConfigurationException.initCauses(additionalFailures);\n                failures.add(transform(projectConfigurationException));\n            }\n        } else if (exception instanceof ServiceCreationException) {"
            },
            {
              "step": 31,
              "variableName": "projectConfigurationException",
              "startLine": 58,
              "startColumn": 40,
              "endLine": 58,
              "endColumn": 69,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/DefaultExceptionAnalyser.java",
              "type": "ProjectConfigurationException [causes, <element>] : Throwable",
              "code": "            }\n            if (!additionalFailures.isEmpty()) {\n                projectConfigurationException.initCauses(additionalFailures);\n                failures.add(transform(projectConfigurationException));\n            }\n        } else if (exception instanceof ServiceCreationException) {\n            failures.add(transform(new InitializationException(exception)));"
            },
            {
              "step": 32,
              "variableName": "transform(projectConfigurationException)",
              "startLine": 58,
              "startColumn": 30,
              "endLine": 58,
              "endColumn": 70,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/DefaultExceptionAnalyser.java",
              "type": "LocationAwareException",
              "code": "            }\n            if (!additionalFailures.isEmpty()) {\n                projectConfigurationException.initCauses(additionalFailures);\n                failures.add(transform(projectConfigurationException));\n            }\n        } else if (exception instanceof ServiceCreationException) {\n            failures.add(transform(new InitializationException(exception)));"
            },
            {
              "step": 33,
              "variableName": "failures",
              "startLine": 58,
              "startColumn": 17,
              "endLine": 58,
              "endColumn": 25,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/DefaultExceptionAnalyser.java",
              "type": "Collection [<element>] : LocationAwareException",
              "code": "            }\n            if (!additionalFailures.isEmpty()) {\n                projectConfigurationException.initCauses(additionalFailures);\n                failures.add(transform(projectConfigurationException));\n            }\n        } else if (exception instanceof ServiceCreationException) {\n            failures.add(transform(new InitializationException(exception)));"
            },
            {
              "step": 34,
              "variableName": "result",
              "startLine": 53,
              "startColumn": 54,
              "endLine": 53,
              "endColumn": 60,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/MultipleBuildFailuresExceptionAnalyser.java",
              "type": "ArrayList [<element>] : LocationAwareException",
              "code": "        for (Throwable failure : failures) {\n            if (failure instanceof MultipleBuildFailures) {\n                for (Throwable cause : ((MultipleBuildFailures) failure).getCauses()) {\n                    collector.collectFailures(cause, result);\n                }\n            } else {\n                collector.collectFailures(failure, result);"
            },
            {
              "step": 35,
              "variableName": "result",
              "startLine": 60,
              "startColumn": 39,
              "endLine": 60,
              "endColumn": 45,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/MultipleBuildFailuresExceptionAnalyser.java",
              "type": "ArrayList [<element>] : LocationAwareException",
              "code": "            }\n        }\n        if (result.size() == 1 && result.get(0) instanceof RuntimeException) {\n            return (RuntimeException) result.get(0);\n        } else {\n            return new MultipleBuildFailures(result);\n        }"
            },
            {
              "step": 36,
              "variableName": "result.get(0)",
              "startLine": 60,
              "startColumn": 39,
              "endLine": 60,
              "endColumn": 52,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/MultipleBuildFailuresExceptionAnalyser.java",
              "type": "LocationAwareException",
              "code": "            }\n        }\n        if (result.size() == 1 && result.get(0) instanceof RuntimeException) {\n            return (RuntimeException) result.get(0);\n        } else {\n            return new MultipleBuildFailures(result);\n        }"
            },
            {
              "step": 37,
              "variableName": "(RuntimeException) result.get(0)",
              "startLine": 60,
              "startColumn": 20,
              "endLine": 60,
              "endColumn": 52,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/MultipleBuildFailuresExceptionAnalyser.java",
              "type": "LocationAwareException",
              "code": "            }\n        }\n        if (result.size() == 1 && result.get(0) instanceof RuntimeException) {\n            return (RuntimeException) result.get(0);\n        } else {\n            return new MultipleBuildFailures(result);\n        }"
            },
            {
              "step": 38,
              "variableName": "exceptionAnalyser.transform(finishFailures)",
              "startLine": 72,
              "startColumn": 16,
              "endLine": 72,
              "endColumn": 59,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/internal/buildtree/DefaultBuildTreeFinishExecutor.java",
              "type": "LocationAwareException",
              "code": "            finishFailures.addAll(result.getFailures());\n        });\n\n        return exceptionAnalyser.transform(finishFailures);\n    }\n}\n"
            },
            {
              "step": 39,
              "variableName": "delegate.finishBuildTree(failures)",
              "startLine": 46,
              "startColumn": 28,
              "endLine": 46,
              "endColumn": 62,
              "uri": "gradle-8.14.0/subprojects/composite-builds/src/main/java/org/gradle/composite/internal/OperationFiringBuildTreeFinishExecutor.java",
              "type": "LocationAwareException",
              "code": "            @Override\n            public RuntimeException call(BuildOperationContext context) {\n                try {\n                    return delegate.finishBuildTree(failures);\n                } finally {\n                    context.setResult(RESULT);\n                }"
            },
            {
              "step": 40,
              "variableName": "buildOperation.call(context)",
              "startLine": 239,
              "startColumn": 21,
              "endLine": 239,
              "endColumn": 49,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/testFixtures/java/org/gradle/internal/operations/TestBuildOperationRunner.java",
              "type": "LocationAwareException",
              "code": "            TestBuildOperationContext context = new TestBuildOperationContext(record);\n            T t;\n            try {\n                t = buildOperation.call(context);\n            } catch (Throwable failure) {\n                if (record.failure == null) {\n                    record.failure = failure;"
            },
            {
              "step": 41,
              "variableName": "t",
              "startLine": 246,
              "startColumn": 20,
              "endLine": 246,
              "endColumn": 21,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/testFixtures/java/org/gradle/internal/operations/TestBuildOperationRunner.java",
              "type": "LocationAwareException",
              "code": "                }\n                throw throwAsUncheckedException(failure);\n            }\n            return t;\n        }\n\n        private <O extends BuildOperation> void execute(O buildOperation, BuildOperationWorker<O> worker) {"
            },
            {
              "step": 42,
              "variableName": "log.call(buildOperation)",
              "startLine": 51,
              "startColumn": 16,
              "endLine": 51,
              "endColumn": 40,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/testFixtures/java/org/gradle/internal/operations/TestBuildOperationRunner.java",
              "type": "LocationAwareException",
              "code": "\n    @Override\n    public <T> T call(CallableBuildOperation<T> buildOperation) {\n        return log.call(buildOperation);\n    }\n\n    @Override"
            },
            {
              "step": 43,
              "variableName": "ca",
              "startLine": 115,
              "startColumn": 5,
              "endLine": 121,
              "endColumn": 7,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/configurationcache/ConfigurationCacheBuildOperations.kt",
              "type": "LocationAwareException",
              "code": "\ninternal\nfun <T : Any> BuildOperationRunner.withModelLoadOperation(block: () -> T): T =\n    call(object : CallableBuildOperation<T> {\n        override fun description(): BuildOperationDescriptor.Builder = BuildOperationDescriptor\n            .displayName(\"Load model from configuration cache\")\n            .progressDisplayName(\"Loading model from configuration cache\")"
            },
            {
              "step": 44,
              "variableName": "ca",
              "startLine": 115,
              "startColumn": 5,
              "endLine": 121,
              "endColumn": 7,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/configurationcache/ConfigurationCacheBuildOperations.kt",
              "type": "LocationAwareException",
              "code": "\ninternal\nfun <T : Any> BuildOperationRunner.withModelLoadOperation(block: () -> T): T =\n    call(object : CallableBuildOperation<T> {\n        override fun description(): BuildOperationDescriptor.Builder = BuildOperationDescriptor\n            .displayName(\"Load model from configuration cache\")\n            .progressDisplayName(\"Loading model from configuration cache\")"
            },
            {
              "step": 45,
              "variableName": "b",
              "startLine": 635,
              "startColumn": 9,
              "endLine": 641,
              "endColumn": 10,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "        // No need to record the `ClassLoaderScope` tree when loading\n        scopeRegistryListener.dispose()\n\n        buildOperationRunner.withModelLoadOperation {\n            val storeLoadResult = entryStore.useForStateLoad(StateType.Model) { stateFile: ConfigurationCacheStateFile ->\n                cacheIO.readModelFrom(stateFile)\n            }"
            },
            {
              "step": 46,
              "variableName": "block()",
              "startLine": 668,
              "startColumn": 22,
              "endLine": 668,
              "endColumn": 29,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "    private\n    inline fun <T> runAtConfigurationTime(block: () -> T): T {\n        prepareConfigurationTimeBarrier()\n        val result = block()\n        crossConfigurationTimeBarrier()\n        return result\n    }"
            },
            {
              "step": 47,
              "variableName": "result",
              "startLine": 670,
              "startColumn": 16,
              "endLine": 670,
              "endColumn": 22,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "        prepareConfigurationTimeBarrier()\n        val result = block()\n        crossConfigurationTimeBarrier()\n        return result\n    }\n\n    private"
            },
            {
              "step": 48,
              "variableName": "runAtConfigurationTime(...) : LocationAwareException",
              "startLine": 631,
              "startColumn": 28,
              "endLine": 642,
              "endColumn": 6,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "    data class LoadResultMetadata(val originInvocationId: String? = null)\n\n    private\n    fun loadModel(): Any = runAtConfigurationTime {\n        // No need to record the `ClassLoaderScope` tree when loading\n        scopeRegistryListener.dispose()\n"
            },
            {
              "step": 49,
              "variableName": "loadModel()",
              "startLine": 268,
              "startColumn": 20,
              "endLine": 268,
              "endColumn": 31,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "    override fun <T : Any> loadOrCreateModel(creator: () -> T): T {\n        if (isLoaded) {\n            runLoadedSideEffects()\n            return loadModel().uncheckedCast()\n        }\n\n        return runWorkThatContributesToCacheEntry {"
            },
            {
              "step": 50,
              "variableName": "Any",
              "startLine": 22,
              "startColumn": 15,
              "endLine": 22,
              "endColumn": 18,
              "uri": "gradle-8.14.0/platforms/core-configuration/stdlib-kotlin-extensions/src/main/kotlin/org/gradle/internal/extensions/stdlib/CastExtensions.kt",
              "type": "Object",
              "code": "import org.gradle.internal.Cast\n\n\nfun <T : Any> Any.uncheckedCast(): T =\n    Cast.uncheckedNonnullCast(this)\n"
            },
            {
              "step": 51,
              "variableName": "this",
              "startLine": 23,
              "startColumn": 31,
              "endLine": 23,
              "endColumn": 35,
              "uri": "gradle-8.14.0/platforms/core-configuration/stdlib-kotlin-extensions/src/main/kotlin/org/gradle/internal/extensions/stdlib/CastExtensions.kt",
              "type": "Object",
              "code": "\n\nfun <T : Any> Any.uncheckedCast(): T =\n    Cast.uncheckedNonnullCast(this)\n"
            },
            {
              "step": 52,
              "variableName": "Object object",
              "startLine": 76,
              "startColumn": 46,
              "endLine": 76,
              "endColumn": 59,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/Cast.java",
              "type": "Object",
              "code": "    }\n\n    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})\n    public static <T> T uncheckedNonnullCast(Object object) {\n        return (T) object;\n    }\n}"
            },
            {
              "step": 53,
              "variableName": "(T) object",
              "startLine": 77,
              "startColumn": 16,
              "endLine": 77,
              "endColumn": 26,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/Cast.java",
              "type": "Object",
              "code": "\n    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})\n    public static <T> T uncheckedNonnullCast(Object object) {\n        return (T) object;\n    }\n}\n"
            },
            {
              "step": 54,
              "variableName": "Cast.uncheckedNonnullCast(defaultValue)",
              "startLine": 112,
              "startColumn": 73,
              "endLine": 112,
              "endColumn": 112,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/api/internal/provider/AbstractMinimalProvider.java",
              "type": "Object",
              "code": "\n    @Override\n    public T getOrElse(T defaultValue) {\n        return calculateOwnValue(ValueConsumer.IgnoreUnsafeRead).orElse(Cast.uncheckedNonnullCast(defaultValue));\n    }\n\n    @Override"
            },
            {
              "step": 55,
              "variableName": "T defaultValue",
              "startLine": 610,
              "startColumn": 25,
              "endLine": 610,
              "endColumn": 39,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/api/internal/provider/ValueSupplier.java",
              "type": "Object",
              "code": "        }\n\n        @Override\n        public T orElse(T defaultValue) {\n            return defaultValue;\n        }\n"
            },
            {
              "step": 56,
              "variableName": "defaultValue",
              "startLine": 611,
              "startColumn": 20,
              "endLine": 611,
              "endColumn": 32,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/api/internal/provider/ValueSupplier.java",
              "type": "Object",
              "code": "\n        @Override\n        public T orElse(T defaultValue) {\n            return defaultValue;\n        }\n\n        @Override"
            },
            {
              "step": 57,
              "variableName": "calculateOwnValue(ValueConsumer.IgnoreUnsafeRead).orElse(Cast.uncheckedNonnullCast(defaultValue))",
              "startLine": 112,
              "startColumn": 16,
              "endLine": 112,
              "endColumn": 113,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/api/internal/provider/AbstractMinimalProvider.java",
              "type": "Object",
              "code": "\n    @Override\n    public T getOrElse(T defaultValue) {\n        return calculateOwnValue(ValueConsumer.IgnoreUnsafeRead).orElse(Cast.uncheckedNonnullCast(defaultValue));\n    }\n\n    @Override"
            },
            {
              "step": 58,
              "variableName": "getNativeImageCapable().getOrElse(false)",
              "startLine": 105,
              "startColumn": 13,
              "endLine": 105,
              "endColumn": 53,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-configuration/src/main/java/org/gradle/buildconfiguration/tasks/UpdateDaemonJvm.java",
              "type": "Boolean",
              "code": "            getPropertiesFile().get().getAsFile(),\n            getLanguageVersion().get(),\n            jvmVendorCriteria,\n            getNativeImageCapable().getOrElse(false),\n            getToolchainDownloadUrls().get()\n        );\n    }"
            },
            {
              "step": 59,
              "variableName": "File propertiesFile",
              "startLine": 45,
              "startColumn": 9,
              "endLine": 45,
              "endColumn": 28,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-configuration/src/main/java/org/gradle/internal/buildconfiguration/tasks/DaemonJvmPropertiesModifier.java",
              "type": "File",
              "code": "    }\n\n    public void updateJvmCriteria(\n        File propertiesFile,\n        JavaLanguageVersion toolchainVersion,\n        @Nullable String toolchainVendor,\n        boolean nativeImageCapable,"
            },
            {
              "step": 60,
              "variableName": "propertiesFile",
              "startLine": 67,
              "startColumn": 33,
              "endLine": 67,
              "endColumn": 47,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-configuration/src/main/java/org/gradle/internal/buildconfiguration/tasks/DaemonJvmPropertiesModifier.java",
              "type": "File",
              "code": "            daemonJvmProperties.put(toolchainUrlProperty, uri.toString());\n        });\n\n        GFileUtils.parentMkdirs(propertiesFile);\n        try {\n            PropertiesUtils.store(daemonJvmProperties, propertiesFile, \"This file is generated by \" + DaemonJvmPropertiesConfigurator.TASK_NAME);\n        } catch (IOException e) {"
            },
            {
              "step": 61,
              "variableName": "File child",
              "startLine": 241,
              "startColumn": 37,
              "endLine": 241,
              "endColumn": 47,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/util/internal/GFileUtils.java",
              "type": "File",
              "code": "     * @return The parent dir file\n     * @see #mkdirs(java.io.File)\n     */\n    public static File parentMkdirs(File child) {\n        File parent = child.getParentFile();\n        mkdirs(parent);\n        return parent;"
            },
            {
              "step": 62,
              "variableName": "child",
              "startLine": 242,
              "startColumn": 23,
              "endLine": 242,
              "endColumn": 28,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/util/internal/GFileUtils.java",
              "type": "File",
              "code": "     * @see #mkdirs(java.io.File)\n     */\n    public static File parentMkdirs(File child) {\n        File parent = child.getParentFile();\n        mkdirs(parent);\n        return parent;\n    }"
            },
            {
              "step": 63,
              "variableName": "getParentFile",
              "startLine": 392,
              "startColumn": 21,
              "endLine": 392,
              "endColumn": 34,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "TestFile",
              "code": "    }\n\n    @Override\n    public TestFile getParentFile() {\n        return super.getParentFile() == null ? null : new TestFile(super.getParentFile());\n    }\n"
            },
            {
              "step": 64,
              "variableName": "super",
              "startLine": 393,
              "startColumn": 68,
              "endLine": 393,
              "endColumn": 73,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "TestFile",
              "code": "\n    @Override\n    public TestFile getParentFile() {\n        return super.getParentFile() == null ? null : new TestFile(super.getParentFile());\n    }\n\n    @Override"
            },
            {
              "step": 65,
              "variableName": "super.getParentFile()",
              "startLine": 393,
              "startColumn": 68,
              "endLine": 393,
              "endColumn": 89,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "File",
              "code": "\n    @Override\n    public TestFile getParentFile() {\n        return super.getParentFile() == null ? null : new TestFile(super.getParentFile());\n    }\n\n    @Override"
            },
            {
              "step": 66,
              "variableName": "File file",
              "startLine": 77,
              "startColumn": 21,
              "endLine": 77,
              "endColumn": 30,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "File",
              "code": "    private boolean useNativeTools;\n    private final File relativeBase;\n\n    public TestFile(File file, Object... path) {\n        super(join(file, path).getAbsolutePath());\n        this.relativeBase = file;\n    }"
            },
            {
              "step": 67,
              "variableName": "file",
              "startLine": 78,
              "startColumn": 20,
              "endLine": 78,
              "endColumn": 24,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "File",
              "code": "    private final File relativeBase;\n\n    public TestFile(File file, Object... path) {\n        super(join(file, path).getAbsolutePath());\n        this.relativeBase = file;\n    }\n"
            },
            {
              "step": 68,
              "variableName": "File file",
              "startLine": 126,
              "startColumn": 30,
              "endLine": 126,
              "endColumn": 39,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "File",
              "code": "        }\n    }\n\n    private static File join(File file, Object[] path) {\n        File current = file.getAbsoluteFile();\n        for (Object p : path) {\n            current = new File(current, p.toString());"
            },
            {
              "step": 69,
              "variableName": "file",
              "startLine": 127,
              "startColumn": 24,
              "endLine": 127,
              "endColumn": 28,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "File",
              "code": "    }\n\n    private static File join(File file, Object[] path) {\n        File current = file.getAbsoluteFile();\n        for (Object p : path) {\n            current = new File(current, p.toString());\n        }"
            },
            {
              "step": 70,
              "variableName": "file.getAbsoluteFile()",
              "startLine": 127,
              "startColumn": 24,
              "endLine": 127,
              "endColumn": 46,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "File",
              "code": "    }\n\n    private static File join(File file, Object[] path) {\n        File current = file.getAbsoluteFile();\n        for (Object p : path) {\n            current = new File(current, p.toString());\n        }"
            },
            {
              "step": 71,
              "variableName": "current",
              "startLine": 132,
              "startColumn": 20,
              "endLine": 132,
              "endColumn": 27,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "File",
              "code": "            current = new File(current, p.toString());\n        }\n        try {\n            return current.getCanonicalFile();\n        } catch (IOException e) {\n            throw new RuntimeException(String.format(\"Could not canonicalise '%s'.\", current), e);\n        }"
            },
            {
              "step": 72,
              "variableName": "getCanonicalFile",
              "startLine": 109,
              "startColumn": 17,
              "endLine": 109,
              "endColumn": 33,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "TestFile",
              "code": "    }\n\n    @Override\n    public File getCanonicalFile() throws IOException {\n        return new File(getAbsolutePath()).getCanonicalFile();\n    }\n"
            },
            {
              "step": 73,
              "variableName": "getAbsolutePath()",
              "startLine": 110,
              "startColumn": 25,
              "endLine": 110,
              "endColumn": 42,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "TestFile",
              "code": "\n    @Override\n    public File getCanonicalFile() throws IOException {\n        return new File(getAbsolutePath()).getCanonicalFile();\n    }\n\n    @Override"
            },
            {
              "step": 74,
              "variableName": "getAbsolutePath()",
              "startLine": 110,
              "startColumn": 25,
              "endLine": 110,
              "endColumn": 42,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "String",
              "code": "\n    @Override\n    public File getCanonicalFile() throws IOException {\n        return new File(getAbsolutePath()).getCanonicalFile();\n    }\n\n    @Override"
            },
            {
              "step": 75,
              "variableName": "new File(getAbsolutePath())",
              "startLine": 110,
              "startColumn": 16,
              "endLine": 110,
              "endColumn": 43,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "File",
              "code": "\n    @Override\n    public File getCanonicalFile() throws IOException {\n        return new File(getAbsolutePath()).getCanonicalFile();\n    }\n\n    @Override"
            },
            {
              "step": 76,
              "variableName": "new File(getAbsolutePath()).getCanonicalFile()",
              "startLine": 110,
              "startColumn": 16,
              "endLine": 110,
              "endColumn": 62,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "File",
              "code": "\n    @Override\n    public File getCanonicalFile() throws IOException {\n        return new File(getAbsolutePath()).getCanonicalFile();\n    }\n\n    @Override"
            },
            {
              "step": 77,
              "variableName": "current.getCanonicalFile()",
              "startLine": 132,
              "startColumn": 20,
              "endLine": 132,
              "endColumn": 46,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "File",
              "code": "            current = new File(current, p.toString());\n        }\n        try {\n            return current.getCanonicalFile();\n        } catch (IOException e) {\n            throw new RuntimeException(String.format(\"Could not canonicalise '%s'.\", current), e);\n        }"
            },
            {
              "step": 78,
              "variableName": "join(file, path)",
              "startLine": 78,
              "startColumn": 15,
              "endLine": 78,
              "endColumn": 31,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "File",
              "code": "    private final File relativeBase;\n\n    public TestFile(File file, Object... path) {\n        super(join(file, path).getAbsolutePath());\n        this.relativeBase = file;\n    }\n"
            },
            {
              "step": 79,
              "variableName": "join(file, path).getAbsolutePath()",
              "startLine": 78,
              "startColumn": 15,
              "endLine": 78,
              "endColumn": 49,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "String",
              "code": "    private final File relativeBase;\n\n    public TestFile(File file, Object... path) {\n        super(join(file, path).getAbsolutePath());\n        this.relativeBase = file;\n    }\n"
            },
            {
              "step": 80,
              "variableName": "super(join(file, path).getAbsolutePath());",
              "startLine": 78,
              "startColumn": 9,
              "endLine": 78,
              "endColumn": 51,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "TestFile",
              "code": "    private final File relativeBase;\n\n    public TestFile(File file, Object... path) {\n        super(join(file, path).getAbsolutePath());\n        this.relativeBase = file;\n    }\n"
            },
            {
              "step": 81,
              "variableName": "new TestFile(super.getParentFile())",
              "startLine": 393,
              "startColumn": 55,
              "endLine": 393,
              "endColumn": 90,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "TestFile",
              "code": "\n    @Override\n    public TestFile getParentFile() {\n        return super.getParentFile() == null ? null : new TestFile(super.getParentFile());\n    }\n\n    @Override"
            },
            {
              "step": 82,
              "variableName": "super.getParentFile() == null ? null : new TestFile(super.getParentFile())",
              "startLine": 393,
              "startColumn": 16,
              "endLine": 393,
              "endColumn": 90,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "... : TestFile",
              "code": "\n    @Override\n    public TestFile getParentFile() {\n        return super.getParentFile() == null ? null : new TestFile(super.getParentFile());\n    }\n\n    @Override"
            },
            {
              "step": 83,
              "variableName": "wrapperJar.getParentFile().getParentFile().getParentFile()",
              "startLine": 79,
              "startColumn": 16,
              "endLine": 79,
              "endColumn": 74,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-main/src/main/java/org/gradle/wrapper/GradleWrapperMain.java",
              "type": "TestFile",
              "code": "    }\n\n    private static File rootDir(File wrapperJar) {\n        return wrapperJar.getParentFile().getParentFile().getParentFile();\n    }\n\n    private static File wrapperProperties(File wrapperJar) {"
            },
            {
              "step": 84,
              "variableName": "rootDir(wrapperJar)",
              "startLine": 41,
              "startColumn": 24,
              "endLine": 41,
              "endColumn": 43,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-main/src/main/java/org/gradle/wrapper/GradleWrapperMain.java",
              "type": "TestFile",
              "code": "    public static void main(String[] args) throws Exception {\n        File wrapperJar = wrapperJar();\n        File propertiesFile = wrapperProperties(wrapperJar);\n        File rootDir = rootDir(wrapperJar);\n\n        CommandLineParser parser = new CommandLineParser();\n        parser.allowUnknownOptions();"
            },
            {
              "step": 85,
              "variableName": "rootDir",
              "startLine": 58,
              "startColumn": 63,
              "endLine": 58,
              "endColumn": 70,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-main/src/main/java/org/gradle/wrapper/GradleWrapperMain.java",
              "type": "TestFile",
              "code": "\n        File gradleUserHome = gradleUserHome(options);\n\n        addSystemProperties(systemProperties, gradleUserHome, rootDir);\n\n        Logger logger = logger(options);\n"
            },
            {
              "step": 86,
              "variableName": "rootDir",
              "startLine": 68,
              "startColumn": 81,
              "endLine": 68,
              "endColumn": 88,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-main/src/main/java/org/gradle/wrapper/GradleWrapperMain.java",
              "type": "TestFile",
              "code": "\n        wrapperExecutor.execute(\n                args,\n                new Install(logger, download, new PathAssembler(gradleUserHome, rootDir)),\n                new BootstrapMainStarter());\n    }\n"
            },
            {
              "step": 87,
              "variableName": "File projectDirectory",
              "startLine": 30,
              "startColumn": 47,
              "endLine": 30,
              "endColumn": 68,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/PathAssembler.java",
              "type": "TestFile",
              "code": "    private final File gradleUserHome;\n    private final File projectDirectory;\n\n    public PathAssembler(File gradleUserHome, File projectDirectory) {\n        this.gradleUserHome = gradleUserHome;\n        this.projectDirectory = projectDirectory;\n    }"
            },
            {
              "step": 88,
              "variableName": "projectDirectory",
              "startLine": 32,
              "startColumn": 33,
              "endLine": 32,
              "endColumn": 49,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/PathAssembler.java",
              "type": "TestFile",
              "code": "\n    public PathAssembler(File gradleUserHome, File projectDirectory) {\n        this.gradleUserHome = gradleUserHome;\n        this.projectDirectory = projectDirectory;\n    }\n\n    /**"
            },
            {
              "step": 89,
              "variableName": "this",
              "startLine": 32,
              "startColumn": 9,
              "endLine": 32,
              "endColumn": 13,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/PathAssembler.java",
              "type": "PathAssembler [projectDirectory] : TestFile",
              "code": "\n    public PathAssembler(File gradleUserHome, File projectDirectory) {\n        this.gradleUserHome = gradleUserHome;\n        this.projectDirectory = projectDirectory;\n    }\n\n    /**"
            },
            {
              "step": 90,
              "variableName": "new PathAssembler(gradleUserHome, rootDir)",
              "startLine": 68,
              "startColumn": 47,
              "endLine": 68,
              "endColumn": 89,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-main/src/main/java/org/gradle/wrapper/GradleWrapperMain.java",
              "type": "PathAssembler [projectDirectory] : TestFile",
              "code": "\n        wrapperExecutor.execute(\n                args,\n                new Install(logger, download, new PathAssembler(gradleUserHome, rootDir)),\n                new BootstrapMainStarter());\n    }\n"
            },
            {
              "step": 91,
              "variableName": "PathAssembler pathAssembler",
              "startLine": 56,
              "startColumn": 55,
              "endLine": 56,
              "endColumn": 82,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/Install.java",
              "type": "PathAssembler [projectDirectory] : TestFile",
              "code": "    private final PathAssembler pathAssembler;\n    private final ExclusiveFileAccessManager exclusiveFileAccessManager = new ExclusiveFileAccessManager(120000, 200);\n\n    public Install(Logger logger, IDownload download, PathAssembler pathAssembler) {\n        this.logger = logger;\n        this.download = download;\n        this.pathAssembler = pathAssembler;"
            },
            {
              "step": 92,
              "variableName": "pathAssembler",
              "startLine": 59,
              "startColumn": 30,
              "endLine": 59,
              "endColumn": 43,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/Install.java",
              "type": "PathAssembler [projectDirectory] : TestFile",
              "code": "    public Install(Logger logger, IDownload download, PathAssembler pathAssembler) {\n        this.logger = logger;\n        this.download = download;\n        this.pathAssembler = pathAssembler;\n    }\n\n    public File createDist(final WrapperConfiguration configuration) throws Exception {"
            },
            {
              "step": 93,
              "variableName": "this",
              "startLine": 59,
              "startColumn": 9,
              "endLine": 59,
              "endColumn": 13,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/Install.java",
              "type": "Install [pathAssembler, projectDirectory] : TestFile",
              "code": "    public Install(Logger logger, IDownload download, PathAssembler pathAssembler) {\n        this.logger = logger;\n        this.download = download;\n        this.pathAssembler = pathAssembler;\n    }\n\n    public File createDist(final WrapperConfiguration configuration) throws Exception {"
            },
            {
              "step": 94,
              "variableName": "new Install(logger, download, new PathAssembler(gradleUserHome, rootDir))",
              "startLine": 68,
              "startColumn": 17,
              "endLine": 68,
              "endColumn": 90,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-main/src/main/java/org/gradle/wrapper/GradleWrapperMain.java",
              "type": "Install [pathAssembler, projectDirectory] : TestFile",
              "code": "\n        wrapperExecutor.execute(\n                args,\n                new Install(logger, download, new PathAssembler(gradleUserHome, rootDir)),\n                new BootstrapMainStarter());\n    }\n"
            },
            {
              "step": 95,
              "variableName": "Install install",
              "startLine": 101,
              "startColumn": 40,
              "endLine": 101,
              "endColumn": 55,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/WrapperExecutor.java",
              "type": "Install [pathAssembler, projectDirectory] : TestFile",
              "code": "        return config;\n    }\n\n    public void execute(String[] args, Install install, BootstrapMainStarter bootstrapMainStarter) throws Exception {\n        File gradleHome = install.createDist(config);\n        bootstrapMainStarter.start(args, gradleHome);\n    }"
            },
            {
              "step": 96,
              "variableName": "install",
              "startLine": 102,
              "startColumn": 27,
              "endLine": 102,
              "endColumn": 34,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/WrapperExecutor.java",
              "type": "Install [pathAssembler, projectDirectory] : TestFile",
              "code": "    }\n\n    public void execute(String[] args, Install install, BootstrapMainStarter bootstrapMainStarter) throws Exception {\n        File gradleHome = install.createDist(config);\n        bootstrapMainStarter.start(args, gradleHome);\n    }\n"
            },
            {
              "step": 97,
              "variableName": "createDist",
              "startLine": 62,
              "startColumn": 17,
              "endLine": 62,
              "endColumn": 27,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/Install.java",
              "type": "Install [pathAssembler, projectDirectory] : TestFile",
              "code": "        this.pathAssembler = pathAssembler;\n    }\n\n    public File createDist(final WrapperConfiguration configuration) throws Exception {\n        final URI distributionUrl = configuration.getDistribution();\n\n        final PathAssembler.LocalDistribution localDistribution = pathAssembler.getDistribution(configuration);"
            },
            {
              "step": 98,
              "variableName": "pathAssembler",
              "startLine": 65,
              "startColumn": 67,
              "endLine": 65,
              "endColumn": 80,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/Install.java",
              "type": "Install [pathAssembler, projectDirectory] : TestFile",
              "code": "    public File createDist(final WrapperConfiguration configuration) throws Exception {\n        final URI distributionUrl = configuration.getDistribution();\n\n        final PathAssembler.LocalDistribution localDistribution = pathAssembler.getDistribution(configuration);\n        final File distDir = localDistribution.getDistributionDir();\n        final File localZipFile = localDistribution.getZipFile();\n"
            },
            {
              "step": 99,
              "variableName": "pathAssembler",
              "startLine": 65,
              "startColumn": 67,
              "endLine": 65,
              "endColumn": 80,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/Install.java",
              "type": "PathAssembler [projectDirectory] : TestFile",
              "code": "    public File createDist(final WrapperConfiguration configuration) throws Exception {\n        final URI distributionUrl = configuration.getDistribution();\n\n        final PathAssembler.LocalDistribution localDistribution = pathAssembler.getDistribution(configuration);\n        final File distDir = localDistribution.getDistributionDir();\n        final File localZipFile = localDistribution.getZipFile();\n"
            },
            {
              "step": 100,
              "variableName": "getDistribution",
              "startLine": 38,
              "startColumn": 30,
              "endLine": 38,
              "endColumn": 45,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/PathAssembler.java",
              "type": "PathAssembler [projectDirectory] : TestFile",
              "code": "    /**\n     * Determines the local locations for the distribution to use given the supplied configuration.\n     */\n    public LocalDistribution getDistribution(WrapperConfiguration configuration) {\n        String baseName = getDistName(configuration.getDistribution());\n        String distName = removeExtension(baseName);\n        String rootDirName = rootDirName(distName, configuration);"
            },
            {
              "step": 101,
              "variableName": "getBaseDir(configuration.getDistributionBase())",
              "startLine": 42,
              "startColumn": 33,
              "endLine": 42,
              "endColumn": 80,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/PathAssembler.java",
              "type": "PathAssembler [projectDirectory] : TestFile",
              "code": "        String baseName = getDistName(configuration.getDistribution());\n        String distName = removeExtension(baseName);\n        String rootDirName = rootDirName(distName, configuration);\n        File distDir = new File(getBaseDir(configuration.getDistributionBase()), configuration.getDistributionPath() + \"/\" + rootDirName);\n        File distZip = new File(getBaseDir(configuration.getZipBase()), configuration.getZipPath() + \"/\" + rootDirName + \"/\" + baseName);\n        return new LocalDistribution(distDir, distZip);\n    }"
            },
            {
              "step": 102,
              "variableName": "getBaseDir",
              "startLine": 91,
              "startColumn": 18,
              "endLine": 91,
              "endColumn": 28,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/PathAssembler.java",
              "type": "PathAssembler [projectDirectory] : TestFile",
              "code": "        return path.substring(p + 1);\n    }\n\n    private File getBaseDir(String base) {\n        if (base.equals(GRADLE_USER_HOME_STRING)) {\n            return gradleUserHome;\n        } else if (base.equals(PROJECT_STRING)) {"
            },
            {
              "step": 103,
              "variableName": "projectDirectory",
              "startLine": 95,
              "startColumn": 20,
              "endLine": 95,
              "endColumn": 36,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/PathAssembler.java",
              "type": "PathAssembler [projectDirectory] : TestFile",
              "code": "        if (base.equals(GRADLE_USER_HOME_STRING)) {\n            return gradleUserHome;\n        } else if (base.equals(PROJECT_STRING)) {\n            return projectDirectory;\n        } else {\n            throw new RuntimeException(\"Base: \" + base + \" is unknown\");\n        }"
            },
            {
              "step": 104,
              "variableName": "projectDirectory",
              "startLine": 95,
              "startColumn": 20,
              "endLine": 95,
              "endColumn": 36,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/PathAssembler.java",
              "type": "TestFile",
              "code": "        if (base.equals(GRADLE_USER_HOME_STRING)) {\n            return gradleUserHome;\n        } else if (base.equals(PROJECT_STRING)) {\n            return projectDirectory;\n        } else {\n            throw new RuntimeException(\"Base: \" + base + \" is unknown\");\n        }"
            },
            {
              "step": 105,
              "variableName": "getBaseDir(configuration.getDistributionBase())",
              "startLine": 42,
              "startColumn": 33,
              "endLine": 42,
              "endColumn": 80,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/PathAssembler.java",
              "type": "TestFile",
              "code": "        String baseName = getDistName(configuration.getDistribution());\n        String distName = removeExtension(baseName);\n        String rootDirName = rootDirName(distName, configuration);\n        File distDir = new File(getBaseDir(configuration.getDistributionBase()), configuration.getDistributionPath() + \"/\" + rootDirName);\n        File distZip = new File(getBaseDir(configuration.getZipBase()), configuration.getZipPath() + \"/\" + rootDirName + \"/\" + baseName);\n        return new LocalDistribution(distDir, distZip);\n    }"
            },
            {
              "step": 106,
              "variableName": "new File(getBaseDir(configuration.getDistributionBase()), configuration.getDistributionPath() + \"/\" + rootDirName)",
              "startLine": 42,
              "startColumn": 24,
              "endLine": 42,
              "endColumn": 138,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/PathAssembler.java",
              "type": "File",
              "code": "        String baseName = getDistName(configuration.getDistribution());\n        String distName = removeExtension(baseName);\n        String rootDirName = rootDirName(distName, configuration);\n        File distDir = new File(getBaseDir(configuration.getDistributionBase()), configuration.getDistributionPath() + \"/\" + rootDirName);\n        File distZip = new File(getBaseDir(configuration.getZipBase()), configuration.getZipPath() + \"/\" + rootDirName + \"/\" + baseName);\n        return new LocalDistribution(distDir, distZip);\n    }"
            },
            {
              "step": 107,
              "variableName": "distDir",
              "startLine": 44,
              "startColumn": 38,
              "endLine": 44,
              "endColumn": 45,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/PathAssembler.java",
              "type": "File",
              "code": "        String rootDirName = rootDirName(distName, configuration);\n        File distDir = new File(getBaseDir(configuration.getDistributionBase()), configuration.getDistributionPath() + \"/\" + rootDirName);\n        File distZip = new File(getBaseDir(configuration.getZipBase()), configuration.getZipPath() + \"/\" + rootDirName + \"/\" + baseName);\n        return new LocalDistribution(distDir, distZip);\n    }\n\n    private String rootDirName(String distName, WrapperConfiguration configuration) {"
            },
            {
              "step": 108,
              "variableName": "File distDir",
              "startLine": 105,
              "startColumn": 34,
              "endLine": 105,
              "endColumn": 46,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/PathAssembler.java",
              "type": "File",
              "code": "        private final File distZip;\n        private final File distDir;\n\n        public LocalDistribution(File distDir, File distZip) {\n            this.distDir = distDir;\n            this.distZip = distZip;\n        }"
            },
            {
              "step": 109,
              "variableName": "distDir",
              "startLine": 106,
              "startColumn": 28,
              "endLine": 106,
              "endColumn": 35,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/PathAssembler.java",
              "type": "File",
              "code": "        private final File distDir;\n\n        public LocalDistribution(File distDir, File distZip) {\n            this.distDir = distDir;\n            this.distZip = distZip;\n        }\n"
            },
            {
              "step": 110,
              "variableName": "this",
              "startLine": 106,
              "startColumn": 13,
              "endLine": 106,
              "endColumn": 17,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/PathAssembler.java",
              "type": "LocalDistribution [distDir] : File",
              "code": "        private final File distDir;\n\n        public LocalDistribution(File distDir, File distZip) {\n            this.distDir = distDir;\n            this.distZip = distZip;\n        }\n"
            },
            {
              "step": 111,
              "variableName": "new LocalDistribution(distDir, distZip)",
              "startLine": 44,
              "startColumn": 16,
              "endLine": 44,
              "endColumn": 55,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/PathAssembler.java",
              "type": "LocalDistribution [distDir] : File",
              "code": "        String rootDirName = rootDirName(distName, configuration);\n        File distDir = new File(getBaseDir(configuration.getDistributionBase()), configuration.getDistributionPath() + \"/\" + rootDirName);\n        File distZip = new File(getBaseDir(configuration.getZipBase()), configuration.getZipPath() + \"/\" + rootDirName + \"/\" + baseName);\n        return new LocalDistribution(distDir, distZip);\n    }\n\n    private String rootDirName(String distName, WrapperConfiguration configuration) {"
            },
            {
              "step": 112,
              "variableName": "pathAssembler.getDistribution(configuration)",
              "startLine": 65,
              "startColumn": 67,
              "endLine": 65,
              "endColumn": 111,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/Install.java",
              "type": "LocalDistribution [distDir] : File",
              "code": "    public File createDist(final WrapperConfiguration configuration) throws Exception {\n        final URI distributionUrl = configuration.getDistribution();\n\n        final PathAssembler.LocalDistribution localDistribution = pathAssembler.getDistribution(configuration);\n        final File distDir = localDistribution.getDistributionDir();\n        final File localZipFile = localDistribution.getZipFile();\n"
            },
            {
              "step": 113,
              "variableName": "localDistribution",
              "startLine": 66,
              "startColumn": 30,
              "endLine": 66,
              "endColumn": 47,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/Install.java",
              "type": "LocalDistribution [distDir] : File",
              "code": "        final URI distributionUrl = configuration.getDistribution();\n\n        final PathAssembler.LocalDistribution localDistribution = pathAssembler.getDistribution(configuration);\n        final File distDir = localDistribution.getDistributionDir();\n        final File localZipFile = localDistribution.getZipFile();\n\n        return exclusiveFileAccessManager.access(localZipFile, new Callable<File>() {"
            },
            {
              "step": 114,
              "variableName": "getDistributionDir",
              "startLine": 113,
              "startColumn": 21,
              "endLine": 113,
              "endColumn": 39,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/PathAssembler.java",
              "type": "LocalDistribution [distDir] : File",
              "code": "        /**\n         * Returns the location to install the distribution into.\n         */\n        public File getDistributionDir() {\n            return distDir;\n        }\n"
            },
            {
              "step": 115,
              "variableName": "distDir",
              "startLine": 114,
              "startColumn": 20,
              "endLine": 114,
              "endColumn": 27,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/PathAssembler.java",
              "type": "LocalDistribution [distDir] : File",
              "code": "         * Returns the location to install the distribution into.\n         */\n        public File getDistributionDir() {\n            return distDir;\n        }\n\n        /**"
            },
            {
              "step": 116,
              "variableName": "distDir",
              "startLine": 114,
              "startColumn": 20,
              "endLine": 114,
              "endColumn": 27,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/PathAssembler.java",
              "type": "File",
              "code": "         * Returns the location to install the distribution into.\n         */\n        public File getDistributionDir() {\n            return distDir;\n        }\n\n        /**"
            },
            {
              "step": 117,
              "variableName": "localDistribution.getDistributionDir()",
              "startLine": 66,
              "startColumn": 30,
              "endLine": 66,
              "endColumn": 68,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/Install.java",
              "type": "File",
              "code": "        final URI distributionUrl = configuration.getDistribution();\n\n        final PathAssembler.LocalDistribution localDistribution = pathAssembler.getDistribution(configuration);\n        final File distDir = localDistribution.getDistributionDir();\n        final File localZipFile = localDistribution.getZipFile();\n\n        return exclusiveFileAccessManager.access(localZipFile, new Callable<File>() {"
            },
            {
              "step": 118,
              "variableName": "File distDir : File",
              "startLine": 69,
              "startColumn": 64,
              "endLine": 95,
              "endColumn": 10,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/Install.java",
              "type": "File",
              "code": "        final File distDir = localDistribution.getDistributionDir();\n        final File localZipFile = localDistribution.getZipFile();\n\n        return exclusiveFileAccessManager.access(localZipFile, new Callable<File>() {\n            @Override\n            public File call() throws Exception {\n                final File markerFile = new File(localZipFile.getParentFile(), localZipFile.getName() + \".ok\");"
            },
            {
              "step": 119,
              "variableName": "new (...) : new Callable<File>(...) { ... } [File distDir] : File",
              "startLine": 69,
              "startColumn": 64,
              "endLine": 95,
              "endColumn": 10,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/Install.java",
              "type": "new Callable<File>(...) { ... } [File distDir] : File",
              "code": "        final File distDir = localDistribution.getDistributionDir();\n        final File localZipFile = localDistribution.getZipFile();\n\n        return exclusiveFileAccessManager.access(localZipFile, new Callable<File>() {\n            @Override\n            public File call() throws Exception {\n                final File markerFile = new File(localZipFile.getParentFile(), localZipFile.getName() + \".ok\");"
            },
            {
              "step": 120,
              "variableName": "Callable<T> task",
              "startLine": 38,
              "startColumn": 45,
              "endLine": 38,
              "endColumn": 61,
              "uri": "gradle-8.14.0/platforms/core-runtime/files/src/main/java/org/gradle/internal/file/locking/ExclusiveFileAccessManager.java",
              "type": "new Callable<File>(...) { ... } [File distDir] : File",
              "code": "        this.pollIntervalMs = pollIntervalMs;\n    }\n\n    public <T> T access(File exclusiveFile, Callable<T> task) throws Exception {\n        final File lockFile = new File(exclusiveFile.getParentFile(), exclusiveFile.getName() + LOCK_FILE_SUFFIX);\n        File lockFileDirectory = lockFile.getParentFile();\n        if (!lockFileDirectory.mkdirs()"
            },
            {
              "step": 121,
              "variableName": "task",
              "startLine": 69,
              "startColumn": 24,
              "endLine": 69,
              "endColumn": 28,
              "uri": "gradle-8.14.0/platforms/core-runtime/files/src/main/java/org/gradle/internal/file/locking/ExclusiveFileAccessManager.java",
              "type": "new Callable<File>(...) { ... } [File distDir] : File",
              "code": "            }\n\n            try {\n                return task.call();\n            } finally {\n                lock.release();\n"
            },
            {
              "step": 122,
              "variableName": "call",
              "startLine": 71,
              "startColumn": 25,
              "endLine": 71,
              "endColumn": 29,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/Install.java",
              "type": "new Callable<File>(...) { ... } [File distDir] : File",
              "code": "\n        return exclusiveFileAccessManager.access(localZipFile, new Callable<File>() {\n            @Override\n            public File call() throws Exception {\n                final File markerFile = new File(localZipFile.getParentFile(), localZipFile.getName() + \".ok\");\n                if (distDir.isDirectory() && markerFile.isFile()) {\n                    InstallCheck installCheck = verifyDistributionRoot(distDir, distDir.getAbsolutePath());"
            },
            {
              "step": 123,
              "variableName": "distDir",
              "startLine": 74,
              "startColumn": 72,
              "endLine": 74,
              "endColumn": 79,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/Install.java",
              "type": "new Callable<File>(...) { ... } [File distDir] : File",
              "code": "            public File call() throws Exception {\n                final File markerFile = new File(localZipFile.getParentFile(), localZipFile.getName() + \".ok\");\n                if (distDir.isDirectory() && markerFile.isFile()) {\n                    InstallCheck installCheck = verifyDistributionRoot(distDir, distDir.getAbsolutePath());\n                    if (installCheck.isVerified()) {\n                        return installCheck.gradleHome;\n                    }"
            },
            {
              "step": 124,
              "variableName": "distDir",
              "startLine": 74,
              "startColumn": 72,
              "endLine": 74,
              "endColumn": 79,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/Install.java",
              "type": "File",
              "code": "            public File call() throws Exception {\n                final File markerFile = new File(localZipFile.getParentFile(), localZipFile.getName() + \".ok\");\n                if (distDir.isDirectory() && markerFile.isFile()) {\n                    InstallCheck installCheck = verifyDistributionRoot(distDir, distDir.getAbsolutePath());\n                    if (installCheck.isVerified()) {\n                        return installCheck.gradleHome;\n                    }"
            },
            {
              "step": 125,
              "variableName": "String distributionDescription",
              "startLine": 209,
              "startColumn": 63,
              "endLine": 209,
              "endColumn": 93,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/Install.java",
              "type": "String",
              "code": "        return hexString.toString();\n    }\n\n    private InstallCheck verifyDistributionRoot(File distDir, String distributionDescription) {\n        List<File> dirs = listDirs(distDir);\n        if (dirs.isEmpty()) {\n            return InstallCheck.failure(format(\"Gradle distribution '%s' does not contain any directories. Expected to find exactly 1 directory.\", distributionDescription));"
            },
            {
              "step": 126,
              "variableName": "distributionDescription",
              "startLine": 212,
              "startColumn": 148,
              "endLine": 212,
              "endColumn": 171,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/Install.java",
              "type": "String",
              "code": "    private InstallCheck verifyDistributionRoot(File distDir, String distributionDescription) {\n        List<File> dirs = listDirs(distDir);\n        if (dirs.isEmpty()) {\n            return InstallCheck.failure(format(\"Gradle distribution '%s' does not contain any directories. Expected to find exactly 1 directory.\", distributionDescription));\n        }\n        if (dirs.size() != 1) {\n            return InstallCheck.failure(format(\"Gradle distribution '%s' contains too many directories. Expected to find exactly 1 directory.\", distributionDescription));"
            },
            {
              "step": 127,
              "variableName": "format(\"Gradle distribution '%s' does not contain any directories. Expected to find exactly 1 directory.\", distributionDescription)",
              "startLine": 212,
              "startColumn": 41,
              "endLine": 212,
              "endColumn": 172,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/Install.java",
              "type": "Object[] [[]] : String",
              "code": "    private InstallCheck verifyDistributionRoot(File distDir, String distributionDescription) {\n        List<File> dirs = listDirs(distDir);\n        if (dirs.isEmpty()) {\n            return InstallCheck.failure(format(\"Gradle distribution '%s' does not contain any directories. Expected to find exactly 1 directory.\", distributionDescription));\n        }\n        if (dirs.size() != 1) {\n            return InstallCheck.failure(format(\"Gradle distribution '%s' contains too many directories. Expected to find exactly 1 directory.\", distributionDescription));"
            },
            {
              "step": 128,
              "variableName": "format(\"Gradle distribution '%s' does not contain any directories. Expected to find exactly 1 directory.\", distributionDescription)",
              "startLine": 212,
              "startColumn": 41,
              "endLine": 212,
              "endColumn": 172,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/Install.java",
              "type": "String",
              "code": "    private InstallCheck verifyDistributionRoot(File distDir, String distributionDescription) {\n        List<File> dirs = listDirs(distDir);\n        if (dirs.isEmpty()) {\n            return InstallCheck.failure(format(\"Gradle distribution '%s' does not contain any directories. Expected to find exactly 1 directory.\", distributionDescription));\n        }\n        if (dirs.size() != 1) {\n            return InstallCheck.failure(format(\"Gradle distribution '%s' contains too many directories. Expected to find exactly 1 directory.\", distributionDescription));"
            },
            {
              "step": 129,
              "variableName": "String message",
              "startLine": 362,
              "startColumn": 45,
              "endLine": 362,
              "endColumn": 59,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/Install.java",
              "type": "String",
              "code": "        private final File gradleHome;\n        private final String failureMessage;\n\n        private static InstallCheck failure(String message) {\n            return new InstallCheck(null, message);\n        }\n"
            },
            {
              "step": 130,
              "variableName": "message",
              "startLine": 363,
              "startColumn": 43,
              "endLine": 363,
              "endColumn": 50,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/Install.java",
              "type": "String",
              "code": "        private final String failureMessage;\n\n        private static InstallCheck failure(String message) {\n            return new InstallCheck(null, message);\n        }\n\n        private static InstallCheck success(File gradleHome) {"
            },
            {
              "step": 131,
              "variableName": "String failureMessage",
              "startLine": 370,
              "startColumn": 47,
              "endLine": 370,
              "endColumn": 68,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/Install.java",
              "type": "String",
              "code": "            return new InstallCheck(gradleHome, null);\n        }\n\n        private InstallCheck(File gradleHome, String failureMessage) {\n            this.gradleHome = gradleHome;\n            this.failureMessage = failureMessage;\n        }"
            },
            {
              "step": 132,
              "variableName": "failureMessage",
              "startLine": 372,
              "startColumn": 35,
              "endLine": 372,
              "endColumn": 49,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/Install.java",
              "type": "String",
              "code": "\n        private InstallCheck(File gradleHome, String failureMessage) {\n            this.gradleHome = gradleHome;\n            this.failureMessage = failureMessage;\n        }\n\n        private boolean isVerified() {"
            },
            {
              "step": 133,
              "variableName": "this",
              "startLine": 372,
              "startColumn": 13,
              "endLine": 372,
              "endColumn": 17,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/Install.java",
              "type": "InstallCheck [failureMessage] : String",
              "code": "\n        private InstallCheck(File gradleHome, String failureMessage) {\n            this.gradleHome = gradleHome;\n            this.failureMessage = failureMessage;\n        }\n\n        private boolean isVerified() {"
            },
            {
              "step": 134,
              "variableName": "new InstallCheck(null, message)",
              "startLine": 363,
              "startColumn": 20,
              "endLine": 363,
              "endColumn": 51,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/Install.java",
              "type": "InstallCheck [failureMessage] : String",
              "code": "        private final String failureMessage;\n\n        private static InstallCheck failure(String message) {\n            return new InstallCheck(null, message);\n        }\n\n        private static InstallCheck success(File gradleHome) {"
            },
            {
              "step": 135,
              "variableName": "InstallCheck.failure(format(\"Gradle distribution '%s' does not contain any directories. Expected to find exactly 1 directory.\", distributionDescription))",
              "startLine": 212,
              "startColumn": 20,
              "endLine": 212,
              "endColumn": 173,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/Install.java",
              "type": "InstallCheck [failureMessage] : String",
              "code": "    private InstallCheck verifyDistributionRoot(File distDir, String distributionDescription) {\n        List<File> dirs = listDirs(distDir);\n        if (dirs.isEmpty()) {\n            return InstallCheck.failure(format(\"Gradle distribution '%s' does not contain any directories. Expected to find exactly 1 directory.\", distributionDescription));\n        }\n        if (dirs.size() != 1) {\n            return InstallCheck.failure(format(\"Gradle distribution '%s' contains too many directories. Expected to find exactly 1 directory.\", distributionDescription));"
            },
            {
              "step": 136,
              "variableName": "verifyDistributionRoot(distDir, distDir.getAbsolutePath())",
              "startLine": 74,
              "startColumn": 49,
              "endLine": 74,
              "endColumn": 107,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/Install.java",
              "type": "InstallCheck [failureMessage] : String",
              "code": "            public File call() throws Exception {\n                final File markerFile = new File(localZipFile.getParentFile(), localZipFile.getName() + \".ok\");\n                if (distDir.isDirectory() && markerFile.isFile()) {\n                    InstallCheck installCheck = verifyDistributionRoot(distDir, distDir.getAbsolutePath());\n                    if (installCheck.isVerified()) {\n                        return installCheck.gradleHome;\n                    }"
            },
            {
              "step": 137,
              "variableName": "installCheck",
              "startLine": 79,
              "startColumn": 40,
              "endLine": 79,
              "endColumn": 52,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/Install.java",
              "type": "InstallCheck [failureMessage] : String",
              "code": "                        return installCheck.gradleHome;\n                    }\n                    // Distribution is invalid. Try to reinstall.\n                    System.err.println(installCheck.failureMessage);\n                    markerFile.delete();\n                }\n"
            },
            {
              "step": 138,
              "variableName": "installCheck.failureMessage",
              "startLine": 79,
              "startColumn": 40,
              "endLine": 79,
              "endColumn": 67,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/Install.java",
              "type": "",
              "code": "                        return installCheck.gradleHome;\n                    }\n                    // Distribution is invalid. Try to reinstall.\n                    System.err.println(installCheck.failureMessage);\n                    markerFile.delete();\n                }\n"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "source",
              "startLine": 40,
              "startColumn": 39,
              "endLine": 40,
              "endColumn": 45,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/RegExpNameMapper.java",
              "type": "String",
              "code": "    @Override\n    public String transform(String source) {\n        if (matcher == null) {\n            matcher = pattern.matcher(source);\n        } else {\n            matcher.reset(source);\n        }"
            },
            {
              "step": 1,
              "variableName": "result",
              "startLine": 48,
              "startColumn": 16,
              "endLine": 48,
              "endColumn": 22,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/RegExpNameMapper.java",
              "type": "String",
              "code": "        if (matcher.find()) {\n            result = matcher.replaceFirst(replacement);\n        }\n        return result;\n    }\n}\n"
            },
            {
              "step": 2,
              "variableName": "transformer.transform(value)",
              "startLine": 37,
              "startColumn": 31,
              "endLine": 37,
              "endColumn": 59,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/ChainingTransformer.java",
              "type": "String",
              "code": "    public T transform(T original) {\n        T value = original;\n        for (Transformer<T, T> transformer : transformers) {\n            value = type.cast(transformer.transform(value));\n        }\n        return value;\n    }"
            },
            {
              "step": 3,
              "variableName": "type.cast(transformer.transform(value))",
              "startLine": 37,
              "startColumn": 21,
              "endLine": 37,
              "endColumn": 60,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/ChainingTransformer.java",
              "type": "String",
              "code": "    public T transform(T original) {\n        T value = original;\n        for (Transformer<T, T> transformer : transformers) {\n            value = type.cast(transformer.transform(value));\n        }\n        return value;\n    }"
            },
            {
              "step": 4,
              "variableName": "value",
              "startLine": 39,
              "startColumn": 16,
              "endLine": 39,
              "endColumn": 21,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/ChainingTransformer.java",
              "type": "String",
              "code": "        for (Transformer<T, T> transformer : transformers) {\n            value = type.cast(transformer.transform(value));\n        }\n        return value;\n    }\n\n    public void add(Transformer<T, T> transformer) {"
            },
            {
              "step": 5,
              "variableName": "describer.transform(this)",
              "startLine": 163,
              "startColumn": 16,
              "endLine": 163,
              "endColumn": 41,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/repositories/DefaultMavenArtifactRepository.java",
              "type": "String",
              "code": "\n    @Override\n    public String getDisplayName() {\n        return describer.transform(this);\n    }\n\n    @Override"
            },
            {
              "step": 6,
              "variableName": "describable.getDisplayName()",
              "startLine": 313,
              "startColumn": 35,
              "endLine": 313,
              "endColumn": 63,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "String",
              "code": "        public String getDisplayName() {\n            synchronized (this) {\n                if (displayName == null) {\n                    displayName = describable.getDisplayName();\n                    if (capDisplayName != null || !(describable instanceof DisplayName)) {\n                        describable = null;\n                    }"
            },
            {
              "step": 7,
              "variableName": "displayName",
              "startLine": 318,
              "startColumn": 24,
              "endLine": 318,
              "endColumn": 35,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "String",
              "code": "                        describable = null;\n                    }\n                }\n                return displayName;\n            }\n        }\n    }"
            },
            {
              "step": 8,
              "variableName": "displayName.getDisplayName()",
              "startLine": 772,
              "startColumn": 73,
              "endLine": 772,
              "endColumn": 101,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/configurations/DefaultConfiguration.java",
              "type": "String",
              "code": "                try {\n                    results = resolver.resolveGraph(DefaultConfiguration.this);\n                } catch (Exception e) {\n                    throw exceptionMapper.mapFailure(e, \"dependencies\", displayName.getDisplayName());\n                }\n\n                // Make the new state visible in case a dependency resolution listener queries the result, which requires the new state"
            },
            {
              "step": 9,
              "variableName": "String contextDisplayName",
              "startLine": 68,
              "startColumn": 77,
              "endLine": 68,
              "endColumn": 102,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "String",
              "code": "        return mapFailure(failure, type, displayName);\n    }\n\n    public TypedResolveException mapFailure(Throwable failure, String type, String contextDisplayName) {\n        if (!(failure instanceof TypedResolveException)) {\n            return new TypedResolveException(\n                type,"
            },
            {
              "step": 10,
              "variableName": "contextDisplayName",
              "startLine": 72,
              "startColumn": 17,
              "endLine": 72,
              "endColumn": 35,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "String",
              "code": "        if (!(failure instanceof TypedResolveException)) {\n            return new TypedResolveException(\n                type,\n                contextDisplayName,\n                ImmutableList.of(mapRepositoryOverrideFailure(contextDisplayName, failure))\n            );\n        }"
            },
            {
              "step": 11,
              "variableName": "new TypedResolveException(...) : TypedResolveException",
              "startLine": 70,
              "startColumn": 20,
              "endLine": 74,
              "endColumn": 14,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "TypedResolveException",
              "code": "\n    public TypedResolveException mapFailure(Throwable failure, String type, String contextDisplayName) {\n        if (!(failure instanceof TypedResolveException)) {\n            return new TypedResolveException(\n                type,\n                contextDisplayName,\n                ImmutableList.of(mapRepositoryOverrideFailure(contextDisplayName, failure))"
            },
            {
              "step": 12,
              "variableName": "exceptionMapper.mapFailure(e, \"dependencies\", displayName.getDisplayName())",
              "startLine": 772,
              "startColumn": 27,
              "endLine": 772,
              "endColumn": 102,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/configurations/DefaultConfiguration.java",
              "type": "TypedResolveException",
              "code": "                try {\n                    results = resolver.resolveGraph(DefaultConfiguration.this);\n                } catch (Exception e) {\n                    throw exceptionMapper.mapFailure(e, \"dependencies\", displayName.getDisplayName());\n                }\n\n                // Make the new state visible in case a dependency resolution listener queries the result, which requires the new state"
            },
            {
              "step": 13,
              "variableName": "e",
              "startLine": 772,
              "startColumn": 54,
              "endLine": 772,
              "endColumn": 55,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/configurations/DefaultConfiguration.java",
              "type": "Exception",
              "code": "                try {\n                    results = resolver.resolveGraph(DefaultConfiguration.this);\n                } catch (Exception e) {\n                    throw exceptionMapper.mapFailure(e, \"dependencies\", displayName.getDisplayName());\n                }\n\n                // Make the new state visible in case a dependency resolution listener queries the result, which requires the new state"
            },
            {
              "step": 14,
              "variableName": "Throwable failure",
              "startLine": 68,
              "startColumn": 45,
              "endLine": 68,
              "endColumn": 62,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Throwable",
              "code": "        return mapFailure(failure, type, displayName);\n    }\n\n    public TypedResolveException mapFailure(Throwable failure, String type, String contextDisplayName) {\n        if (!(failure instanceof TypedResolveException)) {\n            return new TypedResolveException(\n                type,"
            },
            {
              "step": 15,
              "variableName": "failure",
              "startLine": 73,
              "startColumn": 83,
              "endLine": 73,
              "endColumn": 90,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Throwable",
              "code": "            return new TypedResolveException(\n                type,\n                contextDisplayName,\n                ImmutableList.of(mapRepositoryOverrideFailure(contextDisplayName, failure))\n            );\n        }\n"
            },
            {
              "step": 16,
              "variableName": "Throwable failure",
              "startLine": 94,
              "startColumn": 78,
              "endLine": 94,
              "endColumn": 95,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Throwable",
              "code": "\n    // TODO: We should handle this exception at the source instead of using instanceof to detect it after it is thrown.\n    //       We should try to avoid catching and analyzing runtime exceptions\n    public Throwable mapRepositoryOverrideFailure(String contextDisplayName, Throwable failure) {\n        if (!(failure instanceof ModuleVersionNotFoundException) || !settingsRepositoriesIgnored()) {\n            return failure;\n        }"
            },
            {
              "step": 17,
              "variableName": "failure",
              "startLine": 108,
              "startColumn": 35,
              "endLine": 108,
              "endColumn": 42,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Throwable",
              "code": "        return new TypedResolveException(\n            \"dependencies\",\n            contextDisplayName,\n            Collections.singleton(failure),\n            resolutions\n        );\n    }"
            },
            {
              "step": 18,
              "variableName": "Collections.singleton(failure)",
              "startLine": 108,
              "startColumn": 13,
              "endLine": 108,
              "endColumn": 43,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Set [<element>] : Throwable",
              "code": "        return new TypedResolveException(\n            \"dependencies\",\n            contextDisplayName,\n            Collections.singleton(failure),\n            resolutions\n        );\n    }"
            },
            {
              "step": 19,
              "variableName": "Collections.singleton(failure)",
              "startLine": 108,
              "startColumn": 13,
              "endLine": 108,
              "endColumn": 43,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Set",
              "code": "        return new TypedResolveException(\n            \"dependencies\",\n            contextDisplayName,\n            Collections.singleton(failure),\n            resolutions\n        );\n    }"
            },
            {
              "step": 20,
              "variableName": "Iterable<? extends Throwable> failures",
              "startLine": 42,
              "startColumn": 67,
              "endLine": 42,
              "endColumn": 105,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ivyservice/TypedResolveException.java",
              "type": "Set",
              "code": "    /**\n     * Creates a new instance with resolutions.\n     */\n    public TypedResolveException(String type, String displayName, Iterable<? extends Throwable> failures, List<String> resolutions) {\n        super(buildMessage(type, displayName), failures, false);\n        this.type = type;\n        this.resolutions = ImmutableList.copyOf(resolutions);"
            },
            {
              "step": 21,
              "variableName": "failures",
              "startLine": 43,
              "startColumn": 48,
              "endLine": 43,
              "endColumn": 56,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ivyservice/TypedResolveException.java",
              "type": "Set",
              "code": "     * Creates a new instance with resolutions.\n     */\n    public TypedResolveException(String type, String displayName, Iterable<? extends Throwable> failures, List<String> resolutions) {\n        super(buildMessage(type, displayName), failures, false);\n        this.type = type;\n        this.resolutions = ImmutableList.copyOf(resolutions);\n    }"
            },
            {
              "step": 22,
              "variableName": "Iterable<? extends Throwable> causes",
              "startLine": 77,
              "startColumn": 48,
              "endLine": 77,
              "endColumn": 84,
              "uri": "gradle-8.14.0/subprojects/core-api/src/main/java/org/gradle/api/artifacts/ResolveException.java",
              "type": "Set",
              "code": "     * @since 8.9\n     */\n    @Incubating\n    protected ResolveException(String message, Iterable<? extends Throwable> causes, @SuppressWarnings(\"unused\") boolean dummy) {\n        super(message, causes);\n    }\n}"
            },
            {
              "step": 23,
              "variableName": "causes",
              "startLine": 78,
              "startColumn": 24,
              "endLine": 78,
              "endColumn": 30,
              "uri": "gradle-8.14.0/subprojects/core-api/src/main/java/org/gradle/api/artifacts/ResolveException.java",
              "type": "Set",
              "code": "     */\n    @Incubating\n    protected ResolveException(String message, Iterable<? extends Throwable> causes, @SuppressWarnings(\"unused\") boolean dummy) {\n        super(message, causes);\n    }\n}\n"
            },
            {
              "step": 24,
              "variableName": "Iterable<? extends Throwable> causes",
              "startLine": 47,
              "startColumn": 55,
              "endLine": 47,
              "endColumn": 91,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "Set",
              "code": "        this.causes.addAll(Arrays.asList(causes));\n    }\n\n    public DefaultMultiCauseException(String message, Iterable<? extends Throwable> causes) {\n        super(message);\n        this.message = message;\n        initCauses(causes);"
            },
            {
              "step": 25,
              "variableName": "causes",
              "startLine": 50,
              "startColumn": 20,
              "endLine": 50,
              "endColumn": 26,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "Set",
              "code": "    public DefaultMultiCauseException(String message, Iterable<? extends Throwable> causes) {\n        super(message);\n        this.message = message;\n        initCauses(causes);\n    }\n\n    public DefaultMultiCauseException(Factory<String> messageFactory) {"
            },
            {
              "step": 26,
              "variableName": "Iterable<? extends Throwable> causes",
              "startLine": 112,
              "startColumn": 28,
              "endLine": 112,
              "endColumn": 64,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "Iterable",
              "code": "        return null;\n    }\n\n    public void initCauses(Iterable<? extends Throwable> causes) {\n        this.causes.clear();\n        for (Throwable cause : causes) {\n            this.causes.add(cause);"
            },
            {
              "step": 27,
              "variableName": "cause",
              "startLine": 115,
              "startColumn": 29,
              "endLine": 115,
              "endColumn": 34,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "Throwable",
              "code": "    public void initCauses(Iterable<? extends Throwable> causes) {\n        this.causes.clear();\n        for (Throwable cause : causes) {\n            this.causes.add(cause);\n        }\n    }\n"
            },
            {
              "step": 28,
              "variableName": "this.causes",
              "startLine": 115,
              "startColumn": 13,
              "endLine": 115,
              "endColumn": 24,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "CopyOnWriteArrayList [<element>] : Throwable",
              "code": "    public void initCauses(Iterable<? extends Throwable> causes) {\n        this.causes.clear();\n        for (Throwable cause : causes) {\n            this.causes.add(cause);\n        }\n    }\n"
            },
            {
              "step": 29,
              "variableName": "this",
              "startLine": 115,
              "startColumn": 13,
              "endLine": 115,
              "endColumn": 17,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "DefaultMultiCauseException [causes, <element>] : Throwable",
              "code": "    public void initCauses(Iterable<? extends Throwable> causes) {\n        this.causes.clear();\n        for (Throwable cause : causes) {\n            this.causes.add(cause);\n        }\n    }\n"
            },
            {
              "step": 30,
              "variableName": "projectConfigurationException",
              "startLine": 57,
              "startColumn": 17,
              "endLine": 57,
              "endColumn": 46,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/DefaultExceptionAnalyser.java",
              "type": "ProjectConfigurationException [causes, <element>] : Throwable",
              "code": "                }\n            }\n            if (!additionalFailures.isEmpty()) {\n                projectConfigurationException.initCauses(additionalFailures);\n                failures.add(transform(projectConfigurationException));\n            }\n        } else if (exception instanceof ServiceCreationException) {"
            },
            {
              "step": 31,
              "variableName": "projectConfigurationException",
              "startLine": 58,
              "startColumn": 40,
              "endLine": 58,
              "endColumn": 69,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/DefaultExceptionAnalyser.java",
              "type": "ProjectConfigurationException [causes, <element>] : Throwable",
              "code": "            }\n            if (!additionalFailures.isEmpty()) {\n                projectConfigurationException.initCauses(additionalFailures);\n                failures.add(transform(projectConfigurationException));\n            }\n        } else if (exception instanceof ServiceCreationException) {\n            failures.add(transform(new InitializationException(exception)));"
            },
            {
              "step": 32,
              "variableName": "transform(projectConfigurationException)",
              "startLine": 58,
              "startColumn": 30,
              "endLine": 58,
              "endColumn": 70,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/DefaultExceptionAnalyser.java",
              "type": "LocationAwareException",
              "code": "            }\n            if (!additionalFailures.isEmpty()) {\n                projectConfigurationException.initCauses(additionalFailures);\n                failures.add(transform(projectConfigurationException));\n            }\n        } else if (exception instanceof ServiceCreationException) {\n            failures.add(transform(new InitializationException(exception)));"
            },
            {
              "step": 33,
              "variableName": "failures",
              "startLine": 58,
              "startColumn": 17,
              "endLine": 58,
              "endColumn": 25,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/DefaultExceptionAnalyser.java",
              "type": "Collection [<element>] : LocationAwareException",
              "code": "            }\n            if (!additionalFailures.isEmpty()) {\n                projectConfigurationException.initCauses(additionalFailures);\n                failures.add(transform(projectConfigurationException));\n            }\n        } else if (exception instanceof ServiceCreationException) {\n            failures.add(transform(new InitializationException(exception)));"
            },
            {
              "step": 34,
              "variableName": "result",
              "startLine": 53,
              "startColumn": 54,
              "endLine": 53,
              "endColumn": 60,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/MultipleBuildFailuresExceptionAnalyser.java",
              "type": "ArrayList [<element>] : LocationAwareException",
              "code": "        for (Throwable failure : failures) {\n            if (failure instanceof MultipleBuildFailures) {\n                for (Throwable cause : ((MultipleBuildFailures) failure).getCauses()) {\n                    collector.collectFailures(cause, result);\n                }\n            } else {\n                collector.collectFailures(failure, result);"
            },
            {
              "step": 35,
              "variableName": "result",
              "startLine": 60,
              "startColumn": 39,
              "endLine": 60,
              "endColumn": 45,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/MultipleBuildFailuresExceptionAnalyser.java",
              "type": "ArrayList [<element>] : LocationAwareException",
              "code": "            }\n        }\n        if (result.size() == 1 && result.get(0) instanceof RuntimeException) {\n            return (RuntimeException) result.get(0);\n        } else {\n            return new MultipleBuildFailures(result);\n        }"
            },
            {
              "step": 36,
              "variableName": "result.get(0)",
              "startLine": 60,
              "startColumn": 39,
              "endLine": 60,
              "endColumn": 52,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/MultipleBuildFailuresExceptionAnalyser.java",
              "type": "LocationAwareException",
              "code": "            }\n        }\n        if (result.size() == 1 && result.get(0) instanceof RuntimeException) {\n            return (RuntimeException) result.get(0);\n        } else {\n            return new MultipleBuildFailures(result);\n        }"
            },
            {
              "step": 37,
              "variableName": "(RuntimeException) result.get(0)",
              "startLine": 60,
              "startColumn": 20,
              "endLine": 60,
              "endColumn": 52,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/MultipleBuildFailuresExceptionAnalyser.java",
              "type": "LocationAwareException",
              "code": "            }\n        }\n        if (result.size() == 1 && result.get(0) instanceof RuntimeException) {\n            return (RuntimeException) result.get(0);\n        } else {\n            return new MultipleBuildFailures(result);\n        }"
            },
            {
              "step": 38,
              "variableName": "exceptionAnalyser.transform(finishFailures)",
              "startLine": 72,
              "startColumn": 16,
              "endLine": 72,
              "endColumn": 59,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/internal/buildtree/DefaultBuildTreeFinishExecutor.java",
              "type": "LocationAwareException",
              "code": "            finishFailures.addAll(result.getFailures());\n        });\n\n        return exceptionAnalyser.transform(finishFailures);\n    }\n}\n"
            },
            {
              "step": 39,
              "variableName": "delegate.finishBuildTree(failures)",
              "startLine": 46,
              "startColumn": 28,
              "endLine": 46,
              "endColumn": 62,
              "uri": "gradle-8.14.0/subprojects/composite-builds/src/main/java/org/gradle/composite/internal/OperationFiringBuildTreeFinishExecutor.java",
              "type": "LocationAwareException",
              "code": "            @Override\n            public RuntimeException call(BuildOperationContext context) {\n                try {\n                    return delegate.finishBuildTree(failures);\n                } finally {\n                    context.setResult(RESULT);\n                }"
            },
            {
              "step": 40,
              "variableName": "buildOperation.call(context)",
              "startLine": 239,
              "startColumn": 21,
              "endLine": 239,
              "endColumn": 49,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/testFixtures/java/org/gradle/internal/operations/TestBuildOperationRunner.java",
              "type": "LocationAwareException",
              "code": "            TestBuildOperationContext context = new TestBuildOperationContext(record);\n            T t;\n            try {\n                t = buildOperation.call(context);\n            } catch (Throwable failure) {\n                if (record.failure == null) {\n                    record.failure = failure;"
            },
            {
              "step": 41,
              "variableName": "t",
              "startLine": 246,
              "startColumn": 20,
              "endLine": 246,
              "endColumn": 21,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/testFixtures/java/org/gradle/internal/operations/TestBuildOperationRunner.java",
              "type": "LocationAwareException",
              "code": "                }\n                throw throwAsUncheckedException(failure);\n            }\n            return t;\n        }\n\n        private <O extends BuildOperation> void execute(O buildOperation, BuildOperationWorker<O> worker) {"
            },
            {
              "step": 42,
              "variableName": "log.call(buildOperation)",
              "startLine": 51,
              "startColumn": 16,
              "endLine": 51,
              "endColumn": 40,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/testFixtures/java/org/gradle/internal/operations/TestBuildOperationRunner.java",
              "type": "LocationAwareException",
              "code": "\n    @Override\n    public <T> T call(CallableBuildOperation<T> buildOperation) {\n        return log.call(buildOperation);\n    }\n\n    @Override"
            },
            {
              "step": 43,
              "variableName": "ca",
              "startLine": 115,
              "startColumn": 5,
              "endLine": 121,
              "endColumn": 7,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/configurationcache/ConfigurationCacheBuildOperations.kt",
              "type": "LocationAwareException",
              "code": "\ninternal\nfun <T : Any> BuildOperationRunner.withModelLoadOperation(block: () -> T): T =\n    call(object : CallableBuildOperation<T> {\n        override fun description(): BuildOperationDescriptor.Builder = BuildOperationDescriptor\n            .displayName(\"Load model from configuration cache\")\n            .progressDisplayName(\"Loading model from configuration cache\")"
            },
            {
              "step": 44,
              "variableName": "ca",
              "startLine": 115,
              "startColumn": 5,
              "endLine": 121,
              "endColumn": 7,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/configurationcache/ConfigurationCacheBuildOperations.kt",
              "type": "LocationAwareException",
              "code": "\ninternal\nfun <T : Any> BuildOperationRunner.withModelLoadOperation(block: () -> T): T =\n    call(object : CallableBuildOperation<T> {\n        override fun description(): BuildOperationDescriptor.Builder = BuildOperationDescriptor\n            .displayName(\"Load model from configuration cache\")\n            .progressDisplayName(\"Loading model from configuration cache\")"
            },
            {
              "step": 45,
              "variableName": "b",
              "startLine": 635,
              "startColumn": 9,
              "endLine": 641,
              "endColumn": 10,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "        // No need to record the `ClassLoaderScope` tree when loading\n        scopeRegistryListener.dispose()\n\n        buildOperationRunner.withModelLoadOperation {\n            val storeLoadResult = entryStore.useForStateLoad(StateType.Model) { stateFile: ConfigurationCacheStateFile ->\n                cacheIO.readModelFrom(stateFile)\n            }"
            },
            {
              "step": 46,
              "variableName": "block()",
              "startLine": 668,
              "startColumn": 22,
              "endLine": 668,
              "endColumn": 29,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "    private\n    inline fun <T> runAtConfigurationTime(block: () -> T): T {\n        prepareConfigurationTimeBarrier()\n        val result = block()\n        crossConfigurationTimeBarrier()\n        return result\n    }"
            },
            {
              "step": 47,
              "variableName": "result",
              "startLine": 670,
              "startColumn": 16,
              "endLine": 670,
              "endColumn": 22,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "        prepareConfigurationTimeBarrier()\n        val result = block()\n        crossConfigurationTimeBarrier()\n        return result\n    }\n\n    private"
            },
            {
              "step": 48,
              "variableName": "runAtConfigurationTime(...) : LocationAwareException",
              "startLine": 631,
              "startColumn": 28,
              "endLine": 642,
              "endColumn": 6,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "    data class LoadResultMetadata(val originInvocationId: String? = null)\n\n    private\n    fun loadModel(): Any = runAtConfigurationTime {\n        // No need to record the `ClassLoaderScope` tree when loading\n        scopeRegistryListener.dispose()\n"
            },
            {
              "step": 49,
              "variableName": "loadModel()",
              "startLine": 268,
              "startColumn": 20,
              "endLine": 268,
              "endColumn": 31,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "    override fun <T : Any> loadOrCreateModel(creator: () -> T): T {\n        if (isLoaded) {\n            runLoadedSideEffects()\n            return loadModel().uncheckedCast()\n        }\n\n        return runWorkThatContributesToCacheEntry {"
            },
            {
              "step": 50,
              "variableName": "Any",
              "startLine": 22,
              "startColumn": 15,
              "endLine": 22,
              "endColumn": 18,
              "uri": "gradle-8.14.0/platforms/core-configuration/stdlib-kotlin-extensions/src/main/kotlin/org/gradle/internal/extensions/stdlib/CastExtensions.kt",
              "type": "Object",
              "code": "import org.gradle.internal.Cast\n\n\nfun <T : Any> Any.uncheckedCast(): T =\n    Cast.uncheckedNonnullCast(this)\n"
            },
            {
              "step": 51,
              "variableName": "this",
              "startLine": 23,
              "startColumn": 31,
              "endLine": 23,
              "endColumn": 35,
              "uri": "gradle-8.14.0/platforms/core-configuration/stdlib-kotlin-extensions/src/main/kotlin/org/gradle/internal/extensions/stdlib/CastExtensions.kt",
              "type": "Object",
              "code": "\n\nfun <T : Any> Any.uncheckedCast(): T =\n    Cast.uncheckedNonnullCast(this)\n"
            },
            {
              "step": 52,
              "variableName": "Object object",
              "startLine": 76,
              "startColumn": 46,
              "endLine": 76,
              "endColumn": 59,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/Cast.java",
              "type": "Object",
              "code": "    }\n\n    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})\n    public static <T> T uncheckedNonnullCast(Object object) {\n        return (T) object;\n    }\n}"
            },
            {
              "step": 53,
              "variableName": "(T) object",
              "startLine": 77,
              "startColumn": 16,
              "endLine": 77,
              "endColumn": 26,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/Cast.java",
              "type": "Object",
              "code": "\n    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})\n    public static <T> T uncheckedNonnullCast(Object object) {\n        return (T) object;\n    }\n}\n"
            },
            {
              "step": 54,
              "variableName": "Cast.uncheckedNonnullCast(defaultValue)",
              "startLine": 112,
              "startColumn": 73,
              "endLine": 112,
              "endColumn": 112,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/api/internal/provider/AbstractMinimalProvider.java",
              "type": "Object",
              "code": "\n    @Override\n    public T getOrElse(T defaultValue) {\n        return calculateOwnValue(ValueConsumer.IgnoreUnsafeRead).orElse(Cast.uncheckedNonnullCast(defaultValue));\n    }\n\n    @Override"
            },
            {
              "step": 55,
              "variableName": "T defaultValue",
              "startLine": 610,
              "startColumn": 25,
              "endLine": 610,
              "endColumn": 39,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/api/internal/provider/ValueSupplier.java",
              "type": "Object",
              "code": "        }\n\n        @Override\n        public T orElse(T defaultValue) {\n            return defaultValue;\n        }\n"
            },
            {
              "step": 56,
              "variableName": "defaultValue",
              "startLine": 611,
              "startColumn": 20,
              "endLine": 611,
              "endColumn": 32,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/api/internal/provider/ValueSupplier.java",
              "type": "Object",
              "code": "\n        @Override\n        public T orElse(T defaultValue) {\n            return defaultValue;\n        }\n\n        @Override"
            },
            {
              "step": 57,
              "variableName": "calculateOwnValue(ValueConsumer.IgnoreUnsafeRead).orElse(Cast.uncheckedNonnullCast(defaultValue))",
              "startLine": 112,
              "startColumn": 16,
              "endLine": 112,
              "endColumn": 113,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/api/internal/provider/AbstractMinimalProvider.java",
              "type": "Object",
              "code": "\n    @Override\n    public T getOrElse(T defaultValue) {\n        return calculateOwnValue(ValueConsumer.IgnoreUnsafeRead).orElse(Cast.uncheckedNonnullCast(defaultValue));\n    }\n\n    @Override"
            },
            {
              "step": 58,
              "variableName": "getNativeImageCapable().getOrElse(false)",
              "startLine": 105,
              "startColumn": 13,
              "endLine": 105,
              "endColumn": 53,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-configuration/src/main/java/org/gradle/buildconfiguration/tasks/UpdateDaemonJvm.java",
              "type": "Boolean",
              "code": "            getPropertiesFile().get().getAsFile(),\n            getLanguageVersion().get(),\n            jvmVendorCriteria,\n            getNativeImageCapable().getOrElse(false),\n            getToolchainDownloadUrls().get()\n        );\n    }"
            },
            {
              "step": 59,
              "variableName": "File propertiesFile",
              "startLine": 45,
              "startColumn": 9,
              "endLine": 45,
              "endColumn": 28,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-configuration/src/main/java/org/gradle/internal/buildconfiguration/tasks/DaemonJvmPropertiesModifier.java",
              "type": "File",
              "code": "    }\n\n    public void updateJvmCriteria(\n        File propertiesFile,\n        JavaLanguageVersion toolchainVersion,\n        @Nullable String toolchainVendor,\n        boolean nativeImageCapable,"
            },
            {
              "step": 60,
              "variableName": "propertiesFile",
              "startLine": 67,
              "startColumn": 33,
              "endLine": 67,
              "endColumn": 47,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-configuration/src/main/java/org/gradle/internal/buildconfiguration/tasks/DaemonJvmPropertiesModifier.java",
              "type": "File",
              "code": "            daemonJvmProperties.put(toolchainUrlProperty, uri.toString());\n        });\n\n        GFileUtils.parentMkdirs(propertiesFile);\n        try {\n            PropertiesUtils.store(daemonJvmProperties, propertiesFile, \"This file is generated by \" + DaemonJvmPropertiesConfigurator.TASK_NAME);\n        } catch (IOException e) {"
            },
            {
              "step": 61,
              "variableName": "File child",
              "startLine": 241,
              "startColumn": 37,
              "endLine": 241,
              "endColumn": 47,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/util/internal/GFileUtils.java",
              "type": "File",
              "code": "     * @return The parent dir file\n     * @see #mkdirs(java.io.File)\n     */\n    public static File parentMkdirs(File child) {\n        File parent = child.getParentFile();\n        mkdirs(parent);\n        return parent;"
            },
            {
              "step": 62,
              "variableName": "child",
              "startLine": 242,
              "startColumn": 23,
              "endLine": 242,
              "endColumn": 28,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/util/internal/GFileUtils.java",
              "type": "File",
              "code": "     * @see #mkdirs(java.io.File)\n     */\n    public static File parentMkdirs(File child) {\n        File parent = child.getParentFile();\n        mkdirs(parent);\n        return parent;\n    }"
            },
            {
              "step": 63,
              "variableName": "getParentFile",
              "startLine": 392,
              "startColumn": 21,
              "endLine": 392,
              "endColumn": 34,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "TestFile",
              "code": "    }\n\n    @Override\n    public TestFile getParentFile() {\n        return super.getParentFile() == null ? null : new TestFile(super.getParentFile());\n    }\n"
            },
            {
              "step": 64,
              "variableName": "super",
              "startLine": 393,
              "startColumn": 68,
              "endLine": 393,
              "endColumn": 73,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "TestFile",
              "code": "\n    @Override\n    public TestFile getParentFile() {\n        return super.getParentFile() == null ? null : new TestFile(super.getParentFile());\n    }\n\n    @Override"
            },
            {
              "step": 65,
              "variableName": "super.getParentFile()",
              "startLine": 393,
              "startColumn": 68,
              "endLine": 393,
              "endColumn": 89,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "File",
              "code": "\n    @Override\n    public TestFile getParentFile() {\n        return super.getParentFile() == null ? null : new TestFile(super.getParentFile());\n    }\n\n    @Override"
            },
            {
              "step": 66,
              "variableName": "File file",
              "startLine": 77,
              "startColumn": 21,
              "endLine": 77,
              "endColumn": 30,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "File",
              "code": "    private boolean useNativeTools;\n    private final File relativeBase;\n\n    public TestFile(File file, Object... path) {\n        super(join(file, path).getAbsolutePath());\n        this.relativeBase = file;\n    }"
            },
            {
              "step": 67,
              "variableName": "file",
              "startLine": 78,
              "startColumn": 20,
              "endLine": 78,
              "endColumn": 24,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "File",
              "code": "    private final File relativeBase;\n\n    public TestFile(File file, Object... path) {\n        super(join(file, path).getAbsolutePath());\n        this.relativeBase = file;\n    }\n"
            },
            {
              "step": 68,
              "variableName": "File file",
              "startLine": 126,
              "startColumn": 30,
              "endLine": 126,
              "endColumn": 39,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "File",
              "code": "        }\n    }\n\n    private static File join(File file, Object[] path) {\n        File current = file.getAbsoluteFile();\n        for (Object p : path) {\n            current = new File(current, p.toString());"
            },
            {
              "step": 69,
              "variableName": "file",
              "startLine": 127,
              "startColumn": 24,
              "endLine": 127,
              "endColumn": 28,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "File",
              "code": "    }\n\n    private static File join(File file, Object[] path) {\n        File current = file.getAbsoluteFile();\n        for (Object p : path) {\n            current = new File(current, p.toString());\n        }"
            },
            {
              "step": 70,
              "variableName": "file.getAbsoluteFile()",
              "startLine": 127,
              "startColumn": 24,
              "endLine": 127,
              "endColumn": 46,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "File",
              "code": "    }\n\n    private static File join(File file, Object[] path) {\n        File current = file.getAbsoluteFile();\n        for (Object p : path) {\n            current = new File(current, p.toString());\n        }"
            },
            {
              "step": 71,
              "variableName": "current",
              "startLine": 132,
              "startColumn": 20,
              "endLine": 132,
              "endColumn": 27,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "File",
              "code": "            current = new File(current, p.toString());\n        }\n        try {\n            return current.getCanonicalFile();\n        } catch (IOException e) {\n            throw new RuntimeException(String.format(\"Could not canonicalise '%s'.\", current), e);\n        }"
            },
            {
              "step": 72,
              "variableName": "getCanonicalFile",
              "startLine": 109,
              "startColumn": 17,
              "endLine": 109,
              "endColumn": 33,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "TestFile",
              "code": "    }\n\n    @Override\n    public File getCanonicalFile() throws IOException {\n        return new File(getAbsolutePath()).getCanonicalFile();\n    }\n"
            },
            {
              "step": 73,
              "variableName": "getAbsolutePath()",
              "startLine": 110,
              "startColumn": 25,
              "endLine": 110,
              "endColumn": 42,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "TestFile",
              "code": "\n    @Override\n    public File getCanonicalFile() throws IOException {\n        return new File(getAbsolutePath()).getCanonicalFile();\n    }\n\n    @Override"
            },
            {
              "step": 74,
              "variableName": "getAbsolutePath()",
              "startLine": 110,
              "startColumn": 25,
              "endLine": 110,
              "endColumn": 42,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "String",
              "code": "\n    @Override\n    public File getCanonicalFile() throws IOException {\n        return new File(getAbsolutePath()).getCanonicalFile();\n    }\n\n    @Override"
            },
            {
              "step": 75,
              "variableName": "new File(getAbsolutePath())",
              "startLine": 110,
              "startColumn": 16,
              "endLine": 110,
              "endColumn": 43,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "File",
              "code": "\n    @Override\n    public File getCanonicalFile() throws IOException {\n        return new File(getAbsolutePath()).getCanonicalFile();\n    }\n\n    @Override"
            },
            {
              "step": 76,
              "variableName": "new File(getAbsolutePath()).getCanonicalFile()",
              "startLine": 110,
              "startColumn": 16,
              "endLine": 110,
              "endColumn": 62,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "File",
              "code": "\n    @Override\n    public File getCanonicalFile() throws IOException {\n        return new File(getAbsolutePath()).getCanonicalFile();\n    }\n\n    @Override"
            },
            {
              "step": 77,
              "variableName": "current.getCanonicalFile()",
              "startLine": 132,
              "startColumn": 20,
              "endLine": 132,
              "endColumn": 46,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "File",
              "code": "            current = new File(current, p.toString());\n        }\n        try {\n            return current.getCanonicalFile();\n        } catch (IOException e) {\n            throw new RuntimeException(String.format(\"Could not canonicalise '%s'.\", current), e);\n        }"
            },
            {
              "step": 78,
              "variableName": "join(file, path)",
              "startLine": 78,
              "startColumn": 15,
              "endLine": 78,
              "endColumn": 31,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "File",
              "code": "    private final File relativeBase;\n\n    public TestFile(File file, Object... path) {\n        super(join(file, path).getAbsolutePath());\n        this.relativeBase = file;\n    }\n"
            },
            {
              "step": 79,
              "variableName": "join(file, path).getAbsolutePath()",
              "startLine": 78,
              "startColumn": 15,
              "endLine": 78,
              "endColumn": 49,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "String",
              "code": "    private final File relativeBase;\n\n    public TestFile(File file, Object... path) {\n        super(join(file, path).getAbsolutePath());\n        this.relativeBase = file;\n    }\n"
            },
            {
              "step": 80,
              "variableName": "super(join(file, path).getAbsolutePath());",
              "startLine": 78,
              "startColumn": 9,
              "endLine": 78,
              "endColumn": 51,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "TestFile",
              "code": "    private final File relativeBase;\n\n    public TestFile(File file, Object... path) {\n        super(join(file, path).getAbsolutePath());\n        this.relativeBase = file;\n    }\n"
            },
            {
              "step": 81,
              "variableName": "new TestFile(super.getParentFile())",
              "startLine": 393,
              "startColumn": 55,
              "endLine": 393,
              "endColumn": 90,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "TestFile",
              "code": "\n    @Override\n    public TestFile getParentFile() {\n        return super.getParentFile() == null ? null : new TestFile(super.getParentFile());\n    }\n\n    @Override"
            },
            {
              "step": 82,
              "variableName": "super.getParentFile() == null ? null : new TestFile(super.getParentFile())",
              "startLine": 393,
              "startColumn": 16,
              "endLine": 393,
              "endColumn": 90,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "... : TestFile",
              "code": "\n    @Override\n    public TestFile getParentFile() {\n        return super.getParentFile() == null ? null : new TestFile(super.getParentFile());\n    }\n\n    @Override"
            },
            {
              "step": 83,
              "variableName": "wrapperJar.getParentFile().getParentFile().getParentFile()",
              "startLine": 79,
              "startColumn": 16,
              "endLine": 79,
              "endColumn": 74,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-main/src/main/java/org/gradle/wrapper/GradleWrapperMain.java",
              "type": "TestFile",
              "code": "    }\n\n    private static File rootDir(File wrapperJar) {\n        return wrapperJar.getParentFile().getParentFile().getParentFile();\n    }\n\n    private static File wrapperProperties(File wrapperJar) {"
            },
            {
              "step": 84,
              "variableName": "rootDir(wrapperJar)",
              "startLine": 41,
              "startColumn": 24,
              "endLine": 41,
              "endColumn": 43,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-main/src/main/java/org/gradle/wrapper/GradleWrapperMain.java",
              "type": "TestFile",
              "code": "    public static void main(String[] args) throws Exception {\n        File wrapperJar = wrapperJar();\n        File propertiesFile = wrapperProperties(wrapperJar);\n        File rootDir = rootDir(wrapperJar);\n\n        CommandLineParser parser = new CommandLineParser();\n        parser.allowUnknownOptions();"
            },
            {
              "step": 85,
              "variableName": "rootDir",
              "startLine": 58,
              "startColumn": 63,
              "endLine": 58,
              "endColumn": 70,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-main/src/main/java/org/gradle/wrapper/GradleWrapperMain.java",
              "type": "TestFile",
              "code": "\n        File gradleUserHome = gradleUserHome(options);\n\n        addSystemProperties(systemProperties, gradleUserHome, rootDir);\n\n        Logger logger = logger(options);\n"
            },
            {
              "step": 86,
              "variableName": "rootDir",
              "startLine": 68,
              "startColumn": 81,
              "endLine": 68,
              "endColumn": 88,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-main/src/main/java/org/gradle/wrapper/GradleWrapperMain.java",
              "type": "TestFile",
              "code": "\n        wrapperExecutor.execute(\n                args,\n                new Install(logger, download, new PathAssembler(gradleUserHome, rootDir)),\n                new BootstrapMainStarter());\n    }\n"
            },
            {
              "step": 87,
              "variableName": "File projectDirectory",
              "startLine": 30,
              "startColumn": 47,
              "endLine": 30,
              "endColumn": 68,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/PathAssembler.java",
              "type": "TestFile",
              "code": "    private final File gradleUserHome;\n    private final File projectDirectory;\n\n    public PathAssembler(File gradleUserHome, File projectDirectory) {\n        this.gradleUserHome = gradleUserHome;\n        this.projectDirectory = projectDirectory;\n    }"
            },
            {
              "step": 88,
              "variableName": "projectDirectory",
              "startLine": 32,
              "startColumn": 33,
              "endLine": 32,
              "endColumn": 49,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/PathAssembler.java",
              "type": "TestFile",
              "code": "\n    public PathAssembler(File gradleUserHome, File projectDirectory) {\n        this.gradleUserHome = gradleUserHome;\n        this.projectDirectory = projectDirectory;\n    }\n\n    /**"
            },
            {
              "step": 89,
              "variableName": "this",
              "startLine": 32,
              "startColumn": 9,
              "endLine": 32,
              "endColumn": 13,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/PathAssembler.java",
              "type": "PathAssembler [projectDirectory] : TestFile",
              "code": "\n    public PathAssembler(File gradleUserHome, File projectDirectory) {\n        this.gradleUserHome = gradleUserHome;\n        this.projectDirectory = projectDirectory;\n    }\n\n    /**"
            },
            {
              "step": 90,
              "variableName": "new PathAssembler(gradleUserHome, rootDir)",
              "startLine": 68,
              "startColumn": 47,
              "endLine": 68,
              "endColumn": 89,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-main/src/main/java/org/gradle/wrapper/GradleWrapperMain.java",
              "type": "PathAssembler [projectDirectory] : TestFile",
              "code": "\n        wrapperExecutor.execute(\n                args,\n                new Install(logger, download, new PathAssembler(gradleUserHome, rootDir)),\n                new BootstrapMainStarter());\n    }\n"
            },
            {
              "step": 91,
              "variableName": "PathAssembler pathAssembler",
              "startLine": 56,
              "startColumn": 55,
              "endLine": 56,
              "endColumn": 82,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/Install.java",
              "type": "PathAssembler [projectDirectory] : TestFile",
              "code": "    private final PathAssembler pathAssembler;\n    private final ExclusiveFileAccessManager exclusiveFileAccessManager = new ExclusiveFileAccessManager(120000, 200);\n\n    public Install(Logger logger, IDownload download, PathAssembler pathAssembler) {\n        this.logger = logger;\n        this.download = download;\n        this.pathAssembler = pathAssembler;"
            },
            {
              "step": 92,
              "variableName": "pathAssembler",
              "startLine": 59,
              "startColumn": 30,
              "endLine": 59,
              "endColumn": 43,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/Install.java",
              "type": "PathAssembler [projectDirectory] : TestFile",
              "code": "    public Install(Logger logger, IDownload download, PathAssembler pathAssembler) {\n        this.logger = logger;\n        this.download = download;\n        this.pathAssembler = pathAssembler;\n    }\n\n    public File createDist(final WrapperConfiguration configuration) throws Exception {"
            },
            {
              "step": 93,
              "variableName": "this",
              "startLine": 59,
              "startColumn": 9,
              "endLine": 59,
              "endColumn": 13,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/Install.java",
              "type": "Install [pathAssembler, projectDirectory] : TestFile",
              "code": "    public Install(Logger logger, IDownload download, PathAssembler pathAssembler) {\n        this.logger = logger;\n        this.download = download;\n        this.pathAssembler = pathAssembler;\n    }\n\n    public File createDist(final WrapperConfiguration configuration) throws Exception {"
            },
            {
              "step": 94,
              "variableName": "new Install(logger, download, new PathAssembler(gradleUserHome, rootDir))",
              "startLine": 68,
              "startColumn": 17,
              "endLine": 68,
              "endColumn": 90,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-main/src/main/java/org/gradle/wrapper/GradleWrapperMain.java",
              "type": "Install [pathAssembler, projectDirectory] : TestFile",
              "code": "\n        wrapperExecutor.execute(\n                args,\n                new Install(logger, download, new PathAssembler(gradleUserHome, rootDir)),\n                new BootstrapMainStarter());\n    }\n"
            },
            {
              "step": 95,
              "variableName": "Install install",
              "startLine": 101,
              "startColumn": 40,
              "endLine": 101,
              "endColumn": 55,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/WrapperExecutor.java",
              "type": "Install [pathAssembler, projectDirectory] : TestFile",
              "code": "        return config;\n    }\n\n    public void execute(String[] args, Install install, BootstrapMainStarter bootstrapMainStarter) throws Exception {\n        File gradleHome = install.createDist(config);\n        bootstrapMainStarter.start(args, gradleHome);\n    }"
            },
            {
              "step": 96,
              "variableName": "install",
              "startLine": 102,
              "startColumn": 27,
              "endLine": 102,
              "endColumn": 34,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/WrapperExecutor.java",
              "type": "Install [pathAssembler, projectDirectory] : TestFile",
              "code": "    }\n\n    public void execute(String[] args, Install install, BootstrapMainStarter bootstrapMainStarter) throws Exception {\n        File gradleHome = install.createDist(config);\n        bootstrapMainStarter.start(args, gradleHome);\n    }\n"
            },
            {
              "step": 97,
              "variableName": "createDist",
              "startLine": 62,
              "startColumn": 17,
              "endLine": 62,
              "endColumn": 27,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/Install.java",
              "type": "Install [pathAssembler, projectDirectory] : TestFile",
              "code": "        this.pathAssembler = pathAssembler;\n    }\n\n    public File createDist(final WrapperConfiguration configuration) throws Exception {\n        final URI distributionUrl = configuration.getDistribution();\n\n        final PathAssembler.LocalDistribution localDistribution = pathAssembler.getDistribution(configuration);"
            },
            {
              "step": 98,
              "variableName": "pathAssembler",
              "startLine": 65,
              "startColumn": 67,
              "endLine": 65,
              "endColumn": 80,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/Install.java",
              "type": "Install [pathAssembler, projectDirectory] : TestFile",
              "code": "    public File createDist(final WrapperConfiguration configuration) throws Exception {\n        final URI distributionUrl = configuration.getDistribution();\n\n        final PathAssembler.LocalDistribution localDistribution = pathAssembler.getDistribution(configuration);\n        final File distDir = localDistribution.getDistributionDir();\n        final File localZipFile = localDistribution.getZipFile();\n"
            },
            {
              "step": 99,
              "variableName": "pathAssembler",
              "startLine": 65,
              "startColumn": 67,
              "endLine": 65,
              "endColumn": 80,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/Install.java",
              "type": "PathAssembler [projectDirectory] : TestFile",
              "code": "    public File createDist(final WrapperConfiguration configuration) throws Exception {\n        final URI distributionUrl = configuration.getDistribution();\n\n        final PathAssembler.LocalDistribution localDistribution = pathAssembler.getDistribution(configuration);\n        final File distDir = localDistribution.getDistributionDir();\n        final File localZipFile = localDistribution.getZipFile();\n"
            },
            {
              "step": 100,
              "variableName": "getDistribution",
              "startLine": 38,
              "startColumn": 30,
              "endLine": 38,
              "endColumn": 45,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/PathAssembler.java",
              "type": "PathAssembler [projectDirectory] : TestFile",
              "code": "    /**\n     * Determines the local locations for the distribution to use given the supplied configuration.\n     */\n    public LocalDistribution getDistribution(WrapperConfiguration configuration) {\n        String baseName = getDistName(configuration.getDistribution());\n        String distName = removeExtension(baseName);\n        String rootDirName = rootDirName(distName, configuration);"
            },
            {
              "step": 101,
              "variableName": "getBaseDir(configuration.getDistributionBase())",
              "startLine": 42,
              "startColumn": 33,
              "endLine": 42,
              "endColumn": 80,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/PathAssembler.java",
              "type": "PathAssembler [projectDirectory] : TestFile",
              "code": "        String baseName = getDistName(configuration.getDistribution());\n        String distName = removeExtension(baseName);\n        String rootDirName = rootDirName(distName, configuration);\n        File distDir = new File(getBaseDir(configuration.getDistributionBase()), configuration.getDistributionPath() + \"/\" + rootDirName);\n        File distZip = new File(getBaseDir(configuration.getZipBase()), configuration.getZipPath() + \"/\" + rootDirName + \"/\" + baseName);\n        return new LocalDistribution(distDir, distZip);\n    }"
            },
            {
              "step": 102,
              "variableName": "getBaseDir",
              "startLine": 91,
              "startColumn": 18,
              "endLine": 91,
              "endColumn": 28,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/PathAssembler.java",
              "type": "PathAssembler [projectDirectory] : TestFile",
              "code": "        return path.substring(p + 1);\n    }\n\n    private File getBaseDir(String base) {\n        if (base.equals(GRADLE_USER_HOME_STRING)) {\n            return gradleUserHome;\n        } else if (base.equals(PROJECT_STRING)) {"
            },
            {
              "step": 103,
              "variableName": "projectDirectory",
              "startLine": 95,
              "startColumn": 20,
              "endLine": 95,
              "endColumn": 36,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/PathAssembler.java",
              "type": "PathAssembler [projectDirectory] : TestFile",
              "code": "        if (base.equals(GRADLE_USER_HOME_STRING)) {\n            return gradleUserHome;\n        } else if (base.equals(PROJECT_STRING)) {\n            return projectDirectory;\n        } else {\n            throw new RuntimeException(\"Base: \" + base + \" is unknown\");\n        }"
            },
            {
              "step": 104,
              "variableName": "projectDirectory",
              "startLine": 95,
              "startColumn": 20,
              "endLine": 95,
              "endColumn": 36,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/PathAssembler.java",
              "type": "TestFile",
              "code": "        if (base.equals(GRADLE_USER_HOME_STRING)) {\n            return gradleUserHome;\n        } else if (base.equals(PROJECT_STRING)) {\n            return projectDirectory;\n        } else {\n            throw new RuntimeException(\"Base: \" + base + \" is unknown\");\n        }"
            },
            {
              "step": 105,
              "variableName": "getBaseDir(configuration.getDistributionBase())",
              "startLine": 42,
              "startColumn": 33,
              "endLine": 42,
              "endColumn": 80,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/PathAssembler.java",
              "type": "TestFile",
              "code": "        String baseName = getDistName(configuration.getDistribution());\n        String distName = removeExtension(baseName);\n        String rootDirName = rootDirName(distName, configuration);\n        File distDir = new File(getBaseDir(configuration.getDistributionBase()), configuration.getDistributionPath() + \"/\" + rootDirName);\n        File distZip = new File(getBaseDir(configuration.getZipBase()), configuration.getZipPath() + \"/\" + rootDirName + \"/\" + baseName);\n        return new LocalDistribution(distDir, distZip);\n    }"
            },
            {
              "step": 106,
              "variableName": "new File(getBaseDir(configuration.getDistributionBase()), configuration.getDistributionPath() + \"/\" + rootDirName)",
              "startLine": 42,
              "startColumn": 24,
              "endLine": 42,
              "endColumn": 138,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/PathAssembler.java",
              "type": "File",
              "code": "        String baseName = getDistName(configuration.getDistribution());\n        String distName = removeExtension(baseName);\n        String rootDirName = rootDirName(distName, configuration);\n        File distDir = new File(getBaseDir(configuration.getDistributionBase()), configuration.getDistributionPath() + \"/\" + rootDirName);\n        File distZip = new File(getBaseDir(configuration.getZipBase()), configuration.getZipPath() + \"/\" + rootDirName + \"/\" + baseName);\n        return new LocalDistribution(distDir, distZip);\n    }"
            },
            {
              "step": 107,
              "variableName": "distDir",
              "startLine": 44,
              "startColumn": 38,
              "endLine": 44,
              "endColumn": 45,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/PathAssembler.java",
              "type": "File",
              "code": "        String rootDirName = rootDirName(distName, configuration);\n        File distDir = new File(getBaseDir(configuration.getDistributionBase()), configuration.getDistributionPath() + \"/\" + rootDirName);\n        File distZip = new File(getBaseDir(configuration.getZipBase()), configuration.getZipPath() + \"/\" + rootDirName + \"/\" + baseName);\n        return new LocalDistribution(distDir, distZip);\n    }\n\n    private String rootDirName(String distName, WrapperConfiguration configuration) {"
            },
            {
              "step": 108,
              "variableName": "File distDir",
              "startLine": 105,
              "startColumn": 34,
              "endLine": 105,
              "endColumn": 46,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/PathAssembler.java",
              "type": "File",
              "code": "        private final File distZip;\n        private final File distDir;\n\n        public LocalDistribution(File distDir, File distZip) {\n            this.distDir = distDir;\n            this.distZip = distZip;\n        }"
            },
            {
              "step": 109,
              "variableName": "distDir",
              "startLine": 106,
              "startColumn": 28,
              "endLine": 106,
              "endColumn": 35,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/PathAssembler.java",
              "type": "File",
              "code": "        private final File distDir;\n\n        public LocalDistribution(File distDir, File distZip) {\n            this.distDir = distDir;\n            this.distZip = distZip;\n        }\n"
            },
            {
              "step": 110,
              "variableName": "this",
              "startLine": 106,
              "startColumn": 13,
              "endLine": 106,
              "endColumn": 17,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/PathAssembler.java",
              "type": "LocalDistribution [distDir] : File",
              "code": "        private final File distDir;\n\n        public LocalDistribution(File distDir, File distZip) {\n            this.distDir = distDir;\n            this.distZip = distZip;\n        }\n"
            },
            {
              "step": 111,
              "variableName": "new LocalDistribution(distDir, distZip)",
              "startLine": 44,
              "startColumn": 16,
              "endLine": 44,
              "endColumn": 55,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/PathAssembler.java",
              "type": "LocalDistribution [distDir] : File",
              "code": "        String rootDirName = rootDirName(distName, configuration);\n        File distDir = new File(getBaseDir(configuration.getDistributionBase()), configuration.getDistributionPath() + \"/\" + rootDirName);\n        File distZip = new File(getBaseDir(configuration.getZipBase()), configuration.getZipPath() + \"/\" + rootDirName + \"/\" + baseName);\n        return new LocalDistribution(distDir, distZip);\n    }\n\n    private String rootDirName(String distName, WrapperConfiguration configuration) {"
            },
            {
              "step": 112,
              "variableName": "pathAssembler.getDistribution(configuration)",
              "startLine": 65,
              "startColumn": 67,
              "endLine": 65,
              "endColumn": 111,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/Install.java",
              "type": "LocalDistribution [distDir] : File",
              "code": "    public File createDist(final WrapperConfiguration configuration) throws Exception {\n        final URI distributionUrl = configuration.getDistribution();\n\n        final PathAssembler.LocalDistribution localDistribution = pathAssembler.getDistribution(configuration);\n        final File distDir = localDistribution.getDistributionDir();\n        final File localZipFile = localDistribution.getZipFile();\n"
            },
            {
              "step": 113,
              "variableName": "localDistribution",
              "startLine": 66,
              "startColumn": 30,
              "endLine": 66,
              "endColumn": 47,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/Install.java",
              "type": "LocalDistribution [distDir] : File",
              "code": "        final URI distributionUrl = configuration.getDistribution();\n\n        final PathAssembler.LocalDistribution localDistribution = pathAssembler.getDistribution(configuration);\n        final File distDir = localDistribution.getDistributionDir();\n        final File localZipFile = localDistribution.getZipFile();\n\n        return exclusiveFileAccessManager.access(localZipFile, new Callable<File>() {"
            },
            {
              "step": 114,
              "variableName": "getDistributionDir",
              "startLine": 113,
              "startColumn": 21,
              "endLine": 113,
              "endColumn": 39,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/PathAssembler.java",
              "type": "LocalDistribution [distDir] : File",
              "code": "        /**\n         * Returns the location to install the distribution into.\n         */\n        public File getDistributionDir() {\n            return distDir;\n        }\n"
            },
            {
              "step": 115,
              "variableName": "distDir",
              "startLine": 114,
              "startColumn": 20,
              "endLine": 114,
              "endColumn": 27,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/PathAssembler.java",
              "type": "LocalDistribution [distDir] : File",
              "code": "         * Returns the location to install the distribution into.\n         */\n        public File getDistributionDir() {\n            return distDir;\n        }\n\n        /**"
            },
            {
              "step": 116,
              "variableName": "distDir",
              "startLine": 114,
              "startColumn": 20,
              "endLine": 114,
              "endColumn": 27,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/PathAssembler.java",
              "type": "File",
              "code": "         * Returns the location to install the distribution into.\n         */\n        public File getDistributionDir() {\n            return distDir;\n        }\n\n        /**"
            },
            {
              "step": 117,
              "variableName": "localDistribution.getDistributionDir()",
              "startLine": 66,
              "startColumn": 30,
              "endLine": 66,
              "endColumn": 68,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/Install.java",
              "type": "File",
              "code": "        final URI distributionUrl = configuration.getDistribution();\n\n        final PathAssembler.LocalDistribution localDistribution = pathAssembler.getDistribution(configuration);\n        final File distDir = localDistribution.getDistributionDir();\n        final File localZipFile = localDistribution.getZipFile();\n\n        return exclusiveFileAccessManager.access(localZipFile, new Callable<File>() {"
            },
            {
              "step": 118,
              "variableName": "File distDir : File",
              "startLine": 69,
              "startColumn": 64,
              "endLine": 95,
              "endColumn": 10,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/Install.java",
              "type": "File",
              "code": "        final File distDir = localDistribution.getDistributionDir();\n        final File localZipFile = localDistribution.getZipFile();\n\n        return exclusiveFileAccessManager.access(localZipFile, new Callable<File>() {\n            @Override\n            public File call() throws Exception {\n                final File markerFile = new File(localZipFile.getParentFile(), localZipFile.getName() + \".ok\");"
            },
            {
              "step": 119,
              "variableName": "new (...) : new Callable<File>(...) { ... } [File distDir] : File",
              "startLine": 69,
              "startColumn": 64,
              "endLine": 95,
              "endColumn": 10,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/Install.java",
              "type": "new Callable<File>(...) { ... } [File distDir] : File",
              "code": "        final File distDir = localDistribution.getDistributionDir();\n        final File localZipFile = localDistribution.getZipFile();\n\n        return exclusiveFileAccessManager.access(localZipFile, new Callable<File>() {\n            @Override\n            public File call() throws Exception {\n                final File markerFile = new File(localZipFile.getParentFile(), localZipFile.getName() + \".ok\");"
            },
            {
              "step": 120,
              "variableName": "Callable<T> task",
              "startLine": 38,
              "startColumn": 45,
              "endLine": 38,
              "endColumn": 61,
              "uri": "gradle-8.14.0/platforms/core-runtime/files/src/main/java/org/gradle/internal/file/locking/ExclusiveFileAccessManager.java",
              "type": "new Callable<File>(...) { ... } [File distDir] : File",
              "code": "        this.pollIntervalMs = pollIntervalMs;\n    }\n\n    public <T> T access(File exclusiveFile, Callable<T> task) throws Exception {\n        final File lockFile = new File(exclusiveFile.getParentFile(), exclusiveFile.getName() + LOCK_FILE_SUFFIX);\n        File lockFileDirectory = lockFile.getParentFile();\n        if (!lockFileDirectory.mkdirs()"
            },
            {
              "step": 121,
              "variableName": "task",
              "startLine": 69,
              "startColumn": 24,
              "endLine": 69,
              "endColumn": 28,
              "uri": "gradle-8.14.0/platforms/core-runtime/files/src/main/java/org/gradle/internal/file/locking/ExclusiveFileAccessManager.java",
              "type": "new Callable<File>(...) { ... } [File distDir] : File",
              "code": "            }\n\n            try {\n                return task.call();\n            } finally {\n                lock.release();\n"
            },
            {
              "step": 122,
              "variableName": "call",
              "startLine": 71,
              "startColumn": 25,
              "endLine": 71,
              "endColumn": 29,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/Install.java",
              "type": "new Callable<File>(...) { ... } [File distDir] : File",
              "code": "\n        return exclusiveFileAccessManager.access(localZipFile, new Callable<File>() {\n            @Override\n            public File call() throws Exception {\n                final File markerFile = new File(localZipFile.getParentFile(), localZipFile.getName() + \".ok\");\n                if (distDir.isDirectory() && markerFile.isFile()) {\n                    InstallCheck installCheck = verifyDistributionRoot(distDir, distDir.getAbsolutePath());"
            },
            {
              "step": 123,
              "variableName": "distDir",
              "startLine": 74,
              "startColumn": 72,
              "endLine": 74,
              "endColumn": 79,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/Install.java",
              "type": "new Callable<File>(...) { ... } [File distDir] : File",
              "code": "            public File call() throws Exception {\n                final File markerFile = new File(localZipFile.getParentFile(), localZipFile.getName() + \".ok\");\n                if (distDir.isDirectory() && markerFile.isFile()) {\n                    InstallCheck installCheck = verifyDistributionRoot(distDir, distDir.getAbsolutePath());\n                    if (installCheck.isVerified()) {\n                        return installCheck.gradleHome;\n                    }"
            },
            {
              "step": 124,
              "variableName": "distDir",
              "startLine": 74,
              "startColumn": 72,
              "endLine": 74,
              "endColumn": 79,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/Install.java",
              "type": "File",
              "code": "            public File call() throws Exception {\n                final File markerFile = new File(localZipFile.getParentFile(), localZipFile.getName() + \".ok\");\n                if (distDir.isDirectory() && markerFile.isFile()) {\n                    InstallCheck installCheck = verifyDistributionRoot(distDir, distDir.getAbsolutePath());\n                    if (installCheck.isVerified()) {\n                        return installCheck.gradleHome;\n                    }"
            },
            {
              "step": 125,
              "variableName": "String distributionDescription",
              "startLine": 209,
              "startColumn": 63,
              "endLine": 209,
              "endColumn": 93,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/Install.java",
              "type": "String",
              "code": "        return hexString.toString();\n    }\n\n    private InstallCheck verifyDistributionRoot(File distDir, String distributionDescription) {\n        List<File> dirs = listDirs(distDir);\n        if (dirs.isEmpty()) {\n            return InstallCheck.failure(format(\"Gradle distribution '%s' does not contain any directories. Expected to find exactly 1 directory.\", distributionDescription));"
            },
            {
              "step": 126,
              "variableName": "distributionDescription",
              "startLine": 212,
              "startColumn": 148,
              "endLine": 212,
              "endColumn": 171,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/Install.java",
              "type": "String",
              "code": "    private InstallCheck verifyDistributionRoot(File distDir, String distributionDescription) {\n        List<File> dirs = listDirs(distDir);\n        if (dirs.isEmpty()) {\n            return InstallCheck.failure(format(\"Gradle distribution '%s' does not contain any directories. Expected to find exactly 1 directory.\", distributionDescription));\n        }\n        if (dirs.size() != 1) {\n            return InstallCheck.failure(format(\"Gradle distribution '%s' contains too many directories. Expected to find exactly 1 directory.\", distributionDescription));"
            },
            {
              "step": 127,
              "variableName": "format(\"Gradle distribution '%s' does not contain any directories. Expected to find exactly 1 directory.\", distributionDescription)",
              "startLine": 212,
              "startColumn": 41,
              "endLine": 212,
              "endColumn": 172,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/Install.java",
              "type": "Object[] [[]] : String",
              "code": "    private InstallCheck verifyDistributionRoot(File distDir, String distributionDescription) {\n        List<File> dirs = listDirs(distDir);\n        if (dirs.isEmpty()) {\n            return InstallCheck.failure(format(\"Gradle distribution '%s' does not contain any directories. Expected to find exactly 1 directory.\", distributionDescription));\n        }\n        if (dirs.size() != 1) {\n            return InstallCheck.failure(format(\"Gradle distribution '%s' contains too many directories. Expected to find exactly 1 directory.\", distributionDescription));"
            },
            {
              "step": 128,
              "variableName": "format(\"Gradle distribution '%s' does not contain any directories. Expected to find exactly 1 directory.\", distributionDescription)",
              "startLine": 212,
              "startColumn": 41,
              "endLine": 212,
              "endColumn": 172,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/Install.java",
              "type": "String",
              "code": "    private InstallCheck verifyDistributionRoot(File distDir, String distributionDescription) {\n        List<File> dirs = listDirs(distDir);\n        if (dirs.isEmpty()) {\n            return InstallCheck.failure(format(\"Gradle distribution '%s' does not contain any directories. Expected to find exactly 1 directory.\", distributionDescription));\n        }\n        if (dirs.size() != 1) {\n            return InstallCheck.failure(format(\"Gradle distribution '%s' contains too many directories. Expected to find exactly 1 directory.\", distributionDescription));"
            },
            {
              "step": 129,
              "variableName": "String message",
              "startLine": 362,
              "startColumn": 45,
              "endLine": 362,
              "endColumn": 59,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/Install.java",
              "type": "String",
              "code": "        private final File gradleHome;\n        private final String failureMessage;\n\n        private static InstallCheck failure(String message) {\n            return new InstallCheck(null, message);\n        }\n"
            },
            {
              "step": 130,
              "variableName": "message",
              "startLine": 363,
              "startColumn": 43,
              "endLine": 363,
              "endColumn": 50,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/Install.java",
              "type": "String",
              "code": "        private final String failureMessage;\n\n        private static InstallCheck failure(String message) {\n            return new InstallCheck(null, message);\n        }\n\n        private static InstallCheck success(File gradleHome) {"
            },
            {
              "step": 131,
              "variableName": "String failureMessage",
              "startLine": 370,
              "startColumn": 47,
              "endLine": 370,
              "endColumn": 68,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/Install.java",
              "type": "String",
              "code": "            return new InstallCheck(gradleHome, null);\n        }\n\n        private InstallCheck(File gradleHome, String failureMessage) {\n            this.gradleHome = gradleHome;\n            this.failureMessage = failureMessage;\n        }"
            },
            {
              "step": 132,
              "variableName": "failureMessage",
              "startLine": 372,
              "startColumn": 35,
              "endLine": 372,
              "endColumn": 49,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/Install.java",
              "type": "String",
              "code": "\n        private InstallCheck(File gradleHome, String failureMessage) {\n            this.gradleHome = gradleHome;\n            this.failureMessage = failureMessage;\n        }\n\n        private boolean isVerified() {"
            },
            {
              "step": 133,
              "variableName": "this",
              "startLine": 372,
              "startColumn": 13,
              "endLine": 372,
              "endColumn": 17,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/Install.java",
              "type": "InstallCheck [failureMessage] : String",
              "code": "\n        private InstallCheck(File gradleHome, String failureMessage) {\n            this.gradleHome = gradleHome;\n            this.failureMessage = failureMessage;\n        }\n\n        private boolean isVerified() {"
            },
            {
              "step": 134,
              "variableName": "new InstallCheck(null, message)",
              "startLine": 363,
              "startColumn": 20,
              "endLine": 363,
              "endColumn": 51,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/Install.java",
              "type": "InstallCheck [failureMessage] : String",
              "code": "        private final String failureMessage;\n\n        private static InstallCheck failure(String message) {\n            return new InstallCheck(null, message);\n        }\n\n        private static InstallCheck success(File gradleHome) {"
            },
            {
              "step": 135,
              "variableName": "InstallCheck.failure(format(\"Gradle distribution '%s' does not contain any directories. Expected to find exactly 1 directory.\", distributionDescription))",
              "startLine": 212,
              "startColumn": 20,
              "endLine": 212,
              "endColumn": 173,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/Install.java",
              "type": "InstallCheck [failureMessage] : String",
              "code": "    private InstallCheck verifyDistributionRoot(File distDir, String distributionDescription) {\n        List<File> dirs = listDirs(distDir);\n        if (dirs.isEmpty()) {\n            return InstallCheck.failure(format(\"Gradle distribution '%s' does not contain any directories. Expected to find exactly 1 directory.\", distributionDescription));\n        }\n        if (dirs.size() != 1) {\n            return InstallCheck.failure(format(\"Gradle distribution '%s' contains too many directories. Expected to find exactly 1 directory.\", distributionDescription));"
            },
            {
              "step": 136,
              "variableName": "verifyDistributionRoot(distDir, distDir.getAbsolutePath())",
              "startLine": 74,
              "startColumn": 49,
              "endLine": 74,
              "endColumn": 107,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/Install.java",
              "type": "InstallCheck [failureMessage] : String",
              "code": "            public File call() throws Exception {\n                final File markerFile = new File(localZipFile.getParentFile(), localZipFile.getName() + \".ok\");\n                if (distDir.isDirectory() && markerFile.isFile()) {\n                    InstallCheck installCheck = verifyDistributionRoot(distDir, distDir.getAbsolutePath());\n                    if (installCheck.isVerified()) {\n                        return installCheck.gradleHome;\n                    }"
            },
            {
              "step": 137,
              "variableName": "installCheck",
              "startLine": 79,
              "startColumn": 40,
              "endLine": 79,
              "endColumn": 52,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/Install.java",
              "type": "InstallCheck [failureMessage] : String",
              "code": "                        return installCheck.gradleHome;\n                    }\n                    // Distribution is invalid. Try to reinstall.\n                    System.err.println(installCheck.failureMessage);\n                    markerFile.delete();\n                }\n"
            },
            {
              "step": 138,
              "variableName": "installCheck.failureMessage",
              "startLine": 79,
              "startColumn": 40,
              "endLine": 79,
              "endColumn": 67,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/Install.java",
              "type": "",
              "code": "                        return installCheck.gradleHome;\n                    }\n                    // Distribution is invalid. Try to reinstall.\n                    System.err.println(installCheck.failureMessage);\n                    markerFile.delete();\n                }\n"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "source",
              "startLine": 42,
              "startColumn": 27,
              "endLine": 42,
              "endColumn": 33,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/RegExpNameMapper.java",
              "type": "String",
              "code": "        if (matcher == null) {\n            matcher = pattern.matcher(source);\n        } else {\n            matcher.reset(source);\n        }\n        String result = source;\n        if (matcher.find()) {"
            },
            {
              "step": 1,
              "variableName": "result",
              "startLine": 48,
              "startColumn": 16,
              "endLine": 48,
              "endColumn": 22,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/RegExpNameMapper.java",
              "type": "String",
              "code": "        if (matcher.find()) {\n            result = matcher.replaceFirst(replacement);\n        }\n        return result;\n    }\n}\n"
            },
            {
              "step": 2,
              "variableName": "transformer.transform(value)",
              "startLine": 37,
              "startColumn": 31,
              "endLine": 37,
              "endColumn": 59,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/ChainingTransformer.java",
              "type": "String",
              "code": "    public T transform(T original) {\n        T value = original;\n        for (Transformer<T, T> transformer : transformers) {\n            value = type.cast(transformer.transform(value));\n        }\n        return value;\n    }"
            },
            {
              "step": 3,
              "variableName": "type.cast(transformer.transform(value))",
              "startLine": 37,
              "startColumn": 21,
              "endLine": 37,
              "endColumn": 60,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/ChainingTransformer.java",
              "type": "String",
              "code": "    public T transform(T original) {\n        T value = original;\n        for (Transformer<T, T> transformer : transformers) {\n            value = type.cast(transformer.transform(value));\n        }\n        return value;\n    }"
            },
            {
              "step": 4,
              "variableName": "value",
              "startLine": 39,
              "startColumn": 16,
              "endLine": 39,
              "endColumn": 21,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/ChainingTransformer.java",
              "type": "String",
              "code": "        for (Transformer<T, T> transformer : transformers) {\n            value = type.cast(transformer.transform(value));\n        }\n        return value;\n    }\n\n    public void add(Transformer<T, T> transformer) {"
            },
            {
              "step": 5,
              "variableName": "describer.transform(this)",
              "startLine": 163,
              "startColumn": 16,
              "endLine": 163,
              "endColumn": 41,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/repositories/DefaultMavenArtifactRepository.java",
              "type": "String",
              "code": "\n    @Override\n    public String getDisplayName() {\n        return describer.transform(this);\n    }\n\n    @Override"
            },
            {
              "step": 6,
              "variableName": "describable.getDisplayName()",
              "startLine": 313,
              "startColumn": 35,
              "endLine": 313,
              "endColumn": 63,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "String",
              "code": "        public String getDisplayName() {\n            synchronized (this) {\n                if (displayName == null) {\n                    displayName = describable.getDisplayName();\n                    if (capDisplayName != null || !(describable instanceof DisplayName)) {\n                        describable = null;\n                    }"
            },
            {
              "step": 7,
              "variableName": "displayName",
              "startLine": 318,
              "startColumn": 24,
              "endLine": 318,
              "endColumn": 35,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "String",
              "code": "                        describable = null;\n                    }\n                }\n                return displayName;\n            }\n        }\n    }"
            },
            {
              "step": 8,
              "variableName": "displayName.getDisplayName()",
              "startLine": 772,
              "startColumn": 73,
              "endLine": 772,
              "endColumn": 101,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/configurations/DefaultConfiguration.java",
              "type": "String",
              "code": "                try {\n                    results = resolver.resolveGraph(DefaultConfiguration.this);\n                } catch (Exception e) {\n                    throw exceptionMapper.mapFailure(e, \"dependencies\", displayName.getDisplayName());\n                }\n\n                // Make the new state visible in case a dependency resolution listener queries the result, which requires the new state"
            },
            {
              "step": 9,
              "variableName": "String contextDisplayName",
              "startLine": 68,
              "startColumn": 77,
              "endLine": 68,
              "endColumn": 102,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "String",
              "code": "        return mapFailure(failure, type, displayName);\n    }\n\n    public TypedResolveException mapFailure(Throwable failure, String type, String contextDisplayName) {\n        if (!(failure instanceof TypedResolveException)) {\n            return new TypedResolveException(\n                type,"
            },
            {
              "step": 10,
              "variableName": "contextDisplayName",
              "startLine": 72,
              "startColumn": 17,
              "endLine": 72,
              "endColumn": 35,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "String",
              "code": "        if (!(failure instanceof TypedResolveException)) {\n            return new TypedResolveException(\n                type,\n                contextDisplayName,\n                ImmutableList.of(mapRepositoryOverrideFailure(contextDisplayName, failure))\n            );\n        }"
            },
            {
              "step": 11,
              "variableName": "new TypedResolveException(...) : TypedResolveException",
              "startLine": 70,
              "startColumn": 20,
              "endLine": 74,
              "endColumn": 14,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "TypedResolveException",
              "code": "\n    public TypedResolveException mapFailure(Throwable failure, String type, String contextDisplayName) {\n        if (!(failure instanceof TypedResolveException)) {\n            return new TypedResolveException(\n                type,\n                contextDisplayName,\n                ImmutableList.of(mapRepositoryOverrideFailure(contextDisplayName, failure))"
            },
            {
              "step": 12,
              "variableName": "exceptionMapper.mapFailure(e, \"dependencies\", displayName.getDisplayName())",
              "startLine": 772,
              "startColumn": 27,
              "endLine": 772,
              "endColumn": 102,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/configurations/DefaultConfiguration.java",
              "type": "TypedResolveException",
              "code": "                try {\n                    results = resolver.resolveGraph(DefaultConfiguration.this);\n                } catch (Exception e) {\n                    throw exceptionMapper.mapFailure(e, \"dependencies\", displayName.getDisplayName());\n                }\n\n                // Make the new state visible in case a dependency resolution listener queries the result, which requires the new state"
            },
            {
              "step": 13,
              "variableName": "e",
              "startLine": 772,
              "startColumn": 54,
              "endLine": 772,
              "endColumn": 55,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/configurations/DefaultConfiguration.java",
              "type": "Exception",
              "code": "                try {\n                    results = resolver.resolveGraph(DefaultConfiguration.this);\n                } catch (Exception e) {\n                    throw exceptionMapper.mapFailure(e, \"dependencies\", displayName.getDisplayName());\n                }\n\n                // Make the new state visible in case a dependency resolution listener queries the result, which requires the new state"
            },
            {
              "step": 14,
              "variableName": "Throwable failure",
              "startLine": 68,
              "startColumn": 45,
              "endLine": 68,
              "endColumn": 62,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Throwable",
              "code": "        return mapFailure(failure, type, displayName);\n    }\n\n    public TypedResolveException mapFailure(Throwable failure, String type, String contextDisplayName) {\n        if (!(failure instanceof TypedResolveException)) {\n            return new TypedResolveException(\n                type,"
            },
            {
              "step": 15,
              "variableName": "failure",
              "startLine": 73,
              "startColumn": 83,
              "endLine": 73,
              "endColumn": 90,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Throwable",
              "code": "            return new TypedResolveException(\n                type,\n                contextDisplayName,\n                ImmutableList.of(mapRepositoryOverrideFailure(contextDisplayName, failure))\n            );\n        }\n"
            },
            {
              "step": 16,
              "variableName": "Throwable failure",
              "startLine": 94,
              "startColumn": 78,
              "endLine": 94,
              "endColumn": 95,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Throwable",
              "code": "\n    // TODO: We should handle this exception at the source instead of using instanceof to detect it after it is thrown.\n    //       We should try to avoid catching and analyzing runtime exceptions\n    public Throwable mapRepositoryOverrideFailure(String contextDisplayName, Throwable failure) {\n        if (!(failure instanceof ModuleVersionNotFoundException) || !settingsRepositoriesIgnored()) {\n            return failure;\n        }"
            },
            {
              "step": 17,
              "variableName": "failure",
              "startLine": 108,
              "startColumn": 35,
              "endLine": 108,
              "endColumn": 42,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Throwable",
              "code": "        return new TypedResolveException(\n            \"dependencies\",\n            contextDisplayName,\n            Collections.singleton(failure),\n            resolutions\n        );\n    }"
            },
            {
              "step": 18,
              "variableName": "Collections.singleton(failure)",
              "startLine": 108,
              "startColumn": 13,
              "endLine": 108,
              "endColumn": 43,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Set [<element>] : Throwable",
              "code": "        return new TypedResolveException(\n            \"dependencies\",\n            contextDisplayName,\n            Collections.singleton(failure),\n            resolutions\n        );\n    }"
            },
            {
              "step": 19,
              "variableName": "Collections.singleton(failure)",
              "startLine": 108,
              "startColumn": 13,
              "endLine": 108,
              "endColumn": 43,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Set",
              "code": "        return new TypedResolveException(\n            \"dependencies\",\n            contextDisplayName,\n            Collections.singleton(failure),\n            resolutions\n        );\n    }"
            },
            {
              "step": 20,
              "variableName": "Iterable<? extends Throwable> failures",
              "startLine": 42,
              "startColumn": 67,
              "endLine": 42,
              "endColumn": 105,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ivyservice/TypedResolveException.java",
              "type": "Set",
              "code": "    /**\n     * Creates a new instance with resolutions.\n     */\n    public TypedResolveException(String type, String displayName, Iterable<? extends Throwable> failures, List<String> resolutions) {\n        super(buildMessage(type, displayName), failures, false);\n        this.type = type;\n        this.resolutions = ImmutableList.copyOf(resolutions);"
            },
            {
              "step": 21,
              "variableName": "failures",
              "startLine": 43,
              "startColumn": 48,
              "endLine": 43,
              "endColumn": 56,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ivyservice/TypedResolveException.java",
              "type": "Set",
              "code": "     * Creates a new instance with resolutions.\n     */\n    public TypedResolveException(String type, String displayName, Iterable<? extends Throwable> failures, List<String> resolutions) {\n        super(buildMessage(type, displayName), failures, false);\n        this.type = type;\n        this.resolutions = ImmutableList.copyOf(resolutions);\n    }"
            },
            {
              "step": 22,
              "variableName": "Iterable<? extends Throwable> causes",
              "startLine": 77,
              "startColumn": 48,
              "endLine": 77,
              "endColumn": 84,
              "uri": "gradle-8.14.0/subprojects/core-api/src/main/java/org/gradle/api/artifacts/ResolveException.java",
              "type": "Set",
              "code": "     * @since 8.9\n     */\n    @Incubating\n    protected ResolveException(String message, Iterable<? extends Throwable> causes, @SuppressWarnings(\"unused\") boolean dummy) {\n        super(message, causes);\n    }\n}"
            },
            {
              "step": 23,
              "variableName": "causes",
              "startLine": 78,
              "startColumn": 24,
              "endLine": 78,
              "endColumn": 30,
              "uri": "gradle-8.14.0/subprojects/core-api/src/main/java/org/gradle/api/artifacts/ResolveException.java",
              "type": "Set",
              "code": "     */\n    @Incubating\n    protected ResolveException(String message, Iterable<? extends Throwable> causes, @SuppressWarnings(\"unused\") boolean dummy) {\n        super(message, causes);\n    }\n}\n"
            },
            {
              "step": 24,
              "variableName": "Iterable<? extends Throwable> causes",
              "startLine": 47,
              "startColumn": 55,
              "endLine": 47,
              "endColumn": 91,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "Set",
              "code": "        this.causes.addAll(Arrays.asList(causes));\n    }\n\n    public DefaultMultiCauseException(String message, Iterable<? extends Throwable> causes) {\n        super(message);\n        this.message = message;\n        initCauses(causes);"
            },
            {
              "step": 25,
              "variableName": "causes",
              "startLine": 50,
              "startColumn": 20,
              "endLine": 50,
              "endColumn": 26,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "Set",
              "code": "    public DefaultMultiCauseException(String message, Iterable<? extends Throwable> causes) {\n        super(message);\n        this.message = message;\n        initCauses(causes);\n    }\n\n    public DefaultMultiCauseException(Factory<String> messageFactory) {"
            },
            {
              "step": 26,
              "variableName": "Iterable<? extends Throwable> causes",
              "startLine": 112,
              "startColumn": 28,
              "endLine": 112,
              "endColumn": 64,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "Iterable",
              "code": "        return null;\n    }\n\n    public void initCauses(Iterable<? extends Throwable> causes) {\n        this.causes.clear();\n        for (Throwable cause : causes) {\n            this.causes.add(cause);"
            },
            {
              "step": 27,
              "variableName": "cause",
              "startLine": 115,
              "startColumn": 29,
              "endLine": 115,
              "endColumn": 34,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "Throwable",
              "code": "    public void initCauses(Iterable<? extends Throwable> causes) {\n        this.causes.clear();\n        for (Throwable cause : causes) {\n            this.causes.add(cause);\n        }\n    }\n"
            },
            {
              "step": 28,
              "variableName": "this.causes",
              "startLine": 115,
              "startColumn": 13,
              "endLine": 115,
              "endColumn": 24,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "CopyOnWriteArrayList [<element>] : Throwable",
              "code": "    public void initCauses(Iterable<? extends Throwable> causes) {\n        this.causes.clear();\n        for (Throwable cause : causes) {\n            this.causes.add(cause);\n        }\n    }\n"
            },
            {
              "step": 29,
              "variableName": "this",
              "startLine": 115,
              "startColumn": 13,
              "endLine": 115,
              "endColumn": 17,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "DefaultMultiCauseException [causes, <element>] : Throwable",
              "code": "    public void initCauses(Iterable<? extends Throwable> causes) {\n        this.causes.clear();\n        for (Throwable cause : causes) {\n            this.causes.add(cause);\n        }\n    }\n"
            },
            {
              "step": 30,
              "variableName": "projectConfigurationException",
              "startLine": 57,
              "startColumn": 17,
              "endLine": 57,
              "endColumn": 46,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/DefaultExceptionAnalyser.java",
              "type": "ProjectConfigurationException [causes, <element>] : Throwable",
              "code": "                }\n            }\n            if (!additionalFailures.isEmpty()) {\n                projectConfigurationException.initCauses(additionalFailures);\n                failures.add(transform(projectConfigurationException));\n            }\n        } else if (exception instanceof ServiceCreationException) {"
            },
            {
              "step": 31,
              "variableName": "projectConfigurationException",
              "startLine": 58,
              "startColumn": 40,
              "endLine": 58,
              "endColumn": 69,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/DefaultExceptionAnalyser.java",
              "type": "ProjectConfigurationException [causes, <element>] : Throwable",
              "code": "            }\n            if (!additionalFailures.isEmpty()) {\n                projectConfigurationException.initCauses(additionalFailures);\n                failures.add(transform(projectConfigurationException));\n            }\n        } else if (exception instanceof ServiceCreationException) {\n            failures.add(transform(new InitializationException(exception)));"
            },
            {
              "step": 32,
              "variableName": "transform(projectConfigurationException)",
              "startLine": 58,
              "startColumn": 30,
              "endLine": 58,
              "endColumn": 70,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/DefaultExceptionAnalyser.java",
              "type": "LocationAwareException",
              "code": "            }\n            if (!additionalFailures.isEmpty()) {\n                projectConfigurationException.initCauses(additionalFailures);\n                failures.add(transform(projectConfigurationException));\n            }\n        } else if (exception instanceof ServiceCreationException) {\n            failures.add(transform(new InitializationException(exception)));"
            },
            {
              "step": 33,
              "variableName": "failures",
              "startLine": 58,
              "startColumn": 17,
              "endLine": 58,
              "endColumn": 25,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/DefaultExceptionAnalyser.java",
              "type": "Collection [<element>] : LocationAwareException",
              "code": "            }\n            if (!additionalFailures.isEmpty()) {\n                projectConfigurationException.initCauses(additionalFailures);\n                failures.add(transform(projectConfigurationException));\n            }\n        } else if (exception instanceof ServiceCreationException) {\n            failures.add(transform(new InitializationException(exception)));"
            },
            {
              "step": 34,
              "variableName": "result",
              "startLine": 53,
              "startColumn": 54,
              "endLine": 53,
              "endColumn": 60,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/MultipleBuildFailuresExceptionAnalyser.java",
              "type": "ArrayList [<element>] : LocationAwareException",
              "code": "        for (Throwable failure : failures) {\n            if (failure instanceof MultipleBuildFailures) {\n                for (Throwable cause : ((MultipleBuildFailures) failure).getCauses()) {\n                    collector.collectFailures(cause, result);\n                }\n            } else {\n                collector.collectFailures(failure, result);"
            },
            {
              "step": 35,
              "variableName": "result",
              "startLine": 60,
              "startColumn": 39,
              "endLine": 60,
              "endColumn": 45,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/MultipleBuildFailuresExceptionAnalyser.java",
              "type": "ArrayList [<element>] : LocationAwareException",
              "code": "            }\n        }\n        if (result.size() == 1 && result.get(0) instanceof RuntimeException) {\n            return (RuntimeException) result.get(0);\n        } else {\n            return new MultipleBuildFailures(result);\n        }"
            },
            {
              "step": 36,
              "variableName": "result.get(0)",
              "startLine": 60,
              "startColumn": 39,
              "endLine": 60,
              "endColumn": 52,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/MultipleBuildFailuresExceptionAnalyser.java",
              "type": "LocationAwareException",
              "code": "            }\n        }\n        if (result.size() == 1 && result.get(0) instanceof RuntimeException) {\n            return (RuntimeException) result.get(0);\n        } else {\n            return new MultipleBuildFailures(result);\n        }"
            },
            {
              "step": 37,
              "variableName": "(RuntimeException) result.get(0)",
              "startLine": 60,
              "startColumn": 20,
              "endLine": 60,
              "endColumn": 52,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/MultipleBuildFailuresExceptionAnalyser.java",
              "type": "LocationAwareException",
              "code": "            }\n        }\n        if (result.size() == 1 && result.get(0) instanceof RuntimeException) {\n            return (RuntimeException) result.get(0);\n        } else {\n            return new MultipleBuildFailures(result);\n        }"
            },
            {
              "step": 38,
              "variableName": "exceptionAnalyser.transform(finishFailures)",
              "startLine": 72,
              "startColumn": 16,
              "endLine": 72,
              "endColumn": 59,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/internal/buildtree/DefaultBuildTreeFinishExecutor.java",
              "type": "LocationAwareException",
              "code": "            finishFailures.addAll(result.getFailures());\n        });\n\n        return exceptionAnalyser.transform(finishFailures);\n    }\n}\n"
            },
            {
              "step": 39,
              "variableName": "delegate.finishBuildTree(failures)",
              "startLine": 46,
              "startColumn": 28,
              "endLine": 46,
              "endColumn": 62,
              "uri": "gradle-8.14.0/subprojects/composite-builds/src/main/java/org/gradle/composite/internal/OperationFiringBuildTreeFinishExecutor.java",
              "type": "LocationAwareException",
              "code": "            @Override\n            public RuntimeException call(BuildOperationContext context) {\n                try {\n                    return delegate.finishBuildTree(failures);\n                } finally {\n                    context.setResult(RESULT);\n                }"
            },
            {
              "step": 40,
              "variableName": "buildOperation.call(context)",
              "startLine": 239,
              "startColumn": 21,
              "endLine": 239,
              "endColumn": 49,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/testFixtures/java/org/gradle/internal/operations/TestBuildOperationRunner.java",
              "type": "LocationAwareException",
              "code": "            TestBuildOperationContext context = new TestBuildOperationContext(record);\n            T t;\n            try {\n                t = buildOperation.call(context);\n            } catch (Throwable failure) {\n                if (record.failure == null) {\n                    record.failure = failure;"
            },
            {
              "step": 41,
              "variableName": "t",
              "startLine": 246,
              "startColumn": 20,
              "endLine": 246,
              "endColumn": 21,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/testFixtures/java/org/gradle/internal/operations/TestBuildOperationRunner.java",
              "type": "LocationAwareException",
              "code": "                }\n                throw throwAsUncheckedException(failure);\n            }\n            return t;\n        }\n\n        private <O extends BuildOperation> void execute(O buildOperation, BuildOperationWorker<O> worker) {"
            },
            {
              "step": 42,
              "variableName": "log.call(buildOperation)",
              "startLine": 51,
              "startColumn": 16,
              "endLine": 51,
              "endColumn": 40,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/testFixtures/java/org/gradle/internal/operations/TestBuildOperationRunner.java",
              "type": "LocationAwareException",
              "code": "\n    @Override\n    public <T> T call(CallableBuildOperation<T> buildOperation) {\n        return log.call(buildOperation);\n    }\n\n    @Override"
            },
            {
              "step": 43,
              "variableName": "ca",
              "startLine": 115,
              "startColumn": 5,
              "endLine": 121,
              "endColumn": 7,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/configurationcache/ConfigurationCacheBuildOperations.kt",
              "type": "LocationAwareException",
              "code": "\ninternal\nfun <T : Any> BuildOperationRunner.withModelLoadOperation(block: () -> T): T =\n    call(object : CallableBuildOperation<T> {\n        override fun description(): BuildOperationDescriptor.Builder = BuildOperationDescriptor\n            .displayName(\"Load model from configuration cache\")\n            .progressDisplayName(\"Loading model from configuration cache\")"
            },
            {
              "step": 44,
              "variableName": "ca",
              "startLine": 115,
              "startColumn": 5,
              "endLine": 121,
              "endColumn": 7,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/configurationcache/ConfigurationCacheBuildOperations.kt",
              "type": "LocationAwareException",
              "code": "\ninternal\nfun <T : Any> BuildOperationRunner.withModelLoadOperation(block: () -> T): T =\n    call(object : CallableBuildOperation<T> {\n        override fun description(): BuildOperationDescriptor.Builder = BuildOperationDescriptor\n            .displayName(\"Load model from configuration cache\")\n            .progressDisplayName(\"Loading model from configuration cache\")"
            },
            {
              "step": 45,
              "variableName": "b",
              "startLine": 635,
              "startColumn": 9,
              "endLine": 641,
              "endColumn": 10,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "        // No need to record the `ClassLoaderScope` tree when loading\n        scopeRegistryListener.dispose()\n\n        buildOperationRunner.withModelLoadOperation {\n            val storeLoadResult = entryStore.useForStateLoad(StateType.Model) { stateFile: ConfigurationCacheStateFile ->\n                cacheIO.readModelFrom(stateFile)\n            }"
            },
            {
              "step": 46,
              "variableName": "block()",
              "startLine": 668,
              "startColumn": 22,
              "endLine": 668,
              "endColumn": 29,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "    private\n    inline fun <T> runAtConfigurationTime(block: () -> T): T {\n        prepareConfigurationTimeBarrier()\n        val result = block()\n        crossConfigurationTimeBarrier()\n        return result\n    }"
            },
            {
              "step": 47,
              "variableName": "result",
              "startLine": 670,
              "startColumn": 16,
              "endLine": 670,
              "endColumn": 22,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "        prepareConfigurationTimeBarrier()\n        val result = block()\n        crossConfigurationTimeBarrier()\n        return result\n    }\n\n    private"
            },
            {
              "step": 48,
              "variableName": "runAtConfigurationTime(...) : LocationAwareException",
              "startLine": 631,
              "startColumn": 28,
              "endLine": 642,
              "endColumn": 6,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "    data class LoadResultMetadata(val originInvocationId: String? = null)\n\n    private\n    fun loadModel(): Any = runAtConfigurationTime {\n        // No need to record the `ClassLoaderScope` tree when loading\n        scopeRegistryListener.dispose()\n"
            },
            {
              "step": 49,
              "variableName": "loadModel()",
              "startLine": 268,
              "startColumn": 20,
              "endLine": 268,
              "endColumn": 31,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "    override fun <T : Any> loadOrCreateModel(creator: () -> T): T {\n        if (isLoaded) {\n            runLoadedSideEffects()\n            return loadModel().uncheckedCast()\n        }\n\n        return runWorkThatContributesToCacheEntry {"
            },
            {
              "step": 50,
              "variableName": "Any",
              "startLine": 22,
              "startColumn": 15,
              "endLine": 22,
              "endColumn": 18,
              "uri": "gradle-8.14.0/platforms/core-configuration/stdlib-kotlin-extensions/src/main/kotlin/org/gradle/internal/extensions/stdlib/CastExtensions.kt",
              "type": "Object",
              "code": "import org.gradle.internal.Cast\n\n\nfun <T : Any> Any.uncheckedCast(): T =\n    Cast.uncheckedNonnullCast(this)\n"
            },
            {
              "step": 51,
              "variableName": "this",
              "startLine": 23,
              "startColumn": 31,
              "endLine": 23,
              "endColumn": 35,
              "uri": "gradle-8.14.0/platforms/core-configuration/stdlib-kotlin-extensions/src/main/kotlin/org/gradle/internal/extensions/stdlib/CastExtensions.kt",
              "type": "Object",
              "code": "\n\nfun <T : Any> Any.uncheckedCast(): T =\n    Cast.uncheckedNonnullCast(this)\n"
            },
            {
              "step": 52,
              "variableName": "Object object",
              "startLine": 76,
              "startColumn": 46,
              "endLine": 76,
              "endColumn": 59,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/Cast.java",
              "type": "Object",
              "code": "    }\n\n    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})\n    public static <T> T uncheckedNonnullCast(Object object) {\n        return (T) object;\n    }\n}"
            },
            {
              "step": 53,
              "variableName": "(T) object",
              "startLine": 77,
              "startColumn": 16,
              "endLine": 77,
              "endColumn": 26,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/Cast.java",
              "type": "Object",
              "code": "\n    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})\n    public static <T> T uncheckedNonnullCast(Object object) {\n        return (T) object;\n    }\n}\n"
            },
            {
              "step": 54,
              "variableName": "Cast.uncheckedNonnullCast(defaultValue)",
              "startLine": 112,
              "startColumn": 73,
              "endLine": 112,
              "endColumn": 112,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/api/internal/provider/AbstractMinimalProvider.java",
              "type": "Object",
              "code": "\n    @Override\n    public T getOrElse(T defaultValue) {\n        return calculateOwnValue(ValueConsumer.IgnoreUnsafeRead).orElse(Cast.uncheckedNonnullCast(defaultValue));\n    }\n\n    @Override"
            },
            {
              "step": 55,
              "variableName": "T defaultValue",
              "startLine": 610,
              "startColumn": 25,
              "endLine": 610,
              "endColumn": 39,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/api/internal/provider/ValueSupplier.java",
              "type": "Object",
              "code": "        }\n\n        @Override\n        public T orElse(T defaultValue) {\n            return defaultValue;\n        }\n"
            },
            {
              "step": 56,
              "variableName": "defaultValue",
              "startLine": 611,
              "startColumn": 20,
              "endLine": 611,
              "endColumn": 32,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/api/internal/provider/ValueSupplier.java",
              "type": "Object",
              "code": "\n        @Override\n        public T orElse(T defaultValue) {\n            return defaultValue;\n        }\n\n        @Override"
            },
            {
              "step": 57,
              "variableName": "calculateOwnValue(ValueConsumer.IgnoreUnsafeRead).orElse(Cast.uncheckedNonnullCast(defaultValue))",
              "startLine": 112,
              "startColumn": 16,
              "endLine": 112,
              "endColumn": 113,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/api/internal/provider/AbstractMinimalProvider.java",
              "type": "Object",
              "code": "\n    @Override\n    public T getOrElse(T defaultValue) {\n        return calculateOwnValue(ValueConsumer.IgnoreUnsafeRead).orElse(Cast.uncheckedNonnullCast(defaultValue));\n    }\n\n    @Override"
            },
            {
              "step": 58,
              "variableName": "getNativeImageCapable().getOrElse(false)",
              "startLine": 105,
              "startColumn": 13,
              "endLine": 105,
              "endColumn": 53,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-configuration/src/main/java/org/gradle/buildconfiguration/tasks/UpdateDaemonJvm.java",
              "type": "Boolean",
              "code": "            getPropertiesFile().get().getAsFile(),\n            getLanguageVersion().get(),\n            jvmVendorCriteria,\n            getNativeImageCapable().getOrElse(false),\n            getToolchainDownloadUrls().get()\n        );\n    }"
            },
            {
              "step": 59,
              "variableName": "File propertiesFile",
              "startLine": 45,
              "startColumn": 9,
              "endLine": 45,
              "endColumn": 28,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-configuration/src/main/java/org/gradle/internal/buildconfiguration/tasks/DaemonJvmPropertiesModifier.java",
              "type": "File",
              "code": "    }\n\n    public void updateJvmCriteria(\n        File propertiesFile,\n        JavaLanguageVersion toolchainVersion,\n        @Nullable String toolchainVendor,\n        boolean nativeImageCapable,"
            },
            {
              "step": 60,
              "variableName": "propertiesFile",
              "startLine": 67,
              "startColumn": 33,
              "endLine": 67,
              "endColumn": 47,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-configuration/src/main/java/org/gradle/internal/buildconfiguration/tasks/DaemonJvmPropertiesModifier.java",
              "type": "File",
              "code": "            daemonJvmProperties.put(toolchainUrlProperty, uri.toString());\n        });\n\n        GFileUtils.parentMkdirs(propertiesFile);\n        try {\n            PropertiesUtils.store(daemonJvmProperties, propertiesFile, \"This file is generated by \" + DaemonJvmPropertiesConfigurator.TASK_NAME);\n        } catch (IOException e) {"
            },
            {
              "step": 61,
              "variableName": "File child",
              "startLine": 241,
              "startColumn": 37,
              "endLine": 241,
              "endColumn": 47,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/util/internal/GFileUtils.java",
              "type": "File",
              "code": "     * @return The parent dir file\n     * @see #mkdirs(java.io.File)\n     */\n    public static File parentMkdirs(File child) {\n        File parent = child.getParentFile();\n        mkdirs(parent);\n        return parent;"
            },
            {
              "step": 62,
              "variableName": "child",
              "startLine": 242,
              "startColumn": 23,
              "endLine": 242,
              "endColumn": 28,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/util/internal/GFileUtils.java",
              "type": "File",
              "code": "     * @see #mkdirs(java.io.File)\n     */\n    public static File parentMkdirs(File child) {\n        File parent = child.getParentFile();\n        mkdirs(parent);\n        return parent;\n    }"
            },
            {
              "step": 63,
              "variableName": "getParentFile",
              "startLine": 392,
              "startColumn": 21,
              "endLine": 392,
              "endColumn": 34,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "TestFile",
              "code": "    }\n\n    @Override\n    public TestFile getParentFile() {\n        return super.getParentFile() == null ? null : new TestFile(super.getParentFile());\n    }\n"
            },
            {
              "step": 64,
              "variableName": "super",
              "startLine": 393,
              "startColumn": 68,
              "endLine": 393,
              "endColumn": 73,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "TestFile",
              "code": "\n    @Override\n    public TestFile getParentFile() {\n        return super.getParentFile() == null ? null : new TestFile(super.getParentFile());\n    }\n\n    @Override"
            },
            {
              "step": 65,
              "variableName": "super.getParentFile()",
              "startLine": 393,
              "startColumn": 68,
              "endLine": 393,
              "endColumn": 89,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "File",
              "code": "\n    @Override\n    public TestFile getParentFile() {\n        return super.getParentFile() == null ? null : new TestFile(super.getParentFile());\n    }\n\n    @Override"
            },
            {
              "step": 66,
              "variableName": "File file",
              "startLine": 77,
              "startColumn": 21,
              "endLine": 77,
              "endColumn": 30,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "File",
              "code": "    private boolean useNativeTools;\n    private final File relativeBase;\n\n    public TestFile(File file, Object... path) {\n        super(join(file, path).getAbsolutePath());\n        this.relativeBase = file;\n    }"
            },
            {
              "step": 67,
              "variableName": "file",
              "startLine": 78,
              "startColumn": 20,
              "endLine": 78,
              "endColumn": 24,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "File",
              "code": "    private final File relativeBase;\n\n    public TestFile(File file, Object... path) {\n        super(join(file, path).getAbsolutePath());\n        this.relativeBase = file;\n    }\n"
            },
            {
              "step": 68,
              "variableName": "File file",
              "startLine": 126,
              "startColumn": 30,
              "endLine": 126,
              "endColumn": 39,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "File",
              "code": "        }\n    }\n\n    private static File join(File file, Object[] path) {\n        File current = file.getAbsoluteFile();\n        for (Object p : path) {\n            current = new File(current, p.toString());"
            },
            {
              "step": 69,
              "variableName": "file",
              "startLine": 127,
              "startColumn": 24,
              "endLine": 127,
              "endColumn": 28,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "File",
              "code": "    }\n\n    private static File join(File file, Object[] path) {\n        File current = file.getAbsoluteFile();\n        for (Object p : path) {\n            current = new File(current, p.toString());\n        }"
            },
            {
              "step": 70,
              "variableName": "file.getAbsoluteFile()",
              "startLine": 127,
              "startColumn": 24,
              "endLine": 127,
              "endColumn": 46,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "File",
              "code": "    }\n\n    private static File join(File file, Object[] path) {\n        File current = file.getAbsoluteFile();\n        for (Object p : path) {\n            current = new File(current, p.toString());\n        }"
            },
            {
              "step": 71,
              "variableName": "current",
              "startLine": 132,
              "startColumn": 20,
              "endLine": 132,
              "endColumn": 27,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "File",
              "code": "            current = new File(current, p.toString());\n        }\n        try {\n            return current.getCanonicalFile();\n        } catch (IOException e) {\n            throw new RuntimeException(String.format(\"Could not canonicalise '%s'.\", current), e);\n        }"
            },
            {
              "step": 72,
              "variableName": "getCanonicalFile",
              "startLine": 109,
              "startColumn": 17,
              "endLine": 109,
              "endColumn": 33,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "TestFile",
              "code": "    }\n\n    @Override\n    public File getCanonicalFile() throws IOException {\n        return new File(getAbsolutePath()).getCanonicalFile();\n    }\n"
            },
            {
              "step": 73,
              "variableName": "getAbsolutePath()",
              "startLine": 110,
              "startColumn": 25,
              "endLine": 110,
              "endColumn": 42,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "TestFile",
              "code": "\n    @Override\n    public File getCanonicalFile() throws IOException {\n        return new File(getAbsolutePath()).getCanonicalFile();\n    }\n\n    @Override"
            },
            {
              "step": 74,
              "variableName": "getAbsolutePath()",
              "startLine": 110,
              "startColumn": 25,
              "endLine": 110,
              "endColumn": 42,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "String",
              "code": "\n    @Override\n    public File getCanonicalFile() throws IOException {\n        return new File(getAbsolutePath()).getCanonicalFile();\n    }\n\n    @Override"
            },
            {
              "step": 75,
              "variableName": "new File(getAbsolutePath())",
              "startLine": 110,
              "startColumn": 16,
              "endLine": 110,
              "endColumn": 43,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "File",
              "code": "\n    @Override\n    public File getCanonicalFile() throws IOException {\n        return new File(getAbsolutePath()).getCanonicalFile();\n    }\n\n    @Override"
            },
            {
              "step": 76,
              "variableName": "new File(getAbsolutePath()).getCanonicalFile()",
              "startLine": 110,
              "startColumn": 16,
              "endLine": 110,
              "endColumn": 62,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "File",
              "code": "\n    @Override\n    public File getCanonicalFile() throws IOException {\n        return new File(getAbsolutePath()).getCanonicalFile();\n    }\n\n    @Override"
            },
            {
              "step": 77,
              "variableName": "current.getCanonicalFile()",
              "startLine": 132,
              "startColumn": 20,
              "endLine": 132,
              "endColumn": 46,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "File",
              "code": "            current = new File(current, p.toString());\n        }\n        try {\n            return current.getCanonicalFile();\n        } catch (IOException e) {\n            throw new RuntimeException(String.format(\"Could not canonicalise '%s'.\", current), e);\n        }"
            },
            {
              "step": 78,
              "variableName": "join(file, path)",
              "startLine": 78,
              "startColumn": 15,
              "endLine": 78,
              "endColumn": 31,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "File",
              "code": "    private final File relativeBase;\n\n    public TestFile(File file, Object... path) {\n        super(join(file, path).getAbsolutePath());\n        this.relativeBase = file;\n    }\n"
            },
            {
              "step": 79,
              "variableName": "join(file, path).getAbsolutePath()",
              "startLine": 78,
              "startColumn": 15,
              "endLine": 78,
              "endColumn": 49,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "String",
              "code": "    private final File relativeBase;\n\n    public TestFile(File file, Object... path) {\n        super(join(file, path).getAbsolutePath());\n        this.relativeBase = file;\n    }\n"
            },
            {
              "step": 80,
              "variableName": "super(join(file, path).getAbsolutePath());",
              "startLine": 78,
              "startColumn": 9,
              "endLine": 78,
              "endColumn": 51,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "TestFile",
              "code": "    private final File relativeBase;\n\n    public TestFile(File file, Object... path) {\n        super(join(file, path).getAbsolutePath());\n        this.relativeBase = file;\n    }\n"
            },
            {
              "step": 81,
              "variableName": "new TestFile(super.getParentFile())",
              "startLine": 393,
              "startColumn": 55,
              "endLine": 393,
              "endColumn": 90,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "TestFile",
              "code": "\n    @Override\n    public TestFile getParentFile() {\n        return super.getParentFile() == null ? null : new TestFile(super.getParentFile());\n    }\n\n    @Override"
            },
            {
              "step": 82,
              "variableName": "super.getParentFile() == null ? null : new TestFile(super.getParentFile())",
              "startLine": 393,
              "startColumn": 16,
              "endLine": 393,
              "endColumn": 90,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "... : TestFile",
              "code": "\n    @Override\n    public TestFile getParentFile() {\n        return super.getParentFile() == null ? null : new TestFile(super.getParentFile());\n    }\n\n    @Override"
            },
            {
              "step": 83,
              "variableName": "wrapperJar.getParentFile().getParentFile().getParentFile()",
              "startLine": 79,
              "startColumn": 16,
              "endLine": 79,
              "endColumn": 74,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-main/src/main/java/org/gradle/wrapper/GradleWrapperMain.java",
              "type": "TestFile",
              "code": "    }\n\n    private static File rootDir(File wrapperJar) {\n        return wrapperJar.getParentFile().getParentFile().getParentFile();\n    }\n\n    private static File wrapperProperties(File wrapperJar) {"
            },
            {
              "step": 84,
              "variableName": "rootDir(wrapperJar)",
              "startLine": 41,
              "startColumn": 24,
              "endLine": 41,
              "endColumn": 43,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-main/src/main/java/org/gradle/wrapper/GradleWrapperMain.java",
              "type": "TestFile",
              "code": "    public static void main(String[] args) throws Exception {\n        File wrapperJar = wrapperJar();\n        File propertiesFile = wrapperProperties(wrapperJar);\n        File rootDir = rootDir(wrapperJar);\n\n        CommandLineParser parser = new CommandLineParser();\n        parser.allowUnknownOptions();"
            },
            {
              "step": 85,
              "variableName": "rootDir",
              "startLine": 58,
              "startColumn": 63,
              "endLine": 58,
              "endColumn": 70,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-main/src/main/java/org/gradle/wrapper/GradleWrapperMain.java",
              "type": "TestFile",
              "code": "\n        File gradleUserHome = gradleUserHome(options);\n\n        addSystemProperties(systemProperties, gradleUserHome, rootDir);\n\n        Logger logger = logger(options);\n"
            },
            {
              "step": 86,
              "variableName": "rootDir",
              "startLine": 68,
              "startColumn": 81,
              "endLine": 68,
              "endColumn": 88,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-main/src/main/java/org/gradle/wrapper/GradleWrapperMain.java",
              "type": "TestFile",
              "code": "\n        wrapperExecutor.execute(\n                args,\n                new Install(logger, download, new PathAssembler(gradleUserHome, rootDir)),\n                new BootstrapMainStarter());\n    }\n"
            },
            {
              "step": 87,
              "variableName": "File projectDirectory",
              "startLine": 30,
              "startColumn": 47,
              "endLine": 30,
              "endColumn": 68,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/PathAssembler.java",
              "type": "TestFile",
              "code": "    private final File gradleUserHome;\n    private final File projectDirectory;\n\n    public PathAssembler(File gradleUserHome, File projectDirectory) {\n        this.gradleUserHome = gradleUserHome;\n        this.projectDirectory = projectDirectory;\n    }"
            },
            {
              "step": 88,
              "variableName": "projectDirectory",
              "startLine": 32,
              "startColumn": 33,
              "endLine": 32,
              "endColumn": 49,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/PathAssembler.java",
              "type": "TestFile",
              "code": "\n    public PathAssembler(File gradleUserHome, File projectDirectory) {\n        this.gradleUserHome = gradleUserHome;\n        this.projectDirectory = projectDirectory;\n    }\n\n    /**"
            },
            {
              "step": 89,
              "variableName": "this",
              "startLine": 32,
              "startColumn": 9,
              "endLine": 32,
              "endColumn": 13,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/PathAssembler.java",
              "type": "PathAssembler [projectDirectory] : TestFile",
              "code": "\n    public PathAssembler(File gradleUserHome, File projectDirectory) {\n        this.gradleUserHome = gradleUserHome;\n        this.projectDirectory = projectDirectory;\n    }\n\n    /**"
            },
            {
              "step": 90,
              "variableName": "new PathAssembler(gradleUserHome, rootDir)",
              "startLine": 68,
              "startColumn": 47,
              "endLine": 68,
              "endColumn": 89,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-main/src/main/java/org/gradle/wrapper/GradleWrapperMain.java",
              "type": "PathAssembler [projectDirectory] : TestFile",
              "code": "\n        wrapperExecutor.execute(\n                args,\n                new Install(logger, download, new PathAssembler(gradleUserHome, rootDir)),\n                new BootstrapMainStarter());\n    }\n"
            },
            {
              "step": 91,
              "variableName": "PathAssembler pathAssembler",
              "startLine": 56,
              "startColumn": 55,
              "endLine": 56,
              "endColumn": 82,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/Install.java",
              "type": "PathAssembler [projectDirectory] : TestFile",
              "code": "    private final PathAssembler pathAssembler;\n    private final ExclusiveFileAccessManager exclusiveFileAccessManager = new ExclusiveFileAccessManager(120000, 200);\n\n    public Install(Logger logger, IDownload download, PathAssembler pathAssembler) {\n        this.logger = logger;\n        this.download = download;\n        this.pathAssembler = pathAssembler;"
            },
            {
              "step": 92,
              "variableName": "pathAssembler",
              "startLine": 59,
              "startColumn": 30,
              "endLine": 59,
              "endColumn": 43,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/Install.java",
              "type": "PathAssembler [projectDirectory] : TestFile",
              "code": "    public Install(Logger logger, IDownload download, PathAssembler pathAssembler) {\n        this.logger = logger;\n        this.download = download;\n        this.pathAssembler = pathAssembler;\n    }\n\n    public File createDist(final WrapperConfiguration configuration) throws Exception {"
            },
            {
              "step": 93,
              "variableName": "this",
              "startLine": 59,
              "startColumn": 9,
              "endLine": 59,
              "endColumn": 13,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/Install.java",
              "type": "Install [pathAssembler, projectDirectory] : TestFile",
              "code": "    public Install(Logger logger, IDownload download, PathAssembler pathAssembler) {\n        this.logger = logger;\n        this.download = download;\n        this.pathAssembler = pathAssembler;\n    }\n\n    public File createDist(final WrapperConfiguration configuration) throws Exception {"
            },
            {
              "step": 94,
              "variableName": "new Install(logger, download, new PathAssembler(gradleUserHome, rootDir))",
              "startLine": 68,
              "startColumn": 17,
              "endLine": 68,
              "endColumn": 90,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-main/src/main/java/org/gradle/wrapper/GradleWrapperMain.java",
              "type": "Install [pathAssembler, projectDirectory] : TestFile",
              "code": "\n        wrapperExecutor.execute(\n                args,\n                new Install(logger, download, new PathAssembler(gradleUserHome, rootDir)),\n                new BootstrapMainStarter());\n    }\n"
            },
            {
              "step": 95,
              "variableName": "Install install",
              "startLine": 101,
              "startColumn": 40,
              "endLine": 101,
              "endColumn": 55,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/WrapperExecutor.java",
              "type": "Install [pathAssembler, projectDirectory] : TestFile",
              "code": "        return config;\n    }\n\n    public void execute(String[] args, Install install, BootstrapMainStarter bootstrapMainStarter) throws Exception {\n        File gradleHome = install.createDist(config);\n        bootstrapMainStarter.start(args, gradleHome);\n    }"
            },
            {
              "step": 96,
              "variableName": "install",
              "startLine": 102,
              "startColumn": 27,
              "endLine": 102,
              "endColumn": 34,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/WrapperExecutor.java",
              "type": "Install [pathAssembler, projectDirectory] : TestFile",
              "code": "    }\n\n    public void execute(String[] args, Install install, BootstrapMainStarter bootstrapMainStarter) throws Exception {\n        File gradleHome = install.createDist(config);\n        bootstrapMainStarter.start(args, gradleHome);\n    }\n"
            },
            {
              "step": 97,
              "variableName": "createDist",
              "startLine": 62,
              "startColumn": 17,
              "endLine": 62,
              "endColumn": 27,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/Install.java",
              "type": "Install [pathAssembler, projectDirectory] : TestFile",
              "code": "        this.pathAssembler = pathAssembler;\n    }\n\n    public File createDist(final WrapperConfiguration configuration) throws Exception {\n        final URI distributionUrl = configuration.getDistribution();\n\n        final PathAssembler.LocalDistribution localDistribution = pathAssembler.getDistribution(configuration);"
            },
            {
              "step": 98,
              "variableName": "pathAssembler",
              "startLine": 65,
              "startColumn": 67,
              "endLine": 65,
              "endColumn": 80,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/Install.java",
              "type": "Install [pathAssembler, projectDirectory] : TestFile",
              "code": "    public File createDist(final WrapperConfiguration configuration) throws Exception {\n        final URI distributionUrl = configuration.getDistribution();\n\n        final PathAssembler.LocalDistribution localDistribution = pathAssembler.getDistribution(configuration);\n        final File distDir = localDistribution.getDistributionDir();\n        final File localZipFile = localDistribution.getZipFile();\n"
            },
            {
              "step": 99,
              "variableName": "pathAssembler",
              "startLine": 65,
              "startColumn": 67,
              "endLine": 65,
              "endColumn": 80,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/Install.java",
              "type": "PathAssembler [projectDirectory] : TestFile",
              "code": "    public File createDist(final WrapperConfiguration configuration) throws Exception {\n        final URI distributionUrl = configuration.getDistribution();\n\n        final PathAssembler.LocalDistribution localDistribution = pathAssembler.getDistribution(configuration);\n        final File distDir = localDistribution.getDistributionDir();\n        final File localZipFile = localDistribution.getZipFile();\n"
            },
            {
              "step": 100,
              "variableName": "getDistribution",
              "startLine": 38,
              "startColumn": 30,
              "endLine": 38,
              "endColumn": 45,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/PathAssembler.java",
              "type": "PathAssembler [projectDirectory] : TestFile",
              "code": "    /**\n     * Determines the local locations for the distribution to use given the supplied configuration.\n     */\n    public LocalDistribution getDistribution(WrapperConfiguration configuration) {\n        String baseName = getDistName(configuration.getDistribution());\n        String distName = removeExtension(baseName);\n        String rootDirName = rootDirName(distName, configuration);"
            },
            {
              "step": 101,
              "variableName": "getBaseDir(configuration.getDistributionBase())",
              "startLine": 42,
              "startColumn": 33,
              "endLine": 42,
              "endColumn": 80,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/PathAssembler.java",
              "type": "PathAssembler [projectDirectory] : TestFile",
              "code": "        String baseName = getDistName(configuration.getDistribution());\n        String distName = removeExtension(baseName);\n        String rootDirName = rootDirName(distName, configuration);\n        File distDir = new File(getBaseDir(configuration.getDistributionBase()), configuration.getDistributionPath() + \"/\" + rootDirName);\n        File distZip = new File(getBaseDir(configuration.getZipBase()), configuration.getZipPath() + \"/\" + rootDirName + \"/\" + baseName);\n        return new LocalDistribution(distDir, distZip);\n    }"
            },
            {
              "step": 102,
              "variableName": "getBaseDir",
              "startLine": 91,
              "startColumn": 18,
              "endLine": 91,
              "endColumn": 28,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/PathAssembler.java",
              "type": "PathAssembler [projectDirectory] : TestFile",
              "code": "        return path.substring(p + 1);\n    }\n\n    private File getBaseDir(String base) {\n        if (base.equals(GRADLE_USER_HOME_STRING)) {\n            return gradleUserHome;\n        } else if (base.equals(PROJECT_STRING)) {"
            },
            {
              "step": 103,
              "variableName": "projectDirectory",
              "startLine": 95,
              "startColumn": 20,
              "endLine": 95,
              "endColumn": 36,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/PathAssembler.java",
              "type": "PathAssembler [projectDirectory] : TestFile",
              "code": "        if (base.equals(GRADLE_USER_HOME_STRING)) {\n            return gradleUserHome;\n        } else if (base.equals(PROJECT_STRING)) {\n            return projectDirectory;\n        } else {\n            throw new RuntimeException(\"Base: \" + base + \" is unknown\");\n        }"
            },
            {
              "step": 104,
              "variableName": "projectDirectory",
              "startLine": 95,
              "startColumn": 20,
              "endLine": 95,
              "endColumn": 36,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/PathAssembler.java",
              "type": "TestFile",
              "code": "        if (base.equals(GRADLE_USER_HOME_STRING)) {\n            return gradleUserHome;\n        } else if (base.equals(PROJECT_STRING)) {\n            return projectDirectory;\n        } else {\n            throw new RuntimeException(\"Base: \" + base + \" is unknown\");\n        }"
            },
            {
              "step": 105,
              "variableName": "getBaseDir(configuration.getDistributionBase())",
              "startLine": 42,
              "startColumn": 33,
              "endLine": 42,
              "endColumn": 80,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/PathAssembler.java",
              "type": "TestFile",
              "code": "        String baseName = getDistName(configuration.getDistribution());\n        String distName = removeExtension(baseName);\n        String rootDirName = rootDirName(distName, configuration);\n        File distDir = new File(getBaseDir(configuration.getDistributionBase()), configuration.getDistributionPath() + \"/\" + rootDirName);\n        File distZip = new File(getBaseDir(configuration.getZipBase()), configuration.getZipPath() + \"/\" + rootDirName + \"/\" + baseName);\n        return new LocalDistribution(distDir, distZip);\n    }"
            },
            {
              "step": 106,
              "variableName": "new File(getBaseDir(configuration.getDistributionBase()), configuration.getDistributionPath() + \"/\" + rootDirName)",
              "startLine": 42,
              "startColumn": 24,
              "endLine": 42,
              "endColumn": 138,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/PathAssembler.java",
              "type": "File",
              "code": "        String baseName = getDistName(configuration.getDistribution());\n        String distName = removeExtension(baseName);\n        String rootDirName = rootDirName(distName, configuration);\n        File distDir = new File(getBaseDir(configuration.getDistributionBase()), configuration.getDistributionPath() + \"/\" + rootDirName);\n        File distZip = new File(getBaseDir(configuration.getZipBase()), configuration.getZipPath() + \"/\" + rootDirName + \"/\" + baseName);\n        return new LocalDistribution(distDir, distZip);\n    }"
            },
            {
              "step": 107,
              "variableName": "distDir",
              "startLine": 44,
              "startColumn": 38,
              "endLine": 44,
              "endColumn": 45,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/PathAssembler.java",
              "type": "File",
              "code": "        String rootDirName = rootDirName(distName, configuration);\n        File distDir = new File(getBaseDir(configuration.getDistributionBase()), configuration.getDistributionPath() + \"/\" + rootDirName);\n        File distZip = new File(getBaseDir(configuration.getZipBase()), configuration.getZipPath() + \"/\" + rootDirName + \"/\" + baseName);\n        return new LocalDistribution(distDir, distZip);\n    }\n\n    private String rootDirName(String distName, WrapperConfiguration configuration) {"
            },
            {
              "step": 108,
              "variableName": "File distDir",
              "startLine": 105,
              "startColumn": 34,
              "endLine": 105,
              "endColumn": 46,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/PathAssembler.java",
              "type": "File",
              "code": "        private final File distZip;\n        private final File distDir;\n\n        public LocalDistribution(File distDir, File distZip) {\n            this.distDir = distDir;\n            this.distZip = distZip;\n        }"
            },
            {
              "step": 109,
              "variableName": "distDir",
              "startLine": 106,
              "startColumn": 28,
              "endLine": 106,
              "endColumn": 35,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/PathAssembler.java",
              "type": "File",
              "code": "        private final File distDir;\n\n        public LocalDistribution(File distDir, File distZip) {\n            this.distDir = distDir;\n            this.distZip = distZip;\n        }\n"
            },
            {
              "step": 110,
              "variableName": "this",
              "startLine": 106,
              "startColumn": 13,
              "endLine": 106,
              "endColumn": 17,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/PathAssembler.java",
              "type": "LocalDistribution [distDir] : File",
              "code": "        private final File distDir;\n\n        public LocalDistribution(File distDir, File distZip) {\n            this.distDir = distDir;\n            this.distZip = distZip;\n        }\n"
            },
            {
              "step": 111,
              "variableName": "new LocalDistribution(distDir, distZip)",
              "startLine": 44,
              "startColumn": 16,
              "endLine": 44,
              "endColumn": 55,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/PathAssembler.java",
              "type": "LocalDistribution [distDir] : File",
              "code": "        String rootDirName = rootDirName(distName, configuration);\n        File distDir = new File(getBaseDir(configuration.getDistributionBase()), configuration.getDistributionPath() + \"/\" + rootDirName);\n        File distZip = new File(getBaseDir(configuration.getZipBase()), configuration.getZipPath() + \"/\" + rootDirName + \"/\" + baseName);\n        return new LocalDistribution(distDir, distZip);\n    }\n\n    private String rootDirName(String distName, WrapperConfiguration configuration) {"
            },
            {
              "step": 112,
              "variableName": "pathAssembler.getDistribution(configuration)",
              "startLine": 65,
              "startColumn": 67,
              "endLine": 65,
              "endColumn": 111,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/Install.java",
              "type": "LocalDistribution [distDir] : File",
              "code": "    public File createDist(final WrapperConfiguration configuration) throws Exception {\n        final URI distributionUrl = configuration.getDistribution();\n\n        final PathAssembler.LocalDistribution localDistribution = pathAssembler.getDistribution(configuration);\n        final File distDir = localDistribution.getDistributionDir();\n        final File localZipFile = localDistribution.getZipFile();\n"
            },
            {
              "step": 113,
              "variableName": "localDistribution",
              "startLine": 66,
              "startColumn": 30,
              "endLine": 66,
              "endColumn": 47,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/Install.java",
              "type": "LocalDistribution [distDir] : File",
              "code": "        final URI distributionUrl = configuration.getDistribution();\n\n        final PathAssembler.LocalDistribution localDistribution = pathAssembler.getDistribution(configuration);\n        final File distDir = localDistribution.getDistributionDir();\n        final File localZipFile = localDistribution.getZipFile();\n\n        return exclusiveFileAccessManager.access(localZipFile, new Callable<File>() {"
            },
            {
              "step": 114,
              "variableName": "getDistributionDir",
              "startLine": 113,
              "startColumn": 21,
              "endLine": 113,
              "endColumn": 39,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/PathAssembler.java",
              "type": "LocalDistribution [distDir] : File",
              "code": "        /**\n         * Returns the location to install the distribution into.\n         */\n        public File getDistributionDir() {\n            return distDir;\n        }\n"
            },
            {
              "step": 115,
              "variableName": "distDir",
              "startLine": 114,
              "startColumn": 20,
              "endLine": 114,
              "endColumn": 27,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/PathAssembler.java",
              "type": "LocalDistribution [distDir] : File",
              "code": "         * Returns the location to install the distribution into.\n         */\n        public File getDistributionDir() {\n            return distDir;\n        }\n\n        /**"
            },
            {
              "step": 116,
              "variableName": "distDir",
              "startLine": 114,
              "startColumn": 20,
              "endLine": 114,
              "endColumn": 27,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/PathAssembler.java",
              "type": "File",
              "code": "         * Returns the location to install the distribution into.\n         */\n        public File getDistributionDir() {\n            return distDir;\n        }\n\n        /**"
            },
            {
              "step": 117,
              "variableName": "localDistribution.getDistributionDir()",
              "startLine": 66,
              "startColumn": 30,
              "endLine": 66,
              "endColumn": 68,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/Install.java",
              "type": "File",
              "code": "        final URI distributionUrl = configuration.getDistribution();\n\n        final PathAssembler.LocalDistribution localDistribution = pathAssembler.getDistribution(configuration);\n        final File distDir = localDistribution.getDistributionDir();\n        final File localZipFile = localDistribution.getZipFile();\n\n        return exclusiveFileAccessManager.access(localZipFile, new Callable<File>() {"
            },
            {
              "step": 118,
              "variableName": "File distDir : File",
              "startLine": 69,
              "startColumn": 64,
              "endLine": 95,
              "endColumn": 10,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/Install.java",
              "type": "File",
              "code": "        final File distDir = localDistribution.getDistributionDir();\n        final File localZipFile = localDistribution.getZipFile();\n\n        return exclusiveFileAccessManager.access(localZipFile, new Callable<File>() {\n            @Override\n            public File call() throws Exception {\n                final File markerFile = new File(localZipFile.getParentFile(), localZipFile.getName() + \".ok\");"
            },
            {
              "step": 119,
              "variableName": "new (...) : new Callable<File>(...) { ... } [File distDir] : File",
              "startLine": 69,
              "startColumn": 64,
              "endLine": 95,
              "endColumn": 10,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/Install.java",
              "type": "new Callable<File>(...) { ... } [File distDir] : File",
              "code": "        final File distDir = localDistribution.getDistributionDir();\n        final File localZipFile = localDistribution.getZipFile();\n\n        return exclusiveFileAccessManager.access(localZipFile, new Callable<File>() {\n            @Override\n            public File call() throws Exception {\n                final File markerFile = new File(localZipFile.getParentFile(), localZipFile.getName() + \".ok\");"
            },
            {
              "step": 120,
              "variableName": "Callable<T> task",
              "startLine": 38,
              "startColumn": 45,
              "endLine": 38,
              "endColumn": 61,
              "uri": "gradle-8.14.0/platforms/core-runtime/files/src/main/java/org/gradle/internal/file/locking/ExclusiveFileAccessManager.java",
              "type": "new Callable<File>(...) { ... } [File distDir] : File",
              "code": "        this.pollIntervalMs = pollIntervalMs;\n    }\n\n    public <T> T access(File exclusiveFile, Callable<T> task) throws Exception {\n        final File lockFile = new File(exclusiveFile.getParentFile(), exclusiveFile.getName() + LOCK_FILE_SUFFIX);\n        File lockFileDirectory = lockFile.getParentFile();\n        if (!lockFileDirectory.mkdirs()"
            },
            {
              "step": 121,
              "variableName": "task",
              "startLine": 69,
              "startColumn": 24,
              "endLine": 69,
              "endColumn": 28,
              "uri": "gradle-8.14.0/platforms/core-runtime/files/src/main/java/org/gradle/internal/file/locking/ExclusiveFileAccessManager.java",
              "type": "new Callable<File>(...) { ... } [File distDir] : File",
              "code": "            }\n\n            try {\n                return task.call();\n            } finally {\n                lock.release();\n"
            },
            {
              "step": 122,
              "variableName": "call",
              "startLine": 71,
              "startColumn": 25,
              "endLine": 71,
              "endColumn": 29,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/Install.java",
              "type": "new Callable<File>(...) { ... } [File distDir] : File",
              "code": "\n        return exclusiveFileAccessManager.access(localZipFile, new Callable<File>() {\n            @Override\n            public File call() throws Exception {\n                final File markerFile = new File(localZipFile.getParentFile(), localZipFile.getName() + \".ok\");\n                if (distDir.isDirectory() && markerFile.isFile()) {\n                    InstallCheck installCheck = verifyDistributionRoot(distDir, distDir.getAbsolutePath());"
            },
            {
              "step": 123,
              "variableName": "distDir",
              "startLine": 74,
              "startColumn": 72,
              "endLine": 74,
              "endColumn": 79,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/Install.java",
              "type": "new Callable<File>(...) { ... } [File distDir] : File",
              "code": "            public File call() throws Exception {\n                final File markerFile = new File(localZipFile.getParentFile(), localZipFile.getName() + \".ok\");\n                if (distDir.isDirectory() && markerFile.isFile()) {\n                    InstallCheck installCheck = verifyDistributionRoot(distDir, distDir.getAbsolutePath());\n                    if (installCheck.isVerified()) {\n                        return installCheck.gradleHome;\n                    }"
            },
            {
              "step": 124,
              "variableName": "distDir",
              "startLine": 74,
              "startColumn": 72,
              "endLine": 74,
              "endColumn": 79,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/Install.java",
              "type": "File",
              "code": "            public File call() throws Exception {\n                final File markerFile = new File(localZipFile.getParentFile(), localZipFile.getName() + \".ok\");\n                if (distDir.isDirectory() && markerFile.isFile()) {\n                    InstallCheck installCheck = verifyDistributionRoot(distDir, distDir.getAbsolutePath());\n                    if (installCheck.isVerified()) {\n                        return installCheck.gradleHome;\n                    }"
            },
            {
              "step": 125,
              "variableName": "String distributionDescription",
              "startLine": 209,
              "startColumn": 63,
              "endLine": 209,
              "endColumn": 93,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/Install.java",
              "type": "String",
              "code": "        return hexString.toString();\n    }\n\n    private InstallCheck verifyDistributionRoot(File distDir, String distributionDescription) {\n        List<File> dirs = listDirs(distDir);\n        if (dirs.isEmpty()) {\n            return InstallCheck.failure(format(\"Gradle distribution '%s' does not contain any directories. Expected to find exactly 1 directory.\", distributionDescription));"
            },
            {
              "step": 126,
              "variableName": "distributionDescription",
              "startLine": 212,
              "startColumn": 148,
              "endLine": 212,
              "endColumn": 171,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/Install.java",
              "type": "String",
              "code": "    private InstallCheck verifyDistributionRoot(File distDir, String distributionDescription) {\n        List<File> dirs = listDirs(distDir);\n        if (dirs.isEmpty()) {\n            return InstallCheck.failure(format(\"Gradle distribution '%s' does not contain any directories. Expected to find exactly 1 directory.\", distributionDescription));\n        }\n        if (dirs.size() != 1) {\n            return InstallCheck.failure(format(\"Gradle distribution '%s' contains too many directories. Expected to find exactly 1 directory.\", distributionDescription));"
            },
            {
              "step": 127,
              "variableName": "format(\"Gradle distribution '%s' does not contain any directories. Expected to find exactly 1 directory.\", distributionDescription)",
              "startLine": 212,
              "startColumn": 41,
              "endLine": 212,
              "endColumn": 172,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/Install.java",
              "type": "Object[] [[]] : String",
              "code": "    private InstallCheck verifyDistributionRoot(File distDir, String distributionDescription) {\n        List<File> dirs = listDirs(distDir);\n        if (dirs.isEmpty()) {\n            return InstallCheck.failure(format(\"Gradle distribution '%s' does not contain any directories. Expected to find exactly 1 directory.\", distributionDescription));\n        }\n        if (dirs.size() != 1) {\n            return InstallCheck.failure(format(\"Gradle distribution '%s' contains too many directories. Expected to find exactly 1 directory.\", distributionDescription));"
            },
            {
              "step": 128,
              "variableName": "format(\"Gradle distribution '%s' does not contain any directories. Expected to find exactly 1 directory.\", distributionDescription)",
              "startLine": 212,
              "startColumn": 41,
              "endLine": 212,
              "endColumn": 172,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/Install.java",
              "type": "String",
              "code": "    private InstallCheck verifyDistributionRoot(File distDir, String distributionDescription) {\n        List<File> dirs = listDirs(distDir);\n        if (dirs.isEmpty()) {\n            return InstallCheck.failure(format(\"Gradle distribution '%s' does not contain any directories. Expected to find exactly 1 directory.\", distributionDescription));\n        }\n        if (dirs.size() != 1) {\n            return InstallCheck.failure(format(\"Gradle distribution '%s' contains too many directories. Expected to find exactly 1 directory.\", distributionDescription));"
            },
            {
              "step": 129,
              "variableName": "String message",
              "startLine": 362,
              "startColumn": 45,
              "endLine": 362,
              "endColumn": 59,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/Install.java",
              "type": "String",
              "code": "        private final File gradleHome;\n        private final String failureMessage;\n\n        private static InstallCheck failure(String message) {\n            return new InstallCheck(null, message);\n        }\n"
            },
            {
              "step": 130,
              "variableName": "message",
              "startLine": 363,
              "startColumn": 43,
              "endLine": 363,
              "endColumn": 50,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/Install.java",
              "type": "String",
              "code": "        private final String failureMessage;\n\n        private static InstallCheck failure(String message) {\n            return new InstallCheck(null, message);\n        }\n\n        private static InstallCheck success(File gradleHome) {"
            },
            {
              "step": 131,
              "variableName": "String failureMessage",
              "startLine": 370,
              "startColumn": 47,
              "endLine": 370,
              "endColumn": 68,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/Install.java",
              "type": "String",
              "code": "            return new InstallCheck(gradleHome, null);\n        }\n\n        private InstallCheck(File gradleHome, String failureMessage) {\n            this.gradleHome = gradleHome;\n            this.failureMessage = failureMessage;\n        }"
            },
            {
              "step": 132,
              "variableName": "failureMessage",
              "startLine": 372,
              "startColumn": 35,
              "endLine": 372,
              "endColumn": 49,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/Install.java",
              "type": "String",
              "code": "\n        private InstallCheck(File gradleHome, String failureMessage) {\n            this.gradleHome = gradleHome;\n            this.failureMessage = failureMessage;\n        }\n\n        private boolean isVerified() {"
            },
            {
              "step": 133,
              "variableName": "this",
              "startLine": 372,
              "startColumn": 13,
              "endLine": 372,
              "endColumn": 17,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/Install.java",
              "type": "InstallCheck [failureMessage] : String",
              "code": "\n        private InstallCheck(File gradleHome, String failureMessage) {\n            this.gradleHome = gradleHome;\n            this.failureMessage = failureMessage;\n        }\n\n        private boolean isVerified() {"
            },
            {
              "step": 134,
              "variableName": "new InstallCheck(null, message)",
              "startLine": 363,
              "startColumn": 20,
              "endLine": 363,
              "endColumn": 51,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/Install.java",
              "type": "InstallCheck [failureMessage] : String",
              "code": "        private final String failureMessage;\n\n        private static InstallCheck failure(String message) {\n            return new InstallCheck(null, message);\n        }\n\n        private static InstallCheck success(File gradleHome) {"
            },
            {
              "step": 135,
              "variableName": "InstallCheck.failure(format(\"Gradle distribution '%s' does not contain any directories. Expected to find exactly 1 directory.\", distributionDescription))",
              "startLine": 212,
              "startColumn": 20,
              "endLine": 212,
              "endColumn": 173,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/Install.java",
              "type": "InstallCheck [failureMessage] : String",
              "code": "    private InstallCheck verifyDistributionRoot(File distDir, String distributionDescription) {\n        List<File> dirs = listDirs(distDir);\n        if (dirs.isEmpty()) {\n            return InstallCheck.failure(format(\"Gradle distribution '%s' does not contain any directories. Expected to find exactly 1 directory.\", distributionDescription));\n        }\n        if (dirs.size() != 1) {\n            return InstallCheck.failure(format(\"Gradle distribution '%s' contains too many directories. Expected to find exactly 1 directory.\", distributionDescription));"
            },
            {
              "step": 136,
              "variableName": "verifyDistributionRoot(distDir, distDir.getAbsolutePath())",
              "startLine": 74,
              "startColumn": 49,
              "endLine": 74,
              "endColumn": 107,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/Install.java",
              "type": "InstallCheck [failureMessage] : String",
              "code": "            public File call() throws Exception {\n                final File markerFile = new File(localZipFile.getParentFile(), localZipFile.getName() + \".ok\");\n                if (distDir.isDirectory() && markerFile.isFile()) {\n                    InstallCheck installCheck = verifyDistributionRoot(distDir, distDir.getAbsolutePath());\n                    if (installCheck.isVerified()) {\n                        return installCheck.gradleHome;\n                    }"
            },
            {
              "step": 137,
              "variableName": "installCheck",
              "startLine": 79,
              "startColumn": 40,
              "endLine": 79,
              "endColumn": 52,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/Install.java",
              "type": "InstallCheck [failureMessage] : String",
              "code": "                        return installCheck.gradleHome;\n                    }\n                    // Distribution is invalid. Try to reinstall.\n                    System.err.println(installCheck.failureMessage);\n                    markerFile.delete();\n                }\n"
            },
            {
              "step": 138,
              "variableName": "installCheck.failureMessage",
              "startLine": 79,
              "startColumn": 40,
              "endLine": 79,
              "endColumn": 67,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/Install.java",
              "type": "",
              "code": "                        return installCheck.gradleHome;\n                    }\n                    // Distribution is invalid. Try to reinstall.\n                    System.err.println(installCheck.failureMessage);\n                    markerFile.delete();\n                }\n"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "src",
              "startLine": 115,
              "startColumn": 13,
              "endLine": 115,
              "endColumn": 16,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "Object",
              "code": "    }\n\n    private static void appendDisplayName(Object src, StringBuilder stringBuilder) {\n        if (src instanceof Describable) {\n            Describable describable = (Describable) src;\n            stringBuilder.append(describable.getDisplayName());\n        } else {"
            },
            {
              "step": 1,
              "variableName": "src",
              "startLine": 119,
              "startColumn": 34,
              "endLine": 119,
              "endColumn": 37,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "Object",
              "code": "            Describable describable = (Describable) src;\n            stringBuilder.append(describable.getDisplayName());\n        } else {\n            stringBuilder.append(src.toString());\n        }\n    }\n"
            },
            {
              "step": 2,
              "variableName": "toString",
              "startLine": 397,
              "startColumn": 19,
              "endLine": 397,
              "endColumn": 27,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "TestFile",
              "code": "    }\n\n    @Override\n    public String toString() {\n        return getPath();\n    }\n"
            },
            {
              "step": 3,
              "variableName": "getPath()",
              "startLine": 398,
              "startColumn": 16,
              "endLine": 398,
              "endColumn": 25,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "TestFile",
              "code": "\n    @Override\n    public String toString() {\n        return getPath();\n    }\n\n    public TestFile writelns(Iterable<String> lines) {"
            },
            {
              "step": 4,
              "variableName": "getPath()",
              "startLine": 398,
              "startColumn": 16,
              "endLine": 398,
              "endColumn": 25,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "String",
              "code": "\n    @Override\n    public String toString() {\n        return getPath();\n    }\n\n    public TestFile writelns(Iterable<String> lines) {"
            },
            {
              "step": 5,
              "variableName": "src.toString()",
              "startLine": 119,
              "startColumn": 34,
              "endLine": 119,
              "endColumn": 48,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "String",
              "code": "            Describable describable = (Describable) src;\n            stringBuilder.append(describable.getDisplayName());\n        } else {\n            stringBuilder.append(src.toString());\n        }\n    }\n"
            },
            {
              "step": 6,
              "variableName": "stringBuilder",
              "startLine": 119,
              "startColumn": 13,
              "endLine": 119,
              "endColumn": 26,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "StringBuilder",
              "code": "            Describable describable = (Describable) src;\n            stringBuilder.append(describable.getDisplayName());\n        } else {\n            stringBuilder.append(src.toString());\n        }\n    }\n"
            },
            {
              "step": 7,
              "variableName": "builder",
              "startLine": 202,
              "startColumn": 38,
              "endLine": 202,
              "endColumn": 45,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "StringBuilder",
              "code": "            StringBuilder builder = new StringBuilder(48);\n            appendDisplayName(part1, builder);\n            builder.append(' ');\n            appendDisplayName(part2, builder);\n            return builder.toString();\n        }\n"
            },
            {
              "step": 8,
              "variableName": "builder",
              "startLine": 203,
              "startColumn": 20,
              "endLine": 203,
              "endColumn": 27,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "StringBuilder",
              "code": "            appendDisplayName(part1, builder);\n            builder.append(' ');\n            appendDisplayName(part2, builder);\n            return builder.toString();\n        }\n\n        @Override"
            },
            {
              "step": 9,
              "variableName": "builder.toString()",
              "startLine": 203,
              "startColumn": 20,
              "endLine": 203,
              "endColumn": 38,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "String",
              "code": "            appendDisplayName(part1, builder);\n            builder.append(' ');\n            appendDisplayName(part2, builder);\n            return builder.toString();\n        }\n\n        @Override"
            },
            {
              "step": 10,
              "variableName": "describable.getDisplayName()",
              "startLine": 313,
              "startColumn": 35,
              "endLine": 313,
              "endColumn": 63,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "String",
              "code": "        public String getDisplayName() {\n            synchronized (this) {\n                if (displayName == null) {\n                    displayName = describable.getDisplayName();\n                    if (capDisplayName != null || !(describable instanceof DisplayName)) {\n                        describable = null;\n                    }"
            },
            {
              "step": 11,
              "variableName": "displayName",
              "startLine": 318,
              "startColumn": 24,
              "endLine": 318,
              "endColumn": 35,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "String",
              "code": "                        describable = null;\n                    }\n                }\n                return displayName;\n            }\n        }\n    }"
            },
            {
              "step": 12,
              "variableName": "displayName.getDisplayName()",
              "startLine": 772,
              "startColumn": 73,
              "endLine": 772,
              "endColumn": 101,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/configurations/DefaultConfiguration.java",
              "type": "String",
              "code": "                try {\n                    results = resolver.resolveGraph(DefaultConfiguration.this);\n                } catch (Exception e) {\n                    throw exceptionMapper.mapFailure(e, \"dependencies\", displayName.getDisplayName());\n                }\n\n                // Make the new state visible in case a dependency resolution listener queries the result, which requires the new state"
            },
            {
              "step": 13,
              "variableName": "String contextDisplayName",
              "startLine": 68,
              "startColumn": 77,
              "endLine": 68,
              "endColumn": 102,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "String",
              "code": "        return mapFailure(failure, type, displayName);\n    }\n\n    public TypedResolveException mapFailure(Throwable failure, String type, String contextDisplayName) {\n        if (!(failure instanceof TypedResolveException)) {\n            return new TypedResolveException(\n                type,"
            },
            {
              "step": 14,
              "variableName": "contextDisplayName",
              "startLine": 72,
              "startColumn": 17,
              "endLine": 72,
              "endColumn": 35,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "String",
              "code": "        if (!(failure instanceof TypedResolveException)) {\n            return new TypedResolveException(\n                type,\n                contextDisplayName,\n                ImmutableList.of(mapRepositoryOverrideFailure(contextDisplayName, failure))\n            );\n        }"
            },
            {
              "step": 15,
              "variableName": "new TypedResolveException(...) : TypedResolveException",
              "startLine": 70,
              "startColumn": 20,
              "endLine": 74,
              "endColumn": 14,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "TypedResolveException",
              "code": "\n    public TypedResolveException mapFailure(Throwable failure, String type, String contextDisplayName) {\n        if (!(failure instanceof TypedResolveException)) {\n            return new TypedResolveException(\n                type,\n                contextDisplayName,\n                ImmutableList.of(mapRepositoryOverrideFailure(contextDisplayName, failure))"
            },
            {
              "step": 16,
              "variableName": "exceptionMapper.mapFailure(e, \"dependencies\", displayName.getDisplayName())",
              "startLine": 772,
              "startColumn": 27,
              "endLine": 772,
              "endColumn": 102,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/configurations/DefaultConfiguration.java",
              "type": "TypedResolveException",
              "code": "                try {\n                    results = resolver.resolveGraph(DefaultConfiguration.this);\n                } catch (Exception e) {\n                    throw exceptionMapper.mapFailure(e, \"dependencies\", displayName.getDisplayName());\n                }\n\n                // Make the new state visible in case a dependency resolution listener queries the result, which requires the new state"
            },
            {
              "step": 17,
              "variableName": "e",
              "startLine": 772,
              "startColumn": 54,
              "endLine": 772,
              "endColumn": 55,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/configurations/DefaultConfiguration.java",
              "type": "Exception",
              "code": "                try {\n                    results = resolver.resolveGraph(DefaultConfiguration.this);\n                } catch (Exception e) {\n                    throw exceptionMapper.mapFailure(e, \"dependencies\", displayName.getDisplayName());\n                }\n\n                // Make the new state visible in case a dependency resolution listener queries the result, which requires the new state"
            },
            {
              "step": 18,
              "variableName": "Throwable failure",
              "startLine": 68,
              "startColumn": 45,
              "endLine": 68,
              "endColumn": 62,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Throwable",
              "code": "        return mapFailure(failure, type, displayName);\n    }\n\n    public TypedResolveException mapFailure(Throwable failure, String type, String contextDisplayName) {\n        if (!(failure instanceof TypedResolveException)) {\n            return new TypedResolveException(\n                type,"
            },
            {
              "step": 19,
              "variableName": "failure",
              "startLine": 73,
              "startColumn": 83,
              "endLine": 73,
              "endColumn": 90,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Throwable",
              "code": "            return new TypedResolveException(\n                type,\n                contextDisplayName,\n                ImmutableList.of(mapRepositoryOverrideFailure(contextDisplayName, failure))\n            );\n        }\n"
            },
            {
              "step": 20,
              "variableName": "Throwable failure",
              "startLine": 94,
              "startColumn": 78,
              "endLine": 94,
              "endColumn": 95,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Throwable",
              "code": "\n    // TODO: We should handle this exception at the source instead of using instanceof to detect it after it is thrown.\n    //       We should try to avoid catching and analyzing runtime exceptions\n    public Throwable mapRepositoryOverrideFailure(String contextDisplayName, Throwable failure) {\n        if (!(failure instanceof ModuleVersionNotFoundException) || !settingsRepositoriesIgnored()) {\n            return failure;\n        }"
            },
            {
              "step": 21,
              "variableName": "failure",
              "startLine": 108,
              "startColumn": 35,
              "endLine": 108,
              "endColumn": 42,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Throwable",
              "code": "        return new TypedResolveException(\n            \"dependencies\",\n            contextDisplayName,\n            Collections.singleton(failure),\n            resolutions\n        );\n    }"
            },
            {
              "step": 22,
              "variableName": "Collections.singleton(failure)",
              "startLine": 108,
              "startColumn": 13,
              "endLine": 108,
              "endColumn": 43,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Set [<element>] : Throwable",
              "code": "        return new TypedResolveException(\n            \"dependencies\",\n            contextDisplayName,\n            Collections.singleton(failure),\n            resolutions\n        );\n    }"
            },
            {
              "step": 23,
              "variableName": "Collections.singleton(failure)",
              "startLine": 108,
              "startColumn": 13,
              "endLine": 108,
              "endColumn": 43,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Set",
              "code": "        return new TypedResolveException(\n            \"dependencies\",\n            contextDisplayName,\n            Collections.singleton(failure),\n            resolutions\n        );\n    }"
            },
            {
              "step": 24,
              "variableName": "Iterable<? extends Throwable> failures",
              "startLine": 42,
              "startColumn": 67,
              "endLine": 42,
              "endColumn": 105,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ivyservice/TypedResolveException.java",
              "type": "Set",
              "code": "    /**\n     * Creates a new instance with resolutions.\n     */\n    public TypedResolveException(String type, String displayName, Iterable<? extends Throwable> failures, List<String> resolutions) {\n        super(buildMessage(type, displayName), failures, false);\n        this.type = type;\n        this.resolutions = ImmutableList.copyOf(resolutions);"
            },
            {
              "step": 25,
              "variableName": "failures",
              "startLine": 43,
              "startColumn": 48,
              "endLine": 43,
              "endColumn": 56,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ivyservice/TypedResolveException.java",
              "type": "Set",
              "code": "     * Creates a new instance with resolutions.\n     */\n    public TypedResolveException(String type, String displayName, Iterable<? extends Throwable> failures, List<String> resolutions) {\n        super(buildMessage(type, displayName), failures, false);\n        this.type = type;\n        this.resolutions = ImmutableList.copyOf(resolutions);\n    }"
            },
            {
              "step": 26,
              "variableName": "Iterable<? extends Throwable> causes",
              "startLine": 77,
              "startColumn": 48,
              "endLine": 77,
              "endColumn": 84,
              "uri": "gradle-8.14.0/subprojects/core-api/src/main/java/org/gradle/api/artifacts/ResolveException.java",
              "type": "Set",
              "code": "     * @since 8.9\n     */\n    @Incubating\n    protected ResolveException(String message, Iterable<? extends Throwable> causes, @SuppressWarnings(\"unused\") boolean dummy) {\n        super(message, causes);\n    }\n}"
            },
            {
              "step": 27,
              "variableName": "causes",
              "startLine": 78,
              "startColumn": 24,
              "endLine": 78,
              "endColumn": 30,
              "uri": "gradle-8.14.0/subprojects/core-api/src/main/java/org/gradle/api/artifacts/ResolveException.java",
              "type": "Set",
              "code": "     */\n    @Incubating\n    protected ResolveException(String message, Iterable<? extends Throwable> causes, @SuppressWarnings(\"unused\") boolean dummy) {\n        super(message, causes);\n    }\n}\n"
            },
            {
              "step": 28,
              "variableName": "Iterable<? extends Throwable> causes",
              "startLine": 47,
              "startColumn": 55,
              "endLine": 47,
              "endColumn": 91,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "Set",
              "code": "        this.causes.addAll(Arrays.asList(causes));\n    }\n\n    public DefaultMultiCauseException(String message, Iterable<? extends Throwable> causes) {\n        super(message);\n        this.message = message;\n        initCauses(causes);"
            },
            {
              "step": 29,
              "variableName": "causes",
              "startLine": 50,
              "startColumn": 20,
              "endLine": 50,
              "endColumn": 26,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "Set",
              "code": "    public DefaultMultiCauseException(String message, Iterable<? extends Throwable> causes) {\n        super(message);\n        this.message = message;\n        initCauses(causes);\n    }\n\n    public DefaultMultiCauseException(Factory<String> messageFactory) {"
            },
            {
              "step": 30,
              "variableName": "Iterable<? extends Throwable> causes",
              "startLine": 112,
              "startColumn": 28,
              "endLine": 112,
              "endColumn": 64,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "Iterable",
              "code": "        return null;\n    }\n\n    public void initCauses(Iterable<? extends Throwable> causes) {\n        this.causes.clear();\n        for (Throwable cause : causes) {\n            this.causes.add(cause);"
            },
            {
              "step": 31,
              "variableName": "cause",
              "startLine": 115,
              "startColumn": 29,
              "endLine": 115,
              "endColumn": 34,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "Throwable",
              "code": "    public void initCauses(Iterable<? extends Throwable> causes) {\n        this.causes.clear();\n        for (Throwable cause : causes) {\n            this.causes.add(cause);\n        }\n    }\n"
            },
            {
              "step": 32,
              "variableName": "this.causes",
              "startLine": 115,
              "startColumn": 13,
              "endLine": 115,
              "endColumn": 24,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "CopyOnWriteArrayList [<element>] : Throwable",
              "code": "    public void initCauses(Iterable<? extends Throwable> causes) {\n        this.causes.clear();\n        for (Throwable cause : causes) {\n            this.causes.add(cause);\n        }\n    }\n"
            },
            {
              "step": 33,
              "variableName": "this",
              "startLine": 115,
              "startColumn": 13,
              "endLine": 115,
              "endColumn": 17,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "DefaultMultiCauseException [causes, <element>] : Throwable",
              "code": "    public void initCauses(Iterable<? extends Throwable> causes) {\n        this.causes.clear();\n        for (Throwable cause : causes) {\n            this.causes.add(cause);\n        }\n    }\n"
            },
            {
              "step": 34,
              "variableName": "projectConfigurationException",
              "startLine": 57,
              "startColumn": 17,
              "endLine": 57,
              "endColumn": 46,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/DefaultExceptionAnalyser.java",
              "type": "ProjectConfigurationException [causes, <element>] : Throwable",
              "code": "                }\n            }\n            if (!additionalFailures.isEmpty()) {\n                projectConfigurationException.initCauses(additionalFailures);\n                failures.add(transform(projectConfigurationException));\n            }\n        } else if (exception instanceof ServiceCreationException) {"
            },
            {
              "step": 35,
              "variableName": "projectConfigurationException",
              "startLine": 58,
              "startColumn": 40,
              "endLine": 58,
              "endColumn": 69,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/DefaultExceptionAnalyser.java",
              "type": "ProjectConfigurationException [causes, <element>] : Throwable",
              "code": "            }\n            if (!additionalFailures.isEmpty()) {\n                projectConfigurationException.initCauses(additionalFailures);\n                failures.add(transform(projectConfigurationException));\n            }\n        } else if (exception instanceof ServiceCreationException) {\n            failures.add(transform(new InitializationException(exception)));"
            },
            {
              "step": 36,
              "variableName": "transform(projectConfigurationException)",
              "startLine": 58,
              "startColumn": 30,
              "endLine": 58,
              "endColumn": 70,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/DefaultExceptionAnalyser.java",
              "type": "LocationAwareException",
              "code": "            }\n            if (!additionalFailures.isEmpty()) {\n                projectConfigurationException.initCauses(additionalFailures);\n                failures.add(transform(projectConfigurationException));\n            }\n        } else if (exception instanceof ServiceCreationException) {\n            failures.add(transform(new InitializationException(exception)));"
            },
            {
              "step": 37,
              "variableName": "failures",
              "startLine": 58,
              "startColumn": 17,
              "endLine": 58,
              "endColumn": 25,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/DefaultExceptionAnalyser.java",
              "type": "Collection [<element>] : LocationAwareException",
              "code": "            }\n            if (!additionalFailures.isEmpty()) {\n                projectConfigurationException.initCauses(additionalFailures);\n                failures.add(transform(projectConfigurationException));\n            }\n        } else if (exception instanceof ServiceCreationException) {\n            failures.add(transform(new InitializationException(exception)));"
            },
            {
              "step": 38,
              "variableName": "result",
              "startLine": 53,
              "startColumn": 54,
              "endLine": 53,
              "endColumn": 60,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/MultipleBuildFailuresExceptionAnalyser.java",
              "type": "ArrayList [<element>] : LocationAwareException",
              "code": "        for (Throwable failure : failures) {\n            if (failure instanceof MultipleBuildFailures) {\n                for (Throwable cause : ((MultipleBuildFailures) failure).getCauses()) {\n                    collector.collectFailures(cause, result);\n                }\n            } else {\n                collector.collectFailures(failure, result);"
            },
            {
              "step": 39,
              "variableName": "result",
              "startLine": 60,
              "startColumn": 39,
              "endLine": 60,
              "endColumn": 45,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/MultipleBuildFailuresExceptionAnalyser.java",
              "type": "ArrayList [<element>] : LocationAwareException",
              "code": "            }\n        }\n        if (result.size() == 1 && result.get(0) instanceof RuntimeException) {\n            return (RuntimeException) result.get(0);\n        } else {\n            return new MultipleBuildFailures(result);\n        }"
            },
            {
              "step": 40,
              "variableName": "result.get(0)",
              "startLine": 60,
              "startColumn": 39,
              "endLine": 60,
              "endColumn": 52,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/MultipleBuildFailuresExceptionAnalyser.java",
              "type": "LocationAwareException",
              "code": "            }\n        }\n        if (result.size() == 1 && result.get(0) instanceof RuntimeException) {\n            return (RuntimeException) result.get(0);\n        } else {\n            return new MultipleBuildFailures(result);\n        }"
            },
            {
              "step": 41,
              "variableName": "(RuntimeException) result.get(0)",
              "startLine": 60,
              "startColumn": 20,
              "endLine": 60,
              "endColumn": 52,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/MultipleBuildFailuresExceptionAnalyser.java",
              "type": "LocationAwareException",
              "code": "            }\n        }\n        if (result.size() == 1 && result.get(0) instanceof RuntimeException) {\n            return (RuntimeException) result.get(0);\n        } else {\n            return new MultipleBuildFailures(result);\n        }"
            },
            {
              "step": 42,
              "variableName": "exceptionAnalyser.transform(finishFailures)",
              "startLine": 72,
              "startColumn": 16,
              "endLine": 72,
              "endColumn": 59,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/internal/buildtree/DefaultBuildTreeFinishExecutor.java",
              "type": "LocationAwareException",
              "code": "            finishFailures.addAll(result.getFailures());\n        });\n\n        return exceptionAnalyser.transform(finishFailures);\n    }\n}\n"
            },
            {
              "step": 43,
              "variableName": "delegate.finishBuildTree(failures)",
              "startLine": 46,
              "startColumn": 28,
              "endLine": 46,
              "endColumn": 62,
              "uri": "gradle-8.14.0/subprojects/composite-builds/src/main/java/org/gradle/composite/internal/OperationFiringBuildTreeFinishExecutor.java",
              "type": "LocationAwareException",
              "code": "            @Override\n            public RuntimeException call(BuildOperationContext context) {\n                try {\n                    return delegate.finishBuildTree(failures);\n                } finally {\n                    context.setResult(RESULT);\n                }"
            },
            {
              "step": 44,
              "variableName": "buildOperation.call(context)",
              "startLine": 239,
              "startColumn": 21,
              "endLine": 239,
              "endColumn": 49,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/testFixtures/java/org/gradle/internal/operations/TestBuildOperationRunner.java",
              "type": "LocationAwareException",
              "code": "            TestBuildOperationContext context = new TestBuildOperationContext(record);\n            T t;\n            try {\n                t = buildOperation.call(context);\n            } catch (Throwable failure) {\n                if (record.failure == null) {\n                    record.failure = failure;"
            },
            {
              "step": 45,
              "variableName": "t",
              "startLine": 246,
              "startColumn": 20,
              "endLine": 246,
              "endColumn": 21,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/testFixtures/java/org/gradle/internal/operations/TestBuildOperationRunner.java",
              "type": "LocationAwareException",
              "code": "                }\n                throw throwAsUncheckedException(failure);\n            }\n            return t;\n        }\n\n        private <O extends BuildOperation> void execute(O buildOperation, BuildOperationWorker<O> worker) {"
            },
            {
              "step": 46,
              "variableName": "log.call(buildOperation)",
              "startLine": 51,
              "startColumn": 16,
              "endLine": 51,
              "endColumn": 40,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/testFixtures/java/org/gradle/internal/operations/TestBuildOperationRunner.java",
              "type": "LocationAwareException",
              "code": "\n    @Override\n    public <T> T call(CallableBuildOperation<T> buildOperation) {\n        return log.call(buildOperation);\n    }\n\n    @Override"
            },
            {
              "step": 47,
              "variableName": "ca",
              "startLine": 115,
              "startColumn": 5,
              "endLine": 121,
              "endColumn": 7,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/configurationcache/ConfigurationCacheBuildOperations.kt",
              "type": "LocationAwareException",
              "code": "\ninternal\nfun <T : Any> BuildOperationRunner.withModelLoadOperation(block: () -> T): T =\n    call(object : CallableBuildOperation<T> {\n        override fun description(): BuildOperationDescriptor.Builder = BuildOperationDescriptor\n            .displayName(\"Load model from configuration cache\")\n            .progressDisplayName(\"Loading model from configuration cache\")"
            },
            {
              "step": 48,
              "variableName": "ca",
              "startLine": 115,
              "startColumn": 5,
              "endLine": 121,
              "endColumn": 7,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/configurationcache/ConfigurationCacheBuildOperations.kt",
              "type": "LocationAwareException",
              "code": "\ninternal\nfun <T : Any> BuildOperationRunner.withModelLoadOperation(block: () -> T): T =\n    call(object : CallableBuildOperation<T> {\n        override fun description(): BuildOperationDescriptor.Builder = BuildOperationDescriptor\n            .displayName(\"Load model from configuration cache\")\n            .progressDisplayName(\"Loading model from configuration cache\")"
            },
            {
              "step": 49,
              "variableName": "b",
              "startLine": 635,
              "startColumn": 9,
              "endLine": 641,
              "endColumn": 10,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "        // No need to record the `ClassLoaderScope` tree when loading\n        scopeRegistryListener.dispose()\n\n        buildOperationRunner.withModelLoadOperation {\n            val storeLoadResult = entryStore.useForStateLoad(StateType.Model) { stateFile: ConfigurationCacheStateFile ->\n                cacheIO.readModelFrom(stateFile)\n            }"
            },
            {
              "step": 50,
              "variableName": "block()",
              "startLine": 668,
              "startColumn": 22,
              "endLine": 668,
              "endColumn": 29,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "    private\n    inline fun <T> runAtConfigurationTime(block: () -> T): T {\n        prepareConfigurationTimeBarrier()\n        val result = block()\n        crossConfigurationTimeBarrier()\n        return result\n    }"
            },
            {
              "step": 51,
              "variableName": "result",
              "startLine": 670,
              "startColumn": 16,
              "endLine": 670,
              "endColumn": 22,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "        prepareConfigurationTimeBarrier()\n        val result = block()\n        crossConfigurationTimeBarrier()\n        return result\n    }\n\n    private"
            },
            {
              "step": 52,
              "variableName": "runAtConfigurationTime(...) : LocationAwareException",
              "startLine": 631,
              "startColumn": 28,
              "endLine": 642,
              "endColumn": 6,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "    data class LoadResultMetadata(val originInvocationId: String? = null)\n\n    private\n    fun loadModel(): Any = runAtConfigurationTime {\n        // No need to record the `ClassLoaderScope` tree when loading\n        scopeRegistryListener.dispose()\n"
            },
            {
              "step": 53,
              "variableName": "loadModel()",
              "startLine": 268,
              "startColumn": 20,
              "endLine": 268,
              "endColumn": 31,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "    override fun <T : Any> loadOrCreateModel(creator: () -> T): T {\n        if (isLoaded) {\n            runLoadedSideEffects()\n            return loadModel().uncheckedCast()\n        }\n\n        return runWorkThatContributesToCacheEntry {"
            },
            {
              "step": 54,
              "variableName": "Any",
              "startLine": 22,
              "startColumn": 15,
              "endLine": 22,
              "endColumn": 18,
              "uri": "gradle-8.14.0/platforms/core-configuration/stdlib-kotlin-extensions/src/main/kotlin/org/gradle/internal/extensions/stdlib/CastExtensions.kt",
              "type": "Object",
              "code": "import org.gradle.internal.Cast\n\n\nfun <T : Any> Any.uncheckedCast(): T =\n    Cast.uncheckedNonnullCast(this)\n"
            },
            {
              "step": 55,
              "variableName": "this",
              "startLine": 23,
              "startColumn": 31,
              "endLine": 23,
              "endColumn": 35,
              "uri": "gradle-8.14.0/platforms/core-configuration/stdlib-kotlin-extensions/src/main/kotlin/org/gradle/internal/extensions/stdlib/CastExtensions.kt",
              "type": "Object",
              "code": "\n\nfun <T : Any> Any.uncheckedCast(): T =\n    Cast.uncheckedNonnullCast(this)\n"
            },
            {
              "step": 56,
              "variableName": "Object object",
              "startLine": 76,
              "startColumn": 46,
              "endLine": 76,
              "endColumn": 59,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/Cast.java",
              "type": "Object",
              "code": "    }\n\n    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})\n    public static <T> T uncheckedNonnullCast(Object object) {\n        return (T) object;\n    }\n}"
            },
            {
              "step": 57,
              "variableName": "(T) object",
              "startLine": 77,
              "startColumn": 16,
              "endLine": 77,
              "endColumn": 26,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/Cast.java",
              "type": "Object",
              "code": "\n    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})\n    public static <T> T uncheckedNonnullCast(Object object) {\n        return (T) object;\n    }\n}\n"
            },
            {
              "step": 58,
              "variableName": "Cast.uncheckedNonnullCast(defaultValue)",
              "startLine": 112,
              "startColumn": 73,
              "endLine": 112,
              "endColumn": 112,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/api/internal/provider/AbstractMinimalProvider.java",
              "type": "Object",
              "code": "\n    @Override\n    public T getOrElse(T defaultValue) {\n        return calculateOwnValue(ValueConsumer.IgnoreUnsafeRead).orElse(Cast.uncheckedNonnullCast(defaultValue));\n    }\n\n    @Override"
            },
            {
              "step": 59,
              "variableName": "T defaultValue",
              "startLine": 610,
              "startColumn": 25,
              "endLine": 610,
              "endColumn": 39,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/api/internal/provider/ValueSupplier.java",
              "type": "Object",
              "code": "        }\n\n        @Override\n        public T orElse(T defaultValue) {\n            return defaultValue;\n        }\n"
            },
            {
              "step": 60,
              "variableName": "defaultValue",
              "startLine": 611,
              "startColumn": 20,
              "endLine": 611,
              "endColumn": 32,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/api/internal/provider/ValueSupplier.java",
              "type": "Object",
              "code": "\n        @Override\n        public T orElse(T defaultValue) {\n            return defaultValue;\n        }\n\n        @Override"
            },
            {
              "step": 61,
              "variableName": "calculateOwnValue(ValueConsumer.IgnoreUnsafeRead).orElse(Cast.uncheckedNonnullCast(defaultValue))",
              "startLine": 112,
              "startColumn": 16,
              "endLine": 112,
              "endColumn": 113,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/api/internal/provider/AbstractMinimalProvider.java",
              "type": "Object",
              "code": "\n    @Override\n    public T getOrElse(T defaultValue) {\n        return calculateOwnValue(ValueConsumer.IgnoreUnsafeRead).orElse(Cast.uncheckedNonnullCast(defaultValue));\n    }\n\n    @Override"
            },
            {
              "step": 62,
              "variableName": "getNativeImageCapable().getOrElse(false)",
              "startLine": 105,
              "startColumn": 13,
              "endLine": 105,
              "endColumn": 53,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-configuration/src/main/java/org/gradle/buildconfiguration/tasks/UpdateDaemonJvm.java",
              "type": "Boolean",
              "code": "            getPropertiesFile().get().getAsFile(),\n            getLanguageVersion().get(),\n            jvmVendorCriteria,\n            getNativeImageCapable().getOrElse(false),\n            getToolchainDownloadUrls().get()\n        );\n    }"
            },
            {
              "step": 63,
              "variableName": "File propertiesFile",
              "startLine": 45,
              "startColumn": 9,
              "endLine": 45,
              "endColumn": 28,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-configuration/src/main/java/org/gradle/internal/buildconfiguration/tasks/DaemonJvmPropertiesModifier.java",
              "type": "File",
              "code": "    }\n\n    public void updateJvmCriteria(\n        File propertiesFile,\n        JavaLanguageVersion toolchainVersion,\n        @Nullable String toolchainVendor,\n        boolean nativeImageCapable,"
            },
            {
              "step": 64,
              "variableName": "propertiesFile",
              "startLine": 67,
              "startColumn": 33,
              "endLine": 67,
              "endColumn": 47,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-configuration/src/main/java/org/gradle/internal/buildconfiguration/tasks/DaemonJvmPropertiesModifier.java",
              "type": "File",
              "code": "            daemonJvmProperties.put(toolchainUrlProperty, uri.toString());\n        });\n\n        GFileUtils.parentMkdirs(propertiesFile);\n        try {\n            PropertiesUtils.store(daemonJvmProperties, propertiesFile, \"This file is generated by \" + DaemonJvmPropertiesConfigurator.TASK_NAME);\n        } catch (IOException e) {"
            },
            {
              "step": 65,
              "variableName": "File child",
              "startLine": 241,
              "startColumn": 37,
              "endLine": 241,
              "endColumn": 47,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/util/internal/GFileUtils.java",
              "type": "File",
              "code": "     * @return The parent dir file\n     * @see #mkdirs(java.io.File)\n     */\n    public static File parentMkdirs(File child) {\n        File parent = child.getParentFile();\n        mkdirs(parent);\n        return parent;"
            },
            {
              "step": 66,
              "variableName": "child",
              "startLine": 242,
              "startColumn": 23,
              "endLine": 242,
              "endColumn": 28,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/util/internal/GFileUtils.java",
              "type": "File",
              "code": "     * @see #mkdirs(java.io.File)\n     */\n    public static File parentMkdirs(File child) {\n        File parent = child.getParentFile();\n        mkdirs(parent);\n        return parent;\n    }"
            },
            {
              "step": 67,
              "variableName": "getParentFile",
              "startLine": 392,
              "startColumn": 21,
              "endLine": 392,
              "endColumn": 34,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "TestFile",
              "code": "    }\n\n    @Override\n    public TestFile getParentFile() {\n        return super.getParentFile() == null ? null : new TestFile(super.getParentFile());\n    }\n"
            },
            {
              "step": 68,
              "variableName": "super",
              "startLine": 393,
              "startColumn": 68,
              "endLine": 393,
              "endColumn": 73,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "TestFile",
              "code": "\n    @Override\n    public TestFile getParentFile() {\n        return super.getParentFile() == null ? null : new TestFile(super.getParentFile());\n    }\n\n    @Override"
            },
            {
              "step": 69,
              "variableName": "super.getParentFile()",
              "startLine": 393,
              "startColumn": 68,
              "endLine": 393,
              "endColumn": 89,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "File",
              "code": "\n    @Override\n    public TestFile getParentFile() {\n        return super.getParentFile() == null ? null : new TestFile(super.getParentFile());\n    }\n\n    @Override"
            },
            {
              "step": 70,
              "variableName": "File file",
              "startLine": 77,
              "startColumn": 21,
              "endLine": 77,
              "endColumn": 30,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "File",
              "code": "    private boolean useNativeTools;\n    private final File relativeBase;\n\n    public TestFile(File file, Object... path) {\n        super(join(file, path).getAbsolutePath());\n        this.relativeBase = file;\n    }"
            },
            {
              "step": 71,
              "variableName": "file",
              "startLine": 78,
              "startColumn": 20,
              "endLine": 78,
              "endColumn": 24,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "File",
              "code": "    private final File relativeBase;\n\n    public TestFile(File file, Object... path) {\n        super(join(file, path).getAbsolutePath());\n        this.relativeBase = file;\n    }\n"
            },
            {
              "step": 72,
              "variableName": "File file",
              "startLine": 126,
              "startColumn": 30,
              "endLine": 126,
              "endColumn": 39,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "File",
              "code": "        }\n    }\n\n    private static File join(File file, Object[] path) {\n        File current = file.getAbsoluteFile();\n        for (Object p : path) {\n            current = new File(current, p.toString());"
            },
            {
              "step": 73,
              "variableName": "file",
              "startLine": 127,
              "startColumn": 24,
              "endLine": 127,
              "endColumn": 28,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "File",
              "code": "    }\n\n    private static File join(File file, Object[] path) {\n        File current = file.getAbsoluteFile();\n        for (Object p : path) {\n            current = new File(current, p.toString());\n        }"
            },
            {
              "step": 74,
              "variableName": "file.getAbsoluteFile()",
              "startLine": 127,
              "startColumn": 24,
              "endLine": 127,
              "endColumn": 46,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "File",
              "code": "    }\n\n    private static File join(File file, Object[] path) {\n        File current = file.getAbsoluteFile();\n        for (Object p : path) {\n            current = new File(current, p.toString());\n        }"
            },
            {
              "step": 75,
              "variableName": "current",
              "startLine": 132,
              "startColumn": 20,
              "endLine": 132,
              "endColumn": 27,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "File",
              "code": "            current = new File(current, p.toString());\n        }\n        try {\n            return current.getCanonicalFile();\n        } catch (IOException e) {\n            throw new RuntimeException(String.format(\"Could not canonicalise '%s'.\", current), e);\n        }"
            },
            {
              "step": 76,
              "variableName": "getCanonicalFile",
              "startLine": 109,
              "startColumn": 17,
              "endLine": 109,
              "endColumn": 33,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "TestFile",
              "code": "    }\n\n    @Override\n    public File getCanonicalFile() throws IOException {\n        return new File(getAbsolutePath()).getCanonicalFile();\n    }\n"
            },
            {
              "step": 77,
              "variableName": "getAbsolutePath()",
              "startLine": 110,
              "startColumn": 25,
              "endLine": 110,
              "endColumn": 42,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "TestFile",
              "code": "\n    @Override\n    public File getCanonicalFile() throws IOException {\n        return new File(getAbsolutePath()).getCanonicalFile();\n    }\n\n    @Override"
            },
            {
              "step": 78,
              "variableName": "getAbsolutePath()",
              "startLine": 110,
              "startColumn": 25,
              "endLine": 110,
              "endColumn": 42,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "String",
              "code": "\n    @Override\n    public File getCanonicalFile() throws IOException {\n        return new File(getAbsolutePath()).getCanonicalFile();\n    }\n\n    @Override"
            },
            {
              "step": 79,
              "variableName": "new File(getAbsolutePath())",
              "startLine": 110,
              "startColumn": 16,
              "endLine": 110,
              "endColumn": 43,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "File",
              "code": "\n    @Override\n    public File getCanonicalFile() throws IOException {\n        return new File(getAbsolutePath()).getCanonicalFile();\n    }\n\n    @Override"
            },
            {
              "step": 80,
              "variableName": "new File(getAbsolutePath()).getCanonicalFile()",
              "startLine": 110,
              "startColumn": 16,
              "endLine": 110,
              "endColumn": 62,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "File",
              "code": "\n    @Override\n    public File getCanonicalFile() throws IOException {\n        return new File(getAbsolutePath()).getCanonicalFile();\n    }\n\n    @Override"
            },
            {
              "step": 81,
              "variableName": "current.getCanonicalFile()",
              "startLine": 132,
              "startColumn": 20,
              "endLine": 132,
              "endColumn": 46,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "File",
              "code": "            current = new File(current, p.toString());\n        }\n        try {\n            return current.getCanonicalFile();\n        } catch (IOException e) {\n            throw new RuntimeException(String.format(\"Could not canonicalise '%s'.\", current), e);\n        }"
            },
            {
              "step": 82,
              "variableName": "join(file, path)",
              "startLine": 78,
              "startColumn": 15,
              "endLine": 78,
              "endColumn": 31,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "File",
              "code": "    private final File relativeBase;\n\n    public TestFile(File file, Object... path) {\n        super(join(file, path).getAbsolutePath());\n        this.relativeBase = file;\n    }\n"
            },
            {
              "step": 83,
              "variableName": "join(file, path).getAbsolutePath()",
              "startLine": 78,
              "startColumn": 15,
              "endLine": 78,
              "endColumn": 49,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "String",
              "code": "    private final File relativeBase;\n\n    public TestFile(File file, Object... path) {\n        super(join(file, path).getAbsolutePath());\n        this.relativeBase = file;\n    }\n"
            },
            {
              "step": 84,
              "variableName": "super(join(file, path).getAbsolutePath());",
              "startLine": 78,
              "startColumn": 9,
              "endLine": 78,
              "endColumn": 51,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "TestFile",
              "code": "    private final File relativeBase;\n\n    public TestFile(File file, Object... path) {\n        super(join(file, path).getAbsolutePath());\n        this.relativeBase = file;\n    }\n"
            },
            {
              "step": 85,
              "variableName": "new TestFile(super.getParentFile())",
              "startLine": 393,
              "startColumn": 55,
              "endLine": 393,
              "endColumn": 90,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "TestFile",
              "code": "\n    @Override\n    public TestFile getParentFile() {\n        return super.getParentFile() == null ? null : new TestFile(super.getParentFile());\n    }\n\n    @Override"
            },
            {
              "step": 86,
              "variableName": "super.getParentFile() == null ? null : new TestFile(super.getParentFile())",
              "startLine": 393,
              "startColumn": 16,
              "endLine": 393,
              "endColumn": 90,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "... : TestFile",
              "code": "\n    @Override\n    public TestFile getParentFile() {\n        return super.getParentFile() == null ? null : new TestFile(super.getParentFile());\n    }\n\n    @Override"
            },
            {
              "step": 87,
              "variableName": "wrapperJar.getParentFile().getParentFile().getParentFile()",
              "startLine": 79,
              "startColumn": 16,
              "endLine": 79,
              "endColumn": 74,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-main/src/main/java/org/gradle/wrapper/GradleWrapperMain.java",
              "type": "TestFile",
              "code": "    }\n\n    private static File rootDir(File wrapperJar) {\n        return wrapperJar.getParentFile().getParentFile().getParentFile();\n    }\n\n    private static File wrapperProperties(File wrapperJar) {"
            },
            {
              "step": 88,
              "variableName": "rootDir(wrapperJar)",
              "startLine": 41,
              "startColumn": 24,
              "endLine": 41,
              "endColumn": 43,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-main/src/main/java/org/gradle/wrapper/GradleWrapperMain.java",
              "type": "TestFile",
              "code": "    public static void main(String[] args) throws Exception {\n        File wrapperJar = wrapperJar();\n        File propertiesFile = wrapperProperties(wrapperJar);\n        File rootDir = rootDir(wrapperJar);\n\n        CommandLineParser parser = new CommandLineParser();\n        parser.allowUnknownOptions();"
            },
            {
              "step": 89,
              "variableName": "rootDir",
              "startLine": 58,
              "startColumn": 63,
              "endLine": 58,
              "endColumn": 70,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-main/src/main/java/org/gradle/wrapper/GradleWrapperMain.java",
              "type": "TestFile",
              "code": "\n        File gradleUserHome = gradleUserHome(options);\n\n        addSystemProperties(systemProperties, gradleUserHome, rootDir);\n\n        Logger logger = logger(options);\n"
            },
            {
              "step": 90,
              "variableName": "rootDir",
              "startLine": 68,
              "startColumn": 81,
              "endLine": 68,
              "endColumn": 88,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-main/src/main/java/org/gradle/wrapper/GradleWrapperMain.java",
              "type": "TestFile",
              "code": "\n        wrapperExecutor.execute(\n                args,\n                new Install(logger, download, new PathAssembler(gradleUserHome, rootDir)),\n                new BootstrapMainStarter());\n    }\n"
            },
            {
              "step": 91,
              "variableName": "File projectDirectory",
              "startLine": 30,
              "startColumn": 47,
              "endLine": 30,
              "endColumn": 68,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/PathAssembler.java",
              "type": "TestFile",
              "code": "    private final File gradleUserHome;\n    private final File projectDirectory;\n\n    public PathAssembler(File gradleUserHome, File projectDirectory) {\n        this.gradleUserHome = gradleUserHome;\n        this.projectDirectory = projectDirectory;\n    }"
            },
            {
              "step": 92,
              "variableName": "projectDirectory",
              "startLine": 32,
              "startColumn": 33,
              "endLine": 32,
              "endColumn": 49,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/PathAssembler.java",
              "type": "TestFile",
              "code": "\n    public PathAssembler(File gradleUserHome, File projectDirectory) {\n        this.gradleUserHome = gradleUserHome;\n        this.projectDirectory = projectDirectory;\n    }\n\n    /**"
            },
            {
              "step": 93,
              "variableName": "this",
              "startLine": 32,
              "startColumn": 9,
              "endLine": 32,
              "endColumn": 13,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/PathAssembler.java",
              "type": "PathAssembler [projectDirectory] : TestFile",
              "code": "\n    public PathAssembler(File gradleUserHome, File projectDirectory) {\n        this.gradleUserHome = gradleUserHome;\n        this.projectDirectory = projectDirectory;\n    }\n\n    /**"
            },
            {
              "step": 94,
              "variableName": "new PathAssembler(gradleUserHome, rootDir)",
              "startLine": 68,
              "startColumn": 47,
              "endLine": 68,
              "endColumn": 89,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-main/src/main/java/org/gradle/wrapper/GradleWrapperMain.java",
              "type": "PathAssembler [projectDirectory] : TestFile",
              "code": "\n        wrapperExecutor.execute(\n                args,\n                new Install(logger, download, new PathAssembler(gradleUserHome, rootDir)),\n                new BootstrapMainStarter());\n    }\n"
            },
            {
              "step": 95,
              "variableName": "PathAssembler pathAssembler",
              "startLine": 56,
              "startColumn": 55,
              "endLine": 56,
              "endColumn": 82,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/Install.java",
              "type": "PathAssembler [projectDirectory] : TestFile",
              "code": "    private final PathAssembler pathAssembler;\n    private final ExclusiveFileAccessManager exclusiveFileAccessManager = new ExclusiveFileAccessManager(120000, 200);\n\n    public Install(Logger logger, IDownload download, PathAssembler pathAssembler) {\n        this.logger = logger;\n        this.download = download;\n        this.pathAssembler = pathAssembler;"
            },
            {
              "step": 96,
              "variableName": "pathAssembler",
              "startLine": 59,
              "startColumn": 30,
              "endLine": 59,
              "endColumn": 43,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/Install.java",
              "type": "PathAssembler [projectDirectory] : TestFile",
              "code": "    public Install(Logger logger, IDownload download, PathAssembler pathAssembler) {\n        this.logger = logger;\n        this.download = download;\n        this.pathAssembler = pathAssembler;\n    }\n\n    public File createDist(final WrapperConfiguration configuration) throws Exception {"
            },
            {
              "step": 97,
              "variableName": "this",
              "startLine": 59,
              "startColumn": 9,
              "endLine": 59,
              "endColumn": 13,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/Install.java",
              "type": "Install [pathAssembler, projectDirectory] : TestFile",
              "code": "    public Install(Logger logger, IDownload download, PathAssembler pathAssembler) {\n        this.logger = logger;\n        this.download = download;\n        this.pathAssembler = pathAssembler;\n    }\n\n    public File createDist(final WrapperConfiguration configuration) throws Exception {"
            },
            {
              "step": 98,
              "variableName": "new Install(logger, download, new PathAssembler(gradleUserHome, rootDir))",
              "startLine": 68,
              "startColumn": 17,
              "endLine": 68,
              "endColumn": 90,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-main/src/main/java/org/gradle/wrapper/GradleWrapperMain.java",
              "type": "Install [pathAssembler, projectDirectory] : TestFile",
              "code": "\n        wrapperExecutor.execute(\n                args,\n                new Install(logger, download, new PathAssembler(gradleUserHome, rootDir)),\n                new BootstrapMainStarter());\n    }\n"
            },
            {
              "step": 99,
              "variableName": "Install install",
              "startLine": 101,
              "startColumn": 40,
              "endLine": 101,
              "endColumn": 55,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/WrapperExecutor.java",
              "type": "Install [pathAssembler, projectDirectory] : TestFile",
              "code": "        return config;\n    }\n\n    public void execute(String[] args, Install install, BootstrapMainStarter bootstrapMainStarter) throws Exception {\n        File gradleHome = install.createDist(config);\n        bootstrapMainStarter.start(args, gradleHome);\n    }"
            },
            {
              "step": 100,
              "variableName": "install",
              "startLine": 102,
              "startColumn": 27,
              "endLine": 102,
              "endColumn": 34,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/WrapperExecutor.java",
              "type": "Install [pathAssembler, projectDirectory] : TestFile",
              "code": "    }\n\n    public void execute(String[] args, Install install, BootstrapMainStarter bootstrapMainStarter) throws Exception {\n        File gradleHome = install.createDist(config);\n        bootstrapMainStarter.start(args, gradleHome);\n    }\n"
            },
            {
              "step": 101,
              "variableName": "createDist",
              "startLine": 62,
              "startColumn": 17,
              "endLine": 62,
              "endColumn": 27,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/Install.java",
              "type": "Install [pathAssembler, projectDirectory] : TestFile",
              "code": "        this.pathAssembler = pathAssembler;\n    }\n\n    public File createDist(final WrapperConfiguration configuration) throws Exception {\n        final URI distributionUrl = configuration.getDistribution();\n\n        final PathAssembler.LocalDistribution localDistribution = pathAssembler.getDistribution(configuration);"
            },
            {
              "step": 102,
              "variableName": "pathAssembler",
              "startLine": 65,
              "startColumn": 67,
              "endLine": 65,
              "endColumn": 80,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/Install.java",
              "type": "Install [pathAssembler, projectDirectory] : TestFile",
              "code": "    public File createDist(final WrapperConfiguration configuration) throws Exception {\n        final URI distributionUrl = configuration.getDistribution();\n\n        final PathAssembler.LocalDistribution localDistribution = pathAssembler.getDistribution(configuration);\n        final File distDir = localDistribution.getDistributionDir();\n        final File localZipFile = localDistribution.getZipFile();\n"
            },
            {
              "step": 103,
              "variableName": "pathAssembler",
              "startLine": 65,
              "startColumn": 67,
              "endLine": 65,
              "endColumn": 80,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/Install.java",
              "type": "PathAssembler [projectDirectory] : TestFile",
              "code": "    public File createDist(final WrapperConfiguration configuration) throws Exception {\n        final URI distributionUrl = configuration.getDistribution();\n\n        final PathAssembler.LocalDistribution localDistribution = pathAssembler.getDistribution(configuration);\n        final File distDir = localDistribution.getDistributionDir();\n        final File localZipFile = localDistribution.getZipFile();\n"
            },
            {
              "step": 104,
              "variableName": "getDistribution",
              "startLine": 38,
              "startColumn": 30,
              "endLine": 38,
              "endColumn": 45,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/PathAssembler.java",
              "type": "PathAssembler [projectDirectory] : TestFile",
              "code": "    /**\n     * Determines the local locations for the distribution to use given the supplied configuration.\n     */\n    public LocalDistribution getDistribution(WrapperConfiguration configuration) {\n        String baseName = getDistName(configuration.getDistribution());\n        String distName = removeExtension(baseName);\n        String rootDirName = rootDirName(distName, configuration);"
            },
            {
              "step": 105,
              "variableName": "getBaseDir(configuration.getDistributionBase())",
              "startLine": 42,
              "startColumn": 33,
              "endLine": 42,
              "endColumn": 80,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/PathAssembler.java",
              "type": "PathAssembler [projectDirectory] : TestFile",
              "code": "        String baseName = getDistName(configuration.getDistribution());\n        String distName = removeExtension(baseName);\n        String rootDirName = rootDirName(distName, configuration);\n        File distDir = new File(getBaseDir(configuration.getDistributionBase()), configuration.getDistributionPath() + \"/\" + rootDirName);\n        File distZip = new File(getBaseDir(configuration.getZipBase()), configuration.getZipPath() + \"/\" + rootDirName + \"/\" + baseName);\n        return new LocalDistribution(distDir, distZip);\n    }"
            },
            {
              "step": 106,
              "variableName": "getBaseDir",
              "startLine": 91,
              "startColumn": 18,
              "endLine": 91,
              "endColumn": 28,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/PathAssembler.java",
              "type": "PathAssembler [projectDirectory] : TestFile",
              "code": "        return path.substring(p + 1);\n    }\n\n    private File getBaseDir(String base) {\n        if (base.equals(GRADLE_USER_HOME_STRING)) {\n            return gradleUserHome;\n        } else if (base.equals(PROJECT_STRING)) {"
            },
            {
              "step": 107,
              "variableName": "projectDirectory",
              "startLine": 95,
              "startColumn": 20,
              "endLine": 95,
              "endColumn": 36,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/PathAssembler.java",
              "type": "PathAssembler [projectDirectory] : TestFile",
              "code": "        if (base.equals(GRADLE_USER_HOME_STRING)) {\n            return gradleUserHome;\n        } else if (base.equals(PROJECT_STRING)) {\n            return projectDirectory;\n        } else {\n            throw new RuntimeException(\"Base: \" + base + \" is unknown\");\n        }"
            },
            {
              "step": 108,
              "variableName": "projectDirectory",
              "startLine": 95,
              "startColumn": 20,
              "endLine": 95,
              "endColumn": 36,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/PathAssembler.java",
              "type": "TestFile",
              "code": "        if (base.equals(GRADLE_USER_HOME_STRING)) {\n            return gradleUserHome;\n        } else if (base.equals(PROJECT_STRING)) {\n            return projectDirectory;\n        } else {\n            throw new RuntimeException(\"Base: \" + base + \" is unknown\");\n        }"
            },
            {
              "step": 109,
              "variableName": "getBaseDir(configuration.getDistributionBase())",
              "startLine": 42,
              "startColumn": 33,
              "endLine": 42,
              "endColumn": 80,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/PathAssembler.java",
              "type": "TestFile",
              "code": "        String baseName = getDistName(configuration.getDistribution());\n        String distName = removeExtension(baseName);\n        String rootDirName = rootDirName(distName, configuration);\n        File distDir = new File(getBaseDir(configuration.getDistributionBase()), configuration.getDistributionPath() + \"/\" + rootDirName);\n        File distZip = new File(getBaseDir(configuration.getZipBase()), configuration.getZipPath() + \"/\" + rootDirName + \"/\" + baseName);\n        return new LocalDistribution(distDir, distZip);\n    }"
            },
            {
              "step": 110,
              "variableName": "new File(getBaseDir(configuration.getDistributionBase()), configuration.getDistributionPath() + \"/\" + rootDirName)",
              "startLine": 42,
              "startColumn": 24,
              "endLine": 42,
              "endColumn": 138,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/PathAssembler.java",
              "type": "File",
              "code": "        String baseName = getDistName(configuration.getDistribution());\n        String distName = removeExtension(baseName);\n        String rootDirName = rootDirName(distName, configuration);\n        File distDir = new File(getBaseDir(configuration.getDistributionBase()), configuration.getDistributionPath() + \"/\" + rootDirName);\n        File distZip = new File(getBaseDir(configuration.getZipBase()), configuration.getZipPath() + \"/\" + rootDirName + \"/\" + baseName);\n        return new LocalDistribution(distDir, distZip);\n    }"
            },
            {
              "step": 111,
              "variableName": "distDir",
              "startLine": 44,
              "startColumn": 38,
              "endLine": 44,
              "endColumn": 45,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/PathAssembler.java",
              "type": "File",
              "code": "        String rootDirName = rootDirName(distName, configuration);\n        File distDir = new File(getBaseDir(configuration.getDistributionBase()), configuration.getDistributionPath() + \"/\" + rootDirName);\n        File distZip = new File(getBaseDir(configuration.getZipBase()), configuration.getZipPath() + \"/\" + rootDirName + \"/\" + baseName);\n        return new LocalDistribution(distDir, distZip);\n    }\n\n    private String rootDirName(String distName, WrapperConfiguration configuration) {"
            },
            {
              "step": 112,
              "variableName": "File distDir",
              "startLine": 105,
              "startColumn": 34,
              "endLine": 105,
              "endColumn": 46,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/PathAssembler.java",
              "type": "File",
              "code": "        private final File distZip;\n        private final File distDir;\n\n        public LocalDistribution(File distDir, File distZip) {\n            this.distDir = distDir;\n            this.distZip = distZip;\n        }"
            },
            {
              "step": 113,
              "variableName": "distDir",
              "startLine": 106,
              "startColumn": 28,
              "endLine": 106,
              "endColumn": 35,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/PathAssembler.java",
              "type": "File",
              "code": "        private final File distDir;\n\n        public LocalDistribution(File distDir, File distZip) {\n            this.distDir = distDir;\n            this.distZip = distZip;\n        }\n"
            },
            {
              "step": 114,
              "variableName": "this",
              "startLine": 106,
              "startColumn": 13,
              "endLine": 106,
              "endColumn": 17,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/PathAssembler.java",
              "type": "LocalDistribution [distDir] : File",
              "code": "        private final File distDir;\n\n        public LocalDistribution(File distDir, File distZip) {\n            this.distDir = distDir;\n            this.distZip = distZip;\n        }\n"
            },
            {
              "step": 115,
              "variableName": "new LocalDistribution(distDir, distZip)",
              "startLine": 44,
              "startColumn": 16,
              "endLine": 44,
              "endColumn": 55,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/PathAssembler.java",
              "type": "LocalDistribution [distDir] : File",
              "code": "        String rootDirName = rootDirName(distName, configuration);\n        File distDir = new File(getBaseDir(configuration.getDistributionBase()), configuration.getDistributionPath() + \"/\" + rootDirName);\n        File distZip = new File(getBaseDir(configuration.getZipBase()), configuration.getZipPath() + \"/\" + rootDirName + \"/\" + baseName);\n        return new LocalDistribution(distDir, distZip);\n    }\n\n    private String rootDirName(String distName, WrapperConfiguration configuration) {"
            },
            {
              "step": 116,
              "variableName": "pathAssembler.getDistribution(configuration)",
              "startLine": 65,
              "startColumn": 67,
              "endLine": 65,
              "endColumn": 111,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/Install.java",
              "type": "LocalDistribution [distDir] : File",
              "code": "    public File createDist(final WrapperConfiguration configuration) throws Exception {\n        final URI distributionUrl = configuration.getDistribution();\n\n        final PathAssembler.LocalDistribution localDistribution = pathAssembler.getDistribution(configuration);\n        final File distDir = localDistribution.getDistributionDir();\n        final File localZipFile = localDistribution.getZipFile();\n"
            },
            {
              "step": 117,
              "variableName": "localDistribution",
              "startLine": 66,
              "startColumn": 30,
              "endLine": 66,
              "endColumn": 47,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/Install.java",
              "type": "LocalDistribution [distDir] : File",
              "code": "        final URI distributionUrl = configuration.getDistribution();\n\n        final PathAssembler.LocalDistribution localDistribution = pathAssembler.getDistribution(configuration);\n        final File distDir = localDistribution.getDistributionDir();\n        final File localZipFile = localDistribution.getZipFile();\n\n        return exclusiveFileAccessManager.access(localZipFile, new Callable<File>() {"
            },
            {
              "step": 118,
              "variableName": "getDistributionDir",
              "startLine": 113,
              "startColumn": 21,
              "endLine": 113,
              "endColumn": 39,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/PathAssembler.java",
              "type": "LocalDistribution [distDir] : File",
              "code": "        /**\n         * Returns the location to install the distribution into.\n         */\n        public File getDistributionDir() {\n            return distDir;\n        }\n"
            },
            {
              "step": 119,
              "variableName": "distDir",
              "startLine": 114,
              "startColumn": 20,
              "endLine": 114,
              "endColumn": 27,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/PathAssembler.java",
              "type": "LocalDistribution [distDir] : File",
              "code": "         * Returns the location to install the distribution into.\n         */\n        public File getDistributionDir() {\n            return distDir;\n        }\n\n        /**"
            },
            {
              "step": 120,
              "variableName": "distDir",
              "startLine": 114,
              "startColumn": 20,
              "endLine": 114,
              "endColumn": 27,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/PathAssembler.java",
              "type": "File",
              "code": "         * Returns the location to install the distribution into.\n         */\n        public File getDistributionDir() {\n            return distDir;\n        }\n\n        /**"
            },
            {
              "step": 121,
              "variableName": "localDistribution.getDistributionDir()",
              "startLine": 66,
              "startColumn": 30,
              "endLine": 66,
              "endColumn": 68,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/Install.java",
              "type": "File",
              "code": "        final URI distributionUrl = configuration.getDistribution();\n\n        final PathAssembler.LocalDistribution localDistribution = pathAssembler.getDistribution(configuration);\n        final File distDir = localDistribution.getDistributionDir();\n        final File localZipFile = localDistribution.getZipFile();\n\n        return exclusiveFileAccessManager.access(localZipFile, new Callable<File>() {"
            },
            {
              "step": 122,
              "variableName": "File distDir : File",
              "startLine": 69,
              "startColumn": 64,
              "endLine": 95,
              "endColumn": 10,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/Install.java",
              "type": "File",
              "code": "        final File distDir = localDistribution.getDistributionDir();\n        final File localZipFile = localDistribution.getZipFile();\n\n        return exclusiveFileAccessManager.access(localZipFile, new Callable<File>() {\n            @Override\n            public File call() throws Exception {\n                final File markerFile = new File(localZipFile.getParentFile(), localZipFile.getName() + \".ok\");"
            },
            {
              "step": 123,
              "variableName": "new (...) : new Callable<File>(...) { ... } [File distDir] : File",
              "startLine": 69,
              "startColumn": 64,
              "endLine": 95,
              "endColumn": 10,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/Install.java",
              "type": "new Callable<File>(...) { ... } [File distDir] : File",
              "code": "        final File distDir = localDistribution.getDistributionDir();\n        final File localZipFile = localDistribution.getZipFile();\n\n        return exclusiveFileAccessManager.access(localZipFile, new Callable<File>() {\n            @Override\n            public File call() throws Exception {\n                final File markerFile = new File(localZipFile.getParentFile(), localZipFile.getName() + \".ok\");"
            },
            {
              "step": 124,
              "variableName": "Callable<T> task",
              "startLine": 38,
              "startColumn": 45,
              "endLine": 38,
              "endColumn": 61,
              "uri": "gradle-8.14.0/platforms/core-runtime/files/src/main/java/org/gradle/internal/file/locking/ExclusiveFileAccessManager.java",
              "type": "new Callable<File>(...) { ... } [File distDir] : File",
              "code": "        this.pollIntervalMs = pollIntervalMs;\n    }\n\n    public <T> T access(File exclusiveFile, Callable<T> task) throws Exception {\n        final File lockFile = new File(exclusiveFile.getParentFile(), exclusiveFile.getName() + LOCK_FILE_SUFFIX);\n        File lockFileDirectory = lockFile.getParentFile();\n        if (!lockFileDirectory.mkdirs()"
            },
            {
              "step": 125,
              "variableName": "task",
              "startLine": 69,
              "startColumn": 24,
              "endLine": 69,
              "endColumn": 28,
              "uri": "gradle-8.14.0/platforms/core-runtime/files/src/main/java/org/gradle/internal/file/locking/ExclusiveFileAccessManager.java",
              "type": "new Callable<File>(...) { ... } [File distDir] : File",
              "code": "            }\n\n            try {\n                return task.call();\n            } finally {\n                lock.release();\n"
            },
            {
              "step": 126,
              "variableName": "call",
              "startLine": 71,
              "startColumn": 25,
              "endLine": 71,
              "endColumn": 29,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/Install.java",
              "type": "new Callable<File>(...) { ... } [File distDir] : File",
              "code": "\n        return exclusiveFileAccessManager.access(localZipFile, new Callable<File>() {\n            @Override\n            public File call() throws Exception {\n                final File markerFile = new File(localZipFile.getParentFile(), localZipFile.getName() + \".ok\");\n                if (distDir.isDirectory() && markerFile.isFile()) {\n                    InstallCheck installCheck = verifyDistributionRoot(distDir, distDir.getAbsolutePath());"
            },
            {
              "step": 127,
              "variableName": "distDir",
              "startLine": 74,
              "startColumn": 72,
              "endLine": 74,
              "endColumn": 79,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/Install.java",
              "type": "new Callable<File>(...) { ... } [File distDir] : File",
              "code": "            public File call() throws Exception {\n                final File markerFile = new File(localZipFile.getParentFile(), localZipFile.getName() + \".ok\");\n                if (distDir.isDirectory() && markerFile.isFile()) {\n                    InstallCheck installCheck = verifyDistributionRoot(distDir, distDir.getAbsolutePath());\n                    if (installCheck.isVerified()) {\n                        return installCheck.gradleHome;\n                    }"
            },
            {
              "step": 128,
              "variableName": "distDir",
              "startLine": 74,
              "startColumn": 72,
              "endLine": 74,
              "endColumn": 79,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/Install.java",
              "type": "File",
              "code": "            public File call() throws Exception {\n                final File markerFile = new File(localZipFile.getParentFile(), localZipFile.getName() + \".ok\");\n                if (distDir.isDirectory() && markerFile.isFile()) {\n                    InstallCheck installCheck = verifyDistributionRoot(distDir, distDir.getAbsolutePath());\n                    if (installCheck.isVerified()) {\n                        return installCheck.gradleHome;\n                    }"
            },
            {
              "step": 129,
              "variableName": "String distributionDescription",
              "startLine": 209,
              "startColumn": 63,
              "endLine": 209,
              "endColumn": 93,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/Install.java",
              "type": "String",
              "code": "        return hexString.toString();\n    }\n\n    private InstallCheck verifyDistributionRoot(File distDir, String distributionDescription) {\n        List<File> dirs = listDirs(distDir);\n        if (dirs.isEmpty()) {\n            return InstallCheck.failure(format(\"Gradle distribution '%s' does not contain any directories. Expected to find exactly 1 directory.\", distributionDescription));"
            },
            {
              "step": 130,
              "variableName": "distributionDescription",
              "startLine": 212,
              "startColumn": 148,
              "endLine": 212,
              "endColumn": 171,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/Install.java",
              "type": "String",
              "code": "    private InstallCheck verifyDistributionRoot(File distDir, String distributionDescription) {\n        List<File> dirs = listDirs(distDir);\n        if (dirs.isEmpty()) {\n            return InstallCheck.failure(format(\"Gradle distribution '%s' does not contain any directories. Expected to find exactly 1 directory.\", distributionDescription));\n        }\n        if (dirs.size() != 1) {\n            return InstallCheck.failure(format(\"Gradle distribution '%s' contains too many directories. Expected to find exactly 1 directory.\", distributionDescription));"
            },
            {
              "step": 131,
              "variableName": "format(\"Gradle distribution '%s' does not contain any directories. Expected to find exactly 1 directory.\", distributionDescription)",
              "startLine": 212,
              "startColumn": 41,
              "endLine": 212,
              "endColumn": 172,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/Install.java",
              "type": "Object[] [[]] : String",
              "code": "    private InstallCheck verifyDistributionRoot(File distDir, String distributionDescription) {\n        List<File> dirs = listDirs(distDir);\n        if (dirs.isEmpty()) {\n            return InstallCheck.failure(format(\"Gradle distribution '%s' does not contain any directories. Expected to find exactly 1 directory.\", distributionDescription));\n        }\n        if (dirs.size() != 1) {\n            return InstallCheck.failure(format(\"Gradle distribution '%s' contains too many directories. Expected to find exactly 1 directory.\", distributionDescription));"
            },
            {
              "step": 132,
              "variableName": "format(\"Gradle distribution '%s' does not contain any directories. Expected to find exactly 1 directory.\", distributionDescription)",
              "startLine": 212,
              "startColumn": 41,
              "endLine": 212,
              "endColumn": 172,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/Install.java",
              "type": "String",
              "code": "    private InstallCheck verifyDistributionRoot(File distDir, String distributionDescription) {\n        List<File> dirs = listDirs(distDir);\n        if (dirs.isEmpty()) {\n            return InstallCheck.failure(format(\"Gradle distribution '%s' does not contain any directories. Expected to find exactly 1 directory.\", distributionDescription));\n        }\n        if (dirs.size() != 1) {\n            return InstallCheck.failure(format(\"Gradle distribution '%s' contains too many directories. Expected to find exactly 1 directory.\", distributionDescription));"
            },
            {
              "step": 133,
              "variableName": "String message",
              "startLine": 362,
              "startColumn": 45,
              "endLine": 362,
              "endColumn": 59,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/Install.java",
              "type": "String",
              "code": "        private final File gradleHome;\n        private final String failureMessage;\n\n        private static InstallCheck failure(String message) {\n            return new InstallCheck(null, message);\n        }\n"
            },
            {
              "step": 134,
              "variableName": "message",
              "startLine": 363,
              "startColumn": 43,
              "endLine": 363,
              "endColumn": 50,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/Install.java",
              "type": "String",
              "code": "        private final String failureMessage;\n\n        private static InstallCheck failure(String message) {\n            return new InstallCheck(null, message);\n        }\n\n        private static InstallCheck success(File gradleHome) {"
            },
            {
              "step": 135,
              "variableName": "String failureMessage",
              "startLine": 370,
              "startColumn": 47,
              "endLine": 370,
              "endColumn": 68,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/Install.java",
              "type": "String",
              "code": "            return new InstallCheck(gradleHome, null);\n        }\n\n        private InstallCheck(File gradleHome, String failureMessage) {\n            this.gradleHome = gradleHome;\n            this.failureMessage = failureMessage;\n        }"
            },
            {
              "step": 136,
              "variableName": "failureMessage",
              "startLine": 372,
              "startColumn": 35,
              "endLine": 372,
              "endColumn": 49,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/Install.java",
              "type": "String",
              "code": "\n        private InstallCheck(File gradleHome, String failureMessage) {\n            this.gradleHome = gradleHome;\n            this.failureMessage = failureMessage;\n        }\n\n        private boolean isVerified() {"
            },
            {
              "step": 137,
              "variableName": "this",
              "startLine": 372,
              "startColumn": 13,
              "endLine": 372,
              "endColumn": 17,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/Install.java",
              "type": "InstallCheck [failureMessage] : String",
              "code": "\n        private InstallCheck(File gradleHome, String failureMessage) {\n            this.gradleHome = gradleHome;\n            this.failureMessage = failureMessage;\n        }\n\n        private boolean isVerified() {"
            },
            {
              "step": 138,
              "variableName": "new InstallCheck(null, message)",
              "startLine": 363,
              "startColumn": 20,
              "endLine": 363,
              "endColumn": 51,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/Install.java",
              "type": "InstallCheck [failureMessage] : String",
              "code": "        private final String failureMessage;\n\n        private static InstallCheck failure(String message) {\n            return new InstallCheck(null, message);\n        }\n\n        private static InstallCheck success(File gradleHome) {"
            },
            {
              "step": 139,
              "variableName": "InstallCheck.failure(format(\"Gradle distribution '%s' does not contain any directories. Expected to find exactly 1 directory.\", distributionDescription))",
              "startLine": 212,
              "startColumn": 20,
              "endLine": 212,
              "endColumn": 173,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/Install.java",
              "type": "InstallCheck [failureMessage] : String",
              "code": "    private InstallCheck verifyDistributionRoot(File distDir, String distributionDescription) {\n        List<File> dirs = listDirs(distDir);\n        if (dirs.isEmpty()) {\n            return InstallCheck.failure(format(\"Gradle distribution '%s' does not contain any directories. Expected to find exactly 1 directory.\", distributionDescription));\n        }\n        if (dirs.size() != 1) {\n            return InstallCheck.failure(format(\"Gradle distribution '%s' contains too many directories. Expected to find exactly 1 directory.\", distributionDescription));"
            },
            {
              "step": 140,
              "variableName": "verifyDistributionRoot(distDir, distDir.getAbsolutePath())",
              "startLine": 74,
              "startColumn": 49,
              "endLine": 74,
              "endColumn": 107,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/Install.java",
              "type": "InstallCheck [failureMessage] : String",
              "code": "            public File call() throws Exception {\n                final File markerFile = new File(localZipFile.getParentFile(), localZipFile.getName() + \".ok\");\n                if (distDir.isDirectory() && markerFile.isFile()) {\n                    InstallCheck installCheck = verifyDistributionRoot(distDir, distDir.getAbsolutePath());\n                    if (installCheck.isVerified()) {\n                        return installCheck.gradleHome;\n                    }"
            },
            {
              "step": 141,
              "variableName": "installCheck",
              "startLine": 79,
              "startColumn": 40,
              "endLine": 79,
              "endColumn": 52,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/Install.java",
              "type": "InstallCheck [failureMessage] : String",
              "code": "                        return installCheck.gradleHome;\n                    }\n                    // Distribution is invalid. Try to reinstall.\n                    System.err.println(installCheck.failureMessage);\n                    markerFile.delete();\n                }\n"
            },
            {
              "step": 142,
              "variableName": "installCheck.failureMessage",
              "startLine": 79,
              "startColumn": 40,
              "endLine": 79,
              "endColumn": 67,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/Install.java",
              "type": "",
              "code": "                        return installCheck.gradleHome;\n                    }\n                    // Distribution is invalid. Try to reinstall.\n                    System.err.println(installCheck.failureMessage);\n                    markerFile.delete();\n                }\n"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 7,
      "fileName": "Logger.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "source",
              "startLine": 44,
              "startColumn": 25,
              "endLine": 44,
              "endColumn": 31,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/RegExpNameMapper.java",
              "type": "String",
              "code": "        } else {\n            matcher.reset(source);\n        }\n        String result = source;\n        if (matcher.find()) {\n            result = matcher.replaceFirst(replacement);\n        }"
            },
            {
              "step": 1,
              "variableName": "result",
              "startLine": 48,
              "startColumn": 16,
              "endLine": 48,
              "endColumn": 22,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/RegExpNameMapper.java",
              "type": "String",
              "code": "        if (matcher.find()) {\n            result = matcher.replaceFirst(replacement);\n        }\n        return result;\n    }\n}\n"
            },
            {
              "step": 2,
              "variableName": "transformer.transform(value)",
              "startLine": 37,
              "startColumn": 31,
              "endLine": 37,
              "endColumn": 59,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/ChainingTransformer.java",
              "type": "String",
              "code": "    public T transform(T original) {\n        T value = original;\n        for (Transformer<T, T> transformer : transformers) {\n            value = type.cast(transformer.transform(value));\n        }\n        return value;\n    }"
            },
            {
              "step": 3,
              "variableName": "type.cast(transformer.transform(value))",
              "startLine": 37,
              "startColumn": 21,
              "endLine": 37,
              "endColumn": 60,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/ChainingTransformer.java",
              "type": "String",
              "code": "    public T transform(T original) {\n        T value = original;\n        for (Transformer<T, T> transformer : transformers) {\n            value = type.cast(transformer.transform(value));\n        }\n        return value;\n    }"
            },
            {
              "step": 4,
              "variableName": "value",
              "startLine": 39,
              "startColumn": 16,
              "endLine": 39,
              "endColumn": 21,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/ChainingTransformer.java",
              "type": "String",
              "code": "        for (Transformer<T, T> transformer : transformers) {\n            value = type.cast(transformer.transform(value));\n        }\n        return value;\n    }\n\n    public void add(Transformer<T, T> transformer) {"
            },
            {
              "step": 5,
              "variableName": "describer.transform(this)",
              "startLine": 163,
              "startColumn": 16,
              "endLine": 163,
              "endColumn": 41,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/repositories/DefaultMavenArtifactRepository.java",
              "type": "String",
              "code": "\n    @Override\n    public String getDisplayName() {\n        return describer.transform(this);\n    }\n\n    @Override"
            },
            {
              "step": 6,
              "variableName": "describable.getDisplayName()",
              "startLine": 313,
              "startColumn": 35,
              "endLine": 313,
              "endColumn": 63,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "String",
              "code": "        public String getDisplayName() {\n            synchronized (this) {\n                if (displayName == null) {\n                    displayName = describable.getDisplayName();\n                    if (capDisplayName != null || !(describable instanceof DisplayName)) {\n                        describable = null;\n                    }"
            },
            {
              "step": 7,
              "variableName": "displayName",
              "startLine": 318,
              "startColumn": 24,
              "endLine": 318,
              "endColumn": 35,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "String",
              "code": "                        describable = null;\n                    }\n                }\n                return displayName;\n            }\n        }\n    }"
            },
            {
              "step": 8,
              "variableName": "displayName.getDisplayName()",
              "startLine": 772,
              "startColumn": 73,
              "endLine": 772,
              "endColumn": 101,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/configurations/DefaultConfiguration.java",
              "type": "String",
              "code": "                try {\n                    results = resolver.resolveGraph(DefaultConfiguration.this);\n                } catch (Exception e) {\n                    throw exceptionMapper.mapFailure(e, \"dependencies\", displayName.getDisplayName());\n                }\n\n                // Make the new state visible in case a dependency resolution listener queries the result, which requires the new state"
            },
            {
              "step": 9,
              "variableName": "String contextDisplayName",
              "startLine": 68,
              "startColumn": 77,
              "endLine": 68,
              "endColumn": 102,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "String",
              "code": "        return mapFailure(failure, type, displayName);\n    }\n\n    public TypedResolveException mapFailure(Throwable failure, String type, String contextDisplayName) {\n        if (!(failure instanceof TypedResolveException)) {\n            return new TypedResolveException(\n                type,"
            },
            {
              "step": 10,
              "variableName": "contextDisplayName",
              "startLine": 72,
              "startColumn": 17,
              "endLine": 72,
              "endColumn": 35,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "String",
              "code": "        if (!(failure instanceof TypedResolveException)) {\n            return new TypedResolveException(\n                type,\n                contextDisplayName,\n                ImmutableList.of(mapRepositoryOverrideFailure(contextDisplayName, failure))\n            );\n        }"
            },
            {
              "step": 11,
              "variableName": "new TypedResolveException(...) : TypedResolveException",
              "startLine": 70,
              "startColumn": 20,
              "endLine": 74,
              "endColumn": 14,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "TypedResolveException",
              "code": "\n    public TypedResolveException mapFailure(Throwable failure, String type, String contextDisplayName) {\n        if (!(failure instanceof TypedResolveException)) {\n            return new TypedResolveException(\n                type,\n                contextDisplayName,\n                ImmutableList.of(mapRepositoryOverrideFailure(contextDisplayName, failure))"
            },
            {
              "step": 12,
              "variableName": "exceptionMapper.mapFailure(e, \"dependencies\", displayName.getDisplayName())",
              "startLine": 772,
              "startColumn": 27,
              "endLine": 772,
              "endColumn": 102,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/configurations/DefaultConfiguration.java",
              "type": "TypedResolveException",
              "code": "                try {\n                    results = resolver.resolveGraph(DefaultConfiguration.this);\n                } catch (Exception e) {\n                    throw exceptionMapper.mapFailure(e, \"dependencies\", displayName.getDisplayName());\n                }\n\n                // Make the new state visible in case a dependency resolution listener queries the result, which requires the new state"
            },
            {
              "step": 13,
              "variableName": "e",
              "startLine": 772,
              "startColumn": 54,
              "endLine": 772,
              "endColumn": 55,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/configurations/DefaultConfiguration.java",
              "type": "Exception",
              "code": "                try {\n                    results = resolver.resolveGraph(DefaultConfiguration.this);\n                } catch (Exception e) {\n                    throw exceptionMapper.mapFailure(e, \"dependencies\", displayName.getDisplayName());\n                }\n\n                // Make the new state visible in case a dependency resolution listener queries the result, which requires the new state"
            },
            {
              "step": 14,
              "variableName": "Throwable failure",
              "startLine": 68,
              "startColumn": 45,
              "endLine": 68,
              "endColumn": 62,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Throwable",
              "code": "        return mapFailure(failure, type, displayName);\n    }\n\n    public TypedResolveException mapFailure(Throwable failure, String type, String contextDisplayName) {\n        if (!(failure instanceof TypedResolveException)) {\n            return new TypedResolveException(\n                type,"
            },
            {
              "step": 15,
              "variableName": "failure",
              "startLine": 73,
              "startColumn": 83,
              "endLine": 73,
              "endColumn": 90,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Throwable",
              "code": "            return new TypedResolveException(\n                type,\n                contextDisplayName,\n                ImmutableList.of(mapRepositoryOverrideFailure(contextDisplayName, failure))\n            );\n        }\n"
            },
            {
              "step": 16,
              "variableName": "Throwable failure",
              "startLine": 94,
              "startColumn": 78,
              "endLine": 94,
              "endColumn": 95,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Throwable",
              "code": "\n    // TODO: We should handle this exception at the source instead of using instanceof to detect it after it is thrown.\n    //       We should try to avoid catching and analyzing runtime exceptions\n    public Throwable mapRepositoryOverrideFailure(String contextDisplayName, Throwable failure) {\n        if (!(failure instanceof ModuleVersionNotFoundException) || !settingsRepositoriesIgnored()) {\n            return failure;\n        }"
            },
            {
              "step": 17,
              "variableName": "failure",
              "startLine": 108,
              "startColumn": 35,
              "endLine": 108,
              "endColumn": 42,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Throwable",
              "code": "        return new TypedResolveException(\n            \"dependencies\",\n            contextDisplayName,\n            Collections.singleton(failure),\n            resolutions\n        );\n    }"
            },
            {
              "step": 18,
              "variableName": "Collections.singleton(failure)",
              "startLine": 108,
              "startColumn": 13,
              "endLine": 108,
              "endColumn": 43,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Set [<element>] : Throwable",
              "code": "        return new TypedResolveException(\n            \"dependencies\",\n            contextDisplayName,\n            Collections.singleton(failure),\n            resolutions\n        );\n    }"
            },
            {
              "step": 19,
              "variableName": "Collections.singleton(failure)",
              "startLine": 108,
              "startColumn": 13,
              "endLine": 108,
              "endColumn": 43,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Set",
              "code": "        return new TypedResolveException(\n            \"dependencies\",\n            contextDisplayName,\n            Collections.singleton(failure),\n            resolutions\n        );\n    }"
            },
            {
              "step": 20,
              "variableName": "Iterable<? extends Throwable> failures",
              "startLine": 42,
              "startColumn": 67,
              "endLine": 42,
              "endColumn": 105,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ivyservice/TypedResolveException.java",
              "type": "Set",
              "code": "    /**\n     * Creates a new instance with resolutions.\n     */\n    public TypedResolveException(String type, String displayName, Iterable<? extends Throwable> failures, List<String> resolutions) {\n        super(buildMessage(type, displayName), failures, false);\n        this.type = type;\n        this.resolutions = ImmutableList.copyOf(resolutions);"
            },
            {
              "step": 21,
              "variableName": "failures",
              "startLine": 43,
              "startColumn": 48,
              "endLine": 43,
              "endColumn": 56,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ivyservice/TypedResolveException.java",
              "type": "Set",
              "code": "     * Creates a new instance with resolutions.\n     */\n    public TypedResolveException(String type, String displayName, Iterable<? extends Throwable> failures, List<String> resolutions) {\n        super(buildMessage(type, displayName), failures, false);\n        this.type = type;\n        this.resolutions = ImmutableList.copyOf(resolutions);\n    }"
            },
            {
              "step": 22,
              "variableName": "Iterable<? extends Throwable> causes",
              "startLine": 77,
              "startColumn": 48,
              "endLine": 77,
              "endColumn": 84,
              "uri": "gradle-8.14.0/subprojects/core-api/src/main/java/org/gradle/api/artifacts/ResolveException.java",
              "type": "Set",
              "code": "     * @since 8.9\n     */\n    @Incubating\n    protected ResolveException(String message, Iterable<? extends Throwable> causes, @SuppressWarnings(\"unused\") boolean dummy) {\n        super(message, causes);\n    }\n}"
            },
            {
              "step": 23,
              "variableName": "causes",
              "startLine": 78,
              "startColumn": 24,
              "endLine": 78,
              "endColumn": 30,
              "uri": "gradle-8.14.0/subprojects/core-api/src/main/java/org/gradle/api/artifacts/ResolveException.java",
              "type": "Set",
              "code": "     */\n    @Incubating\n    protected ResolveException(String message, Iterable<? extends Throwable> causes, @SuppressWarnings(\"unused\") boolean dummy) {\n        super(message, causes);\n    }\n}\n"
            },
            {
              "step": 24,
              "variableName": "Iterable<? extends Throwable> causes",
              "startLine": 47,
              "startColumn": 55,
              "endLine": 47,
              "endColumn": 91,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "Set",
              "code": "        this.causes.addAll(Arrays.asList(causes));\n    }\n\n    public DefaultMultiCauseException(String message, Iterable<? extends Throwable> causes) {\n        super(message);\n        this.message = message;\n        initCauses(causes);"
            },
            {
              "step": 25,
              "variableName": "causes",
              "startLine": 50,
              "startColumn": 20,
              "endLine": 50,
              "endColumn": 26,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "Set",
              "code": "    public DefaultMultiCauseException(String message, Iterable<? extends Throwable> causes) {\n        super(message);\n        this.message = message;\n        initCauses(causes);\n    }\n\n    public DefaultMultiCauseException(Factory<String> messageFactory) {"
            },
            {
              "step": 26,
              "variableName": "Iterable<? extends Throwable> causes",
              "startLine": 112,
              "startColumn": 28,
              "endLine": 112,
              "endColumn": 64,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "Iterable",
              "code": "        return null;\n    }\n\n    public void initCauses(Iterable<? extends Throwable> causes) {\n        this.causes.clear();\n        for (Throwable cause : causes) {\n            this.causes.add(cause);"
            },
            {
              "step": 27,
              "variableName": "cause",
              "startLine": 115,
              "startColumn": 29,
              "endLine": 115,
              "endColumn": 34,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "Throwable",
              "code": "    public void initCauses(Iterable<? extends Throwable> causes) {\n        this.causes.clear();\n        for (Throwable cause : causes) {\n            this.causes.add(cause);\n        }\n    }\n"
            },
            {
              "step": 28,
              "variableName": "this.causes",
              "startLine": 115,
              "startColumn": 13,
              "endLine": 115,
              "endColumn": 24,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "CopyOnWriteArrayList [<element>] : Throwable",
              "code": "    public void initCauses(Iterable<? extends Throwable> causes) {\n        this.causes.clear();\n        for (Throwable cause : causes) {\n            this.causes.add(cause);\n        }\n    }\n"
            },
            {
              "step": 29,
              "variableName": "this",
              "startLine": 115,
              "startColumn": 13,
              "endLine": 115,
              "endColumn": 17,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "DefaultMultiCauseException [causes, <element>] : Throwable",
              "code": "    public void initCauses(Iterable<? extends Throwable> causes) {\n        this.causes.clear();\n        for (Throwable cause : causes) {\n            this.causes.add(cause);\n        }\n    }\n"
            },
            {
              "step": 30,
              "variableName": "projectConfigurationException",
              "startLine": 57,
              "startColumn": 17,
              "endLine": 57,
              "endColumn": 46,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/DefaultExceptionAnalyser.java",
              "type": "ProjectConfigurationException [causes, <element>] : Throwable",
              "code": "                }\n            }\n            if (!additionalFailures.isEmpty()) {\n                projectConfigurationException.initCauses(additionalFailures);\n                failures.add(transform(projectConfigurationException));\n            }\n        } else if (exception instanceof ServiceCreationException) {"
            },
            {
              "step": 31,
              "variableName": "projectConfigurationException",
              "startLine": 58,
              "startColumn": 40,
              "endLine": 58,
              "endColumn": 69,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/DefaultExceptionAnalyser.java",
              "type": "ProjectConfigurationException [causes, <element>] : Throwable",
              "code": "            }\n            if (!additionalFailures.isEmpty()) {\n                projectConfigurationException.initCauses(additionalFailures);\n                failures.add(transform(projectConfigurationException));\n            }\n        } else if (exception instanceof ServiceCreationException) {\n            failures.add(transform(new InitializationException(exception)));"
            },
            {
              "step": 32,
              "variableName": "transform(projectConfigurationException)",
              "startLine": 58,
              "startColumn": 30,
              "endLine": 58,
              "endColumn": 70,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/DefaultExceptionAnalyser.java",
              "type": "LocationAwareException",
              "code": "            }\n            if (!additionalFailures.isEmpty()) {\n                projectConfigurationException.initCauses(additionalFailures);\n                failures.add(transform(projectConfigurationException));\n            }\n        } else if (exception instanceof ServiceCreationException) {\n            failures.add(transform(new InitializationException(exception)));"
            },
            {
              "step": 33,
              "variableName": "failures",
              "startLine": 58,
              "startColumn": 17,
              "endLine": 58,
              "endColumn": 25,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/DefaultExceptionAnalyser.java",
              "type": "Collection [<element>] : LocationAwareException",
              "code": "            }\n            if (!additionalFailures.isEmpty()) {\n                projectConfigurationException.initCauses(additionalFailures);\n                failures.add(transform(projectConfigurationException));\n            }\n        } else if (exception instanceof ServiceCreationException) {\n            failures.add(transform(new InitializationException(exception)));"
            },
            {
              "step": 34,
              "variableName": "result",
              "startLine": 53,
              "startColumn": 54,
              "endLine": 53,
              "endColumn": 60,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/MultipleBuildFailuresExceptionAnalyser.java",
              "type": "ArrayList [<element>] : LocationAwareException",
              "code": "        for (Throwable failure : failures) {\n            if (failure instanceof MultipleBuildFailures) {\n                for (Throwable cause : ((MultipleBuildFailures) failure).getCauses()) {\n                    collector.collectFailures(cause, result);\n                }\n            } else {\n                collector.collectFailures(failure, result);"
            },
            {
              "step": 35,
              "variableName": "result",
              "startLine": 60,
              "startColumn": 39,
              "endLine": 60,
              "endColumn": 45,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/MultipleBuildFailuresExceptionAnalyser.java",
              "type": "ArrayList [<element>] : LocationAwareException",
              "code": "            }\n        }\n        if (result.size() == 1 && result.get(0) instanceof RuntimeException) {\n            return (RuntimeException) result.get(0);\n        } else {\n            return new MultipleBuildFailures(result);\n        }"
            },
            {
              "step": 36,
              "variableName": "result.get(0)",
              "startLine": 60,
              "startColumn": 39,
              "endLine": 60,
              "endColumn": 52,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/MultipleBuildFailuresExceptionAnalyser.java",
              "type": "LocationAwareException",
              "code": "            }\n        }\n        if (result.size() == 1 && result.get(0) instanceof RuntimeException) {\n            return (RuntimeException) result.get(0);\n        } else {\n            return new MultipleBuildFailures(result);\n        }"
            },
            {
              "step": 37,
              "variableName": "(RuntimeException) result.get(0)",
              "startLine": 60,
              "startColumn": 20,
              "endLine": 60,
              "endColumn": 52,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/MultipleBuildFailuresExceptionAnalyser.java",
              "type": "LocationAwareException",
              "code": "            }\n        }\n        if (result.size() == 1 && result.get(0) instanceof RuntimeException) {\n            return (RuntimeException) result.get(0);\n        } else {\n            return new MultipleBuildFailures(result);\n        }"
            },
            {
              "step": 38,
              "variableName": "exceptionAnalyser.transform(finishFailures)",
              "startLine": 72,
              "startColumn": 16,
              "endLine": 72,
              "endColumn": 59,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/internal/buildtree/DefaultBuildTreeFinishExecutor.java",
              "type": "LocationAwareException",
              "code": "            finishFailures.addAll(result.getFailures());\n        });\n\n        return exceptionAnalyser.transform(finishFailures);\n    }\n}\n"
            },
            {
              "step": 39,
              "variableName": "delegate.finishBuildTree(failures)",
              "startLine": 46,
              "startColumn": 28,
              "endLine": 46,
              "endColumn": 62,
              "uri": "gradle-8.14.0/subprojects/composite-builds/src/main/java/org/gradle/composite/internal/OperationFiringBuildTreeFinishExecutor.java",
              "type": "LocationAwareException",
              "code": "            @Override\n            public RuntimeException call(BuildOperationContext context) {\n                try {\n                    return delegate.finishBuildTree(failures);\n                } finally {\n                    context.setResult(RESULT);\n                }"
            },
            {
              "step": 40,
              "variableName": "buildOperation.call(context)",
              "startLine": 239,
              "startColumn": 21,
              "endLine": 239,
              "endColumn": 49,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/testFixtures/java/org/gradle/internal/operations/TestBuildOperationRunner.java",
              "type": "LocationAwareException",
              "code": "            TestBuildOperationContext context = new TestBuildOperationContext(record);\n            T t;\n            try {\n                t = buildOperation.call(context);\n            } catch (Throwable failure) {\n                if (record.failure == null) {\n                    record.failure = failure;"
            },
            {
              "step": 41,
              "variableName": "t",
              "startLine": 246,
              "startColumn": 20,
              "endLine": 246,
              "endColumn": 21,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/testFixtures/java/org/gradle/internal/operations/TestBuildOperationRunner.java",
              "type": "LocationAwareException",
              "code": "                }\n                throw throwAsUncheckedException(failure);\n            }\n            return t;\n        }\n\n        private <O extends BuildOperation> void execute(O buildOperation, BuildOperationWorker<O> worker) {"
            },
            {
              "step": 42,
              "variableName": "log.call(buildOperation)",
              "startLine": 51,
              "startColumn": 16,
              "endLine": 51,
              "endColumn": 40,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/testFixtures/java/org/gradle/internal/operations/TestBuildOperationRunner.java",
              "type": "LocationAwareException",
              "code": "\n    @Override\n    public <T> T call(CallableBuildOperation<T> buildOperation) {\n        return log.call(buildOperation);\n    }\n\n    @Override"
            },
            {
              "step": 43,
              "variableName": "ca",
              "startLine": 115,
              "startColumn": 5,
              "endLine": 121,
              "endColumn": 7,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/configurationcache/ConfigurationCacheBuildOperations.kt",
              "type": "LocationAwareException",
              "code": "\ninternal\nfun <T : Any> BuildOperationRunner.withModelLoadOperation(block: () -> T): T =\n    call(object : CallableBuildOperation<T> {\n        override fun description(): BuildOperationDescriptor.Builder = BuildOperationDescriptor\n            .displayName(\"Load model from configuration cache\")\n            .progressDisplayName(\"Loading model from configuration cache\")"
            },
            {
              "step": 44,
              "variableName": "ca",
              "startLine": 115,
              "startColumn": 5,
              "endLine": 121,
              "endColumn": 7,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/configurationcache/ConfigurationCacheBuildOperations.kt",
              "type": "LocationAwareException",
              "code": "\ninternal\nfun <T : Any> BuildOperationRunner.withModelLoadOperation(block: () -> T): T =\n    call(object : CallableBuildOperation<T> {\n        override fun description(): BuildOperationDescriptor.Builder = BuildOperationDescriptor\n            .displayName(\"Load model from configuration cache\")\n            .progressDisplayName(\"Loading model from configuration cache\")"
            },
            {
              "step": 45,
              "variableName": "b",
              "startLine": 635,
              "startColumn": 9,
              "endLine": 641,
              "endColumn": 10,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "        // No need to record the `ClassLoaderScope` tree when loading\n        scopeRegistryListener.dispose()\n\n        buildOperationRunner.withModelLoadOperation {\n            val storeLoadResult = entryStore.useForStateLoad(StateType.Model) { stateFile: ConfigurationCacheStateFile ->\n                cacheIO.readModelFrom(stateFile)\n            }"
            },
            {
              "step": 46,
              "variableName": "block()",
              "startLine": 668,
              "startColumn": 22,
              "endLine": 668,
              "endColumn": 29,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "    private\n    inline fun <T> runAtConfigurationTime(block: () -> T): T {\n        prepareConfigurationTimeBarrier()\n        val result = block()\n        crossConfigurationTimeBarrier()\n        return result\n    }"
            },
            {
              "step": 47,
              "variableName": "result",
              "startLine": 670,
              "startColumn": 16,
              "endLine": 670,
              "endColumn": 22,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "        prepareConfigurationTimeBarrier()\n        val result = block()\n        crossConfigurationTimeBarrier()\n        return result\n    }\n\n    private"
            },
            {
              "step": 48,
              "variableName": "runAtConfigurationTime(...) : LocationAwareException",
              "startLine": 631,
              "startColumn": 28,
              "endLine": 642,
              "endColumn": 6,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "    data class LoadResultMetadata(val originInvocationId: String? = null)\n\n    private\n    fun loadModel(): Any = runAtConfigurationTime {\n        // No need to record the `ClassLoaderScope` tree when loading\n        scopeRegistryListener.dispose()\n"
            },
            {
              "step": 49,
              "variableName": "loadModel()",
              "startLine": 268,
              "startColumn": 20,
              "endLine": 268,
              "endColumn": 31,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "    override fun <T : Any> loadOrCreateModel(creator: () -> T): T {\n        if (isLoaded) {\n            runLoadedSideEffects()\n            return loadModel().uncheckedCast()\n        }\n\n        return runWorkThatContributesToCacheEntry {"
            },
            {
              "step": 50,
              "variableName": "Any",
              "startLine": 22,
              "startColumn": 15,
              "endLine": 22,
              "endColumn": 18,
              "uri": "gradle-8.14.0/platforms/core-configuration/stdlib-kotlin-extensions/src/main/kotlin/org/gradle/internal/extensions/stdlib/CastExtensions.kt",
              "type": "Object",
              "code": "import org.gradle.internal.Cast\n\n\nfun <T : Any> Any.uncheckedCast(): T =\n    Cast.uncheckedNonnullCast(this)\n"
            },
            {
              "step": 51,
              "variableName": "this",
              "startLine": 23,
              "startColumn": 31,
              "endLine": 23,
              "endColumn": 35,
              "uri": "gradle-8.14.0/platforms/core-configuration/stdlib-kotlin-extensions/src/main/kotlin/org/gradle/internal/extensions/stdlib/CastExtensions.kt",
              "type": "Object",
              "code": "\n\nfun <T : Any> Any.uncheckedCast(): T =\n    Cast.uncheckedNonnullCast(this)\n"
            },
            {
              "step": 52,
              "variableName": "Object object",
              "startLine": 76,
              "startColumn": 46,
              "endLine": 76,
              "endColumn": 59,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/Cast.java",
              "type": "Object",
              "code": "    }\n\n    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})\n    public static <T> T uncheckedNonnullCast(Object object) {\n        return (T) object;\n    }\n}"
            },
            {
              "step": 53,
              "variableName": "(T) object",
              "startLine": 77,
              "startColumn": 16,
              "endLine": 77,
              "endColumn": 26,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/Cast.java",
              "type": "Object",
              "code": "\n    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})\n    public static <T> T uncheckedNonnullCast(Object object) {\n        return (T) object;\n    }\n}\n"
            },
            {
              "step": 54,
              "variableName": "Cast.uncheckedNonnullCast(collectionType)",
              "startLine": 223,
              "startColumn": 16,
              "endLine": 223,
              "endColumn": 57,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/api/internal/provider/AbstractCollectionProperty.java",
              "type": "Class",
              "code": "    @Override\n    @Nonnull\n    public Class<C> getType() {\n        return Cast.uncheckedNonnullCast(collectionType);\n    }\n\n    @Override"
            },
            {
              "step": 55,
              "variableName": "provider.getType()",
              "startLine": 41,
              "startColumn": 35,
              "endLine": 41,
              "endColumn": 53,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/api/internal/provider/OrElseFixedValueProvider.java",
              "type": "Class",
              "code": "    @Nullable\n    @Override\n    public Class<T> getType() {\n        return Cast.uncheckedCast(provider.getType());\n    }\n\n    @Override"
            },
            {
              "step": 56,
              "variableName": "@Nullable Object object",
              "startLine": 71,
              "startColumn": 39,
              "endLine": 71,
              "endColumn": 62,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/Cast.java",
              "type": "Object",
              "code": "\n    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})\n    @Nullable\n    public static <T> T uncheckedCast(@Nullable Object object) {\n        return (T) object;\n    }\n"
            },
            {
              "step": 57,
              "variableName": "(T) object",
              "startLine": 72,
              "startColumn": 16,
              "endLine": 72,
              "endColumn": 26,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/Cast.java",
              "type": "Object",
              "code": "    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})\n    @Nullable\n    public static <T> T uncheckedCast(@Nullable Object object) {\n        return (T) object;\n    }\n\n    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})"
            },
            {
              "step": 58,
              "variableName": "Cast.uncheckedCast(value)",
              "startLine": 153,
              "startColumn": 16,
              "endLine": 153,
              "endColumn": 41,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/api/internal/attributes/DefaultImmutableAttributesContainer.java",
              "type": "Object",
              "code": "            value = isolatable.coerce(key.getType());\n        }\n\n        return Cast.uncheckedCast(value);\n    }\n\n    /**"
            },
            {
              "step": 59,
              "variableName": "attributes.getAttribute(ProjectInternal.STATUS_ATTRIBUTE)",
              "startLine": 48,
              "startColumn": 16,
              "endLine": 48,
              "endColumn": 73,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ivyservice/ivyresolve/UserProvidedMetadata.java",
              "type": "String",
              "code": "\n    @Override\n    public String getStatus() {\n        return attributes.getAttribute(ProjectInternal.STATUS_ATTRIBUTE);\n    }\n\n    @Override"
            },
            {
              "step": 60,
              "variableName": "updatedMetadata.getStatus()",
              "startLine": 206,
              "startColumn": 162,
              "endLine": 206,
              "endColumn": 189,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/dsl/DefaultComponentMetadataProcessor.java",
              "type": "String",
              "code": "            updatedMetadata = details.asImmutable();\n        }\n        if (!updatedMetadata.getStatusScheme().contains(updatedMetadata.getStatus())) {\n            throw new ModuleVersionResolveException(updatedMetadata.getId(), () -> String.format(\"Unexpected status '%s' specified for %s. Expected one of: %s\", updatedMetadata.getStatus(), updatedMetadata.getId().toString(), updatedMetadata.getStatusScheme()));\n        }\n        return updatedMetadata;\n    }"
            },
            {
              "step": 61,
              "variableName": "String.format(\"Unexpected status '%s' specified for %s. Expected one of: %s\", updatedMetadata.getStatus(), updatedMetadata.getId().toString(), updatedMetadata.getStatusScheme())",
              "startLine": 206,
              "startColumn": 84,
              "endLine": 206,
              "endColumn": 261,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/dsl/DefaultComponentMetadataProcessor.java",
              "type": "Object[] [[]] : String",
              "code": "            updatedMetadata = details.asImmutable();\n        }\n        if (!updatedMetadata.getStatusScheme().contains(updatedMetadata.getStatus())) {\n            throw new ModuleVersionResolveException(updatedMetadata.getId(), () -> String.format(\"Unexpected status '%s' specified for %s. Expected one of: %s\", updatedMetadata.getStatus(), updatedMetadata.getId().toString(), updatedMetadata.getStatusScheme()));\n        }\n        return updatedMetadata;\n    }"
            },
            {
              "step": 62,
              "variableName": "String.format(\"Unexpected status '%s' specified for %s. Expected one of: %s\", updatedMetadata.getStatus(), updatedMetadata.getId().toString(), updatedMetadata.getStatusScheme())",
              "startLine": 206,
              "startColumn": 84,
              "endLine": 206,
              "endColumn": 261,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/dsl/DefaultComponentMetadataProcessor.java",
              "type": "String",
              "code": "            updatedMetadata = details.asImmutable();\n        }\n        if (!updatedMetadata.getStatusScheme().contains(updatedMetadata.getStatus())) {\n            throw new ModuleVersionResolveException(updatedMetadata.getId(), () -> String.format(\"Unexpected status '%s' specified for %s. Expected one of: %s\", updatedMetadata.getStatus(), updatedMetadata.getId().toString(), updatedMetadata.getStatusScheme()));\n        }\n        return updatedMetadata;\n    }"
            },
            {
              "step": 63,
              "variableName": "messageFactory.create()",
              "startLine": 173,
              "startColumn": 23,
              "endLine": 173,
              "endColumn": 46,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "String",
              "code": "    @Override\n    public String getMessage() {\n        if (messageFactory != null) {\n            message = messageFactory.create();\n            messageFactory = null;\n            return message;\n        }"
            },
            {
              "step": 64,
              "variableName": "message",
              "startLine": 175,
              "startColumn": 20,
              "endLine": 175,
              "endColumn": 27,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "String",
              "code": "        if (messageFactory != null) {\n            message = messageFactory.create();\n            messageFactory = null;\n            return message;\n        }\n        return message;\n    }"
            },
            {
              "step": 65,
              "variableName": "e.getMessage()",
              "startLine": 145,
              "startColumn": 37,
              "endLine": 145,
              "endColumn": 51,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/Install.java",
              "type": "String",
              "code": "            }\n        } catch (Exception e) {\n            logger.log(\"Could not fetch hash for \" + safeUri(distribution) + \".\");\n            logger.log(\"Reason: \" + e.getMessage());\n            return null;\n        }\n    }"
            },
            {
              "step": 66,
              "variableName": "\"Reason: \" + e.getMessage()",
              "startLine": 145,
              "startColumn": 24,
              "endLine": 145,
              "endColumn": 51,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/Install.java",
              "type": "String",
              "code": "            }\n        } catch (Exception e) {\n            logger.log(\"Could not fetch hash for \" + safeUri(distribution) + \".\");\n            logger.log(\"Reason: \" + e.getMessage());\n            return null;\n        }\n    }"
            },
            {
              "step": 67,
              "variableName": "String message",
              "startLine": 26,
              "startColumn": 21,
              "endLine": 26,
              "endColumn": 35,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/Logger.java",
              "type": "String",
              "code": "        this.quiet = quiet;\n    }\n\n    public void log(String message) {\n        if (!quiet) {\n            System.out.println(message);\n        }"
            },
            {
              "step": 68,
              "variableName": "message",
              "startLine": 28,
              "startColumn": 32,
              "endLine": 28,
              "endColumn": 39,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/Logger.java",
              "type": "",
              "code": "\n    public void log(String message) {\n        if (!quiet) {\n            System.out.println(message);\n        }\n    }\n"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "source",
              "startLine": 40,
              "startColumn": 39,
              "endLine": 40,
              "endColumn": 45,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/RegExpNameMapper.java",
              "type": "String",
              "code": "    @Override\n    public String transform(String source) {\n        if (matcher == null) {\n            matcher = pattern.matcher(source);\n        } else {\n            matcher.reset(source);\n        }"
            },
            {
              "step": 1,
              "variableName": "result",
              "startLine": 48,
              "startColumn": 16,
              "endLine": 48,
              "endColumn": 22,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/RegExpNameMapper.java",
              "type": "String",
              "code": "        if (matcher.find()) {\n            result = matcher.replaceFirst(replacement);\n        }\n        return result;\n    }\n}\n"
            },
            {
              "step": 2,
              "variableName": "transformer.transform(value)",
              "startLine": 37,
              "startColumn": 31,
              "endLine": 37,
              "endColumn": 59,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/ChainingTransformer.java",
              "type": "String",
              "code": "    public T transform(T original) {\n        T value = original;\n        for (Transformer<T, T> transformer : transformers) {\n            value = type.cast(transformer.transform(value));\n        }\n        return value;\n    }"
            },
            {
              "step": 3,
              "variableName": "type.cast(transformer.transform(value))",
              "startLine": 37,
              "startColumn": 21,
              "endLine": 37,
              "endColumn": 60,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/ChainingTransformer.java",
              "type": "String",
              "code": "    public T transform(T original) {\n        T value = original;\n        for (Transformer<T, T> transformer : transformers) {\n            value = type.cast(transformer.transform(value));\n        }\n        return value;\n    }"
            },
            {
              "step": 4,
              "variableName": "value",
              "startLine": 39,
              "startColumn": 16,
              "endLine": 39,
              "endColumn": 21,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/ChainingTransformer.java",
              "type": "String",
              "code": "        for (Transformer<T, T> transformer : transformers) {\n            value = type.cast(transformer.transform(value));\n        }\n        return value;\n    }\n\n    public void add(Transformer<T, T> transformer) {"
            },
            {
              "step": 5,
              "variableName": "describer.transform(this)",
              "startLine": 163,
              "startColumn": 16,
              "endLine": 163,
              "endColumn": 41,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/repositories/DefaultMavenArtifactRepository.java",
              "type": "String",
              "code": "\n    @Override\n    public String getDisplayName() {\n        return describer.transform(this);\n    }\n\n    @Override"
            },
            {
              "step": 6,
              "variableName": "describable.getDisplayName()",
              "startLine": 313,
              "startColumn": 35,
              "endLine": 313,
              "endColumn": 63,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "String",
              "code": "        public String getDisplayName() {\n            synchronized (this) {\n                if (displayName == null) {\n                    displayName = describable.getDisplayName();\n                    if (capDisplayName != null || !(describable instanceof DisplayName)) {\n                        describable = null;\n                    }"
            },
            {
              "step": 7,
              "variableName": "displayName",
              "startLine": 318,
              "startColumn": 24,
              "endLine": 318,
              "endColumn": 35,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "String",
              "code": "                        describable = null;\n                    }\n                }\n                return displayName;\n            }\n        }\n    }"
            },
            {
              "step": 8,
              "variableName": "displayName.getDisplayName()",
              "startLine": 772,
              "startColumn": 73,
              "endLine": 772,
              "endColumn": 101,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/configurations/DefaultConfiguration.java",
              "type": "String",
              "code": "                try {\n                    results = resolver.resolveGraph(DefaultConfiguration.this);\n                } catch (Exception e) {\n                    throw exceptionMapper.mapFailure(e, \"dependencies\", displayName.getDisplayName());\n                }\n\n                // Make the new state visible in case a dependency resolution listener queries the result, which requires the new state"
            },
            {
              "step": 9,
              "variableName": "String contextDisplayName",
              "startLine": 68,
              "startColumn": 77,
              "endLine": 68,
              "endColumn": 102,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "String",
              "code": "        return mapFailure(failure, type, displayName);\n    }\n\n    public TypedResolveException mapFailure(Throwable failure, String type, String contextDisplayName) {\n        if (!(failure instanceof TypedResolveException)) {\n            return new TypedResolveException(\n                type,"
            },
            {
              "step": 10,
              "variableName": "contextDisplayName",
              "startLine": 72,
              "startColumn": 17,
              "endLine": 72,
              "endColumn": 35,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "String",
              "code": "        if (!(failure instanceof TypedResolveException)) {\n            return new TypedResolveException(\n                type,\n                contextDisplayName,\n                ImmutableList.of(mapRepositoryOverrideFailure(contextDisplayName, failure))\n            );\n        }"
            },
            {
              "step": 11,
              "variableName": "new TypedResolveException(...) : TypedResolveException",
              "startLine": 70,
              "startColumn": 20,
              "endLine": 74,
              "endColumn": 14,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "TypedResolveException",
              "code": "\n    public TypedResolveException mapFailure(Throwable failure, String type, String contextDisplayName) {\n        if (!(failure instanceof TypedResolveException)) {\n            return new TypedResolveException(\n                type,\n                contextDisplayName,\n                ImmutableList.of(mapRepositoryOverrideFailure(contextDisplayName, failure))"
            },
            {
              "step": 12,
              "variableName": "exceptionMapper.mapFailure(e, \"dependencies\", displayName.getDisplayName())",
              "startLine": 772,
              "startColumn": 27,
              "endLine": 772,
              "endColumn": 102,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/configurations/DefaultConfiguration.java",
              "type": "TypedResolveException",
              "code": "                try {\n                    results = resolver.resolveGraph(DefaultConfiguration.this);\n                } catch (Exception e) {\n                    throw exceptionMapper.mapFailure(e, \"dependencies\", displayName.getDisplayName());\n                }\n\n                // Make the new state visible in case a dependency resolution listener queries the result, which requires the new state"
            },
            {
              "step": 13,
              "variableName": "e",
              "startLine": 772,
              "startColumn": 54,
              "endLine": 772,
              "endColumn": 55,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/configurations/DefaultConfiguration.java",
              "type": "Exception",
              "code": "                try {\n                    results = resolver.resolveGraph(DefaultConfiguration.this);\n                } catch (Exception e) {\n                    throw exceptionMapper.mapFailure(e, \"dependencies\", displayName.getDisplayName());\n                }\n\n                // Make the new state visible in case a dependency resolution listener queries the result, which requires the new state"
            },
            {
              "step": 14,
              "variableName": "Throwable failure",
              "startLine": 68,
              "startColumn": 45,
              "endLine": 68,
              "endColumn": 62,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Throwable",
              "code": "        return mapFailure(failure, type, displayName);\n    }\n\n    public TypedResolveException mapFailure(Throwable failure, String type, String contextDisplayName) {\n        if (!(failure instanceof TypedResolveException)) {\n            return new TypedResolveException(\n                type,"
            },
            {
              "step": 15,
              "variableName": "failure",
              "startLine": 73,
              "startColumn": 83,
              "endLine": 73,
              "endColumn": 90,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Throwable",
              "code": "            return new TypedResolveException(\n                type,\n                contextDisplayName,\n                ImmutableList.of(mapRepositoryOverrideFailure(contextDisplayName, failure))\n            );\n        }\n"
            },
            {
              "step": 16,
              "variableName": "Throwable failure",
              "startLine": 94,
              "startColumn": 78,
              "endLine": 94,
              "endColumn": 95,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Throwable",
              "code": "\n    // TODO: We should handle this exception at the source instead of using instanceof to detect it after it is thrown.\n    //       We should try to avoid catching and analyzing runtime exceptions\n    public Throwable mapRepositoryOverrideFailure(String contextDisplayName, Throwable failure) {\n        if (!(failure instanceof ModuleVersionNotFoundException) || !settingsRepositoriesIgnored()) {\n            return failure;\n        }"
            },
            {
              "step": 17,
              "variableName": "failure",
              "startLine": 108,
              "startColumn": 35,
              "endLine": 108,
              "endColumn": 42,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Throwable",
              "code": "        return new TypedResolveException(\n            \"dependencies\",\n            contextDisplayName,\n            Collections.singleton(failure),\n            resolutions\n        );\n    }"
            },
            {
              "step": 18,
              "variableName": "Collections.singleton(failure)",
              "startLine": 108,
              "startColumn": 13,
              "endLine": 108,
              "endColumn": 43,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Set [<element>] : Throwable",
              "code": "        return new TypedResolveException(\n            \"dependencies\",\n            contextDisplayName,\n            Collections.singleton(failure),\n            resolutions\n        );\n    }"
            },
            {
              "step": 19,
              "variableName": "Collections.singleton(failure)",
              "startLine": 108,
              "startColumn": 13,
              "endLine": 108,
              "endColumn": 43,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Set",
              "code": "        return new TypedResolveException(\n            \"dependencies\",\n            contextDisplayName,\n            Collections.singleton(failure),\n            resolutions\n        );\n    }"
            },
            {
              "step": 20,
              "variableName": "Iterable<? extends Throwable> failures",
              "startLine": 42,
              "startColumn": 67,
              "endLine": 42,
              "endColumn": 105,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ivyservice/TypedResolveException.java",
              "type": "Set",
              "code": "    /**\n     * Creates a new instance with resolutions.\n     */\n    public TypedResolveException(String type, String displayName, Iterable<? extends Throwable> failures, List<String> resolutions) {\n        super(buildMessage(type, displayName), failures, false);\n        this.type = type;\n        this.resolutions = ImmutableList.copyOf(resolutions);"
            },
            {
              "step": 21,
              "variableName": "failures",
              "startLine": 43,
              "startColumn": 48,
              "endLine": 43,
              "endColumn": 56,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ivyservice/TypedResolveException.java",
              "type": "Set",
              "code": "     * Creates a new instance with resolutions.\n     */\n    public TypedResolveException(String type, String displayName, Iterable<? extends Throwable> failures, List<String> resolutions) {\n        super(buildMessage(type, displayName), failures, false);\n        this.type = type;\n        this.resolutions = ImmutableList.copyOf(resolutions);\n    }"
            },
            {
              "step": 22,
              "variableName": "Iterable<? extends Throwable> causes",
              "startLine": 77,
              "startColumn": 48,
              "endLine": 77,
              "endColumn": 84,
              "uri": "gradle-8.14.0/subprojects/core-api/src/main/java/org/gradle/api/artifacts/ResolveException.java",
              "type": "Set",
              "code": "     * @since 8.9\n     */\n    @Incubating\n    protected ResolveException(String message, Iterable<? extends Throwable> causes, @SuppressWarnings(\"unused\") boolean dummy) {\n        super(message, causes);\n    }\n}"
            },
            {
              "step": 23,
              "variableName": "causes",
              "startLine": 78,
              "startColumn": 24,
              "endLine": 78,
              "endColumn": 30,
              "uri": "gradle-8.14.0/subprojects/core-api/src/main/java/org/gradle/api/artifacts/ResolveException.java",
              "type": "Set",
              "code": "     */\n    @Incubating\n    protected ResolveException(String message, Iterable<? extends Throwable> causes, @SuppressWarnings(\"unused\") boolean dummy) {\n        super(message, causes);\n    }\n}\n"
            },
            {
              "step": 24,
              "variableName": "Iterable<? extends Throwable> causes",
              "startLine": 47,
              "startColumn": 55,
              "endLine": 47,
              "endColumn": 91,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "Set",
              "code": "        this.causes.addAll(Arrays.asList(causes));\n    }\n\n    public DefaultMultiCauseException(String message, Iterable<? extends Throwable> causes) {\n        super(message);\n        this.message = message;\n        initCauses(causes);"
            },
            {
              "step": 25,
              "variableName": "causes",
              "startLine": 50,
              "startColumn": 20,
              "endLine": 50,
              "endColumn": 26,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "Set",
              "code": "    public DefaultMultiCauseException(String message, Iterable<? extends Throwable> causes) {\n        super(message);\n        this.message = message;\n        initCauses(causes);\n    }\n\n    public DefaultMultiCauseException(Factory<String> messageFactory) {"
            },
            {
              "step": 26,
              "variableName": "Iterable<? extends Throwable> causes",
              "startLine": 112,
              "startColumn": 28,
              "endLine": 112,
              "endColumn": 64,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "Iterable",
              "code": "        return null;\n    }\n\n    public void initCauses(Iterable<? extends Throwable> causes) {\n        this.causes.clear();\n        for (Throwable cause : causes) {\n            this.causes.add(cause);"
            },
            {
              "step": 27,
              "variableName": "cause",
              "startLine": 115,
              "startColumn": 29,
              "endLine": 115,
              "endColumn": 34,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "Throwable",
              "code": "    public void initCauses(Iterable<? extends Throwable> causes) {\n        this.causes.clear();\n        for (Throwable cause : causes) {\n            this.causes.add(cause);\n        }\n    }\n"
            },
            {
              "step": 28,
              "variableName": "this.causes",
              "startLine": 115,
              "startColumn": 13,
              "endLine": 115,
              "endColumn": 24,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "CopyOnWriteArrayList [<element>] : Throwable",
              "code": "    public void initCauses(Iterable<? extends Throwable> causes) {\n        this.causes.clear();\n        for (Throwable cause : causes) {\n            this.causes.add(cause);\n        }\n    }\n"
            },
            {
              "step": 29,
              "variableName": "this",
              "startLine": 115,
              "startColumn": 13,
              "endLine": 115,
              "endColumn": 17,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "DefaultMultiCauseException [causes, <element>] : Throwable",
              "code": "    public void initCauses(Iterable<? extends Throwable> causes) {\n        this.causes.clear();\n        for (Throwable cause : causes) {\n            this.causes.add(cause);\n        }\n    }\n"
            },
            {
              "step": 30,
              "variableName": "projectConfigurationException",
              "startLine": 57,
              "startColumn": 17,
              "endLine": 57,
              "endColumn": 46,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/DefaultExceptionAnalyser.java",
              "type": "ProjectConfigurationException [causes, <element>] : Throwable",
              "code": "                }\n            }\n            if (!additionalFailures.isEmpty()) {\n                projectConfigurationException.initCauses(additionalFailures);\n                failures.add(transform(projectConfigurationException));\n            }\n        } else if (exception instanceof ServiceCreationException) {"
            },
            {
              "step": 31,
              "variableName": "projectConfigurationException",
              "startLine": 58,
              "startColumn": 40,
              "endLine": 58,
              "endColumn": 69,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/DefaultExceptionAnalyser.java",
              "type": "ProjectConfigurationException [causes, <element>] : Throwable",
              "code": "            }\n            if (!additionalFailures.isEmpty()) {\n                projectConfigurationException.initCauses(additionalFailures);\n                failures.add(transform(projectConfigurationException));\n            }\n        } else if (exception instanceof ServiceCreationException) {\n            failures.add(transform(new InitializationException(exception)));"
            },
            {
              "step": 32,
              "variableName": "transform(projectConfigurationException)",
              "startLine": 58,
              "startColumn": 30,
              "endLine": 58,
              "endColumn": 70,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/DefaultExceptionAnalyser.java",
              "type": "LocationAwareException",
              "code": "            }\n            if (!additionalFailures.isEmpty()) {\n                projectConfigurationException.initCauses(additionalFailures);\n                failures.add(transform(projectConfigurationException));\n            }\n        } else if (exception instanceof ServiceCreationException) {\n            failures.add(transform(new InitializationException(exception)));"
            },
            {
              "step": 33,
              "variableName": "failures",
              "startLine": 58,
              "startColumn": 17,
              "endLine": 58,
              "endColumn": 25,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/DefaultExceptionAnalyser.java",
              "type": "Collection [<element>] : LocationAwareException",
              "code": "            }\n            if (!additionalFailures.isEmpty()) {\n                projectConfigurationException.initCauses(additionalFailures);\n                failures.add(transform(projectConfigurationException));\n            }\n        } else if (exception instanceof ServiceCreationException) {\n            failures.add(transform(new InitializationException(exception)));"
            },
            {
              "step": 34,
              "variableName": "result",
              "startLine": 53,
              "startColumn": 54,
              "endLine": 53,
              "endColumn": 60,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/MultipleBuildFailuresExceptionAnalyser.java",
              "type": "ArrayList [<element>] : LocationAwareException",
              "code": "        for (Throwable failure : failures) {\n            if (failure instanceof MultipleBuildFailures) {\n                for (Throwable cause : ((MultipleBuildFailures) failure).getCauses()) {\n                    collector.collectFailures(cause, result);\n                }\n            } else {\n                collector.collectFailures(failure, result);"
            },
            {
              "step": 35,
              "variableName": "result",
              "startLine": 60,
              "startColumn": 39,
              "endLine": 60,
              "endColumn": 45,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/MultipleBuildFailuresExceptionAnalyser.java",
              "type": "ArrayList [<element>] : LocationAwareException",
              "code": "            }\n        }\n        if (result.size() == 1 && result.get(0) instanceof RuntimeException) {\n            return (RuntimeException) result.get(0);\n        } else {\n            return new MultipleBuildFailures(result);\n        }"
            },
            {
              "step": 36,
              "variableName": "result.get(0)",
              "startLine": 60,
              "startColumn": 39,
              "endLine": 60,
              "endColumn": 52,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/MultipleBuildFailuresExceptionAnalyser.java",
              "type": "LocationAwareException",
              "code": "            }\n        }\n        if (result.size() == 1 && result.get(0) instanceof RuntimeException) {\n            return (RuntimeException) result.get(0);\n        } else {\n            return new MultipleBuildFailures(result);\n        }"
            },
            {
              "step": 37,
              "variableName": "(RuntimeException) result.get(0)",
              "startLine": 60,
              "startColumn": 20,
              "endLine": 60,
              "endColumn": 52,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/MultipleBuildFailuresExceptionAnalyser.java",
              "type": "LocationAwareException",
              "code": "            }\n        }\n        if (result.size() == 1 && result.get(0) instanceof RuntimeException) {\n            return (RuntimeException) result.get(0);\n        } else {\n            return new MultipleBuildFailures(result);\n        }"
            },
            {
              "step": 38,
              "variableName": "exceptionAnalyser.transform(finishFailures)",
              "startLine": 72,
              "startColumn": 16,
              "endLine": 72,
              "endColumn": 59,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/internal/buildtree/DefaultBuildTreeFinishExecutor.java",
              "type": "LocationAwareException",
              "code": "            finishFailures.addAll(result.getFailures());\n        });\n\n        return exceptionAnalyser.transform(finishFailures);\n    }\n}\n"
            },
            {
              "step": 39,
              "variableName": "delegate.finishBuildTree(failures)",
              "startLine": 46,
              "startColumn": 28,
              "endLine": 46,
              "endColumn": 62,
              "uri": "gradle-8.14.0/subprojects/composite-builds/src/main/java/org/gradle/composite/internal/OperationFiringBuildTreeFinishExecutor.java",
              "type": "LocationAwareException",
              "code": "            @Override\n            public RuntimeException call(BuildOperationContext context) {\n                try {\n                    return delegate.finishBuildTree(failures);\n                } finally {\n                    context.setResult(RESULT);\n                }"
            },
            {
              "step": 40,
              "variableName": "buildOperation.call(context)",
              "startLine": 239,
              "startColumn": 21,
              "endLine": 239,
              "endColumn": 49,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/testFixtures/java/org/gradle/internal/operations/TestBuildOperationRunner.java",
              "type": "LocationAwareException",
              "code": "            TestBuildOperationContext context = new TestBuildOperationContext(record);\n            T t;\n            try {\n                t = buildOperation.call(context);\n            } catch (Throwable failure) {\n                if (record.failure == null) {\n                    record.failure = failure;"
            },
            {
              "step": 41,
              "variableName": "t",
              "startLine": 246,
              "startColumn": 20,
              "endLine": 246,
              "endColumn": 21,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/testFixtures/java/org/gradle/internal/operations/TestBuildOperationRunner.java",
              "type": "LocationAwareException",
              "code": "                }\n                throw throwAsUncheckedException(failure);\n            }\n            return t;\n        }\n\n        private <O extends BuildOperation> void execute(O buildOperation, BuildOperationWorker<O> worker) {"
            },
            {
              "step": 42,
              "variableName": "log.call(buildOperation)",
              "startLine": 51,
              "startColumn": 16,
              "endLine": 51,
              "endColumn": 40,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/testFixtures/java/org/gradle/internal/operations/TestBuildOperationRunner.java",
              "type": "LocationAwareException",
              "code": "\n    @Override\n    public <T> T call(CallableBuildOperation<T> buildOperation) {\n        return log.call(buildOperation);\n    }\n\n    @Override"
            },
            {
              "step": 43,
              "variableName": "ca",
              "startLine": 115,
              "startColumn": 5,
              "endLine": 121,
              "endColumn": 7,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/configurationcache/ConfigurationCacheBuildOperations.kt",
              "type": "LocationAwareException",
              "code": "\ninternal\nfun <T : Any> BuildOperationRunner.withModelLoadOperation(block: () -> T): T =\n    call(object : CallableBuildOperation<T> {\n        override fun description(): BuildOperationDescriptor.Builder = BuildOperationDescriptor\n            .displayName(\"Load model from configuration cache\")\n            .progressDisplayName(\"Loading model from configuration cache\")"
            },
            {
              "step": 44,
              "variableName": "ca",
              "startLine": 115,
              "startColumn": 5,
              "endLine": 121,
              "endColumn": 7,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/configurationcache/ConfigurationCacheBuildOperations.kt",
              "type": "LocationAwareException",
              "code": "\ninternal\nfun <T : Any> BuildOperationRunner.withModelLoadOperation(block: () -> T): T =\n    call(object : CallableBuildOperation<T> {\n        override fun description(): BuildOperationDescriptor.Builder = BuildOperationDescriptor\n            .displayName(\"Load model from configuration cache\")\n            .progressDisplayName(\"Loading model from configuration cache\")"
            },
            {
              "step": 45,
              "variableName": "b",
              "startLine": 635,
              "startColumn": 9,
              "endLine": 641,
              "endColumn": 10,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "        // No need to record the `ClassLoaderScope` tree when loading\n        scopeRegistryListener.dispose()\n\n        buildOperationRunner.withModelLoadOperation {\n            val storeLoadResult = entryStore.useForStateLoad(StateType.Model) { stateFile: ConfigurationCacheStateFile ->\n                cacheIO.readModelFrom(stateFile)\n            }"
            },
            {
              "step": 46,
              "variableName": "block()",
              "startLine": 668,
              "startColumn": 22,
              "endLine": 668,
              "endColumn": 29,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "    private\n    inline fun <T> runAtConfigurationTime(block: () -> T): T {\n        prepareConfigurationTimeBarrier()\n        val result = block()\n        crossConfigurationTimeBarrier()\n        return result\n    }"
            },
            {
              "step": 47,
              "variableName": "result",
              "startLine": 670,
              "startColumn": 16,
              "endLine": 670,
              "endColumn": 22,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "        prepareConfigurationTimeBarrier()\n        val result = block()\n        crossConfigurationTimeBarrier()\n        return result\n    }\n\n    private"
            },
            {
              "step": 48,
              "variableName": "runAtConfigurationTime(...) : LocationAwareException",
              "startLine": 631,
              "startColumn": 28,
              "endLine": 642,
              "endColumn": 6,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "    data class LoadResultMetadata(val originInvocationId: String? = null)\n\n    private\n    fun loadModel(): Any = runAtConfigurationTime {\n        // No need to record the `ClassLoaderScope` tree when loading\n        scopeRegistryListener.dispose()\n"
            },
            {
              "step": 49,
              "variableName": "loadModel()",
              "startLine": 268,
              "startColumn": 20,
              "endLine": 268,
              "endColumn": 31,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "    override fun <T : Any> loadOrCreateModel(creator: () -> T): T {\n        if (isLoaded) {\n            runLoadedSideEffects()\n            return loadModel().uncheckedCast()\n        }\n\n        return runWorkThatContributesToCacheEntry {"
            },
            {
              "step": 50,
              "variableName": "Any",
              "startLine": 22,
              "startColumn": 15,
              "endLine": 22,
              "endColumn": 18,
              "uri": "gradle-8.14.0/platforms/core-configuration/stdlib-kotlin-extensions/src/main/kotlin/org/gradle/internal/extensions/stdlib/CastExtensions.kt",
              "type": "Object",
              "code": "import org.gradle.internal.Cast\n\n\nfun <T : Any> Any.uncheckedCast(): T =\n    Cast.uncheckedNonnullCast(this)\n"
            },
            {
              "step": 51,
              "variableName": "this",
              "startLine": 23,
              "startColumn": 31,
              "endLine": 23,
              "endColumn": 35,
              "uri": "gradle-8.14.0/platforms/core-configuration/stdlib-kotlin-extensions/src/main/kotlin/org/gradle/internal/extensions/stdlib/CastExtensions.kt",
              "type": "Object",
              "code": "\n\nfun <T : Any> Any.uncheckedCast(): T =\n    Cast.uncheckedNonnullCast(this)\n"
            },
            {
              "step": 52,
              "variableName": "Object object",
              "startLine": 76,
              "startColumn": 46,
              "endLine": 76,
              "endColumn": 59,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/Cast.java",
              "type": "Object",
              "code": "    }\n\n    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})\n    public static <T> T uncheckedNonnullCast(Object object) {\n        return (T) object;\n    }\n}"
            },
            {
              "step": 53,
              "variableName": "(T) object",
              "startLine": 77,
              "startColumn": 16,
              "endLine": 77,
              "endColumn": 26,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/Cast.java",
              "type": "Object",
              "code": "\n    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})\n    public static <T> T uncheckedNonnullCast(Object object) {\n        return (T) object;\n    }\n}\n"
            },
            {
              "step": 54,
              "variableName": "Cast.uncheckedNonnullCast(collectionType)",
              "startLine": 223,
              "startColumn": 16,
              "endLine": 223,
              "endColumn": 57,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/api/internal/provider/AbstractCollectionProperty.java",
              "type": "Class",
              "code": "    @Override\n    @Nonnull\n    public Class<C> getType() {\n        return Cast.uncheckedNonnullCast(collectionType);\n    }\n\n    @Override"
            },
            {
              "step": 55,
              "variableName": "provider.getType()",
              "startLine": 41,
              "startColumn": 35,
              "endLine": 41,
              "endColumn": 53,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/api/internal/provider/OrElseFixedValueProvider.java",
              "type": "Class",
              "code": "    @Nullable\n    @Override\n    public Class<T> getType() {\n        return Cast.uncheckedCast(provider.getType());\n    }\n\n    @Override"
            },
            {
              "step": 56,
              "variableName": "@Nullable Object object",
              "startLine": 71,
              "startColumn": 39,
              "endLine": 71,
              "endColumn": 62,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/Cast.java",
              "type": "Object",
              "code": "\n    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})\n    @Nullable\n    public static <T> T uncheckedCast(@Nullable Object object) {\n        return (T) object;\n    }\n"
            },
            {
              "step": 57,
              "variableName": "(T) object",
              "startLine": 72,
              "startColumn": 16,
              "endLine": 72,
              "endColumn": 26,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/Cast.java",
              "type": "Object",
              "code": "    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})\n    @Nullable\n    public static <T> T uncheckedCast(@Nullable Object object) {\n        return (T) object;\n    }\n\n    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})"
            },
            {
              "step": 58,
              "variableName": "Cast.uncheckedCast(value)",
              "startLine": 153,
              "startColumn": 16,
              "endLine": 153,
              "endColumn": 41,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/api/internal/attributes/DefaultImmutableAttributesContainer.java",
              "type": "Object",
              "code": "            value = isolatable.coerce(key.getType());\n        }\n\n        return Cast.uncheckedCast(value);\n    }\n\n    /**"
            },
            {
              "step": 59,
              "variableName": "attributes.getAttribute(ProjectInternal.STATUS_ATTRIBUTE)",
              "startLine": 48,
              "startColumn": 16,
              "endLine": 48,
              "endColumn": 73,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ivyservice/ivyresolve/UserProvidedMetadata.java",
              "type": "String",
              "code": "\n    @Override\n    public String getStatus() {\n        return attributes.getAttribute(ProjectInternal.STATUS_ATTRIBUTE);\n    }\n\n    @Override"
            },
            {
              "step": 60,
              "variableName": "updatedMetadata.getStatus()",
              "startLine": 206,
              "startColumn": 162,
              "endLine": 206,
              "endColumn": 189,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/dsl/DefaultComponentMetadataProcessor.java",
              "type": "String",
              "code": "            updatedMetadata = details.asImmutable();\n        }\n        if (!updatedMetadata.getStatusScheme().contains(updatedMetadata.getStatus())) {\n            throw new ModuleVersionResolveException(updatedMetadata.getId(), () -> String.format(\"Unexpected status '%s' specified for %s. Expected one of: %s\", updatedMetadata.getStatus(), updatedMetadata.getId().toString(), updatedMetadata.getStatusScheme()));\n        }\n        return updatedMetadata;\n    }"
            },
            {
              "step": 61,
              "variableName": "String.format(\"Unexpected status '%s' specified for %s. Expected one of: %s\", updatedMetadata.getStatus(), updatedMetadata.getId().toString(), updatedMetadata.getStatusScheme())",
              "startLine": 206,
              "startColumn": 84,
              "endLine": 206,
              "endColumn": 261,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/dsl/DefaultComponentMetadataProcessor.java",
              "type": "Object[] [[]] : String",
              "code": "            updatedMetadata = details.asImmutable();\n        }\n        if (!updatedMetadata.getStatusScheme().contains(updatedMetadata.getStatus())) {\n            throw new ModuleVersionResolveException(updatedMetadata.getId(), () -> String.format(\"Unexpected status '%s' specified for %s. Expected one of: %s\", updatedMetadata.getStatus(), updatedMetadata.getId().toString(), updatedMetadata.getStatusScheme()));\n        }\n        return updatedMetadata;\n    }"
            },
            {
              "step": 62,
              "variableName": "String.format(\"Unexpected status '%s' specified for %s. Expected one of: %s\", updatedMetadata.getStatus(), updatedMetadata.getId().toString(), updatedMetadata.getStatusScheme())",
              "startLine": 206,
              "startColumn": 84,
              "endLine": 206,
              "endColumn": 261,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/dsl/DefaultComponentMetadataProcessor.java",
              "type": "String",
              "code": "            updatedMetadata = details.asImmutable();\n        }\n        if (!updatedMetadata.getStatusScheme().contains(updatedMetadata.getStatus())) {\n            throw new ModuleVersionResolveException(updatedMetadata.getId(), () -> String.format(\"Unexpected status '%s' specified for %s. Expected one of: %s\", updatedMetadata.getStatus(), updatedMetadata.getId().toString(), updatedMetadata.getStatusScheme()));\n        }\n        return updatedMetadata;\n    }"
            },
            {
              "step": 63,
              "variableName": "messageFactory.create()",
              "startLine": 173,
              "startColumn": 23,
              "endLine": 173,
              "endColumn": 46,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "String",
              "code": "    @Override\n    public String getMessage() {\n        if (messageFactory != null) {\n            message = messageFactory.create();\n            messageFactory = null;\n            return message;\n        }"
            },
            {
              "step": 64,
              "variableName": "message",
              "startLine": 175,
              "startColumn": 20,
              "endLine": 175,
              "endColumn": 27,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "String",
              "code": "        if (messageFactory != null) {\n            message = messageFactory.create();\n            messageFactory = null;\n            return message;\n        }\n        return message;\n    }"
            },
            {
              "step": 65,
              "variableName": "e.getMessage()",
              "startLine": 145,
              "startColumn": 37,
              "endLine": 145,
              "endColumn": 51,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/Install.java",
              "type": "String",
              "code": "            }\n        } catch (Exception e) {\n            logger.log(\"Could not fetch hash for \" + safeUri(distribution) + \".\");\n            logger.log(\"Reason: \" + e.getMessage());\n            return null;\n        }\n    }"
            },
            {
              "step": 66,
              "variableName": "\"Reason: \" + e.getMessage()",
              "startLine": 145,
              "startColumn": 24,
              "endLine": 145,
              "endColumn": 51,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/Install.java",
              "type": "String",
              "code": "            }\n        } catch (Exception e) {\n            logger.log(\"Could not fetch hash for \" + safeUri(distribution) + \".\");\n            logger.log(\"Reason: \" + e.getMessage());\n            return null;\n        }\n    }"
            },
            {
              "step": 67,
              "variableName": "String message",
              "startLine": 26,
              "startColumn": 21,
              "endLine": 26,
              "endColumn": 35,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/Logger.java",
              "type": "String",
              "code": "        this.quiet = quiet;\n    }\n\n    public void log(String message) {\n        if (!quiet) {\n            System.out.println(message);\n        }"
            },
            {
              "step": 68,
              "variableName": "message",
              "startLine": 28,
              "startColumn": 32,
              "endLine": 28,
              "endColumn": 39,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/Logger.java",
              "type": "",
              "code": "\n    public void log(String message) {\n        if (!quiet) {\n            System.out.println(message);\n        }\n    }\n"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "source",
              "startLine": 42,
              "startColumn": 27,
              "endLine": 42,
              "endColumn": 33,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/RegExpNameMapper.java",
              "type": "String",
              "code": "        if (matcher == null) {\n            matcher = pattern.matcher(source);\n        } else {\n            matcher.reset(source);\n        }\n        String result = source;\n        if (matcher.find()) {"
            },
            {
              "step": 1,
              "variableName": "result",
              "startLine": 48,
              "startColumn": 16,
              "endLine": 48,
              "endColumn": 22,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/RegExpNameMapper.java",
              "type": "String",
              "code": "        if (matcher.find()) {\n            result = matcher.replaceFirst(replacement);\n        }\n        return result;\n    }\n}\n"
            },
            {
              "step": 2,
              "variableName": "transformer.transform(value)",
              "startLine": 37,
              "startColumn": 31,
              "endLine": 37,
              "endColumn": 59,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/ChainingTransformer.java",
              "type": "String",
              "code": "    public T transform(T original) {\n        T value = original;\n        for (Transformer<T, T> transformer : transformers) {\n            value = type.cast(transformer.transform(value));\n        }\n        return value;\n    }"
            },
            {
              "step": 3,
              "variableName": "type.cast(transformer.transform(value))",
              "startLine": 37,
              "startColumn": 21,
              "endLine": 37,
              "endColumn": 60,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/ChainingTransformer.java",
              "type": "String",
              "code": "    public T transform(T original) {\n        T value = original;\n        for (Transformer<T, T> transformer : transformers) {\n            value = type.cast(transformer.transform(value));\n        }\n        return value;\n    }"
            },
            {
              "step": 4,
              "variableName": "value",
              "startLine": 39,
              "startColumn": 16,
              "endLine": 39,
              "endColumn": 21,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/ChainingTransformer.java",
              "type": "String",
              "code": "        for (Transformer<T, T> transformer : transformers) {\n            value = type.cast(transformer.transform(value));\n        }\n        return value;\n    }\n\n    public void add(Transformer<T, T> transformer) {"
            },
            {
              "step": 5,
              "variableName": "describer.transform(this)",
              "startLine": 163,
              "startColumn": 16,
              "endLine": 163,
              "endColumn": 41,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/repositories/DefaultMavenArtifactRepository.java",
              "type": "String",
              "code": "\n    @Override\n    public String getDisplayName() {\n        return describer.transform(this);\n    }\n\n    @Override"
            },
            {
              "step": 6,
              "variableName": "describable.getDisplayName()",
              "startLine": 313,
              "startColumn": 35,
              "endLine": 313,
              "endColumn": 63,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "String",
              "code": "        public String getDisplayName() {\n            synchronized (this) {\n                if (displayName == null) {\n                    displayName = describable.getDisplayName();\n                    if (capDisplayName != null || !(describable instanceof DisplayName)) {\n                        describable = null;\n                    }"
            },
            {
              "step": 7,
              "variableName": "displayName",
              "startLine": 318,
              "startColumn": 24,
              "endLine": 318,
              "endColumn": 35,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "String",
              "code": "                        describable = null;\n                    }\n                }\n                return displayName;\n            }\n        }\n    }"
            },
            {
              "step": 8,
              "variableName": "displayName.getDisplayName()",
              "startLine": 772,
              "startColumn": 73,
              "endLine": 772,
              "endColumn": 101,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/configurations/DefaultConfiguration.java",
              "type": "String",
              "code": "                try {\n                    results = resolver.resolveGraph(DefaultConfiguration.this);\n                } catch (Exception e) {\n                    throw exceptionMapper.mapFailure(e, \"dependencies\", displayName.getDisplayName());\n                }\n\n                // Make the new state visible in case a dependency resolution listener queries the result, which requires the new state"
            },
            {
              "step": 9,
              "variableName": "String contextDisplayName",
              "startLine": 68,
              "startColumn": 77,
              "endLine": 68,
              "endColumn": 102,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "String",
              "code": "        return mapFailure(failure, type, displayName);\n    }\n\n    public TypedResolveException mapFailure(Throwable failure, String type, String contextDisplayName) {\n        if (!(failure instanceof TypedResolveException)) {\n            return new TypedResolveException(\n                type,"
            },
            {
              "step": 10,
              "variableName": "contextDisplayName",
              "startLine": 72,
              "startColumn": 17,
              "endLine": 72,
              "endColumn": 35,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "String",
              "code": "        if (!(failure instanceof TypedResolveException)) {\n            return new TypedResolveException(\n                type,\n                contextDisplayName,\n                ImmutableList.of(mapRepositoryOverrideFailure(contextDisplayName, failure))\n            );\n        }"
            },
            {
              "step": 11,
              "variableName": "new TypedResolveException(...) : TypedResolveException",
              "startLine": 70,
              "startColumn": 20,
              "endLine": 74,
              "endColumn": 14,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "TypedResolveException",
              "code": "\n    public TypedResolveException mapFailure(Throwable failure, String type, String contextDisplayName) {\n        if (!(failure instanceof TypedResolveException)) {\n            return new TypedResolveException(\n                type,\n                contextDisplayName,\n                ImmutableList.of(mapRepositoryOverrideFailure(contextDisplayName, failure))"
            },
            {
              "step": 12,
              "variableName": "exceptionMapper.mapFailure(e, \"dependencies\", displayName.getDisplayName())",
              "startLine": 772,
              "startColumn": 27,
              "endLine": 772,
              "endColumn": 102,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/configurations/DefaultConfiguration.java",
              "type": "TypedResolveException",
              "code": "                try {\n                    results = resolver.resolveGraph(DefaultConfiguration.this);\n                } catch (Exception e) {\n                    throw exceptionMapper.mapFailure(e, \"dependencies\", displayName.getDisplayName());\n                }\n\n                // Make the new state visible in case a dependency resolution listener queries the result, which requires the new state"
            },
            {
              "step": 13,
              "variableName": "e",
              "startLine": 772,
              "startColumn": 54,
              "endLine": 772,
              "endColumn": 55,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/configurations/DefaultConfiguration.java",
              "type": "Exception",
              "code": "                try {\n                    results = resolver.resolveGraph(DefaultConfiguration.this);\n                } catch (Exception e) {\n                    throw exceptionMapper.mapFailure(e, \"dependencies\", displayName.getDisplayName());\n                }\n\n                // Make the new state visible in case a dependency resolution listener queries the result, which requires the new state"
            },
            {
              "step": 14,
              "variableName": "Throwable failure",
              "startLine": 68,
              "startColumn": 45,
              "endLine": 68,
              "endColumn": 62,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Throwable",
              "code": "        return mapFailure(failure, type, displayName);\n    }\n\n    public TypedResolveException mapFailure(Throwable failure, String type, String contextDisplayName) {\n        if (!(failure instanceof TypedResolveException)) {\n            return new TypedResolveException(\n                type,"
            },
            {
              "step": 15,
              "variableName": "failure",
              "startLine": 73,
              "startColumn": 83,
              "endLine": 73,
              "endColumn": 90,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Throwable",
              "code": "            return new TypedResolveException(\n                type,\n                contextDisplayName,\n                ImmutableList.of(mapRepositoryOverrideFailure(contextDisplayName, failure))\n            );\n        }\n"
            },
            {
              "step": 16,
              "variableName": "Throwable failure",
              "startLine": 94,
              "startColumn": 78,
              "endLine": 94,
              "endColumn": 95,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Throwable",
              "code": "\n    // TODO: We should handle this exception at the source instead of using instanceof to detect it after it is thrown.\n    //       We should try to avoid catching and analyzing runtime exceptions\n    public Throwable mapRepositoryOverrideFailure(String contextDisplayName, Throwable failure) {\n        if (!(failure instanceof ModuleVersionNotFoundException) || !settingsRepositoriesIgnored()) {\n            return failure;\n        }"
            },
            {
              "step": 17,
              "variableName": "failure",
              "startLine": 108,
              "startColumn": 35,
              "endLine": 108,
              "endColumn": 42,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Throwable",
              "code": "        return new TypedResolveException(\n            \"dependencies\",\n            contextDisplayName,\n            Collections.singleton(failure),\n            resolutions\n        );\n    }"
            },
            {
              "step": 18,
              "variableName": "Collections.singleton(failure)",
              "startLine": 108,
              "startColumn": 13,
              "endLine": 108,
              "endColumn": 43,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Set [<element>] : Throwable",
              "code": "        return new TypedResolveException(\n            \"dependencies\",\n            contextDisplayName,\n            Collections.singleton(failure),\n            resolutions\n        );\n    }"
            },
            {
              "step": 19,
              "variableName": "Collections.singleton(failure)",
              "startLine": 108,
              "startColumn": 13,
              "endLine": 108,
              "endColumn": 43,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Set",
              "code": "        return new TypedResolveException(\n            \"dependencies\",\n            contextDisplayName,\n            Collections.singleton(failure),\n            resolutions\n        );\n    }"
            },
            {
              "step": 20,
              "variableName": "Iterable<? extends Throwable> failures",
              "startLine": 42,
              "startColumn": 67,
              "endLine": 42,
              "endColumn": 105,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ivyservice/TypedResolveException.java",
              "type": "Set",
              "code": "    /**\n     * Creates a new instance with resolutions.\n     */\n    public TypedResolveException(String type, String displayName, Iterable<? extends Throwable> failures, List<String> resolutions) {\n        super(buildMessage(type, displayName), failures, false);\n        this.type = type;\n        this.resolutions = ImmutableList.copyOf(resolutions);"
            },
            {
              "step": 21,
              "variableName": "failures",
              "startLine": 43,
              "startColumn": 48,
              "endLine": 43,
              "endColumn": 56,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ivyservice/TypedResolveException.java",
              "type": "Set",
              "code": "     * Creates a new instance with resolutions.\n     */\n    public TypedResolveException(String type, String displayName, Iterable<? extends Throwable> failures, List<String> resolutions) {\n        super(buildMessage(type, displayName), failures, false);\n        this.type = type;\n        this.resolutions = ImmutableList.copyOf(resolutions);\n    }"
            },
            {
              "step": 22,
              "variableName": "Iterable<? extends Throwable> causes",
              "startLine": 77,
              "startColumn": 48,
              "endLine": 77,
              "endColumn": 84,
              "uri": "gradle-8.14.0/subprojects/core-api/src/main/java/org/gradle/api/artifacts/ResolveException.java",
              "type": "Set",
              "code": "     * @since 8.9\n     */\n    @Incubating\n    protected ResolveException(String message, Iterable<? extends Throwable> causes, @SuppressWarnings(\"unused\") boolean dummy) {\n        super(message, causes);\n    }\n}"
            },
            {
              "step": 23,
              "variableName": "causes",
              "startLine": 78,
              "startColumn": 24,
              "endLine": 78,
              "endColumn": 30,
              "uri": "gradle-8.14.0/subprojects/core-api/src/main/java/org/gradle/api/artifacts/ResolveException.java",
              "type": "Set",
              "code": "     */\n    @Incubating\n    protected ResolveException(String message, Iterable<? extends Throwable> causes, @SuppressWarnings(\"unused\") boolean dummy) {\n        super(message, causes);\n    }\n}\n"
            },
            {
              "step": 24,
              "variableName": "Iterable<? extends Throwable> causes",
              "startLine": 47,
              "startColumn": 55,
              "endLine": 47,
              "endColumn": 91,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "Set",
              "code": "        this.causes.addAll(Arrays.asList(causes));\n    }\n\n    public DefaultMultiCauseException(String message, Iterable<? extends Throwable> causes) {\n        super(message);\n        this.message = message;\n        initCauses(causes);"
            },
            {
              "step": 25,
              "variableName": "causes",
              "startLine": 50,
              "startColumn": 20,
              "endLine": 50,
              "endColumn": 26,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "Set",
              "code": "    public DefaultMultiCauseException(String message, Iterable<? extends Throwable> causes) {\n        super(message);\n        this.message = message;\n        initCauses(causes);\n    }\n\n    public DefaultMultiCauseException(Factory<String> messageFactory) {"
            },
            {
              "step": 26,
              "variableName": "Iterable<? extends Throwable> causes",
              "startLine": 112,
              "startColumn": 28,
              "endLine": 112,
              "endColumn": 64,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "Iterable",
              "code": "        return null;\n    }\n\n    public void initCauses(Iterable<? extends Throwable> causes) {\n        this.causes.clear();\n        for (Throwable cause : causes) {\n            this.causes.add(cause);"
            },
            {
              "step": 27,
              "variableName": "cause",
              "startLine": 115,
              "startColumn": 29,
              "endLine": 115,
              "endColumn": 34,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "Throwable",
              "code": "    public void initCauses(Iterable<? extends Throwable> causes) {\n        this.causes.clear();\n        for (Throwable cause : causes) {\n            this.causes.add(cause);\n        }\n    }\n"
            },
            {
              "step": 28,
              "variableName": "this.causes",
              "startLine": 115,
              "startColumn": 13,
              "endLine": 115,
              "endColumn": 24,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "CopyOnWriteArrayList [<element>] : Throwable",
              "code": "    public void initCauses(Iterable<? extends Throwable> causes) {\n        this.causes.clear();\n        for (Throwable cause : causes) {\n            this.causes.add(cause);\n        }\n    }\n"
            },
            {
              "step": 29,
              "variableName": "this",
              "startLine": 115,
              "startColumn": 13,
              "endLine": 115,
              "endColumn": 17,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "DefaultMultiCauseException [causes, <element>] : Throwable",
              "code": "    public void initCauses(Iterable<? extends Throwable> causes) {\n        this.causes.clear();\n        for (Throwable cause : causes) {\n            this.causes.add(cause);\n        }\n    }\n"
            },
            {
              "step": 30,
              "variableName": "projectConfigurationException",
              "startLine": 57,
              "startColumn": 17,
              "endLine": 57,
              "endColumn": 46,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/DefaultExceptionAnalyser.java",
              "type": "ProjectConfigurationException [causes, <element>] : Throwable",
              "code": "                }\n            }\n            if (!additionalFailures.isEmpty()) {\n                projectConfigurationException.initCauses(additionalFailures);\n                failures.add(transform(projectConfigurationException));\n            }\n        } else if (exception instanceof ServiceCreationException) {"
            },
            {
              "step": 31,
              "variableName": "projectConfigurationException",
              "startLine": 58,
              "startColumn": 40,
              "endLine": 58,
              "endColumn": 69,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/DefaultExceptionAnalyser.java",
              "type": "ProjectConfigurationException [causes, <element>] : Throwable",
              "code": "            }\n            if (!additionalFailures.isEmpty()) {\n                projectConfigurationException.initCauses(additionalFailures);\n                failures.add(transform(projectConfigurationException));\n            }\n        } else if (exception instanceof ServiceCreationException) {\n            failures.add(transform(new InitializationException(exception)));"
            },
            {
              "step": 32,
              "variableName": "transform(projectConfigurationException)",
              "startLine": 58,
              "startColumn": 30,
              "endLine": 58,
              "endColumn": 70,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/DefaultExceptionAnalyser.java",
              "type": "LocationAwareException",
              "code": "            }\n            if (!additionalFailures.isEmpty()) {\n                projectConfigurationException.initCauses(additionalFailures);\n                failures.add(transform(projectConfigurationException));\n            }\n        } else if (exception instanceof ServiceCreationException) {\n            failures.add(transform(new InitializationException(exception)));"
            },
            {
              "step": 33,
              "variableName": "failures",
              "startLine": 58,
              "startColumn": 17,
              "endLine": 58,
              "endColumn": 25,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/DefaultExceptionAnalyser.java",
              "type": "Collection [<element>] : LocationAwareException",
              "code": "            }\n            if (!additionalFailures.isEmpty()) {\n                projectConfigurationException.initCauses(additionalFailures);\n                failures.add(transform(projectConfigurationException));\n            }\n        } else if (exception instanceof ServiceCreationException) {\n            failures.add(transform(new InitializationException(exception)));"
            },
            {
              "step": 34,
              "variableName": "result",
              "startLine": 53,
              "startColumn": 54,
              "endLine": 53,
              "endColumn": 60,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/MultipleBuildFailuresExceptionAnalyser.java",
              "type": "ArrayList [<element>] : LocationAwareException",
              "code": "        for (Throwable failure : failures) {\n            if (failure instanceof MultipleBuildFailures) {\n                for (Throwable cause : ((MultipleBuildFailures) failure).getCauses()) {\n                    collector.collectFailures(cause, result);\n                }\n            } else {\n                collector.collectFailures(failure, result);"
            },
            {
              "step": 35,
              "variableName": "result",
              "startLine": 60,
              "startColumn": 39,
              "endLine": 60,
              "endColumn": 45,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/MultipleBuildFailuresExceptionAnalyser.java",
              "type": "ArrayList [<element>] : LocationAwareException",
              "code": "            }\n        }\n        if (result.size() == 1 && result.get(0) instanceof RuntimeException) {\n            return (RuntimeException) result.get(0);\n        } else {\n            return new MultipleBuildFailures(result);\n        }"
            },
            {
              "step": 36,
              "variableName": "result.get(0)",
              "startLine": 60,
              "startColumn": 39,
              "endLine": 60,
              "endColumn": 52,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/MultipleBuildFailuresExceptionAnalyser.java",
              "type": "LocationAwareException",
              "code": "            }\n        }\n        if (result.size() == 1 && result.get(0) instanceof RuntimeException) {\n            return (RuntimeException) result.get(0);\n        } else {\n            return new MultipleBuildFailures(result);\n        }"
            },
            {
              "step": 37,
              "variableName": "(RuntimeException) result.get(0)",
              "startLine": 60,
              "startColumn": 20,
              "endLine": 60,
              "endColumn": 52,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/MultipleBuildFailuresExceptionAnalyser.java",
              "type": "LocationAwareException",
              "code": "            }\n        }\n        if (result.size() == 1 && result.get(0) instanceof RuntimeException) {\n            return (RuntimeException) result.get(0);\n        } else {\n            return new MultipleBuildFailures(result);\n        }"
            },
            {
              "step": 38,
              "variableName": "exceptionAnalyser.transform(finishFailures)",
              "startLine": 72,
              "startColumn": 16,
              "endLine": 72,
              "endColumn": 59,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/internal/buildtree/DefaultBuildTreeFinishExecutor.java",
              "type": "LocationAwareException",
              "code": "            finishFailures.addAll(result.getFailures());\n        });\n\n        return exceptionAnalyser.transform(finishFailures);\n    }\n}\n"
            },
            {
              "step": 39,
              "variableName": "delegate.finishBuildTree(failures)",
              "startLine": 46,
              "startColumn": 28,
              "endLine": 46,
              "endColumn": 62,
              "uri": "gradle-8.14.0/subprojects/composite-builds/src/main/java/org/gradle/composite/internal/OperationFiringBuildTreeFinishExecutor.java",
              "type": "LocationAwareException",
              "code": "            @Override\n            public RuntimeException call(BuildOperationContext context) {\n                try {\n                    return delegate.finishBuildTree(failures);\n                } finally {\n                    context.setResult(RESULT);\n                }"
            },
            {
              "step": 40,
              "variableName": "buildOperation.call(context)",
              "startLine": 239,
              "startColumn": 21,
              "endLine": 239,
              "endColumn": 49,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/testFixtures/java/org/gradle/internal/operations/TestBuildOperationRunner.java",
              "type": "LocationAwareException",
              "code": "            TestBuildOperationContext context = new TestBuildOperationContext(record);\n            T t;\n            try {\n                t = buildOperation.call(context);\n            } catch (Throwable failure) {\n                if (record.failure == null) {\n                    record.failure = failure;"
            },
            {
              "step": 41,
              "variableName": "t",
              "startLine": 246,
              "startColumn": 20,
              "endLine": 246,
              "endColumn": 21,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/testFixtures/java/org/gradle/internal/operations/TestBuildOperationRunner.java",
              "type": "LocationAwareException",
              "code": "                }\n                throw throwAsUncheckedException(failure);\n            }\n            return t;\n        }\n\n        private <O extends BuildOperation> void execute(O buildOperation, BuildOperationWorker<O> worker) {"
            },
            {
              "step": 42,
              "variableName": "log.call(buildOperation)",
              "startLine": 51,
              "startColumn": 16,
              "endLine": 51,
              "endColumn": 40,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/testFixtures/java/org/gradle/internal/operations/TestBuildOperationRunner.java",
              "type": "LocationAwareException",
              "code": "\n    @Override\n    public <T> T call(CallableBuildOperation<T> buildOperation) {\n        return log.call(buildOperation);\n    }\n\n    @Override"
            },
            {
              "step": 43,
              "variableName": "ca",
              "startLine": 115,
              "startColumn": 5,
              "endLine": 121,
              "endColumn": 7,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/configurationcache/ConfigurationCacheBuildOperations.kt",
              "type": "LocationAwareException",
              "code": "\ninternal\nfun <T : Any> BuildOperationRunner.withModelLoadOperation(block: () -> T): T =\n    call(object : CallableBuildOperation<T> {\n        override fun description(): BuildOperationDescriptor.Builder = BuildOperationDescriptor\n            .displayName(\"Load model from configuration cache\")\n            .progressDisplayName(\"Loading model from configuration cache\")"
            },
            {
              "step": 44,
              "variableName": "ca",
              "startLine": 115,
              "startColumn": 5,
              "endLine": 121,
              "endColumn": 7,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/configurationcache/ConfigurationCacheBuildOperations.kt",
              "type": "LocationAwareException",
              "code": "\ninternal\nfun <T : Any> BuildOperationRunner.withModelLoadOperation(block: () -> T): T =\n    call(object : CallableBuildOperation<T> {\n        override fun description(): BuildOperationDescriptor.Builder = BuildOperationDescriptor\n            .displayName(\"Load model from configuration cache\")\n            .progressDisplayName(\"Loading model from configuration cache\")"
            },
            {
              "step": 45,
              "variableName": "b",
              "startLine": 635,
              "startColumn": 9,
              "endLine": 641,
              "endColumn": 10,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "        // No need to record the `ClassLoaderScope` tree when loading\n        scopeRegistryListener.dispose()\n\n        buildOperationRunner.withModelLoadOperation {\n            val storeLoadResult = entryStore.useForStateLoad(StateType.Model) { stateFile: ConfigurationCacheStateFile ->\n                cacheIO.readModelFrom(stateFile)\n            }"
            },
            {
              "step": 46,
              "variableName": "block()",
              "startLine": 668,
              "startColumn": 22,
              "endLine": 668,
              "endColumn": 29,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "    private\n    inline fun <T> runAtConfigurationTime(block: () -> T): T {\n        prepareConfigurationTimeBarrier()\n        val result = block()\n        crossConfigurationTimeBarrier()\n        return result\n    }"
            },
            {
              "step": 47,
              "variableName": "result",
              "startLine": 670,
              "startColumn": 16,
              "endLine": 670,
              "endColumn": 22,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "        prepareConfigurationTimeBarrier()\n        val result = block()\n        crossConfigurationTimeBarrier()\n        return result\n    }\n\n    private"
            },
            {
              "step": 48,
              "variableName": "runAtConfigurationTime(...) : LocationAwareException",
              "startLine": 631,
              "startColumn": 28,
              "endLine": 642,
              "endColumn": 6,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "    data class LoadResultMetadata(val originInvocationId: String? = null)\n\n    private\n    fun loadModel(): Any = runAtConfigurationTime {\n        // No need to record the `ClassLoaderScope` tree when loading\n        scopeRegistryListener.dispose()\n"
            },
            {
              "step": 49,
              "variableName": "loadModel()",
              "startLine": 268,
              "startColumn": 20,
              "endLine": 268,
              "endColumn": 31,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "    override fun <T : Any> loadOrCreateModel(creator: () -> T): T {\n        if (isLoaded) {\n            runLoadedSideEffects()\n            return loadModel().uncheckedCast()\n        }\n\n        return runWorkThatContributesToCacheEntry {"
            },
            {
              "step": 50,
              "variableName": "Any",
              "startLine": 22,
              "startColumn": 15,
              "endLine": 22,
              "endColumn": 18,
              "uri": "gradle-8.14.0/platforms/core-configuration/stdlib-kotlin-extensions/src/main/kotlin/org/gradle/internal/extensions/stdlib/CastExtensions.kt",
              "type": "Object",
              "code": "import org.gradle.internal.Cast\n\n\nfun <T : Any> Any.uncheckedCast(): T =\n    Cast.uncheckedNonnullCast(this)\n"
            },
            {
              "step": 51,
              "variableName": "this",
              "startLine": 23,
              "startColumn": 31,
              "endLine": 23,
              "endColumn": 35,
              "uri": "gradle-8.14.0/platforms/core-configuration/stdlib-kotlin-extensions/src/main/kotlin/org/gradle/internal/extensions/stdlib/CastExtensions.kt",
              "type": "Object",
              "code": "\n\nfun <T : Any> Any.uncheckedCast(): T =\n    Cast.uncheckedNonnullCast(this)\n"
            },
            {
              "step": 52,
              "variableName": "Object object",
              "startLine": 76,
              "startColumn": 46,
              "endLine": 76,
              "endColumn": 59,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/Cast.java",
              "type": "Object",
              "code": "    }\n\n    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})\n    public static <T> T uncheckedNonnullCast(Object object) {\n        return (T) object;\n    }\n}"
            },
            {
              "step": 53,
              "variableName": "(T) object",
              "startLine": 77,
              "startColumn": 16,
              "endLine": 77,
              "endColumn": 26,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/Cast.java",
              "type": "Object",
              "code": "\n    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})\n    public static <T> T uncheckedNonnullCast(Object object) {\n        return (T) object;\n    }\n}\n"
            },
            {
              "step": 54,
              "variableName": "Cast.uncheckedNonnullCast(collectionType)",
              "startLine": 223,
              "startColumn": 16,
              "endLine": 223,
              "endColumn": 57,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/api/internal/provider/AbstractCollectionProperty.java",
              "type": "Class",
              "code": "    @Override\n    @Nonnull\n    public Class<C> getType() {\n        return Cast.uncheckedNonnullCast(collectionType);\n    }\n\n    @Override"
            },
            {
              "step": 55,
              "variableName": "provider.getType()",
              "startLine": 41,
              "startColumn": 35,
              "endLine": 41,
              "endColumn": 53,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/api/internal/provider/OrElseFixedValueProvider.java",
              "type": "Class",
              "code": "    @Nullable\n    @Override\n    public Class<T> getType() {\n        return Cast.uncheckedCast(provider.getType());\n    }\n\n    @Override"
            },
            {
              "step": 56,
              "variableName": "@Nullable Object object",
              "startLine": 71,
              "startColumn": 39,
              "endLine": 71,
              "endColumn": 62,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/Cast.java",
              "type": "Object",
              "code": "\n    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})\n    @Nullable\n    public static <T> T uncheckedCast(@Nullable Object object) {\n        return (T) object;\n    }\n"
            },
            {
              "step": 57,
              "variableName": "(T) object",
              "startLine": 72,
              "startColumn": 16,
              "endLine": 72,
              "endColumn": 26,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/Cast.java",
              "type": "Object",
              "code": "    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})\n    @Nullable\n    public static <T> T uncheckedCast(@Nullable Object object) {\n        return (T) object;\n    }\n\n    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})"
            },
            {
              "step": 58,
              "variableName": "Cast.uncheckedCast(value)",
              "startLine": 153,
              "startColumn": 16,
              "endLine": 153,
              "endColumn": 41,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/api/internal/attributes/DefaultImmutableAttributesContainer.java",
              "type": "Object",
              "code": "            value = isolatable.coerce(key.getType());\n        }\n\n        return Cast.uncheckedCast(value);\n    }\n\n    /**"
            },
            {
              "step": 59,
              "variableName": "attributes.getAttribute(ProjectInternal.STATUS_ATTRIBUTE)",
              "startLine": 48,
              "startColumn": 16,
              "endLine": 48,
              "endColumn": 73,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ivyservice/ivyresolve/UserProvidedMetadata.java",
              "type": "String",
              "code": "\n    @Override\n    public String getStatus() {\n        return attributes.getAttribute(ProjectInternal.STATUS_ATTRIBUTE);\n    }\n\n    @Override"
            },
            {
              "step": 60,
              "variableName": "updatedMetadata.getStatus()",
              "startLine": 206,
              "startColumn": 162,
              "endLine": 206,
              "endColumn": 189,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/dsl/DefaultComponentMetadataProcessor.java",
              "type": "String",
              "code": "            updatedMetadata = details.asImmutable();\n        }\n        if (!updatedMetadata.getStatusScheme().contains(updatedMetadata.getStatus())) {\n            throw new ModuleVersionResolveException(updatedMetadata.getId(), () -> String.format(\"Unexpected status '%s' specified for %s. Expected one of: %s\", updatedMetadata.getStatus(), updatedMetadata.getId().toString(), updatedMetadata.getStatusScheme()));\n        }\n        return updatedMetadata;\n    }"
            },
            {
              "step": 61,
              "variableName": "String.format(\"Unexpected status '%s' specified for %s. Expected one of: %s\", updatedMetadata.getStatus(), updatedMetadata.getId().toString(), updatedMetadata.getStatusScheme())",
              "startLine": 206,
              "startColumn": 84,
              "endLine": 206,
              "endColumn": 261,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/dsl/DefaultComponentMetadataProcessor.java",
              "type": "Object[] [[]] : String",
              "code": "            updatedMetadata = details.asImmutable();\n        }\n        if (!updatedMetadata.getStatusScheme().contains(updatedMetadata.getStatus())) {\n            throw new ModuleVersionResolveException(updatedMetadata.getId(), () -> String.format(\"Unexpected status '%s' specified for %s. Expected one of: %s\", updatedMetadata.getStatus(), updatedMetadata.getId().toString(), updatedMetadata.getStatusScheme()));\n        }\n        return updatedMetadata;\n    }"
            },
            {
              "step": 62,
              "variableName": "String.format(\"Unexpected status '%s' specified for %s. Expected one of: %s\", updatedMetadata.getStatus(), updatedMetadata.getId().toString(), updatedMetadata.getStatusScheme())",
              "startLine": 206,
              "startColumn": 84,
              "endLine": 206,
              "endColumn": 261,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/dsl/DefaultComponentMetadataProcessor.java",
              "type": "String",
              "code": "            updatedMetadata = details.asImmutable();\n        }\n        if (!updatedMetadata.getStatusScheme().contains(updatedMetadata.getStatus())) {\n            throw new ModuleVersionResolveException(updatedMetadata.getId(), () -> String.format(\"Unexpected status '%s' specified for %s. Expected one of: %s\", updatedMetadata.getStatus(), updatedMetadata.getId().toString(), updatedMetadata.getStatusScheme()));\n        }\n        return updatedMetadata;\n    }"
            },
            {
              "step": 63,
              "variableName": "messageFactory.create()",
              "startLine": 173,
              "startColumn": 23,
              "endLine": 173,
              "endColumn": 46,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "String",
              "code": "    @Override\n    public String getMessage() {\n        if (messageFactory != null) {\n            message = messageFactory.create();\n            messageFactory = null;\n            return message;\n        }"
            },
            {
              "step": 64,
              "variableName": "message",
              "startLine": 175,
              "startColumn": 20,
              "endLine": 175,
              "endColumn": 27,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "String",
              "code": "        if (messageFactory != null) {\n            message = messageFactory.create();\n            messageFactory = null;\n            return message;\n        }\n        return message;\n    }"
            },
            {
              "step": 65,
              "variableName": "e.getMessage()",
              "startLine": 145,
              "startColumn": 37,
              "endLine": 145,
              "endColumn": 51,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/Install.java",
              "type": "String",
              "code": "            }\n        } catch (Exception e) {\n            logger.log(\"Could not fetch hash for \" + safeUri(distribution) + \".\");\n            logger.log(\"Reason: \" + e.getMessage());\n            return null;\n        }\n    }"
            },
            {
              "step": 66,
              "variableName": "\"Reason: \" + e.getMessage()",
              "startLine": 145,
              "startColumn": 24,
              "endLine": 145,
              "endColumn": 51,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/Install.java",
              "type": "String",
              "code": "            }\n        } catch (Exception e) {\n            logger.log(\"Could not fetch hash for \" + safeUri(distribution) + \".\");\n            logger.log(\"Reason: \" + e.getMessage());\n            return null;\n        }\n    }"
            },
            {
              "step": 67,
              "variableName": "String message",
              "startLine": 26,
              "startColumn": 21,
              "endLine": 26,
              "endColumn": 35,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/Logger.java",
              "type": "String",
              "code": "        this.quiet = quiet;\n    }\n\n    public void log(String message) {\n        if (!quiet) {\n            System.out.println(message);\n        }"
            },
            {
              "step": 68,
              "variableName": "message",
              "startLine": 28,
              "startColumn": 32,
              "endLine": 28,
              "endColumn": 39,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/Logger.java",
              "type": "",
              "code": "\n    public void log(String message) {\n        if (!quiet) {\n            System.out.println(message);\n        }\n    }\n"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "src",
              "startLine": 115,
              "startColumn": 13,
              "endLine": 115,
              "endColumn": 16,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "Object",
              "code": "    }\n\n    private static void appendDisplayName(Object src, StringBuilder stringBuilder) {\n        if (src instanceof Describable) {\n            Describable describable = (Describable) src;\n            stringBuilder.append(describable.getDisplayName());\n        } else {"
            },
            {
              "step": 1,
              "variableName": "src",
              "startLine": 119,
              "startColumn": 34,
              "endLine": 119,
              "endColumn": 37,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "Object",
              "code": "            Describable describable = (Describable) src;\n            stringBuilder.append(describable.getDisplayName());\n        } else {\n            stringBuilder.append(src.toString());\n        }\n    }\n"
            },
            {
              "step": 2,
              "variableName": "toString",
              "startLine": 397,
              "startColumn": 19,
              "endLine": 397,
              "endColumn": 27,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "TestFile",
              "code": "    }\n\n    @Override\n    public String toString() {\n        return getPath();\n    }\n"
            },
            {
              "step": 3,
              "variableName": "getPath()",
              "startLine": 398,
              "startColumn": 16,
              "endLine": 398,
              "endColumn": 25,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "TestFile",
              "code": "\n    @Override\n    public String toString() {\n        return getPath();\n    }\n\n    public TestFile writelns(Iterable<String> lines) {"
            },
            {
              "step": 4,
              "variableName": "getPath()",
              "startLine": 398,
              "startColumn": 16,
              "endLine": 398,
              "endColumn": 25,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "String",
              "code": "\n    @Override\n    public String toString() {\n        return getPath();\n    }\n\n    public TestFile writelns(Iterable<String> lines) {"
            },
            {
              "step": 5,
              "variableName": "src.toString()",
              "startLine": 119,
              "startColumn": 34,
              "endLine": 119,
              "endColumn": 48,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "String",
              "code": "            Describable describable = (Describable) src;\n            stringBuilder.append(describable.getDisplayName());\n        } else {\n            stringBuilder.append(src.toString());\n        }\n    }\n"
            },
            {
              "step": 6,
              "variableName": "stringBuilder",
              "startLine": 119,
              "startColumn": 13,
              "endLine": 119,
              "endColumn": 26,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "StringBuilder",
              "code": "            Describable describable = (Describable) src;\n            stringBuilder.append(describable.getDisplayName());\n        } else {\n            stringBuilder.append(src.toString());\n        }\n    }\n"
            },
            {
              "step": 7,
              "variableName": "builder",
              "startLine": 202,
              "startColumn": 38,
              "endLine": 202,
              "endColumn": 45,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "StringBuilder",
              "code": "            StringBuilder builder = new StringBuilder(48);\n            appendDisplayName(part1, builder);\n            builder.append(' ');\n            appendDisplayName(part2, builder);\n            return builder.toString();\n        }\n"
            },
            {
              "step": 8,
              "variableName": "builder",
              "startLine": 203,
              "startColumn": 20,
              "endLine": 203,
              "endColumn": 27,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "StringBuilder",
              "code": "            appendDisplayName(part1, builder);\n            builder.append(' ');\n            appendDisplayName(part2, builder);\n            return builder.toString();\n        }\n\n        @Override"
            },
            {
              "step": 9,
              "variableName": "builder.toString()",
              "startLine": 203,
              "startColumn": 20,
              "endLine": 203,
              "endColumn": 38,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "String",
              "code": "            appendDisplayName(part1, builder);\n            builder.append(' ');\n            appendDisplayName(part2, builder);\n            return builder.toString();\n        }\n\n        @Override"
            },
            {
              "step": 10,
              "variableName": "describable.getDisplayName()",
              "startLine": 313,
              "startColumn": 35,
              "endLine": 313,
              "endColumn": 63,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "String",
              "code": "        public String getDisplayName() {\n            synchronized (this) {\n                if (displayName == null) {\n                    displayName = describable.getDisplayName();\n                    if (capDisplayName != null || !(describable instanceof DisplayName)) {\n                        describable = null;\n                    }"
            },
            {
              "step": 11,
              "variableName": "displayName",
              "startLine": 318,
              "startColumn": 24,
              "endLine": 318,
              "endColumn": 35,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "String",
              "code": "                        describable = null;\n                    }\n                }\n                return displayName;\n            }\n        }\n    }"
            },
            {
              "step": 12,
              "variableName": "displayName.getDisplayName()",
              "startLine": 772,
              "startColumn": 73,
              "endLine": 772,
              "endColumn": 101,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/configurations/DefaultConfiguration.java",
              "type": "String",
              "code": "                try {\n                    results = resolver.resolveGraph(DefaultConfiguration.this);\n                } catch (Exception e) {\n                    throw exceptionMapper.mapFailure(e, \"dependencies\", displayName.getDisplayName());\n                }\n\n                // Make the new state visible in case a dependency resolution listener queries the result, which requires the new state"
            },
            {
              "step": 13,
              "variableName": "String contextDisplayName",
              "startLine": 68,
              "startColumn": 77,
              "endLine": 68,
              "endColumn": 102,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "String",
              "code": "        return mapFailure(failure, type, displayName);\n    }\n\n    public TypedResolveException mapFailure(Throwable failure, String type, String contextDisplayName) {\n        if (!(failure instanceof TypedResolveException)) {\n            return new TypedResolveException(\n                type,"
            },
            {
              "step": 14,
              "variableName": "contextDisplayName",
              "startLine": 72,
              "startColumn": 17,
              "endLine": 72,
              "endColumn": 35,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "String",
              "code": "        if (!(failure instanceof TypedResolveException)) {\n            return new TypedResolveException(\n                type,\n                contextDisplayName,\n                ImmutableList.of(mapRepositoryOverrideFailure(contextDisplayName, failure))\n            );\n        }"
            },
            {
              "step": 15,
              "variableName": "new TypedResolveException(...) : TypedResolveException",
              "startLine": 70,
              "startColumn": 20,
              "endLine": 74,
              "endColumn": 14,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "TypedResolveException",
              "code": "\n    public TypedResolveException mapFailure(Throwable failure, String type, String contextDisplayName) {\n        if (!(failure instanceof TypedResolveException)) {\n            return new TypedResolveException(\n                type,\n                contextDisplayName,\n                ImmutableList.of(mapRepositoryOverrideFailure(contextDisplayName, failure))"
            },
            {
              "step": 16,
              "variableName": "exceptionMapper.mapFailure(e, \"dependencies\", displayName.getDisplayName())",
              "startLine": 772,
              "startColumn": 27,
              "endLine": 772,
              "endColumn": 102,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/configurations/DefaultConfiguration.java",
              "type": "TypedResolveException",
              "code": "                try {\n                    results = resolver.resolveGraph(DefaultConfiguration.this);\n                } catch (Exception e) {\n                    throw exceptionMapper.mapFailure(e, \"dependencies\", displayName.getDisplayName());\n                }\n\n                // Make the new state visible in case a dependency resolution listener queries the result, which requires the new state"
            },
            {
              "step": 17,
              "variableName": "e",
              "startLine": 772,
              "startColumn": 54,
              "endLine": 772,
              "endColumn": 55,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/configurations/DefaultConfiguration.java",
              "type": "Exception",
              "code": "                try {\n                    results = resolver.resolveGraph(DefaultConfiguration.this);\n                } catch (Exception e) {\n                    throw exceptionMapper.mapFailure(e, \"dependencies\", displayName.getDisplayName());\n                }\n\n                // Make the new state visible in case a dependency resolution listener queries the result, which requires the new state"
            },
            {
              "step": 18,
              "variableName": "Throwable failure",
              "startLine": 68,
              "startColumn": 45,
              "endLine": 68,
              "endColumn": 62,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Throwable",
              "code": "        return mapFailure(failure, type, displayName);\n    }\n\n    public TypedResolveException mapFailure(Throwable failure, String type, String contextDisplayName) {\n        if (!(failure instanceof TypedResolveException)) {\n            return new TypedResolveException(\n                type,"
            },
            {
              "step": 19,
              "variableName": "failure",
              "startLine": 73,
              "startColumn": 83,
              "endLine": 73,
              "endColumn": 90,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Throwable",
              "code": "            return new TypedResolveException(\n                type,\n                contextDisplayName,\n                ImmutableList.of(mapRepositoryOverrideFailure(contextDisplayName, failure))\n            );\n        }\n"
            },
            {
              "step": 20,
              "variableName": "Throwable failure",
              "startLine": 94,
              "startColumn": 78,
              "endLine": 94,
              "endColumn": 95,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Throwable",
              "code": "\n    // TODO: We should handle this exception at the source instead of using instanceof to detect it after it is thrown.\n    //       We should try to avoid catching and analyzing runtime exceptions\n    public Throwable mapRepositoryOverrideFailure(String contextDisplayName, Throwable failure) {\n        if (!(failure instanceof ModuleVersionNotFoundException) || !settingsRepositoriesIgnored()) {\n            return failure;\n        }"
            },
            {
              "step": 21,
              "variableName": "failure",
              "startLine": 108,
              "startColumn": 35,
              "endLine": 108,
              "endColumn": 42,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Throwable",
              "code": "        return new TypedResolveException(\n            \"dependencies\",\n            contextDisplayName,\n            Collections.singleton(failure),\n            resolutions\n        );\n    }"
            },
            {
              "step": 22,
              "variableName": "Collections.singleton(failure)",
              "startLine": 108,
              "startColumn": 13,
              "endLine": 108,
              "endColumn": 43,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Set [<element>] : Throwable",
              "code": "        return new TypedResolveException(\n            \"dependencies\",\n            contextDisplayName,\n            Collections.singleton(failure),\n            resolutions\n        );\n    }"
            },
            {
              "step": 23,
              "variableName": "Collections.singleton(failure)",
              "startLine": 108,
              "startColumn": 13,
              "endLine": 108,
              "endColumn": 43,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Set",
              "code": "        return new TypedResolveException(\n            \"dependencies\",\n            contextDisplayName,\n            Collections.singleton(failure),\n            resolutions\n        );\n    }"
            },
            {
              "step": 24,
              "variableName": "Iterable<? extends Throwable> failures",
              "startLine": 42,
              "startColumn": 67,
              "endLine": 42,
              "endColumn": 105,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ivyservice/TypedResolveException.java",
              "type": "Set",
              "code": "    /**\n     * Creates a new instance with resolutions.\n     */\n    public TypedResolveException(String type, String displayName, Iterable<? extends Throwable> failures, List<String> resolutions) {\n        super(buildMessage(type, displayName), failures, false);\n        this.type = type;\n        this.resolutions = ImmutableList.copyOf(resolutions);"
            },
            {
              "step": 25,
              "variableName": "failures",
              "startLine": 43,
              "startColumn": 48,
              "endLine": 43,
              "endColumn": 56,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ivyservice/TypedResolveException.java",
              "type": "Set",
              "code": "     * Creates a new instance with resolutions.\n     */\n    public TypedResolveException(String type, String displayName, Iterable<? extends Throwable> failures, List<String> resolutions) {\n        super(buildMessage(type, displayName), failures, false);\n        this.type = type;\n        this.resolutions = ImmutableList.copyOf(resolutions);\n    }"
            },
            {
              "step": 26,
              "variableName": "Iterable<? extends Throwable> causes",
              "startLine": 77,
              "startColumn": 48,
              "endLine": 77,
              "endColumn": 84,
              "uri": "gradle-8.14.0/subprojects/core-api/src/main/java/org/gradle/api/artifacts/ResolveException.java",
              "type": "Set",
              "code": "     * @since 8.9\n     */\n    @Incubating\n    protected ResolveException(String message, Iterable<? extends Throwable> causes, @SuppressWarnings(\"unused\") boolean dummy) {\n        super(message, causes);\n    }\n}"
            },
            {
              "step": 27,
              "variableName": "causes",
              "startLine": 78,
              "startColumn": 24,
              "endLine": 78,
              "endColumn": 30,
              "uri": "gradle-8.14.0/subprojects/core-api/src/main/java/org/gradle/api/artifacts/ResolveException.java",
              "type": "Set",
              "code": "     */\n    @Incubating\n    protected ResolveException(String message, Iterable<? extends Throwable> causes, @SuppressWarnings(\"unused\") boolean dummy) {\n        super(message, causes);\n    }\n}\n"
            },
            {
              "step": 28,
              "variableName": "Iterable<? extends Throwable> causes",
              "startLine": 47,
              "startColumn": 55,
              "endLine": 47,
              "endColumn": 91,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "Set",
              "code": "        this.causes.addAll(Arrays.asList(causes));\n    }\n\n    public DefaultMultiCauseException(String message, Iterable<? extends Throwable> causes) {\n        super(message);\n        this.message = message;\n        initCauses(causes);"
            },
            {
              "step": 29,
              "variableName": "causes",
              "startLine": 50,
              "startColumn": 20,
              "endLine": 50,
              "endColumn": 26,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "Set",
              "code": "    public DefaultMultiCauseException(String message, Iterable<? extends Throwable> causes) {\n        super(message);\n        this.message = message;\n        initCauses(causes);\n    }\n\n    public DefaultMultiCauseException(Factory<String> messageFactory) {"
            },
            {
              "step": 30,
              "variableName": "Iterable<? extends Throwable> causes",
              "startLine": 112,
              "startColumn": 28,
              "endLine": 112,
              "endColumn": 64,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "Iterable",
              "code": "        return null;\n    }\n\n    public void initCauses(Iterable<? extends Throwable> causes) {\n        this.causes.clear();\n        for (Throwable cause : causes) {\n            this.causes.add(cause);"
            },
            {
              "step": 31,
              "variableName": "cause",
              "startLine": 115,
              "startColumn": 29,
              "endLine": 115,
              "endColumn": 34,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "Throwable",
              "code": "    public void initCauses(Iterable<? extends Throwable> causes) {\n        this.causes.clear();\n        for (Throwable cause : causes) {\n            this.causes.add(cause);\n        }\n    }\n"
            },
            {
              "step": 32,
              "variableName": "this.causes",
              "startLine": 115,
              "startColumn": 13,
              "endLine": 115,
              "endColumn": 24,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "CopyOnWriteArrayList [<element>] : Throwable",
              "code": "    public void initCauses(Iterable<? extends Throwable> causes) {\n        this.causes.clear();\n        for (Throwable cause : causes) {\n            this.causes.add(cause);\n        }\n    }\n"
            },
            {
              "step": 33,
              "variableName": "this",
              "startLine": 115,
              "startColumn": 13,
              "endLine": 115,
              "endColumn": 17,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "DefaultMultiCauseException [causes, <element>] : Throwable",
              "code": "    public void initCauses(Iterable<? extends Throwable> causes) {\n        this.causes.clear();\n        for (Throwable cause : causes) {\n            this.causes.add(cause);\n        }\n    }\n"
            },
            {
              "step": 34,
              "variableName": "projectConfigurationException",
              "startLine": 57,
              "startColumn": 17,
              "endLine": 57,
              "endColumn": 46,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/DefaultExceptionAnalyser.java",
              "type": "ProjectConfigurationException [causes, <element>] : Throwable",
              "code": "                }\n            }\n            if (!additionalFailures.isEmpty()) {\n                projectConfigurationException.initCauses(additionalFailures);\n                failures.add(transform(projectConfigurationException));\n            }\n        } else if (exception instanceof ServiceCreationException) {"
            },
            {
              "step": 35,
              "variableName": "projectConfigurationException",
              "startLine": 58,
              "startColumn": 40,
              "endLine": 58,
              "endColumn": 69,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/DefaultExceptionAnalyser.java",
              "type": "ProjectConfigurationException [causes, <element>] : Throwable",
              "code": "            }\n            if (!additionalFailures.isEmpty()) {\n                projectConfigurationException.initCauses(additionalFailures);\n                failures.add(transform(projectConfigurationException));\n            }\n        } else if (exception instanceof ServiceCreationException) {\n            failures.add(transform(new InitializationException(exception)));"
            },
            {
              "step": 36,
              "variableName": "transform(projectConfigurationException)",
              "startLine": 58,
              "startColumn": 30,
              "endLine": 58,
              "endColumn": 70,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/DefaultExceptionAnalyser.java",
              "type": "LocationAwareException",
              "code": "            }\n            if (!additionalFailures.isEmpty()) {\n                projectConfigurationException.initCauses(additionalFailures);\n                failures.add(transform(projectConfigurationException));\n            }\n        } else if (exception instanceof ServiceCreationException) {\n            failures.add(transform(new InitializationException(exception)));"
            },
            {
              "step": 37,
              "variableName": "failures",
              "startLine": 58,
              "startColumn": 17,
              "endLine": 58,
              "endColumn": 25,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/DefaultExceptionAnalyser.java",
              "type": "Collection [<element>] : LocationAwareException",
              "code": "            }\n            if (!additionalFailures.isEmpty()) {\n                projectConfigurationException.initCauses(additionalFailures);\n                failures.add(transform(projectConfigurationException));\n            }\n        } else if (exception instanceof ServiceCreationException) {\n            failures.add(transform(new InitializationException(exception)));"
            },
            {
              "step": 38,
              "variableName": "result",
              "startLine": 53,
              "startColumn": 54,
              "endLine": 53,
              "endColumn": 60,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/MultipleBuildFailuresExceptionAnalyser.java",
              "type": "ArrayList [<element>] : LocationAwareException",
              "code": "        for (Throwable failure : failures) {\n            if (failure instanceof MultipleBuildFailures) {\n                for (Throwable cause : ((MultipleBuildFailures) failure).getCauses()) {\n                    collector.collectFailures(cause, result);\n                }\n            } else {\n                collector.collectFailures(failure, result);"
            },
            {
              "step": 39,
              "variableName": "result",
              "startLine": 60,
              "startColumn": 39,
              "endLine": 60,
              "endColumn": 45,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/MultipleBuildFailuresExceptionAnalyser.java",
              "type": "ArrayList [<element>] : LocationAwareException",
              "code": "            }\n        }\n        if (result.size() == 1 && result.get(0) instanceof RuntimeException) {\n            return (RuntimeException) result.get(0);\n        } else {\n            return new MultipleBuildFailures(result);\n        }"
            },
            {
              "step": 40,
              "variableName": "result.get(0)",
              "startLine": 60,
              "startColumn": 39,
              "endLine": 60,
              "endColumn": 52,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/MultipleBuildFailuresExceptionAnalyser.java",
              "type": "LocationAwareException",
              "code": "            }\n        }\n        if (result.size() == 1 && result.get(0) instanceof RuntimeException) {\n            return (RuntimeException) result.get(0);\n        } else {\n            return new MultipleBuildFailures(result);\n        }"
            },
            {
              "step": 41,
              "variableName": "(RuntimeException) result.get(0)",
              "startLine": 60,
              "startColumn": 20,
              "endLine": 60,
              "endColumn": 52,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/MultipleBuildFailuresExceptionAnalyser.java",
              "type": "LocationAwareException",
              "code": "            }\n        }\n        if (result.size() == 1 && result.get(0) instanceof RuntimeException) {\n            return (RuntimeException) result.get(0);\n        } else {\n            return new MultipleBuildFailures(result);\n        }"
            },
            {
              "step": 42,
              "variableName": "exceptionAnalyser.transform(finishFailures)",
              "startLine": 72,
              "startColumn": 16,
              "endLine": 72,
              "endColumn": 59,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/internal/buildtree/DefaultBuildTreeFinishExecutor.java",
              "type": "LocationAwareException",
              "code": "            finishFailures.addAll(result.getFailures());\n        });\n\n        return exceptionAnalyser.transform(finishFailures);\n    }\n}\n"
            },
            {
              "step": 43,
              "variableName": "delegate.finishBuildTree(failures)",
              "startLine": 46,
              "startColumn": 28,
              "endLine": 46,
              "endColumn": 62,
              "uri": "gradle-8.14.0/subprojects/composite-builds/src/main/java/org/gradle/composite/internal/OperationFiringBuildTreeFinishExecutor.java",
              "type": "LocationAwareException",
              "code": "            @Override\n            public RuntimeException call(BuildOperationContext context) {\n                try {\n                    return delegate.finishBuildTree(failures);\n                } finally {\n                    context.setResult(RESULT);\n                }"
            },
            {
              "step": 44,
              "variableName": "buildOperation.call(context)",
              "startLine": 239,
              "startColumn": 21,
              "endLine": 239,
              "endColumn": 49,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/testFixtures/java/org/gradle/internal/operations/TestBuildOperationRunner.java",
              "type": "LocationAwareException",
              "code": "            TestBuildOperationContext context = new TestBuildOperationContext(record);\n            T t;\n            try {\n                t = buildOperation.call(context);\n            } catch (Throwable failure) {\n                if (record.failure == null) {\n                    record.failure = failure;"
            },
            {
              "step": 45,
              "variableName": "t",
              "startLine": 246,
              "startColumn": 20,
              "endLine": 246,
              "endColumn": 21,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/testFixtures/java/org/gradle/internal/operations/TestBuildOperationRunner.java",
              "type": "LocationAwareException",
              "code": "                }\n                throw throwAsUncheckedException(failure);\n            }\n            return t;\n        }\n\n        private <O extends BuildOperation> void execute(O buildOperation, BuildOperationWorker<O> worker) {"
            },
            {
              "step": 46,
              "variableName": "log.call(buildOperation)",
              "startLine": 51,
              "startColumn": 16,
              "endLine": 51,
              "endColumn": 40,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/testFixtures/java/org/gradle/internal/operations/TestBuildOperationRunner.java",
              "type": "LocationAwareException",
              "code": "\n    @Override\n    public <T> T call(CallableBuildOperation<T> buildOperation) {\n        return log.call(buildOperation);\n    }\n\n    @Override"
            },
            {
              "step": 47,
              "variableName": "ca",
              "startLine": 115,
              "startColumn": 5,
              "endLine": 121,
              "endColumn": 7,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/configurationcache/ConfigurationCacheBuildOperations.kt",
              "type": "LocationAwareException",
              "code": "\ninternal\nfun <T : Any> BuildOperationRunner.withModelLoadOperation(block: () -> T): T =\n    call(object : CallableBuildOperation<T> {\n        override fun description(): BuildOperationDescriptor.Builder = BuildOperationDescriptor\n            .displayName(\"Load model from configuration cache\")\n            .progressDisplayName(\"Loading model from configuration cache\")"
            },
            {
              "step": 48,
              "variableName": "ca",
              "startLine": 115,
              "startColumn": 5,
              "endLine": 121,
              "endColumn": 7,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/configurationcache/ConfigurationCacheBuildOperations.kt",
              "type": "LocationAwareException",
              "code": "\ninternal\nfun <T : Any> BuildOperationRunner.withModelLoadOperation(block: () -> T): T =\n    call(object : CallableBuildOperation<T> {\n        override fun description(): BuildOperationDescriptor.Builder = BuildOperationDescriptor\n            .displayName(\"Load model from configuration cache\")\n            .progressDisplayName(\"Loading model from configuration cache\")"
            },
            {
              "step": 49,
              "variableName": "b",
              "startLine": 635,
              "startColumn": 9,
              "endLine": 641,
              "endColumn": 10,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "        // No need to record the `ClassLoaderScope` tree when loading\n        scopeRegistryListener.dispose()\n\n        buildOperationRunner.withModelLoadOperation {\n            val storeLoadResult = entryStore.useForStateLoad(StateType.Model) { stateFile: ConfigurationCacheStateFile ->\n                cacheIO.readModelFrom(stateFile)\n            }"
            },
            {
              "step": 50,
              "variableName": "block()",
              "startLine": 668,
              "startColumn": 22,
              "endLine": 668,
              "endColumn": 29,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "    private\n    inline fun <T> runAtConfigurationTime(block: () -> T): T {\n        prepareConfigurationTimeBarrier()\n        val result = block()\n        crossConfigurationTimeBarrier()\n        return result\n    }"
            },
            {
              "step": 51,
              "variableName": "result",
              "startLine": 670,
              "startColumn": 16,
              "endLine": 670,
              "endColumn": 22,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "        prepareConfigurationTimeBarrier()\n        val result = block()\n        crossConfigurationTimeBarrier()\n        return result\n    }\n\n    private"
            },
            {
              "step": 52,
              "variableName": "runAtConfigurationTime(...) : LocationAwareException",
              "startLine": 631,
              "startColumn": 28,
              "endLine": 642,
              "endColumn": 6,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "    data class LoadResultMetadata(val originInvocationId: String? = null)\n\n    private\n    fun loadModel(): Any = runAtConfigurationTime {\n        // No need to record the `ClassLoaderScope` tree when loading\n        scopeRegistryListener.dispose()\n"
            },
            {
              "step": 53,
              "variableName": "loadModel()",
              "startLine": 268,
              "startColumn": 20,
              "endLine": 268,
              "endColumn": 31,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "    override fun <T : Any> loadOrCreateModel(creator: () -> T): T {\n        if (isLoaded) {\n            runLoadedSideEffects()\n            return loadModel().uncheckedCast()\n        }\n\n        return runWorkThatContributesToCacheEntry {"
            },
            {
              "step": 54,
              "variableName": "Any",
              "startLine": 22,
              "startColumn": 15,
              "endLine": 22,
              "endColumn": 18,
              "uri": "gradle-8.14.0/platforms/core-configuration/stdlib-kotlin-extensions/src/main/kotlin/org/gradle/internal/extensions/stdlib/CastExtensions.kt",
              "type": "Object",
              "code": "import org.gradle.internal.Cast\n\n\nfun <T : Any> Any.uncheckedCast(): T =\n    Cast.uncheckedNonnullCast(this)\n"
            },
            {
              "step": 55,
              "variableName": "this",
              "startLine": 23,
              "startColumn": 31,
              "endLine": 23,
              "endColumn": 35,
              "uri": "gradle-8.14.0/platforms/core-configuration/stdlib-kotlin-extensions/src/main/kotlin/org/gradle/internal/extensions/stdlib/CastExtensions.kt",
              "type": "Object",
              "code": "\n\nfun <T : Any> Any.uncheckedCast(): T =\n    Cast.uncheckedNonnullCast(this)\n"
            },
            {
              "step": 56,
              "variableName": "Object object",
              "startLine": 76,
              "startColumn": 46,
              "endLine": 76,
              "endColumn": 59,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/Cast.java",
              "type": "Object",
              "code": "    }\n\n    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})\n    public static <T> T uncheckedNonnullCast(Object object) {\n        return (T) object;\n    }\n}"
            },
            {
              "step": 57,
              "variableName": "(T) object",
              "startLine": 77,
              "startColumn": 16,
              "endLine": 77,
              "endColumn": 26,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/Cast.java",
              "type": "Object",
              "code": "\n    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})\n    public static <T> T uncheckedNonnullCast(Object object) {\n        return (T) object;\n    }\n}\n"
            },
            {
              "step": 58,
              "variableName": "Cast.uncheckedNonnullCast(collectionType)",
              "startLine": 223,
              "startColumn": 16,
              "endLine": 223,
              "endColumn": 57,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/api/internal/provider/AbstractCollectionProperty.java",
              "type": "Class",
              "code": "    @Override\n    @Nonnull\n    public Class<C> getType() {\n        return Cast.uncheckedNonnullCast(collectionType);\n    }\n\n    @Override"
            },
            {
              "step": 59,
              "variableName": "provider.getType()",
              "startLine": 41,
              "startColumn": 35,
              "endLine": 41,
              "endColumn": 53,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/api/internal/provider/OrElseFixedValueProvider.java",
              "type": "Class",
              "code": "    @Nullable\n    @Override\n    public Class<T> getType() {\n        return Cast.uncheckedCast(provider.getType());\n    }\n\n    @Override"
            },
            {
              "step": 60,
              "variableName": "@Nullable Object object",
              "startLine": 71,
              "startColumn": 39,
              "endLine": 71,
              "endColumn": 62,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/Cast.java",
              "type": "Object",
              "code": "\n    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})\n    @Nullable\n    public static <T> T uncheckedCast(@Nullable Object object) {\n        return (T) object;\n    }\n"
            },
            {
              "step": 61,
              "variableName": "(T) object",
              "startLine": 72,
              "startColumn": 16,
              "endLine": 72,
              "endColumn": 26,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/Cast.java",
              "type": "Object",
              "code": "    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})\n    @Nullable\n    public static <T> T uncheckedCast(@Nullable Object object) {\n        return (T) object;\n    }\n\n    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})"
            },
            {
              "step": 62,
              "variableName": "Cast.uncheckedCast(value)",
              "startLine": 153,
              "startColumn": 16,
              "endLine": 153,
              "endColumn": 41,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/api/internal/attributes/DefaultImmutableAttributesContainer.java",
              "type": "Object",
              "code": "            value = isolatable.coerce(key.getType());\n        }\n\n        return Cast.uncheckedCast(value);\n    }\n\n    /**"
            },
            {
              "step": 63,
              "variableName": "attributes.getAttribute(ProjectInternal.STATUS_ATTRIBUTE)",
              "startLine": 48,
              "startColumn": 16,
              "endLine": 48,
              "endColumn": 73,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ivyservice/ivyresolve/UserProvidedMetadata.java",
              "type": "String",
              "code": "\n    @Override\n    public String getStatus() {\n        return attributes.getAttribute(ProjectInternal.STATUS_ATTRIBUTE);\n    }\n\n    @Override"
            },
            {
              "step": 64,
              "variableName": "updatedMetadata.getStatus()",
              "startLine": 206,
              "startColumn": 162,
              "endLine": 206,
              "endColumn": 189,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/dsl/DefaultComponentMetadataProcessor.java",
              "type": "String",
              "code": "            updatedMetadata = details.asImmutable();\n        }\n        if (!updatedMetadata.getStatusScheme().contains(updatedMetadata.getStatus())) {\n            throw new ModuleVersionResolveException(updatedMetadata.getId(), () -> String.format(\"Unexpected status '%s' specified for %s. Expected one of: %s\", updatedMetadata.getStatus(), updatedMetadata.getId().toString(), updatedMetadata.getStatusScheme()));\n        }\n        return updatedMetadata;\n    }"
            },
            {
              "step": 65,
              "variableName": "String.format(\"Unexpected status '%s' specified for %s. Expected one of: %s\", updatedMetadata.getStatus(), updatedMetadata.getId().toString(), updatedMetadata.getStatusScheme())",
              "startLine": 206,
              "startColumn": 84,
              "endLine": 206,
              "endColumn": 261,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/dsl/DefaultComponentMetadataProcessor.java",
              "type": "Object[] [[]] : String",
              "code": "            updatedMetadata = details.asImmutable();\n        }\n        if (!updatedMetadata.getStatusScheme().contains(updatedMetadata.getStatus())) {\n            throw new ModuleVersionResolveException(updatedMetadata.getId(), () -> String.format(\"Unexpected status '%s' specified for %s. Expected one of: %s\", updatedMetadata.getStatus(), updatedMetadata.getId().toString(), updatedMetadata.getStatusScheme()));\n        }\n        return updatedMetadata;\n    }"
            },
            {
              "step": 66,
              "variableName": "String.format(\"Unexpected status '%s' specified for %s. Expected one of: %s\", updatedMetadata.getStatus(), updatedMetadata.getId().toString(), updatedMetadata.getStatusScheme())",
              "startLine": 206,
              "startColumn": 84,
              "endLine": 206,
              "endColumn": 261,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/dsl/DefaultComponentMetadataProcessor.java",
              "type": "String",
              "code": "            updatedMetadata = details.asImmutable();\n        }\n        if (!updatedMetadata.getStatusScheme().contains(updatedMetadata.getStatus())) {\n            throw new ModuleVersionResolveException(updatedMetadata.getId(), () -> String.format(\"Unexpected status '%s' specified for %s. Expected one of: %s\", updatedMetadata.getStatus(), updatedMetadata.getId().toString(), updatedMetadata.getStatusScheme()));\n        }\n        return updatedMetadata;\n    }"
            },
            {
              "step": 67,
              "variableName": "messageFactory.create()",
              "startLine": 173,
              "startColumn": 23,
              "endLine": 173,
              "endColumn": 46,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "String",
              "code": "    @Override\n    public String getMessage() {\n        if (messageFactory != null) {\n            message = messageFactory.create();\n            messageFactory = null;\n            return message;\n        }"
            },
            {
              "step": 68,
              "variableName": "message",
              "startLine": 175,
              "startColumn": 20,
              "endLine": 175,
              "endColumn": 27,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "String",
              "code": "        if (messageFactory != null) {\n            message = messageFactory.create();\n            messageFactory = null;\n            return message;\n        }\n        return message;\n    }"
            },
            {
              "step": 69,
              "variableName": "e.getMessage()",
              "startLine": 145,
              "startColumn": 37,
              "endLine": 145,
              "endColumn": 51,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/Install.java",
              "type": "String",
              "code": "            }\n        } catch (Exception e) {\n            logger.log(\"Could not fetch hash for \" + safeUri(distribution) + \".\");\n            logger.log(\"Reason: \" + e.getMessage());\n            return null;\n        }\n    }"
            },
            {
              "step": 70,
              "variableName": "\"Reason: \" + e.getMessage()",
              "startLine": 145,
              "startColumn": 24,
              "endLine": 145,
              "endColumn": 51,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/Install.java",
              "type": "String",
              "code": "            }\n        } catch (Exception e) {\n            logger.log(\"Could not fetch hash for \" + safeUri(distribution) + \".\");\n            logger.log(\"Reason: \" + e.getMessage());\n            return null;\n        }\n    }"
            },
            {
              "step": 71,
              "variableName": "String message",
              "startLine": 26,
              "startColumn": 21,
              "endLine": 26,
              "endColumn": 35,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/Logger.java",
              "type": "String",
              "code": "        this.quiet = quiet;\n    }\n\n    public void log(String message) {\n        if (!quiet) {\n            System.out.println(message);\n        }"
            },
            {
              "step": 72,
              "variableName": "message",
              "startLine": 28,
              "startColumn": 32,
              "endLine": 28,
              "endColumn": 39,
              "uri": "gradle-8.14.0/platforms/core-runtime/wrapper-shared/src/main/java/org/gradle/wrapper/Logger.java",
              "type": "",
              "code": "\n    public void log(String message) {\n        if (!quiet) {\n            System.out.println(message);\n        }\n    }\n"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 8,
      "fileName": "BuildScriptBuilder.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "source",
              "startLine": 44,
              "startColumn": 25,
              "endLine": 44,
              "endColumn": 31,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/RegExpNameMapper.java",
              "type": "String",
              "code": "        } else {\n            matcher.reset(source);\n        }\n        String result = source;\n        if (matcher.find()) {\n            result = matcher.replaceFirst(replacement);\n        }"
            },
            {
              "step": 1,
              "variableName": "result",
              "startLine": 48,
              "startColumn": 16,
              "endLine": 48,
              "endColumn": 22,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/RegExpNameMapper.java",
              "type": "String",
              "code": "        if (matcher.find()) {\n            result = matcher.replaceFirst(replacement);\n        }\n        return result;\n    }\n}\n"
            },
            {
              "step": 2,
              "variableName": "transformer.transform(value)",
              "startLine": 37,
              "startColumn": 31,
              "endLine": 37,
              "endColumn": 59,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/ChainingTransformer.java",
              "type": "String",
              "code": "    public T transform(T original) {\n        T value = original;\n        for (Transformer<T, T> transformer : transformers) {\n            value = type.cast(transformer.transform(value));\n        }\n        return value;\n    }"
            },
            {
              "step": 3,
              "variableName": "type.cast(transformer.transform(value))",
              "startLine": 37,
              "startColumn": 21,
              "endLine": 37,
              "endColumn": 60,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/ChainingTransformer.java",
              "type": "String",
              "code": "    public T transform(T original) {\n        T value = original;\n        for (Transformer<T, T> transformer : transformers) {\n            value = type.cast(transformer.transform(value));\n        }\n        return value;\n    }"
            },
            {
              "step": 4,
              "variableName": "value",
              "startLine": 39,
              "startColumn": 16,
              "endLine": 39,
              "endColumn": 21,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/ChainingTransformer.java",
              "type": "String",
              "code": "        for (Transformer<T, T> transformer : transformers) {\n            value = type.cast(transformer.transform(value));\n        }\n        return value;\n    }\n\n    public void add(Transformer<T, T> transformer) {"
            },
            {
              "step": 5,
              "variableName": "describer.transform(this)",
              "startLine": 163,
              "startColumn": 16,
              "endLine": 163,
              "endColumn": 41,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/repositories/DefaultMavenArtifactRepository.java",
              "type": "String",
              "code": "\n    @Override\n    public String getDisplayName() {\n        return describer.transform(this);\n    }\n\n    @Override"
            },
            {
              "step": 6,
              "variableName": "describable.getDisplayName()",
              "startLine": 313,
              "startColumn": 35,
              "endLine": 313,
              "endColumn": 63,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "String",
              "code": "        public String getDisplayName() {\n            synchronized (this) {\n                if (displayName == null) {\n                    displayName = describable.getDisplayName();\n                    if (capDisplayName != null || !(describable instanceof DisplayName)) {\n                        describable = null;\n                    }"
            },
            {
              "step": 7,
              "variableName": "displayName",
              "startLine": 318,
              "startColumn": 24,
              "endLine": 318,
              "endColumn": 35,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "String",
              "code": "                        describable = null;\n                    }\n                }\n                return displayName;\n            }\n        }\n    }"
            },
            {
              "step": 8,
              "variableName": "displayName.getDisplayName()",
              "startLine": 772,
              "startColumn": 73,
              "endLine": 772,
              "endColumn": 101,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/configurations/DefaultConfiguration.java",
              "type": "String",
              "code": "                try {\n                    results = resolver.resolveGraph(DefaultConfiguration.this);\n                } catch (Exception e) {\n                    throw exceptionMapper.mapFailure(e, \"dependencies\", displayName.getDisplayName());\n                }\n\n                // Make the new state visible in case a dependency resolution listener queries the result, which requires the new state"
            },
            {
              "step": 9,
              "variableName": "String contextDisplayName",
              "startLine": 68,
              "startColumn": 77,
              "endLine": 68,
              "endColumn": 102,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "String",
              "code": "        return mapFailure(failure, type, displayName);\n    }\n\n    public TypedResolveException mapFailure(Throwable failure, String type, String contextDisplayName) {\n        if (!(failure instanceof TypedResolveException)) {\n            return new TypedResolveException(\n                type,"
            },
            {
              "step": 10,
              "variableName": "contextDisplayName",
              "startLine": 72,
              "startColumn": 17,
              "endLine": 72,
              "endColumn": 35,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "String",
              "code": "        if (!(failure instanceof TypedResolveException)) {\n            return new TypedResolveException(\n                type,\n                contextDisplayName,\n                ImmutableList.of(mapRepositoryOverrideFailure(contextDisplayName, failure))\n            );\n        }"
            },
            {
              "step": 11,
              "variableName": "new TypedResolveException(...) : TypedResolveException",
              "startLine": 70,
              "startColumn": 20,
              "endLine": 74,
              "endColumn": 14,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "TypedResolveException",
              "code": "\n    public TypedResolveException mapFailure(Throwable failure, String type, String contextDisplayName) {\n        if (!(failure instanceof TypedResolveException)) {\n            return new TypedResolveException(\n                type,\n                contextDisplayName,\n                ImmutableList.of(mapRepositoryOverrideFailure(contextDisplayName, failure))"
            },
            {
              "step": 12,
              "variableName": "exceptionMapper.mapFailure(e, \"dependencies\", displayName.getDisplayName())",
              "startLine": 772,
              "startColumn": 27,
              "endLine": 772,
              "endColumn": 102,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/configurations/DefaultConfiguration.java",
              "type": "TypedResolveException",
              "code": "                try {\n                    results = resolver.resolveGraph(DefaultConfiguration.this);\n                } catch (Exception e) {\n                    throw exceptionMapper.mapFailure(e, \"dependencies\", displayName.getDisplayName());\n                }\n\n                // Make the new state visible in case a dependency resolution listener queries the result, which requires the new state"
            },
            {
              "step": 13,
              "variableName": "e",
              "startLine": 772,
              "startColumn": 54,
              "endLine": 772,
              "endColumn": 55,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/configurations/DefaultConfiguration.java",
              "type": "Exception",
              "code": "                try {\n                    results = resolver.resolveGraph(DefaultConfiguration.this);\n                } catch (Exception e) {\n                    throw exceptionMapper.mapFailure(e, \"dependencies\", displayName.getDisplayName());\n                }\n\n                // Make the new state visible in case a dependency resolution listener queries the result, which requires the new state"
            },
            {
              "step": 14,
              "variableName": "Throwable failure",
              "startLine": 68,
              "startColumn": 45,
              "endLine": 68,
              "endColumn": 62,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Throwable",
              "code": "        return mapFailure(failure, type, displayName);\n    }\n\n    public TypedResolveException mapFailure(Throwable failure, String type, String contextDisplayName) {\n        if (!(failure instanceof TypedResolveException)) {\n            return new TypedResolveException(\n                type,"
            },
            {
              "step": 15,
              "variableName": "failure",
              "startLine": 73,
              "startColumn": 83,
              "endLine": 73,
              "endColumn": 90,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Throwable",
              "code": "            return new TypedResolveException(\n                type,\n                contextDisplayName,\n                ImmutableList.of(mapRepositoryOverrideFailure(contextDisplayName, failure))\n            );\n        }\n"
            },
            {
              "step": 16,
              "variableName": "Throwable failure",
              "startLine": 94,
              "startColumn": 78,
              "endLine": 94,
              "endColumn": 95,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Throwable",
              "code": "\n    // TODO: We should handle this exception at the source instead of using instanceof to detect it after it is thrown.\n    //       We should try to avoid catching and analyzing runtime exceptions\n    public Throwable mapRepositoryOverrideFailure(String contextDisplayName, Throwable failure) {\n        if (!(failure instanceof ModuleVersionNotFoundException) || !settingsRepositoriesIgnored()) {\n            return failure;\n        }"
            },
            {
              "step": 17,
              "variableName": "failure",
              "startLine": 108,
              "startColumn": 35,
              "endLine": 108,
              "endColumn": 42,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Throwable",
              "code": "        return new TypedResolveException(\n            \"dependencies\",\n            contextDisplayName,\n            Collections.singleton(failure),\n            resolutions\n        );\n    }"
            },
            {
              "step": 18,
              "variableName": "Collections.singleton(failure)",
              "startLine": 108,
              "startColumn": 13,
              "endLine": 108,
              "endColumn": 43,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Set [<element>] : Throwable",
              "code": "        return new TypedResolveException(\n            \"dependencies\",\n            contextDisplayName,\n            Collections.singleton(failure),\n            resolutions\n        );\n    }"
            },
            {
              "step": 19,
              "variableName": "Collections.singleton(failure)",
              "startLine": 108,
              "startColumn": 13,
              "endLine": 108,
              "endColumn": 43,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Set",
              "code": "        return new TypedResolveException(\n            \"dependencies\",\n            contextDisplayName,\n            Collections.singleton(failure),\n            resolutions\n        );\n    }"
            },
            {
              "step": 20,
              "variableName": "Iterable<? extends Throwable> failures",
              "startLine": 42,
              "startColumn": 67,
              "endLine": 42,
              "endColumn": 105,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ivyservice/TypedResolveException.java",
              "type": "Set",
              "code": "    /**\n     * Creates a new instance with resolutions.\n     */\n    public TypedResolveException(String type, String displayName, Iterable<? extends Throwable> failures, List<String> resolutions) {\n        super(buildMessage(type, displayName), failures, false);\n        this.type = type;\n        this.resolutions = ImmutableList.copyOf(resolutions);"
            },
            {
              "step": 21,
              "variableName": "failures",
              "startLine": 43,
              "startColumn": 48,
              "endLine": 43,
              "endColumn": 56,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ivyservice/TypedResolveException.java",
              "type": "Set",
              "code": "     * Creates a new instance with resolutions.\n     */\n    public TypedResolveException(String type, String displayName, Iterable<? extends Throwable> failures, List<String> resolutions) {\n        super(buildMessage(type, displayName), failures, false);\n        this.type = type;\n        this.resolutions = ImmutableList.copyOf(resolutions);\n    }"
            },
            {
              "step": 22,
              "variableName": "Iterable<? extends Throwable> causes",
              "startLine": 77,
              "startColumn": 48,
              "endLine": 77,
              "endColumn": 84,
              "uri": "gradle-8.14.0/subprojects/core-api/src/main/java/org/gradle/api/artifacts/ResolveException.java",
              "type": "Set",
              "code": "     * @since 8.9\n     */\n    @Incubating\n    protected ResolveException(String message, Iterable<? extends Throwable> causes, @SuppressWarnings(\"unused\") boolean dummy) {\n        super(message, causes);\n    }\n}"
            },
            {
              "step": 23,
              "variableName": "causes",
              "startLine": 78,
              "startColumn": 24,
              "endLine": 78,
              "endColumn": 30,
              "uri": "gradle-8.14.0/subprojects/core-api/src/main/java/org/gradle/api/artifacts/ResolveException.java",
              "type": "Set",
              "code": "     */\n    @Incubating\n    protected ResolveException(String message, Iterable<? extends Throwable> causes, @SuppressWarnings(\"unused\") boolean dummy) {\n        super(message, causes);\n    }\n}\n"
            },
            {
              "step": 24,
              "variableName": "Iterable<? extends Throwable> causes",
              "startLine": 47,
              "startColumn": 55,
              "endLine": 47,
              "endColumn": 91,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "Set",
              "code": "        this.causes.addAll(Arrays.asList(causes));\n    }\n\n    public DefaultMultiCauseException(String message, Iterable<? extends Throwable> causes) {\n        super(message);\n        this.message = message;\n        initCauses(causes);"
            },
            {
              "step": 25,
              "variableName": "causes",
              "startLine": 50,
              "startColumn": 20,
              "endLine": 50,
              "endColumn": 26,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "Set",
              "code": "    public DefaultMultiCauseException(String message, Iterable<? extends Throwable> causes) {\n        super(message);\n        this.message = message;\n        initCauses(causes);\n    }\n\n    public DefaultMultiCauseException(Factory<String> messageFactory) {"
            },
            {
              "step": 26,
              "variableName": "Iterable<? extends Throwable> causes",
              "startLine": 112,
              "startColumn": 28,
              "endLine": 112,
              "endColumn": 64,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "Iterable",
              "code": "        return null;\n    }\n\n    public void initCauses(Iterable<? extends Throwable> causes) {\n        this.causes.clear();\n        for (Throwable cause : causes) {\n            this.causes.add(cause);"
            },
            {
              "step": 27,
              "variableName": "cause",
              "startLine": 115,
              "startColumn": 29,
              "endLine": 115,
              "endColumn": 34,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "Throwable",
              "code": "    public void initCauses(Iterable<? extends Throwable> causes) {\n        this.causes.clear();\n        for (Throwable cause : causes) {\n            this.causes.add(cause);\n        }\n    }\n"
            },
            {
              "step": 28,
              "variableName": "this.causes",
              "startLine": 115,
              "startColumn": 13,
              "endLine": 115,
              "endColumn": 24,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "CopyOnWriteArrayList [<element>] : Throwable",
              "code": "    public void initCauses(Iterable<? extends Throwable> causes) {\n        this.causes.clear();\n        for (Throwable cause : causes) {\n            this.causes.add(cause);\n        }\n    }\n"
            },
            {
              "step": 29,
              "variableName": "this",
              "startLine": 115,
              "startColumn": 13,
              "endLine": 115,
              "endColumn": 17,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "DefaultMultiCauseException [causes, <element>] : Throwable",
              "code": "    public void initCauses(Iterable<? extends Throwable> causes) {\n        this.causes.clear();\n        for (Throwable cause : causes) {\n            this.causes.add(cause);\n        }\n    }\n"
            },
            {
              "step": 30,
              "variableName": "projectConfigurationException",
              "startLine": 57,
              "startColumn": 17,
              "endLine": 57,
              "endColumn": 46,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/DefaultExceptionAnalyser.java",
              "type": "ProjectConfigurationException [causes, <element>] : Throwable",
              "code": "                }\n            }\n            if (!additionalFailures.isEmpty()) {\n                projectConfigurationException.initCauses(additionalFailures);\n                failures.add(transform(projectConfigurationException));\n            }\n        } else if (exception instanceof ServiceCreationException) {"
            },
            {
              "step": 31,
              "variableName": "projectConfigurationException",
              "startLine": 58,
              "startColumn": 40,
              "endLine": 58,
              "endColumn": 69,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/DefaultExceptionAnalyser.java",
              "type": "ProjectConfigurationException [causes, <element>] : Throwable",
              "code": "            }\n            if (!additionalFailures.isEmpty()) {\n                projectConfigurationException.initCauses(additionalFailures);\n                failures.add(transform(projectConfigurationException));\n            }\n        } else if (exception instanceof ServiceCreationException) {\n            failures.add(transform(new InitializationException(exception)));"
            },
            {
              "step": 32,
              "variableName": "transform(projectConfigurationException)",
              "startLine": 58,
              "startColumn": 30,
              "endLine": 58,
              "endColumn": 70,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/DefaultExceptionAnalyser.java",
              "type": "LocationAwareException",
              "code": "            }\n            if (!additionalFailures.isEmpty()) {\n                projectConfigurationException.initCauses(additionalFailures);\n                failures.add(transform(projectConfigurationException));\n            }\n        } else if (exception instanceof ServiceCreationException) {\n            failures.add(transform(new InitializationException(exception)));"
            },
            {
              "step": 33,
              "variableName": "failures",
              "startLine": 58,
              "startColumn": 17,
              "endLine": 58,
              "endColumn": 25,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/DefaultExceptionAnalyser.java",
              "type": "Collection [<element>] : LocationAwareException",
              "code": "            }\n            if (!additionalFailures.isEmpty()) {\n                projectConfigurationException.initCauses(additionalFailures);\n                failures.add(transform(projectConfigurationException));\n            }\n        } else if (exception instanceof ServiceCreationException) {\n            failures.add(transform(new InitializationException(exception)));"
            },
            {
              "step": 34,
              "variableName": "result",
              "startLine": 53,
              "startColumn": 54,
              "endLine": 53,
              "endColumn": 60,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/MultipleBuildFailuresExceptionAnalyser.java",
              "type": "ArrayList [<element>] : LocationAwareException",
              "code": "        for (Throwable failure : failures) {\n            if (failure instanceof MultipleBuildFailures) {\n                for (Throwable cause : ((MultipleBuildFailures) failure).getCauses()) {\n                    collector.collectFailures(cause, result);\n                }\n            } else {\n                collector.collectFailures(failure, result);"
            },
            {
              "step": 35,
              "variableName": "result",
              "startLine": 60,
              "startColumn": 39,
              "endLine": 60,
              "endColumn": 45,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/MultipleBuildFailuresExceptionAnalyser.java",
              "type": "ArrayList [<element>] : LocationAwareException",
              "code": "            }\n        }\n        if (result.size() == 1 && result.get(0) instanceof RuntimeException) {\n            return (RuntimeException) result.get(0);\n        } else {\n            return new MultipleBuildFailures(result);\n        }"
            },
            {
              "step": 36,
              "variableName": "result.get(0)",
              "startLine": 60,
              "startColumn": 39,
              "endLine": 60,
              "endColumn": 52,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/MultipleBuildFailuresExceptionAnalyser.java",
              "type": "LocationAwareException",
              "code": "            }\n        }\n        if (result.size() == 1 && result.get(0) instanceof RuntimeException) {\n            return (RuntimeException) result.get(0);\n        } else {\n            return new MultipleBuildFailures(result);\n        }"
            },
            {
              "step": 37,
              "variableName": "(RuntimeException) result.get(0)",
              "startLine": 60,
              "startColumn": 20,
              "endLine": 60,
              "endColumn": 52,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/MultipleBuildFailuresExceptionAnalyser.java",
              "type": "LocationAwareException",
              "code": "            }\n        }\n        if (result.size() == 1 && result.get(0) instanceof RuntimeException) {\n            return (RuntimeException) result.get(0);\n        } else {\n            return new MultipleBuildFailures(result);\n        }"
            },
            {
              "step": 38,
              "variableName": "exceptionAnalyser.transform(finishFailures)",
              "startLine": 72,
              "startColumn": 16,
              "endLine": 72,
              "endColumn": 59,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/internal/buildtree/DefaultBuildTreeFinishExecutor.java",
              "type": "LocationAwareException",
              "code": "            finishFailures.addAll(result.getFailures());\n        });\n\n        return exceptionAnalyser.transform(finishFailures);\n    }\n}\n"
            },
            {
              "step": 39,
              "variableName": "delegate.finishBuildTree(failures)",
              "startLine": 46,
              "startColumn": 28,
              "endLine": 46,
              "endColumn": 62,
              "uri": "gradle-8.14.0/subprojects/composite-builds/src/main/java/org/gradle/composite/internal/OperationFiringBuildTreeFinishExecutor.java",
              "type": "LocationAwareException",
              "code": "            @Override\n            public RuntimeException call(BuildOperationContext context) {\n                try {\n                    return delegate.finishBuildTree(failures);\n                } finally {\n                    context.setResult(RESULT);\n                }"
            },
            {
              "step": 40,
              "variableName": "buildOperation.call(context)",
              "startLine": 239,
              "startColumn": 21,
              "endLine": 239,
              "endColumn": 49,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/testFixtures/java/org/gradle/internal/operations/TestBuildOperationRunner.java",
              "type": "LocationAwareException",
              "code": "            TestBuildOperationContext context = new TestBuildOperationContext(record);\n            T t;\n            try {\n                t = buildOperation.call(context);\n            } catch (Throwable failure) {\n                if (record.failure == null) {\n                    record.failure = failure;"
            },
            {
              "step": 41,
              "variableName": "t",
              "startLine": 246,
              "startColumn": 20,
              "endLine": 246,
              "endColumn": 21,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/testFixtures/java/org/gradle/internal/operations/TestBuildOperationRunner.java",
              "type": "LocationAwareException",
              "code": "                }\n                throw throwAsUncheckedException(failure);\n            }\n            return t;\n        }\n\n        private <O extends BuildOperation> void execute(O buildOperation, BuildOperationWorker<O> worker) {"
            },
            {
              "step": 42,
              "variableName": "log.call(buildOperation)",
              "startLine": 51,
              "startColumn": 16,
              "endLine": 51,
              "endColumn": 40,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/testFixtures/java/org/gradle/internal/operations/TestBuildOperationRunner.java",
              "type": "LocationAwareException",
              "code": "\n    @Override\n    public <T> T call(CallableBuildOperation<T> buildOperation) {\n        return log.call(buildOperation);\n    }\n\n    @Override"
            },
            {
              "step": 43,
              "variableName": "ca",
              "startLine": 115,
              "startColumn": 5,
              "endLine": 121,
              "endColumn": 7,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/configurationcache/ConfigurationCacheBuildOperations.kt",
              "type": "LocationAwareException",
              "code": "\ninternal\nfun <T : Any> BuildOperationRunner.withModelLoadOperation(block: () -> T): T =\n    call(object : CallableBuildOperation<T> {\n        override fun description(): BuildOperationDescriptor.Builder = BuildOperationDescriptor\n            .displayName(\"Load model from configuration cache\")\n            .progressDisplayName(\"Loading model from configuration cache\")"
            },
            {
              "step": 44,
              "variableName": "ca",
              "startLine": 115,
              "startColumn": 5,
              "endLine": 121,
              "endColumn": 7,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/configurationcache/ConfigurationCacheBuildOperations.kt",
              "type": "LocationAwareException",
              "code": "\ninternal\nfun <T : Any> BuildOperationRunner.withModelLoadOperation(block: () -> T): T =\n    call(object : CallableBuildOperation<T> {\n        override fun description(): BuildOperationDescriptor.Builder = BuildOperationDescriptor\n            .displayName(\"Load model from configuration cache\")\n            .progressDisplayName(\"Loading model from configuration cache\")"
            },
            {
              "step": 45,
              "variableName": "b",
              "startLine": 635,
              "startColumn": 9,
              "endLine": 641,
              "endColumn": 10,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "        // No need to record the `ClassLoaderScope` tree when loading\n        scopeRegistryListener.dispose()\n\n        buildOperationRunner.withModelLoadOperation {\n            val storeLoadResult = entryStore.useForStateLoad(StateType.Model) { stateFile: ConfigurationCacheStateFile ->\n                cacheIO.readModelFrom(stateFile)\n            }"
            },
            {
              "step": 46,
              "variableName": "block()",
              "startLine": 668,
              "startColumn": 22,
              "endLine": 668,
              "endColumn": 29,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "    private\n    inline fun <T> runAtConfigurationTime(block: () -> T): T {\n        prepareConfigurationTimeBarrier()\n        val result = block()\n        crossConfigurationTimeBarrier()\n        return result\n    }"
            },
            {
              "step": 47,
              "variableName": "result",
              "startLine": 670,
              "startColumn": 16,
              "endLine": 670,
              "endColumn": 22,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "        prepareConfigurationTimeBarrier()\n        val result = block()\n        crossConfigurationTimeBarrier()\n        return result\n    }\n\n    private"
            },
            {
              "step": 48,
              "variableName": "runAtConfigurationTime(...) : LocationAwareException",
              "startLine": 631,
              "startColumn": 28,
              "endLine": 642,
              "endColumn": 6,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "    data class LoadResultMetadata(val originInvocationId: String? = null)\n\n    private\n    fun loadModel(): Any = runAtConfigurationTime {\n        // No need to record the `ClassLoaderScope` tree when loading\n        scopeRegistryListener.dispose()\n"
            },
            {
              "step": 49,
              "variableName": "loadModel()",
              "startLine": 268,
              "startColumn": 20,
              "endLine": 268,
              "endColumn": 31,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "    override fun <T : Any> loadOrCreateModel(creator: () -> T): T {\n        if (isLoaded) {\n            runLoadedSideEffects()\n            return loadModel().uncheckedCast()\n        }\n\n        return runWorkThatContributesToCacheEntry {"
            },
            {
              "step": 50,
              "variableName": "Any",
              "startLine": 22,
              "startColumn": 15,
              "endLine": 22,
              "endColumn": 18,
              "uri": "gradle-8.14.0/platforms/core-configuration/stdlib-kotlin-extensions/src/main/kotlin/org/gradle/internal/extensions/stdlib/CastExtensions.kt",
              "type": "Object",
              "code": "import org.gradle.internal.Cast\n\n\nfun <T : Any> Any.uncheckedCast(): T =\n    Cast.uncheckedNonnullCast(this)\n"
            },
            {
              "step": 51,
              "variableName": "this",
              "startLine": 23,
              "startColumn": 31,
              "endLine": 23,
              "endColumn": 35,
              "uri": "gradle-8.14.0/platforms/core-configuration/stdlib-kotlin-extensions/src/main/kotlin/org/gradle/internal/extensions/stdlib/CastExtensions.kt",
              "type": "Object",
              "code": "\n\nfun <T : Any> Any.uncheckedCast(): T =\n    Cast.uncheckedNonnullCast(this)\n"
            },
            {
              "step": 52,
              "variableName": "Object object",
              "startLine": 76,
              "startColumn": 46,
              "endLine": 76,
              "endColumn": 59,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/Cast.java",
              "type": "Object",
              "code": "    }\n\n    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})\n    public static <T> T uncheckedNonnullCast(Object object) {\n        return (T) object;\n    }\n}"
            },
            {
              "step": 53,
              "variableName": "(T) object",
              "startLine": 77,
              "startColumn": 16,
              "endLine": 77,
              "endColumn": 26,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/Cast.java",
              "type": "Object",
              "code": "\n    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})\n    public static <T> T uncheckedNonnullCast(Object object) {\n        return (T) object;\n    }\n}\n"
            },
            {
              "step": 54,
              "variableName": "Cast.uncheckedNonnullCast(collectionType)",
              "startLine": 223,
              "startColumn": 16,
              "endLine": 223,
              "endColumn": 57,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/api/internal/provider/AbstractCollectionProperty.java",
              "type": "Class",
              "code": "    @Override\n    @Nonnull\n    public Class<C> getType() {\n        return Cast.uncheckedNonnullCast(collectionType);\n    }\n\n    @Override"
            },
            {
              "step": 55,
              "variableName": "provider.getType()",
              "startLine": 41,
              "startColumn": 35,
              "endLine": 41,
              "endColumn": 53,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/api/internal/provider/OrElseFixedValueProvider.java",
              "type": "Class",
              "code": "    @Nullable\n    @Override\n    public Class<T> getType() {\n        return Cast.uncheckedCast(provider.getType());\n    }\n\n    @Override"
            },
            {
              "step": 56,
              "variableName": "@Nullable Object object",
              "startLine": 71,
              "startColumn": 39,
              "endLine": 71,
              "endColumn": 62,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/Cast.java",
              "type": "Object",
              "code": "\n    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})\n    @Nullable\n    public static <T> T uncheckedCast(@Nullable Object object) {\n        return (T) object;\n    }\n"
            },
            {
              "step": 57,
              "variableName": "(T) object",
              "startLine": 72,
              "startColumn": 16,
              "endLine": 72,
              "endColumn": 26,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/Cast.java",
              "type": "Object",
              "code": "    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})\n    @Nullable\n    public static <T> T uncheckedCast(@Nullable Object object) {\n        return (T) object;\n    }\n\n    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})"
            },
            {
              "step": 58,
              "variableName": "Cast.uncheckedCast(sanitizer.sanitize(t))",
              "startLine": 41,
              "startColumn": 15,
              "endLine": 41,
              "endColumn": 56,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/api/internal/provider/TypeSanitizingTransformer.java",
              "type": "Object",
              "code": "\n    @Override\n    public T transform(T t) {\n        T v = Cast.uncheckedCast(sanitizer.sanitize(t));\n        if (targetType.isInstance(v)) {\n            return v;\n        }"
            },
            {
              "step": 59,
              "variableName": "v",
              "startLine": 43,
              "startColumn": 20,
              "endLine": 43,
              "endColumn": 21,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/api/internal/provider/TypeSanitizingTransformer.java",
              "type": "Object",
              "code": "    public T transform(T t) {\n        T v = Cast.uncheckedCast(sanitizer.sanitize(t));\n        if (targetType.isInstance(v)) {\n            return v;\n        }\n        throw new IllegalArgumentException(String.format(\"Cannot get the value of %s of type %s as the provider associated with this property returned a value of type %s.\", owner.getDisplayName(), targetType.getName(), v.getClass().getName()));\n    }"
            },
            {
              "step": 60,
              "variableName": "describer.transform(this)",
              "startLine": 163,
              "startColumn": 16,
              "endLine": 163,
              "endColumn": 41,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/repositories/DefaultMavenArtifactRepository.java",
              "type": "String",
              "code": "\n    @Override\n    public String getDisplayName() {\n        return describer.transform(this);\n    }\n\n    @Override"
            },
            {
              "step": 61,
              "variableName": "displayName.getDisplayName()",
              "startLine": 53,
              "startColumn": 16,
              "endLine": 53,
              "endColumn": 44,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/DefaultDependencySet.java",
              "type": "String",
              "code": "\n    @Override\n    public String toString() {\n        return displayName.getDisplayName();\n    }\n\n    @Override"
            },
            {
              "step": 62,
              "variableName": "literal.toString()",
              "startLine": 583,
              "startColumn": 20,
              "endLine": 583,
              "endColumn": 38,
              "uri": "gradle-8.14.0/platforms/software/build-init/src/main/java/org/gradle/buildinit/plugins/internal/BuildScriptBuilder.java",
              "type": "String",
              "code": "\n        @Override\n        public String with(Syntax syntax) {\n            return literal.toString();\n        }\n    }\n"
            },
            {
              "step": 63,
              "variableName": "propertyValue.with(this)",
              "startLine": 2113,
              "startColumn": 75,
              "endLine": 2113,
              "endColumn": 99,
              "uri": "gradle-8.14.0/platforms/software/build-init/src/main/java/org/gradle/buildinit/plugins/internal/BuildScriptBuilder.java",
              "type": "String",
              "code": "            ExpressionValue propertyValue = expression.propertyValue;\n            if (expression.assignOperator) {\n                if (propertyValue.isBooleanType()) {\n                    return booleanPropertyNameFor(propertyName) + \" = \" + propertyValue.with(this);\n                }\n                return propertyName + \" = \" + propertyValue.with(this);\n            } else {"
            },
            {
              "step": 64,
              "variableName": "booleanPropertyNameFor(propertyName) + \" = \" + propertyValue.with(this)",
              "startLine": 2113,
              "startColumn": 28,
              "endLine": 2113,
              "endColumn": 99,
              "uri": "gradle-8.14.0/platforms/software/build-init/src/main/java/org/gradle/buildinit/plugins/internal/BuildScriptBuilder.java",
              "type": "String",
              "code": "            ExpressionValue propertyValue = expression.propertyValue;\n            if (expression.assignOperator) {\n                if (propertyValue.isBooleanType()) {\n                    return booleanPropertyNameFor(propertyName) + \" = \" + propertyValue.with(this);\n                }\n                return propertyName + \" = \" + propertyValue.with(this);\n            } else {"
            },
            {
              "step": 65,
              "variableName": "printer.syntax.propertyAssignment(this)",
              "startLine": 1050,
              "startColumn": 29,
              "endLine": 1050,
              "endColumn": 68,
              "uri": "gradle-8.14.0/platforms/software/build-init/src/main/java/org/gradle/buildinit/plugins/internal/BuildScriptBuilder.java",
              "type": "String",
              "code": "\n        @Override\n        public void writeCodeTo(PrettyPrinter printer) {\n            printer.println(printer.syntax.propertyAssignment(this));\n        }\n    }\n"
            },
            {
              "step": 66,
              "variableName": "String s",
              "startLine": 1976,
              "startColumn": 30,
              "endLine": 1976,
              "endColumn": 38,
              "uri": "gradle-8.14.0/platforms/software/build-init/src/main/java/org/gradle/buildinit/plugins/internal/BuildScriptBuilder.java",
              "type": "String",
              "code": "            }\n        }\n\n        private void println(String s) {\n            if (!indent.isEmpty()) {\n                writer.print(indent);\n            }"
            },
            {
              "step": 67,
              "variableName": "s",
              "startLine": 1981,
              "startColumn": 32,
              "endLine": 1981,
              "endColumn": 33,
              "uri": "gradle-8.14.0/platforms/software/build-init/src/main/java/org/gradle/buildinit/plugins/internal/BuildScriptBuilder.java",
              "type": "String",
              "code": "                writer.print(indent);\n            }\n            if (eolComment != null) {\n                writer.println(s + eolComment);\n                eolComment = null;\n            } else {\n                writer.println(s);"
            },
            {
              "step": 68,
              "variableName": "s + eolComment",
              "startLine": 1981,
              "startColumn": 32,
              "endLine": 1981,
              "endColumn": 46,
              "uri": "gradle-8.14.0/platforms/software/build-init/src/main/java/org/gradle/buildinit/plugins/internal/BuildScriptBuilder.java",
              "type": "",
              "code": "                writer.print(indent);\n            }\n            if (eolComment != null) {\n                writer.println(s + eolComment);\n                eolComment = null;\n            } else {\n                writer.println(s);"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "source",
              "startLine": 40,
              "startColumn": 39,
              "endLine": 40,
              "endColumn": 45,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/RegExpNameMapper.java",
              "type": "String",
              "code": "    @Override\n    public String transform(String source) {\n        if (matcher == null) {\n            matcher = pattern.matcher(source);\n        } else {\n            matcher.reset(source);\n        }"
            },
            {
              "step": 1,
              "variableName": "result",
              "startLine": 48,
              "startColumn": 16,
              "endLine": 48,
              "endColumn": 22,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/RegExpNameMapper.java",
              "type": "String",
              "code": "        if (matcher.find()) {\n            result = matcher.replaceFirst(replacement);\n        }\n        return result;\n    }\n}\n"
            },
            {
              "step": 2,
              "variableName": "transformer.transform(value)",
              "startLine": 37,
              "startColumn": 31,
              "endLine": 37,
              "endColumn": 59,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/ChainingTransformer.java",
              "type": "String",
              "code": "    public T transform(T original) {\n        T value = original;\n        for (Transformer<T, T> transformer : transformers) {\n            value = type.cast(transformer.transform(value));\n        }\n        return value;\n    }"
            },
            {
              "step": 3,
              "variableName": "type.cast(transformer.transform(value))",
              "startLine": 37,
              "startColumn": 21,
              "endLine": 37,
              "endColumn": 60,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/ChainingTransformer.java",
              "type": "String",
              "code": "    public T transform(T original) {\n        T value = original;\n        for (Transformer<T, T> transformer : transformers) {\n            value = type.cast(transformer.transform(value));\n        }\n        return value;\n    }"
            },
            {
              "step": 4,
              "variableName": "value",
              "startLine": 39,
              "startColumn": 16,
              "endLine": 39,
              "endColumn": 21,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/ChainingTransformer.java",
              "type": "String",
              "code": "        for (Transformer<T, T> transformer : transformers) {\n            value = type.cast(transformer.transform(value));\n        }\n        return value;\n    }\n\n    public void add(Transformer<T, T> transformer) {"
            },
            {
              "step": 5,
              "variableName": "describer.transform(this)",
              "startLine": 163,
              "startColumn": 16,
              "endLine": 163,
              "endColumn": 41,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/repositories/DefaultMavenArtifactRepository.java",
              "type": "String",
              "code": "\n    @Override\n    public String getDisplayName() {\n        return describer.transform(this);\n    }\n\n    @Override"
            },
            {
              "step": 6,
              "variableName": "describable.getDisplayName()",
              "startLine": 313,
              "startColumn": 35,
              "endLine": 313,
              "endColumn": 63,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "String",
              "code": "        public String getDisplayName() {\n            synchronized (this) {\n                if (displayName == null) {\n                    displayName = describable.getDisplayName();\n                    if (capDisplayName != null || !(describable instanceof DisplayName)) {\n                        describable = null;\n                    }"
            },
            {
              "step": 7,
              "variableName": "displayName",
              "startLine": 318,
              "startColumn": 24,
              "endLine": 318,
              "endColumn": 35,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "String",
              "code": "                        describable = null;\n                    }\n                }\n                return displayName;\n            }\n        }\n    }"
            },
            {
              "step": 8,
              "variableName": "displayName.getDisplayName()",
              "startLine": 772,
              "startColumn": 73,
              "endLine": 772,
              "endColumn": 101,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/configurations/DefaultConfiguration.java",
              "type": "String",
              "code": "                try {\n                    results = resolver.resolveGraph(DefaultConfiguration.this);\n                } catch (Exception e) {\n                    throw exceptionMapper.mapFailure(e, \"dependencies\", displayName.getDisplayName());\n                }\n\n                // Make the new state visible in case a dependency resolution listener queries the result, which requires the new state"
            },
            {
              "step": 9,
              "variableName": "String contextDisplayName",
              "startLine": 68,
              "startColumn": 77,
              "endLine": 68,
              "endColumn": 102,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "String",
              "code": "        return mapFailure(failure, type, displayName);\n    }\n\n    public TypedResolveException mapFailure(Throwable failure, String type, String contextDisplayName) {\n        if (!(failure instanceof TypedResolveException)) {\n            return new TypedResolveException(\n                type,"
            },
            {
              "step": 10,
              "variableName": "contextDisplayName",
              "startLine": 72,
              "startColumn": 17,
              "endLine": 72,
              "endColumn": 35,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "String",
              "code": "        if (!(failure instanceof TypedResolveException)) {\n            return new TypedResolveException(\n                type,\n                contextDisplayName,\n                ImmutableList.of(mapRepositoryOverrideFailure(contextDisplayName, failure))\n            );\n        }"
            },
            {
              "step": 11,
              "variableName": "new TypedResolveException(...) : TypedResolveException",
              "startLine": 70,
              "startColumn": 20,
              "endLine": 74,
              "endColumn": 14,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "TypedResolveException",
              "code": "\n    public TypedResolveException mapFailure(Throwable failure, String type, String contextDisplayName) {\n        if (!(failure instanceof TypedResolveException)) {\n            return new TypedResolveException(\n                type,\n                contextDisplayName,\n                ImmutableList.of(mapRepositoryOverrideFailure(contextDisplayName, failure))"
            },
            {
              "step": 12,
              "variableName": "exceptionMapper.mapFailure(e, \"dependencies\", displayName.getDisplayName())",
              "startLine": 772,
              "startColumn": 27,
              "endLine": 772,
              "endColumn": 102,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/configurations/DefaultConfiguration.java",
              "type": "TypedResolveException",
              "code": "                try {\n                    results = resolver.resolveGraph(DefaultConfiguration.this);\n                } catch (Exception e) {\n                    throw exceptionMapper.mapFailure(e, \"dependencies\", displayName.getDisplayName());\n                }\n\n                // Make the new state visible in case a dependency resolution listener queries the result, which requires the new state"
            },
            {
              "step": 13,
              "variableName": "e",
              "startLine": 772,
              "startColumn": 54,
              "endLine": 772,
              "endColumn": 55,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/configurations/DefaultConfiguration.java",
              "type": "Exception",
              "code": "                try {\n                    results = resolver.resolveGraph(DefaultConfiguration.this);\n                } catch (Exception e) {\n                    throw exceptionMapper.mapFailure(e, \"dependencies\", displayName.getDisplayName());\n                }\n\n                // Make the new state visible in case a dependency resolution listener queries the result, which requires the new state"
            },
            {
              "step": 14,
              "variableName": "Throwable failure",
              "startLine": 68,
              "startColumn": 45,
              "endLine": 68,
              "endColumn": 62,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Throwable",
              "code": "        return mapFailure(failure, type, displayName);\n    }\n\n    public TypedResolveException mapFailure(Throwable failure, String type, String contextDisplayName) {\n        if (!(failure instanceof TypedResolveException)) {\n            return new TypedResolveException(\n                type,"
            },
            {
              "step": 15,
              "variableName": "failure",
              "startLine": 73,
              "startColumn": 83,
              "endLine": 73,
              "endColumn": 90,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Throwable",
              "code": "            return new TypedResolveException(\n                type,\n                contextDisplayName,\n                ImmutableList.of(mapRepositoryOverrideFailure(contextDisplayName, failure))\n            );\n        }\n"
            },
            {
              "step": 16,
              "variableName": "Throwable failure",
              "startLine": 94,
              "startColumn": 78,
              "endLine": 94,
              "endColumn": 95,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Throwable",
              "code": "\n    // TODO: We should handle this exception at the source instead of using instanceof to detect it after it is thrown.\n    //       We should try to avoid catching and analyzing runtime exceptions\n    public Throwable mapRepositoryOverrideFailure(String contextDisplayName, Throwable failure) {\n        if (!(failure instanceof ModuleVersionNotFoundException) || !settingsRepositoriesIgnored()) {\n            return failure;\n        }"
            },
            {
              "step": 17,
              "variableName": "failure",
              "startLine": 108,
              "startColumn": 35,
              "endLine": 108,
              "endColumn": 42,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Throwable",
              "code": "        return new TypedResolveException(\n            \"dependencies\",\n            contextDisplayName,\n            Collections.singleton(failure),\n            resolutions\n        );\n    }"
            },
            {
              "step": 18,
              "variableName": "Collections.singleton(failure)",
              "startLine": 108,
              "startColumn": 13,
              "endLine": 108,
              "endColumn": 43,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Set [<element>] : Throwable",
              "code": "        return new TypedResolveException(\n            \"dependencies\",\n            contextDisplayName,\n            Collections.singleton(failure),\n            resolutions\n        );\n    }"
            },
            {
              "step": 19,
              "variableName": "Collections.singleton(failure)",
              "startLine": 108,
              "startColumn": 13,
              "endLine": 108,
              "endColumn": 43,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Set",
              "code": "        return new TypedResolveException(\n            \"dependencies\",\n            contextDisplayName,\n            Collections.singleton(failure),\n            resolutions\n        );\n    }"
            },
            {
              "step": 20,
              "variableName": "Iterable<? extends Throwable> failures",
              "startLine": 42,
              "startColumn": 67,
              "endLine": 42,
              "endColumn": 105,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ivyservice/TypedResolveException.java",
              "type": "Set",
              "code": "    /**\n     * Creates a new instance with resolutions.\n     */\n    public TypedResolveException(String type, String displayName, Iterable<? extends Throwable> failures, List<String> resolutions) {\n        super(buildMessage(type, displayName), failures, false);\n        this.type = type;\n        this.resolutions = ImmutableList.copyOf(resolutions);"
            },
            {
              "step": 21,
              "variableName": "failures",
              "startLine": 43,
              "startColumn": 48,
              "endLine": 43,
              "endColumn": 56,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ivyservice/TypedResolveException.java",
              "type": "Set",
              "code": "     * Creates a new instance with resolutions.\n     */\n    public TypedResolveException(String type, String displayName, Iterable<? extends Throwable> failures, List<String> resolutions) {\n        super(buildMessage(type, displayName), failures, false);\n        this.type = type;\n        this.resolutions = ImmutableList.copyOf(resolutions);\n    }"
            },
            {
              "step": 22,
              "variableName": "Iterable<? extends Throwable> causes",
              "startLine": 77,
              "startColumn": 48,
              "endLine": 77,
              "endColumn": 84,
              "uri": "gradle-8.14.0/subprojects/core-api/src/main/java/org/gradle/api/artifacts/ResolveException.java",
              "type": "Set",
              "code": "     * @since 8.9\n     */\n    @Incubating\n    protected ResolveException(String message, Iterable<? extends Throwable> causes, @SuppressWarnings(\"unused\") boolean dummy) {\n        super(message, causes);\n    }\n}"
            },
            {
              "step": 23,
              "variableName": "causes",
              "startLine": 78,
              "startColumn": 24,
              "endLine": 78,
              "endColumn": 30,
              "uri": "gradle-8.14.0/subprojects/core-api/src/main/java/org/gradle/api/artifacts/ResolveException.java",
              "type": "Set",
              "code": "     */\n    @Incubating\n    protected ResolveException(String message, Iterable<? extends Throwable> causes, @SuppressWarnings(\"unused\") boolean dummy) {\n        super(message, causes);\n    }\n}\n"
            },
            {
              "step": 24,
              "variableName": "Iterable<? extends Throwable> causes",
              "startLine": 47,
              "startColumn": 55,
              "endLine": 47,
              "endColumn": 91,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "Set",
              "code": "        this.causes.addAll(Arrays.asList(causes));\n    }\n\n    public DefaultMultiCauseException(String message, Iterable<? extends Throwable> causes) {\n        super(message);\n        this.message = message;\n        initCauses(causes);"
            },
            {
              "step": 25,
              "variableName": "causes",
              "startLine": 50,
              "startColumn": 20,
              "endLine": 50,
              "endColumn": 26,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "Set",
              "code": "    public DefaultMultiCauseException(String message, Iterable<? extends Throwable> causes) {\n        super(message);\n        this.message = message;\n        initCauses(causes);\n    }\n\n    public DefaultMultiCauseException(Factory<String> messageFactory) {"
            },
            {
              "step": 26,
              "variableName": "Iterable<? extends Throwable> causes",
              "startLine": 112,
              "startColumn": 28,
              "endLine": 112,
              "endColumn": 64,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "Iterable",
              "code": "        return null;\n    }\n\n    public void initCauses(Iterable<? extends Throwable> causes) {\n        this.causes.clear();\n        for (Throwable cause : causes) {\n            this.causes.add(cause);"
            },
            {
              "step": 27,
              "variableName": "cause",
              "startLine": 115,
              "startColumn": 29,
              "endLine": 115,
              "endColumn": 34,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "Throwable",
              "code": "    public void initCauses(Iterable<? extends Throwable> causes) {\n        this.causes.clear();\n        for (Throwable cause : causes) {\n            this.causes.add(cause);\n        }\n    }\n"
            },
            {
              "step": 28,
              "variableName": "this.causes",
              "startLine": 115,
              "startColumn": 13,
              "endLine": 115,
              "endColumn": 24,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "CopyOnWriteArrayList [<element>] : Throwable",
              "code": "    public void initCauses(Iterable<? extends Throwable> causes) {\n        this.causes.clear();\n        for (Throwable cause : causes) {\n            this.causes.add(cause);\n        }\n    }\n"
            },
            {
              "step": 29,
              "variableName": "this",
              "startLine": 115,
              "startColumn": 13,
              "endLine": 115,
              "endColumn": 17,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "DefaultMultiCauseException [causes, <element>] : Throwable",
              "code": "    public void initCauses(Iterable<? extends Throwable> causes) {\n        this.causes.clear();\n        for (Throwable cause : causes) {\n            this.causes.add(cause);\n        }\n    }\n"
            },
            {
              "step": 30,
              "variableName": "projectConfigurationException",
              "startLine": 57,
              "startColumn": 17,
              "endLine": 57,
              "endColumn": 46,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/DefaultExceptionAnalyser.java",
              "type": "ProjectConfigurationException [causes, <element>] : Throwable",
              "code": "                }\n            }\n            if (!additionalFailures.isEmpty()) {\n                projectConfigurationException.initCauses(additionalFailures);\n                failures.add(transform(projectConfigurationException));\n            }\n        } else if (exception instanceof ServiceCreationException) {"
            },
            {
              "step": 31,
              "variableName": "projectConfigurationException",
              "startLine": 58,
              "startColumn": 40,
              "endLine": 58,
              "endColumn": 69,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/DefaultExceptionAnalyser.java",
              "type": "ProjectConfigurationException [causes, <element>] : Throwable",
              "code": "            }\n            if (!additionalFailures.isEmpty()) {\n                projectConfigurationException.initCauses(additionalFailures);\n                failures.add(transform(projectConfigurationException));\n            }\n        } else if (exception instanceof ServiceCreationException) {\n            failures.add(transform(new InitializationException(exception)));"
            },
            {
              "step": 32,
              "variableName": "transform(projectConfigurationException)",
              "startLine": 58,
              "startColumn": 30,
              "endLine": 58,
              "endColumn": 70,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/DefaultExceptionAnalyser.java",
              "type": "LocationAwareException",
              "code": "            }\n            if (!additionalFailures.isEmpty()) {\n                projectConfigurationException.initCauses(additionalFailures);\n                failures.add(transform(projectConfigurationException));\n            }\n        } else if (exception instanceof ServiceCreationException) {\n            failures.add(transform(new InitializationException(exception)));"
            },
            {
              "step": 33,
              "variableName": "failures",
              "startLine": 58,
              "startColumn": 17,
              "endLine": 58,
              "endColumn": 25,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/DefaultExceptionAnalyser.java",
              "type": "Collection [<element>] : LocationAwareException",
              "code": "            }\n            if (!additionalFailures.isEmpty()) {\n                projectConfigurationException.initCauses(additionalFailures);\n                failures.add(transform(projectConfigurationException));\n            }\n        } else if (exception instanceof ServiceCreationException) {\n            failures.add(transform(new InitializationException(exception)));"
            },
            {
              "step": 34,
              "variableName": "result",
              "startLine": 53,
              "startColumn": 54,
              "endLine": 53,
              "endColumn": 60,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/MultipleBuildFailuresExceptionAnalyser.java",
              "type": "ArrayList [<element>] : LocationAwareException",
              "code": "        for (Throwable failure : failures) {\n            if (failure instanceof MultipleBuildFailures) {\n                for (Throwable cause : ((MultipleBuildFailures) failure).getCauses()) {\n                    collector.collectFailures(cause, result);\n                }\n            } else {\n                collector.collectFailures(failure, result);"
            },
            {
              "step": 35,
              "variableName": "result",
              "startLine": 60,
              "startColumn": 39,
              "endLine": 60,
              "endColumn": 45,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/MultipleBuildFailuresExceptionAnalyser.java",
              "type": "ArrayList [<element>] : LocationAwareException",
              "code": "            }\n        }\n        if (result.size() == 1 && result.get(0) instanceof RuntimeException) {\n            return (RuntimeException) result.get(0);\n        } else {\n            return new MultipleBuildFailures(result);\n        }"
            },
            {
              "step": 36,
              "variableName": "result.get(0)",
              "startLine": 60,
              "startColumn": 39,
              "endLine": 60,
              "endColumn": 52,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/MultipleBuildFailuresExceptionAnalyser.java",
              "type": "LocationAwareException",
              "code": "            }\n        }\n        if (result.size() == 1 && result.get(0) instanceof RuntimeException) {\n            return (RuntimeException) result.get(0);\n        } else {\n            return new MultipleBuildFailures(result);\n        }"
            },
            {
              "step": 37,
              "variableName": "(RuntimeException) result.get(0)",
              "startLine": 60,
              "startColumn": 20,
              "endLine": 60,
              "endColumn": 52,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/MultipleBuildFailuresExceptionAnalyser.java",
              "type": "LocationAwareException",
              "code": "            }\n        }\n        if (result.size() == 1 && result.get(0) instanceof RuntimeException) {\n            return (RuntimeException) result.get(0);\n        } else {\n            return new MultipleBuildFailures(result);\n        }"
            },
            {
              "step": 38,
              "variableName": "exceptionAnalyser.transform(finishFailures)",
              "startLine": 72,
              "startColumn": 16,
              "endLine": 72,
              "endColumn": 59,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/internal/buildtree/DefaultBuildTreeFinishExecutor.java",
              "type": "LocationAwareException",
              "code": "            finishFailures.addAll(result.getFailures());\n        });\n\n        return exceptionAnalyser.transform(finishFailures);\n    }\n}\n"
            },
            {
              "step": 39,
              "variableName": "delegate.finishBuildTree(failures)",
              "startLine": 46,
              "startColumn": 28,
              "endLine": 46,
              "endColumn": 62,
              "uri": "gradle-8.14.0/subprojects/composite-builds/src/main/java/org/gradle/composite/internal/OperationFiringBuildTreeFinishExecutor.java",
              "type": "LocationAwareException",
              "code": "            @Override\n            public RuntimeException call(BuildOperationContext context) {\n                try {\n                    return delegate.finishBuildTree(failures);\n                } finally {\n                    context.setResult(RESULT);\n                }"
            },
            {
              "step": 40,
              "variableName": "buildOperation.call(context)",
              "startLine": 239,
              "startColumn": 21,
              "endLine": 239,
              "endColumn": 49,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/testFixtures/java/org/gradle/internal/operations/TestBuildOperationRunner.java",
              "type": "LocationAwareException",
              "code": "            TestBuildOperationContext context = new TestBuildOperationContext(record);\n            T t;\n            try {\n                t = buildOperation.call(context);\n            } catch (Throwable failure) {\n                if (record.failure == null) {\n                    record.failure = failure;"
            },
            {
              "step": 41,
              "variableName": "t",
              "startLine": 246,
              "startColumn": 20,
              "endLine": 246,
              "endColumn": 21,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/testFixtures/java/org/gradle/internal/operations/TestBuildOperationRunner.java",
              "type": "LocationAwareException",
              "code": "                }\n                throw throwAsUncheckedException(failure);\n            }\n            return t;\n        }\n\n        private <O extends BuildOperation> void execute(O buildOperation, BuildOperationWorker<O> worker) {"
            },
            {
              "step": 42,
              "variableName": "log.call(buildOperation)",
              "startLine": 51,
              "startColumn": 16,
              "endLine": 51,
              "endColumn": 40,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/testFixtures/java/org/gradle/internal/operations/TestBuildOperationRunner.java",
              "type": "LocationAwareException",
              "code": "\n    @Override\n    public <T> T call(CallableBuildOperation<T> buildOperation) {\n        return log.call(buildOperation);\n    }\n\n    @Override"
            },
            {
              "step": 43,
              "variableName": "ca",
              "startLine": 115,
              "startColumn": 5,
              "endLine": 121,
              "endColumn": 7,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/configurationcache/ConfigurationCacheBuildOperations.kt",
              "type": "LocationAwareException",
              "code": "\ninternal\nfun <T : Any> BuildOperationRunner.withModelLoadOperation(block: () -> T): T =\n    call(object : CallableBuildOperation<T> {\n        override fun description(): BuildOperationDescriptor.Builder = BuildOperationDescriptor\n            .displayName(\"Load model from configuration cache\")\n            .progressDisplayName(\"Loading model from configuration cache\")"
            },
            {
              "step": 44,
              "variableName": "ca",
              "startLine": 115,
              "startColumn": 5,
              "endLine": 121,
              "endColumn": 7,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/configurationcache/ConfigurationCacheBuildOperations.kt",
              "type": "LocationAwareException",
              "code": "\ninternal\nfun <T : Any> BuildOperationRunner.withModelLoadOperation(block: () -> T): T =\n    call(object : CallableBuildOperation<T> {\n        override fun description(): BuildOperationDescriptor.Builder = BuildOperationDescriptor\n            .displayName(\"Load model from configuration cache\")\n            .progressDisplayName(\"Loading model from configuration cache\")"
            },
            {
              "step": 45,
              "variableName": "b",
              "startLine": 635,
              "startColumn": 9,
              "endLine": 641,
              "endColumn": 10,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "        // No need to record the `ClassLoaderScope` tree when loading\n        scopeRegistryListener.dispose()\n\n        buildOperationRunner.withModelLoadOperation {\n            val storeLoadResult = entryStore.useForStateLoad(StateType.Model) { stateFile: ConfigurationCacheStateFile ->\n                cacheIO.readModelFrom(stateFile)\n            }"
            },
            {
              "step": 46,
              "variableName": "block()",
              "startLine": 668,
              "startColumn": 22,
              "endLine": 668,
              "endColumn": 29,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "    private\n    inline fun <T> runAtConfigurationTime(block: () -> T): T {\n        prepareConfigurationTimeBarrier()\n        val result = block()\n        crossConfigurationTimeBarrier()\n        return result\n    }"
            },
            {
              "step": 47,
              "variableName": "result",
              "startLine": 670,
              "startColumn": 16,
              "endLine": 670,
              "endColumn": 22,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "        prepareConfigurationTimeBarrier()\n        val result = block()\n        crossConfigurationTimeBarrier()\n        return result\n    }\n\n    private"
            },
            {
              "step": 48,
              "variableName": "runAtConfigurationTime(...) : LocationAwareException",
              "startLine": 631,
              "startColumn": 28,
              "endLine": 642,
              "endColumn": 6,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "    data class LoadResultMetadata(val originInvocationId: String? = null)\n\n    private\n    fun loadModel(): Any = runAtConfigurationTime {\n        // No need to record the `ClassLoaderScope` tree when loading\n        scopeRegistryListener.dispose()\n"
            },
            {
              "step": 49,
              "variableName": "loadModel()",
              "startLine": 268,
              "startColumn": 20,
              "endLine": 268,
              "endColumn": 31,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "    override fun <T : Any> loadOrCreateModel(creator: () -> T): T {\n        if (isLoaded) {\n            runLoadedSideEffects()\n            return loadModel().uncheckedCast()\n        }\n\n        return runWorkThatContributesToCacheEntry {"
            },
            {
              "step": 50,
              "variableName": "Any",
              "startLine": 22,
              "startColumn": 15,
              "endLine": 22,
              "endColumn": 18,
              "uri": "gradle-8.14.0/platforms/core-configuration/stdlib-kotlin-extensions/src/main/kotlin/org/gradle/internal/extensions/stdlib/CastExtensions.kt",
              "type": "Object",
              "code": "import org.gradle.internal.Cast\n\n\nfun <T : Any> Any.uncheckedCast(): T =\n    Cast.uncheckedNonnullCast(this)\n"
            },
            {
              "step": 51,
              "variableName": "this",
              "startLine": 23,
              "startColumn": 31,
              "endLine": 23,
              "endColumn": 35,
              "uri": "gradle-8.14.0/platforms/core-configuration/stdlib-kotlin-extensions/src/main/kotlin/org/gradle/internal/extensions/stdlib/CastExtensions.kt",
              "type": "Object",
              "code": "\n\nfun <T : Any> Any.uncheckedCast(): T =\n    Cast.uncheckedNonnullCast(this)\n"
            },
            {
              "step": 52,
              "variableName": "Object object",
              "startLine": 76,
              "startColumn": 46,
              "endLine": 76,
              "endColumn": 59,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/Cast.java",
              "type": "Object",
              "code": "    }\n\n    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})\n    public static <T> T uncheckedNonnullCast(Object object) {\n        return (T) object;\n    }\n}"
            },
            {
              "step": 53,
              "variableName": "(T) object",
              "startLine": 77,
              "startColumn": 16,
              "endLine": 77,
              "endColumn": 26,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/Cast.java",
              "type": "Object",
              "code": "\n    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})\n    public static <T> T uncheckedNonnullCast(Object object) {\n        return (T) object;\n    }\n}\n"
            },
            {
              "step": 54,
              "variableName": "Cast.uncheckedNonnullCast(collectionType)",
              "startLine": 223,
              "startColumn": 16,
              "endLine": 223,
              "endColumn": 57,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/api/internal/provider/AbstractCollectionProperty.java",
              "type": "Class",
              "code": "    @Override\n    @Nonnull\n    public Class<C> getType() {\n        return Cast.uncheckedNonnullCast(collectionType);\n    }\n\n    @Override"
            },
            {
              "step": 55,
              "variableName": "provider.getType()",
              "startLine": 41,
              "startColumn": 35,
              "endLine": 41,
              "endColumn": 53,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/api/internal/provider/OrElseFixedValueProvider.java",
              "type": "Class",
              "code": "    @Nullable\n    @Override\n    public Class<T> getType() {\n        return Cast.uncheckedCast(provider.getType());\n    }\n\n    @Override"
            },
            {
              "step": 56,
              "variableName": "@Nullable Object object",
              "startLine": 71,
              "startColumn": 39,
              "endLine": 71,
              "endColumn": 62,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/Cast.java",
              "type": "Object",
              "code": "\n    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})\n    @Nullable\n    public static <T> T uncheckedCast(@Nullable Object object) {\n        return (T) object;\n    }\n"
            },
            {
              "step": 57,
              "variableName": "(T) object",
              "startLine": 72,
              "startColumn": 16,
              "endLine": 72,
              "endColumn": 26,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/Cast.java",
              "type": "Object",
              "code": "    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})\n    @Nullable\n    public static <T> T uncheckedCast(@Nullable Object object) {\n        return (T) object;\n    }\n\n    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})"
            },
            {
              "step": 58,
              "variableName": "Cast.uncheckedCast(sanitizer.sanitize(t))",
              "startLine": 41,
              "startColumn": 15,
              "endLine": 41,
              "endColumn": 56,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/api/internal/provider/TypeSanitizingTransformer.java",
              "type": "Object",
              "code": "\n    @Override\n    public T transform(T t) {\n        T v = Cast.uncheckedCast(sanitizer.sanitize(t));\n        if (targetType.isInstance(v)) {\n            return v;\n        }"
            },
            {
              "step": 59,
              "variableName": "v",
              "startLine": 43,
              "startColumn": 20,
              "endLine": 43,
              "endColumn": 21,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/api/internal/provider/TypeSanitizingTransformer.java",
              "type": "Object",
              "code": "    public T transform(T t) {\n        T v = Cast.uncheckedCast(sanitizer.sanitize(t));\n        if (targetType.isInstance(v)) {\n            return v;\n        }\n        throw new IllegalArgumentException(String.format(\"Cannot get the value of %s of type %s as the provider associated with this property returned a value of type %s.\", owner.getDisplayName(), targetType.getName(), v.getClass().getName()));\n    }"
            },
            {
              "step": 60,
              "variableName": "describer.transform(this)",
              "startLine": 163,
              "startColumn": 16,
              "endLine": 163,
              "endColumn": 41,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/repositories/DefaultMavenArtifactRepository.java",
              "type": "String",
              "code": "\n    @Override\n    public String getDisplayName() {\n        return describer.transform(this);\n    }\n\n    @Override"
            },
            {
              "step": 61,
              "variableName": "displayName.getDisplayName()",
              "startLine": 53,
              "startColumn": 16,
              "endLine": 53,
              "endColumn": 44,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/DefaultDependencySet.java",
              "type": "String",
              "code": "\n    @Override\n    public String toString() {\n        return displayName.getDisplayName();\n    }\n\n    @Override"
            },
            {
              "step": 62,
              "variableName": "literal.toString()",
              "startLine": 583,
              "startColumn": 20,
              "endLine": 583,
              "endColumn": 38,
              "uri": "gradle-8.14.0/platforms/software/build-init/src/main/java/org/gradle/buildinit/plugins/internal/BuildScriptBuilder.java",
              "type": "String",
              "code": "\n        @Override\n        public String with(Syntax syntax) {\n            return literal.toString();\n        }\n    }\n"
            },
            {
              "step": 63,
              "variableName": "propertyValue.with(this)",
              "startLine": 2113,
              "startColumn": 75,
              "endLine": 2113,
              "endColumn": 99,
              "uri": "gradle-8.14.0/platforms/software/build-init/src/main/java/org/gradle/buildinit/plugins/internal/BuildScriptBuilder.java",
              "type": "String",
              "code": "            ExpressionValue propertyValue = expression.propertyValue;\n            if (expression.assignOperator) {\n                if (propertyValue.isBooleanType()) {\n                    return booleanPropertyNameFor(propertyName) + \" = \" + propertyValue.with(this);\n                }\n                return propertyName + \" = \" + propertyValue.with(this);\n            } else {"
            },
            {
              "step": 64,
              "variableName": "booleanPropertyNameFor(propertyName) + \" = \" + propertyValue.with(this)",
              "startLine": 2113,
              "startColumn": 28,
              "endLine": 2113,
              "endColumn": 99,
              "uri": "gradle-8.14.0/platforms/software/build-init/src/main/java/org/gradle/buildinit/plugins/internal/BuildScriptBuilder.java",
              "type": "String",
              "code": "            ExpressionValue propertyValue = expression.propertyValue;\n            if (expression.assignOperator) {\n                if (propertyValue.isBooleanType()) {\n                    return booleanPropertyNameFor(propertyName) + \" = \" + propertyValue.with(this);\n                }\n                return propertyName + \" = \" + propertyValue.with(this);\n            } else {"
            },
            {
              "step": 65,
              "variableName": "printer.syntax.propertyAssignment(this)",
              "startLine": 1050,
              "startColumn": 29,
              "endLine": 1050,
              "endColumn": 68,
              "uri": "gradle-8.14.0/platforms/software/build-init/src/main/java/org/gradle/buildinit/plugins/internal/BuildScriptBuilder.java",
              "type": "String",
              "code": "\n        @Override\n        public void writeCodeTo(PrettyPrinter printer) {\n            printer.println(printer.syntax.propertyAssignment(this));\n        }\n    }\n"
            },
            {
              "step": 66,
              "variableName": "String s",
              "startLine": 1976,
              "startColumn": 30,
              "endLine": 1976,
              "endColumn": 38,
              "uri": "gradle-8.14.0/platforms/software/build-init/src/main/java/org/gradle/buildinit/plugins/internal/BuildScriptBuilder.java",
              "type": "String",
              "code": "            }\n        }\n\n        private void println(String s) {\n            if (!indent.isEmpty()) {\n                writer.print(indent);\n            }"
            },
            {
              "step": 67,
              "variableName": "s",
              "startLine": 1981,
              "startColumn": 32,
              "endLine": 1981,
              "endColumn": 33,
              "uri": "gradle-8.14.0/platforms/software/build-init/src/main/java/org/gradle/buildinit/plugins/internal/BuildScriptBuilder.java",
              "type": "String",
              "code": "                writer.print(indent);\n            }\n            if (eolComment != null) {\n                writer.println(s + eolComment);\n                eolComment = null;\n            } else {\n                writer.println(s);"
            },
            {
              "step": 68,
              "variableName": "s + eolComment",
              "startLine": 1981,
              "startColumn": 32,
              "endLine": 1981,
              "endColumn": 46,
              "uri": "gradle-8.14.0/platforms/software/build-init/src/main/java/org/gradle/buildinit/plugins/internal/BuildScriptBuilder.java",
              "type": "",
              "code": "                writer.print(indent);\n            }\n            if (eolComment != null) {\n                writer.println(s + eolComment);\n                eolComment = null;\n            } else {\n                writer.println(s);"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "source",
              "startLine": 42,
              "startColumn": 27,
              "endLine": 42,
              "endColumn": 33,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/RegExpNameMapper.java",
              "type": "String",
              "code": "        if (matcher == null) {\n            matcher = pattern.matcher(source);\n        } else {\n            matcher.reset(source);\n        }\n        String result = source;\n        if (matcher.find()) {"
            },
            {
              "step": 1,
              "variableName": "result",
              "startLine": 48,
              "startColumn": 16,
              "endLine": 48,
              "endColumn": 22,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/RegExpNameMapper.java",
              "type": "String",
              "code": "        if (matcher.find()) {\n            result = matcher.replaceFirst(replacement);\n        }\n        return result;\n    }\n}\n"
            },
            {
              "step": 2,
              "variableName": "transformer.transform(value)",
              "startLine": 37,
              "startColumn": 31,
              "endLine": 37,
              "endColumn": 59,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/ChainingTransformer.java",
              "type": "String",
              "code": "    public T transform(T original) {\n        T value = original;\n        for (Transformer<T, T> transformer : transformers) {\n            value = type.cast(transformer.transform(value));\n        }\n        return value;\n    }"
            },
            {
              "step": 3,
              "variableName": "type.cast(transformer.transform(value))",
              "startLine": 37,
              "startColumn": 21,
              "endLine": 37,
              "endColumn": 60,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/ChainingTransformer.java",
              "type": "String",
              "code": "    public T transform(T original) {\n        T value = original;\n        for (Transformer<T, T> transformer : transformers) {\n            value = type.cast(transformer.transform(value));\n        }\n        return value;\n    }"
            },
            {
              "step": 4,
              "variableName": "value",
              "startLine": 39,
              "startColumn": 16,
              "endLine": 39,
              "endColumn": 21,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/ChainingTransformer.java",
              "type": "String",
              "code": "        for (Transformer<T, T> transformer : transformers) {\n            value = type.cast(transformer.transform(value));\n        }\n        return value;\n    }\n\n    public void add(Transformer<T, T> transformer) {"
            },
            {
              "step": 5,
              "variableName": "describer.transform(this)",
              "startLine": 163,
              "startColumn": 16,
              "endLine": 163,
              "endColumn": 41,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/repositories/DefaultMavenArtifactRepository.java",
              "type": "String",
              "code": "\n    @Override\n    public String getDisplayName() {\n        return describer.transform(this);\n    }\n\n    @Override"
            },
            {
              "step": 6,
              "variableName": "describable.getDisplayName()",
              "startLine": 313,
              "startColumn": 35,
              "endLine": 313,
              "endColumn": 63,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "String",
              "code": "        public String getDisplayName() {\n            synchronized (this) {\n                if (displayName == null) {\n                    displayName = describable.getDisplayName();\n                    if (capDisplayName != null || !(describable instanceof DisplayName)) {\n                        describable = null;\n                    }"
            },
            {
              "step": 7,
              "variableName": "displayName",
              "startLine": 318,
              "startColumn": 24,
              "endLine": 318,
              "endColumn": 35,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "String",
              "code": "                        describable = null;\n                    }\n                }\n                return displayName;\n            }\n        }\n    }"
            },
            {
              "step": 8,
              "variableName": "displayName.getDisplayName()",
              "startLine": 772,
              "startColumn": 73,
              "endLine": 772,
              "endColumn": 101,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/configurations/DefaultConfiguration.java",
              "type": "String",
              "code": "                try {\n                    results = resolver.resolveGraph(DefaultConfiguration.this);\n                } catch (Exception e) {\n                    throw exceptionMapper.mapFailure(e, \"dependencies\", displayName.getDisplayName());\n                }\n\n                // Make the new state visible in case a dependency resolution listener queries the result, which requires the new state"
            },
            {
              "step": 9,
              "variableName": "String contextDisplayName",
              "startLine": 68,
              "startColumn": 77,
              "endLine": 68,
              "endColumn": 102,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "String",
              "code": "        return mapFailure(failure, type, displayName);\n    }\n\n    public TypedResolveException mapFailure(Throwable failure, String type, String contextDisplayName) {\n        if (!(failure instanceof TypedResolveException)) {\n            return new TypedResolveException(\n                type,"
            },
            {
              "step": 10,
              "variableName": "contextDisplayName",
              "startLine": 72,
              "startColumn": 17,
              "endLine": 72,
              "endColumn": 35,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "String",
              "code": "        if (!(failure instanceof TypedResolveException)) {\n            return new TypedResolveException(\n                type,\n                contextDisplayName,\n                ImmutableList.of(mapRepositoryOverrideFailure(contextDisplayName, failure))\n            );\n        }"
            },
            {
              "step": 11,
              "variableName": "new TypedResolveException(...) : TypedResolveException",
              "startLine": 70,
              "startColumn": 20,
              "endLine": 74,
              "endColumn": 14,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "TypedResolveException",
              "code": "\n    public TypedResolveException mapFailure(Throwable failure, String type, String contextDisplayName) {\n        if (!(failure instanceof TypedResolveException)) {\n            return new TypedResolveException(\n                type,\n                contextDisplayName,\n                ImmutableList.of(mapRepositoryOverrideFailure(contextDisplayName, failure))"
            },
            {
              "step": 12,
              "variableName": "exceptionMapper.mapFailure(e, \"dependencies\", displayName.getDisplayName())",
              "startLine": 772,
              "startColumn": 27,
              "endLine": 772,
              "endColumn": 102,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/configurations/DefaultConfiguration.java",
              "type": "TypedResolveException",
              "code": "                try {\n                    results = resolver.resolveGraph(DefaultConfiguration.this);\n                } catch (Exception e) {\n                    throw exceptionMapper.mapFailure(e, \"dependencies\", displayName.getDisplayName());\n                }\n\n                // Make the new state visible in case a dependency resolution listener queries the result, which requires the new state"
            },
            {
              "step": 13,
              "variableName": "e",
              "startLine": 772,
              "startColumn": 54,
              "endLine": 772,
              "endColumn": 55,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/configurations/DefaultConfiguration.java",
              "type": "Exception",
              "code": "                try {\n                    results = resolver.resolveGraph(DefaultConfiguration.this);\n                } catch (Exception e) {\n                    throw exceptionMapper.mapFailure(e, \"dependencies\", displayName.getDisplayName());\n                }\n\n                // Make the new state visible in case a dependency resolution listener queries the result, which requires the new state"
            },
            {
              "step": 14,
              "variableName": "Throwable failure",
              "startLine": 68,
              "startColumn": 45,
              "endLine": 68,
              "endColumn": 62,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Throwable",
              "code": "        return mapFailure(failure, type, displayName);\n    }\n\n    public TypedResolveException mapFailure(Throwable failure, String type, String contextDisplayName) {\n        if (!(failure instanceof TypedResolveException)) {\n            return new TypedResolveException(\n                type,"
            },
            {
              "step": 15,
              "variableName": "failure",
              "startLine": 73,
              "startColumn": 83,
              "endLine": 73,
              "endColumn": 90,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Throwable",
              "code": "            return new TypedResolveException(\n                type,\n                contextDisplayName,\n                ImmutableList.of(mapRepositoryOverrideFailure(contextDisplayName, failure))\n            );\n        }\n"
            },
            {
              "step": 16,
              "variableName": "Throwable failure",
              "startLine": 94,
              "startColumn": 78,
              "endLine": 94,
              "endColumn": 95,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Throwable",
              "code": "\n    // TODO: We should handle this exception at the source instead of using instanceof to detect it after it is thrown.\n    //       We should try to avoid catching and analyzing runtime exceptions\n    public Throwable mapRepositoryOverrideFailure(String contextDisplayName, Throwable failure) {\n        if (!(failure instanceof ModuleVersionNotFoundException) || !settingsRepositoriesIgnored()) {\n            return failure;\n        }"
            },
            {
              "step": 17,
              "variableName": "failure",
              "startLine": 108,
              "startColumn": 35,
              "endLine": 108,
              "endColumn": 42,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Throwable",
              "code": "        return new TypedResolveException(\n            \"dependencies\",\n            contextDisplayName,\n            Collections.singleton(failure),\n            resolutions\n        );\n    }"
            },
            {
              "step": 18,
              "variableName": "Collections.singleton(failure)",
              "startLine": 108,
              "startColumn": 13,
              "endLine": 108,
              "endColumn": 43,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Set [<element>] : Throwable",
              "code": "        return new TypedResolveException(\n            \"dependencies\",\n            contextDisplayName,\n            Collections.singleton(failure),\n            resolutions\n        );\n    }"
            },
            {
              "step": 19,
              "variableName": "Collections.singleton(failure)",
              "startLine": 108,
              "startColumn": 13,
              "endLine": 108,
              "endColumn": 43,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Set",
              "code": "        return new TypedResolveException(\n            \"dependencies\",\n            contextDisplayName,\n            Collections.singleton(failure),\n            resolutions\n        );\n    }"
            },
            {
              "step": 20,
              "variableName": "Iterable<? extends Throwable> failures",
              "startLine": 42,
              "startColumn": 67,
              "endLine": 42,
              "endColumn": 105,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ivyservice/TypedResolveException.java",
              "type": "Set",
              "code": "    /**\n     * Creates a new instance with resolutions.\n     */\n    public TypedResolveException(String type, String displayName, Iterable<? extends Throwable> failures, List<String> resolutions) {\n        super(buildMessage(type, displayName), failures, false);\n        this.type = type;\n        this.resolutions = ImmutableList.copyOf(resolutions);"
            },
            {
              "step": 21,
              "variableName": "failures",
              "startLine": 43,
              "startColumn": 48,
              "endLine": 43,
              "endColumn": 56,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ivyservice/TypedResolveException.java",
              "type": "Set",
              "code": "     * Creates a new instance with resolutions.\n     */\n    public TypedResolveException(String type, String displayName, Iterable<? extends Throwable> failures, List<String> resolutions) {\n        super(buildMessage(type, displayName), failures, false);\n        this.type = type;\n        this.resolutions = ImmutableList.copyOf(resolutions);\n    }"
            },
            {
              "step": 22,
              "variableName": "Iterable<? extends Throwable> causes",
              "startLine": 77,
              "startColumn": 48,
              "endLine": 77,
              "endColumn": 84,
              "uri": "gradle-8.14.0/subprojects/core-api/src/main/java/org/gradle/api/artifacts/ResolveException.java",
              "type": "Set",
              "code": "     * @since 8.9\n     */\n    @Incubating\n    protected ResolveException(String message, Iterable<? extends Throwable> causes, @SuppressWarnings(\"unused\") boolean dummy) {\n        super(message, causes);\n    }\n}"
            },
            {
              "step": 23,
              "variableName": "causes",
              "startLine": 78,
              "startColumn": 24,
              "endLine": 78,
              "endColumn": 30,
              "uri": "gradle-8.14.0/subprojects/core-api/src/main/java/org/gradle/api/artifacts/ResolveException.java",
              "type": "Set",
              "code": "     */\n    @Incubating\n    protected ResolveException(String message, Iterable<? extends Throwable> causes, @SuppressWarnings(\"unused\") boolean dummy) {\n        super(message, causes);\n    }\n}\n"
            },
            {
              "step": 24,
              "variableName": "Iterable<? extends Throwable> causes",
              "startLine": 47,
              "startColumn": 55,
              "endLine": 47,
              "endColumn": 91,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "Set",
              "code": "        this.causes.addAll(Arrays.asList(causes));\n    }\n\n    public DefaultMultiCauseException(String message, Iterable<? extends Throwable> causes) {\n        super(message);\n        this.message = message;\n        initCauses(causes);"
            },
            {
              "step": 25,
              "variableName": "causes",
              "startLine": 50,
              "startColumn": 20,
              "endLine": 50,
              "endColumn": 26,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "Set",
              "code": "    public DefaultMultiCauseException(String message, Iterable<? extends Throwable> causes) {\n        super(message);\n        this.message = message;\n        initCauses(causes);\n    }\n\n    public DefaultMultiCauseException(Factory<String> messageFactory) {"
            },
            {
              "step": 26,
              "variableName": "Iterable<? extends Throwable> causes",
              "startLine": 112,
              "startColumn": 28,
              "endLine": 112,
              "endColumn": 64,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "Iterable",
              "code": "        return null;\n    }\n\n    public void initCauses(Iterable<? extends Throwable> causes) {\n        this.causes.clear();\n        for (Throwable cause : causes) {\n            this.causes.add(cause);"
            },
            {
              "step": 27,
              "variableName": "cause",
              "startLine": 115,
              "startColumn": 29,
              "endLine": 115,
              "endColumn": 34,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "Throwable",
              "code": "    public void initCauses(Iterable<? extends Throwable> causes) {\n        this.causes.clear();\n        for (Throwable cause : causes) {\n            this.causes.add(cause);\n        }\n    }\n"
            },
            {
              "step": 28,
              "variableName": "this.causes",
              "startLine": 115,
              "startColumn": 13,
              "endLine": 115,
              "endColumn": 24,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "CopyOnWriteArrayList [<element>] : Throwable",
              "code": "    public void initCauses(Iterable<? extends Throwable> causes) {\n        this.causes.clear();\n        for (Throwable cause : causes) {\n            this.causes.add(cause);\n        }\n    }\n"
            },
            {
              "step": 29,
              "variableName": "this",
              "startLine": 115,
              "startColumn": 13,
              "endLine": 115,
              "endColumn": 17,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "DefaultMultiCauseException [causes, <element>] : Throwable",
              "code": "    public void initCauses(Iterable<? extends Throwable> causes) {\n        this.causes.clear();\n        for (Throwable cause : causes) {\n            this.causes.add(cause);\n        }\n    }\n"
            },
            {
              "step": 30,
              "variableName": "projectConfigurationException",
              "startLine": 57,
              "startColumn": 17,
              "endLine": 57,
              "endColumn": 46,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/DefaultExceptionAnalyser.java",
              "type": "ProjectConfigurationException [causes, <element>] : Throwable",
              "code": "                }\n            }\n            if (!additionalFailures.isEmpty()) {\n                projectConfigurationException.initCauses(additionalFailures);\n                failures.add(transform(projectConfigurationException));\n            }\n        } else if (exception instanceof ServiceCreationException) {"
            },
            {
              "step": 31,
              "variableName": "projectConfigurationException",
              "startLine": 58,
              "startColumn": 40,
              "endLine": 58,
              "endColumn": 69,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/DefaultExceptionAnalyser.java",
              "type": "ProjectConfigurationException [causes, <element>] : Throwable",
              "code": "            }\n            if (!additionalFailures.isEmpty()) {\n                projectConfigurationException.initCauses(additionalFailures);\n                failures.add(transform(projectConfigurationException));\n            }\n        } else if (exception instanceof ServiceCreationException) {\n            failures.add(transform(new InitializationException(exception)));"
            },
            {
              "step": 32,
              "variableName": "transform(projectConfigurationException)",
              "startLine": 58,
              "startColumn": 30,
              "endLine": 58,
              "endColumn": 70,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/DefaultExceptionAnalyser.java",
              "type": "LocationAwareException",
              "code": "            }\n            if (!additionalFailures.isEmpty()) {\n                projectConfigurationException.initCauses(additionalFailures);\n                failures.add(transform(projectConfigurationException));\n            }\n        } else if (exception instanceof ServiceCreationException) {\n            failures.add(transform(new InitializationException(exception)));"
            },
            {
              "step": 33,
              "variableName": "failures",
              "startLine": 58,
              "startColumn": 17,
              "endLine": 58,
              "endColumn": 25,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/DefaultExceptionAnalyser.java",
              "type": "Collection [<element>] : LocationAwareException",
              "code": "            }\n            if (!additionalFailures.isEmpty()) {\n                projectConfigurationException.initCauses(additionalFailures);\n                failures.add(transform(projectConfigurationException));\n            }\n        } else if (exception instanceof ServiceCreationException) {\n            failures.add(transform(new InitializationException(exception)));"
            },
            {
              "step": 34,
              "variableName": "result",
              "startLine": 53,
              "startColumn": 54,
              "endLine": 53,
              "endColumn": 60,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/MultipleBuildFailuresExceptionAnalyser.java",
              "type": "ArrayList [<element>] : LocationAwareException",
              "code": "        for (Throwable failure : failures) {\n            if (failure instanceof MultipleBuildFailures) {\n                for (Throwable cause : ((MultipleBuildFailures) failure).getCauses()) {\n                    collector.collectFailures(cause, result);\n                }\n            } else {\n                collector.collectFailures(failure, result);"
            },
            {
              "step": 35,
              "variableName": "result",
              "startLine": 60,
              "startColumn": 39,
              "endLine": 60,
              "endColumn": 45,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/MultipleBuildFailuresExceptionAnalyser.java",
              "type": "ArrayList [<element>] : LocationAwareException",
              "code": "            }\n        }\n        if (result.size() == 1 && result.get(0) instanceof RuntimeException) {\n            return (RuntimeException) result.get(0);\n        } else {\n            return new MultipleBuildFailures(result);\n        }"
            },
            {
              "step": 36,
              "variableName": "result.get(0)",
              "startLine": 60,
              "startColumn": 39,
              "endLine": 60,
              "endColumn": 52,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/MultipleBuildFailuresExceptionAnalyser.java",
              "type": "LocationAwareException",
              "code": "            }\n        }\n        if (result.size() == 1 && result.get(0) instanceof RuntimeException) {\n            return (RuntimeException) result.get(0);\n        } else {\n            return new MultipleBuildFailures(result);\n        }"
            },
            {
              "step": 37,
              "variableName": "(RuntimeException) result.get(0)",
              "startLine": 60,
              "startColumn": 20,
              "endLine": 60,
              "endColumn": 52,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/MultipleBuildFailuresExceptionAnalyser.java",
              "type": "LocationAwareException",
              "code": "            }\n        }\n        if (result.size() == 1 && result.get(0) instanceof RuntimeException) {\n            return (RuntimeException) result.get(0);\n        } else {\n            return new MultipleBuildFailures(result);\n        }"
            },
            {
              "step": 38,
              "variableName": "exceptionAnalyser.transform(finishFailures)",
              "startLine": 72,
              "startColumn": 16,
              "endLine": 72,
              "endColumn": 59,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/internal/buildtree/DefaultBuildTreeFinishExecutor.java",
              "type": "LocationAwareException",
              "code": "            finishFailures.addAll(result.getFailures());\n        });\n\n        return exceptionAnalyser.transform(finishFailures);\n    }\n}\n"
            },
            {
              "step": 39,
              "variableName": "delegate.finishBuildTree(failures)",
              "startLine": 46,
              "startColumn": 28,
              "endLine": 46,
              "endColumn": 62,
              "uri": "gradle-8.14.0/subprojects/composite-builds/src/main/java/org/gradle/composite/internal/OperationFiringBuildTreeFinishExecutor.java",
              "type": "LocationAwareException",
              "code": "            @Override\n            public RuntimeException call(BuildOperationContext context) {\n                try {\n                    return delegate.finishBuildTree(failures);\n                } finally {\n                    context.setResult(RESULT);\n                }"
            },
            {
              "step": 40,
              "variableName": "buildOperation.call(context)",
              "startLine": 239,
              "startColumn": 21,
              "endLine": 239,
              "endColumn": 49,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/testFixtures/java/org/gradle/internal/operations/TestBuildOperationRunner.java",
              "type": "LocationAwareException",
              "code": "            TestBuildOperationContext context = new TestBuildOperationContext(record);\n            T t;\n            try {\n                t = buildOperation.call(context);\n            } catch (Throwable failure) {\n                if (record.failure == null) {\n                    record.failure = failure;"
            },
            {
              "step": 41,
              "variableName": "t",
              "startLine": 246,
              "startColumn": 20,
              "endLine": 246,
              "endColumn": 21,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/testFixtures/java/org/gradle/internal/operations/TestBuildOperationRunner.java",
              "type": "LocationAwareException",
              "code": "                }\n                throw throwAsUncheckedException(failure);\n            }\n            return t;\n        }\n\n        private <O extends BuildOperation> void execute(O buildOperation, BuildOperationWorker<O> worker) {"
            },
            {
              "step": 42,
              "variableName": "log.call(buildOperation)",
              "startLine": 51,
              "startColumn": 16,
              "endLine": 51,
              "endColumn": 40,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/testFixtures/java/org/gradle/internal/operations/TestBuildOperationRunner.java",
              "type": "LocationAwareException",
              "code": "\n    @Override\n    public <T> T call(CallableBuildOperation<T> buildOperation) {\n        return log.call(buildOperation);\n    }\n\n    @Override"
            },
            {
              "step": 43,
              "variableName": "ca",
              "startLine": 115,
              "startColumn": 5,
              "endLine": 121,
              "endColumn": 7,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/configurationcache/ConfigurationCacheBuildOperations.kt",
              "type": "LocationAwareException",
              "code": "\ninternal\nfun <T : Any> BuildOperationRunner.withModelLoadOperation(block: () -> T): T =\n    call(object : CallableBuildOperation<T> {\n        override fun description(): BuildOperationDescriptor.Builder = BuildOperationDescriptor\n            .displayName(\"Load model from configuration cache\")\n            .progressDisplayName(\"Loading model from configuration cache\")"
            },
            {
              "step": 44,
              "variableName": "ca",
              "startLine": 115,
              "startColumn": 5,
              "endLine": 121,
              "endColumn": 7,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/configurationcache/ConfigurationCacheBuildOperations.kt",
              "type": "LocationAwareException",
              "code": "\ninternal\nfun <T : Any> BuildOperationRunner.withModelLoadOperation(block: () -> T): T =\n    call(object : CallableBuildOperation<T> {\n        override fun description(): BuildOperationDescriptor.Builder = BuildOperationDescriptor\n            .displayName(\"Load model from configuration cache\")\n            .progressDisplayName(\"Loading model from configuration cache\")"
            },
            {
              "step": 45,
              "variableName": "b",
              "startLine": 635,
              "startColumn": 9,
              "endLine": 641,
              "endColumn": 10,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "        // No need to record the `ClassLoaderScope` tree when loading\n        scopeRegistryListener.dispose()\n\n        buildOperationRunner.withModelLoadOperation {\n            val storeLoadResult = entryStore.useForStateLoad(StateType.Model) { stateFile: ConfigurationCacheStateFile ->\n                cacheIO.readModelFrom(stateFile)\n            }"
            },
            {
              "step": 46,
              "variableName": "block()",
              "startLine": 668,
              "startColumn": 22,
              "endLine": 668,
              "endColumn": 29,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "    private\n    inline fun <T> runAtConfigurationTime(block: () -> T): T {\n        prepareConfigurationTimeBarrier()\n        val result = block()\n        crossConfigurationTimeBarrier()\n        return result\n    }"
            },
            {
              "step": 47,
              "variableName": "result",
              "startLine": 670,
              "startColumn": 16,
              "endLine": 670,
              "endColumn": 22,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "        prepareConfigurationTimeBarrier()\n        val result = block()\n        crossConfigurationTimeBarrier()\n        return result\n    }\n\n    private"
            },
            {
              "step": 48,
              "variableName": "runAtConfigurationTime(...) : LocationAwareException",
              "startLine": 631,
              "startColumn": 28,
              "endLine": 642,
              "endColumn": 6,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "    data class LoadResultMetadata(val originInvocationId: String? = null)\n\n    private\n    fun loadModel(): Any = runAtConfigurationTime {\n        // No need to record the `ClassLoaderScope` tree when loading\n        scopeRegistryListener.dispose()\n"
            },
            {
              "step": 49,
              "variableName": "loadModel()",
              "startLine": 268,
              "startColumn": 20,
              "endLine": 268,
              "endColumn": 31,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "    override fun <T : Any> loadOrCreateModel(creator: () -> T): T {\n        if (isLoaded) {\n            runLoadedSideEffects()\n            return loadModel().uncheckedCast()\n        }\n\n        return runWorkThatContributesToCacheEntry {"
            },
            {
              "step": 50,
              "variableName": "Any",
              "startLine": 22,
              "startColumn": 15,
              "endLine": 22,
              "endColumn": 18,
              "uri": "gradle-8.14.0/platforms/core-configuration/stdlib-kotlin-extensions/src/main/kotlin/org/gradle/internal/extensions/stdlib/CastExtensions.kt",
              "type": "Object",
              "code": "import org.gradle.internal.Cast\n\n\nfun <T : Any> Any.uncheckedCast(): T =\n    Cast.uncheckedNonnullCast(this)\n"
            },
            {
              "step": 51,
              "variableName": "this",
              "startLine": 23,
              "startColumn": 31,
              "endLine": 23,
              "endColumn": 35,
              "uri": "gradle-8.14.0/platforms/core-configuration/stdlib-kotlin-extensions/src/main/kotlin/org/gradle/internal/extensions/stdlib/CastExtensions.kt",
              "type": "Object",
              "code": "\n\nfun <T : Any> Any.uncheckedCast(): T =\n    Cast.uncheckedNonnullCast(this)\n"
            },
            {
              "step": 52,
              "variableName": "Object object",
              "startLine": 76,
              "startColumn": 46,
              "endLine": 76,
              "endColumn": 59,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/Cast.java",
              "type": "Object",
              "code": "    }\n\n    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})\n    public static <T> T uncheckedNonnullCast(Object object) {\n        return (T) object;\n    }\n}"
            },
            {
              "step": 53,
              "variableName": "(T) object",
              "startLine": 77,
              "startColumn": 16,
              "endLine": 77,
              "endColumn": 26,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/Cast.java",
              "type": "Object",
              "code": "\n    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})\n    public static <T> T uncheckedNonnullCast(Object object) {\n        return (T) object;\n    }\n}\n"
            },
            {
              "step": 54,
              "variableName": "Cast.uncheckedNonnullCast(collectionType)",
              "startLine": 223,
              "startColumn": 16,
              "endLine": 223,
              "endColumn": 57,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/api/internal/provider/AbstractCollectionProperty.java",
              "type": "Class",
              "code": "    @Override\n    @Nonnull\n    public Class<C> getType() {\n        return Cast.uncheckedNonnullCast(collectionType);\n    }\n\n    @Override"
            },
            {
              "step": 55,
              "variableName": "provider.getType()",
              "startLine": 41,
              "startColumn": 35,
              "endLine": 41,
              "endColumn": 53,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/api/internal/provider/OrElseFixedValueProvider.java",
              "type": "Class",
              "code": "    @Nullable\n    @Override\n    public Class<T> getType() {\n        return Cast.uncheckedCast(provider.getType());\n    }\n\n    @Override"
            },
            {
              "step": 56,
              "variableName": "@Nullable Object object",
              "startLine": 71,
              "startColumn": 39,
              "endLine": 71,
              "endColumn": 62,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/Cast.java",
              "type": "Object",
              "code": "\n    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})\n    @Nullable\n    public static <T> T uncheckedCast(@Nullable Object object) {\n        return (T) object;\n    }\n"
            },
            {
              "step": 57,
              "variableName": "(T) object",
              "startLine": 72,
              "startColumn": 16,
              "endLine": 72,
              "endColumn": 26,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/Cast.java",
              "type": "Object",
              "code": "    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})\n    @Nullable\n    public static <T> T uncheckedCast(@Nullable Object object) {\n        return (T) object;\n    }\n\n    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})"
            },
            {
              "step": 58,
              "variableName": "Cast.uncheckedCast(sanitizer.sanitize(t))",
              "startLine": 41,
              "startColumn": 15,
              "endLine": 41,
              "endColumn": 56,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/api/internal/provider/TypeSanitizingTransformer.java",
              "type": "Object",
              "code": "\n    @Override\n    public T transform(T t) {\n        T v = Cast.uncheckedCast(sanitizer.sanitize(t));\n        if (targetType.isInstance(v)) {\n            return v;\n        }"
            },
            {
              "step": 59,
              "variableName": "v",
              "startLine": 43,
              "startColumn": 20,
              "endLine": 43,
              "endColumn": 21,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/api/internal/provider/TypeSanitizingTransformer.java",
              "type": "Object",
              "code": "    public T transform(T t) {\n        T v = Cast.uncheckedCast(sanitizer.sanitize(t));\n        if (targetType.isInstance(v)) {\n            return v;\n        }\n        throw new IllegalArgumentException(String.format(\"Cannot get the value of %s of type %s as the provider associated with this property returned a value of type %s.\", owner.getDisplayName(), targetType.getName(), v.getClass().getName()));\n    }"
            },
            {
              "step": 60,
              "variableName": "describer.transform(this)",
              "startLine": 163,
              "startColumn": 16,
              "endLine": 163,
              "endColumn": 41,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/repositories/DefaultMavenArtifactRepository.java",
              "type": "String",
              "code": "\n    @Override\n    public String getDisplayName() {\n        return describer.transform(this);\n    }\n\n    @Override"
            },
            {
              "step": 61,
              "variableName": "displayName.getDisplayName()",
              "startLine": 53,
              "startColumn": 16,
              "endLine": 53,
              "endColumn": 44,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/DefaultDependencySet.java",
              "type": "String",
              "code": "\n    @Override\n    public String toString() {\n        return displayName.getDisplayName();\n    }\n\n    @Override"
            },
            {
              "step": 62,
              "variableName": "literal.toString()",
              "startLine": 583,
              "startColumn": 20,
              "endLine": 583,
              "endColumn": 38,
              "uri": "gradle-8.14.0/platforms/software/build-init/src/main/java/org/gradle/buildinit/plugins/internal/BuildScriptBuilder.java",
              "type": "String",
              "code": "\n        @Override\n        public String with(Syntax syntax) {\n            return literal.toString();\n        }\n    }\n"
            },
            {
              "step": 63,
              "variableName": "propertyValue.with(this)",
              "startLine": 2113,
              "startColumn": 75,
              "endLine": 2113,
              "endColumn": 99,
              "uri": "gradle-8.14.0/platforms/software/build-init/src/main/java/org/gradle/buildinit/plugins/internal/BuildScriptBuilder.java",
              "type": "String",
              "code": "            ExpressionValue propertyValue = expression.propertyValue;\n            if (expression.assignOperator) {\n                if (propertyValue.isBooleanType()) {\n                    return booleanPropertyNameFor(propertyName) + \" = \" + propertyValue.with(this);\n                }\n                return propertyName + \" = \" + propertyValue.with(this);\n            } else {"
            },
            {
              "step": 64,
              "variableName": "booleanPropertyNameFor(propertyName) + \" = \" + propertyValue.with(this)",
              "startLine": 2113,
              "startColumn": 28,
              "endLine": 2113,
              "endColumn": 99,
              "uri": "gradle-8.14.0/platforms/software/build-init/src/main/java/org/gradle/buildinit/plugins/internal/BuildScriptBuilder.java",
              "type": "String",
              "code": "            ExpressionValue propertyValue = expression.propertyValue;\n            if (expression.assignOperator) {\n                if (propertyValue.isBooleanType()) {\n                    return booleanPropertyNameFor(propertyName) + \" = \" + propertyValue.with(this);\n                }\n                return propertyName + \" = \" + propertyValue.with(this);\n            } else {"
            },
            {
              "step": 65,
              "variableName": "printer.syntax.propertyAssignment(this)",
              "startLine": 1050,
              "startColumn": 29,
              "endLine": 1050,
              "endColumn": 68,
              "uri": "gradle-8.14.0/platforms/software/build-init/src/main/java/org/gradle/buildinit/plugins/internal/BuildScriptBuilder.java",
              "type": "String",
              "code": "\n        @Override\n        public void writeCodeTo(PrettyPrinter printer) {\n            printer.println(printer.syntax.propertyAssignment(this));\n        }\n    }\n"
            },
            {
              "step": 66,
              "variableName": "String s",
              "startLine": 1976,
              "startColumn": 30,
              "endLine": 1976,
              "endColumn": 38,
              "uri": "gradle-8.14.0/platforms/software/build-init/src/main/java/org/gradle/buildinit/plugins/internal/BuildScriptBuilder.java",
              "type": "String",
              "code": "            }\n        }\n\n        private void println(String s) {\n            if (!indent.isEmpty()) {\n                writer.print(indent);\n            }"
            },
            {
              "step": 67,
              "variableName": "s",
              "startLine": 1981,
              "startColumn": 32,
              "endLine": 1981,
              "endColumn": 33,
              "uri": "gradle-8.14.0/platforms/software/build-init/src/main/java/org/gradle/buildinit/plugins/internal/BuildScriptBuilder.java",
              "type": "String",
              "code": "                writer.print(indent);\n            }\n            if (eolComment != null) {\n                writer.println(s + eolComment);\n                eolComment = null;\n            } else {\n                writer.println(s);"
            },
            {
              "step": 68,
              "variableName": "s + eolComment",
              "startLine": 1981,
              "startColumn": 32,
              "endLine": 1981,
              "endColumn": 46,
              "uri": "gradle-8.14.0/platforms/software/build-init/src/main/java/org/gradle/buildinit/plugins/internal/BuildScriptBuilder.java",
              "type": "",
              "code": "                writer.print(indent);\n            }\n            if (eolComment != null) {\n                writer.println(s + eolComment);\n                eolComment = null;\n            } else {\n                writer.println(s);"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "src",
              "startLine": 115,
              "startColumn": 13,
              "endLine": 115,
              "endColumn": 16,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "Object",
              "code": "    }\n\n    private static void appendDisplayName(Object src, StringBuilder stringBuilder) {\n        if (src instanceof Describable) {\n            Describable describable = (Describable) src;\n            stringBuilder.append(describable.getDisplayName());\n        } else {"
            },
            {
              "step": 1,
              "variableName": "src",
              "startLine": 119,
              "startColumn": 34,
              "endLine": 119,
              "endColumn": 37,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "Object",
              "code": "            Describable describable = (Describable) src;\n            stringBuilder.append(describable.getDisplayName());\n        } else {\n            stringBuilder.append(src.toString());\n        }\n    }\n"
            },
            {
              "step": 2,
              "variableName": "toString",
              "startLine": 397,
              "startColumn": 19,
              "endLine": 397,
              "endColumn": 27,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "TestFile",
              "code": "    }\n\n    @Override\n    public String toString() {\n        return getPath();\n    }\n"
            },
            {
              "step": 3,
              "variableName": "getPath()",
              "startLine": 398,
              "startColumn": 16,
              "endLine": 398,
              "endColumn": 25,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "TestFile",
              "code": "\n    @Override\n    public String toString() {\n        return getPath();\n    }\n\n    public TestFile writelns(Iterable<String> lines) {"
            },
            {
              "step": 4,
              "variableName": "getPath()",
              "startLine": 398,
              "startColumn": 16,
              "endLine": 398,
              "endColumn": 25,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "String",
              "code": "\n    @Override\n    public String toString() {\n        return getPath();\n    }\n\n    public TestFile writelns(Iterable<String> lines) {"
            },
            {
              "step": 5,
              "variableName": "src.toString()",
              "startLine": 119,
              "startColumn": 34,
              "endLine": 119,
              "endColumn": 48,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "String",
              "code": "            Describable describable = (Describable) src;\n            stringBuilder.append(describable.getDisplayName());\n        } else {\n            stringBuilder.append(src.toString());\n        }\n    }\n"
            },
            {
              "step": 6,
              "variableName": "stringBuilder",
              "startLine": 119,
              "startColumn": 13,
              "endLine": 119,
              "endColumn": 26,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "StringBuilder",
              "code": "            Describable describable = (Describable) src;\n            stringBuilder.append(describable.getDisplayName());\n        } else {\n            stringBuilder.append(src.toString());\n        }\n    }\n"
            },
            {
              "step": 7,
              "variableName": "builder",
              "startLine": 202,
              "startColumn": 38,
              "endLine": 202,
              "endColumn": 45,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "StringBuilder",
              "code": "            StringBuilder builder = new StringBuilder(48);\n            appendDisplayName(part1, builder);\n            builder.append(' ');\n            appendDisplayName(part2, builder);\n            return builder.toString();\n        }\n"
            },
            {
              "step": 8,
              "variableName": "builder",
              "startLine": 203,
              "startColumn": 20,
              "endLine": 203,
              "endColumn": 27,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "StringBuilder",
              "code": "            appendDisplayName(part1, builder);\n            builder.append(' ');\n            appendDisplayName(part2, builder);\n            return builder.toString();\n        }\n\n        @Override"
            },
            {
              "step": 9,
              "variableName": "builder.toString()",
              "startLine": 203,
              "startColumn": 20,
              "endLine": 203,
              "endColumn": 38,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "String",
              "code": "            appendDisplayName(part1, builder);\n            builder.append(' ');\n            appendDisplayName(part2, builder);\n            return builder.toString();\n        }\n\n        @Override"
            },
            {
              "step": 10,
              "variableName": "describable.getDisplayName()",
              "startLine": 313,
              "startColumn": 35,
              "endLine": 313,
              "endColumn": 63,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "String",
              "code": "        public String getDisplayName() {\n            synchronized (this) {\n                if (displayName == null) {\n                    displayName = describable.getDisplayName();\n                    if (capDisplayName != null || !(describable instanceof DisplayName)) {\n                        describable = null;\n                    }"
            },
            {
              "step": 11,
              "variableName": "displayName",
              "startLine": 318,
              "startColumn": 24,
              "endLine": 318,
              "endColumn": 35,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "String",
              "code": "                        describable = null;\n                    }\n                }\n                return displayName;\n            }\n        }\n    }"
            },
            {
              "step": 12,
              "variableName": "displayName.getDisplayName()",
              "startLine": 772,
              "startColumn": 73,
              "endLine": 772,
              "endColumn": 101,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/configurations/DefaultConfiguration.java",
              "type": "String",
              "code": "                try {\n                    results = resolver.resolveGraph(DefaultConfiguration.this);\n                } catch (Exception e) {\n                    throw exceptionMapper.mapFailure(e, \"dependencies\", displayName.getDisplayName());\n                }\n\n                // Make the new state visible in case a dependency resolution listener queries the result, which requires the new state"
            },
            {
              "step": 13,
              "variableName": "String contextDisplayName",
              "startLine": 68,
              "startColumn": 77,
              "endLine": 68,
              "endColumn": 102,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "String",
              "code": "        return mapFailure(failure, type, displayName);\n    }\n\n    public TypedResolveException mapFailure(Throwable failure, String type, String contextDisplayName) {\n        if (!(failure instanceof TypedResolveException)) {\n            return new TypedResolveException(\n                type,"
            },
            {
              "step": 14,
              "variableName": "contextDisplayName",
              "startLine": 72,
              "startColumn": 17,
              "endLine": 72,
              "endColumn": 35,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "String",
              "code": "        if (!(failure instanceof TypedResolveException)) {\n            return new TypedResolveException(\n                type,\n                contextDisplayName,\n                ImmutableList.of(mapRepositoryOverrideFailure(contextDisplayName, failure))\n            );\n        }"
            },
            {
              "step": 15,
              "variableName": "new TypedResolveException(...) : TypedResolveException",
              "startLine": 70,
              "startColumn": 20,
              "endLine": 74,
              "endColumn": 14,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "TypedResolveException",
              "code": "\n    public TypedResolveException mapFailure(Throwable failure, String type, String contextDisplayName) {\n        if (!(failure instanceof TypedResolveException)) {\n            return new TypedResolveException(\n                type,\n                contextDisplayName,\n                ImmutableList.of(mapRepositoryOverrideFailure(contextDisplayName, failure))"
            },
            {
              "step": 16,
              "variableName": "exceptionMapper.mapFailure(e, \"dependencies\", displayName.getDisplayName())",
              "startLine": 772,
              "startColumn": 27,
              "endLine": 772,
              "endColumn": 102,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/configurations/DefaultConfiguration.java",
              "type": "TypedResolveException",
              "code": "                try {\n                    results = resolver.resolveGraph(DefaultConfiguration.this);\n                } catch (Exception e) {\n                    throw exceptionMapper.mapFailure(e, \"dependencies\", displayName.getDisplayName());\n                }\n\n                // Make the new state visible in case a dependency resolution listener queries the result, which requires the new state"
            },
            {
              "step": 17,
              "variableName": "e",
              "startLine": 772,
              "startColumn": 54,
              "endLine": 772,
              "endColumn": 55,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/configurations/DefaultConfiguration.java",
              "type": "Exception",
              "code": "                try {\n                    results = resolver.resolveGraph(DefaultConfiguration.this);\n                } catch (Exception e) {\n                    throw exceptionMapper.mapFailure(e, \"dependencies\", displayName.getDisplayName());\n                }\n\n                // Make the new state visible in case a dependency resolution listener queries the result, which requires the new state"
            },
            {
              "step": 18,
              "variableName": "Throwable failure",
              "startLine": 68,
              "startColumn": 45,
              "endLine": 68,
              "endColumn": 62,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Throwable",
              "code": "        return mapFailure(failure, type, displayName);\n    }\n\n    public TypedResolveException mapFailure(Throwable failure, String type, String contextDisplayName) {\n        if (!(failure instanceof TypedResolveException)) {\n            return new TypedResolveException(\n                type,"
            },
            {
              "step": 19,
              "variableName": "failure",
              "startLine": 73,
              "startColumn": 83,
              "endLine": 73,
              "endColumn": 90,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Throwable",
              "code": "            return new TypedResolveException(\n                type,\n                contextDisplayName,\n                ImmutableList.of(mapRepositoryOverrideFailure(contextDisplayName, failure))\n            );\n        }\n"
            },
            {
              "step": 20,
              "variableName": "Throwable failure",
              "startLine": 94,
              "startColumn": 78,
              "endLine": 94,
              "endColumn": 95,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Throwable",
              "code": "\n    // TODO: We should handle this exception at the source instead of using instanceof to detect it after it is thrown.\n    //       We should try to avoid catching and analyzing runtime exceptions\n    public Throwable mapRepositoryOverrideFailure(String contextDisplayName, Throwable failure) {\n        if (!(failure instanceof ModuleVersionNotFoundException) || !settingsRepositoriesIgnored()) {\n            return failure;\n        }"
            },
            {
              "step": 21,
              "variableName": "failure",
              "startLine": 108,
              "startColumn": 35,
              "endLine": 108,
              "endColumn": 42,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Throwable",
              "code": "        return new TypedResolveException(\n            \"dependencies\",\n            contextDisplayName,\n            Collections.singleton(failure),\n            resolutions\n        );\n    }"
            },
            {
              "step": 22,
              "variableName": "Collections.singleton(failure)",
              "startLine": 108,
              "startColumn": 13,
              "endLine": 108,
              "endColumn": 43,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Set [<element>] : Throwable",
              "code": "        return new TypedResolveException(\n            \"dependencies\",\n            contextDisplayName,\n            Collections.singleton(failure),\n            resolutions\n        );\n    }"
            },
            {
              "step": 23,
              "variableName": "Collections.singleton(failure)",
              "startLine": 108,
              "startColumn": 13,
              "endLine": 108,
              "endColumn": 43,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Set",
              "code": "        return new TypedResolveException(\n            \"dependencies\",\n            contextDisplayName,\n            Collections.singleton(failure),\n            resolutions\n        );\n    }"
            },
            {
              "step": 24,
              "variableName": "Iterable<? extends Throwable> failures",
              "startLine": 42,
              "startColumn": 67,
              "endLine": 42,
              "endColumn": 105,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ivyservice/TypedResolveException.java",
              "type": "Set",
              "code": "    /**\n     * Creates a new instance with resolutions.\n     */\n    public TypedResolveException(String type, String displayName, Iterable<? extends Throwable> failures, List<String> resolutions) {\n        super(buildMessage(type, displayName), failures, false);\n        this.type = type;\n        this.resolutions = ImmutableList.copyOf(resolutions);"
            },
            {
              "step": 25,
              "variableName": "failures",
              "startLine": 43,
              "startColumn": 48,
              "endLine": 43,
              "endColumn": 56,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ivyservice/TypedResolveException.java",
              "type": "Set",
              "code": "     * Creates a new instance with resolutions.\n     */\n    public TypedResolveException(String type, String displayName, Iterable<? extends Throwable> failures, List<String> resolutions) {\n        super(buildMessage(type, displayName), failures, false);\n        this.type = type;\n        this.resolutions = ImmutableList.copyOf(resolutions);\n    }"
            },
            {
              "step": 26,
              "variableName": "Iterable<? extends Throwable> causes",
              "startLine": 77,
              "startColumn": 48,
              "endLine": 77,
              "endColumn": 84,
              "uri": "gradle-8.14.0/subprojects/core-api/src/main/java/org/gradle/api/artifacts/ResolveException.java",
              "type": "Set",
              "code": "     * @since 8.9\n     */\n    @Incubating\n    protected ResolveException(String message, Iterable<? extends Throwable> causes, @SuppressWarnings(\"unused\") boolean dummy) {\n        super(message, causes);\n    }\n}"
            },
            {
              "step": 27,
              "variableName": "causes",
              "startLine": 78,
              "startColumn": 24,
              "endLine": 78,
              "endColumn": 30,
              "uri": "gradle-8.14.0/subprojects/core-api/src/main/java/org/gradle/api/artifacts/ResolveException.java",
              "type": "Set",
              "code": "     */\n    @Incubating\n    protected ResolveException(String message, Iterable<? extends Throwable> causes, @SuppressWarnings(\"unused\") boolean dummy) {\n        super(message, causes);\n    }\n}\n"
            },
            {
              "step": 28,
              "variableName": "Iterable<? extends Throwable> causes",
              "startLine": 47,
              "startColumn": 55,
              "endLine": 47,
              "endColumn": 91,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "Set",
              "code": "        this.causes.addAll(Arrays.asList(causes));\n    }\n\n    public DefaultMultiCauseException(String message, Iterable<? extends Throwable> causes) {\n        super(message);\n        this.message = message;\n        initCauses(causes);"
            },
            {
              "step": 29,
              "variableName": "causes",
              "startLine": 50,
              "startColumn": 20,
              "endLine": 50,
              "endColumn": 26,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "Set",
              "code": "    public DefaultMultiCauseException(String message, Iterable<? extends Throwable> causes) {\n        super(message);\n        this.message = message;\n        initCauses(causes);\n    }\n\n    public DefaultMultiCauseException(Factory<String> messageFactory) {"
            },
            {
              "step": 30,
              "variableName": "Iterable<? extends Throwable> causes",
              "startLine": 112,
              "startColumn": 28,
              "endLine": 112,
              "endColumn": 64,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "Iterable",
              "code": "        return null;\n    }\n\n    public void initCauses(Iterable<? extends Throwable> causes) {\n        this.causes.clear();\n        for (Throwable cause : causes) {\n            this.causes.add(cause);"
            },
            {
              "step": 31,
              "variableName": "cause",
              "startLine": 115,
              "startColumn": 29,
              "endLine": 115,
              "endColumn": 34,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "Throwable",
              "code": "    public void initCauses(Iterable<? extends Throwable> causes) {\n        this.causes.clear();\n        for (Throwable cause : causes) {\n            this.causes.add(cause);\n        }\n    }\n"
            },
            {
              "step": 32,
              "variableName": "this.causes",
              "startLine": 115,
              "startColumn": 13,
              "endLine": 115,
              "endColumn": 24,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "CopyOnWriteArrayList [<element>] : Throwable",
              "code": "    public void initCauses(Iterable<? extends Throwable> causes) {\n        this.causes.clear();\n        for (Throwable cause : causes) {\n            this.causes.add(cause);\n        }\n    }\n"
            },
            {
              "step": 33,
              "variableName": "this",
              "startLine": 115,
              "startColumn": 13,
              "endLine": 115,
              "endColumn": 17,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "DefaultMultiCauseException [causes, <element>] : Throwable",
              "code": "    public void initCauses(Iterable<? extends Throwable> causes) {\n        this.causes.clear();\n        for (Throwable cause : causes) {\n            this.causes.add(cause);\n        }\n    }\n"
            },
            {
              "step": 34,
              "variableName": "projectConfigurationException",
              "startLine": 57,
              "startColumn": 17,
              "endLine": 57,
              "endColumn": 46,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/DefaultExceptionAnalyser.java",
              "type": "ProjectConfigurationException [causes, <element>] : Throwable",
              "code": "                }\n            }\n            if (!additionalFailures.isEmpty()) {\n                projectConfigurationException.initCauses(additionalFailures);\n                failures.add(transform(projectConfigurationException));\n            }\n        } else if (exception instanceof ServiceCreationException) {"
            },
            {
              "step": 35,
              "variableName": "projectConfigurationException",
              "startLine": 58,
              "startColumn": 40,
              "endLine": 58,
              "endColumn": 69,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/DefaultExceptionAnalyser.java",
              "type": "ProjectConfigurationException [causes, <element>] : Throwable",
              "code": "            }\n            if (!additionalFailures.isEmpty()) {\n                projectConfigurationException.initCauses(additionalFailures);\n                failures.add(transform(projectConfigurationException));\n            }\n        } else if (exception instanceof ServiceCreationException) {\n            failures.add(transform(new InitializationException(exception)));"
            },
            {
              "step": 36,
              "variableName": "transform(projectConfigurationException)",
              "startLine": 58,
              "startColumn": 30,
              "endLine": 58,
              "endColumn": 70,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/DefaultExceptionAnalyser.java",
              "type": "LocationAwareException",
              "code": "            }\n            if (!additionalFailures.isEmpty()) {\n                projectConfigurationException.initCauses(additionalFailures);\n                failures.add(transform(projectConfigurationException));\n            }\n        } else if (exception instanceof ServiceCreationException) {\n            failures.add(transform(new InitializationException(exception)));"
            },
            {
              "step": 37,
              "variableName": "failures",
              "startLine": 58,
              "startColumn": 17,
              "endLine": 58,
              "endColumn": 25,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/DefaultExceptionAnalyser.java",
              "type": "Collection [<element>] : LocationAwareException",
              "code": "            }\n            if (!additionalFailures.isEmpty()) {\n                projectConfigurationException.initCauses(additionalFailures);\n                failures.add(transform(projectConfigurationException));\n            }\n        } else if (exception instanceof ServiceCreationException) {\n            failures.add(transform(new InitializationException(exception)));"
            },
            {
              "step": 38,
              "variableName": "result",
              "startLine": 53,
              "startColumn": 54,
              "endLine": 53,
              "endColumn": 60,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/MultipleBuildFailuresExceptionAnalyser.java",
              "type": "ArrayList [<element>] : LocationAwareException",
              "code": "        for (Throwable failure : failures) {\n            if (failure instanceof MultipleBuildFailures) {\n                for (Throwable cause : ((MultipleBuildFailures) failure).getCauses()) {\n                    collector.collectFailures(cause, result);\n                }\n            } else {\n                collector.collectFailures(failure, result);"
            },
            {
              "step": 39,
              "variableName": "result",
              "startLine": 60,
              "startColumn": 39,
              "endLine": 60,
              "endColumn": 45,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/MultipleBuildFailuresExceptionAnalyser.java",
              "type": "ArrayList [<element>] : LocationAwareException",
              "code": "            }\n        }\n        if (result.size() == 1 && result.get(0) instanceof RuntimeException) {\n            return (RuntimeException) result.get(0);\n        } else {\n            return new MultipleBuildFailures(result);\n        }"
            },
            {
              "step": 40,
              "variableName": "result.get(0)",
              "startLine": 60,
              "startColumn": 39,
              "endLine": 60,
              "endColumn": 52,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/MultipleBuildFailuresExceptionAnalyser.java",
              "type": "LocationAwareException",
              "code": "            }\n        }\n        if (result.size() == 1 && result.get(0) instanceof RuntimeException) {\n            return (RuntimeException) result.get(0);\n        } else {\n            return new MultipleBuildFailures(result);\n        }"
            },
            {
              "step": 41,
              "variableName": "(RuntimeException) result.get(0)",
              "startLine": 60,
              "startColumn": 20,
              "endLine": 60,
              "endColumn": 52,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/MultipleBuildFailuresExceptionAnalyser.java",
              "type": "LocationAwareException",
              "code": "            }\n        }\n        if (result.size() == 1 && result.get(0) instanceof RuntimeException) {\n            return (RuntimeException) result.get(0);\n        } else {\n            return new MultipleBuildFailures(result);\n        }"
            },
            {
              "step": 42,
              "variableName": "exceptionAnalyser.transform(finishFailures)",
              "startLine": 72,
              "startColumn": 16,
              "endLine": 72,
              "endColumn": 59,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/internal/buildtree/DefaultBuildTreeFinishExecutor.java",
              "type": "LocationAwareException",
              "code": "            finishFailures.addAll(result.getFailures());\n        });\n\n        return exceptionAnalyser.transform(finishFailures);\n    }\n}\n"
            },
            {
              "step": 43,
              "variableName": "delegate.finishBuildTree(failures)",
              "startLine": 46,
              "startColumn": 28,
              "endLine": 46,
              "endColumn": 62,
              "uri": "gradle-8.14.0/subprojects/composite-builds/src/main/java/org/gradle/composite/internal/OperationFiringBuildTreeFinishExecutor.java",
              "type": "LocationAwareException",
              "code": "            @Override\n            public RuntimeException call(BuildOperationContext context) {\n                try {\n                    return delegate.finishBuildTree(failures);\n                } finally {\n                    context.setResult(RESULT);\n                }"
            },
            {
              "step": 44,
              "variableName": "buildOperation.call(context)",
              "startLine": 239,
              "startColumn": 21,
              "endLine": 239,
              "endColumn": 49,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/testFixtures/java/org/gradle/internal/operations/TestBuildOperationRunner.java",
              "type": "LocationAwareException",
              "code": "            TestBuildOperationContext context = new TestBuildOperationContext(record);\n            T t;\n            try {\n                t = buildOperation.call(context);\n            } catch (Throwable failure) {\n                if (record.failure == null) {\n                    record.failure = failure;"
            },
            {
              "step": 45,
              "variableName": "t",
              "startLine": 246,
              "startColumn": 20,
              "endLine": 246,
              "endColumn": 21,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/testFixtures/java/org/gradle/internal/operations/TestBuildOperationRunner.java",
              "type": "LocationAwareException",
              "code": "                }\n                throw throwAsUncheckedException(failure);\n            }\n            return t;\n        }\n\n        private <O extends BuildOperation> void execute(O buildOperation, BuildOperationWorker<O> worker) {"
            },
            {
              "step": 46,
              "variableName": "log.call(buildOperation)",
              "startLine": 51,
              "startColumn": 16,
              "endLine": 51,
              "endColumn": 40,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/testFixtures/java/org/gradle/internal/operations/TestBuildOperationRunner.java",
              "type": "LocationAwareException",
              "code": "\n    @Override\n    public <T> T call(CallableBuildOperation<T> buildOperation) {\n        return log.call(buildOperation);\n    }\n\n    @Override"
            },
            {
              "step": 47,
              "variableName": "ca",
              "startLine": 115,
              "startColumn": 5,
              "endLine": 121,
              "endColumn": 7,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/configurationcache/ConfigurationCacheBuildOperations.kt",
              "type": "LocationAwareException",
              "code": "\ninternal\nfun <T : Any> BuildOperationRunner.withModelLoadOperation(block: () -> T): T =\n    call(object : CallableBuildOperation<T> {\n        override fun description(): BuildOperationDescriptor.Builder = BuildOperationDescriptor\n            .displayName(\"Load model from configuration cache\")\n            .progressDisplayName(\"Loading model from configuration cache\")"
            },
            {
              "step": 48,
              "variableName": "ca",
              "startLine": 115,
              "startColumn": 5,
              "endLine": 121,
              "endColumn": 7,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/configurationcache/ConfigurationCacheBuildOperations.kt",
              "type": "LocationAwareException",
              "code": "\ninternal\nfun <T : Any> BuildOperationRunner.withModelLoadOperation(block: () -> T): T =\n    call(object : CallableBuildOperation<T> {\n        override fun description(): BuildOperationDescriptor.Builder = BuildOperationDescriptor\n            .displayName(\"Load model from configuration cache\")\n            .progressDisplayName(\"Loading model from configuration cache\")"
            },
            {
              "step": 49,
              "variableName": "b",
              "startLine": 635,
              "startColumn": 9,
              "endLine": 641,
              "endColumn": 10,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "        // No need to record the `ClassLoaderScope` tree when loading\n        scopeRegistryListener.dispose()\n\n        buildOperationRunner.withModelLoadOperation {\n            val storeLoadResult = entryStore.useForStateLoad(StateType.Model) { stateFile: ConfigurationCacheStateFile ->\n                cacheIO.readModelFrom(stateFile)\n            }"
            },
            {
              "step": 50,
              "variableName": "block()",
              "startLine": 668,
              "startColumn": 22,
              "endLine": 668,
              "endColumn": 29,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "    private\n    inline fun <T> runAtConfigurationTime(block: () -> T): T {\n        prepareConfigurationTimeBarrier()\n        val result = block()\n        crossConfigurationTimeBarrier()\n        return result\n    }"
            },
            {
              "step": 51,
              "variableName": "result",
              "startLine": 670,
              "startColumn": 16,
              "endLine": 670,
              "endColumn": 22,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "        prepareConfigurationTimeBarrier()\n        val result = block()\n        crossConfigurationTimeBarrier()\n        return result\n    }\n\n    private"
            },
            {
              "step": 52,
              "variableName": "runAtConfigurationTime(...) : LocationAwareException",
              "startLine": 631,
              "startColumn": 28,
              "endLine": 642,
              "endColumn": 6,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "    data class LoadResultMetadata(val originInvocationId: String? = null)\n\n    private\n    fun loadModel(): Any = runAtConfigurationTime {\n        // No need to record the `ClassLoaderScope` tree when loading\n        scopeRegistryListener.dispose()\n"
            },
            {
              "step": 53,
              "variableName": "loadModel()",
              "startLine": 268,
              "startColumn": 20,
              "endLine": 268,
              "endColumn": 31,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "    override fun <T : Any> loadOrCreateModel(creator: () -> T): T {\n        if (isLoaded) {\n            runLoadedSideEffects()\n            return loadModel().uncheckedCast()\n        }\n\n        return runWorkThatContributesToCacheEntry {"
            },
            {
              "step": 54,
              "variableName": "Any",
              "startLine": 22,
              "startColumn": 15,
              "endLine": 22,
              "endColumn": 18,
              "uri": "gradle-8.14.0/platforms/core-configuration/stdlib-kotlin-extensions/src/main/kotlin/org/gradle/internal/extensions/stdlib/CastExtensions.kt",
              "type": "Object",
              "code": "import org.gradle.internal.Cast\n\n\nfun <T : Any> Any.uncheckedCast(): T =\n    Cast.uncheckedNonnullCast(this)\n"
            },
            {
              "step": 55,
              "variableName": "this",
              "startLine": 23,
              "startColumn": 31,
              "endLine": 23,
              "endColumn": 35,
              "uri": "gradle-8.14.0/platforms/core-configuration/stdlib-kotlin-extensions/src/main/kotlin/org/gradle/internal/extensions/stdlib/CastExtensions.kt",
              "type": "Object",
              "code": "\n\nfun <T : Any> Any.uncheckedCast(): T =\n    Cast.uncheckedNonnullCast(this)\n"
            },
            {
              "step": 56,
              "variableName": "Object object",
              "startLine": 76,
              "startColumn": 46,
              "endLine": 76,
              "endColumn": 59,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/Cast.java",
              "type": "Object",
              "code": "    }\n\n    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})\n    public static <T> T uncheckedNonnullCast(Object object) {\n        return (T) object;\n    }\n}"
            },
            {
              "step": 57,
              "variableName": "(T) object",
              "startLine": 77,
              "startColumn": 16,
              "endLine": 77,
              "endColumn": 26,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/Cast.java",
              "type": "Object",
              "code": "\n    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})\n    public static <T> T uncheckedNonnullCast(Object object) {\n        return (T) object;\n    }\n}\n"
            },
            {
              "step": 58,
              "variableName": "Cast.uncheckedNonnullCast(collectionType)",
              "startLine": 223,
              "startColumn": 16,
              "endLine": 223,
              "endColumn": 57,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/api/internal/provider/AbstractCollectionProperty.java",
              "type": "Class",
              "code": "    @Override\n    @Nonnull\n    public Class<C> getType() {\n        return Cast.uncheckedNonnullCast(collectionType);\n    }\n\n    @Override"
            },
            {
              "step": 59,
              "variableName": "provider.getType()",
              "startLine": 41,
              "startColumn": 35,
              "endLine": 41,
              "endColumn": 53,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/api/internal/provider/OrElseFixedValueProvider.java",
              "type": "Class",
              "code": "    @Nullable\n    @Override\n    public Class<T> getType() {\n        return Cast.uncheckedCast(provider.getType());\n    }\n\n    @Override"
            },
            {
              "step": 60,
              "variableName": "@Nullable Object object",
              "startLine": 71,
              "startColumn": 39,
              "endLine": 71,
              "endColumn": 62,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/Cast.java",
              "type": "Object",
              "code": "\n    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})\n    @Nullable\n    public static <T> T uncheckedCast(@Nullable Object object) {\n        return (T) object;\n    }\n"
            },
            {
              "step": 61,
              "variableName": "(T) object",
              "startLine": 72,
              "startColumn": 16,
              "endLine": 72,
              "endColumn": 26,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/Cast.java",
              "type": "Object",
              "code": "    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})\n    @Nullable\n    public static <T> T uncheckedCast(@Nullable Object object) {\n        return (T) object;\n    }\n\n    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})"
            },
            {
              "step": 62,
              "variableName": "Cast.uncheckedCast(sanitizer.sanitize(t))",
              "startLine": 41,
              "startColumn": 15,
              "endLine": 41,
              "endColumn": 56,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/api/internal/provider/TypeSanitizingTransformer.java",
              "type": "Object",
              "code": "\n    @Override\n    public T transform(T t) {\n        T v = Cast.uncheckedCast(sanitizer.sanitize(t));\n        if (targetType.isInstance(v)) {\n            return v;\n        }"
            },
            {
              "step": 63,
              "variableName": "v",
              "startLine": 43,
              "startColumn": 20,
              "endLine": 43,
              "endColumn": 21,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/api/internal/provider/TypeSanitizingTransformer.java",
              "type": "Object",
              "code": "    public T transform(T t) {\n        T v = Cast.uncheckedCast(sanitizer.sanitize(t));\n        if (targetType.isInstance(v)) {\n            return v;\n        }\n        throw new IllegalArgumentException(String.format(\"Cannot get the value of %s of type %s as the provider associated with this property returned a value of type %s.\", owner.getDisplayName(), targetType.getName(), v.getClass().getName()));\n    }"
            },
            {
              "step": 64,
              "variableName": "describer.transform(this)",
              "startLine": 163,
              "startColumn": 16,
              "endLine": 163,
              "endColumn": 41,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/repositories/DefaultMavenArtifactRepository.java",
              "type": "String",
              "code": "\n    @Override\n    public String getDisplayName() {\n        return describer.transform(this);\n    }\n\n    @Override"
            },
            {
              "step": 65,
              "variableName": "displayName.getDisplayName()",
              "startLine": 53,
              "startColumn": 16,
              "endLine": 53,
              "endColumn": 44,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/DefaultDependencySet.java",
              "type": "String",
              "code": "\n    @Override\n    public String toString() {\n        return displayName.getDisplayName();\n    }\n\n    @Override"
            },
            {
              "step": 66,
              "variableName": "literal.toString()",
              "startLine": 583,
              "startColumn": 20,
              "endLine": 583,
              "endColumn": 38,
              "uri": "gradle-8.14.0/platforms/software/build-init/src/main/java/org/gradle/buildinit/plugins/internal/BuildScriptBuilder.java",
              "type": "String",
              "code": "\n        @Override\n        public String with(Syntax syntax) {\n            return literal.toString();\n        }\n    }\n"
            },
            {
              "step": 67,
              "variableName": "propertyValue.with(this)",
              "startLine": 2113,
              "startColumn": 75,
              "endLine": 2113,
              "endColumn": 99,
              "uri": "gradle-8.14.0/platforms/software/build-init/src/main/java/org/gradle/buildinit/plugins/internal/BuildScriptBuilder.java",
              "type": "String",
              "code": "            ExpressionValue propertyValue = expression.propertyValue;\n            if (expression.assignOperator) {\n                if (propertyValue.isBooleanType()) {\n                    return booleanPropertyNameFor(propertyName) + \" = \" + propertyValue.with(this);\n                }\n                return propertyName + \" = \" + propertyValue.with(this);\n            } else {"
            },
            {
              "step": 68,
              "variableName": "booleanPropertyNameFor(propertyName) + \" = \" + propertyValue.with(this)",
              "startLine": 2113,
              "startColumn": 28,
              "endLine": 2113,
              "endColumn": 99,
              "uri": "gradle-8.14.0/platforms/software/build-init/src/main/java/org/gradle/buildinit/plugins/internal/BuildScriptBuilder.java",
              "type": "String",
              "code": "            ExpressionValue propertyValue = expression.propertyValue;\n            if (expression.assignOperator) {\n                if (propertyValue.isBooleanType()) {\n                    return booleanPropertyNameFor(propertyName) + \" = \" + propertyValue.with(this);\n                }\n                return propertyName + \" = \" + propertyValue.with(this);\n            } else {"
            },
            {
              "step": 69,
              "variableName": "printer.syntax.propertyAssignment(this)",
              "startLine": 1050,
              "startColumn": 29,
              "endLine": 1050,
              "endColumn": 68,
              "uri": "gradle-8.14.0/platforms/software/build-init/src/main/java/org/gradle/buildinit/plugins/internal/BuildScriptBuilder.java",
              "type": "String",
              "code": "\n        @Override\n        public void writeCodeTo(PrettyPrinter printer) {\n            printer.println(printer.syntax.propertyAssignment(this));\n        }\n    }\n"
            },
            {
              "step": 70,
              "variableName": "String s",
              "startLine": 1976,
              "startColumn": 30,
              "endLine": 1976,
              "endColumn": 38,
              "uri": "gradle-8.14.0/platforms/software/build-init/src/main/java/org/gradle/buildinit/plugins/internal/BuildScriptBuilder.java",
              "type": "String",
              "code": "            }\n        }\n\n        private void println(String s) {\n            if (!indent.isEmpty()) {\n                writer.print(indent);\n            }"
            },
            {
              "step": 71,
              "variableName": "s",
              "startLine": 1981,
              "startColumn": 32,
              "endLine": 1981,
              "endColumn": 33,
              "uri": "gradle-8.14.0/platforms/software/build-init/src/main/java/org/gradle/buildinit/plugins/internal/BuildScriptBuilder.java",
              "type": "String",
              "code": "                writer.print(indent);\n            }\n            if (eolComment != null) {\n                writer.println(s + eolComment);\n                eolComment = null;\n            } else {\n                writer.println(s);"
            },
            {
              "step": 72,
              "variableName": "s + eolComment",
              "startLine": 1981,
              "startColumn": 32,
              "endLine": 1981,
              "endColumn": 46,
              "uri": "gradle-8.14.0/platforms/software/build-init/src/main/java/org/gradle/buildinit/plugins/internal/BuildScriptBuilder.java",
              "type": "",
              "code": "                writer.print(indent);\n            }\n            if (eolComment != null) {\n                writer.println(s + eolComment);\n                eolComment = null;\n            } else {\n                writer.println(s);"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 9,
      "fileName": "BuildScriptBuilder.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "source",
              "startLine": 44,
              "startColumn": 25,
              "endLine": 44,
              "endColumn": 31,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/RegExpNameMapper.java",
              "type": "String",
              "code": "        } else {\n            matcher.reset(source);\n        }\n        String result = source;\n        if (matcher.find()) {\n            result = matcher.replaceFirst(replacement);\n        }"
            },
            {
              "step": 1,
              "variableName": "result",
              "startLine": 48,
              "startColumn": 16,
              "endLine": 48,
              "endColumn": 22,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/RegExpNameMapper.java",
              "type": "String",
              "code": "        if (matcher.find()) {\n            result = matcher.replaceFirst(replacement);\n        }\n        return result;\n    }\n}\n"
            },
            {
              "step": 2,
              "variableName": "transformer.transform(value)",
              "startLine": 37,
              "startColumn": 31,
              "endLine": 37,
              "endColumn": 59,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/ChainingTransformer.java",
              "type": "String",
              "code": "    public T transform(T original) {\n        T value = original;\n        for (Transformer<T, T> transformer : transformers) {\n            value = type.cast(transformer.transform(value));\n        }\n        return value;\n    }"
            },
            {
              "step": 3,
              "variableName": "type.cast(transformer.transform(value))",
              "startLine": 37,
              "startColumn": 21,
              "endLine": 37,
              "endColumn": 60,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/ChainingTransformer.java",
              "type": "String",
              "code": "    public T transform(T original) {\n        T value = original;\n        for (Transformer<T, T> transformer : transformers) {\n            value = type.cast(transformer.transform(value));\n        }\n        return value;\n    }"
            },
            {
              "step": 4,
              "variableName": "value",
              "startLine": 39,
              "startColumn": 16,
              "endLine": 39,
              "endColumn": 21,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/ChainingTransformer.java",
              "type": "String",
              "code": "        for (Transformer<T, T> transformer : transformers) {\n            value = type.cast(transformer.transform(value));\n        }\n        return value;\n    }\n\n    public void add(Transformer<T, T> transformer) {"
            },
            {
              "step": 5,
              "variableName": "describer.transform(this)",
              "startLine": 163,
              "startColumn": 16,
              "endLine": 163,
              "endColumn": 41,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/repositories/DefaultMavenArtifactRepository.java",
              "type": "String",
              "code": "\n    @Override\n    public String getDisplayName() {\n        return describer.transform(this);\n    }\n\n    @Override"
            },
            {
              "step": 6,
              "variableName": "describable.getDisplayName()",
              "startLine": 313,
              "startColumn": 35,
              "endLine": 313,
              "endColumn": 63,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "String",
              "code": "        public String getDisplayName() {\n            synchronized (this) {\n                if (displayName == null) {\n                    displayName = describable.getDisplayName();\n                    if (capDisplayName != null || !(describable instanceof DisplayName)) {\n                        describable = null;\n                    }"
            },
            {
              "step": 7,
              "variableName": "displayName",
              "startLine": 318,
              "startColumn": 24,
              "endLine": 318,
              "endColumn": 35,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "String",
              "code": "                        describable = null;\n                    }\n                }\n                return displayName;\n            }\n        }\n    }"
            },
            {
              "step": 8,
              "variableName": "displayName.getDisplayName()",
              "startLine": 772,
              "startColumn": 73,
              "endLine": 772,
              "endColumn": 101,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/configurations/DefaultConfiguration.java",
              "type": "String",
              "code": "                try {\n                    results = resolver.resolveGraph(DefaultConfiguration.this);\n                } catch (Exception e) {\n                    throw exceptionMapper.mapFailure(e, \"dependencies\", displayName.getDisplayName());\n                }\n\n                // Make the new state visible in case a dependency resolution listener queries the result, which requires the new state"
            },
            {
              "step": 9,
              "variableName": "String contextDisplayName",
              "startLine": 68,
              "startColumn": 77,
              "endLine": 68,
              "endColumn": 102,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "String",
              "code": "        return mapFailure(failure, type, displayName);\n    }\n\n    public TypedResolveException mapFailure(Throwable failure, String type, String contextDisplayName) {\n        if (!(failure instanceof TypedResolveException)) {\n            return new TypedResolveException(\n                type,"
            },
            {
              "step": 10,
              "variableName": "contextDisplayName",
              "startLine": 72,
              "startColumn": 17,
              "endLine": 72,
              "endColumn": 35,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "String",
              "code": "        if (!(failure instanceof TypedResolveException)) {\n            return new TypedResolveException(\n                type,\n                contextDisplayName,\n                ImmutableList.of(mapRepositoryOverrideFailure(contextDisplayName, failure))\n            );\n        }"
            },
            {
              "step": 11,
              "variableName": "new TypedResolveException(...) : TypedResolveException",
              "startLine": 70,
              "startColumn": 20,
              "endLine": 74,
              "endColumn": 14,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "TypedResolveException",
              "code": "\n    public TypedResolveException mapFailure(Throwable failure, String type, String contextDisplayName) {\n        if (!(failure instanceof TypedResolveException)) {\n            return new TypedResolveException(\n                type,\n                contextDisplayName,\n                ImmutableList.of(mapRepositoryOverrideFailure(contextDisplayName, failure))"
            },
            {
              "step": 12,
              "variableName": "exceptionMapper.mapFailure(e, \"dependencies\", displayName.getDisplayName())",
              "startLine": 772,
              "startColumn": 27,
              "endLine": 772,
              "endColumn": 102,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/configurations/DefaultConfiguration.java",
              "type": "TypedResolveException",
              "code": "                try {\n                    results = resolver.resolveGraph(DefaultConfiguration.this);\n                } catch (Exception e) {\n                    throw exceptionMapper.mapFailure(e, \"dependencies\", displayName.getDisplayName());\n                }\n\n                // Make the new state visible in case a dependency resolution listener queries the result, which requires the new state"
            },
            {
              "step": 13,
              "variableName": "e",
              "startLine": 772,
              "startColumn": 54,
              "endLine": 772,
              "endColumn": 55,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/configurations/DefaultConfiguration.java",
              "type": "Exception",
              "code": "                try {\n                    results = resolver.resolveGraph(DefaultConfiguration.this);\n                } catch (Exception e) {\n                    throw exceptionMapper.mapFailure(e, \"dependencies\", displayName.getDisplayName());\n                }\n\n                // Make the new state visible in case a dependency resolution listener queries the result, which requires the new state"
            },
            {
              "step": 14,
              "variableName": "Throwable failure",
              "startLine": 68,
              "startColumn": 45,
              "endLine": 68,
              "endColumn": 62,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Throwable",
              "code": "        return mapFailure(failure, type, displayName);\n    }\n\n    public TypedResolveException mapFailure(Throwable failure, String type, String contextDisplayName) {\n        if (!(failure instanceof TypedResolveException)) {\n            return new TypedResolveException(\n                type,"
            },
            {
              "step": 15,
              "variableName": "failure",
              "startLine": 73,
              "startColumn": 83,
              "endLine": 73,
              "endColumn": 90,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Throwable",
              "code": "            return new TypedResolveException(\n                type,\n                contextDisplayName,\n                ImmutableList.of(mapRepositoryOverrideFailure(contextDisplayName, failure))\n            );\n        }\n"
            },
            {
              "step": 16,
              "variableName": "Throwable failure",
              "startLine": 94,
              "startColumn": 78,
              "endLine": 94,
              "endColumn": 95,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Throwable",
              "code": "\n    // TODO: We should handle this exception at the source instead of using instanceof to detect it after it is thrown.\n    //       We should try to avoid catching and analyzing runtime exceptions\n    public Throwable mapRepositoryOverrideFailure(String contextDisplayName, Throwable failure) {\n        if (!(failure instanceof ModuleVersionNotFoundException) || !settingsRepositoriesIgnored()) {\n            return failure;\n        }"
            },
            {
              "step": 17,
              "variableName": "failure",
              "startLine": 108,
              "startColumn": 35,
              "endLine": 108,
              "endColumn": 42,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Throwable",
              "code": "        return new TypedResolveException(\n            \"dependencies\",\n            contextDisplayName,\n            Collections.singleton(failure),\n            resolutions\n        );\n    }"
            },
            {
              "step": 18,
              "variableName": "Collections.singleton(failure)",
              "startLine": 108,
              "startColumn": 13,
              "endLine": 108,
              "endColumn": 43,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Set [<element>] : Throwable",
              "code": "        return new TypedResolveException(\n            \"dependencies\",\n            contextDisplayName,\n            Collections.singleton(failure),\n            resolutions\n        );\n    }"
            },
            {
              "step": 19,
              "variableName": "Collections.singleton(failure)",
              "startLine": 108,
              "startColumn": 13,
              "endLine": 108,
              "endColumn": 43,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Set",
              "code": "        return new TypedResolveException(\n            \"dependencies\",\n            contextDisplayName,\n            Collections.singleton(failure),\n            resolutions\n        );\n    }"
            },
            {
              "step": 20,
              "variableName": "Iterable<? extends Throwable> failures",
              "startLine": 42,
              "startColumn": 67,
              "endLine": 42,
              "endColumn": 105,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ivyservice/TypedResolveException.java",
              "type": "Set",
              "code": "    /**\n     * Creates a new instance with resolutions.\n     */\n    public TypedResolveException(String type, String displayName, Iterable<? extends Throwable> failures, List<String> resolutions) {\n        super(buildMessage(type, displayName), failures, false);\n        this.type = type;\n        this.resolutions = ImmutableList.copyOf(resolutions);"
            },
            {
              "step": 21,
              "variableName": "failures",
              "startLine": 43,
              "startColumn": 48,
              "endLine": 43,
              "endColumn": 56,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ivyservice/TypedResolveException.java",
              "type": "Set",
              "code": "     * Creates a new instance with resolutions.\n     */\n    public TypedResolveException(String type, String displayName, Iterable<? extends Throwable> failures, List<String> resolutions) {\n        super(buildMessage(type, displayName), failures, false);\n        this.type = type;\n        this.resolutions = ImmutableList.copyOf(resolutions);\n    }"
            },
            {
              "step": 22,
              "variableName": "Iterable<? extends Throwable> causes",
              "startLine": 77,
              "startColumn": 48,
              "endLine": 77,
              "endColumn": 84,
              "uri": "gradle-8.14.0/subprojects/core-api/src/main/java/org/gradle/api/artifacts/ResolveException.java",
              "type": "Set",
              "code": "     * @since 8.9\n     */\n    @Incubating\n    protected ResolveException(String message, Iterable<? extends Throwable> causes, @SuppressWarnings(\"unused\") boolean dummy) {\n        super(message, causes);\n    }\n}"
            },
            {
              "step": 23,
              "variableName": "causes",
              "startLine": 78,
              "startColumn": 24,
              "endLine": 78,
              "endColumn": 30,
              "uri": "gradle-8.14.0/subprojects/core-api/src/main/java/org/gradle/api/artifacts/ResolveException.java",
              "type": "Set",
              "code": "     */\n    @Incubating\n    protected ResolveException(String message, Iterable<? extends Throwable> causes, @SuppressWarnings(\"unused\") boolean dummy) {\n        super(message, causes);\n    }\n}\n"
            },
            {
              "step": 24,
              "variableName": "Iterable<? extends Throwable> causes",
              "startLine": 47,
              "startColumn": 55,
              "endLine": 47,
              "endColumn": 91,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "Set",
              "code": "        this.causes.addAll(Arrays.asList(causes));\n    }\n\n    public DefaultMultiCauseException(String message, Iterable<? extends Throwable> causes) {\n        super(message);\n        this.message = message;\n        initCauses(causes);"
            },
            {
              "step": 25,
              "variableName": "causes",
              "startLine": 50,
              "startColumn": 20,
              "endLine": 50,
              "endColumn": 26,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "Set",
              "code": "    public DefaultMultiCauseException(String message, Iterable<? extends Throwable> causes) {\n        super(message);\n        this.message = message;\n        initCauses(causes);\n    }\n\n    public DefaultMultiCauseException(Factory<String> messageFactory) {"
            },
            {
              "step": 26,
              "variableName": "Iterable<? extends Throwable> causes",
              "startLine": 112,
              "startColumn": 28,
              "endLine": 112,
              "endColumn": 64,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "Iterable",
              "code": "        return null;\n    }\n\n    public void initCauses(Iterable<? extends Throwable> causes) {\n        this.causes.clear();\n        for (Throwable cause : causes) {\n            this.causes.add(cause);"
            },
            {
              "step": 27,
              "variableName": "cause",
              "startLine": 115,
              "startColumn": 29,
              "endLine": 115,
              "endColumn": 34,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "Throwable",
              "code": "    public void initCauses(Iterable<? extends Throwable> causes) {\n        this.causes.clear();\n        for (Throwable cause : causes) {\n            this.causes.add(cause);\n        }\n    }\n"
            },
            {
              "step": 28,
              "variableName": "this.causes",
              "startLine": 115,
              "startColumn": 13,
              "endLine": 115,
              "endColumn": 24,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "CopyOnWriteArrayList [<element>] : Throwable",
              "code": "    public void initCauses(Iterable<? extends Throwable> causes) {\n        this.causes.clear();\n        for (Throwable cause : causes) {\n            this.causes.add(cause);\n        }\n    }\n"
            },
            {
              "step": 29,
              "variableName": "this",
              "startLine": 115,
              "startColumn": 13,
              "endLine": 115,
              "endColumn": 17,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "DefaultMultiCauseException [causes, <element>] : Throwable",
              "code": "    public void initCauses(Iterable<? extends Throwable> causes) {\n        this.causes.clear();\n        for (Throwable cause : causes) {\n            this.causes.add(cause);\n        }\n    }\n"
            },
            {
              "step": 30,
              "variableName": "projectConfigurationException",
              "startLine": 57,
              "startColumn": 17,
              "endLine": 57,
              "endColumn": 46,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/DefaultExceptionAnalyser.java",
              "type": "ProjectConfigurationException [causes, <element>] : Throwable",
              "code": "                }\n            }\n            if (!additionalFailures.isEmpty()) {\n                projectConfigurationException.initCauses(additionalFailures);\n                failures.add(transform(projectConfigurationException));\n            }\n        } else if (exception instanceof ServiceCreationException) {"
            },
            {
              "step": 31,
              "variableName": "projectConfigurationException",
              "startLine": 58,
              "startColumn": 40,
              "endLine": 58,
              "endColumn": 69,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/DefaultExceptionAnalyser.java",
              "type": "ProjectConfigurationException [causes, <element>] : Throwable",
              "code": "            }\n            if (!additionalFailures.isEmpty()) {\n                projectConfigurationException.initCauses(additionalFailures);\n                failures.add(transform(projectConfigurationException));\n            }\n        } else if (exception instanceof ServiceCreationException) {\n            failures.add(transform(new InitializationException(exception)));"
            },
            {
              "step": 32,
              "variableName": "transform(projectConfigurationException)",
              "startLine": 58,
              "startColumn": 30,
              "endLine": 58,
              "endColumn": 70,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/DefaultExceptionAnalyser.java",
              "type": "LocationAwareException",
              "code": "            }\n            if (!additionalFailures.isEmpty()) {\n                projectConfigurationException.initCauses(additionalFailures);\n                failures.add(transform(projectConfigurationException));\n            }\n        } else if (exception instanceof ServiceCreationException) {\n            failures.add(transform(new InitializationException(exception)));"
            },
            {
              "step": 33,
              "variableName": "failures",
              "startLine": 58,
              "startColumn": 17,
              "endLine": 58,
              "endColumn": 25,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/DefaultExceptionAnalyser.java",
              "type": "Collection [<element>] : LocationAwareException",
              "code": "            }\n            if (!additionalFailures.isEmpty()) {\n                projectConfigurationException.initCauses(additionalFailures);\n                failures.add(transform(projectConfigurationException));\n            }\n        } else if (exception instanceof ServiceCreationException) {\n            failures.add(transform(new InitializationException(exception)));"
            },
            {
              "step": 34,
              "variableName": "result",
              "startLine": 53,
              "startColumn": 54,
              "endLine": 53,
              "endColumn": 60,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/MultipleBuildFailuresExceptionAnalyser.java",
              "type": "ArrayList [<element>] : LocationAwareException",
              "code": "        for (Throwable failure : failures) {\n            if (failure instanceof MultipleBuildFailures) {\n                for (Throwable cause : ((MultipleBuildFailures) failure).getCauses()) {\n                    collector.collectFailures(cause, result);\n                }\n            } else {\n                collector.collectFailures(failure, result);"
            },
            {
              "step": 35,
              "variableName": "result",
              "startLine": 60,
              "startColumn": 39,
              "endLine": 60,
              "endColumn": 45,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/MultipleBuildFailuresExceptionAnalyser.java",
              "type": "ArrayList [<element>] : LocationAwareException",
              "code": "            }\n        }\n        if (result.size() == 1 && result.get(0) instanceof RuntimeException) {\n            return (RuntimeException) result.get(0);\n        } else {\n            return new MultipleBuildFailures(result);\n        }"
            },
            {
              "step": 36,
              "variableName": "result.get(0)",
              "startLine": 60,
              "startColumn": 39,
              "endLine": 60,
              "endColumn": 52,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/MultipleBuildFailuresExceptionAnalyser.java",
              "type": "LocationAwareException",
              "code": "            }\n        }\n        if (result.size() == 1 && result.get(0) instanceof RuntimeException) {\n            return (RuntimeException) result.get(0);\n        } else {\n            return new MultipleBuildFailures(result);\n        }"
            },
            {
              "step": 37,
              "variableName": "(RuntimeException) result.get(0)",
              "startLine": 60,
              "startColumn": 20,
              "endLine": 60,
              "endColumn": 52,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/MultipleBuildFailuresExceptionAnalyser.java",
              "type": "LocationAwareException",
              "code": "            }\n        }\n        if (result.size() == 1 && result.get(0) instanceof RuntimeException) {\n            return (RuntimeException) result.get(0);\n        } else {\n            return new MultipleBuildFailures(result);\n        }"
            },
            {
              "step": 38,
              "variableName": "exceptionAnalyser.transform(finishFailures)",
              "startLine": 72,
              "startColumn": 16,
              "endLine": 72,
              "endColumn": 59,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/internal/buildtree/DefaultBuildTreeFinishExecutor.java",
              "type": "LocationAwareException",
              "code": "            finishFailures.addAll(result.getFailures());\n        });\n\n        return exceptionAnalyser.transform(finishFailures);\n    }\n}\n"
            },
            {
              "step": 39,
              "variableName": "delegate.finishBuildTree(failures)",
              "startLine": 46,
              "startColumn": 28,
              "endLine": 46,
              "endColumn": 62,
              "uri": "gradle-8.14.0/subprojects/composite-builds/src/main/java/org/gradle/composite/internal/OperationFiringBuildTreeFinishExecutor.java",
              "type": "LocationAwareException",
              "code": "            @Override\n            public RuntimeException call(BuildOperationContext context) {\n                try {\n                    return delegate.finishBuildTree(failures);\n                } finally {\n                    context.setResult(RESULT);\n                }"
            },
            {
              "step": 40,
              "variableName": "buildOperation.call(context)",
              "startLine": 239,
              "startColumn": 21,
              "endLine": 239,
              "endColumn": 49,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/testFixtures/java/org/gradle/internal/operations/TestBuildOperationRunner.java",
              "type": "LocationAwareException",
              "code": "            TestBuildOperationContext context = new TestBuildOperationContext(record);\n            T t;\n            try {\n                t = buildOperation.call(context);\n            } catch (Throwable failure) {\n                if (record.failure == null) {\n                    record.failure = failure;"
            },
            {
              "step": 41,
              "variableName": "t",
              "startLine": 246,
              "startColumn": 20,
              "endLine": 246,
              "endColumn": 21,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/testFixtures/java/org/gradle/internal/operations/TestBuildOperationRunner.java",
              "type": "LocationAwareException",
              "code": "                }\n                throw throwAsUncheckedException(failure);\n            }\n            return t;\n        }\n\n        private <O extends BuildOperation> void execute(O buildOperation, BuildOperationWorker<O> worker) {"
            },
            {
              "step": 42,
              "variableName": "log.call(buildOperation)",
              "startLine": 51,
              "startColumn": 16,
              "endLine": 51,
              "endColumn": 40,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/testFixtures/java/org/gradle/internal/operations/TestBuildOperationRunner.java",
              "type": "LocationAwareException",
              "code": "\n    @Override\n    public <T> T call(CallableBuildOperation<T> buildOperation) {\n        return log.call(buildOperation);\n    }\n\n    @Override"
            },
            {
              "step": 43,
              "variableName": "ca",
              "startLine": 115,
              "startColumn": 5,
              "endLine": 121,
              "endColumn": 7,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/configurationcache/ConfigurationCacheBuildOperations.kt",
              "type": "LocationAwareException",
              "code": "\ninternal\nfun <T : Any> BuildOperationRunner.withModelLoadOperation(block: () -> T): T =\n    call(object : CallableBuildOperation<T> {\n        override fun description(): BuildOperationDescriptor.Builder = BuildOperationDescriptor\n            .displayName(\"Load model from configuration cache\")\n            .progressDisplayName(\"Loading model from configuration cache\")"
            },
            {
              "step": 44,
              "variableName": "ca",
              "startLine": 115,
              "startColumn": 5,
              "endLine": 121,
              "endColumn": 7,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/configurationcache/ConfigurationCacheBuildOperations.kt",
              "type": "LocationAwareException",
              "code": "\ninternal\nfun <T : Any> BuildOperationRunner.withModelLoadOperation(block: () -> T): T =\n    call(object : CallableBuildOperation<T> {\n        override fun description(): BuildOperationDescriptor.Builder = BuildOperationDescriptor\n            .displayName(\"Load model from configuration cache\")\n            .progressDisplayName(\"Loading model from configuration cache\")"
            },
            {
              "step": 45,
              "variableName": "b",
              "startLine": 635,
              "startColumn": 9,
              "endLine": 641,
              "endColumn": 10,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "        // No need to record the `ClassLoaderScope` tree when loading\n        scopeRegistryListener.dispose()\n\n        buildOperationRunner.withModelLoadOperation {\n            val storeLoadResult = entryStore.useForStateLoad(StateType.Model) { stateFile: ConfigurationCacheStateFile ->\n                cacheIO.readModelFrom(stateFile)\n            }"
            },
            {
              "step": 46,
              "variableName": "block()",
              "startLine": 668,
              "startColumn": 22,
              "endLine": 668,
              "endColumn": 29,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "    private\n    inline fun <T> runAtConfigurationTime(block: () -> T): T {\n        prepareConfigurationTimeBarrier()\n        val result = block()\n        crossConfigurationTimeBarrier()\n        return result\n    }"
            },
            {
              "step": 47,
              "variableName": "result",
              "startLine": 670,
              "startColumn": 16,
              "endLine": 670,
              "endColumn": 22,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "        prepareConfigurationTimeBarrier()\n        val result = block()\n        crossConfigurationTimeBarrier()\n        return result\n    }\n\n    private"
            },
            {
              "step": 48,
              "variableName": "runAtConfigurationTime(...) : LocationAwareException",
              "startLine": 631,
              "startColumn": 28,
              "endLine": 642,
              "endColumn": 6,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "    data class LoadResultMetadata(val originInvocationId: String? = null)\n\n    private\n    fun loadModel(): Any = runAtConfigurationTime {\n        // No need to record the `ClassLoaderScope` tree when loading\n        scopeRegistryListener.dispose()\n"
            },
            {
              "step": 49,
              "variableName": "loadModel()",
              "startLine": 268,
              "startColumn": 20,
              "endLine": 268,
              "endColumn": 31,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "    override fun <T : Any> loadOrCreateModel(creator: () -> T): T {\n        if (isLoaded) {\n            runLoadedSideEffects()\n            return loadModel().uncheckedCast()\n        }\n\n        return runWorkThatContributesToCacheEntry {"
            },
            {
              "step": 50,
              "variableName": "Any",
              "startLine": 22,
              "startColumn": 15,
              "endLine": 22,
              "endColumn": 18,
              "uri": "gradle-8.14.0/platforms/core-configuration/stdlib-kotlin-extensions/src/main/kotlin/org/gradle/internal/extensions/stdlib/CastExtensions.kt",
              "type": "Object",
              "code": "import org.gradle.internal.Cast\n\n\nfun <T : Any> Any.uncheckedCast(): T =\n    Cast.uncheckedNonnullCast(this)\n"
            },
            {
              "step": 51,
              "variableName": "this",
              "startLine": 23,
              "startColumn": 31,
              "endLine": 23,
              "endColumn": 35,
              "uri": "gradle-8.14.0/platforms/core-configuration/stdlib-kotlin-extensions/src/main/kotlin/org/gradle/internal/extensions/stdlib/CastExtensions.kt",
              "type": "Object",
              "code": "\n\nfun <T : Any> Any.uncheckedCast(): T =\n    Cast.uncheckedNonnullCast(this)\n"
            },
            {
              "step": 52,
              "variableName": "Object object",
              "startLine": 76,
              "startColumn": 46,
              "endLine": 76,
              "endColumn": 59,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/Cast.java",
              "type": "Object",
              "code": "    }\n\n    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})\n    public static <T> T uncheckedNonnullCast(Object object) {\n        return (T) object;\n    }\n}"
            },
            {
              "step": 53,
              "variableName": "(T) object",
              "startLine": 77,
              "startColumn": 16,
              "endLine": 77,
              "endColumn": 26,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/Cast.java",
              "type": "Object",
              "code": "\n    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})\n    public static <T> T uncheckedNonnullCast(Object object) {\n        return (T) object;\n    }\n}\n"
            },
            {
              "step": 54,
              "variableName": "Cast.uncheckedNonnullCast(collectionType)",
              "startLine": 223,
              "startColumn": 16,
              "endLine": 223,
              "endColumn": 57,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/api/internal/provider/AbstractCollectionProperty.java",
              "type": "Class",
              "code": "    @Override\n    @Nonnull\n    public Class<C> getType() {\n        return Cast.uncheckedNonnullCast(collectionType);\n    }\n\n    @Override"
            },
            {
              "step": 55,
              "variableName": "provider.getType()",
              "startLine": 41,
              "startColumn": 35,
              "endLine": 41,
              "endColumn": 53,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/api/internal/provider/OrElseFixedValueProvider.java",
              "type": "Class",
              "code": "    @Nullable\n    @Override\n    public Class<T> getType() {\n        return Cast.uncheckedCast(provider.getType());\n    }\n\n    @Override"
            },
            {
              "step": 56,
              "variableName": "@Nullable Object object",
              "startLine": 71,
              "startColumn": 39,
              "endLine": 71,
              "endColumn": 62,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/Cast.java",
              "type": "Object",
              "code": "\n    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})\n    @Nullable\n    public static <T> T uncheckedCast(@Nullable Object object) {\n        return (T) object;\n    }\n"
            },
            {
              "step": 57,
              "variableName": "(T) object",
              "startLine": 72,
              "startColumn": 16,
              "endLine": 72,
              "endColumn": 26,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/Cast.java",
              "type": "Object",
              "code": "    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})\n    @Nullable\n    public static <T> T uncheckedCast(@Nullable Object object) {\n        return (T) object;\n    }\n\n    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})"
            },
            {
              "step": 58,
              "variableName": "Cast.uncheckedCast(sanitizer.sanitize(t))",
              "startLine": 41,
              "startColumn": 15,
              "endLine": 41,
              "endColumn": 56,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/api/internal/provider/TypeSanitizingTransformer.java",
              "type": "Object",
              "code": "\n    @Override\n    public T transform(T t) {\n        T v = Cast.uncheckedCast(sanitizer.sanitize(t));\n        if (targetType.isInstance(v)) {\n            return v;\n        }"
            },
            {
              "step": 59,
              "variableName": "v",
              "startLine": 43,
              "startColumn": 20,
              "endLine": 43,
              "endColumn": 21,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/api/internal/provider/TypeSanitizingTransformer.java",
              "type": "Object",
              "code": "    public T transform(T t) {\n        T v = Cast.uncheckedCast(sanitizer.sanitize(t));\n        if (targetType.isInstance(v)) {\n            return v;\n        }\n        throw new IllegalArgumentException(String.format(\"Cannot get the value of %s of type %s as the provider associated with this property returned a value of type %s.\", owner.getDisplayName(), targetType.getName(), v.getClass().getName()));\n    }"
            },
            {
              "step": 60,
              "variableName": "describer.transform(this)",
              "startLine": 163,
              "startColumn": 16,
              "endLine": 163,
              "endColumn": 41,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/repositories/DefaultMavenArtifactRepository.java",
              "type": "String",
              "code": "\n    @Override\n    public String getDisplayName() {\n        return describer.transform(this);\n    }\n\n    @Override"
            },
            {
              "step": 61,
              "variableName": "displayName.getDisplayName()",
              "startLine": 53,
              "startColumn": 16,
              "endLine": 53,
              "endColumn": 44,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/DefaultDependencySet.java",
              "type": "String",
              "code": "\n    @Override\n    public String toString() {\n        return displayName.getDisplayName();\n    }\n\n    @Override"
            },
            {
              "step": 62,
              "variableName": "literal.toString()",
              "startLine": 583,
              "startColumn": 20,
              "endLine": 583,
              "endColumn": 38,
              "uri": "gradle-8.14.0/platforms/software/build-init/src/main/java/org/gradle/buildinit/plugins/internal/BuildScriptBuilder.java",
              "type": "String",
              "code": "\n        @Override\n        public String with(Syntax syntax) {\n            return literal.toString();\n        }\n    }\n"
            },
            {
              "step": 63,
              "variableName": "propertyValue.with(this)",
              "startLine": 2113,
              "startColumn": 75,
              "endLine": 2113,
              "endColumn": 99,
              "uri": "gradle-8.14.0/platforms/software/build-init/src/main/java/org/gradle/buildinit/plugins/internal/BuildScriptBuilder.java",
              "type": "String",
              "code": "            ExpressionValue propertyValue = expression.propertyValue;\n            if (expression.assignOperator) {\n                if (propertyValue.isBooleanType()) {\n                    return booleanPropertyNameFor(propertyName) + \" = \" + propertyValue.with(this);\n                }\n                return propertyName + \" = \" + propertyValue.with(this);\n            } else {"
            },
            {
              "step": 64,
              "variableName": "booleanPropertyNameFor(propertyName) + \" = \" + propertyValue.with(this)",
              "startLine": 2113,
              "startColumn": 28,
              "endLine": 2113,
              "endColumn": 99,
              "uri": "gradle-8.14.0/platforms/software/build-init/src/main/java/org/gradle/buildinit/plugins/internal/BuildScriptBuilder.java",
              "type": "String",
              "code": "            ExpressionValue propertyValue = expression.propertyValue;\n            if (expression.assignOperator) {\n                if (propertyValue.isBooleanType()) {\n                    return booleanPropertyNameFor(propertyName) + \" = \" + propertyValue.with(this);\n                }\n                return propertyName + \" = \" + propertyValue.with(this);\n            } else {"
            },
            {
              "step": 65,
              "variableName": "printer.syntax.propertyAssignment(this)",
              "startLine": 1050,
              "startColumn": 29,
              "endLine": 1050,
              "endColumn": 68,
              "uri": "gradle-8.14.0/platforms/software/build-init/src/main/java/org/gradle/buildinit/plugins/internal/BuildScriptBuilder.java",
              "type": "String",
              "code": "\n        @Override\n        public void writeCodeTo(PrettyPrinter printer) {\n            printer.println(printer.syntax.propertyAssignment(this));\n        }\n    }\n"
            },
            {
              "step": 66,
              "variableName": "String s",
              "startLine": 1976,
              "startColumn": 30,
              "endLine": 1976,
              "endColumn": 38,
              "uri": "gradle-8.14.0/platforms/software/build-init/src/main/java/org/gradle/buildinit/plugins/internal/BuildScriptBuilder.java",
              "type": "String",
              "code": "            }\n        }\n\n        private void println(String s) {\n            if (!indent.isEmpty()) {\n                writer.print(indent);\n            }"
            },
            {
              "step": 67,
              "variableName": "s",
              "startLine": 1984,
              "startColumn": 32,
              "endLine": 1984,
              "endColumn": 33,
              "uri": "gradle-8.14.0/platforms/software/build-init/src/main/java/org/gradle/buildinit/plugins/internal/BuildScriptBuilder.java",
              "type": "",
              "code": "                writer.println(s + eolComment);\n                eolComment = null;\n            } else {\n                writer.println(s);\n            }\n            hasSeparatorLine = false;\n        }"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "source",
              "startLine": 40,
              "startColumn": 39,
              "endLine": 40,
              "endColumn": 45,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/RegExpNameMapper.java",
              "type": "String",
              "code": "    @Override\n    public String transform(String source) {\n        if (matcher == null) {\n            matcher = pattern.matcher(source);\n        } else {\n            matcher.reset(source);\n        }"
            },
            {
              "step": 1,
              "variableName": "result",
              "startLine": 48,
              "startColumn": 16,
              "endLine": 48,
              "endColumn": 22,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/RegExpNameMapper.java",
              "type": "String",
              "code": "        if (matcher.find()) {\n            result = matcher.replaceFirst(replacement);\n        }\n        return result;\n    }\n}\n"
            },
            {
              "step": 2,
              "variableName": "transformer.transform(value)",
              "startLine": 37,
              "startColumn": 31,
              "endLine": 37,
              "endColumn": 59,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/ChainingTransformer.java",
              "type": "String",
              "code": "    public T transform(T original) {\n        T value = original;\n        for (Transformer<T, T> transformer : transformers) {\n            value = type.cast(transformer.transform(value));\n        }\n        return value;\n    }"
            },
            {
              "step": 3,
              "variableName": "type.cast(transformer.transform(value))",
              "startLine": 37,
              "startColumn": 21,
              "endLine": 37,
              "endColumn": 60,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/ChainingTransformer.java",
              "type": "String",
              "code": "    public T transform(T original) {\n        T value = original;\n        for (Transformer<T, T> transformer : transformers) {\n            value = type.cast(transformer.transform(value));\n        }\n        return value;\n    }"
            },
            {
              "step": 4,
              "variableName": "value",
              "startLine": 39,
              "startColumn": 16,
              "endLine": 39,
              "endColumn": 21,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/ChainingTransformer.java",
              "type": "String",
              "code": "        for (Transformer<T, T> transformer : transformers) {\n            value = type.cast(transformer.transform(value));\n        }\n        return value;\n    }\n\n    public void add(Transformer<T, T> transformer) {"
            },
            {
              "step": 5,
              "variableName": "describer.transform(this)",
              "startLine": 163,
              "startColumn": 16,
              "endLine": 163,
              "endColumn": 41,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/repositories/DefaultMavenArtifactRepository.java",
              "type": "String",
              "code": "\n    @Override\n    public String getDisplayName() {\n        return describer.transform(this);\n    }\n\n    @Override"
            },
            {
              "step": 6,
              "variableName": "describable.getDisplayName()",
              "startLine": 313,
              "startColumn": 35,
              "endLine": 313,
              "endColumn": 63,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "String",
              "code": "        public String getDisplayName() {\n            synchronized (this) {\n                if (displayName == null) {\n                    displayName = describable.getDisplayName();\n                    if (capDisplayName != null || !(describable instanceof DisplayName)) {\n                        describable = null;\n                    }"
            },
            {
              "step": 7,
              "variableName": "displayName",
              "startLine": 318,
              "startColumn": 24,
              "endLine": 318,
              "endColumn": 35,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "String",
              "code": "                        describable = null;\n                    }\n                }\n                return displayName;\n            }\n        }\n    }"
            },
            {
              "step": 8,
              "variableName": "displayName.getDisplayName()",
              "startLine": 772,
              "startColumn": 73,
              "endLine": 772,
              "endColumn": 101,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/configurations/DefaultConfiguration.java",
              "type": "String",
              "code": "                try {\n                    results = resolver.resolveGraph(DefaultConfiguration.this);\n                } catch (Exception e) {\n                    throw exceptionMapper.mapFailure(e, \"dependencies\", displayName.getDisplayName());\n                }\n\n                // Make the new state visible in case a dependency resolution listener queries the result, which requires the new state"
            },
            {
              "step": 9,
              "variableName": "String contextDisplayName",
              "startLine": 68,
              "startColumn": 77,
              "endLine": 68,
              "endColumn": 102,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "String",
              "code": "        return mapFailure(failure, type, displayName);\n    }\n\n    public TypedResolveException mapFailure(Throwable failure, String type, String contextDisplayName) {\n        if (!(failure instanceof TypedResolveException)) {\n            return new TypedResolveException(\n                type,"
            },
            {
              "step": 10,
              "variableName": "contextDisplayName",
              "startLine": 72,
              "startColumn": 17,
              "endLine": 72,
              "endColumn": 35,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "String",
              "code": "        if (!(failure instanceof TypedResolveException)) {\n            return new TypedResolveException(\n                type,\n                contextDisplayName,\n                ImmutableList.of(mapRepositoryOverrideFailure(contextDisplayName, failure))\n            );\n        }"
            },
            {
              "step": 11,
              "variableName": "new TypedResolveException(...) : TypedResolveException",
              "startLine": 70,
              "startColumn": 20,
              "endLine": 74,
              "endColumn": 14,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "TypedResolveException",
              "code": "\n    public TypedResolveException mapFailure(Throwable failure, String type, String contextDisplayName) {\n        if (!(failure instanceof TypedResolveException)) {\n            return new TypedResolveException(\n                type,\n                contextDisplayName,\n                ImmutableList.of(mapRepositoryOverrideFailure(contextDisplayName, failure))"
            },
            {
              "step": 12,
              "variableName": "exceptionMapper.mapFailure(e, \"dependencies\", displayName.getDisplayName())",
              "startLine": 772,
              "startColumn": 27,
              "endLine": 772,
              "endColumn": 102,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/configurations/DefaultConfiguration.java",
              "type": "TypedResolveException",
              "code": "                try {\n                    results = resolver.resolveGraph(DefaultConfiguration.this);\n                } catch (Exception e) {\n                    throw exceptionMapper.mapFailure(e, \"dependencies\", displayName.getDisplayName());\n                }\n\n                // Make the new state visible in case a dependency resolution listener queries the result, which requires the new state"
            },
            {
              "step": 13,
              "variableName": "e",
              "startLine": 772,
              "startColumn": 54,
              "endLine": 772,
              "endColumn": 55,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/configurations/DefaultConfiguration.java",
              "type": "Exception",
              "code": "                try {\n                    results = resolver.resolveGraph(DefaultConfiguration.this);\n                } catch (Exception e) {\n                    throw exceptionMapper.mapFailure(e, \"dependencies\", displayName.getDisplayName());\n                }\n\n                // Make the new state visible in case a dependency resolution listener queries the result, which requires the new state"
            },
            {
              "step": 14,
              "variableName": "Throwable failure",
              "startLine": 68,
              "startColumn": 45,
              "endLine": 68,
              "endColumn": 62,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Throwable",
              "code": "        return mapFailure(failure, type, displayName);\n    }\n\n    public TypedResolveException mapFailure(Throwable failure, String type, String contextDisplayName) {\n        if (!(failure instanceof TypedResolveException)) {\n            return new TypedResolveException(\n                type,"
            },
            {
              "step": 15,
              "variableName": "failure",
              "startLine": 73,
              "startColumn": 83,
              "endLine": 73,
              "endColumn": 90,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Throwable",
              "code": "            return new TypedResolveException(\n                type,\n                contextDisplayName,\n                ImmutableList.of(mapRepositoryOverrideFailure(contextDisplayName, failure))\n            );\n        }\n"
            },
            {
              "step": 16,
              "variableName": "Throwable failure",
              "startLine": 94,
              "startColumn": 78,
              "endLine": 94,
              "endColumn": 95,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Throwable",
              "code": "\n    // TODO: We should handle this exception at the source instead of using instanceof to detect it after it is thrown.\n    //       We should try to avoid catching and analyzing runtime exceptions\n    public Throwable mapRepositoryOverrideFailure(String contextDisplayName, Throwable failure) {\n        if (!(failure instanceof ModuleVersionNotFoundException) || !settingsRepositoriesIgnored()) {\n            return failure;\n        }"
            },
            {
              "step": 17,
              "variableName": "failure",
              "startLine": 108,
              "startColumn": 35,
              "endLine": 108,
              "endColumn": 42,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Throwable",
              "code": "        return new TypedResolveException(\n            \"dependencies\",\n            contextDisplayName,\n            Collections.singleton(failure),\n            resolutions\n        );\n    }"
            },
            {
              "step": 18,
              "variableName": "Collections.singleton(failure)",
              "startLine": 108,
              "startColumn": 13,
              "endLine": 108,
              "endColumn": 43,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Set [<element>] : Throwable",
              "code": "        return new TypedResolveException(\n            \"dependencies\",\n            contextDisplayName,\n            Collections.singleton(failure),\n            resolutions\n        );\n    }"
            },
            {
              "step": 19,
              "variableName": "Collections.singleton(failure)",
              "startLine": 108,
              "startColumn": 13,
              "endLine": 108,
              "endColumn": 43,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Set",
              "code": "        return new TypedResolveException(\n            \"dependencies\",\n            contextDisplayName,\n            Collections.singleton(failure),\n            resolutions\n        );\n    }"
            },
            {
              "step": 20,
              "variableName": "Iterable<? extends Throwable> failures",
              "startLine": 42,
              "startColumn": 67,
              "endLine": 42,
              "endColumn": 105,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ivyservice/TypedResolveException.java",
              "type": "Set",
              "code": "    /**\n     * Creates a new instance with resolutions.\n     */\n    public TypedResolveException(String type, String displayName, Iterable<? extends Throwable> failures, List<String> resolutions) {\n        super(buildMessage(type, displayName), failures, false);\n        this.type = type;\n        this.resolutions = ImmutableList.copyOf(resolutions);"
            },
            {
              "step": 21,
              "variableName": "failures",
              "startLine": 43,
              "startColumn": 48,
              "endLine": 43,
              "endColumn": 56,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ivyservice/TypedResolveException.java",
              "type": "Set",
              "code": "     * Creates a new instance with resolutions.\n     */\n    public TypedResolveException(String type, String displayName, Iterable<? extends Throwable> failures, List<String> resolutions) {\n        super(buildMessage(type, displayName), failures, false);\n        this.type = type;\n        this.resolutions = ImmutableList.copyOf(resolutions);\n    }"
            },
            {
              "step": 22,
              "variableName": "Iterable<? extends Throwable> causes",
              "startLine": 77,
              "startColumn": 48,
              "endLine": 77,
              "endColumn": 84,
              "uri": "gradle-8.14.0/subprojects/core-api/src/main/java/org/gradle/api/artifacts/ResolveException.java",
              "type": "Set",
              "code": "     * @since 8.9\n     */\n    @Incubating\n    protected ResolveException(String message, Iterable<? extends Throwable> causes, @SuppressWarnings(\"unused\") boolean dummy) {\n        super(message, causes);\n    }\n}"
            },
            {
              "step": 23,
              "variableName": "causes",
              "startLine": 78,
              "startColumn": 24,
              "endLine": 78,
              "endColumn": 30,
              "uri": "gradle-8.14.0/subprojects/core-api/src/main/java/org/gradle/api/artifacts/ResolveException.java",
              "type": "Set",
              "code": "     */\n    @Incubating\n    protected ResolveException(String message, Iterable<? extends Throwable> causes, @SuppressWarnings(\"unused\") boolean dummy) {\n        super(message, causes);\n    }\n}\n"
            },
            {
              "step": 24,
              "variableName": "Iterable<? extends Throwable> causes",
              "startLine": 47,
              "startColumn": 55,
              "endLine": 47,
              "endColumn": 91,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "Set",
              "code": "        this.causes.addAll(Arrays.asList(causes));\n    }\n\n    public DefaultMultiCauseException(String message, Iterable<? extends Throwable> causes) {\n        super(message);\n        this.message = message;\n        initCauses(causes);"
            },
            {
              "step": 25,
              "variableName": "causes",
              "startLine": 50,
              "startColumn": 20,
              "endLine": 50,
              "endColumn": 26,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "Set",
              "code": "    public DefaultMultiCauseException(String message, Iterable<? extends Throwable> causes) {\n        super(message);\n        this.message = message;\n        initCauses(causes);\n    }\n\n    public DefaultMultiCauseException(Factory<String> messageFactory) {"
            },
            {
              "step": 26,
              "variableName": "Iterable<? extends Throwable> causes",
              "startLine": 112,
              "startColumn": 28,
              "endLine": 112,
              "endColumn": 64,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "Iterable",
              "code": "        return null;\n    }\n\n    public void initCauses(Iterable<? extends Throwable> causes) {\n        this.causes.clear();\n        for (Throwable cause : causes) {\n            this.causes.add(cause);"
            },
            {
              "step": 27,
              "variableName": "cause",
              "startLine": 115,
              "startColumn": 29,
              "endLine": 115,
              "endColumn": 34,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "Throwable",
              "code": "    public void initCauses(Iterable<? extends Throwable> causes) {\n        this.causes.clear();\n        for (Throwable cause : causes) {\n            this.causes.add(cause);\n        }\n    }\n"
            },
            {
              "step": 28,
              "variableName": "this.causes",
              "startLine": 115,
              "startColumn": 13,
              "endLine": 115,
              "endColumn": 24,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "CopyOnWriteArrayList [<element>] : Throwable",
              "code": "    public void initCauses(Iterable<? extends Throwable> causes) {\n        this.causes.clear();\n        for (Throwable cause : causes) {\n            this.causes.add(cause);\n        }\n    }\n"
            },
            {
              "step": 29,
              "variableName": "this",
              "startLine": 115,
              "startColumn": 13,
              "endLine": 115,
              "endColumn": 17,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "DefaultMultiCauseException [causes, <element>] : Throwable",
              "code": "    public void initCauses(Iterable<? extends Throwable> causes) {\n        this.causes.clear();\n        for (Throwable cause : causes) {\n            this.causes.add(cause);\n        }\n    }\n"
            },
            {
              "step": 30,
              "variableName": "projectConfigurationException",
              "startLine": 57,
              "startColumn": 17,
              "endLine": 57,
              "endColumn": 46,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/DefaultExceptionAnalyser.java",
              "type": "ProjectConfigurationException [causes, <element>] : Throwable",
              "code": "                }\n            }\n            if (!additionalFailures.isEmpty()) {\n                projectConfigurationException.initCauses(additionalFailures);\n                failures.add(transform(projectConfigurationException));\n            }\n        } else if (exception instanceof ServiceCreationException) {"
            },
            {
              "step": 31,
              "variableName": "projectConfigurationException",
              "startLine": 58,
              "startColumn": 40,
              "endLine": 58,
              "endColumn": 69,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/DefaultExceptionAnalyser.java",
              "type": "ProjectConfigurationException [causes, <element>] : Throwable",
              "code": "            }\n            if (!additionalFailures.isEmpty()) {\n                projectConfigurationException.initCauses(additionalFailures);\n                failures.add(transform(projectConfigurationException));\n            }\n        } else if (exception instanceof ServiceCreationException) {\n            failures.add(transform(new InitializationException(exception)));"
            },
            {
              "step": 32,
              "variableName": "transform(projectConfigurationException)",
              "startLine": 58,
              "startColumn": 30,
              "endLine": 58,
              "endColumn": 70,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/DefaultExceptionAnalyser.java",
              "type": "LocationAwareException",
              "code": "            }\n            if (!additionalFailures.isEmpty()) {\n                projectConfigurationException.initCauses(additionalFailures);\n                failures.add(transform(projectConfigurationException));\n            }\n        } else if (exception instanceof ServiceCreationException) {\n            failures.add(transform(new InitializationException(exception)));"
            },
            {
              "step": 33,
              "variableName": "failures",
              "startLine": 58,
              "startColumn": 17,
              "endLine": 58,
              "endColumn": 25,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/DefaultExceptionAnalyser.java",
              "type": "Collection [<element>] : LocationAwareException",
              "code": "            }\n            if (!additionalFailures.isEmpty()) {\n                projectConfigurationException.initCauses(additionalFailures);\n                failures.add(transform(projectConfigurationException));\n            }\n        } else if (exception instanceof ServiceCreationException) {\n            failures.add(transform(new InitializationException(exception)));"
            },
            {
              "step": 34,
              "variableName": "result",
              "startLine": 53,
              "startColumn": 54,
              "endLine": 53,
              "endColumn": 60,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/MultipleBuildFailuresExceptionAnalyser.java",
              "type": "ArrayList [<element>] : LocationAwareException",
              "code": "        for (Throwable failure : failures) {\n            if (failure instanceof MultipleBuildFailures) {\n                for (Throwable cause : ((MultipleBuildFailures) failure).getCauses()) {\n                    collector.collectFailures(cause, result);\n                }\n            } else {\n                collector.collectFailures(failure, result);"
            },
            {
              "step": 35,
              "variableName": "result",
              "startLine": 60,
              "startColumn": 39,
              "endLine": 60,
              "endColumn": 45,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/MultipleBuildFailuresExceptionAnalyser.java",
              "type": "ArrayList [<element>] : LocationAwareException",
              "code": "            }\n        }\n        if (result.size() == 1 && result.get(0) instanceof RuntimeException) {\n            return (RuntimeException) result.get(0);\n        } else {\n            return new MultipleBuildFailures(result);\n        }"
            },
            {
              "step": 36,
              "variableName": "result.get(0)",
              "startLine": 60,
              "startColumn": 39,
              "endLine": 60,
              "endColumn": 52,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/MultipleBuildFailuresExceptionAnalyser.java",
              "type": "LocationAwareException",
              "code": "            }\n        }\n        if (result.size() == 1 && result.get(0) instanceof RuntimeException) {\n            return (RuntimeException) result.get(0);\n        } else {\n            return new MultipleBuildFailures(result);\n        }"
            },
            {
              "step": 37,
              "variableName": "(RuntimeException) result.get(0)",
              "startLine": 60,
              "startColumn": 20,
              "endLine": 60,
              "endColumn": 52,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/MultipleBuildFailuresExceptionAnalyser.java",
              "type": "LocationAwareException",
              "code": "            }\n        }\n        if (result.size() == 1 && result.get(0) instanceof RuntimeException) {\n            return (RuntimeException) result.get(0);\n        } else {\n            return new MultipleBuildFailures(result);\n        }"
            },
            {
              "step": 38,
              "variableName": "exceptionAnalyser.transform(finishFailures)",
              "startLine": 72,
              "startColumn": 16,
              "endLine": 72,
              "endColumn": 59,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/internal/buildtree/DefaultBuildTreeFinishExecutor.java",
              "type": "LocationAwareException",
              "code": "            finishFailures.addAll(result.getFailures());\n        });\n\n        return exceptionAnalyser.transform(finishFailures);\n    }\n}\n"
            },
            {
              "step": 39,
              "variableName": "delegate.finishBuildTree(failures)",
              "startLine": 46,
              "startColumn": 28,
              "endLine": 46,
              "endColumn": 62,
              "uri": "gradle-8.14.0/subprojects/composite-builds/src/main/java/org/gradle/composite/internal/OperationFiringBuildTreeFinishExecutor.java",
              "type": "LocationAwareException",
              "code": "            @Override\n            public RuntimeException call(BuildOperationContext context) {\n                try {\n                    return delegate.finishBuildTree(failures);\n                } finally {\n                    context.setResult(RESULT);\n                }"
            },
            {
              "step": 40,
              "variableName": "buildOperation.call(context)",
              "startLine": 239,
              "startColumn": 21,
              "endLine": 239,
              "endColumn": 49,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/testFixtures/java/org/gradle/internal/operations/TestBuildOperationRunner.java",
              "type": "LocationAwareException",
              "code": "            TestBuildOperationContext context = new TestBuildOperationContext(record);\n            T t;\n            try {\n                t = buildOperation.call(context);\n            } catch (Throwable failure) {\n                if (record.failure == null) {\n                    record.failure = failure;"
            },
            {
              "step": 41,
              "variableName": "t",
              "startLine": 246,
              "startColumn": 20,
              "endLine": 246,
              "endColumn": 21,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/testFixtures/java/org/gradle/internal/operations/TestBuildOperationRunner.java",
              "type": "LocationAwareException",
              "code": "                }\n                throw throwAsUncheckedException(failure);\n            }\n            return t;\n        }\n\n        private <O extends BuildOperation> void execute(O buildOperation, BuildOperationWorker<O> worker) {"
            },
            {
              "step": 42,
              "variableName": "log.call(buildOperation)",
              "startLine": 51,
              "startColumn": 16,
              "endLine": 51,
              "endColumn": 40,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/testFixtures/java/org/gradle/internal/operations/TestBuildOperationRunner.java",
              "type": "LocationAwareException",
              "code": "\n    @Override\n    public <T> T call(CallableBuildOperation<T> buildOperation) {\n        return log.call(buildOperation);\n    }\n\n    @Override"
            },
            {
              "step": 43,
              "variableName": "ca",
              "startLine": 115,
              "startColumn": 5,
              "endLine": 121,
              "endColumn": 7,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/configurationcache/ConfigurationCacheBuildOperations.kt",
              "type": "LocationAwareException",
              "code": "\ninternal\nfun <T : Any> BuildOperationRunner.withModelLoadOperation(block: () -> T): T =\n    call(object : CallableBuildOperation<T> {\n        override fun description(): BuildOperationDescriptor.Builder = BuildOperationDescriptor\n            .displayName(\"Load model from configuration cache\")\n            .progressDisplayName(\"Loading model from configuration cache\")"
            },
            {
              "step": 44,
              "variableName": "ca",
              "startLine": 115,
              "startColumn": 5,
              "endLine": 121,
              "endColumn": 7,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/configurationcache/ConfigurationCacheBuildOperations.kt",
              "type": "LocationAwareException",
              "code": "\ninternal\nfun <T : Any> BuildOperationRunner.withModelLoadOperation(block: () -> T): T =\n    call(object : CallableBuildOperation<T> {\n        override fun description(): BuildOperationDescriptor.Builder = BuildOperationDescriptor\n            .displayName(\"Load model from configuration cache\")\n            .progressDisplayName(\"Loading model from configuration cache\")"
            },
            {
              "step": 45,
              "variableName": "b",
              "startLine": 635,
              "startColumn": 9,
              "endLine": 641,
              "endColumn": 10,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "        // No need to record the `ClassLoaderScope` tree when loading\n        scopeRegistryListener.dispose()\n\n        buildOperationRunner.withModelLoadOperation {\n            val storeLoadResult = entryStore.useForStateLoad(StateType.Model) { stateFile: ConfigurationCacheStateFile ->\n                cacheIO.readModelFrom(stateFile)\n            }"
            },
            {
              "step": 46,
              "variableName": "block()",
              "startLine": 668,
              "startColumn": 22,
              "endLine": 668,
              "endColumn": 29,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "    private\n    inline fun <T> runAtConfigurationTime(block: () -> T): T {\n        prepareConfigurationTimeBarrier()\n        val result = block()\n        crossConfigurationTimeBarrier()\n        return result\n    }"
            },
            {
              "step": 47,
              "variableName": "result",
              "startLine": 670,
              "startColumn": 16,
              "endLine": 670,
              "endColumn": 22,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "        prepareConfigurationTimeBarrier()\n        val result = block()\n        crossConfigurationTimeBarrier()\n        return result\n    }\n\n    private"
            },
            {
              "step": 48,
              "variableName": "runAtConfigurationTime(...) : LocationAwareException",
              "startLine": 631,
              "startColumn": 28,
              "endLine": 642,
              "endColumn": 6,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "    data class LoadResultMetadata(val originInvocationId: String? = null)\n\n    private\n    fun loadModel(): Any = runAtConfigurationTime {\n        // No need to record the `ClassLoaderScope` tree when loading\n        scopeRegistryListener.dispose()\n"
            },
            {
              "step": 49,
              "variableName": "loadModel()",
              "startLine": 268,
              "startColumn": 20,
              "endLine": 268,
              "endColumn": 31,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "    override fun <T : Any> loadOrCreateModel(creator: () -> T): T {\n        if (isLoaded) {\n            runLoadedSideEffects()\n            return loadModel().uncheckedCast()\n        }\n\n        return runWorkThatContributesToCacheEntry {"
            },
            {
              "step": 50,
              "variableName": "Any",
              "startLine": 22,
              "startColumn": 15,
              "endLine": 22,
              "endColumn": 18,
              "uri": "gradle-8.14.0/platforms/core-configuration/stdlib-kotlin-extensions/src/main/kotlin/org/gradle/internal/extensions/stdlib/CastExtensions.kt",
              "type": "Object",
              "code": "import org.gradle.internal.Cast\n\n\nfun <T : Any> Any.uncheckedCast(): T =\n    Cast.uncheckedNonnullCast(this)\n"
            },
            {
              "step": 51,
              "variableName": "this",
              "startLine": 23,
              "startColumn": 31,
              "endLine": 23,
              "endColumn": 35,
              "uri": "gradle-8.14.0/platforms/core-configuration/stdlib-kotlin-extensions/src/main/kotlin/org/gradle/internal/extensions/stdlib/CastExtensions.kt",
              "type": "Object",
              "code": "\n\nfun <T : Any> Any.uncheckedCast(): T =\n    Cast.uncheckedNonnullCast(this)\n"
            },
            {
              "step": 52,
              "variableName": "Object object",
              "startLine": 76,
              "startColumn": 46,
              "endLine": 76,
              "endColumn": 59,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/Cast.java",
              "type": "Object",
              "code": "    }\n\n    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})\n    public static <T> T uncheckedNonnullCast(Object object) {\n        return (T) object;\n    }\n}"
            },
            {
              "step": 53,
              "variableName": "(T) object",
              "startLine": 77,
              "startColumn": 16,
              "endLine": 77,
              "endColumn": 26,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/Cast.java",
              "type": "Object",
              "code": "\n    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})\n    public static <T> T uncheckedNonnullCast(Object object) {\n        return (T) object;\n    }\n}\n"
            },
            {
              "step": 54,
              "variableName": "Cast.uncheckedNonnullCast(collectionType)",
              "startLine": 223,
              "startColumn": 16,
              "endLine": 223,
              "endColumn": 57,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/api/internal/provider/AbstractCollectionProperty.java",
              "type": "Class",
              "code": "    @Override\n    @Nonnull\n    public Class<C> getType() {\n        return Cast.uncheckedNonnullCast(collectionType);\n    }\n\n    @Override"
            },
            {
              "step": 55,
              "variableName": "provider.getType()",
              "startLine": 41,
              "startColumn": 35,
              "endLine": 41,
              "endColumn": 53,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/api/internal/provider/OrElseFixedValueProvider.java",
              "type": "Class",
              "code": "    @Nullable\n    @Override\n    public Class<T> getType() {\n        return Cast.uncheckedCast(provider.getType());\n    }\n\n    @Override"
            },
            {
              "step": 56,
              "variableName": "@Nullable Object object",
              "startLine": 71,
              "startColumn": 39,
              "endLine": 71,
              "endColumn": 62,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/Cast.java",
              "type": "Object",
              "code": "\n    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})\n    @Nullable\n    public static <T> T uncheckedCast(@Nullable Object object) {\n        return (T) object;\n    }\n"
            },
            {
              "step": 57,
              "variableName": "(T) object",
              "startLine": 72,
              "startColumn": 16,
              "endLine": 72,
              "endColumn": 26,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/Cast.java",
              "type": "Object",
              "code": "    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})\n    @Nullable\n    public static <T> T uncheckedCast(@Nullable Object object) {\n        return (T) object;\n    }\n\n    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})"
            },
            {
              "step": 58,
              "variableName": "Cast.uncheckedCast(sanitizer.sanitize(t))",
              "startLine": 41,
              "startColumn": 15,
              "endLine": 41,
              "endColumn": 56,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/api/internal/provider/TypeSanitizingTransformer.java",
              "type": "Object",
              "code": "\n    @Override\n    public T transform(T t) {\n        T v = Cast.uncheckedCast(sanitizer.sanitize(t));\n        if (targetType.isInstance(v)) {\n            return v;\n        }"
            },
            {
              "step": 59,
              "variableName": "v",
              "startLine": 43,
              "startColumn": 20,
              "endLine": 43,
              "endColumn": 21,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/api/internal/provider/TypeSanitizingTransformer.java",
              "type": "Object",
              "code": "    public T transform(T t) {\n        T v = Cast.uncheckedCast(sanitizer.sanitize(t));\n        if (targetType.isInstance(v)) {\n            return v;\n        }\n        throw new IllegalArgumentException(String.format(\"Cannot get the value of %s of type %s as the provider associated with this property returned a value of type %s.\", owner.getDisplayName(), targetType.getName(), v.getClass().getName()));\n    }"
            },
            {
              "step": 60,
              "variableName": "describer.transform(this)",
              "startLine": 163,
              "startColumn": 16,
              "endLine": 163,
              "endColumn": 41,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/repositories/DefaultMavenArtifactRepository.java",
              "type": "String",
              "code": "\n    @Override\n    public String getDisplayName() {\n        return describer.transform(this);\n    }\n\n    @Override"
            },
            {
              "step": 61,
              "variableName": "displayName.getDisplayName()",
              "startLine": 53,
              "startColumn": 16,
              "endLine": 53,
              "endColumn": 44,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/DefaultDependencySet.java",
              "type": "String",
              "code": "\n    @Override\n    public String toString() {\n        return displayName.getDisplayName();\n    }\n\n    @Override"
            },
            {
              "step": 62,
              "variableName": "literal.toString()",
              "startLine": 583,
              "startColumn": 20,
              "endLine": 583,
              "endColumn": 38,
              "uri": "gradle-8.14.0/platforms/software/build-init/src/main/java/org/gradle/buildinit/plugins/internal/BuildScriptBuilder.java",
              "type": "String",
              "code": "\n        @Override\n        public String with(Syntax syntax) {\n            return literal.toString();\n        }\n    }\n"
            },
            {
              "step": 63,
              "variableName": "propertyValue.with(this)",
              "startLine": 2113,
              "startColumn": 75,
              "endLine": 2113,
              "endColumn": 99,
              "uri": "gradle-8.14.0/platforms/software/build-init/src/main/java/org/gradle/buildinit/plugins/internal/BuildScriptBuilder.java",
              "type": "String",
              "code": "            ExpressionValue propertyValue = expression.propertyValue;\n            if (expression.assignOperator) {\n                if (propertyValue.isBooleanType()) {\n                    return booleanPropertyNameFor(propertyName) + \" = \" + propertyValue.with(this);\n                }\n                return propertyName + \" = \" + propertyValue.with(this);\n            } else {"
            },
            {
              "step": 64,
              "variableName": "booleanPropertyNameFor(propertyName) + \" = \" + propertyValue.with(this)",
              "startLine": 2113,
              "startColumn": 28,
              "endLine": 2113,
              "endColumn": 99,
              "uri": "gradle-8.14.0/platforms/software/build-init/src/main/java/org/gradle/buildinit/plugins/internal/BuildScriptBuilder.java",
              "type": "String",
              "code": "            ExpressionValue propertyValue = expression.propertyValue;\n            if (expression.assignOperator) {\n                if (propertyValue.isBooleanType()) {\n                    return booleanPropertyNameFor(propertyName) + \" = \" + propertyValue.with(this);\n                }\n                return propertyName + \" = \" + propertyValue.with(this);\n            } else {"
            },
            {
              "step": 65,
              "variableName": "printer.syntax.propertyAssignment(this)",
              "startLine": 1050,
              "startColumn": 29,
              "endLine": 1050,
              "endColumn": 68,
              "uri": "gradle-8.14.0/platforms/software/build-init/src/main/java/org/gradle/buildinit/plugins/internal/BuildScriptBuilder.java",
              "type": "String",
              "code": "\n        @Override\n        public void writeCodeTo(PrettyPrinter printer) {\n            printer.println(printer.syntax.propertyAssignment(this));\n        }\n    }\n"
            },
            {
              "step": 66,
              "variableName": "String s",
              "startLine": 1976,
              "startColumn": 30,
              "endLine": 1976,
              "endColumn": 38,
              "uri": "gradle-8.14.0/platforms/software/build-init/src/main/java/org/gradle/buildinit/plugins/internal/BuildScriptBuilder.java",
              "type": "String",
              "code": "            }\n        }\n\n        private void println(String s) {\n            if (!indent.isEmpty()) {\n                writer.print(indent);\n            }"
            },
            {
              "step": 67,
              "variableName": "s",
              "startLine": 1984,
              "startColumn": 32,
              "endLine": 1984,
              "endColumn": 33,
              "uri": "gradle-8.14.0/platforms/software/build-init/src/main/java/org/gradle/buildinit/plugins/internal/BuildScriptBuilder.java",
              "type": "",
              "code": "                writer.println(s + eolComment);\n                eolComment = null;\n            } else {\n                writer.println(s);\n            }\n            hasSeparatorLine = false;\n        }"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "source",
              "startLine": 42,
              "startColumn": 27,
              "endLine": 42,
              "endColumn": 33,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/RegExpNameMapper.java",
              "type": "String",
              "code": "        if (matcher == null) {\n            matcher = pattern.matcher(source);\n        } else {\n            matcher.reset(source);\n        }\n        String result = source;\n        if (matcher.find()) {"
            },
            {
              "step": 1,
              "variableName": "result",
              "startLine": 48,
              "startColumn": 16,
              "endLine": 48,
              "endColumn": 22,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/RegExpNameMapper.java",
              "type": "String",
              "code": "        if (matcher.find()) {\n            result = matcher.replaceFirst(replacement);\n        }\n        return result;\n    }\n}\n"
            },
            {
              "step": 2,
              "variableName": "transformer.transform(value)",
              "startLine": 37,
              "startColumn": 31,
              "endLine": 37,
              "endColumn": 59,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/ChainingTransformer.java",
              "type": "String",
              "code": "    public T transform(T original) {\n        T value = original;\n        for (Transformer<T, T> transformer : transformers) {\n            value = type.cast(transformer.transform(value));\n        }\n        return value;\n    }"
            },
            {
              "step": 3,
              "variableName": "type.cast(transformer.transform(value))",
              "startLine": 37,
              "startColumn": 21,
              "endLine": 37,
              "endColumn": 60,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/ChainingTransformer.java",
              "type": "String",
              "code": "    public T transform(T original) {\n        T value = original;\n        for (Transformer<T, T> transformer : transformers) {\n            value = type.cast(transformer.transform(value));\n        }\n        return value;\n    }"
            },
            {
              "step": 4,
              "variableName": "value",
              "startLine": 39,
              "startColumn": 16,
              "endLine": 39,
              "endColumn": 21,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/ChainingTransformer.java",
              "type": "String",
              "code": "        for (Transformer<T, T> transformer : transformers) {\n            value = type.cast(transformer.transform(value));\n        }\n        return value;\n    }\n\n    public void add(Transformer<T, T> transformer) {"
            },
            {
              "step": 5,
              "variableName": "describer.transform(this)",
              "startLine": 163,
              "startColumn": 16,
              "endLine": 163,
              "endColumn": 41,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/repositories/DefaultMavenArtifactRepository.java",
              "type": "String",
              "code": "\n    @Override\n    public String getDisplayName() {\n        return describer.transform(this);\n    }\n\n    @Override"
            },
            {
              "step": 6,
              "variableName": "describable.getDisplayName()",
              "startLine": 313,
              "startColumn": 35,
              "endLine": 313,
              "endColumn": 63,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "String",
              "code": "        public String getDisplayName() {\n            synchronized (this) {\n                if (displayName == null) {\n                    displayName = describable.getDisplayName();\n                    if (capDisplayName != null || !(describable instanceof DisplayName)) {\n                        describable = null;\n                    }"
            },
            {
              "step": 7,
              "variableName": "displayName",
              "startLine": 318,
              "startColumn": 24,
              "endLine": 318,
              "endColumn": 35,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "String",
              "code": "                        describable = null;\n                    }\n                }\n                return displayName;\n            }\n        }\n    }"
            },
            {
              "step": 8,
              "variableName": "displayName.getDisplayName()",
              "startLine": 772,
              "startColumn": 73,
              "endLine": 772,
              "endColumn": 101,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/configurations/DefaultConfiguration.java",
              "type": "String",
              "code": "                try {\n                    results = resolver.resolveGraph(DefaultConfiguration.this);\n                } catch (Exception e) {\n                    throw exceptionMapper.mapFailure(e, \"dependencies\", displayName.getDisplayName());\n                }\n\n                // Make the new state visible in case a dependency resolution listener queries the result, which requires the new state"
            },
            {
              "step": 9,
              "variableName": "String contextDisplayName",
              "startLine": 68,
              "startColumn": 77,
              "endLine": 68,
              "endColumn": 102,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "String",
              "code": "        return mapFailure(failure, type, displayName);\n    }\n\n    public TypedResolveException mapFailure(Throwable failure, String type, String contextDisplayName) {\n        if (!(failure instanceof TypedResolveException)) {\n            return new TypedResolveException(\n                type,"
            },
            {
              "step": 10,
              "variableName": "contextDisplayName",
              "startLine": 72,
              "startColumn": 17,
              "endLine": 72,
              "endColumn": 35,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "String",
              "code": "        if (!(failure instanceof TypedResolveException)) {\n            return new TypedResolveException(\n                type,\n                contextDisplayName,\n                ImmutableList.of(mapRepositoryOverrideFailure(contextDisplayName, failure))\n            );\n        }"
            },
            {
              "step": 11,
              "variableName": "new TypedResolveException(...) : TypedResolveException",
              "startLine": 70,
              "startColumn": 20,
              "endLine": 74,
              "endColumn": 14,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "TypedResolveException",
              "code": "\n    public TypedResolveException mapFailure(Throwable failure, String type, String contextDisplayName) {\n        if (!(failure instanceof TypedResolveException)) {\n            return new TypedResolveException(\n                type,\n                contextDisplayName,\n                ImmutableList.of(mapRepositoryOverrideFailure(contextDisplayName, failure))"
            },
            {
              "step": 12,
              "variableName": "exceptionMapper.mapFailure(e, \"dependencies\", displayName.getDisplayName())",
              "startLine": 772,
              "startColumn": 27,
              "endLine": 772,
              "endColumn": 102,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/configurations/DefaultConfiguration.java",
              "type": "TypedResolveException",
              "code": "                try {\n                    results = resolver.resolveGraph(DefaultConfiguration.this);\n                } catch (Exception e) {\n                    throw exceptionMapper.mapFailure(e, \"dependencies\", displayName.getDisplayName());\n                }\n\n                // Make the new state visible in case a dependency resolution listener queries the result, which requires the new state"
            },
            {
              "step": 13,
              "variableName": "e",
              "startLine": 772,
              "startColumn": 54,
              "endLine": 772,
              "endColumn": 55,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/configurations/DefaultConfiguration.java",
              "type": "Exception",
              "code": "                try {\n                    results = resolver.resolveGraph(DefaultConfiguration.this);\n                } catch (Exception e) {\n                    throw exceptionMapper.mapFailure(e, \"dependencies\", displayName.getDisplayName());\n                }\n\n                // Make the new state visible in case a dependency resolution listener queries the result, which requires the new state"
            },
            {
              "step": 14,
              "variableName": "Throwable failure",
              "startLine": 68,
              "startColumn": 45,
              "endLine": 68,
              "endColumn": 62,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Throwable",
              "code": "        return mapFailure(failure, type, displayName);\n    }\n\n    public TypedResolveException mapFailure(Throwable failure, String type, String contextDisplayName) {\n        if (!(failure instanceof TypedResolveException)) {\n            return new TypedResolveException(\n                type,"
            },
            {
              "step": 15,
              "variableName": "failure",
              "startLine": 73,
              "startColumn": 83,
              "endLine": 73,
              "endColumn": 90,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Throwable",
              "code": "            return new TypedResolveException(\n                type,\n                contextDisplayName,\n                ImmutableList.of(mapRepositoryOverrideFailure(contextDisplayName, failure))\n            );\n        }\n"
            },
            {
              "step": 16,
              "variableName": "Throwable failure",
              "startLine": 94,
              "startColumn": 78,
              "endLine": 94,
              "endColumn": 95,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Throwable",
              "code": "\n    // TODO: We should handle this exception at the source instead of using instanceof to detect it after it is thrown.\n    //       We should try to avoid catching and analyzing runtime exceptions\n    public Throwable mapRepositoryOverrideFailure(String contextDisplayName, Throwable failure) {\n        if (!(failure instanceof ModuleVersionNotFoundException) || !settingsRepositoriesIgnored()) {\n            return failure;\n        }"
            },
            {
              "step": 17,
              "variableName": "failure",
              "startLine": 108,
              "startColumn": 35,
              "endLine": 108,
              "endColumn": 42,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Throwable",
              "code": "        return new TypedResolveException(\n            \"dependencies\",\n            contextDisplayName,\n            Collections.singleton(failure),\n            resolutions\n        );\n    }"
            },
            {
              "step": 18,
              "variableName": "Collections.singleton(failure)",
              "startLine": 108,
              "startColumn": 13,
              "endLine": 108,
              "endColumn": 43,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Set [<element>] : Throwable",
              "code": "        return new TypedResolveException(\n            \"dependencies\",\n            contextDisplayName,\n            Collections.singleton(failure),\n            resolutions\n        );\n    }"
            },
            {
              "step": 19,
              "variableName": "Collections.singleton(failure)",
              "startLine": 108,
              "startColumn": 13,
              "endLine": 108,
              "endColumn": 43,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Set",
              "code": "        return new TypedResolveException(\n            \"dependencies\",\n            contextDisplayName,\n            Collections.singleton(failure),\n            resolutions\n        );\n    }"
            },
            {
              "step": 20,
              "variableName": "Iterable<? extends Throwable> failures",
              "startLine": 42,
              "startColumn": 67,
              "endLine": 42,
              "endColumn": 105,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ivyservice/TypedResolveException.java",
              "type": "Set",
              "code": "    /**\n     * Creates a new instance with resolutions.\n     */\n    public TypedResolveException(String type, String displayName, Iterable<? extends Throwable> failures, List<String> resolutions) {\n        super(buildMessage(type, displayName), failures, false);\n        this.type = type;\n        this.resolutions = ImmutableList.copyOf(resolutions);"
            },
            {
              "step": 21,
              "variableName": "failures",
              "startLine": 43,
              "startColumn": 48,
              "endLine": 43,
              "endColumn": 56,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ivyservice/TypedResolveException.java",
              "type": "Set",
              "code": "     * Creates a new instance with resolutions.\n     */\n    public TypedResolveException(String type, String displayName, Iterable<? extends Throwable> failures, List<String> resolutions) {\n        super(buildMessage(type, displayName), failures, false);\n        this.type = type;\n        this.resolutions = ImmutableList.copyOf(resolutions);\n    }"
            },
            {
              "step": 22,
              "variableName": "Iterable<? extends Throwable> causes",
              "startLine": 77,
              "startColumn": 48,
              "endLine": 77,
              "endColumn": 84,
              "uri": "gradle-8.14.0/subprojects/core-api/src/main/java/org/gradle/api/artifacts/ResolveException.java",
              "type": "Set",
              "code": "     * @since 8.9\n     */\n    @Incubating\n    protected ResolveException(String message, Iterable<? extends Throwable> causes, @SuppressWarnings(\"unused\") boolean dummy) {\n        super(message, causes);\n    }\n}"
            },
            {
              "step": 23,
              "variableName": "causes",
              "startLine": 78,
              "startColumn": 24,
              "endLine": 78,
              "endColumn": 30,
              "uri": "gradle-8.14.0/subprojects/core-api/src/main/java/org/gradle/api/artifacts/ResolveException.java",
              "type": "Set",
              "code": "     */\n    @Incubating\n    protected ResolveException(String message, Iterable<? extends Throwable> causes, @SuppressWarnings(\"unused\") boolean dummy) {\n        super(message, causes);\n    }\n}\n"
            },
            {
              "step": 24,
              "variableName": "Iterable<? extends Throwable> causes",
              "startLine": 47,
              "startColumn": 55,
              "endLine": 47,
              "endColumn": 91,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "Set",
              "code": "        this.causes.addAll(Arrays.asList(causes));\n    }\n\n    public DefaultMultiCauseException(String message, Iterable<? extends Throwable> causes) {\n        super(message);\n        this.message = message;\n        initCauses(causes);"
            },
            {
              "step": 25,
              "variableName": "causes",
              "startLine": 50,
              "startColumn": 20,
              "endLine": 50,
              "endColumn": 26,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "Set",
              "code": "    public DefaultMultiCauseException(String message, Iterable<? extends Throwable> causes) {\n        super(message);\n        this.message = message;\n        initCauses(causes);\n    }\n\n    public DefaultMultiCauseException(Factory<String> messageFactory) {"
            },
            {
              "step": 26,
              "variableName": "Iterable<? extends Throwable> causes",
              "startLine": 112,
              "startColumn": 28,
              "endLine": 112,
              "endColumn": 64,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "Iterable",
              "code": "        return null;\n    }\n\n    public void initCauses(Iterable<? extends Throwable> causes) {\n        this.causes.clear();\n        for (Throwable cause : causes) {\n            this.causes.add(cause);"
            },
            {
              "step": 27,
              "variableName": "cause",
              "startLine": 115,
              "startColumn": 29,
              "endLine": 115,
              "endColumn": 34,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "Throwable",
              "code": "    public void initCauses(Iterable<? extends Throwable> causes) {\n        this.causes.clear();\n        for (Throwable cause : causes) {\n            this.causes.add(cause);\n        }\n    }\n"
            },
            {
              "step": 28,
              "variableName": "this.causes",
              "startLine": 115,
              "startColumn": 13,
              "endLine": 115,
              "endColumn": 24,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "CopyOnWriteArrayList [<element>] : Throwable",
              "code": "    public void initCauses(Iterable<? extends Throwable> causes) {\n        this.causes.clear();\n        for (Throwable cause : causes) {\n            this.causes.add(cause);\n        }\n    }\n"
            },
            {
              "step": 29,
              "variableName": "this",
              "startLine": 115,
              "startColumn": 13,
              "endLine": 115,
              "endColumn": 17,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "DefaultMultiCauseException [causes, <element>] : Throwable",
              "code": "    public void initCauses(Iterable<? extends Throwable> causes) {\n        this.causes.clear();\n        for (Throwable cause : causes) {\n            this.causes.add(cause);\n        }\n    }\n"
            },
            {
              "step": 30,
              "variableName": "projectConfigurationException",
              "startLine": 57,
              "startColumn": 17,
              "endLine": 57,
              "endColumn": 46,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/DefaultExceptionAnalyser.java",
              "type": "ProjectConfigurationException [causes, <element>] : Throwable",
              "code": "                }\n            }\n            if (!additionalFailures.isEmpty()) {\n                projectConfigurationException.initCauses(additionalFailures);\n                failures.add(transform(projectConfigurationException));\n            }\n        } else if (exception instanceof ServiceCreationException) {"
            },
            {
              "step": 31,
              "variableName": "projectConfigurationException",
              "startLine": 58,
              "startColumn": 40,
              "endLine": 58,
              "endColumn": 69,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/DefaultExceptionAnalyser.java",
              "type": "ProjectConfigurationException [causes, <element>] : Throwable",
              "code": "            }\n            if (!additionalFailures.isEmpty()) {\n                projectConfigurationException.initCauses(additionalFailures);\n                failures.add(transform(projectConfigurationException));\n            }\n        } else if (exception instanceof ServiceCreationException) {\n            failures.add(transform(new InitializationException(exception)));"
            },
            {
              "step": 32,
              "variableName": "transform(projectConfigurationException)",
              "startLine": 58,
              "startColumn": 30,
              "endLine": 58,
              "endColumn": 70,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/DefaultExceptionAnalyser.java",
              "type": "LocationAwareException",
              "code": "            }\n            if (!additionalFailures.isEmpty()) {\n                projectConfigurationException.initCauses(additionalFailures);\n                failures.add(transform(projectConfigurationException));\n            }\n        } else if (exception instanceof ServiceCreationException) {\n            failures.add(transform(new InitializationException(exception)));"
            },
            {
              "step": 33,
              "variableName": "failures",
              "startLine": 58,
              "startColumn": 17,
              "endLine": 58,
              "endColumn": 25,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/DefaultExceptionAnalyser.java",
              "type": "Collection [<element>] : LocationAwareException",
              "code": "            }\n            if (!additionalFailures.isEmpty()) {\n                projectConfigurationException.initCauses(additionalFailures);\n                failures.add(transform(projectConfigurationException));\n            }\n        } else if (exception instanceof ServiceCreationException) {\n            failures.add(transform(new InitializationException(exception)));"
            },
            {
              "step": 34,
              "variableName": "result",
              "startLine": 53,
              "startColumn": 54,
              "endLine": 53,
              "endColumn": 60,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/MultipleBuildFailuresExceptionAnalyser.java",
              "type": "ArrayList [<element>] : LocationAwareException",
              "code": "        for (Throwable failure : failures) {\n            if (failure instanceof MultipleBuildFailures) {\n                for (Throwable cause : ((MultipleBuildFailures) failure).getCauses()) {\n                    collector.collectFailures(cause, result);\n                }\n            } else {\n                collector.collectFailures(failure, result);"
            },
            {
              "step": 35,
              "variableName": "result",
              "startLine": 60,
              "startColumn": 39,
              "endLine": 60,
              "endColumn": 45,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/MultipleBuildFailuresExceptionAnalyser.java",
              "type": "ArrayList [<element>] : LocationAwareException",
              "code": "            }\n        }\n        if (result.size() == 1 && result.get(0) instanceof RuntimeException) {\n            return (RuntimeException) result.get(0);\n        } else {\n            return new MultipleBuildFailures(result);\n        }"
            },
            {
              "step": 36,
              "variableName": "result.get(0)",
              "startLine": 60,
              "startColumn": 39,
              "endLine": 60,
              "endColumn": 52,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/MultipleBuildFailuresExceptionAnalyser.java",
              "type": "LocationAwareException",
              "code": "            }\n        }\n        if (result.size() == 1 && result.get(0) instanceof RuntimeException) {\n            return (RuntimeException) result.get(0);\n        } else {\n            return new MultipleBuildFailures(result);\n        }"
            },
            {
              "step": 37,
              "variableName": "(RuntimeException) result.get(0)",
              "startLine": 60,
              "startColumn": 20,
              "endLine": 60,
              "endColumn": 52,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/MultipleBuildFailuresExceptionAnalyser.java",
              "type": "LocationAwareException",
              "code": "            }\n        }\n        if (result.size() == 1 && result.get(0) instanceof RuntimeException) {\n            return (RuntimeException) result.get(0);\n        } else {\n            return new MultipleBuildFailures(result);\n        }"
            },
            {
              "step": 38,
              "variableName": "exceptionAnalyser.transform(finishFailures)",
              "startLine": 72,
              "startColumn": 16,
              "endLine": 72,
              "endColumn": 59,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/internal/buildtree/DefaultBuildTreeFinishExecutor.java",
              "type": "LocationAwareException",
              "code": "            finishFailures.addAll(result.getFailures());\n        });\n\n        return exceptionAnalyser.transform(finishFailures);\n    }\n}\n"
            },
            {
              "step": 39,
              "variableName": "delegate.finishBuildTree(failures)",
              "startLine": 46,
              "startColumn": 28,
              "endLine": 46,
              "endColumn": 62,
              "uri": "gradle-8.14.0/subprojects/composite-builds/src/main/java/org/gradle/composite/internal/OperationFiringBuildTreeFinishExecutor.java",
              "type": "LocationAwareException",
              "code": "            @Override\n            public RuntimeException call(BuildOperationContext context) {\n                try {\n                    return delegate.finishBuildTree(failures);\n                } finally {\n                    context.setResult(RESULT);\n                }"
            },
            {
              "step": 40,
              "variableName": "buildOperation.call(context)",
              "startLine": 239,
              "startColumn": 21,
              "endLine": 239,
              "endColumn": 49,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/testFixtures/java/org/gradle/internal/operations/TestBuildOperationRunner.java",
              "type": "LocationAwareException",
              "code": "            TestBuildOperationContext context = new TestBuildOperationContext(record);\n            T t;\n            try {\n                t = buildOperation.call(context);\n            } catch (Throwable failure) {\n                if (record.failure == null) {\n                    record.failure = failure;"
            },
            {
              "step": 41,
              "variableName": "t",
              "startLine": 246,
              "startColumn": 20,
              "endLine": 246,
              "endColumn": 21,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/testFixtures/java/org/gradle/internal/operations/TestBuildOperationRunner.java",
              "type": "LocationAwareException",
              "code": "                }\n                throw throwAsUncheckedException(failure);\n            }\n            return t;\n        }\n\n        private <O extends BuildOperation> void execute(O buildOperation, BuildOperationWorker<O> worker) {"
            },
            {
              "step": 42,
              "variableName": "log.call(buildOperation)",
              "startLine": 51,
              "startColumn": 16,
              "endLine": 51,
              "endColumn": 40,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/testFixtures/java/org/gradle/internal/operations/TestBuildOperationRunner.java",
              "type": "LocationAwareException",
              "code": "\n    @Override\n    public <T> T call(CallableBuildOperation<T> buildOperation) {\n        return log.call(buildOperation);\n    }\n\n    @Override"
            },
            {
              "step": 43,
              "variableName": "ca",
              "startLine": 115,
              "startColumn": 5,
              "endLine": 121,
              "endColumn": 7,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/configurationcache/ConfigurationCacheBuildOperations.kt",
              "type": "LocationAwareException",
              "code": "\ninternal\nfun <T : Any> BuildOperationRunner.withModelLoadOperation(block: () -> T): T =\n    call(object : CallableBuildOperation<T> {\n        override fun description(): BuildOperationDescriptor.Builder = BuildOperationDescriptor\n            .displayName(\"Load model from configuration cache\")\n            .progressDisplayName(\"Loading model from configuration cache\")"
            },
            {
              "step": 44,
              "variableName": "ca",
              "startLine": 115,
              "startColumn": 5,
              "endLine": 121,
              "endColumn": 7,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/configurationcache/ConfigurationCacheBuildOperations.kt",
              "type": "LocationAwareException",
              "code": "\ninternal\nfun <T : Any> BuildOperationRunner.withModelLoadOperation(block: () -> T): T =\n    call(object : CallableBuildOperation<T> {\n        override fun description(): BuildOperationDescriptor.Builder = BuildOperationDescriptor\n            .displayName(\"Load model from configuration cache\")\n            .progressDisplayName(\"Loading model from configuration cache\")"
            },
            {
              "step": 45,
              "variableName": "b",
              "startLine": 635,
              "startColumn": 9,
              "endLine": 641,
              "endColumn": 10,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "        // No need to record the `ClassLoaderScope` tree when loading\n        scopeRegistryListener.dispose()\n\n        buildOperationRunner.withModelLoadOperation {\n            val storeLoadResult = entryStore.useForStateLoad(StateType.Model) { stateFile: ConfigurationCacheStateFile ->\n                cacheIO.readModelFrom(stateFile)\n            }"
            },
            {
              "step": 46,
              "variableName": "block()",
              "startLine": 668,
              "startColumn": 22,
              "endLine": 668,
              "endColumn": 29,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "    private\n    inline fun <T> runAtConfigurationTime(block: () -> T): T {\n        prepareConfigurationTimeBarrier()\n        val result = block()\n        crossConfigurationTimeBarrier()\n        return result\n    }"
            },
            {
              "step": 47,
              "variableName": "result",
              "startLine": 670,
              "startColumn": 16,
              "endLine": 670,
              "endColumn": 22,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "        prepareConfigurationTimeBarrier()\n        val result = block()\n        crossConfigurationTimeBarrier()\n        return result\n    }\n\n    private"
            },
            {
              "step": 48,
              "variableName": "runAtConfigurationTime(...) : LocationAwareException",
              "startLine": 631,
              "startColumn": 28,
              "endLine": 642,
              "endColumn": 6,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "    data class LoadResultMetadata(val originInvocationId: String? = null)\n\n    private\n    fun loadModel(): Any = runAtConfigurationTime {\n        // No need to record the `ClassLoaderScope` tree when loading\n        scopeRegistryListener.dispose()\n"
            },
            {
              "step": 49,
              "variableName": "loadModel()",
              "startLine": 268,
              "startColumn": 20,
              "endLine": 268,
              "endColumn": 31,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "    override fun <T : Any> loadOrCreateModel(creator: () -> T): T {\n        if (isLoaded) {\n            runLoadedSideEffects()\n            return loadModel().uncheckedCast()\n        }\n\n        return runWorkThatContributesToCacheEntry {"
            },
            {
              "step": 50,
              "variableName": "Any",
              "startLine": 22,
              "startColumn": 15,
              "endLine": 22,
              "endColumn": 18,
              "uri": "gradle-8.14.0/platforms/core-configuration/stdlib-kotlin-extensions/src/main/kotlin/org/gradle/internal/extensions/stdlib/CastExtensions.kt",
              "type": "Object",
              "code": "import org.gradle.internal.Cast\n\n\nfun <T : Any> Any.uncheckedCast(): T =\n    Cast.uncheckedNonnullCast(this)\n"
            },
            {
              "step": 51,
              "variableName": "this",
              "startLine": 23,
              "startColumn": 31,
              "endLine": 23,
              "endColumn": 35,
              "uri": "gradle-8.14.0/platforms/core-configuration/stdlib-kotlin-extensions/src/main/kotlin/org/gradle/internal/extensions/stdlib/CastExtensions.kt",
              "type": "Object",
              "code": "\n\nfun <T : Any> Any.uncheckedCast(): T =\n    Cast.uncheckedNonnullCast(this)\n"
            },
            {
              "step": 52,
              "variableName": "Object object",
              "startLine": 76,
              "startColumn": 46,
              "endLine": 76,
              "endColumn": 59,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/Cast.java",
              "type": "Object",
              "code": "    }\n\n    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})\n    public static <T> T uncheckedNonnullCast(Object object) {\n        return (T) object;\n    }\n}"
            },
            {
              "step": 53,
              "variableName": "(T) object",
              "startLine": 77,
              "startColumn": 16,
              "endLine": 77,
              "endColumn": 26,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/Cast.java",
              "type": "Object",
              "code": "\n    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})\n    public static <T> T uncheckedNonnullCast(Object object) {\n        return (T) object;\n    }\n}\n"
            },
            {
              "step": 54,
              "variableName": "Cast.uncheckedNonnullCast(collectionType)",
              "startLine": 223,
              "startColumn": 16,
              "endLine": 223,
              "endColumn": 57,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/api/internal/provider/AbstractCollectionProperty.java",
              "type": "Class",
              "code": "    @Override\n    @Nonnull\n    public Class<C> getType() {\n        return Cast.uncheckedNonnullCast(collectionType);\n    }\n\n    @Override"
            },
            {
              "step": 55,
              "variableName": "provider.getType()",
              "startLine": 41,
              "startColumn": 35,
              "endLine": 41,
              "endColumn": 53,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/api/internal/provider/OrElseFixedValueProvider.java",
              "type": "Class",
              "code": "    @Nullable\n    @Override\n    public Class<T> getType() {\n        return Cast.uncheckedCast(provider.getType());\n    }\n\n    @Override"
            },
            {
              "step": 56,
              "variableName": "@Nullable Object object",
              "startLine": 71,
              "startColumn": 39,
              "endLine": 71,
              "endColumn": 62,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/Cast.java",
              "type": "Object",
              "code": "\n    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})\n    @Nullable\n    public static <T> T uncheckedCast(@Nullable Object object) {\n        return (T) object;\n    }\n"
            },
            {
              "step": 57,
              "variableName": "(T) object",
              "startLine": 72,
              "startColumn": 16,
              "endLine": 72,
              "endColumn": 26,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/Cast.java",
              "type": "Object",
              "code": "    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})\n    @Nullable\n    public static <T> T uncheckedCast(@Nullable Object object) {\n        return (T) object;\n    }\n\n    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})"
            },
            {
              "step": 58,
              "variableName": "Cast.uncheckedCast(sanitizer.sanitize(t))",
              "startLine": 41,
              "startColumn": 15,
              "endLine": 41,
              "endColumn": 56,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/api/internal/provider/TypeSanitizingTransformer.java",
              "type": "Object",
              "code": "\n    @Override\n    public T transform(T t) {\n        T v = Cast.uncheckedCast(sanitizer.sanitize(t));\n        if (targetType.isInstance(v)) {\n            return v;\n        }"
            },
            {
              "step": 59,
              "variableName": "v",
              "startLine": 43,
              "startColumn": 20,
              "endLine": 43,
              "endColumn": 21,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/api/internal/provider/TypeSanitizingTransformer.java",
              "type": "Object",
              "code": "    public T transform(T t) {\n        T v = Cast.uncheckedCast(sanitizer.sanitize(t));\n        if (targetType.isInstance(v)) {\n            return v;\n        }\n        throw new IllegalArgumentException(String.format(\"Cannot get the value of %s of type %s as the provider associated with this property returned a value of type %s.\", owner.getDisplayName(), targetType.getName(), v.getClass().getName()));\n    }"
            },
            {
              "step": 60,
              "variableName": "describer.transform(this)",
              "startLine": 163,
              "startColumn": 16,
              "endLine": 163,
              "endColumn": 41,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/repositories/DefaultMavenArtifactRepository.java",
              "type": "String",
              "code": "\n    @Override\n    public String getDisplayName() {\n        return describer.transform(this);\n    }\n\n    @Override"
            },
            {
              "step": 61,
              "variableName": "displayName.getDisplayName()",
              "startLine": 53,
              "startColumn": 16,
              "endLine": 53,
              "endColumn": 44,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/DefaultDependencySet.java",
              "type": "String",
              "code": "\n    @Override\n    public String toString() {\n        return displayName.getDisplayName();\n    }\n\n    @Override"
            },
            {
              "step": 62,
              "variableName": "literal.toString()",
              "startLine": 583,
              "startColumn": 20,
              "endLine": 583,
              "endColumn": 38,
              "uri": "gradle-8.14.0/platforms/software/build-init/src/main/java/org/gradle/buildinit/plugins/internal/BuildScriptBuilder.java",
              "type": "String",
              "code": "\n        @Override\n        public String with(Syntax syntax) {\n            return literal.toString();\n        }\n    }\n"
            },
            {
              "step": 63,
              "variableName": "propertyValue.with(this)",
              "startLine": 2113,
              "startColumn": 75,
              "endLine": 2113,
              "endColumn": 99,
              "uri": "gradle-8.14.0/platforms/software/build-init/src/main/java/org/gradle/buildinit/plugins/internal/BuildScriptBuilder.java",
              "type": "String",
              "code": "            ExpressionValue propertyValue = expression.propertyValue;\n            if (expression.assignOperator) {\n                if (propertyValue.isBooleanType()) {\n                    return booleanPropertyNameFor(propertyName) + \" = \" + propertyValue.with(this);\n                }\n                return propertyName + \" = \" + propertyValue.with(this);\n            } else {"
            },
            {
              "step": 64,
              "variableName": "booleanPropertyNameFor(propertyName) + \" = \" + propertyValue.with(this)",
              "startLine": 2113,
              "startColumn": 28,
              "endLine": 2113,
              "endColumn": 99,
              "uri": "gradle-8.14.0/platforms/software/build-init/src/main/java/org/gradle/buildinit/plugins/internal/BuildScriptBuilder.java",
              "type": "String",
              "code": "            ExpressionValue propertyValue = expression.propertyValue;\n            if (expression.assignOperator) {\n                if (propertyValue.isBooleanType()) {\n                    return booleanPropertyNameFor(propertyName) + \" = \" + propertyValue.with(this);\n                }\n                return propertyName + \" = \" + propertyValue.with(this);\n            } else {"
            },
            {
              "step": 65,
              "variableName": "printer.syntax.propertyAssignment(this)",
              "startLine": 1050,
              "startColumn": 29,
              "endLine": 1050,
              "endColumn": 68,
              "uri": "gradle-8.14.0/platforms/software/build-init/src/main/java/org/gradle/buildinit/plugins/internal/BuildScriptBuilder.java",
              "type": "String",
              "code": "\n        @Override\n        public void writeCodeTo(PrettyPrinter printer) {\n            printer.println(printer.syntax.propertyAssignment(this));\n        }\n    }\n"
            },
            {
              "step": 66,
              "variableName": "String s",
              "startLine": 1976,
              "startColumn": 30,
              "endLine": 1976,
              "endColumn": 38,
              "uri": "gradle-8.14.0/platforms/software/build-init/src/main/java/org/gradle/buildinit/plugins/internal/BuildScriptBuilder.java",
              "type": "String",
              "code": "            }\n        }\n\n        private void println(String s) {\n            if (!indent.isEmpty()) {\n                writer.print(indent);\n            }"
            },
            {
              "step": 67,
              "variableName": "s",
              "startLine": 1984,
              "startColumn": 32,
              "endLine": 1984,
              "endColumn": 33,
              "uri": "gradle-8.14.0/platforms/software/build-init/src/main/java/org/gradle/buildinit/plugins/internal/BuildScriptBuilder.java",
              "type": "",
              "code": "                writer.println(s + eolComment);\n                eolComment = null;\n            } else {\n                writer.println(s);\n            }\n            hasSeparatorLine = false;\n        }"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "src",
              "startLine": 115,
              "startColumn": 13,
              "endLine": 115,
              "endColumn": 16,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "Object",
              "code": "    }\n\n    private static void appendDisplayName(Object src, StringBuilder stringBuilder) {\n        if (src instanceof Describable) {\n            Describable describable = (Describable) src;\n            stringBuilder.append(describable.getDisplayName());\n        } else {"
            },
            {
              "step": 1,
              "variableName": "src",
              "startLine": 119,
              "startColumn": 34,
              "endLine": 119,
              "endColumn": 37,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "Object",
              "code": "            Describable describable = (Describable) src;\n            stringBuilder.append(describable.getDisplayName());\n        } else {\n            stringBuilder.append(src.toString());\n        }\n    }\n"
            },
            {
              "step": 2,
              "variableName": "toString",
              "startLine": 397,
              "startColumn": 19,
              "endLine": 397,
              "endColumn": 27,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "TestFile",
              "code": "    }\n\n    @Override\n    public String toString() {\n        return getPath();\n    }\n"
            },
            {
              "step": 3,
              "variableName": "getPath()",
              "startLine": 398,
              "startColumn": 16,
              "endLine": 398,
              "endColumn": 25,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "TestFile",
              "code": "\n    @Override\n    public String toString() {\n        return getPath();\n    }\n\n    public TestFile writelns(Iterable<String> lines) {"
            },
            {
              "step": 4,
              "variableName": "getPath()",
              "startLine": 398,
              "startColumn": 16,
              "endLine": 398,
              "endColumn": 25,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "String",
              "code": "\n    @Override\n    public String toString() {\n        return getPath();\n    }\n\n    public TestFile writelns(Iterable<String> lines) {"
            },
            {
              "step": 5,
              "variableName": "src.toString()",
              "startLine": 119,
              "startColumn": 34,
              "endLine": 119,
              "endColumn": 48,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "String",
              "code": "            Describable describable = (Describable) src;\n            stringBuilder.append(describable.getDisplayName());\n        } else {\n            stringBuilder.append(src.toString());\n        }\n    }\n"
            },
            {
              "step": 6,
              "variableName": "stringBuilder",
              "startLine": 119,
              "startColumn": 13,
              "endLine": 119,
              "endColumn": 26,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "StringBuilder",
              "code": "            Describable describable = (Describable) src;\n            stringBuilder.append(describable.getDisplayName());\n        } else {\n            stringBuilder.append(src.toString());\n        }\n    }\n"
            },
            {
              "step": 7,
              "variableName": "builder",
              "startLine": 202,
              "startColumn": 38,
              "endLine": 202,
              "endColumn": 45,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "StringBuilder",
              "code": "            StringBuilder builder = new StringBuilder(48);\n            appendDisplayName(part1, builder);\n            builder.append(' ');\n            appendDisplayName(part2, builder);\n            return builder.toString();\n        }\n"
            },
            {
              "step": 8,
              "variableName": "builder",
              "startLine": 203,
              "startColumn": 20,
              "endLine": 203,
              "endColumn": 27,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "StringBuilder",
              "code": "            appendDisplayName(part1, builder);\n            builder.append(' ');\n            appendDisplayName(part2, builder);\n            return builder.toString();\n        }\n\n        @Override"
            },
            {
              "step": 9,
              "variableName": "builder.toString()",
              "startLine": 203,
              "startColumn": 20,
              "endLine": 203,
              "endColumn": 38,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "String",
              "code": "            appendDisplayName(part1, builder);\n            builder.append(' ');\n            appendDisplayName(part2, builder);\n            return builder.toString();\n        }\n\n        @Override"
            },
            {
              "step": 10,
              "variableName": "describable.getDisplayName()",
              "startLine": 313,
              "startColumn": 35,
              "endLine": 313,
              "endColumn": 63,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "String",
              "code": "        public String getDisplayName() {\n            synchronized (this) {\n                if (displayName == null) {\n                    displayName = describable.getDisplayName();\n                    if (capDisplayName != null || !(describable instanceof DisplayName)) {\n                        describable = null;\n                    }"
            },
            {
              "step": 11,
              "variableName": "displayName",
              "startLine": 318,
              "startColumn": 24,
              "endLine": 318,
              "endColumn": 35,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "String",
              "code": "                        describable = null;\n                    }\n                }\n                return displayName;\n            }\n        }\n    }"
            },
            {
              "step": 12,
              "variableName": "displayName.getDisplayName()",
              "startLine": 772,
              "startColumn": 73,
              "endLine": 772,
              "endColumn": 101,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/configurations/DefaultConfiguration.java",
              "type": "String",
              "code": "                try {\n                    results = resolver.resolveGraph(DefaultConfiguration.this);\n                } catch (Exception e) {\n                    throw exceptionMapper.mapFailure(e, \"dependencies\", displayName.getDisplayName());\n                }\n\n                // Make the new state visible in case a dependency resolution listener queries the result, which requires the new state"
            },
            {
              "step": 13,
              "variableName": "String contextDisplayName",
              "startLine": 68,
              "startColumn": 77,
              "endLine": 68,
              "endColumn": 102,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "String",
              "code": "        return mapFailure(failure, type, displayName);\n    }\n\n    public TypedResolveException mapFailure(Throwable failure, String type, String contextDisplayName) {\n        if (!(failure instanceof TypedResolveException)) {\n            return new TypedResolveException(\n                type,"
            },
            {
              "step": 14,
              "variableName": "contextDisplayName",
              "startLine": 72,
              "startColumn": 17,
              "endLine": 72,
              "endColumn": 35,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "String",
              "code": "        if (!(failure instanceof TypedResolveException)) {\n            return new TypedResolveException(\n                type,\n                contextDisplayName,\n                ImmutableList.of(mapRepositoryOverrideFailure(contextDisplayName, failure))\n            );\n        }"
            },
            {
              "step": 15,
              "variableName": "new TypedResolveException(...) : TypedResolveException",
              "startLine": 70,
              "startColumn": 20,
              "endLine": 74,
              "endColumn": 14,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "TypedResolveException",
              "code": "\n    public TypedResolveException mapFailure(Throwable failure, String type, String contextDisplayName) {\n        if (!(failure instanceof TypedResolveException)) {\n            return new TypedResolveException(\n                type,\n                contextDisplayName,\n                ImmutableList.of(mapRepositoryOverrideFailure(contextDisplayName, failure))"
            },
            {
              "step": 16,
              "variableName": "exceptionMapper.mapFailure(e, \"dependencies\", displayName.getDisplayName())",
              "startLine": 772,
              "startColumn": 27,
              "endLine": 772,
              "endColumn": 102,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/configurations/DefaultConfiguration.java",
              "type": "TypedResolveException",
              "code": "                try {\n                    results = resolver.resolveGraph(DefaultConfiguration.this);\n                } catch (Exception e) {\n                    throw exceptionMapper.mapFailure(e, \"dependencies\", displayName.getDisplayName());\n                }\n\n                // Make the new state visible in case a dependency resolution listener queries the result, which requires the new state"
            },
            {
              "step": 17,
              "variableName": "e",
              "startLine": 772,
              "startColumn": 54,
              "endLine": 772,
              "endColumn": 55,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/configurations/DefaultConfiguration.java",
              "type": "Exception",
              "code": "                try {\n                    results = resolver.resolveGraph(DefaultConfiguration.this);\n                } catch (Exception e) {\n                    throw exceptionMapper.mapFailure(e, \"dependencies\", displayName.getDisplayName());\n                }\n\n                // Make the new state visible in case a dependency resolution listener queries the result, which requires the new state"
            },
            {
              "step": 18,
              "variableName": "Throwable failure",
              "startLine": 68,
              "startColumn": 45,
              "endLine": 68,
              "endColumn": 62,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Throwable",
              "code": "        return mapFailure(failure, type, displayName);\n    }\n\n    public TypedResolveException mapFailure(Throwable failure, String type, String contextDisplayName) {\n        if (!(failure instanceof TypedResolveException)) {\n            return new TypedResolveException(\n                type,"
            },
            {
              "step": 19,
              "variableName": "failure",
              "startLine": 73,
              "startColumn": 83,
              "endLine": 73,
              "endColumn": 90,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Throwable",
              "code": "            return new TypedResolveException(\n                type,\n                contextDisplayName,\n                ImmutableList.of(mapRepositoryOverrideFailure(contextDisplayName, failure))\n            );\n        }\n"
            },
            {
              "step": 20,
              "variableName": "Throwable failure",
              "startLine": 94,
              "startColumn": 78,
              "endLine": 94,
              "endColumn": 95,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Throwable",
              "code": "\n    // TODO: We should handle this exception at the source instead of using instanceof to detect it after it is thrown.\n    //       We should try to avoid catching and analyzing runtime exceptions\n    public Throwable mapRepositoryOverrideFailure(String contextDisplayName, Throwable failure) {\n        if (!(failure instanceof ModuleVersionNotFoundException) || !settingsRepositoriesIgnored()) {\n            return failure;\n        }"
            },
            {
              "step": 21,
              "variableName": "failure",
              "startLine": 108,
              "startColumn": 35,
              "endLine": 108,
              "endColumn": 42,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Throwable",
              "code": "        return new TypedResolveException(\n            \"dependencies\",\n            contextDisplayName,\n            Collections.singleton(failure),\n            resolutions\n        );\n    }"
            },
            {
              "step": 22,
              "variableName": "Collections.singleton(failure)",
              "startLine": 108,
              "startColumn": 13,
              "endLine": 108,
              "endColumn": 43,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Set [<element>] : Throwable",
              "code": "        return new TypedResolveException(\n            \"dependencies\",\n            contextDisplayName,\n            Collections.singleton(failure),\n            resolutions\n        );\n    }"
            },
            {
              "step": 23,
              "variableName": "Collections.singleton(failure)",
              "startLine": 108,
              "startColumn": 13,
              "endLine": 108,
              "endColumn": 43,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Set",
              "code": "        return new TypedResolveException(\n            \"dependencies\",\n            contextDisplayName,\n            Collections.singleton(failure),\n            resolutions\n        );\n    }"
            },
            {
              "step": 24,
              "variableName": "Iterable<? extends Throwable> failures",
              "startLine": 42,
              "startColumn": 67,
              "endLine": 42,
              "endColumn": 105,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ivyservice/TypedResolveException.java",
              "type": "Set",
              "code": "    /**\n     * Creates a new instance with resolutions.\n     */\n    public TypedResolveException(String type, String displayName, Iterable<? extends Throwable> failures, List<String> resolutions) {\n        super(buildMessage(type, displayName), failures, false);\n        this.type = type;\n        this.resolutions = ImmutableList.copyOf(resolutions);"
            },
            {
              "step": 25,
              "variableName": "failures",
              "startLine": 43,
              "startColumn": 48,
              "endLine": 43,
              "endColumn": 56,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ivyservice/TypedResolveException.java",
              "type": "Set",
              "code": "     * Creates a new instance with resolutions.\n     */\n    public TypedResolveException(String type, String displayName, Iterable<? extends Throwable> failures, List<String> resolutions) {\n        super(buildMessage(type, displayName), failures, false);\n        this.type = type;\n        this.resolutions = ImmutableList.copyOf(resolutions);\n    }"
            },
            {
              "step": 26,
              "variableName": "Iterable<? extends Throwable> causes",
              "startLine": 77,
              "startColumn": 48,
              "endLine": 77,
              "endColumn": 84,
              "uri": "gradle-8.14.0/subprojects/core-api/src/main/java/org/gradle/api/artifacts/ResolveException.java",
              "type": "Set",
              "code": "     * @since 8.9\n     */\n    @Incubating\n    protected ResolveException(String message, Iterable<? extends Throwable> causes, @SuppressWarnings(\"unused\") boolean dummy) {\n        super(message, causes);\n    }\n}"
            },
            {
              "step": 27,
              "variableName": "causes",
              "startLine": 78,
              "startColumn": 24,
              "endLine": 78,
              "endColumn": 30,
              "uri": "gradle-8.14.0/subprojects/core-api/src/main/java/org/gradle/api/artifacts/ResolveException.java",
              "type": "Set",
              "code": "     */\n    @Incubating\n    protected ResolveException(String message, Iterable<? extends Throwable> causes, @SuppressWarnings(\"unused\") boolean dummy) {\n        super(message, causes);\n    }\n}\n"
            },
            {
              "step": 28,
              "variableName": "Iterable<? extends Throwable> causes",
              "startLine": 47,
              "startColumn": 55,
              "endLine": 47,
              "endColumn": 91,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "Set",
              "code": "        this.causes.addAll(Arrays.asList(causes));\n    }\n\n    public DefaultMultiCauseException(String message, Iterable<? extends Throwable> causes) {\n        super(message);\n        this.message = message;\n        initCauses(causes);"
            },
            {
              "step": 29,
              "variableName": "causes",
              "startLine": 50,
              "startColumn": 20,
              "endLine": 50,
              "endColumn": 26,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "Set",
              "code": "    public DefaultMultiCauseException(String message, Iterable<? extends Throwable> causes) {\n        super(message);\n        this.message = message;\n        initCauses(causes);\n    }\n\n    public DefaultMultiCauseException(Factory<String> messageFactory) {"
            },
            {
              "step": 30,
              "variableName": "Iterable<? extends Throwable> causes",
              "startLine": 112,
              "startColumn": 28,
              "endLine": 112,
              "endColumn": 64,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "Iterable",
              "code": "        return null;\n    }\n\n    public void initCauses(Iterable<? extends Throwable> causes) {\n        this.causes.clear();\n        for (Throwable cause : causes) {\n            this.causes.add(cause);"
            },
            {
              "step": 31,
              "variableName": "cause",
              "startLine": 115,
              "startColumn": 29,
              "endLine": 115,
              "endColumn": 34,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "Throwable",
              "code": "    public void initCauses(Iterable<? extends Throwable> causes) {\n        this.causes.clear();\n        for (Throwable cause : causes) {\n            this.causes.add(cause);\n        }\n    }\n"
            },
            {
              "step": 32,
              "variableName": "this.causes",
              "startLine": 115,
              "startColumn": 13,
              "endLine": 115,
              "endColumn": 24,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "CopyOnWriteArrayList [<element>] : Throwable",
              "code": "    public void initCauses(Iterable<? extends Throwable> causes) {\n        this.causes.clear();\n        for (Throwable cause : causes) {\n            this.causes.add(cause);\n        }\n    }\n"
            },
            {
              "step": 33,
              "variableName": "this",
              "startLine": 115,
              "startColumn": 13,
              "endLine": 115,
              "endColumn": 17,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "DefaultMultiCauseException [causes, <element>] : Throwable",
              "code": "    public void initCauses(Iterable<? extends Throwable> causes) {\n        this.causes.clear();\n        for (Throwable cause : causes) {\n            this.causes.add(cause);\n        }\n    }\n"
            },
            {
              "step": 34,
              "variableName": "projectConfigurationException",
              "startLine": 57,
              "startColumn": 17,
              "endLine": 57,
              "endColumn": 46,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/DefaultExceptionAnalyser.java",
              "type": "ProjectConfigurationException [causes, <element>] : Throwable",
              "code": "                }\n            }\n            if (!additionalFailures.isEmpty()) {\n                projectConfigurationException.initCauses(additionalFailures);\n                failures.add(transform(projectConfigurationException));\n            }\n        } else if (exception instanceof ServiceCreationException) {"
            },
            {
              "step": 35,
              "variableName": "projectConfigurationException",
              "startLine": 58,
              "startColumn": 40,
              "endLine": 58,
              "endColumn": 69,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/DefaultExceptionAnalyser.java",
              "type": "ProjectConfigurationException [causes, <element>] : Throwable",
              "code": "            }\n            if (!additionalFailures.isEmpty()) {\n                projectConfigurationException.initCauses(additionalFailures);\n                failures.add(transform(projectConfigurationException));\n            }\n        } else if (exception instanceof ServiceCreationException) {\n            failures.add(transform(new InitializationException(exception)));"
            },
            {
              "step": 36,
              "variableName": "transform(projectConfigurationException)",
              "startLine": 58,
              "startColumn": 30,
              "endLine": 58,
              "endColumn": 70,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/DefaultExceptionAnalyser.java",
              "type": "LocationAwareException",
              "code": "            }\n            if (!additionalFailures.isEmpty()) {\n                projectConfigurationException.initCauses(additionalFailures);\n                failures.add(transform(projectConfigurationException));\n            }\n        } else if (exception instanceof ServiceCreationException) {\n            failures.add(transform(new InitializationException(exception)));"
            },
            {
              "step": 37,
              "variableName": "failures",
              "startLine": 58,
              "startColumn": 17,
              "endLine": 58,
              "endColumn": 25,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/DefaultExceptionAnalyser.java",
              "type": "Collection [<element>] : LocationAwareException",
              "code": "            }\n            if (!additionalFailures.isEmpty()) {\n                projectConfigurationException.initCauses(additionalFailures);\n                failures.add(transform(projectConfigurationException));\n            }\n        } else if (exception instanceof ServiceCreationException) {\n            failures.add(transform(new InitializationException(exception)));"
            },
            {
              "step": 38,
              "variableName": "result",
              "startLine": 53,
              "startColumn": 54,
              "endLine": 53,
              "endColumn": 60,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/MultipleBuildFailuresExceptionAnalyser.java",
              "type": "ArrayList [<element>] : LocationAwareException",
              "code": "        for (Throwable failure : failures) {\n            if (failure instanceof MultipleBuildFailures) {\n                for (Throwable cause : ((MultipleBuildFailures) failure).getCauses()) {\n                    collector.collectFailures(cause, result);\n                }\n            } else {\n                collector.collectFailures(failure, result);"
            },
            {
              "step": 39,
              "variableName": "result",
              "startLine": 60,
              "startColumn": 39,
              "endLine": 60,
              "endColumn": 45,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/MultipleBuildFailuresExceptionAnalyser.java",
              "type": "ArrayList [<element>] : LocationAwareException",
              "code": "            }\n        }\n        if (result.size() == 1 && result.get(0) instanceof RuntimeException) {\n            return (RuntimeException) result.get(0);\n        } else {\n            return new MultipleBuildFailures(result);\n        }"
            },
            {
              "step": 40,
              "variableName": "result.get(0)",
              "startLine": 60,
              "startColumn": 39,
              "endLine": 60,
              "endColumn": 52,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/MultipleBuildFailuresExceptionAnalyser.java",
              "type": "LocationAwareException",
              "code": "            }\n        }\n        if (result.size() == 1 && result.get(0) instanceof RuntimeException) {\n            return (RuntimeException) result.get(0);\n        } else {\n            return new MultipleBuildFailures(result);\n        }"
            },
            {
              "step": 41,
              "variableName": "(RuntimeException) result.get(0)",
              "startLine": 60,
              "startColumn": 20,
              "endLine": 60,
              "endColumn": 52,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/MultipleBuildFailuresExceptionAnalyser.java",
              "type": "LocationAwareException",
              "code": "            }\n        }\n        if (result.size() == 1 && result.get(0) instanceof RuntimeException) {\n            return (RuntimeException) result.get(0);\n        } else {\n            return new MultipleBuildFailures(result);\n        }"
            },
            {
              "step": 42,
              "variableName": "exceptionAnalyser.transform(finishFailures)",
              "startLine": 72,
              "startColumn": 16,
              "endLine": 72,
              "endColumn": 59,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/internal/buildtree/DefaultBuildTreeFinishExecutor.java",
              "type": "LocationAwareException",
              "code": "            finishFailures.addAll(result.getFailures());\n        });\n\n        return exceptionAnalyser.transform(finishFailures);\n    }\n}\n"
            },
            {
              "step": 43,
              "variableName": "delegate.finishBuildTree(failures)",
              "startLine": 46,
              "startColumn": 28,
              "endLine": 46,
              "endColumn": 62,
              "uri": "gradle-8.14.0/subprojects/composite-builds/src/main/java/org/gradle/composite/internal/OperationFiringBuildTreeFinishExecutor.java",
              "type": "LocationAwareException",
              "code": "            @Override\n            public RuntimeException call(BuildOperationContext context) {\n                try {\n                    return delegate.finishBuildTree(failures);\n                } finally {\n                    context.setResult(RESULT);\n                }"
            },
            {
              "step": 44,
              "variableName": "buildOperation.call(context)",
              "startLine": 239,
              "startColumn": 21,
              "endLine": 239,
              "endColumn": 49,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/testFixtures/java/org/gradle/internal/operations/TestBuildOperationRunner.java",
              "type": "LocationAwareException",
              "code": "            TestBuildOperationContext context = new TestBuildOperationContext(record);\n            T t;\n            try {\n                t = buildOperation.call(context);\n            } catch (Throwable failure) {\n                if (record.failure == null) {\n                    record.failure = failure;"
            },
            {
              "step": 45,
              "variableName": "t",
              "startLine": 246,
              "startColumn": 20,
              "endLine": 246,
              "endColumn": 21,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/testFixtures/java/org/gradle/internal/operations/TestBuildOperationRunner.java",
              "type": "LocationAwareException",
              "code": "                }\n                throw throwAsUncheckedException(failure);\n            }\n            return t;\n        }\n\n        private <O extends BuildOperation> void execute(O buildOperation, BuildOperationWorker<O> worker) {"
            },
            {
              "step": 46,
              "variableName": "log.call(buildOperation)",
              "startLine": 51,
              "startColumn": 16,
              "endLine": 51,
              "endColumn": 40,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/testFixtures/java/org/gradle/internal/operations/TestBuildOperationRunner.java",
              "type": "LocationAwareException",
              "code": "\n    @Override\n    public <T> T call(CallableBuildOperation<T> buildOperation) {\n        return log.call(buildOperation);\n    }\n\n    @Override"
            },
            {
              "step": 47,
              "variableName": "ca",
              "startLine": 115,
              "startColumn": 5,
              "endLine": 121,
              "endColumn": 7,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/configurationcache/ConfigurationCacheBuildOperations.kt",
              "type": "LocationAwareException",
              "code": "\ninternal\nfun <T : Any> BuildOperationRunner.withModelLoadOperation(block: () -> T): T =\n    call(object : CallableBuildOperation<T> {\n        override fun description(): BuildOperationDescriptor.Builder = BuildOperationDescriptor\n            .displayName(\"Load model from configuration cache\")\n            .progressDisplayName(\"Loading model from configuration cache\")"
            },
            {
              "step": 48,
              "variableName": "ca",
              "startLine": 115,
              "startColumn": 5,
              "endLine": 121,
              "endColumn": 7,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/configurationcache/ConfigurationCacheBuildOperations.kt",
              "type": "LocationAwareException",
              "code": "\ninternal\nfun <T : Any> BuildOperationRunner.withModelLoadOperation(block: () -> T): T =\n    call(object : CallableBuildOperation<T> {\n        override fun description(): BuildOperationDescriptor.Builder = BuildOperationDescriptor\n            .displayName(\"Load model from configuration cache\")\n            .progressDisplayName(\"Loading model from configuration cache\")"
            },
            {
              "step": 49,
              "variableName": "b",
              "startLine": 635,
              "startColumn": 9,
              "endLine": 641,
              "endColumn": 10,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "        // No need to record the `ClassLoaderScope` tree when loading\n        scopeRegistryListener.dispose()\n\n        buildOperationRunner.withModelLoadOperation {\n            val storeLoadResult = entryStore.useForStateLoad(StateType.Model) { stateFile: ConfigurationCacheStateFile ->\n                cacheIO.readModelFrom(stateFile)\n            }"
            },
            {
              "step": 50,
              "variableName": "block()",
              "startLine": 668,
              "startColumn": 22,
              "endLine": 668,
              "endColumn": 29,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "    private\n    inline fun <T> runAtConfigurationTime(block: () -> T): T {\n        prepareConfigurationTimeBarrier()\n        val result = block()\n        crossConfigurationTimeBarrier()\n        return result\n    }"
            },
            {
              "step": 51,
              "variableName": "result",
              "startLine": 670,
              "startColumn": 16,
              "endLine": 670,
              "endColumn": 22,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "        prepareConfigurationTimeBarrier()\n        val result = block()\n        crossConfigurationTimeBarrier()\n        return result\n    }\n\n    private"
            },
            {
              "step": 52,
              "variableName": "runAtConfigurationTime(...) : LocationAwareException",
              "startLine": 631,
              "startColumn": 28,
              "endLine": 642,
              "endColumn": 6,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "    data class LoadResultMetadata(val originInvocationId: String? = null)\n\n    private\n    fun loadModel(): Any = runAtConfigurationTime {\n        // No need to record the `ClassLoaderScope` tree when loading\n        scopeRegistryListener.dispose()\n"
            },
            {
              "step": 53,
              "variableName": "loadModel()",
              "startLine": 268,
              "startColumn": 20,
              "endLine": 268,
              "endColumn": 31,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "    override fun <T : Any> loadOrCreateModel(creator: () -> T): T {\n        if (isLoaded) {\n            runLoadedSideEffects()\n            return loadModel().uncheckedCast()\n        }\n\n        return runWorkThatContributesToCacheEntry {"
            },
            {
              "step": 54,
              "variableName": "Any",
              "startLine": 22,
              "startColumn": 15,
              "endLine": 22,
              "endColumn": 18,
              "uri": "gradle-8.14.0/platforms/core-configuration/stdlib-kotlin-extensions/src/main/kotlin/org/gradle/internal/extensions/stdlib/CastExtensions.kt",
              "type": "Object",
              "code": "import org.gradle.internal.Cast\n\n\nfun <T : Any> Any.uncheckedCast(): T =\n    Cast.uncheckedNonnullCast(this)\n"
            },
            {
              "step": 55,
              "variableName": "this",
              "startLine": 23,
              "startColumn": 31,
              "endLine": 23,
              "endColumn": 35,
              "uri": "gradle-8.14.0/platforms/core-configuration/stdlib-kotlin-extensions/src/main/kotlin/org/gradle/internal/extensions/stdlib/CastExtensions.kt",
              "type": "Object",
              "code": "\n\nfun <T : Any> Any.uncheckedCast(): T =\n    Cast.uncheckedNonnullCast(this)\n"
            },
            {
              "step": 56,
              "variableName": "Object object",
              "startLine": 76,
              "startColumn": 46,
              "endLine": 76,
              "endColumn": 59,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/Cast.java",
              "type": "Object",
              "code": "    }\n\n    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})\n    public static <T> T uncheckedNonnullCast(Object object) {\n        return (T) object;\n    }\n}"
            },
            {
              "step": 57,
              "variableName": "(T) object",
              "startLine": 77,
              "startColumn": 16,
              "endLine": 77,
              "endColumn": 26,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/Cast.java",
              "type": "Object",
              "code": "\n    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})\n    public static <T> T uncheckedNonnullCast(Object object) {\n        return (T) object;\n    }\n}\n"
            },
            {
              "step": 58,
              "variableName": "Cast.uncheckedNonnullCast(collectionType)",
              "startLine": 223,
              "startColumn": 16,
              "endLine": 223,
              "endColumn": 57,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/api/internal/provider/AbstractCollectionProperty.java",
              "type": "Class",
              "code": "    @Override\n    @Nonnull\n    public Class<C> getType() {\n        return Cast.uncheckedNonnullCast(collectionType);\n    }\n\n    @Override"
            },
            {
              "step": 59,
              "variableName": "provider.getType()",
              "startLine": 41,
              "startColumn": 35,
              "endLine": 41,
              "endColumn": 53,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/api/internal/provider/OrElseFixedValueProvider.java",
              "type": "Class",
              "code": "    @Nullable\n    @Override\n    public Class<T> getType() {\n        return Cast.uncheckedCast(provider.getType());\n    }\n\n    @Override"
            },
            {
              "step": 60,
              "variableName": "@Nullable Object object",
              "startLine": 71,
              "startColumn": 39,
              "endLine": 71,
              "endColumn": 62,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/Cast.java",
              "type": "Object",
              "code": "\n    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})\n    @Nullable\n    public static <T> T uncheckedCast(@Nullable Object object) {\n        return (T) object;\n    }\n"
            },
            {
              "step": 61,
              "variableName": "(T) object",
              "startLine": 72,
              "startColumn": 16,
              "endLine": 72,
              "endColumn": 26,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/Cast.java",
              "type": "Object",
              "code": "    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})\n    @Nullable\n    public static <T> T uncheckedCast(@Nullable Object object) {\n        return (T) object;\n    }\n\n    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})"
            },
            {
              "step": 62,
              "variableName": "Cast.uncheckedCast(sanitizer.sanitize(t))",
              "startLine": 41,
              "startColumn": 15,
              "endLine": 41,
              "endColumn": 56,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/api/internal/provider/TypeSanitizingTransformer.java",
              "type": "Object",
              "code": "\n    @Override\n    public T transform(T t) {\n        T v = Cast.uncheckedCast(sanitizer.sanitize(t));\n        if (targetType.isInstance(v)) {\n            return v;\n        }"
            },
            {
              "step": 63,
              "variableName": "v",
              "startLine": 43,
              "startColumn": 20,
              "endLine": 43,
              "endColumn": 21,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/api/internal/provider/TypeSanitizingTransformer.java",
              "type": "Object",
              "code": "    public T transform(T t) {\n        T v = Cast.uncheckedCast(sanitizer.sanitize(t));\n        if (targetType.isInstance(v)) {\n            return v;\n        }\n        throw new IllegalArgumentException(String.format(\"Cannot get the value of %s of type %s as the provider associated with this property returned a value of type %s.\", owner.getDisplayName(), targetType.getName(), v.getClass().getName()));\n    }"
            },
            {
              "step": 64,
              "variableName": "describer.transform(this)",
              "startLine": 163,
              "startColumn": 16,
              "endLine": 163,
              "endColumn": 41,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/repositories/DefaultMavenArtifactRepository.java",
              "type": "String",
              "code": "\n    @Override\n    public String getDisplayName() {\n        return describer.transform(this);\n    }\n\n    @Override"
            },
            {
              "step": 65,
              "variableName": "displayName.getDisplayName()",
              "startLine": 53,
              "startColumn": 16,
              "endLine": 53,
              "endColumn": 44,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/DefaultDependencySet.java",
              "type": "String",
              "code": "\n    @Override\n    public String toString() {\n        return displayName.getDisplayName();\n    }\n\n    @Override"
            },
            {
              "step": 66,
              "variableName": "literal.toString()",
              "startLine": 583,
              "startColumn": 20,
              "endLine": 583,
              "endColumn": 38,
              "uri": "gradle-8.14.0/platforms/software/build-init/src/main/java/org/gradle/buildinit/plugins/internal/BuildScriptBuilder.java",
              "type": "String",
              "code": "\n        @Override\n        public String with(Syntax syntax) {\n            return literal.toString();\n        }\n    }\n"
            },
            {
              "step": 67,
              "variableName": "propertyValue.with(this)",
              "startLine": 2113,
              "startColumn": 75,
              "endLine": 2113,
              "endColumn": 99,
              "uri": "gradle-8.14.0/platforms/software/build-init/src/main/java/org/gradle/buildinit/plugins/internal/BuildScriptBuilder.java",
              "type": "String",
              "code": "            ExpressionValue propertyValue = expression.propertyValue;\n            if (expression.assignOperator) {\n                if (propertyValue.isBooleanType()) {\n                    return booleanPropertyNameFor(propertyName) + \" = \" + propertyValue.with(this);\n                }\n                return propertyName + \" = \" + propertyValue.with(this);\n            } else {"
            },
            {
              "step": 68,
              "variableName": "booleanPropertyNameFor(propertyName) + \" = \" + propertyValue.with(this)",
              "startLine": 2113,
              "startColumn": 28,
              "endLine": 2113,
              "endColumn": 99,
              "uri": "gradle-8.14.0/platforms/software/build-init/src/main/java/org/gradle/buildinit/plugins/internal/BuildScriptBuilder.java",
              "type": "String",
              "code": "            ExpressionValue propertyValue = expression.propertyValue;\n            if (expression.assignOperator) {\n                if (propertyValue.isBooleanType()) {\n                    return booleanPropertyNameFor(propertyName) + \" = \" + propertyValue.with(this);\n                }\n                return propertyName + \" = \" + propertyValue.with(this);\n            } else {"
            },
            {
              "step": 69,
              "variableName": "printer.syntax.propertyAssignment(this)",
              "startLine": 1050,
              "startColumn": 29,
              "endLine": 1050,
              "endColumn": 68,
              "uri": "gradle-8.14.0/platforms/software/build-init/src/main/java/org/gradle/buildinit/plugins/internal/BuildScriptBuilder.java",
              "type": "String",
              "code": "\n        @Override\n        public void writeCodeTo(PrettyPrinter printer) {\n            printer.println(printer.syntax.propertyAssignment(this));\n        }\n    }\n"
            },
            {
              "step": 70,
              "variableName": "String s",
              "startLine": 1976,
              "startColumn": 30,
              "endLine": 1976,
              "endColumn": 38,
              "uri": "gradle-8.14.0/platforms/software/build-init/src/main/java/org/gradle/buildinit/plugins/internal/BuildScriptBuilder.java",
              "type": "String",
              "code": "            }\n        }\n\n        private void println(String s) {\n            if (!indent.isEmpty()) {\n                writer.print(indent);\n            }"
            },
            {
              "step": 71,
              "variableName": "s",
              "startLine": 1984,
              "startColumn": 32,
              "endLine": 1984,
              "endColumn": 33,
              "uri": "gradle-8.14.0/platforms/software/build-init/src/main/java/org/gradle/buildinit/plugins/internal/BuildScriptBuilder.java",
              "type": "",
              "code": "                writer.println(s + eolComment);\n                eolComment = null;\n            } else {\n                writer.println(s);\n            }\n            hasSeparatorLine = false;\n        }"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 10,
      "fileName": "DefaultBuildOperationLogger.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "source",
              "startLine": 44,
              "startColumn": 25,
              "endLine": 44,
              "endColumn": 31,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/RegExpNameMapper.java",
              "type": "String",
              "code": "        } else {\n            matcher.reset(source);\n        }\n        String result = source;\n        if (matcher.find()) {\n            result = matcher.replaceFirst(replacement);\n        }"
            },
            {
              "step": 1,
              "variableName": "result",
              "startLine": 48,
              "startColumn": 16,
              "endLine": 48,
              "endColumn": 22,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/RegExpNameMapper.java",
              "type": "String",
              "code": "        if (matcher.find()) {\n            result = matcher.replaceFirst(replacement);\n        }\n        return result;\n    }\n}\n"
            },
            {
              "step": 2,
              "variableName": "transformer.transform(value)",
              "startLine": 37,
              "startColumn": 31,
              "endLine": 37,
              "endColumn": 59,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/ChainingTransformer.java",
              "type": "String",
              "code": "    public T transform(T original) {\n        T value = original;\n        for (Transformer<T, T> transformer : transformers) {\n            value = type.cast(transformer.transform(value));\n        }\n        return value;\n    }"
            },
            {
              "step": 3,
              "variableName": "type.cast(transformer.transform(value))",
              "startLine": 37,
              "startColumn": 21,
              "endLine": 37,
              "endColumn": 60,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/ChainingTransformer.java",
              "type": "String",
              "code": "    public T transform(T original) {\n        T value = original;\n        for (Transformer<T, T> transformer : transformers) {\n            value = type.cast(transformer.transform(value));\n        }\n        return value;\n    }"
            },
            {
              "step": 4,
              "variableName": "value",
              "startLine": 39,
              "startColumn": 16,
              "endLine": 39,
              "endColumn": 21,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/ChainingTransformer.java",
              "type": "String",
              "code": "        for (Transformer<T, T> transformer : transformers) {\n            value = type.cast(transformer.transform(value));\n        }\n        return value;\n    }\n\n    public void add(Transformer<T, T> transformer) {"
            },
            {
              "step": 5,
              "variableName": "describer.transform(this)",
              "startLine": 163,
              "startColumn": 16,
              "endLine": 163,
              "endColumn": 41,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/repositories/DefaultMavenArtifactRepository.java",
              "type": "String",
              "code": "\n    @Override\n    public String getDisplayName() {\n        return describer.transform(this);\n    }\n\n    @Override"
            },
            {
              "step": 6,
              "variableName": "describable.getDisplayName()",
              "startLine": 313,
              "startColumn": 35,
              "endLine": 313,
              "endColumn": 63,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "String",
              "code": "        public String getDisplayName() {\n            synchronized (this) {\n                if (displayName == null) {\n                    displayName = describable.getDisplayName();\n                    if (capDisplayName != null || !(describable instanceof DisplayName)) {\n                        describable = null;\n                    }"
            },
            {
              "step": 7,
              "variableName": "displayName",
              "startLine": 318,
              "startColumn": 24,
              "endLine": 318,
              "endColumn": 35,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "String",
              "code": "                        describable = null;\n                    }\n                }\n                return displayName;\n            }\n        }\n    }"
            },
            {
              "step": 8,
              "variableName": "displayName.getDisplayName()",
              "startLine": 772,
              "startColumn": 73,
              "endLine": 772,
              "endColumn": 101,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/configurations/DefaultConfiguration.java",
              "type": "String",
              "code": "                try {\n                    results = resolver.resolveGraph(DefaultConfiguration.this);\n                } catch (Exception e) {\n                    throw exceptionMapper.mapFailure(e, \"dependencies\", displayName.getDisplayName());\n                }\n\n                // Make the new state visible in case a dependency resolution listener queries the result, which requires the new state"
            },
            {
              "step": 9,
              "variableName": "String contextDisplayName",
              "startLine": 68,
              "startColumn": 77,
              "endLine": 68,
              "endColumn": 102,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "String",
              "code": "        return mapFailure(failure, type, displayName);\n    }\n\n    public TypedResolveException mapFailure(Throwable failure, String type, String contextDisplayName) {\n        if (!(failure instanceof TypedResolveException)) {\n            return new TypedResolveException(\n                type,"
            },
            {
              "step": 10,
              "variableName": "contextDisplayName",
              "startLine": 72,
              "startColumn": 17,
              "endLine": 72,
              "endColumn": 35,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "String",
              "code": "        if (!(failure instanceof TypedResolveException)) {\n            return new TypedResolveException(\n                type,\n                contextDisplayName,\n                ImmutableList.of(mapRepositoryOverrideFailure(contextDisplayName, failure))\n            );\n        }"
            },
            {
              "step": 11,
              "variableName": "new TypedResolveException(...) : TypedResolveException",
              "startLine": 70,
              "startColumn": 20,
              "endLine": 74,
              "endColumn": 14,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "TypedResolveException",
              "code": "\n    public TypedResolveException mapFailure(Throwable failure, String type, String contextDisplayName) {\n        if (!(failure instanceof TypedResolveException)) {\n            return new TypedResolveException(\n                type,\n                contextDisplayName,\n                ImmutableList.of(mapRepositoryOverrideFailure(contextDisplayName, failure))"
            },
            {
              "step": 12,
              "variableName": "exceptionMapper.mapFailure(e, \"dependencies\", displayName.getDisplayName())",
              "startLine": 772,
              "startColumn": 27,
              "endLine": 772,
              "endColumn": 102,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/configurations/DefaultConfiguration.java",
              "type": "TypedResolveException",
              "code": "                try {\n                    results = resolver.resolveGraph(DefaultConfiguration.this);\n                } catch (Exception e) {\n                    throw exceptionMapper.mapFailure(e, \"dependencies\", displayName.getDisplayName());\n                }\n\n                // Make the new state visible in case a dependency resolution listener queries the result, which requires the new state"
            },
            {
              "step": 13,
              "variableName": "e",
              "startLine": 772,
              "startColumn": 54,
              "endLine": 772,
              "endColumn": 55,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/configurations/DefaultConfiguration.java",
              "type": "Exception",
              "code": "                try {\n                    results = resolver.resolveGraph(DefaultConfiguration.this);\n                } catch (Exception e) {\n                    throw exceptionMapper.mapFailure(e, \"dependencies\", displayName.getDisplayName());\n                }\n\n                // Make the new state visible in case a dependency resolution listener queries the result, which requires the new state"
            },
            {
              "step": 14,
              "variableName": "Throwable failure",
              "startLine": 68,
              "startColumn": 45,
              "endLine": 68,
              "endColumn": 62,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Throwable",
              "code": "        return mapFailure(failure, type, displayName);\n    }\n\n    public TypedResolveException mapFailure(Throwable failure, String type, String contextDisplayName) {\n        if (!(failure instanceof TypedResolveException)) {\n            return new TypedResolveException(\n                type,"
            },
            {
              "step": 15,
              "variableName": "failure",
              "startLine": 73,
              "startColumn": 83,
              "endLine": 73,
              "endColumn": 90,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Throwable",
              "code": "            return new TypedResolveException(\n                type,\n                contextDisplayName,\n                ImmutableList.of(mapRepositoryOverrideFailure(contextDisplayName, failure))\n            );\n        }\n"
            },
            {
              "step": 16,
              "variableName": "Throwable failure",
              "startLine": 94,
              "startColumn": 78,
              "endLine": 94,
              "endColumn": 95,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Throwable",
              "code": "\n    // TODO: We should handle this exception at the source instead of using instanceof to detect it after it is thrown.\n    //       We should try to avoid catching and analyzing runtime exceptions\n    public Throwable mapRepositoryOverrideFailure(String contextDisplayName, Throwable failure) {\n        if (!(failure instanceof ModuleVersionNotFoundException) || !settingsRepositoriesIgnored()) {\n            return failure;\n        }"
            },
            {
              "step": 17,
              "variableName": "failure",
              "startLine": 108,
              "startColumn": 35,
              "endLine": 108,
              "endColumn": 42,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Throwable",
              "code": "        return new TypedResolveException(\n            \"dependencies\",\n            contextDisplayName,\n            Collections.singleton(failure),\n            resolutions\n        );\n    }"
            },
            {
              "step": 18,
              "variableName": "Collections.singleton(failure)",
              "startLine": 108,
              "startColumn": 13,
              "endLine": 108,
              "endColumn": 43,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Set [<element>] : Throwable",
              "code": "        return new TypedResolveException(\n            \"dependencies\",\n            contextDisplayName,\n            Collections.singleton(failure),\n            resolutions\n        );\n    }"
            },
            {
              "step": 19,
              "variableName": "Collections.singleton(failure)",
              "startLine": 108,
              "startColumn": 13,
              "endLine": 108,
              "endColumn": 43,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Set",
              "code": "        return new TypedResolveException(\n            \"dependencies\",\n            contextDisplayName,\n            Collections.singleton(failure),\n            resolutions\n        );\n    }"
            },
            {
              "step": 20,
              "variableName": "Iterable<? extends Throwable> failures",
              "startLine": 42,
              "startColumn": 67,
              "endLine": 42,
              "endColumn": 105,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ivyservice/TypedResolveException.java",
              "type": "Set",
              "code": "    /**\n     * Creates a new instance with resolutions.\n     */\n    public TypedResolveException(String type, String displayName, Iterable<? extends Throwable> failures, List<String> resolutions) {\n        super(buildMessage(type, displayName), failures, false);\n        this.type = type;\n        this.resolutions = ImmutableList.copyOf(resolutions);"
            },
            {
              "step": 21,
              "variableName": "failures",
              "startLine": 43,
              "startColumn": 48,
              "endLine": 43,
              "endColumn": 56,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ivyservice/TypedResolveException.java",
              "type": "Set",
              "code": "     * Creates a new instance with resolutions.\n     */\n    public TypedResolveException(String type, String displayName, Iterable<? extends Throwable> failures, List<String> resolutions) {\n        super(buildMessage(type, displayName), failures, false);\n        this.type = type;\n        this.resolutions = ImmutableList.copyOf(resolutions);\n    }"
            },
            {
              "step": 22,
              "variableName": "Iterable<? extends Throwable> causes",
              "startLine": 77,
              "startColumn": 48,
              "endLine": 77,
              "endColumn": 84,
              "uri": "gradle-8.14.0/subprojects/core-api/src/main/java/org/gradle/api/artifacts/ResolveException.java",
              "type": "Set",
              "code": "     * @since 8.9\n     */\n    @Incubating\n    protected ResolveException(String message, Iterable<? extends Throwable> causes, @SuppressWarnings(\"unused\") boolean dummy) {\n        super(message, causes);\n    }\n}"
            },
            {
              "step": 23,
              "variableName": "causes",
              "startLine": 78,
              "startColumn": 24,
              "endLine": 78,
              "endColumn": 30,
              "uri": "gradle-8.14.0/subprojects/core-api/src/main/java/org/gradle/api/artifacts/ResolveException.java",
              "type": "Set",
              "code": "     */\n    @Incubating\n    protected ResolveException(String message, Iterable<? extends Throwable> causes, @SuppressWarnings(\"unused\") boolean dummy) {\n        super(message, causes);\n    }\n}\n"
            },
            {
              "step": 24,
              "variableName": "Iterable<? extends Throwable> causes",
              "startLine": 47,
              "startColumn": 55,
              "endLine": 47,
              "endColumn": 91,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "Set",
              "code": "        this.causes.addAll(Arrays.asList(causes));\n    }\n\n    public DefaultMultiCauseException(String message, Iterable<? extends Throwable> causes) {\n        super(message);\n        this.message = message;\n        initCauses(causes);"
            },
            {
              "step": 25,
              "variableName": "causes",
              "startLine": 50,
              "startColumn": 20,
              "endLine": 50,
              "endColumn": 26,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "Set",
              "code": "    public DefaultMultiCauseException(String message, Iterable<? extends Throwable> causes) {\n        super(message);\n        this.message = message;\n        initCauses(causes);\n    }\n\n    public DefaultMultiCauseException(Factory<String> messageFactory) {"
            },
            {
              "step": 26,
              "variableName": "Iterable<? extends Throwable> causes",
              "startLine": 112,
              "startColumn": 28,
              "endLine": 112,
              "endColumn": 64,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "Iterable",
              "code": "        return null;\n    }\n\n    public void initCauses(Iterable<? extends Throwable> causes) {\n        this.causes.clear();\n        for (Throwable cause : causes) {\n            this.causes.add(cause);"
            },
            {
              "step": 27,
              "variableName": "cause",
              "startLine": 115,
              "startColumn": 29,
              "endLine": 115,
              "endColumn": 34,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "Throwable",
              "code": "    public void initCauses(Iterable<? extends Throwable> causes) {\n        this.causes.clear();\n        for (Throwable cause : causes) {\n            this.causes.add(cause);\n        }\n    }\n"
            },
            {
              "step": 28,
              "variableName": "this.causes",
              "startLine": 115,
              "startColumn": 13,
              "endLine": 115,
              "endColumn": 24,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "CopyOnWriteArrayList [<element>] : Throwable",
              "code": "    public void initCauses(Iterable<? extends Throwable> causes) {\n        this.causes.clear();\n        for (Throwable cause : causes) {\n            this.causes.add(cause);\n        }\n    }\n"
            },
            {
              "step": 29,
              "variableName": "this",
              "startLine": 115,
              "startColumn": 13,
              "endLine": 115,
              "endColumn": 17,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "DefaultMultiCauseException [causes, <element>] : Throwable",
              "code": "    public void initCauses(Iterable<? extends Throwable> causes) {\n        this.causes.clear();\n        for (Throwable cause : causes) {\n            this.causes.add(cause);\n        }\n    }\n"
            },
            {
              "step": 30,
              "variableName": "projectConfigurationException",
              "startLine": 57,
              "startColumn": 17,
              "endLine": 57,
              "endColumn": 46,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/DefaultExceptionAnalyser.java",
              "type": "ProjectConfigurationException [causes, <element>] : Throwable",
              "code": "                }\n            }\n            if (!additionalFailures.isEmpty()) {\n                projectConfigurationException.initCauses(additionalFailures);\n                failures.add(transform(projectConfigurationException));\n            }\n        } else if (exception instanceof ServiceCreationException) {"
            },
            {
              "step": 31,
              "variableName": "projectConfigurationException",
              "startLine": 58,
              "startColumn": 40,
              "endLine": 58,
              "endColumn": 69,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/DefaultExceptionAnalyser.java",
              "type": "ProjectConfigurationException [causes, <element>] : Throwable",
              "code": "            }\n            if (!additionalFailures.isEmpty()) {\n                projectConfigurationException.initCauses(additionalFailures);\n                failures.add(transform(projectConfigurationException));\n            }\n        } else if (exception instanceof ServiceCreationException) {\n            failures.add(transform(new InitializationException(exception)));"
            },
            {
              "step": 32,
              "variableName": "transform(projectConfigurationException)",
              "startLine": 58,
              "startColumn": 30,
              "endLine": 58,
              "endColumn": 70,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/DefaultExceptionAnalyser.java",
              "type": "LocationAwareException",
              "code": "            }\n            if (!additionalFailures.isEmpty()) {\n                projectConfigurationException.initCauses(additionalFailures);\n                failures.add(transform(projectConfigurationException));\n            }\n        } else if (exception instanceof ServiceCreationException) {\n            failures.add(transform(new InitializationException(exception)));"
            },
            {
              "step": 33,
              "variableName": "failures",
              "startLine": 58,
              "startColumn": 17,
              "endLine": 58,
              "endColumn": 25,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/DefaultExceptionAnalyser.java",
              "type": "Collection [<element>] : LocationAwareException",
              "code": "            }\n            if (!additionalFailures.isEmpty()) {\n                projectConfigurationException.initCauses(additionalFailures);\n                failures.add(transform(projectConfigurationException));\n            }\n        } else if (exception instanceof ServiceCreationException) {\n            failures.add(transform(new InitializationException(exception)));"
            },
            {
              "step": 34,
              "variableName": "result",
              "startLine": 53,
              "startColumn": 54,
              "endLine": 53,
              "endColumn": 60,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/MultipleBuildFailuresExceptionAnalyser.java",
              "type": "ArrayList [<element>] : LocationAwareException",
              "code": "        for (Throwable failure : failures) {\n            if (failure instanceof MultipleBuildFailures) {\n                for (Throwable cause : ((MultipleBuildFailures) failure).getCauses()) {\n                    collector.collectFailures(cause, result);\n                }\n            } else {\n                collector.collectFailures(failure, result);"
            },
            {
              "step": 35,
              "variableName": "result",
              "startLine": 60,
              "startColumn": 39,
              "endLine": 60,
              "endColumn": 45,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/MultipleBuildFailuresExceptionAnalyser.java",
              "type": "ArrayList [<element>] : LocationAwareException",
              "code": "            }\n        }\n        if (result.size() == 1 && result.get(0) instanceof RuntimeException) {\n            return (RuntimeException) result.get(0);\n        } else {\n            return new MultipleBuildFailures(result);\n        }"
            },
            {
              "step": 36,
              "variableName": "result.get(0)",
              "startLine": 60,
              "startColumn": 39,
              "endLine": 60,
              "endColumn": 52,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/MultipleBuildFailuresExceptionAnalyser.java",
              "type": "LocationAwareException",
              "code": "            }\n        }\n        if (result.size() == 1 && result.get(0) instanceof RuntimeException) {\n            return (RuntimeException) result.get(0);\n        } else {\n            return new MultipleBuildFailures(result);\n        }"
            },
            {
              "step": 37,
              "variableName": "(RuntimeException) result.get(0)",
              "startLine": 60,
              "startColumn": 20,
              "endLine": 60,
              "endColumn": 52,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/MultipleBuildFailuresExceptionAnalyser.java",
              "type": "LocationAwareException",
              "code": "            }\n        }\n        if (result.size() == 1 && result.get(0) instanceof RuntimeException) {\n            return (RuntimeException) result.get(0);\n        } else {\n            return new MultipleBuildFailures(result);\n        }"
            },
            {
              "step": 38,
              "variableName": "exceptionAnalyser.transform(finishFailures)",
              "startLine": 72,
              "startColumn": 16,
              "endLine": 72,
              "endColumn": 59,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/internal/buildtree/DefaultBuildTreeFinishExecutor.java",
              "type": "LocationAwareException",
              "code": "            finishFailures.addAll(result.getFailures());\n        });\n\n        return exceptionAnalyser.transform(finishFailures);\n    }\n}\n"
            },
            {
              "step": 39,
              "variableName": "delegate.finishBuildTree(failures)",
              "startLine": 46,
              "startColumn": 28,
              "endLine": 46,
              "endColumn": 62,
              "uri": "gradle-8.14.0/subprojects/composite-builds/src/main/java/org/gradle/composite/internal/OperationFiringBuildTreeFinishExecutor.java",
              "type": "LocationAwareException",
              "code": "            @Override\n            public RuntimeException call(BuildOperationContext context) {\n                try {\n                    return delegate.finishBuildTree(failures);\n                } finally {\n                    context.setResult(RESULT);\n                }"
            },
            {
              "step": 40,
              "variableName": "buildOperation.call(context)",
              "startLine": 239,
              "startColumn": 21,
              "endLine": 239,
              "endColumn": 49,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/testFixtures/java/org/gradle/internal/operations/TestBuildOperationRunner.java",
              "type": "LocationAwareException",
              "code": "            TestBuildOperationContext context = new TestBuildOperationContext(record);\n            T t;\n            try {\n                t = buildOperation.call(context);\n            } catch (Throwable failure) {\n                if (record.failure == null) {\n                    record.failure = failure;"
            },
            {
              "step": 41,
              "variableName": "t",
              "startLine": 246,
              "startColumn": 20,
              "endLine": 246,
              "endColumn": 21,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/testFixtures/java/org/gradle/internal/operations/TestBuildOperationRunner.java",
              "type": "LocationAwareException",
              "code": "                }\n                throw throwAsUncheckedException(failure);\n            }\n            return t;\n        }\n\n        private <O extends BuildOperation> void execute(O buildOperation, BuildOperationWorker<O> worker) {"
            },
            {
              "step": 42,
              "variableName": "log.call(buildOperation)",
              "startLine": 51,
              "startColumn": 16,
              "endLine": 51,
              "endColumn": 40,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/testFixtures/java/org/gradle/internal/operations/TestBuildOperationRunner.java",
              "type": "LocationAwareException",
              "code": "\n    @Override\n    public <T> T call(CallableBuildOperation<T> buildOperation) {\n        return log.call(buildOperation);\n    }\n\n    @Override"
            },
            {
              "step": 43,
              "variableName": "ca",
              "startLine": 115,
              "startColumn": 5,
              "endLine": 121,
              "endColumn": 7,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/configurationcache/ConfigurationCacheBuildOperations.kt",
              "type": "LocationAwareException",
              "code": "\ninternal\nfun <T : Any> BuildOperationRunner.withModelLoadOperation(block: () -> T): T =\n    call(object : CallableBuildOperation<T> {\n        override fun description(): BuildOperationDescriptor.Builder = BuildOperationDescriptor\n            .displayName(\"Load model from configuration cache\")\n            .progressDisplayName(\"Loading model from configuration cache\")"
            },
            {
              "step": 44,
              "variableName": "ca",
              "startLine": 115,
              "startColumn": 5,
              "endLine": 121,
              "endColumn": 7,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/configurationcache/ConfigurationCacheBuildOperations.kt",
              "type": "LocationAwareException",
              "code": "\ninternal\nfun <T : Any> BuildOperationRunner.withModelLoadOperation(block: () -> T): T =\n    call(object : CallableBuildOperation<T> {\n        override fun description(): BuildOperationDescriptor.Builder = BuildOperationDescriptor\n            .displayName(\"Load model from configuration cache\")\n            .progressDisplayName(\"Loading model from configuration cache\")"
            },
            {
              "step": 45,
              "variableName": "b",
              "startLine": 635,
              "startColumn": 9,
              "endLine": 641,
              "endColumn": 10,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "        // No need to record the `ClassLoaderScope` tree when loading\n        scopeRegistryListener.dispose()\n\n        buildOperationRunner.withModelLoadOperation {\n            val storeLoadResult = entryStore.useForStateLoad(StateType.Model) { stateFile: ConfigurationCacheStateFile ->\n                cacheIO.readModelFrom(stateFile)\n            }"
            },
            {
              "step": 46,
              "variableName": "block()",
              "startLine": 668,
              "startColumn": 22,
              "endLine": 668,
              "endColumn": 29,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "    private\n    inline fun <T> runAtConfigurationTime(block: () -> T): T {\n        prepareConfigurationTimeBarrier()\n        val result = block()\n        crossConfigurationTimeBarrier()\n        return result\n    }"
            },
            {
              "step": 47,
              "variableName": "result",
              "startLine": 670,
              "startColumn": 16,
              "endLine": 670,
              "endColumn": 22,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "        prepareConfigurationTimeBarrier()\n        val result = block()\n        crossConfigurationTimeBarrier()\n        return result\n    }\n\n    private"
            },
            {
              "step": 48,
              "variableName": "runAtConfigurationTime(...) : LocationAwareException",
              "startLine": 631,
              "startColumn": 28,
              "endLine": 642,
              "endColumn": 6,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "    data class LoadResultMetadata(val originInvocationId: String? = null)\n\n    private\n    fun loadModel(): Any = runAtConfigurationTime {\n        // No need to record the `ClassLoaderScope` tree when loading\n        scopeRegistryListener.dispose()\n"
            },
            {
              "step": 49,
              "variableName": "loadModel()",
              "startLine": 268,
              "startColumn": 20,
              "endLine": 268,
              "endColumn": 31,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "    override fun <T : Any> loadOrCreateModel(creator: () -> T): T {\n        if (isLoaded) {\n            runLoadedSideEffects()\n            return loadModel().uncheckedCast()\n        }\n\n        return runWorkThatContributesToCacheEntry {"
            },
            {
              "step": 50,
              "variableName": "Any",
              "startLine": 22,
              "startColumn": 15,
              "endLine": 22,
              "endColumn": 18,
              "uri": "gradle-8.14.0/platforms/core-configuration/stdlib-kotlin-extensions/src/main/kotlin/org/gradle/internal/extensions/stdlib/CastExtensions.kt",
              "type": "Object",
              "code": "import org.gradle.internal.Cast\n\n\nfun <T : Any> Any.uncheckedCast(): T =\n    Cast.uncheckedNonnullCast(this)\n"
            },
            {
              "step": 51,
              "variableName": "this",
              "startLine": 23,
              "startColumn": 31,
              "endLine": 23,
              "endColumn": 35,
              "uri": "gradle-8.14.0/platforms/core-configuration/stdlib-kotlin-extensions/src/main/kotlin/org/gradle/internal/extensions/stdlib/CastExtensions.kt",
              "type": "Object",
              "code": "\n\nfun <T : Any> Any.uncheckedCast(): T =\n    Cast.uncheckedNonnullCast(this)\n"
            },
            {
              "step": 52,
              "variableName": "Object object",
              "startLine": 76,
              "startColumn": 46,
              "endLine": 76,
              "endColumn": 59,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/Cast.java",
              "type": "Object",
              "code": "    }\n\n    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})\n    public static <T> T uncheckedNonnullCast(Object object) {\n        return (T) object;\n    }\n}"
            },
            {
              "step": 53,
              "variableName": "(T) object",
              "startLine": 77,
              "startColumn": 16,
              "endLine": 77,
              "endColumn": 26,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/Cast.java",
              "type": "Object",
              "code": "\n    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})\n    public static <T> T uncheckedNonnullCast(Object object) {\n        return (T) object;\n    }\n}\n"
            },
            {
              "step": 54,
              "variableName": "Cast.uncheckedNonnullCast(collectionType)",
              "startLine": 223,
              "startColumn": 16,
              "endLine": 223,
              "endColumn": 57,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/api/internal/provider/AbstractCollectionProperty.java",
              "type": "Class",
              "code": "    @Override\n    @Nonnull\n    public Class<C> getType() {\n        return Cast.uncheckedNonnullCast(collectionType);\n    }\n\n    @Override"
            },
            {
              "step": 55,
              "variableName": "provider.getType()",
              "startLine": 41,
              "startColumn": 35,
              "endLine": 41,
              "endColumn": 53,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/api/internal/provider/OrElseFixedValueProvider.java",
              "type": "Class",
              "code": "    @Nullable\n    @Override\n    public Class<T> getType() {\n        return Cast.uncheckedCast(provider.getType());\n    }\n\n    @Override"
            },
            {
              "step": 56,
              "variableName": "@Nullable Object object",
              "startLine": 71,
              "startColumn": 39,
              "endLine": 71,
              "endColumn": 62,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/Cast.java",
              "type": "Object",
              "code": "\n    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})\n    @Nullable\n    public static <T> T uncheckedCast(@Nullable Object object) {\n        return (T) object;\n    }\n"
            },
            {
              "step": 57,
              "variableName": "(T) object",
              "startLine": 72,
              "startColumn": 16,
              "endLine": 72,
              "endColumn": 26,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/Cast.java",
              "type": "Object",
              "code": "    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})\n    @Nullable\n    public static <T> T uncheckedCast(@Nullable Object object) {\n        return (T) object;\n    }\n\n    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})"
            },
            {
              "step": 58,
              "variableName": "Cast.uncheckedCast(sanitizer.sanitize(t))",
              "startLine": 41,
              "startColumn": 15,
              "endLine": 41,
              "endColumn": 56,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/api/internal/provider/TypeSanitizingTransformer.java",
              "type": "Object",
              "code": "\n    @Override\n    public T transform(T t) {\n        T v = Cast.uncheckedCast(sanitizer.sanitize(t));\n        if (targetType.isInstance(v)) {\n            return v;\n        }"
            },
            {
              "step": 59,
              "variableName": "v",
              "startLine": 43,
              "startColumn": 20,
              "endLine": 43,
              "endColumn": 21,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/api/internal/provider/TypeSanitizingTransformer.java",
              "type": "Object",
              "code": "    public T transform(T t) {\n        T v = Cast.uncheckedCast(sanitizer.sanitize(t));\n        if (targetType.isInstance(v)) {\n            return v;\n        }\n        throw new IllegalArgumentException(String.format(\"Cannot get the value of %s of type %s as the provider associated with this property returned a value of type %s.\", owner.getDisplayName(), targetType.getName(), v.getClass().getName()));\n    }"
            },
            {
              "step": 60,
              "variableName": "describer.transform(this)",
              "startLine": 163,
              "startColumn": 16,
              "endLine": 163,
              "endColumn": 41,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/repositories/DefaultMavenArtifactRepository.java",
              "type": "String",
              "code": "\n    @Override\n    public String getDisplayName() {\n        return describer.transform(this);\n    }\n\n    @Override"
            },
            {
              "step": 61,
              "variableName": "describable.getDisplayName()",
              "startLine": 313,
              "startColumn": 35,
              "endLine": 313,
              "endColumn": 63,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "String",
              "code": "        public String getDisplayName() {\n            synchronized (this) {\n                if (displayName == null) {\n                    displayName = describable.getDisplayName();\n                    if (capDisplayName != null || !(describable instanceof DisplayName)) {\n                        describable = null;\n                    }"
            },
            {
              "step": 62,
              "variableName": "displayName",
              "startLine": 318,
              "startColumn": 24,
              "endLine": 318,
              "endColumn": 35,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "String",
              "code": "                        describable = null;\n                    }\n                }\n                return displayName;\n            }\n        }\n    }"
            },
            {
              "step": 63,
              "variableName": "displayName().getDisplayName()",
              "startLine": 50,
              "startColumn": 16,
              "endLine": 50,
              "endColumn": 46,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/configurations/ResolutionHost.java",
              "type": "String",
              "code": "    DisplayName displayName();\n\n    default String getDisplayName() {\n        return displayName().getDisplayName();\n    }\n\n    default DisplayName displayName(String type) {"
            },
            {
              "step": 64,
              "variableName": "resolutionHost.getDisplayName()",
              "startLine": 75,
              "startColumn": 60,
              "endLine": 75,
              "endColumn": 91,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ivyservice/resolveengine/artifact/ResolvedArtifactSetResolver.java",
              "type": "String",
              "code": "\n            @Override\n            public BuildOperationDescriptor.Builder description() {\n                String displayName = \"Resolve files of \" + resolutionHost.getDisplayName();\n                return BuildOperationDescriptor\n                    .displayName(displayName)\n                    .progressDisplayName(displayName)"
            },
            {
              "step": 65,
              "variableName": "\"Resolve files of \" + resolutionHost.getDisplayName()",
              "startLine": 75,
              "startColumn": 38,
              "endLine": 75,
              "endColumn": 91,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ivyservice/resolveengine/artifact/ResolvedArtifactSetResolver.java",
              "type": "String",
              "code": "\n            @Override\n            public BuildOperationDescriptor.Builder description() {\n                String displayName = \"Resolve files of \" + resolutionHost.getDisplayName();\n                return BuildOperationDescriptor\n                    .displayName(displayName)\n                    .progressDisplayName(displayName)"
            },
            {
              "step": 66,
              "variableName": "displayName",
              "startLine": 77,
              "startColumn": 34,
              "endLine": 77,
              "endColumn": 45,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ivyservice/resolveengine/artifact/ResolvedArtifactSetResolver.java",
              "type": "String",
              "code": "            public BuildOperationDescriptor.Builder description() {\n                String displayName = \"Resolve files of \" + resolutionHost.getDisplayName();\n                return BuildOperationDescriptor\n                    .displayName(displayName)\n                    .progressDisplayName(displayName)\n                    .details(new ResolveArtifactsBuildOperationType.Details() {\n                        @Override"
            },
            {
              "step": 67,
              "variableName": "String displayName",
              "startLine": 111,
              "startColumn": 39,
              "endLine": 111,
              "endColumn": 57,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/main/java/org/gradle/internal/operations/BuildOperationDescriptor.java",
              "type": "String",
              "code": "        return totalProgress;\n    }\n\n    public static Builder displayName(String displayName) {\n        return new Builder(displayName);\n    }\n"
            },
            {
              "step": 68,
              "variableName": "displayName",
              "startLine": 112,
              "startColumn": 28,
              "endLine": 112,
              "endColumn": 39,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/main/java/org/gradle/internal/operations/BuildOperationDescriptor.java",
              "type": "String",
              "code": "    }\n\n    public static Builder displayName(String displayName) {\n        return new Builder(displayName);\n    }\n\n    @Override"
            },
            {
              "step": 69,
              "variableName": "String displayName",
              "startLine": 138,
              "startColumn": 25,
              "endLine": 138,
              "endColumn": 43,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/main/java/org/gradle/internal/operations/BuildOperationDescriptor.java",
              "type": "String",
              "code": "        private BuildOperationMetadata metadata = BuildOperationMetadata.NONE;\n        private int totalProgress;\n\n        private Builder(String displayName) {\n            this.displayName = displayName;\n            this.name = displayName;\n        }"
            },
            {
              "step": 70,
              "variableName": "displayName",
              "startLine": 139,
              "startColumn": 32,
              "endLine": 139,
              "endColumn": 43,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/main/java/org/gradle/internal/operations/BuildOperationDescriptor.java",
              "type": "String",
              "code": "        private int totalProgress;\n\n        private Builder(String displayName) {\n            this.displayName = displayName;\n            this.name = displayName;\n        }\n"
            },
            {
              "step": 71,
              "variableName": "this",
              "startLine": 139,
              "startColumn": 13,
              "endLine": 139,
              "endColumn": 17,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/main/java/org/gradle/internal/operations/BuildOperationDescriptor.java",
              "type": "Builder [displayName] : String",
              "code": "        private int totalProgress;\n\n        private Builder(String displayName) {\n            this.displayName = displayName;\n            this.name = displayName;\n        }\n"
            },
            {
              "step": 72,
              "variableName": "new Builder(displayName)",
              "startLine": 112,
              "startColumn": 16,
              "endLine": 112,
              "endColumn": 40,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/main/java/org/gradle/internal/operations/BuildOperationDescriptor.java",
              "type": "Builder [displayName] : String",
              "code": "    }\n\n    public static Builder displayName(String displayName) {\n        return new Builder(displayName);\n    }\n\n    @Override"
            },
            {
              "step": 73,
              "variableName": "BuildOperationDescriptor.displayName(description)",
              "startLine": 67,
              "startColumn": 16,
              "endLine": 67,
              "endColumn": 65,
              "uri": "gradle-8.14.0/platforms/native/platform-native/src/main/java/org/gradle/nativeplatform/toolchain/internal/DefaultCommandLineToolInvocation.java",
              "type": "Builder [displayName] : String",
              "code": "\n    @Override\n    public BuildOperationDescriptor.Builder description() {\n        return BuildOperationDescriptor.displayName(description);\n    }\n}\n"
            },
            {
              "step": 74,
              "variableName": "invocation.description()",
              "startLine": 58,
              "startColumn": 48,
              "endLine": 58,
              "endColumn": 72,
              "uri": "gradle-8.14.0/platforms/native/platform-native/src/main/java/org/gradle/nativeplatform/toolchain/internal/DefaultCommandLineToolInvocationWorker.java",
              "type": "Builder [displayName] : String",
              "code": "\n    @Override\n    public void execute(CommandLineToolInvocation invocation, BuildOperationContext context) {\n        BuildOperationDescriptor description = invocation.description().build();\n        ExecAction toolExec = execActionFactory.newExecAction();\n\n        toolExec.executable(executable);"
            },
            {
              "step": 75,
              "variableName": "build",
              "startLine": 180,
              "startColumn": 41,
              "endLine": 180,
              "endColumn": 46,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/main/java/org/gradle/internal/operations/BuildOperationDescriptor.java",
              "type": "Builder [displayName] : String",
              "code": "            return this;\n        }\n\n        public BuildOperationDescriptor build() {\n            return build(null, null);\n        }\n"
            },
            {
              "step": 76,
              "variableName": "build(null, null)",
              "startLine": 181,
              "startColumn": 20,
              "endLine": 181,
              "endColumn": 37,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/main/java/org/gradle/internal/operations/BuildOperationDescriptor.java",
              "type": "Builder [displayName] : String",
              "code": "        }\n\n        public BuildOperationDescriptor build() {\n            return build(null, null);\n        }\n\n        @Nullable"
            },
            {
              "step": 77,
              "variableName": "build",
              "startLine": 189,
              "startColumn": 41,
              "endLine": 189,
              "endColumn": 46,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/main/java/org/gradle/internal/operations/BuildOperationDescriptor.java",
              "type": "Builder [displayName] : String",
              "code": "            return parent;\n        }\n\n        public BuildOperationDescriptor build(@Nullable OperationIdentifier id, @Nullable OperationIdentifier defaultParentId) {\n            return new BuildOperationDescriptor(id, parent == null ? defaultParentId : parent.getId(), name, displayName, progressDisplayName, details, metadata, totalProgress);\n        }\n    }"
            },
            {
              "step": 78,
              "variableName": "displayName",
              "startLine": 190,
              "startColumn": 110,
              "endLine": 190,
              "endColumn": 121,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/main/java/org/gradle/internal/operations/BuildOperationDescriptor.java",
              "type": "Builder [displayName] : String",
              "code": "        }\n\n        public BuildOperationDescriptor build(@Nullable OperationIdentifier id, @Nullable OperationIdentifier defaultParentId) {\n            return new BuildOperationDescriptor(id, parent == null ? defaultParentId : parent.getId(), name, displayName, progressDisplayName, details, metadata, totalProgress);\n        }\n    }\n}"
            },
            {
              "step": 79,
              "variableName": "displayName",
              "startLine": 190,
              "startColumn": 110,
              "endLine": 190,
              "endColumn": 121,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/main/java/org/gradle/internal/operations/BuildOperationDescriptor.java",
              "type": "String",
              "code": "        }\n\n        public BuildOperationDescriptor build(@Nullable OperationIdentifier id, @Nullable OperationIdentifier defaultParentId) {\n            return new BuildOperationDescriptor(id, parent == null ? defaultParentId : parent.getId(), name, displayName, progressDisplayName, details, metadata, totalProgress);\n        }\n    }\n}"
            },
            {
              "step": 80,
              "variableName": "String displayName",
              "startLine": 38,
              "startColumn": 9,
              "endLine": 38,
              "endColumn": 27,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/main/java/org/gradle/internal/operations/BuildOperationDescriptor.java",
              "type": "String",
              "code": "        @Nullable OperationIdentifier id,\n        @Nullable OperationIdentifier parentId,\n        String name,\n        String displayName,\n        @Nullable String progressDisplayName,\n        @Nullable Object details,\n        BuildOperationMetadata metadata,"
            },
            {
              "step": 81,
              "variableName": "displayName",
              "startLine": 47,
              "startColumn": 28,
              "endLine": 47,
              "endColumn": 39,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/main/java/org/gradle/internal/operations/BuildOperationDescriptor.java",
              "type": "String",
              "code": "        this.id = id;\n        this.parentId = parentId;\n        this.name = name;\n        this.displayName = displayName;\n        this.progressDisplayName = progressDisplayName;\n        this.details = details;\n        this.metadata = metadata;"
            },
            {
              "step": 82,
              "variableName": "this",
              "startLine": 47,
              "startColumn": 9,
              "endLine": 47,
              "endColumn": 13,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/main/java/org/gradle/internal/operations/BuildOperationDescriptor.java",
              "type": "BuildOperationDescriptor [displayName] : String",
              "code": "        this.id = id;\n        this.parentId = parentId;\n        this.name = name;\n        this.displayName = displayName;\n        this.progressDisplayName = progressDisplayName;\n        this.details = details;\n        this.metadata = metadata;"
            },
            {
              "step": 83,
              "variableName": "new BuildOperationDescriptor(id, parent == null ? defaultParentId : parent.getId(), name, displayName, progressDisplayName, details, metadata, totalProgress)",
              "startLine": 190,
              "startColumn": 20,
              "endLine": 190,
              "endColumn": 177,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/main/java/org/gradle/internal/operations/BuildOperationDescriptor.java",
              "type": "BuildOperationDescriptor [displayName] : String",
              "code": "        }\n\n        public BuildOperationDescriptor build(@Nullable OperationIdentifier id, @Nullable OperationIdentifier defaultParentId) {\n            return new BuildOperationDescriptor(id, parent == null ? defaultParentId : parent.getId(), name, displayName, progressDisplayName, details, metadata, totalProgress);\n        }\n    }\n}"
            },
            {
              "step": 84,
              "variableName": "build(null, null)",
              "startLine": 181,
              "startColumn": 20,
              "endLine": 181,
              "endColumn": 37,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/main/java/org/gradle/internal/operations/BuildOperationDescriptor.java",
              "type": "BuildOperationDescriptor [displayName] : String",
              "code": "        }\n\n        public BuildOperationDescriptor build() {\n            return build(null, null);\n        }\n\n        @Nullable"
            },
            {
              "step": 85,
              "variableName": "invocation.description().build()",
              "startLine": 58,
              "startColumn": 48,
              "endLine": 58,
              "endColumn": 80,
              "uri": "gradle-8.14.0/platforms/native/platform-native/src/main/java/org/gradle/nativeplatform/toolchain/internal/DefaultCommandLineToolInvocationWorker.java",
              "type": "BuildOperationDescriptor [displayName] : String",
              "code": "\n    @Override\n    public void execute(CommandLineToolInvocation invocation, BuildOperationContext context) {\n        BuildOperationDescriptor description = invocation.description().build();\n        ExecAction toolExec = execActionFactory.newExecAction();\n\n        toolExec.executable(executable);"
            },
            {
              "step": 86,
              "variableName": "description",
              "startLine": 88,
              "startColumn": 53,
              "endLine": 88,
              "endColumn": 64,
              "uri": "gradle-8.14.0/platforms/native/platform-native/src/main/java/org/gradle/nativeplatform/toolchain/internal/DefaultCommandLineToolInvocationWorker.java",
              "type": "BuildOperationDescriptor [displayName] : String",
              "code": "\n        try {\n            toolExec.execute();\n            invocation.getLogger().operationSuccess(description.getDisplayName(), combineOutput(stdOutput, errOutput));\n        } catch (ExecException e) {\n            invocation.getLogger().operationFailed(description.getDisplayName(), combineOutput(stdOutput, errOutput));\n            throw new CommandLineToolInvocationFailure(invocation, String.format(\"%s failed while %s.\", name, description.getDisplayName()));"
            },
            {
              "step": 87,
              "variableName": "getDisplayName",
              "startLine": 72,
              "startColumn": 19,
              "endLine": 72,
              "endColumn": 33,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/main/java/org/gradle/internal/operations/BuildOperationDescriptor.java",
              "type": "BuildOperationDescriptor [displayName] : String",
              "code": "     * operation, and should describe the operation whether currently running or not, eg \"Run test A\" rather than\n     * \"Running test A\".\n     */\n    public String getDisplayName() {\n        return displayName;\n    }\n"
            },
            {
              "step": 88,
              "variableName": "displayName",
              "startLine": 73,
              "startColumn": 16,
              "endLine": 73,
              "endColumn": 27,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/main/java/org/gradle/internal/operations/BuildOperationDescriptor.java",
              "type": "BuildOperationDescriptor [displayName] : String",
              "code": "     * \"Running test A\".\n     */\n    public String getDisplayName() {\n        return displayName;\n    }\n\n    /**"
            },
            {
              "step": 89,
              "variableName": "displayName",
              "startLine": 73,
              "startColumn": 16,
              "endLine": 73,
              "endColumn": 27,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/main/java/org/gradle/internal/operations/BuildOperationDescriptor.java",
              "type": "String",
              "code": "     * \"Running test A\".\n     */\n    public String getDisplayName() {\n        return displayName;\n    }\n\n    /**"
            },
            {
              "step": 90,
              "variableName": "description.getDisplayName()",
              "startLine": 88,
              "startColumn": 53,
              "endLine": 88,
              "endColumn": 81,
              "uri": "gradle-8.14.0/platforms/native/platform-native/src/main/java/org/gradle/nativeplatform/toolchain/internal/DefaultCommandLineToolInvocationWorker.java",
              "type": "String",
              "code": "\n        try {\n            toolExec.execute();\n            invocation.getLogger().operationSuccess(description.getDisplayName(), combineOutput(stdOutput, errOutput));\n        } catch (ExecException e) {\n            invocation.getLogger().operationFailed(description.getDisplayName(), combineOutput(stdOutput, errOutput));\n            throw new CommandLineToolInvocationFailure(invocation, String.format(\"%s failed while %s.\", name, description.getDisplayName()));"
            },
            {
              "step": 91,
              "variableName": "String description",
              "startLine": 67,
              "startColumn": 47,
              "endLine": 67,
              "endColumn": 65,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/internal/operations/logging/DefaultBuildOperationLogger.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public synchronized void operationSuccess(String description, String output) {\n        assert started;\n        logInBoth(LogLevel.DEBUG, description.concat(\" successful.\"));\n        maybeShowSuccess(output);"
            },
            {
              "step": 92,
              "variableName": "description",
              "startLine": 69,
              "startColumn": 35,
              "endLine": 69,
              "endColumn": 46,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/internal/operations/logging/DefaultBuildOperationLogger.java",
              "type": "String",
              "code": "    @Override\n    public synchronized void operationSuccess(String description, String output) {\n        assert started;\n        logInBoth(LogLevel.DEBUG, description.concat(\" successful.\"));\n        maybeShowSuccess(output);\n    }\n"
            },
            {
              "step": 93,
              "variableName": "description.concat(\" successful.\")",
              "startLine": 69,
              "startColumn": 35,
              "endLine": 69,
              "endColumn": 69,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/internal/operations/logging/DefaultBuildOperationLogger.java",
              "type": "String",
              "code": "    @Override\n    public synchronized void operationSuccess(String description, String output) {\n        assert started;\n        logInBoth(LogLevel.DEBUG, description.concat(\" successful.\"));\n        maybeShowSuccess(output);\n    }\n"
            },
            {
              "step": 94,
              "variableName": "String message",
              "startLine": 108,
              "startColumn": 47,
              "endLine": 108,
              "endColumn": 61,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/internal/operations/logging/DefaultBuildOperationLogger.java",
              "type": "String",
              "code": "        numberOfFailedOperationsSeen++;\n    }\n\n    private void logInBoth(LogLevel logLevel, String message) {\n        logger.log(logLevel, message);\n        logWriter.println(message);\n    }"
            },
            {
              "step": 95,
              "variableName": "message",
              "startLine": 110,
              "startColumn": 27,
              "endLine": 110,
              "endColumn": 34,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/internal/operations/logging/DefaultBuildOperationLogger.java",
              "type": "",
              "code": "\n    private void logInBoth(LogLevel logLevel, String message) {\n        logger.log(logLevel, message);\n        logWriter.println(message);\n    }\n\n    @Override"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "source",
              "startLine": 40,
              "startColumn": 39,
              "endLine": 40,
              "endColumn": 45,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/RegExpNameMapper.java",
              "type": "String",
              "code": "    @Override\n    public String transform(String source) {\n        if (matcher == null) {\n            matcher = pattern.matcher(source);\n        } else {\n            matcher.reset(source);\n        }"
            },
            {
              "step": 1,
              "variableName": "result",
              "startLine": 48,
              "startColumn": 16,
              "endLine": 48,
              "endColumn": 22,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/RegExpNameMapper.java",
              "type": "String",
              "code": "        if (matcher.find()) {\n            result = matcher.replaceFirst(replacement);\n        }\n        return result;\n    }\n}\n"
            },
            {
              "step": 2,
              "variableName": "transformer.transform(value)",
              "startLine": 37,
              "startColumn": 31,
              "endLine": 37,
              "endColumn": 59,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/ChainingTransformer.java",
              "type": "String",
              "code": "    public T transform(T original) {\n        T value = original;\n        for (Transformer<T, T> transformer : transformers) {\n            value = type.cast(transformer.transform(value));\n        }\n        return value;\n    }"
            },
            {
              "step": 3,
              "variableName": "type.cast(transformer.transform(value))",
              "startLine": 37,
              "startColumn": 21,
              "endLine": 37,
              "endColumn": 60,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/ChainingTransformer.java",
              "type": "String",
              "code": "    public T transform(T original) {\n        T value = original;\n        for (Transformer<T, T> transformer : transformers) {\n            value = type.cast(transformer.transform(value));\n        }\n        return value;\n    }"
            },
            {
              "step": 4,
              "variableName": "value",
              "startLine": 39,
              "startColumn": 16,
              "endLine": 39,
              "endColumn": 21,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/ChainingTransformer.java",
              "type": "String",
              "code": "        for (Transformer<T, T> transformer : transformers) {\n            value = type.cast(transformer.transform(value));\n        }\n        return value;\n    }\n\n    public void add(Transformer<T, T> transformer) {"
            },
            {
              "step": 5,
              "variableName": "describer.transform(this)",
              "startLine": 163,
              "startColumn": 16,
              "endLine": 163,
              "endColumn": 41,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/repositories/DefaultMavenArtifactRepository.java",
              "type": "String",
              "code": "\n    @Override\n    public String getDisplayName() {\n        return describer.transform(this);\n    }\n\n    @Override"
            },
            {
              "step": 6,
              "variableName": "describable.getDisplayName()",
              "startLine": 313,
              "startColumn": 35,
              "endLine": 313,
              "endColumn": 63,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "String",
              "code": "        public String getDisplayName() {\n            synchronized (this) {\n                if (displayName == null) {\n                    displayName = describable.getDisplayName();\n                    if (capDisplayName != null || !(describable instanceof DisplayName)) {\n                        describable = null;\n                    }"
            },
            {
              "step": 7,
              "variableName": "displayName",
              "startLine": 318,
              "startColumn": 24,
              "endLine": 318,
              "endColumn": 35,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "String",
              "code": "                        describable = null;\n                    }\n                }\n                return displayName;\n            }\n        }\n    }"
            },
            {
              "step": 8,
              "variableName": "displayName.getDisplayName()",
              "startLine": 772,
              "startColumn": 73,
              "endLine": 772,
              "endColumn": 101,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/configurations/DefaultConfiguration.java",
              "type": "String",
              "code": "                try {\n                    results = resolver.resolveGraph(DefaultConfiguration.this);\n                } catch (Exception e) {\n                    throw exceptionMapper.mapFailure(e, \"dependencies\", displayName.getDisplayName());\n                }\n\n                // Make the new state visible in case a dependency resolution listener queries the result, which requires the new state"
            },
            {
              "step": 9,
              "variableName": "String contextDisplayName",
              "startLine": 68,
              "startColumn": 77,
              "endLine": 68,
              "endColumn": 102,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "String",
              "code": "        return mapFailure(failure, type, displayName);\n    }\n\n    public TypedResolveException mapFailure(Throwable failure, String type, String contextDisplayName) {\n        if (!(failure instanceof TypedResolveException)) {\n            return new TypedResolveException(\n                type,"
            },
            {
              "step": 10,
              "variableName": "contextDisplayName",
              "startLine": 72,
              "startColumn": 17,
              "endLine": 72,
              "endColumn": 35,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "String",
              "code": "        if (!(failure instanceof TypedResolveException)) {\n            return new TypedResolveException(\n                type,\n                contextDisplayName,\n                ImmutableList.of(mapRepositoryOverrideFailure(contextDisplayName, failure))\n            );\n        }"
            },
            {
              "step": 11,
              "variableName": "new TypedResolveException(...) : TypedResolveException",
              "startLine": 70,
              "startColumn": 20,
              "endLine": 74,
              "endColumn": 14,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "TypedResolveException",
              "code": "\n    public TypedResolveException mapFailure(Throwable failure, String type, String contextDisplayName) {\n        if (!(failure instanceof TypedResolveException)) {\n            return new TypedResolveException(\n                type,\n                contextDisplayName,\n                ImmutableList.of(mapRepositoryOverrideFailure(contextDisplayName, failure))"
            },
            {
              "step": 12,
              "variableName": "exceptionMapper.mapFailure(e, \"dependencies\", displayName.getDisplayName())",
              "startLine": 772,
              "startColumn": 27,
              "endLine": 772,
              "endColumn": 102,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/configurations/DefaultConfiguration.java",
              "type": "TypedResolveException",
              "code": "                try {\n                    results = resolver.resolveGraph(DefaultConfiguration.this);\n                } catch (Exception e) {\n                    throw exceptionMapper.mapFailure(e, \"dependencies\", displayName.getDisplayName());\n                }\n\n                // Make the new state visible in case a dependency resolution listener queries the result, which requires the new state"
            },
            {
              "step": 13,
              "variableName": "e",
              "startLine": 772,
              "startColumn": 54,
              "endLine": 772,
              "endColumn": 55,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/configurations/DefaultConfiguration.java",
              "type": "Exception",
              "code": "                try {\n                    results = resolver.resolveGraph(DefaultConfiguration.this);\n                } catch (Exception e) {\n                    throw exceptionMapper.mapFailure(e, \"dependencies\", displayName.getDisplayName());\n                }\n\n                // Make the new state visible in case a dependency resolution listener queries the result, which requires the new state"
            },
            {
              "step": 14,
              "variableName": "Throwable failure",
              "startLine": 68,
              "startColumn": 45,
              "endLine": 68,
              "endColumn": 62,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Throwable",
              "code": "        return mapFailure(failure, type, displayName);\n    }\n\n    public TypedResolveException mapFailure(Throwable failure, String type, String contextDisplayName) {\n        if (!(failure instanceof TypedResolveException)) {\n            return new TypedResolveException(\n                type,"
            },
            {
              "step": 15,
              "variableName": "failure",
              "startLine": 73,
              "startColumn": 83,
              "endLine": 73,
              "endColumn": 90,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Throwable",
              "code": "            return new TypedResolveException(\n                type,\n                contextDisplayName,\n                ImmutableList.of(mapRepositoryOverrideFailure(contextDisplayName, failure))\n            );\n        }\n"
            },
            {
              "step": 16,
              "variableName": "Throwable failure",
              "startLine": 94,
              "startColumn": 78,
              "endLine": 94,
              "endColumn": 95,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Throwable",
              "code": "\n    // TODO: We should handle this exception at the source instead of using instanceof to detect it after it is thrown.\n    //       We should try to avoid catching and analyzing runtime exceptions\n    public Throwable mapRepositoryOverrideFailure(String contextDisplayName, Throwable failure) {\n        if (!(failure instanceof ModuleVersionNotFoundException) || !settingsRepositoriesIgnored()) {\n            return failure;\n        }"
            },
            {
              "step": 17,
              "variableName": "failure",
              "startLine": 108,
              "startColumn": 35,
              "endLine": 108,
              "endColumn": 42,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Throwable",
              "code": "        return new TypedResolveException(\n            \"dependencies\",\n            contextDisplayName,\n            Collections.singleton(failure),\n            resolutions\n        );\n    }"
            },
            {
              "step": 18,
              "variableName": "Collections.singleton(failure)",
              "startLine": 108,
              "startColumn": 13,
              "endLine": 108,
              "endColumn": 43,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Set [<element>] : Throwable",
              "code": "        return new TypedResolveException(\n            \"dependencies\",\n            contextDisplayName,\n            Collections.singleton(failure),\n            resolutions\n        );\n    }"
            },
            {
              "step": 19,
              "variableName": "Collections.singleton(failure)",
              "startLine": 108,
              "startColumn": 13,
              "endLine": 108,
              "endColumn": 43,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Set",
              "code": "        return new TypedResolveException(\n            \"dependencies\",\n            contextDisplayName,\n            Collections.singleton(failure),\n            resolutions\n        );\n    }"
            },
            {
              "step": 20,
              "variableName": "Iterable<? extends Throwable> failures",
              "startLine": 42,
              "startColumn": 67,
              "endLine": 42,
              "endColumn": 105,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ivyservice/TypedResolveException.java",
              "type": "Set",
              "code": "    /**\n     * Creates a new instance with resolutions.\n     */\n    public TypedResolveException(String type, String displayName, Iterable<? extends Throwable> failures, List<String> resolutions) {\n        super(buildMessage(type, displayName), failures, false);\n        this.type = type;\n        this.resolutions = ImmutableList.copyOf(resolutions);"
            },
            {
              "step": 21,
              "variableName": "failures",
              "startLine": 43,
              "startColumn": 48,
              "endLine": 43,
              "endColumn": 56,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ivyservice/TypedResolveException.java",
              "type": "Set",
              "code": "     * Creates a new instance with resolutions.\n     */\n    public TypedResolveException(String type, String displayName, Iterable<? extends Throwable> failures, List<String> resolutions) {\n        super(buildMessage(type, displayName), failures, false);\n        this.type = type;\n        this.resolutions = ImmutableList.copyOf(resolutions);\n    }"
            },
            {
              "step": 22,
              "variableName": "Iterable<? extends Throwable> causes",
              "startLine": 77,
              "startColumn": 48,
              "endLine": 77,
              "endColumn": 84,
              "uri": "gradle-8.14.0/subprojects/core-api/src/main/java/org/gradle/api/artifacts/ResolveException.java",
              "type": "Set",
              "code": "     * @since 8.9\n     */\n    @Incubating\n    protected ResolveException(String message, Iterable<? extends Throwable> causes, @SuppressWarnings(\"unused\") boolean dummy) {\n        super(message, causes);\n    }\n}"
            },
            {
              "step": 23,
              "variableName": "causes",
              "startLine": 78,
              "startColumn": 24,
              "endLine": 78,
              "endColumn": 30,
              "uri": "gradle-8.14.0/subprojects/core-api/src/main/java/org/gradle/api/artifacts/ResolveException.java",
              "type": "Set",
              "code": "     */\n    @Incubating\n    protected ResolveException(String message, Iterable<? extends Throwable> causes, @SuppressWarnings(\"unused\") boolean dummy) {\n        super(message, causes);\n    }\n}\n"
            },
            {
              "step": 24,
              "variableName": "Iterable<? extends Throwable> causes",
              "startLine": 47,
              "startColumn": 55,
              "endLine": 47,
              "endColumn": 91,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "Set",
              "code": "        this.causes.addAll(Arrays.asList(causes));\n    }\n\n    public DefaultMultiCauseException(String message, Iterable<? extends Throwable> causes) {\n        super(message);\n        this.message = message;\n        initCauses(causes);"
            },
            {
              "step": 25,
              "variableName": "causes",
              "startLine": 50,
              "startColumn": 20,
              "endLine": 50,
              "endColumn": 26,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "Set",
              "code": "    public DefaultMultiCauseException(String message, Iterable<? extends Throwable> causes) {\n        super(message);\n        this.message = message;\n        initCauses(causes);\n    }\n\n    public DefaultMultiCauseException(Factory<String> messageFactory) {"
            },
            {
              "step": 26,
              "variableName": "Iterable<? extends Throwable> causes",
              "startLine": 112,
              "startColumn": 28,
              "endLine": 112,
              "endColumn": 64,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "Iterable",
              "code": "        return null;\n    }\n\n    public void initCauses(Iterable<? extends Throwable> causes) {\n        this.causes.clear();\n        for (Throwable cause : causes) {\n            this.causes.add(cause);"
            },
            {
              "step": 27,
              "variableName": "cause",
              "startLine": 115,
              "startColumn": 29,
              "endLine": 115,
              "endColumn": 34,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "Throwable",
              "code": "    public void initCauses(Iterable<? extends Throwable> causes) {\n        this.causes.clear();\n        for (Throwable cause : causes) {\n            this.causes.add(cause);\n        }\n    }\n"
            },
            {
              "step": 28,
              "variableName": "this.causes",
              "startLine": 115,
              "startColumn": 13,
              "endLine": 115,
              "endColumn": 24,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "CopyOnWriteArrayList [<element>] : Throwable",
              "code": "    public void initCauses(Iterable<? extends Throwable> causes) {\n        this.causes.clear();\n        for (Throwable cause : causes) {\n            this.causes.add(cause);\n        }\n    }\n"
            },
            {
              "step": 29,
              "variableName": "this",
              "startLine": 115,
              "startColumn": 13,
              "endLine": 115,
              "endColumn": 17,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "DefaultMultiCauseException [causes, <element>] : Throwable",
              "code": "    public void initCauses(Iterable<? extends Throwable> causes) {\n        this.causes.clear();\n        for (Throwable cause : causes) {\n            this.causes.add(cause);\n        }\n    }\n"
            },
            {
              "step": 30,
              "variableName": "projectConfigurationException",
              "startLine": 57,
              "startColumn": 17,
              "endLine": 57,
              "endColumn": 46,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/DefaultExceptionAnalyser.java",
              "type": "ProjectConfigurationException [causes, <element>] : Throwable",
              "code": "                }\n            }\n            if (!additionalFailures.isEmpty()) {\n                projectConfigurationException.initCauses(additionalFailures);\n                failures.add(transform(projectConfigurationException));\n            }\n        } else if (exception instanceof ServiceCreationException) {"
            },
            {
              "step": 31,
              "variableName": "projectConfigurationException",
              "startLine": 58,
              "startColumn": 40,
              "endLine": 58,
              "endColumn": 69,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/DefaultExceptionAnalyser.java",
              "type": "ProjectConfigurationException [causes, <element>] : Throwable",
              "code": "            }\n            if (!additionalFailures.isEmpty()) {\n                projectConfigurationException.initCauses(additionalFailures);\n                failures.add(transform(projectConfigurationException));\n            }\n        } else if (exception instanceof ServiceCreationException) {\n            failures.add(transform(new InitializationException(exception)));"
            },
            {
              "step": 32,
              "variableName": "transform(projectConfigurationException)",
              "startLine": 58,
              "startColumn": 30,
              "endLine": 58,
              "endColumn": 70,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/DefaultExceptionAnalyser.java",
              "type": "LocationAwareException",
              "code": "            }\n            if (!additionalFailures.isEmpty()) {\n                projectConfigurationException.initCauses(additionalFailures);\n                failures.add(transform(projectConfigurationException));\n            }\n        } else if (exception instanceof ServiceCreationException) {\n            failures.add(transform(new InitializationException(exception)));"
            },
            {
              "step": 33,
              "variableName": "failures",
              "startLine": 58,
              "startColumn": 17,
              "endLine": 58,
              "endColumn": 25,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/DefaultExceptionAnalyser.java",
              "type": "Collection [<element>] : LocationAwareException",
              "code": "            }\n            if (!additionalFailures.isEmpty()) {\n                projectConfigurationException.initCauses(additionalFailures);\n                failures.add(transform(projectConfigurationException));\n            }\n        } else if (exception instanceof ServiceCreationException) {\n            failures.add(transform(new InitializationException(exception)));"
            },
            {
              "step": 34,
              "variableName": "result",
              "startLine": 53,
              "startColumn": 54,
              "endLine": 53,
              "endColumn": 60,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/MultipleBuildFailuresExceptionAnalyser.java",
              "type": "ArrayList [<element>] : LocationAwareException",
              "code": "        for (Throwable failure : failures) {\n            if (failure instanceof MultipleBuildFailures) {\n                for (Throwable cause : ((MultipleBuildFailures) failure).getCauses()) {\n                    collector.collectFailures(cause, result);\n                }\n            } else {\n                collector.collectFailures(failure, result);"
            },
            {
              "step": 35,
              "variableName": "result",
              "startLine": 60,
              "startColumn": 39,
              "endLine": 60,
              "endColumn": 45,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/MultipleBuildFailuresExceptionAnalyser.java",
              "type": "ArrayList [<element>] : LocationAwareException",
              "code": "            }\n        }\n        if (result.size() == 1 && result.get(0) instanceof RuntimeException) {\n            return (RuntimeException) result.get(0);\n        } else {\n            return new MultipleBuildFailures(result);\n        }"
            },
            {
              "step": 36,
              "variableName": "result.get(0)",
              "startLine": 60,
              "startColumn": 39,
              "endLine": 60,
              "endColumn": 52,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/MultipleBuildFailuresExceptionAnalyser.java",
              "type": "LocationAwareException",
              "code": "            }\n        }\n        if (result.size() == 1 && result.get(0) instanceof RuntimeException) {\n            return (RuntimeException) result.get(0);\n        } else {\n            return new MultipleBuildFailures(result);\n        }"
            },
            {
              "step": 37,
              "variableName": "(RuntimeException) result.get(0)",
              "startLine": 60,
              "startColumn": 20,
              "endLine": 60,
              "endColumn": 52,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/MultipleBuildFailuresExceptionAnalyser.java",
              "type": "LocationAwareException",
              "code": "            }\n        }\n        if (result.size() == 1 && result.get(0) instanceof RuntimeException) {\n            return (RuntimeException) result.get(0);\n        } else {\n            return new MultipleBuildFailures(result);\n        }"
            },
            {
              "step": 38,
              "variableName": "exceptionAnalyser.transform(finishFailures)",
              "startLine": 72,
              "startColumn": 16,
              "endLine": 72,
              "endColumn": 59,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/internal/buildtree/DefaultBuildTreeFinishExecutor.java",
              "type": "LocationAwareException",
              "code": "            finishFailures.addAll(result.getFailures());\n        });\n\n        return exceptionAnalyser.transform(finishFailures);\n    }\n}\n"
            },
            {
              "step": 39,
              "variableName": "delegate.finishBuildTree(failures)",
              "startLine": 46,
              "startColumn": 28,
              "endLine": 46,
              "endColumn": 62,
              "uri": "gradle-8.14.0/subprojects/composite-builds/src/main/java/org/gradle/composite/internal/OperationFiringBuildTreeFinishExecutor.java",
              "type": "LocationAwareException",
              "code": "            @Override\n            public RuntimeException call(BuildOperationContext context) {\n                try {\n                    return delegate.finishBuildTree(failures);\n                } finally {\n                    context.setResult(RESULT);\n                }"
            },
            {
              "step": 40,
              "variableName": "buildOperation.call(context)",
              "startLine": 239,
              "startColumn": 21,
              "endLine": 239,
              "endColumn": 49,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/testFixtures/java/org/gradle/internal/operations/TestBuildOperationRunner.java",
              "type": "LocationAwareException",
              "code": "            TestBuildOperationContext context = new TestBuildOperationContext(record);\n            T t;\n            try {\n                t = buildOperation.call(context);\n            } catch (Throwable failure) {\n                if (record.failure == null) {\n                    record.failure = failure;"
            },
            {
              "step": 41,
              "variableName": "t",
              "startLine": 246,
              "startColumn": 20,
              "endLine": 246,
              "endColumn": 21,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/testFixtures/java/org/gradle/internal/operations/TestBuildOperationRunner.java",
              "type": "LocationAwareException",
              "code": "                }\n                throw throwAsUncheckedException(failure);\n            }\n            return t;\n        }\n\n        private <O extends BuildOperation> void execute(O buildOperation, BuildOperationWorker<O> worker) {"
            },
            {
              "step": 42,
              "variableName": "log.call(buildOperation)",
              "startLine": 51,
              "startColumn": 16,
              "endLine": 51,
              "endColumn": 40,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/testFixtures/java/org/gradle/internal/operations/TestBuildOperationRunner.java",
              "type": "LocationAwareException",
              "code": "\n    @Override\n    public <T> T call(CallableBuildOperation<T> buildOperation) {\n        return log.call(buildOperation);\n    }\n\n    @Override"
            },
            {
              "step": 43,
              "variableName": "ca",
              "startLine": 115,
              "startColumn": 5,
              "endLine": 121,
              "endColumn": 7,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/configurationcache/ConfigurationCacheBuildOperations.kt",
              "type": "LocationAwareException",
              "code": "\ninternal\nfun <T : Any> BuildOperationRunner.withModelLoadOperation(block: () -> T): T =\n    call(object : CallableBuildOperation<T> {\n        override fun description(): BuildOperationDescriptor.Builder = BuildOperationDescriptor\n            .displayName(\"Load model from configuration cache\")\n            .progressDisplayName(\"Loading model from configuration cache\")"
            },
            {
              "step": 44,
              "variableName": "ca",
              "startLine": 115,
              "startColumn": 5,
              "endLine": 121,
              "endColumn": 7,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/configurationcache/ConfigurationCacheBuildOperations.kt",
              "type": "LocationAwareException",
              "code": "\ninternal\nfun <T : Any> BuildOperationRunner.withModelLoadOperation(block: () -> T): T =\n    call(object : CallableBuildOperation<T> {\n        override fun description(): BuildOperationDescriptor.Builder = BuildOperationDescriptor\n            .displayName(\"Load model from configuration cache\")\n            .progressDisplayName(\"Loading model from configuration cache\")"
            },
            {
              "step": 45,
              "variableName": "b",
              "startLine": 635,
              "startColumn": 9,
              "endLine": 641,
              "endColumn": 10,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "        // No need to record the `ClassLoaderScope` tree when loading\n        scopeRegistryListener.dispose()\n\n        buildOperationRunner.withModelLoadOperation {\n            val storeLoadResult = entryStore.useForStateLoad(StateType.Model) { stateFile: ConfigurationCacheStateFile ->\n                cacheIO.readModelFrom(stateFile)\n            }"
            },
            {
              "step": 46,
              "variableName": "block()",
              "startLine": 668,
              "startColumn": 22,
              "endLine": 668,
              "endColumn": 29,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "    private\n    inline fun <T> runAtConfigurationTime(block: () -> T): T {\n        prepareConfigurationTimeBarrier()\n        val result = block()\n        crossConfigurationTimeBarrier()\n        return result\n    }"
            },
            {
              "step": 47,
              "variableName": "result",
              "startLine": 670,
              "startColumn": 16,
              "endLine": 670,
              "endColumn": 22,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "        prepareConfigurationTimeBarrier()\n        val result = block()\n        crossConfigurationTimeBarrier()\n        return result\n    }\n\n    private"
            },
            {
              "step": 48,
              "variableName": "runAtConfigurationTime(...) : LocationAwareException",
              "startLine": 631,
              "startColumn": 28,
              "endLine": 642,
              "endColumn": 6,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "    data class LoadResultMetadata(val originInvocationId: String? = null)\n\n    private\n    fun loadModel(): Any = runAtConfigurationTime {\n        // No need to record the `ClassLoaderScope` tree when loading\n        scopeRegistryListener.dispose()\n"
            },
            {
              "step": 49,
              "variableName": "loadModel()",
              "startLine": 268,
              "startColumn": 20,
              "endLine": 268,
              "endColumn": 31,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "    override fun <T : Any> loadOrCreateModel(creator: () -> T): T {\n        if (isLoaded) {\n            runLoadedSideEffects()\n            return loadModel().uncheckedCast()\n        }\n\n        return runWorkThatContributesToCacheEntry {"
            },
            {
              "step": 50,
              "variableName": "Any",
              "startLine": 22,
              "startColumn": 15,
              "endLine": 22,
              "endColumn": 18,
              "uri": "gradle-8.14.0/platforms/core-configuration/stdlib-kotlin-extensions/src/main/kotlin/org/gradle/internal/extensions/stdlib/CastExtensions.kt",
              "type": "Object",
              "code": "import org.gradle.internal.Cast\n\n\nfun <T : Any> Any.uncheckedCast(): T =\n    Cast.uncheckedNonnullCast(this)\n"
            },
            {
              "step": 51,
              "variableName": "this",
              "startLine": 23,
              "startColumn": 31,
              "endLine": 23,
              "endColumn": 35,
              "uri": "gradle-8.14.0/platforms/core-configuration/stdlib-kotlin-extensions/src/main/kotlin/org/gradle/internal/extensions/stdlib/CastExtensions.kt",
              "type": "Object",
              "code": "\n\nfun <T : Any> Any.uncheckedCast(): T =\n    Cast.uncheckedNonnullCast(this)\n"
            },
            {
              "step": 52,
              "variableName": "Object object",
              "startLine": 76,
              "startColumn": 46,
              "endLine": 76,
              "endColumn": 59,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/Cast.java",
              "type": "Object",
              "code": "    }\n\n    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})\n    public static <T> T uncheckedNonnullCast(Object object) {\n        return (T) object;\n    }\n}"
            },
            {
              "step": 53,
              "variableName": "(T) object",
              "startLine": 77,
              "startColumn": 16,
              "endLine": 77,
              "endColumn": 26,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/Cast.java",
              "type": "Object",
              "code": "\n    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})\n    public static <T> T uncheckedNonnullCast(Object object) {\n        return (T) object;\n    }\n}\n"
            },
            {
              "step": 54,
              "variableName": "Cast.uncheckedNonnullCast(collectionType)",
              "startLine": 223,
              "startColumn": 16,
              "endLine": 223,
              "endColumn": 57,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/api/internal/provider/AbstractCollectionProperty.java",
              "type": "Class",
              "code": "    @Override\n    @Nonnull\n    public Class<C> getType() {\n        return Cast.uncheckedNonnullCast(collectionType);\n    }\n\n    @Override"
            },
            {
              "step": 55,
              "variableName": "provider.getType()",
              "startLine": 41,
              "startColumn": 35,
              "endLine": 41,
              "endColumn": 53,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/api/internal/provider/OrElseFixedValueProvider.java",
              "type": "Class",
              "code": "    @Nullable\n    @Override\n    public Class<T> getType() {\n        return Cast.uncheckedCast(provider.getType());\n    }\n\n    @Override"
            },
            {
              "step": 56,
              "variableName": "@Nullable Object object",
              "startLine": 71,
              "startColumn": 39,
              "endLine": 71,
              "endColumn": 62,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/Cast.java",
              "type": "Object",
              "code": "\n    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})\n    @Nullable\n    public static <T> T uncheckedCast(@Nullable Object object) {\n        return (T) object;\n    }\n"
            },
            {
              "step": 57,
              "variableName": "(T) object",
              "startLine": 72,
              "startColumn": 16,
              "endLine": 72,
              "endColumn": 26,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/Cast.java",
              "type": "Object",
              "code": "    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})\n    @Nullable\n    public static <T> T uncheckedCast(@Nullable Object object) {\n        return (T) object;\n    }\n\n    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})"
            },
            {
              "step": 58,
              "variableName": "Cast.uncheckedCast(sanitizer.sanitize(t))",
              "startLine": 41,
              "startColumn": 15,
              "endLine": 41,
              "endColumn": 56,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/api/internal/provider/TypeSanitizingTransformer.java",
              "type": "Object",
              "code": "\n    @Override\n    public T transform(T t) {\n        T v = Cast.uncheckedCast(sanitizer.sanitize(t));\n        if (targetType.isInstance(v)) {\n            return v;\n        }"
            },
            {
              "step": 59,
              "variableName": "v",
              "startLine": 43,
              "startColumn": 20,
              "endLine": 43,
              "endColumn": 21,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/api/internal/provider/TypeSanitizingTransformer.java",
              "type": "Object",
              "code": "    public T transform(T t) {\n        T v = Cast.uncheckedCast(sanitizer.sanitize(t));\n        if (targetType.isInstance(v)) {\n            return v;\n        }\n        throw new IllegalArgumentException(String.format(\"Cannot get the value of %s of type %s as the provider associated with this property returned a value of type %s.\", owner.getDisplayName(), targetType.getName(), v.getClass().getName()));\n    }"
            },
            {
              "step": 60,
              "variableName": "describer.transform(this)",
              "startLine": 163,
              "startColumn": 16,
              "endLine": 163,
              "endColumn": 41,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/repositories/DefaultMavenArtifactRepository.java",
              "type": "String",
              "code": "\n    @Override\n    public String getDisplayName() {\n        return describer.transform(this);\n    }\n\n    @Override"
            },
            {
              "step": 61,
              "variableName": "describable.getDisplayName()",
              "startLine": 313,
              "startColumn": 35,
              "endLine": 313,
              "endColumn": 63,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "String",
              "code": "        public String getDisplayName() {\n            synchronized (this) {\n                if (displayName == null) {\n                    displayName = describable.getDisplayName();\n                    if (capDisplayName != null || !(describable instanceof DisplayName)) {\n                        describable = null;\n                    }"
            },
            {
              "step": 62,
              "variableName": "displayName",
              "startLine": 318,
              "startColumn": 24,
              "endLine": 318,
              "endColumn": 35,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "String",
              "code": "                        describable = null;\n                    }\n                }\n                return displayName;\n            }\n        }\n    }"
            },
            {
              "step": 63,
              "variableName": "displayName().getDisplayName()",
              "startLine": 50,
              "startColumn": 16,
              "endLine": 50,
              "endColumn": 46,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/configurations/ResolutionHost.java",
              "type": "String",
              "code": "    DisplayName displayName();\n\n    default String getDisplayName() {\n        return displayName().getDisplayName();\n    }\n\n    default DisplayName displayName(String type) {"
            },
            {
              "step": 64,
              "variableName": "resolutionHost.getDisplayName()",
              "startLine": 75,
              "startColumn": 60,
              "endLine": 75,
              "endColumn": 91,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ivyservice/resolveengine/artifact/ResolvedArtifactSetResolver.java",
              "type": "String",
              "code": "\n            @Override\n            public BuildOperationDescriptor.Builder description() {\n                String displayName = \"Resolve files of \" + resolutionHost.getDisplayName();\n                return BuildOperationDescriptor\n                    .displayName(displayName)\n                    .progressDisplayName(displayName)"
            },
            {
              "step": 65,
              "variableName": "\"Resolve files of \" + resolutionHost.getDisplayName()",
              "startLine": 75,
              "startColumn": 38,
              "endLine": 75,
              "endColumn": 91,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ivyservice/resolveengine/artifact/ResolvedArtifactSetResolver.java",
              "type": "String",
              "code": "\n            @Override\n            public BuildOperationDescriptor.Builder description() {\n                String displayName = \"Resolve files of \" + resolutionHost.getDisplayName();\n                return BuildOperationDescriptor\n                    .displayName(displayName)\n                    .progressDisplayName(displayName)"
            },
            {
              "step": 66,
              "variableName": "displayName",
              "startLine": 77,
              "startColumn": 34,
              "endLine": 77,
              "endColumn": 45,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ivyservice/resolveengine/artifact/ResolvedArtifactSetResolver.java",
              "type": "String",
              "code": "            public BuildOperationDescriptor.Builder description() {\n                String displayName = \"Resolve files of \" + resolutionHost.getDisplayName();\n                return BuildOperationDescriptor\n                    .displayName(displayName)\n                    .progressDisplayName(displayName)\n                    .details(new ResolveArtifactsBuildOperationType.Details() {\n                        @Override"
            },
            {
              "step": 67,
              "variableName": "String displayName",
              "startLine": 111,
              "startColumn": 39,
              "endLine": 111,
              "endColumn": 57,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/main/java/org/gradle/internal/operations/BuildOperationDescriptor.java",
              "type": "String",
              "code": "        return totalProgress;\n    }\n\n    public static Builder displayName(String displayName) {\n        return new Builder(displayName);\n    }\n"
            },
            {
              "step": 68,
              "variableName": "displayName",
              "startLine": 112,
              "startColumn": 28,
              "endLine": 112,
              "endColumn": 39,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/main/java/org/gradle/internal/operations/BuildOperationDescriptor.java",
              "type": "String",
              "code": "    }\n\n    public static Builder displayName(String displayName) {\n        return new Builder(displayName);\n    }\n\n    @Override"
            },
            {
              "step": 69,
              "variableName": "String displayName",
              "startLine": 138,
              "startColumn": 25,
              "endLine": 138,
              "endColumn": 43,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/main/java/org/gradle/internal/operations/BuildOperationDescriptor.java",
              "type": "String",
              "code": "        private BuildOperationMetadata metadata = BuildOperationMetadata.NONE;\n        private int totalProgress;\n\n        private Builder(String displayName) {\n            this.displayName = displayName;\n            this.name = displayName;\n        }"
            },
            {
              "step": 70,
              "variableName": "displayName",
              "startLine": 139,
              "startColumn": 32,
              "endLine": 139,
              "endColumn": 43,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/main/java/org/gradle/internal/operations/BuildOperationDescriptor.java",
              "type": "String",
              "code": "        private int totalProgress;\n\n        private Builder(String displayName) {\n            this.displayName = displayName;\n            this.name = displayName;\n        }\n"
            },
            {
              "step": 71,
              "variableName": "this",
              "startLine": 139,
              "startColumn": 13,
              "endLine": 139,
              "endColumn": 17,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/main/java/org/gradle/internal/operations/BuildOperationDescriptor.java",
              "type": "Builder [displayName] : String",
              "code": "        private int totalProgress;\n\n        private Builder(String displayName) {\n            this.displayName = displayName;\n            this.name = displayName;\n        }\n"
            },
            {
              "step": 72,
              "variableName": "new Builder(displayName)",
              "startLine": 112,
              "startColumn": 16,
              "endLine": 112,
              "endColumn": 40,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/main/java/org/gradle/internal/operations/BuildOperationDescriptor.java",
              "type": "Builder [displayName] : String",
              "code": "    }\n\n    public static Builder displayName(String displayName) {\n        return new Builder(displayName);\n    }\n\n    @Override"
            },
            {
              "step": 73,
              "variableName": "BuildOperationDescriptor.displayName(description)",
              "startLine": 67,
              "startColumn": 16,
              "endLine": 67,
              "endColumn": 65,
              "uri": "gradle-8.14.0/platforms/native/platform-native/src/main/java/org/gradle/nativeplatform/toolchain/internal/DefaultCommandLineToolInvocation.java",
              "type": "Builder [displayName] : String",
              "code": "\n    @Override\n    public BuildOperationDescriptor.Builder description() {\n        return BuildOperationDescriptor.displayName(description);\n    }\n}\n"
            },
            {
              "step": 74,
              "variableName": "invocation.description()",
              "startLine": 58,
              "startColumn": 48,
              "endLine": 58,
              "endColumn": 72,
              "uri": "gradle-8.14.0/platforms/native/platform-native/src/main/java/org/gradle/nativeplatform/toolchain/internal/DefaultCommandLineToolInvocationWorker.java",
              "type": "Builder [displayName] : String",
              "code": "\n    @Override\n    public void execute(CommandLineToolInvocation invocation, BuildOperationContext context) {\n        BuildOperationDescriptor description = invocation.description().build();\n        ExecAction toolExec = execActionFactory.newExecAction();\n\n        toolExec.executable(executable);"
            },
            {
              "step": 75,
              "variableName": "build",
              "startLine": 180,
              "startColumn": 41,
              "endLine": 180,
              "endColumn": 46,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/main/java/org/gradle/internal/operations/BuildOperationDescriptor.java",
              "type": "Builder [displayName] : String",
              "code": "            return this;\n        }\n\n        public BuildOperationDescriptor build() {\n            return build(null, null);\n        }\n"
            },
            {
              "step": 76,
              "variableName": "build(null, null)",
              "startLine": 181,
              "startColumn": 20,
              "endLine": 181,
              "endColumn": 37,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/main/java/org/gradle/internal/operations/BuildOperationDescriptor.java",
              "type": "Builder [displayName] : String",
              "code": "        }\n\n        public BuildOperationDescriptor build() {\n            return build(null, null);\n        }\n\n        @Nullable"
            },
            {
              "step": 77,
              "variableName": "build",
              "startLine": 189,
              "startColumn": 41,
              "endLine": 189,
              "endColumn": 46,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/main/java/org/gradle/internal/operations/BuildOperationDescriptor.java",
              "type": "Builder [displayName] : String",
              "code": "            return parent;\n        }\n\n        public BuildOperationDescriptor build(@Nullable OperationIdentifier id, @Nullable OperationIdentifier defaultParentId) {\n            return new BuildOperationDescriptor(id, parent == null ? defaultParentId : parent.getId(), name, displayName, progressDisplayName, details, metadata, totalProgress);\n        }\n    }"
            },
            {
              "step": 78,
              "variableName": "displayName",
              "startLine": 190,
              "startColumn": 110,
              "endLine": 190,
              "endColumn": 121,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/main/java/org/gradle/internal/operations/BuildOperationDescriptor.java",
              "type": "Builder [displayName] : String",
              "code": "        }\n\n        public BuildOperationDescriptor build(@Nullable OperationIdentifier id, @Nullable OperationIdentifier defaultParentId) {\n            return new BuildOperationDescriptor(id, parent == null ? defaultParentId : parent.getId(), name, displayName, progressDisplayName, details, metadata, totalProgress);\n        }\n    }\n}"
            },
            {
              "step": 79,
              "variableName": "displayName",
              "startLine": 190,
              "startColumn": 110,
              "endLine": 190,
              "endColumn": 121,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/main/java/org/gradle/internal/operations/BuildOperationDescriptor.java",
              "type": "String",
              "code": "        }\n\n        public BuildOperationDescriptor build(@Nullable OperationIdentifier id, @Nullable OperationIdentifier defaultParentId) {\n            return new BuildOperationDescriptor(id, parent == null ? defaultParentId : parent.getId(), name, displayName, progressDisplayName, details, metadata, totalProgress);\n        }\n    }\n}"
            },
            {
              "step": 80,
              "variableName": "String displayName",
              "startLine": 38,
              "startColumn": 9,
              "endLine": 38,
              "endColumn": 27,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/main/java/org/gradle/internal/operations/BuildOperationDescriptor.java",
              "type": "String",
              "code": "        @Nullable OperationIdentifier id,\n        @Nullable OperationIdentifier parentId,\n        String name,\n        String displayName,\n        @Nullable String progressDisplayName,\n        @Nullable Object details,\n        BuildOperationMetadata metadata,"
            },
            {
              "step": 81,
              "variableName": "displayName",
              "startLine": 47,
              "startColumn": 28,
              "endLine": 47,
              "endColumn": 39,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/main/java/org/gradle/internal/operations/BuildOperationDescriptor.java",
              "type": "String",
              "code": "        this.id = id;\n        this.parentId = parentId;\n        this.name = name;\n        this.displayName = displayName;\n        this.progressDisplayName = progressDisplayName;\n        this.details = details;\n        this.metadata = metadata;"
            },
            {
              "step": 82,
              "variableName": "this",
              "startLine": 47,
              "startColumn": 9,
              "endLine": 47,
              "endColumn": 13,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/main/java/org/gradle/internal/operations/BuildOperationDescriptor.java",
              "type": "BuildOperationDescriptor [displayName] : String",
              "code": "        this.id = id;\n        this.parentId = parentId;\n        this.name = name;\n        this.displayName = displayName;\n        this.progressDisplayName = progressDisplayName;\n        this.details = details;\n        this.metadata = metadata;"
            },
            {
              "step": 83,
              "variableName": "new BuildOperationDescriptor(id, parent == null ? defaultParentId : parent.getId(), name, displayName, progressDisplayName, details, metadata, totalProgress)",
              "startLine": 190,
              "startColumn": 20,
              "endLine": 190,
              "endColumn": 177,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/main/java/org/gradle/internal/operations/BuildOperationDescriptor.java",
              "type": "BuildOperationDescriptor [displayName] : String",
              "code": "        }\n\n        public BuildOperationDescriptor build(@Nullable OperationIdentifier id, @Nullable OperationIdentifier defaultParentId) {\n            return new BuildOperationDescriptor(id, parent == null ? defaultParentId : parent.getId(), name, displayName, progressDisplayName, details, metadata, totalProgress);\n        }\n    }\n}"
            },
            {
              "step": 84,
              "variableName": "build(null, null)",
              "startLine": 181,
              "startColumn": 20,
              "endLine": 181,
              "endColumn": 37,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/main/java/org/gradle/internal/operations/BuildOperationDescriptor.java",
              "type": "BuildOperationDescriptor [displayName] : String",
              "code": "        }\n\n        public BuildOperationDescriptor build() {\n            return build(null, null);\n        }\n\n        @Nullable"
            },
            {
              "step": 85,
              "variableName": "invocation.description().build()",
              "startLine": 58,
              "startColumn": 48,
              "endLine": 58,
              "endColumn": 80,
              "uri": "gradle-8.14.0/platforms/native/platform-native/src/main/java/org/gradle/nativeplatform/toolchain/internal/DefaultCommandLineToolInvocationWorker.java",
              "type": "BuildOperationDescriptor [displayName] : String",
              "code": "\n    @Override\n    public void execute(CommandLineToolInvocation invocation, BuildOperationContext context) {\n        BuildOperationDescriptor description = invocation.description().build();\n        ExecAction toolExec = execActionFactory.newExecAction();\n\n        toolExec.executable(executable);"
            },
            {
              "step": 86,
              "variableName": "description",
              "startLine": 88,
              "startColumn": 53,
              "endLine": 88,
              "endColumn": 64,
              "uri": "gradle-8.14.0/platforms/native/platform-native/src/main/java/org/gradle/nativeplatform/toolchain/internal/DefaultCommandLineToolInvocationWorker.java",
              "type": "BuildOperationDescriptor [displayName] : String",
              "code": "\n        try {\n            toolExec.execute();\n            invocation.getLogger().operationSuccess(description.getDisplayName(), combineOutput(stdOutput, errOutput));\n        } catch (ExecException e) {\n            invocation.getLogger().operationFailed(description.getDisplayName(), combineOutput(stdOutput, errOutput));\n            throw new CommandLineToolInvocationFailure(invocation, String.format(\"%s failed while %s.\", name, description.getDisplayName()));"
            },
            {
              "step": 87,
              "variableName": "getDisplayName",
              "startLine": 72,
              "startColumn": 19,
              "endLine": 72,
              "endColumn": 33,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/main/java/org/gradle/internal/operations/BuildOperationDescriptor.java",
              "type": "BuildOperationDescriptor [displayName] : String",
              "code": "     * operation, and should describe the operation whether currently running or not, eg \"Run test A\" rather than\n     * \"Running test A\".\n     */\n    public String getDisplayName() {\n        return displayName;\n    }\n"
            },
            {
              "step": 88,
              "variableName": "displayName",
              "startLine": 73,
              "startColumn": 16,
              "endLine": 73,
              "endColumn": 27,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/main/java/org/gradle/internal/operations/BuildOperationDescriptor.java",
              "type": "BuildOperationDescriptor [displayName] : String",
              "code": "     * \"Running test A\".\n     */\n    public String getDisplayName() {\n        return displayName;\n    }\n\n    /**"
            },
            {
              "step": 89,
              "variableName": "displayName",
              "startLine": 73,
              "startColumn": 16,
              "endLine": 73,
              "endColumn": 27,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/main/java/org/gradle/internal/operations/BuildOperationDescriptor.java",
              "type": "String",
              "code": "     * \"Running test A\".\n     */\n    public String getDisplayName() {\n        return displayName;\n    }\n\n    /**"
            },
            {
              "step": 90,
              "variableName": "description.getDisplayName()",
              "startLine": 88,
              "startColumn": 53,
              "endLine": 88,
              "endColumn": 81,
              "uri": "gradle-8.14.0/platforms/native/platform-native/src/main/java/org/gradle/nativeplatform/toolchain/internal/DefaultCommandLineToolInvocationWorker.java",
              "type": "String",
              "code": "\n        try {\n            toolExec.execute();\n            invocation.getLogger().operationSuccess(description.getDisplayName(), combineOutput(stdOutput, errOutput));\n        } catch (ExecException e) {\n            invocation.getLogger().operationFailed(description.getDisplayName(), combineOutput(stdOutput, errOutput));\n            throw new CommandLineToolInvocationFailure(invocation, String.format(\"%s failed while %s.\", name, description.getDisplayName()));"
            },
            {
              "step": 91,
              "variableName": "String description",
              "startLine": 67,
              "startColumn": 47,
              "endLine": 67,
              "endColumn": 65,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/internal/operations/logging/DefaultBuildOperationLogger.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public synchronized void operationSuccess(String description, String output) {\n        assert started;\n        logInBoth(LogLevel.DEBUG, description.concat(\" successful.\"));\n        maybeShowSuccess(output);"
            },
            {
              "step": 92,
              "variableName": "description",
              "startLine": 69,
              "startColumn": 35,
              "endLine": 69,
              "endColumn": 46,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/internal/operations/logging/DefaultBuildOperationLogger.java",
              "type": "String",
              "code": "    @Override\n    public synchronized void operationSuccess(String description, String output) {\n        assert started;\n        logInBoth(LogLevel.DEBUG, description.concat(\" successful.\"));\n        maybeShowSuccess(output);\n    }\n"
            },
            {
              "step": 93,
              "variableName": "description.concat(\" successful.\")",
              "startLine": 69,
              "startColumn": 35,
              "endLine": 69,
              "endColumn": 69,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/internal/operations/logging/DefaultBuildOperationLogger.java",
              "type": "String",
              "code": "    @Override\n    public synchronized void operationSuccess(String description, String output) {\n        assert started;\n        logInBoth(LogLevel.DEBUG, description.concat(\" successful.\"));\n        maybeShowSuccess(output);\n    }\n"
            },
            {
              "step": 94,
              "variableName": "String message",
              "startLine": 108,
              "startColumn": 47,
              "endLine": 108,
              "endColumn": 61,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/internal/operations/logging/DefaultBuildOperationLogger.java",
              "type": "String",
              "code": "        numberOfFailedOperationsSeen++;\n    }\n\n    private void logInBoth(LogLevel logLevel, String message) {\n        logger.log(logLevel, message);\n        logWriter.println(message);\n    }"
            },
            {
              "step": 95,
              "variableName": "message",
              "startLine": 110,
              "startColumn": 27,
              "endLine": 110,
              "endColumn": 34,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/internal/operations/logging/DefaultBuildOperationLogger.java",
              "type": "",
              "code": "\n    private void logInBoth(LogLevel logLevel, String message) {\n        logger.log(logLevel, message);\n        logWriter.println(message);\n    }\n\n    @Override"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "source",
              "startLine": 42,
              "startColumn": 27,
              "endLine": 42,
              "endColumn": 33,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/RegExpNameMapper.java",
              "type": "String",
              "code": "        if (matcher == null) {\n            matcher = pattern.matcher(source);\n        } else {\n            matcher.reset(source);\n        }\n        String result = source;\n        if (matcher.find()) {"
            },
            {
              "step": 1,
              "variableName": "result",
              "startLine": 48,
              "startColumn": 16,
              "endLine": 48,
              "endColumn": 22,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/RegExpNameMapper.java",
              "type": "String",
              "code": "        if (matcher.find()) {\n            result = matcher.replaceFirst(replacement);\n        }\n        return result;\n    }\n}\n"
            },
            {
              "step": 2,
              "variableName": "transformer.transform(value)",
              "startLine": 37,
              "startColumn": 31,
              "endLine": 37,
              "endColumn": 59,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/ChainingTransformer.java",
              "type": "String",
              "code": "    public T transform(T original) {\n        T value = original;\n        for (Transformer<T, T> transformer : transformers) {\n            value = type.cast(transformer.transform(value));\n        }\n        return value;\n    }"
            },
            {
              "step": 3,
              "variableName": "type.cast(transformer.transform(value))",
              "startLine": 37,
              "startColumn": 21,
              "endLine": 37,
              "endColumn": 60,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/ChainingTransformer.java",
              "type": "String",
              "code": "    public T transform(T original) {\n        T value = original;\n        for (Transformer<T, T> transformer : transformers) {\n            value = type.cast(transformer.transform(value));\n        }\n        return value;\n    }"
            },
            {
              "step": 4,
              "variableName": "value",
              "startLine": 39,
              "startColumn": 16,
              "endLine": 39,
              "endColumn": 21,
              "uri": "gradle-8.14.0/platforms/core-configuration/file-operations/src/main/java/org/gradle/api/internal/file/copy/ChainingTransformer.java",
              "type": "String",
              "code": "        for (Transformer<T, T> transformer : transformers) {\n            value = type.cast(transformer.transform(value));\n        }\n        return value;\n    }\n\n    public void add(Transformer<T, T> transformer) {"
            },
            {
              "step": 5,
              "variableName": "describer.transform(this)",
              "startLine": 163,
              "startColumn": 16,
              "endLine": 163,
              "endColumn": 41,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/repositories/DefaultMavenArtifactRepository.java",
              "type": "String",
              "code": "\n    @Override\n    public String getDisplayName() {\n        return describer.transform(this);\n    }\n\n    @Override"
            },
            {
              "step": 6,
              "variableName": "describable.getDisplayName()",
              "startLine": 313,
              "startColumn": 35,
              "endLine": 313,
              "endColumn": 63,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "String",
              "code": "        public String getDisplayName() {\n            synchronized (this) {\n                if (displayName == null) {\n                    displayName = describable.getDisplayName();\n                    if (capDisplayName != null || !(describable instanceof DisplayName)) {\n                        describable = null;\n                    }"
            },
            {
              "step": 7,
              "variableName": "displayName",
              "startLine": 318,
              "startColumn": 24,
              "endLine": 318,
              "endColumn": 35,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "String",
              "code": "                        describable = null;\n                    }\n                }\n                return displayName;\n            }\n        }\n    }"
            },
            {
              "step": 8,
              "variableName": "displayName.getDisplayName()",
              "startLine": 772,
              "startColumn": 73,
              "endLine": 772,
              "endColumn": 101,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/configurations/DefaultConfiguration.java",
              "type": "String",
              "code": "                try {\n                    results = resolver.resolveGraph(DefaultConfiguration.this);\n                } catch (Exception e) {\n                    throw exceptionMapper.mapFailure(e, \"dependencies\", displayName.getDisplayName());\n                }\n\n                // Make the new state visible in case a dependency resolution listener queries the result, which requires the new state"
            },
            {
              "step": 9,
              "variableName": "String contextDisplayName",
              "startLine": 68,
              "startColumn": 77,
              "endLine": 68,
              "endColumn": 102,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "String",
              "code": "        return mapFailure(failure, type, displayName);\n    }\n\n    public TypedResolveException mapFailure(Throwable failure, String type, String contextDisplayName) {\n        if (!(failure instanceof TypedResolveException)) {\n            return new TypedResolveException(\n                type,"
            },
            {
              "step": 10,
              "variableName": "contextDisplayName",
              "startLine": 72,
              "startColumn": 17,
              "endLine": 72,
              "endColumn": 35,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "String",
              "code": "        if (!(failure instanceof TypedResolveException)) {\n            return new TypedResolveException(\n                type,\n                contextDisplayName,\n                ImmutableList.of(mapRepositoryOverrideFailure(contextDisplayName, failure))\n            );\n        }"
            },
            {
              "step": 11,
              "variableName": "new TypedResolveException(...) : TypedResolveException",
              "startLine": 70,
              "startColumn": 20,
              "endLine": 74,
              "endColumn": 14,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "TypedResolveException",
              "code": "\n    public TypedResolveException mapFailure(Throwable failure, String type, String contextDisplayName) {\n        if (!(failure instanceof TypedResolveException)) {\n            return new TypedResolveException(\n                type,\n                contextDisplayName,\n                ImmutableList.of(mapRepositoryOverrideFailure(contextDisplayName, failure))"
            },
            {
              "step": 12,
              "variableName": "exceptionMapper.mapFailure(e, \"dependencies\", displayName.getDisplayName())",
              "startLine": 772,
              "startColumn": 27,
              "endLine": 772,
              "endColumn": 102,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/configurations/DefaultConfiguration.java",
              "type": "TypedResolveException",
              "code": "                try {\n                    results = resolver.resolveGraph(DefaultConfiguration.this);\n                } catch (Exception e) {\n                    throw exceptionMapper.mapFailure(e, \"dependencies\", displayName.getDisplayName());\n                }\n\n                // Make the new state visible in case a dependency resolution listener queries the result, which requires the new state"
            },
            {
              "step": 13,
              "variableName": "e",
              "startLine": 772,
              "startColumn": 54,
              "endLine": 772,
              "endColumn": 55,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/configurations/DefaultConfiguration.java",
              "type": "Exception",
              "code": "                try {\n                    results = resolver.resolveGraph(DefaultConfiguration.this);\n                } catch (Exception e) {\n                    throw exceptionMapper.mapFailure(e, \"dependencies\", displayName.getDisplayName());\n                }\n\n                // Make the new state visible in case a dependency resolution listener queries the result, which requires the new state"
            },
            {
              "step": 14,
              "variableName": "Throwable failure",
              "startLine": 68,
              "startColumn": 45,
              "endLine": 68,
              "endColumn": 62,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Throwable",
              "code": "        return mapFailure(failure, type, displayName);\n    }\n\n    public TypedResolveException mapFailure(Throwable failure, String type, String contextDisplayName) {\n        if (!(failure instanceof TypedResolveException)) {\n            return new TypedResolveException(\n                type,"
            },
            {
              "step": 15,
              "variableName": "failure",
              "startLine": 73,
              "startColumn": 83,
              "endLine": 73,
              "endColumn": 90,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Throwable",
              "code": "            return new TypedResolveException(\n                type,\n                contextDisplayName,\n                ImmutableList.of(mapRepositoryOverrideFailure(contextDisplayName, failure))\n            );\n        }\n"
            },
            {
              "step": 16,
              "variableName": "Throwable failure",
              "startLine": 94,
              "startColumn": 78,
              "endLine": 94,
              "endColumn": 95,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Throwable",
              "code": "\n    // TODO: We should handle this exception at the source instead of using instanceof to detect it after it is thrown.\n    //       We should try to avoid catching and analyzing runtime exceptions\n    public Throwable mapRepositoryOverrideFailure(String contextDisplayName, Throwable failure) {\n        if (!(failure instanceof ModuleVersionNotFoundException) || !settingsRepositoriesIgnored()) {\n            return failure;\n        }"
            },
            {
              "step": 17,
              "variableName": "failure",
              "startLine": 108,
              "startColumn": 35,
              "endLine": 108,
              "endColumn": 42,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Throwable",
              "code": "        return new TypedResolveException(\n            \"dependencies\",\n            contextDisplayName,\n            Collections.singleton(failure),\n            resolutions\n        );\n    }"
            },
            {
              "step": 18,
              "variableName": "Collections.singleton(failure)",
              "startLine": 108,
              "startColumn": 13,
              "endLine": 108,
              "endColumn": 43,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Set [<element>] : Throwable",
              "code": "        return new TypedResolveException(\n            \"dependencies\",\n            contextDisplayName,\n            Collections.singleton(failure),\n            resolutions\n        );\n    }"
            },
            {
              "step": 19,
              "variableName": "Collections.singleton(failure)",
              "startLine": 108,
              "startColumn": 13,
              "endLine": 108,
              "endColumn": 43,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Set",
              "code": "        return new TypedResolveException(\n            \"dependencies\",\n            contextDisplayName,\n            Collections.singleton(failure),\n            resolutions\n        );\n    }"
            },
            {
              "step": 20,
              "variableName": "Iterable<? extends Throwable> failures",
              "startLine": 42,
              "startColumn": 67,
              "endLine": 42,
              "endColumn": 105,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ivyservice/TypedResolveException.java",
              "type": "Set",
              "code": "    /**\n     * Creates a new instance with resolutions.\n     */\n    public TypedResolveException(String type, String displayName, Iterable<? extends Throwable> failures, List<String> resolutions) {\n        super(buildMessage(type, displayName), failures, false);\n        this.type = type;\n        this.resolutions = ImmutableList.copyOf(resolutions);"
            },
            {
              "step": 21,
              "variableName": "failures",
              "startLine": 43,
              "startColumn": 48,
              "endLine": 43,
              "endColumn": 56,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ivyservice/TypedResolveException.java",
              "type": "Set",
              "code": "     * Creates a new instance with resolutions.\n     */\n    public TypedResolveException(String type, String displayName, Iterable<? extends Throwable> failures, List<String> resolutions) {\n        super(buildMessage(type, displayName), failures, false);\n        this.type = type;\n        this.resolutions = ImmutableList.copyOf(resolutions);\n    }"
            },
            {
              "step": 22,
              "variableName": "Iterable<? extends Throwable> causes",
              "startLine": 77,
              "startColumn": 48,
              "endLine": 77,
              "endColumn": 84,
              "uri": "gradle-8.14.0/subprojects/core-api/src/main/java/org/gradle/api/artifacts/ResolveException.java",
              "type": "Set",
              "code": "     * @since 8.9\n     */\n    @Incubating\n    protected ResolveException(String message, Iterable<? extends Throwable> causes, @SuppressWarnings(\"unused\") boolean dummy) {\n        super(message, causes);\n    }\n}"
            },
            {
              "step": 23,
              "variableName": "causes",
              "startLine": 78,
              "startColumn": 24,
              "endLine": 78,
              "endColumn": 30,
              "uri": "gradle-8.14.0/subprojects/core-api/src/main/java/org/gradle/api/artifacts/ResolveException.java",
              "type": "Set",
              "code": "     */\n    @Incubating\n    protected ResolveException(String message, Iterable<? extends Throwable> causes, @SuppressWarnings(\"unused\") boolean dummy) {\n        super(message, causes);\n    }\n}\n"
            },
            {
              "step": 24,
              "variableName": "Iterable<? extends Throwable> causes",
              "startLine": 47,
              "startColumn": 55,
              "endLine": 47,
              "endColumn": 91,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "Set",
              "code": "        this.causes.addAll(Arrays.asList(causes));\n    }\n\n    public DefaultMultiCauseException(String message, Iterable<? extends Throwable> causes) {\n        super(message);\n        this.message = message;\n        initCauses(causes);"
            },
            {
              "step": 25,
              "variableName": "causes",
              "startLine": 50,
              "startColumn": 20,
              "endLine": 50,
              "endColumn": 26,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "Set",
              "code": "    public DefaultMultiCauseException(String message, Iterable<? extends Throwable> causes) {\n        super(message);\n        this.message = message;\n        initCauses(causes);\n    }\n\n    public DefaultMultiCauseException(Factory<String> messageFactory) {"
            },
            {
              "step": 26,
              "variableName": "Iterable<? extends Throwable> causes",
              "startLine": 112,
              "startColumn": 28,
              "endLine": 112,
              "endColumn": 64,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "Iterable",
              "code": "        return null;\n    }\n\n    public void initCauses(Iterable<? extends Throwable> causes) {\n        this.causes.clear();\n        for (Throwable cause : causes) {\n            this.causes.add(cause);"
            },
            {
              "step": 27,
              "variableName": "cause",
              "startLine": 115,
              "startColumn": 29,
              "endLine": 115,
              "endColumn": 34,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "Throwable",
              "code": "    public void initCauses(Iterable<? extends Throwable> causes) {\n        this.causes.clear();\n        for (Throwable cause : causes) {\n            this.causes.add(cause);\n        }\n    }\n"
            },
            {
              "step": 28,
              "variableName": "this.causes",
              "startLine": 115,
              "startColumn": 13,
              "endLine": 115,
              "endColumn": 24,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "CopyOnWriteArrayList [<element>] : Throwable",
              "code": "    public void initCauses(Iterable<? extends Throwable> causes) {\n        this.causes.clear();\n        for (Throwable cause : causes) {\n            this.causes.add(cause);\n        }\n    }\n"
            },
            {
              "step": 29,
              "variableName": "this",
              "startLine": 115,
              "startColumn": 13,
              "endLine": 115,
              "endColumn": 17,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "DefaultMultiCauseException [causes, <element>] : Throwable",
              "code": "    public void initCauses(Iterable<? extends Throwable> causes) {\n        this.causes.clear();\n        for (Throwable cause : causes) {\n            this.causes.add(cause);\n        }\n    }\n"
            },
            {
              "step": 30,
              "variableName": "projectConfigurationException",
              "startLine": 57,
              "startColumn": 17,
              "endLine": 57,
              "endColumn": 46,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/DefaultExceptionAnalyser.java",
              "type": "ProjectConfigurationException [causes, <element>] : Throwable",
              "code": "                }\n            }\n            if (!additionalFailures.isEmpty()) {\n                projectConfigurationException.initCauses(additionalFailures);\n                failures.add(transform(projectConfigurationException));\n            }\n        } else if (exception instanceof ServiceCreationException) {"
            },
            {
              "step": 31,
              "variableName": "projectConfigurationException",
              "startLine": 58,
              "startColumn": 40,
              "endLine": 58,
              "endColumn": 69,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/DefaultExceptionAnalyser.java",
              "type": "ProjectConfigurationException [causes, <element>] : Throwable",
              "code": "            }\n            if (!additionalFailures.isEmpty()) {\n                projectConfigurationException.initCauses(additionalFailures);\n                failures.add(transform(projectConfigurationException));\n            }\n        } else if (exception instanceof ServiceCreationException) {\n            failures.add(transform(new InitializationException(exception)));"
            },
            {
              "step": 32,
              "variableName": "transform(projectConfigurationException)",
              "startLine": 58,
              "startColumn": 30,
              "endLine": 58,
              "endColumn": 70,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/DefaultExceptionAnalyser.java",
              "type": "LocationAwareException",
              "code": "            }\n            if (!additionalFailures.isEmpty()) {\n                projectConfigurationException.initCauses(additionalFailures);\n                failures.add(transform(projectConfigurationException));\n            }\n        } else if (exception instanceof ServiceCreationException) {\n            failures.add(transform(new InitializationException(exception)));"
            },
            {
              "step": 33,
              "variableName": "failures",
              "startLine": 58,
              "startColumn": 17,
              "endLine": 58,
              "endColumn": 25,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/DefaultExceptionAnalyser.java",
              "type": "Collection [<element>] : LocationAwareException",
              "code": "            }\n            if (!additionalFailures.isEmpty()) {\n                projectConfigurationException.initCauses(additionalFailures);\n                failures.add(transform(projectConfigurationException));\n            }\n        } else if (exception instanceof ServiceCreationException) {\n            failures.add(transform(new InitializationException(exception)));"
            },
            {
              "step": 34,
              "variableName": "result",
              "startLine": 53,
              "startColumn": 54,
              "endLine": 53,
              "endColumn": 60,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/MultipleBuildFailuresExceptionAnalyser.java",
              "type": "ArrayList [<element>] : LocationAwareException",
              "code": "        for (Throwable failure : failures) {\n            if (failure instanceof MultipleBuildFailures) {\n                for (Throwable cause : ((MultipleBuildFailures) failure).getCauses()) {\n                    collector.collectFailures(cause, result);\n                }\n            } else {\n                collector.collectFailures(failure, result);"
            },
            {
              "step": 35,
              "variableName": "result",
              "startLine": 60,
              "startColumn": 39,
              "endLine": 60,
              "endColumn": 45,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/MultipleBuildFailuresExceptionAnalyser.java",
              "type": "ArrayList [<element>] : LocationAwareException",
              "code": "            }\n        }\n        if (result.size() == 1 && result.get(0) instanceof RuntimeException) {\n            return (RuntimeException) result.get(0);\n        } else {\n            return new MultipleBuildFailures(result);\n        }"
            },
            {
              "step": 36,
              "variableName": "result.get(0)",
              "startLine": 60,
              "startColumn": 39,
              "endLine": 60,
              "endColumn": 52,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/MultipleBuildFailuresExceptionAnalyser.java",
              "type": "LocationAwareException",
              "code": "            }\n        }\n        if (result.size() == 1 && result.get(0) instanceof RuntimeException) {\n            return (RuntimeException) result.get(0);\n        } else {\n            return new MultipleBuildFailures(result);\n        }"
            },
            {
              "step": 37,
              "variableName": "(RuntimeException) result.get(0)",
              "startLine": 60,
              "startColumn": 20,
              "endLine": 60,
              "endColumn": 52,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/MultipleBuildFailuresExceptionAnalyser.java",
              "type": "LocationAwareException",
              "code": "            }\n        }\n        if (result.size() == 1 && result.get(0) instanceof RuntimeException) {\n            return (RuntimeException) result.get(0);\n        } else {\n            return new MultipleBuildFailures(result);\n        }"
            },
            {
              "step": 38,
              "variableName": "exceptionAnalyser.transform(finishFailures)",
              "startLine": 72,
              "startColumn": 16,
              "endLine": 72,
              "endColumn": 59,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/internal/buildtree/DefaultBuildTreeFinishExecutor.java",
              "type": "LocationAwareException",
              "code": "            finishFailures.addAll(result.getFailures());\n        });\n\n        return exceptionAnalyser.transform(finishFailures);\n    }\n}\n"
            },
            {
              "step": 39,
              "variableName": "delegate.finishBuildTree(failures)",
              "startLine": 46,
              "startColumn": 28,
              "endLine": 46,
              "endColumn": 62,
              "uri": "gradle-8.14.0/subprojects/composite-builds/src/main/java/org/gradle/composite/internal/OperationFiringBuildTreeFinishExecutor.java",
              "type": "LocationAwareException",
              "code": "            @Override\n            public RuntimeException call(BuildOperationContext context) {\n                try {\n                    return delegate.finishBuildTree(failures);\n                } finally {\n                    context.setResult(RESULT);\n                }"
            },
            {
              "step": 40,
              "variableName": "buildOperation.call(context)",
              "startLine": 239,
              "startColumn": 21,
              "endLine": 239,
              "endColumn": 49,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/testFixtures/java/org/gradle/internal/operations/TestBuildOperationRunner.java",
              "type": "LocationAwareException",
              "code": "            TestBuildOperationContext context = new TestBuildOperationContext(record);\n            T t;\n            try {\n                t = buildOperation.call(context);\n            } catch (Throwable failure) {\n                if (record.failure == null) {\n                    record.failure = failure;"
            },
            {
              "step": 41,
              "variableName": "t",
              "startLine": 246,
              "startColumn": 20,
              "endLine": 246,
              "endColumn": 21,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/testFixtures/java/org/gradle/internal/operations/TestBuildOperationRunner.java",
              "type": "LocationAwareException",
              "code": "                }\n                throw throwAsUncheckedException(failure);\n            }\n            return t;\n        }\n\n        private <O extends BuildOperation> void execute(O buildOperation, BuildOperationWorker<O> worker) {"
            },
            {
              "step": 42,
              "variableName": "log.call(buildOperation)",
              "startLine": 51,
              "startColumn": 16,
              "endLine": 51,
              "endColumn": 40,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/testFixtures/java/org/gradle/internal/operations/TestBuildOperationRunner.java",
              "type": "LocationAwareException",
              "code": "\n    @Override\n    public <T> T call(CallableBuildOperation<T> buildOperation) {\n        return log.call(buildOperation);\n    }\n\n    @Override"
            },
            {
              "step": 43,
              "variableName": "ca",
              "startLine": 115,
              "startColumn": 5,
              "endLine": 121,
              "endColumn": 7,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/configurationcache/ConfigurationCacheBuildOperations.kt",
              "type": "LocationAwareException",
              "code": "\ninternal\nfun <T : Any> BuildOperationRunner.withModelLoadOperation(block: () -> T): T =\n    call(object : CallableBuildOperation<T> {\n        override fun description(): BuildOperationDescriptor.Builder = BuildOperationDescriptor\n            .displayName(\"Load model from configuration cache\")\n            .progressDisplayName(\"Loading model from configuration cache\")"
            },
            {
              "step": 44,
              "variableName": "ca",
              "startLine": 115,
              "startColumn": 5,
              "endLine": 121,
              "endColumn": 7,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/configurationcache/ConfigurationCacheBuildOperations.kt",
              "type": "LocationAwareException",
              "code": "\ninternal\nfun <T : Any> BuildOperationRunner.withModelLoadOperation(block: () -> T): T =\n    call(object : CallableBuildOperation<T> {\n        override fun description(): BuildOperationDescriptor.Builder = BuildOperationDescriptor\n            .displayName(\"Load model from configuration cache\")\n            .progressDisplayName(\"Loading model from configuration cache\")"
            },
            {
              "step": 45,
              "variableName": "b",
              "startLine": 635,
              "startColumn": 9,
              "endLine": 641,
              "endColumn": 10,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "        // No need to record the `ClassLoaderScope` tree when loading\n        scopeRegistryListener.dispose()\n\n        buildOperationRunner.withModelLoadOperation {\n            val storeLoadResult = entryStore.useForStateLoad(StateType.Model) { stateFile: ConfigurationCacheStateFile ->\n                cacheIO.readModelFrom(stateFile)\n            }"
            },
            {
              "step": 46,
              "variableName": "block()",
              "startLine": 668,
              "startColumn": 22,
              "endLine": 668,
              "endColumn": 29,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "    private\n    inline fun <T> runAtConfigurationTime(block: () -> T): T {\n        prepareConfigurationTimeBarrier()\n        val result = block()\n        crossConfigurationTimeBarrier()\n        return result\n    }"
            },
            {
              "step": 47,
              "variableName": "result",
              "startLine": 670,
              "startColumn": 16,
              "endLine": 670,
              "endColumn": 22,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "        prepareConfigurationTimeBarrier()\n        val result = block()\n        crossConfigurationTimeBarrier()\n        return result\n    }\n\n    private"
            },
            {
              "step": 48,
              "variableName": "runAtConfigurationTime(...) : LocationAwareException",
              "startLine": 631,
              "startColumn": 28,
              "endLine": 642,
              "endColumn": 6,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "    data class LoadResultMetadata(val originInvocationId: String? = null)\n\n    private\n    fun loadModel(): Any = runAtConfigurationTime {\n        // No need to record the `ClassLoaderScope` tree when loading\n        scopeRegistryListener.dispose()\n"
            },
            {
              "step": 49,
              "variableName": "loadModel()",
              "startLine": 268,
              "startColumn": 20,
              "endLine": 268,
              "endColumn": 31,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "    override fun <T : Any> loadOrCreateModel(creator: () -> T): T {\n        if (isLoaded) {\n            runLoadedSideEffects()\n            return loadModel().uncheckedCast()\n        }\n\n        return runWorkThatContributesToCacheEntry {"
            },
            {
              "step": 50,
              "variableName": "Any",
              "startLine": 22,
              "startColumn": 15,
              "endLine": 22,
              "endColumn": 18,
              "uri": "gradle-8.14.0/platforms/core-configuration/stdlib-kotlin-extensions/src/main/kotlin/org/gradle/internal/extensions/stdlib/CastExtensions.kt",
              "type": "Object",
              "code": "import org.gradle.internal.Cast\n\n\nfun <T : Any> Any.uncheckedCast(): T =\n    Cast.uncheckedNonnullCast(this)\n"
            },
            {
              "step": 51,
              "variableName": "this",
              "startLine": 23,
              "startColumn": 31,
              "endLine": 23,
              "endColumn": 35,
              "uri": "gradle-8.14.0/platforms/core-configuration/stdlib-kotlin-extensions/src/main/kotlin/org/gradle/internal/extensions/stdlib/CastExtensions.kt",
              "type": "Object",
              "code": "\n\nfun <T : Any> Any.uncheckedCast(): T =\n    Cast.uncheckedNonnullCast(this)\n"
            },
            {
              "step": 52,
              "variableName": "Object object",
              "startLine": 76,
              "startColumn": 46,
              "endLine": 76,
              "endColumn": 59,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/Cast.java",
              "type": "Object",
              "code": "    }\n\n    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})\n    public static <T> T uncheckedNonnullCast(Object object) {\n        return (T) object;\n    }\n}"
            },
            {
              "step": 53,
              "variableName": "(T) object",
              "startLine": 77,
              "startColumn": 16,
              "endLine": 77,
              "endColumn": 26,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/Cast.java",
              "type": "Object",
              "code": "\n    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})\n    public static <T> T uncheckedNonnullCast(Object object) {\n        return (T) object;\n    }\n}\n"
            },
            {
              "step": 54,
              "variableName": "Cast.uncheckedNonnullCast(collectionType)",
              "startLine": 223,
              "startColumn": 16,
              "endLine": 223,
              "endColumn": 57,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/api/internal/provider/AbstractCollectionProperty.java",
              "type": "Class",
              "code": "    @Override\n    @Nonnull\n    public Class<C> getType() {\n        return Cast.uncheckedNonnullCast(collectionType);\n    }\n\n    @Override"
            },
            {
              "step": 55,
              "variableName": "provider.getType()",
              "startLine": 41,
              "startColumn": 35,
              "endLine": 41,
              "endColumn": 53,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/api/internal/provider/OrElseFixedValueProvider.java",
              "type": "Class",
              "code": "    @Nullable\n    @Override\n    public Class<T> getType() {\n        return Cast.uncheckedCast(provider.getType());\n    }\n\n    @Override"
            },
            {
              "step": 56,
              "variableName": "@Nullable Object object",
              "startLine": 71,
              "startColumn": 39,
              "endLine": 71,
              "endColumn": 62,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/Cast.java",
              "type": "Object",
              "code": "\n    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})\n    @Nullable\n    public static <T> T uncheckedCast(@Nullable Object object) {\n        return (T) object;\n    }\n"
            },
            {
              "step": 57,
              "variableName": "(T) object",
              "startLine": 72,
              "startColumn": 16,
              "endLine": 72,
              "endColumn": 26,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/Cast.java",
              "type": "Object",
              "code": "    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})\n    @Nullable\n    public static <T> T uncheckedCast(@Nullable Object object) {\n        return (T) object;\n    }\n\n    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})"
            },
            {
              "step": 58,
              "variableName": "Cast.uncheckedCast(sanitizer.sanitize(t))",
              "startLine": 41,
              "startColumn": 15,
              "endLine": 41,
              "endColumn": 56,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/api/internal/provider/TypeSanitizingTransformer.java",
              "type": "Object",
              "code": "\n    @Override\n    public T transform(T t) {\n        T v = Cast.uncheckedCast(sanitizer.sanitize(t));\n        if (targetType.isInstance(v)) {\n            return v;\n        }"
            },
            {
              "step": 59,
              "variableName": "v",
              "startLine": 43,
              "startColumn": 20,
              "endLine": 43,
              "endColumn": 21,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/api/internal/provider/TypeSanitizingTransformer.java",
              "type": "Object",
              "code": "    public T transform(T t) {\n        T v = Cast.uncheckedCast(sanitizer.sanitize(t));\n        if (targetType.isInstance(v)) {\n            return v;\n        }\n        throw new IllegalArgumentException(String.format(\"Cannot get the value of %s of type %s as the provider associated with this property returned a value of type %s.\", owner.getDisplayName(), targetType.getName(), v.getClass().getName()));\n    }"
            },
            {
              "step": 60,
              "variableName": "describer.transform(this)",
              "startLine": 163,
              "startColumn": 16,
              "endLine": 163,
              "endColumn": 41,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/repositories/DefaultMavenArtifactRepository.java",
              "type": "String",
              "code": "\n    @Override\n    public String getDisplayName() {\n        return describer.transform(this);\n    }\n\n    @Override"
            },
            {
              "step": 61,
              "variableName": "describable.getDisplayName()",
              "startLine": 313,
              "startColumn": 35,
              "endLine": 313,
              "endColumn": 63,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "String",
              "code": "        public String getDisplayName() {\n            synchronized (this) {\n                if (displayName == null) {\n                    displayName = describable.getDisplayName();\n                    if (capDisplayName != null || !(describable instanceof DisplayName)) {\n                        describable = null;\n                    }"
            },
            {
              "step": 62,
              "variableName": "displayName",
              "startLine": 318,
              "startColumn": 24,
              "endLine": 318,
              "endColumn": 35,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "String",
              "code": "                        describable = null;\n                    }\n                }\n                return displayName;\n            }\n        }\n    }"
            },
            {
              "step": 63,
              "variableName": "displayName().getDisplayName()",
              "startLine": 50,
              "startColumn": 16,
              "endLine": 50,
              "endColumn": 46,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/configurations/ResolutionHost.java",
              "type": "String",
              "code": "    DisplayName displayName();\n\n    default String getDisplayName() {\n        return displayName().getDisplayName();\n    }\n\n    default DisplayName displayName(String type) {"
            },
            {
              "step": 64,
              "variableName": "resolutionHost.getDisplayName()",
              "startLine": 75,
              "startColumn": 60,
              "endLine": 75,
              "endColumn": 91,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ivyservice/resolveengine/artifact/ResolvedArtifactSetResolver.java",
              "type": "String",
              "code": "\n            @Override\n            public BuildOperationDescriptor.Builder description() {\n                String displayName = \"Resolve files of \" + resolutionHost.getDisplayName();\n                return BuildOperationDescriptor\n                    .displayName(displayName)\n                    .progressDisplayName(displayName)"
            },
            {
              "step": 65,
              "variableName": "\"Resolve files of \" + resolutionHost.getDisplayName()",
              "startLine": 75,
              "startColumn": 38,
              "endLine": 75,
              "endColumn": 91,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ivyservice/resolveengine/artifact/ResolvedArtifactSetResolver.java",
              "type": "String",
              "code": "\n            @Override\n            public BuildOperationDescriptor.Builder description() {\n                String displayName = \"Resolve files of \" + resolutionHost.getDisplayName();\n                return BuildOperationDescriptor\n                    .displayName(displayName)\n                    .progressDisplayName(displayName)"
            },
            {
              "step": 66,
              "variableName": "displayName",
              "startLine": 77,
              "startColumn": 34,
              "endLine": 77,
              "endColumn": 45,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ivyservice/resolveengine/artifact/ResolvedArtifactSetResolver.java",
              "type": "String",
              "code": "            public BuildOperationDescriptor.Builder description() {\n                String displayName = \"Resolve files of \" + resolutionHost.getDisplayName();\n                return BuildOperationDescriptor\n                    .displayName(displayName)\n                    .progressDisplayName(displayName)\n                    .details(new ResolveArtifactsBuildOperationType.Details() {\n                        @Override"
            },
            {
              "step": 67,
              "variableName": "String displayName",
              "startLine": 111,
              "startColumn": 39,
              "endLine": 111,
              "endColumn": 57,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/main/java/org/gradle/internal/operations/BuildOperationDescriptor.java",
              "type": "String",
              "code": "        return totalProgress;\n    }\n\n    public static Builder displayName(String displayName) {\n        return new Builder(displayName);\n    }\n"
            },
            {
              "step": 68,
              "variableName": "displayName",
              "startLine": 112,
              "startColumn": 28,
              "endLine": 112,
              "endColumn": 39,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/main/java/org/gradle/internal/operations/BuildOperationDescriptor.java",
              "type": "String",
              "code": "    }\n\n    public static Builder displayName(String displayName) {\n        return new Builder(displayName);\n    }\n\n    @Override"
            },
            {
              "step": 69,
              "variableName": "String displayName",
              "startLine": 138,
              "startColumn": 25,
              "endLine": 138,
              "endColumn": 43,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/main/java/org/gradle/internal/operations/BuildOperationDescriptor.java",
              "type": "String",
              "code": "        private BuildOperationMetadata metadata = BuildOperationMetadata.NONE;\n        private int totalProgress;\n\n        private Builder(String displayName) {\n            this.displayName = displayName;\n            this.name = displayName;\n        }"
            },
            {
              "step": 70,
              "variableName": "displayName",
              "startLine": 139,
              "startColumn": 32,
              "endLine": 139,
              "endColumn": 43,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/main/java/org/gradle/internal/operations/BuildOperationDescriptor.java",
              "type": "String",
              "code": "        private int totalProgress;\n\n        private Builder(String displayName) {\n            this.displayName = displayName;\n            this.name = displayName;\n        }\n"
            },
            {
              "step": 71,
              "variableName": "this",
              "startLine": 139,
              "startColumn": 13,
              "endLine": 139,
              "endColumn": 17,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/main/java/org/gradle/internal/operations/BuildOperationDescriptor.java",
              "type": "Builder [displayName] : String",
              "code": "        private int totalProgress;\n\n        private Builder(String displayName) {\n            this.displayName = displayName;\n            this.name = displayName;\n        }\n"
            },
            {
              "step": 72,
              "variableName": "new Builder(displayName)",
              "startLine": 112,
              "startColumn": 16,
              "endLine": 112,
              "endColumn": 40,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/main/java/org/gradle/internal/operations/BuildOperationDescriptor.java",
              "type": "Builder [displayName] : String",
              "code": "    }\n\n    public static Builder displayName(String displayName) {\n        return new Builder(displayName);\n    }\n\n    @Override"
            },
            {
              "step": 73,
              "variableName": "BuildOperationDescriptor.displayName(description)",
              "startLine": 67,
              "startColumn": 16,
              "endLine": 67,
              "endColumn": 65,
              "uri": "gradle-8.14.0/platforms/native/platform-native/src/main/java/org/gradle/nativeplatform/toolchain/internal/DefaultCommandLineToolInvocation.java",
              "type": "Builder [displayName] : String",
              "code": "\n    @Override\n    public BuildOperationDescriptor.Builder description() {\n        return BuildOperationDescriptor.displayName(description);\n    }\n}\n"
            },
            {
              "step": 74,
              "variableName": "invocation.description()",
              "startLine": 58,
              "startColumn": 48,
              "endLine": 58,
              "endColumn": 72,
              "uri": "gradle-8.14.0/platforms/native/platform-native/src/main/java/org/gradle/nativeplatform/toolchain/internal/DefaultCommandLineToolInvocationWorker.java",
              "type": "Builder [displayName] : String",
              "code": "\n    @Override\n    public void execute(CommandLineToolInvocation invocation, BuildOperationContext context) {\n        BuildOperationDescriptor description = invocation.description().build();\n        ExecAction toolExec = execActionFactory.newExecAction();\n\n        toolExec.executable(executable);"
            },
            {
              "step": 75,
              "variableName": "build",
              "startLine": 180,
              "startColumn": 41,
              "endLine": 180,
              "endColumn": 46,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/main/java/org/gradle/internal/operations/BuildOperationDescriptor.java",
              "type": "Builder [displayName] : String",
              "code": "            return this;\n        }\n\n        public BuildOperationDescriptor build() {\n            return build(null, null);\n        }\n"
            },
            {
              "step": 76,
              "variableName": "build(null, null)",
              "startLine": 181,
              "startColumn": 20,
              "endLine": 181,
              "endColumn": 37,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/main/java/org/gradle/internal/operations/BuildOperationDescriptor.java",
              "type": "Builder [displayName] : String",
              "code": "        }\n\n        public BuildOperationDescriptor build() {\n            return build(null, null);\n        }\n\n        @Nullable"
            },
            {
              "step": 77,
              "variableName": "build",
              "startLine": 189,
              "startColumn": 41,
              "endLine": 189,
              "endColumn": 46,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/main/java/org/gradle/internal/operations/BuildOperationDescriptor.java",
              "type": "Builder [displayName] : String",
              "code": "            return parent;\n        }\n\n        public BuildOperationDescriptor build(@Nullable OperationIdentifier id, @Nullable OperationIdentifier defaultParentId) {\n            return new BuildOperationDescriptor(id, parent == null ? defaultParentId : parent.getId(), name, displayName, progressDisplayName, details, metadata, totalProgress);\n        }\n    }"
            },
            {
              "step": 78,
              "variableName": "displayName",
              "startLine": 190,
              "startColumn": 110,
              "endLine": 190,
              "endColumn": 121,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/main/java/org/gradle/internal/operations/BuildOperationDescriptor.java",
              "type": "Builder [displayName] : String",
              "code": "        }\n\n        public BuildOperationDescriptor build(@Nullable OperationIdentifier id, @Nullable OperationIdentifier defaultParentId) {\n            return new BuildOperationDescriptor(id, parent == null ? defaultParentId : parent.getId(), name, displayName, progressDisplayName, details, metadata, totalProgress);\n        }\n    }\n}"
            },
            {
              "step": 79,
              "variableName": "displayName",
              "startLine": 190,
              "startColumn": 110,
              "endLine": 190,
              "endColumn": 121,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/main/java/org/gradle/internal/operations/BuildOperationDescriptor.java",
              "type": "String",
              "code": "        }\n\n        public BuildOperationDescriptor build(@Nullable OperationIdentifier id, @Nullable OperationIdentifier defaultParentId) {\n            return new BuildOperationDescriptor(id, parent == null ? defaultParentId : parent.getId(), name, displayName, progressDisplayName, details, metadata, totalProgress);\n        }\n    }\n}"
            },
            {
              "step": 80,
              "variableName": "String displayName",
              "startLine": 38,
              "startColumn": 9,
              "endLine": 38,
              "endColumn": 27,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/main/java/org/gradle/internal/operations/BuildOperationDescriptor.java",
              "type": "String",
              "code": "        @Nullable OperationIdentifier id,\n        @Nullable OperationIdentifier parentId,\n        String name,\n        String displayName,\n        @Nullable String progressDisplayName,\n        @Nullable Object details,\n        BuildOperationMetadata metadata,"
            },
            {
              "step": 81,
              "variableName": "displayName",
              "startLine": 47,
              "startColumn": 28,
              "endLine": 47,
              "endColumn": 39,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/main/java/org/gradle/internal/operations/BuildOperationDescriptor.java",
              "type": "String",
              "code": "        this.id = id;\n        this.parentId = parentId;\n        this.name = name;\n        this.displayName = displayName;\n        this.progressDisplayName = progressDisplayName;\n        this.details = details;\n        this.metadata = metadata;"
            },
            {
              "step": 82,
              "variableName": "this",
              "startLine": 47,
              "startColumn": 9,
              "endLine": 47,
              "endColumn": 13,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/main/java/org/gradle/internal/operations/BuildOperationDescriptor.java",
              "type": "BuildOperationDescriptor [displayName] : String",
              "code": "        this.id = id;\n        this.parentId = parentId;\n        this.name = name;\n        this.displayName = displayName;\n        this.progressDisplayName = progressDisplayName;\n        this.details = details;\n        this.metadata = metadata;"
            },
            {
              "step": 83,
              "variableName": "new BuildOperationDescriptor(id, parent == null ? defaultParentId : parent.getId(), name, displayName, progressDisplayName, details, metadata, totalProgress)",
              "startLine": 190,
              "startColumn": 20,
              "endLine": 190,
              "endColumn": 177,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/main/java/org/gradle/internal/operations/BuildOperationDescriptor.java",
              "type": "BuildOperationDescriptor [displayName] : String",
              "code": "        }\n\n        public BuildOperationDescriptor build(@Nullable OperationIdentifier id, @Nullable OperationIdentifier defaultParentId) {\n            return new BuildOperationDescriptor(id, parent == null ? defaultParentId : parent.getId(), name, displayName, progressDisplayName, details, metadata, totalProgress);\n        }\n    }\n}"
            },
            {
              "step": 84,
              "variableName": "build(null, null)",
              "startLine": 181,
              "startColumn": 20,
              "endLine": 181,
              "endColumn": 37,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/main/java/org/gradle/internal/operations/BuildOperationDescriptor.java",
              "type": "BuildOperationDescriptor [displayName] : String",
              "code": "        }\n\n        public BuildOperationDescriptor build() {\n            return build(null, null);\n        }\n\n        @Nullable"
            },
            {
              "step": 85,
              "variableName": "invocation.description().build()",
              "startLine": 58,
              "startColumn": 48,
              "endLine": 58,
              "endColumn": 80,
              "uri": "gradle-8.14.0/platforms/native/platform-native/src/main/java/org/gradle/nativeplatform/toolchain/internal/DefaultCommandLineToolInvocationWorker.java",
              "type": "BuildOperationDescriptor [displayName] : String",
              "code": "\n    @Override\n    public void execute(CommandLineToolInvocation invocation, BuildOperationContext context) {\n        BuildOperationDescriptor description = invocation.description().build();\n        ExecAction toolExec = execActionFactory.newExecAction();\n\n        toolExec.executable(executable);"
            },
            {
              "step": 86,
              "variableName": "description",
              "startLine": 88,
              "startColumn": 53,
              "endLine": 88,
              "endColumn": 64,
              "uri": "gradle-8.14.0/platforms/native/platform-native/src/main/java/org/gradle/nativeplatform/toolchain/internal/DefaultCommandLineToolInvocationWorker.java",
              "type": "BuildOperationDescriptor [displayName] : String",
              "code": "\n        try {\n            toolExec.execute();\n            invocation.getLogger().operationSuccess(description.getDisplayName(), combineOutput(stdOutput, errOutput));\n        } catch (ExecException e) {\n            invocation.getLogger().operationFailed(description.getDisplayName(), combineOutput(stdOutput, errOutput));\n            throw new CommandLineToolInvocationFailure(invocation, String.format(\"%s failed while %s.\", name, description.getDisplayName()));"
            },
            {
              "step": 87,
              "variableName": "getDisplayName",
              "startLine": 72,
              "startColumn": 19,
              "endLine": 72,
              "endColumn": 33,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/main/java/org/gradle/internal/operations/BuildOperationDescriptor.java",
              "type": "BuildOperationDescriptor [displayName] : String",
              "code": "     * operation, and should describe the operation whether currently running or not, eg \"Run test A\" rather than\n     * \"Running test A\".\n     */\n    public String getDisplayName() {\n        return displayName;\n    }\n"
            },
            {
              "step": 88,
              "variableName": "displayName",
              "startLine": 73,
              "startColumn": 16,
              "endLine": 73,
              "endColumn": 27,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/main/java/org/gradle/internal/operations/BuildOperationDescriptor.java",
              "type": "BuildOperationDescriptor [displayName] : String",
              "code": "     * \"Running test A\".\n     */\n    public String getDisplayName() {\n        return displayName;\n    }\n\n    /**"
            },
            {
              "step": 89,
              "variableName": "displayName",
              "startLine": 73,
              "startColumn": 16,
              "endLine": 73,
              "endColumn": 27,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/main/java/org/gradle/internal/operations/BuildOperationDescriptor.java",
              "type": "String",
              "code": "     * \"Running test A\".\n     */\n    public String getDisplayName() {\n        return displayName;\n    }\n\n    /**"
            },
            {
              "step": 90,
              "variableName": "description.getDisplayName()",
              "startLine": 88,
              "startColumn": 53,
              "endLine": 88,
              "endColumn": 81,
              "uri": "gradle-8.14.0/platforms/native/platform-native/src/main/java/org/gradle/nativeplatform/toolchain/internal/DefaultCommandLineToolInvocationWorker.java",
              "type": "String",
              "code": "\n        try {\n            toolExec.execute();\n            invocation.getLogger().operationSuccess(description.getDisplayName(), combineOutput(stdOutput, errOutput));\n        } catch (ExecException e) {\n            invocation.getLogger().operationFailed(description.getDisplayName(), combineOutput(stdOutput, errOutput));\n            throw new CommandLineToolInvocationFailure(invocation, String.format(\"%s failed while %s.\", name, description.getDisplayName()));"
            },
            {
              "step": 91,
              "variableName": "String description",
              "startLine": 67,
              "startColumn": 47,
              "endLine": 67,
              "endColumn": 65,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/internal/operations/logging/DefaultBuildOperationLogger.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public synchronized void operationSuccess(String description, String output) {\n        assert started;\n        logInBoth(LogLevel.DEBUG, description.concat(\" successful.\"));\n        maybeShowSuccess(output);"
            },
            {
              "step": 92,
              "variableName": "description",
              "startLine": 69,
              "startColumn": 35,
              "endLine": 69,
              "endColumn": 46,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/internal/operations/logging/DefaultBuildOperationLogger.java",
              "type": "String",
              "code": "    @Override\n    public synchronized void operationSuccess(String description, String output) {\n        assert started;\n        logInBoth(LogLevel.DEBUG, description.concat(\" successful.\"));\n        maybeShowSuccess(output);\n    }\n"
            },
            {
              "step": 93,
              "variableName": "description.concat(\" successful.\")",
              "startLine": 69,
              "startColumn": 35,
              "endLine": 69,
              "endColumn": 69,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/internal/operations/logging/DefaultBuildOperationLogger.java",
              "type": "String",
              "code": "    @Override\n    public synchronized void operationSuccess(String description, String output) {\n        assert started;\n        logInBoth(LogLevel.DEBUG, description.concat(\" successful.\"));\n        maybeShowSuccess(output);\n    }\n"
            },
            {
              "step": 94,
              "variableName": "String message",
              "startLine": 108,
              "startColumn": 47,
              "endLine": 108,
              "endColumn": 61,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/internal/operations/logging/DefaultBuildOperationLogger.java",
              "type": "String",
              "code": "        numberOfFailedOperationsSeen++;\n    }\n\n    private void logInBoth(LogLevel logLevel, String message) {\n        logger.log(logLevel, message);\n        logWriter.println(message);\n    }"
            },
            {
              "step": 95,
              "variableName": "message",
              "startLine": 110,
              "startColumn": 27,
              "endLine": 110,
              "endColumn": 34,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/internal/operations/logging/DefaultBuildOperationLogger.java",
              "type": "",
              "code": "\n    private void logInBoth(LogLevel logLevel, String message) {\n        logger.log(logLevel, message);\n        logWriter.println(message);\n    }\n\n    @Override"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "src",
              "startLine": 115,
              "startColumn": 13,
              "endLine": 115,
              "endColumn": 16,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "Object",
              "code": "    }\n\n    private static void appendDisplayName(Object src, StringBuilder stringBuilder) {\n        if (src instanceof Describable) {\n            Describable describable = (Describable) src;\n            stringBuilder.append(describable.getDisplayName());\n        } else {"
            },
            {
              "step": 1,
              "variableName": "src",
              "startLine": 119,
              "startColumn": 34,
              "endLine": 119,
              "endColumn": 37,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "Object",
              "code": "            Describable describable = (Describable) src;\n            stringBuilder.append(describable.getDisplayName());\n        } else {\n            stringBuilder.append(src.toString());\n        }\n    }\n"
            },
            {
              "step": 2,
              "variableName": "toString",
              "startLine": 397,
              "startColumn": 19,
              "endLine": 397,
              "endColumn": 27,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "TestFile",
              "code": "    }\n\n    @Override\n    public String toString() {\n        return getPath();\n    }\n"
            },
            {
              "step": 3,
              "variableName": "getPath()",
              "startLine": 398,
              "startColumn": 16,
              "endLine": 398,
              "endColumn": 25,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "TestFile",
              "code": "\n    @Override\n    public String toString() {\n        return getPath();\n    }\n\n    public TestFile writelns(Iterable<String> lines) {"
            },
            {
              "step": 4,
              "variableName": "getPath()",
              "startLine": 398,
              "startColumn": 16,
              "endLine": 398,
              "endColumn": 25,
              "uri": "gradle-8.14.0/testing/internal-testing/src/main/groovy/org/gradle/test/fixtures/file/TestFile.java",
              "type": "String",
              "code": "\n    @Override\n    public String toString() {\n        return getPath();\n    }\n\n    public TestFile writelns(Iterable<String> lines) {"
            },
            {
              "step": 5,
              "variableName": "src.toString()",
              "startLine": 119,
              "startColumn": 34,
              "endLine": 119,
              "endColumn": 48,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "String",
              "code": "            Describable describable = (Describable) src;\n            stringBuilder.append(describable.getDisplayName());\n        } else {\n            stringBuilder.append(src.toString());\n        }\n    }\n"
            },
            {
              "step": 6,
              "variableName": "stringBuilder",
              "startLine": 119,
              "startColumn": 13,
              "endLine": 119,
              "endColumn": 26,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "StringBuilder",
              "code": "            Describable describable = (Describable) src;\n            stringBuilder.append(describable.getDisplayName());\n        } else {\n            stringBuilder.append(src.toString());\n        }\n    }\n"
            },
            {
              "step": 7,
              "variableName": "builder",
              "startLine": 202,
              "startColumn": 38,
              "endLine": 202,
              "endColumn": 45,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "StringBuilder",
              "code": "            StringBuilder builder = new StringBuilder(48);\n            appendDisplayName(part1, builder);\n            builder.append(' ');\n            appendDisplayName(part2, builder);\n            return builder.toString();\n        }\n"
            },
            {
              "step": 8,
              "variableName": "builder",
              "startLine": 203,
              "startColumn": 20,
              "endLine": 203,
              "endColumn": 27,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "StringBuilder",
              "code": "            appendDisplayName(part1, builder);\n            builder.append(' ');\n            appendDisplayName(part2, builder);\n            return builder.toString();\n        }\n\n        @Override"
            },
            {
              "step": 9,
              "variableName": "builder.toString()",
              "startLine": 203,
              "startColumn": 20,
              "endLine": 203,
              "endColumn": 38,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "String",
              "code": "            appendDisplayName(part1, builder);\n            builder.append(' ');\n            appendDisplayName(part2, builder);\n            return builder.toString();\n        }\n\n        @Override"
            },
            {
              "step": 10,
              "variableName": "describable.getDisplayName()",
              "startLine": 313,
              "startColumn": 35,
              "endLine": 313,
              "endColumn": 63,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "String",
              "code": "        public String getDisplayName() {\n            synchronized (this) {\n                if (displayName == null) {\n                    displayName = describable.getDisplayName();\n                    if (capDisplayName != null || !(describable instanceof DisplayName)) {\n                        describable = null;\n                    }"
            },
            {
              "step": 11,
              "variableName": "displayName",
              "startLine": 318,
              "startColumn": 24,
              "endLine": 318,
              "endColumn": 35,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "String",
              "code": "                        describable = null;\n                    }\n                }\n                return displayName;\n            }\n        }\n    }"
            },
            {
              "step": 12,
              "variableName": "displayName.getDisplayName()",
              "startLine": 772,
              "startColumn": 73,
              "endLine": 772,
              "endColumn": 101,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/configurations/DefaultConfiguration.java",
              "type": "String",
              "code": "                try {\n                    results = resolver.resolveGraph(DefaultConfiguration.this);\n                } catch (Exception e) {\n                    throw exceptionMapper.mapFailure(e, \"dependencies\", displayName.getDisplayName());\n                }\n\n                // Make the new state visible in case a dependency resolution listener queries the result, which requires the new state"
            },
            {
              "step": 13,
              "variableName": "String contextDisplayName",
              "startLine": 68,
              "startColumn": 77,
              "endLine": 68,
              "endColumn": 102,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "String",
              "code": "        return mapFailure(failure, type, displayName);\n    }\n\n    public TypedResolveException mapFailure(Throwable failure, String type, String contextDisplayName) {\n        if (!(failure instanceof TypedResolveException)) {\n            return new TypedResolveException(\n                type,"
            },
            {
              "step": 14,
              "variableName": "contextDisplayName",
              "startLine": 72,
              "startColumn": 17,
              "endLine": 72,
              "endColumn": 35,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "String",
              "code": "        if (!(failure instanceof TypedResolveException)) {\n            return new TypedResolveException(\n                type,\n                contextDisplayName,\n                ImmutableList.of(mapRepositoryOverrideFailure(contextDisplayName, failure))\n            );\n        }"
            },
            {
              "step": 15,
              "variableName": "new TypedResolveException(...) : TypedResolveException",
              "startLine": 70,
              "startColumn": 20,
              "endLine": 74,
              "endColumn": 14,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "TypedResolveException",
              "code": "\n    public TypedResolveException mapFailure(Throwable failure, String type, String contextDisplayName) {\n        if (!(failure instanceof TypedResolveException)) {\n            return new TypedResolveException(\n                type,\n                contextDisplayName,\n                ImmutableList.of(mapRepositoryOverrideFailure(contextDisplayName, failure))"
            },
            {
              "step": 16,
              "variableName": "exceptionMapper.mapFailure(e, \"dependencies\", displayName.getDisplayName())",
              "startLine": 772,
              "startColumn": 27,
              "endLine": 772,
              "endColumn": 102,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/configurations/DefaultConfiguration.java",
              "type": "TypedResolveException",
              "code": "                try {\n                    results = resolver.resolveGraph(DefaultConfiguration.this);\n                } catch (Exception e) {\n                    throw exceptionMapper.mapFailure(e, \"dependencies\", displayName.getDisplayName());\n                }\n\n                // Make the new state visible in case a dependency resolution listener queries the result, which requires the new state"
            },
            {
              "step": 17,
              "variableName": "e",
              "startLine": 772,
              "startColumn": 54,
              "endLine": 772,
              "endColumn": 55,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/configurations/DefaultConfiguration.java",
              "type": "Exception",
              "code": "                try {\n                    results = resolver.resolveGraph(DefaultConfiguration.this);\n                } catch (Exception e) {\n                    throw exceptionMapper.mapFailure(e, \"dependencies\", displayName.getDisplayName());\n                }\n\n                // Make the new state visible in case a dependency resolution listener queries the result, which requires the new state"
            },
            {
              "step": 18,
              "variableName": "Throwable failure",
              "startLine": 68,
              "startColumn": 45,
              "endLine": 68,
              "endColumn": 62,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Throwable",
              "code": "        return mapFailure(failure, type, displayName);\n    }\n\n    public TypedResolveException mapFailure(Throwable failure, String type, String contextDisplayName) {\n        if (!(failure instanceof TypedResolveException)) {\n            return new TypedResolveException(\n                type,"
            },
            {
              "step": 19,
              "variableName": "failure",
              "startLine": 73,
              "startColumn": 83,
              "endLine": 73,
              "endColumn": 90,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Throwable",
              "code": "            return new TypedResolveException(\n                type,\n                contextDisplayName,\n                ImmutableList.of(mapRepositoryOverrideFailure(contextDisplayName, failure))\n            );\n        }\n"
            },
            {
              "step": 20,
              "variableName": "Throwable failure",
              "startLine": 94,
              "startColumn": 78,
              "endLine": 94,
              "endColumn": 95,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Throwable",
              "code": "\n    // TODO: We should handle this exception at the source instead of using instanceof to detect it after it is thrown.\n    //       We should try to avoid catching and analyzing runtime exceptions\n    public Throwable mapRepositoryOverrideFailure(String contextDisplayName, Throwable failure) {\n        if (!(failure instanceof ModuleVersionNotFoundException) || !settingsRepositoriesIgnored()) {\n            return failure;\n        }"
            },
            {
              "step": 21,
              "variableName": "failure",
              "startLine": 108,
              "startColumn": 35,
              "endLine": 108,
              "endColumn": 42,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Throwable",
              "code": "        return new TypedResolveException(\n            \"dependencies\",\n            contextDisplayName,\n            Collections.singleton(failure),\n            resolutions\n        );\n    }"
            },
            {
              "step": 22,
              "variableName": "Collections.singleton(failure)",
              "startLine": 108,
              "startColumn": 13,
              "endLine": 108,
              "endColumn": 43,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Set [<element>] : Throwable",
              "code": "        return new TypedResolveException(\n            \"dependencies\",\n            contextDisplayName,\n            Collections.singleton(failure),\n            resolutions\n        );\n    }"
            },
            {
              "step": 23,
              "variableName": "Collections.singleton(failure)",
              "startLine": 108,
              "startColumn": 13,
              "endLine": 108,
              "endColumn": 43,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ResolveExceptionMapper.java",
              "type": "Set",
              "code": "        return new TypedResolveException(\n            \"dependencies\",\n            contextDisplayName,\n            Collections.singleton(failure),\n            resolutions\n        );\n    }"
            },
            {
              "step": 24,
              "variableName": "Iterable<? extends Throwable> failures",
              "startLine": 42,
              "startColumn": 67,
              "endLine": 42,
              "endColumn": 105,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ivyservice/TypedResolveException.java",
              "type": "Set",
              "code": "    /**\n     * Creates a new instance with resolutions.\n     */\n    public TypedResolveException(String type, String displayName, Iterable<? extends Throwable> failures, List<String> resolutions) {\n        super(buildMessage(type, displayName), failures, false);\n        this.type = type;\n        this.resolutions = ImmutableList.copyOf(resolutions);"
            },
            {
              "step": 25,
              "variableName": "failures",
              "startLine": 43,
              "startColumn": 48,
              "endLine": 43,
              "endColumn": 56,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ivyservice/TypedResolveException.java",
              "type": "Set",
              "code": "     * Creates a new instance with resolutions.\n     */\n    public TypedResolveException(String type, String displayName, Iterable<? extends Throwable> failures, List<String> resolutions) {\n        super(buildMessage(type, displayName), failures, false);\n        this.type = type;\n        this.resolutions = ImmutableList.copyOf(resolutions);\n    }"
            },
            {
              "step": 26,
              "variableName": "Iterable<? extends Throwable> causes",
              "startLine": 77,
              "startColumn": 48,
              "endLine": 77,
              "endColumn": 84,
              "uri": "gradle-8.14.0/subprojects/core-api/src/main/java/org/gradle/api/artifacts/ResolveException.java",
              "type": "Set",
              "code": "     * @since 8.9\n     */\n    @Incubating\n    protected ResolveException(String message, Iterable<? extends Throwable> causes, @SuppressWarnings(\"unused\") boolean dummy) {\n        super(message, causes);\n    }\n}"
            },
            {
              "step": 27,
              "variableName": "causes",
              "startLine": 78,
              "startColumn": 24,
              "endLine": 78,
              "endColumn": 30,
              "uri": "gradle-8.14.0/subprojects/core-api/src/main/java/org/gradle/api/artifacts/ResolveException.java",
              "type": "Set",
              "code": "     */\n    @Incubating\n    protected ResolveException(String message, Iterable<? extends Throwable> causes, @SuppressWarnings(\"unused\") boolean dummy) {\n        super(message, causes);\n    }\n}\n"
            },
            {
              "step": 28,
              "variableName": "Iterable<? extends Throwable> causes",
              "startLine": 47,
              "startColumn": 55,
              "endLine": 47,
              "endColumn": 91,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "Set",
              "code": "        this.causes.addAll(Arrays.asList(causes));\n    }\n\n    public DefaultMultiCauseException(String message, Iterable<? extends Throwable> causes) {\n        super(message);\n        this.message = message;\n        initCauses(causes);"
            },
            {
              "step": 29,
              "variableName": "causes",
              "startLine": 50,
              "startColumn": 20,
              "endLine": 50,
              "endColumn": 26,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "Set",
              "code": "    public DefaultMultiCauseException(String message, Iterable<? extends Throwable> causes) {\n        super(message);\n        this.message = message;\n        initCauses(causes);\n    }\n\n    public DefaultMultiCauseException(Factory<String> messageFactory) {"
            },
            {
              "step": 30,
              "variableName": "Iterable<? extends Throwable> causes",
              "startLine": 112,
              "startColumn": 28,
              "endLine": 112,
              "endColumn": 64,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "Iterable",
              "code": "        return null;\n    }\n\n    public void initCauses(Iterable<? extends Throwable> causes) {\n        this.causes.clear();\n        for (Throwable cause : causes) {\n            this.causes.add(cause);"
            },
            {
              "step": 31,
              "variableName": "cause",
              "startLine": 115,
              "startColumn": 29,
              "endLine": 115,
              "endColumn": 34,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "Throwable",
              "code": "    public void initCauses(Iterable<? extends Throwable> causes) {\n        this.causes.clear();\n        for (Throwable cause : causes) {\n            this.causes.add(cause);\n        }\n    }\n"
            },
            {
              "step": 32,
              "variableName": "this.causes",
              "startLine": 115,
              "startColumn": 13,
              "endLine": 115,
              "endColumn": 24,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "CopyOnWriteArrayList [<element>] : Throwable",
              "code": "    public void initCauses(Iterable<? extends Throwable> causes) {\n        this.causes.clear();\n        for (Throwable cause : causes) {\n            this.causes.add(cause);\n        }\n    }\n"
            },
            {
              "step": 33,
              "variableName": "this",
              "startLine": 115,
              "startColumn": 13,
              "endLine": 115,
              "endColumn": 17,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/exceptions/DefaultMultiCauseException.java",
              "type": "DefaultMultiCauseException [causes, <element>] : Throwable",
              "code": "    public void initCauses(Iterable<? extends Throwable> causes) {\n        this.causes.clear();\n        for (Throwable cause : causes) {\n            this.causes.add(cause);\n        }\n    }\n"
            },
            {
              "step": 34,
              "variableName": "projectConfigurationException",
              "startLine": 57,
              "startColumn": 17,
              "endLine": 57,
              "endColumn": 46,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/DefaultExceptionAnalyser.java",
              "type": "ProjectConfigurationException [causes, <element>] : Throwable",
              "code": "                }\n            }\n            if (!additionalFailures.isEmpty()) {\n                projectConfigurationException.initCauses(additionalFailures);\n                failures.add(transform(projectConfigurationException));\n            }\n        } else if (exception instanceof ServiceCreationException) {"
            },
            {
              "step": 35,
              "variableName": "projectConfigurationException",
              "startLine": 58,
              "startColumn": 40,
              "endLine": 58,
              "endColumn": 69,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/DefaultExceptionAnalyser.java",
              "type": "ProjectConfigurationException [causes, <element>] : Throwable",
              "code": "            }\n            if (!additionalFailures.isEmpty()) {\n                projectConfigurationException.initCauses(additionalFailures);\n                failures.add(transform(projectConfigurationException));\n            }\n        } else if (exception instanceof ServiceCreationException) {\n            failures.add(transform(new InitializationException(exception)));"
            },
            {
              "step": 36,
              "variableName": "transform(projectConfigurationException)",
              "startLine": 58,
              "startColumn": 30,
              "endLine": 58,
              "endColumn": 70,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/DefaultExceptionAnalyser.java",
              "type": "LocationAwareException",
              "code": "            }\n            if (!additionalFailures.isEmpty()) {\n                projectConfigurationException.initCauses(additionalFailures);\n                failures.add(transform(projectConfigurationException));\n            }\n        } else if (exception instanceof ServiceCreationException) {\n            failures.add(transform(new InitializationException(exception)));"
            },
            {
              "step": 37,
              "variableName": "failures",
              "startLine": 58,
              "startColumn": 17,
              "endLine": 58,
              "endColumn": 25,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/DefaultExceptionAnalyser.java",
              "type": "Collection [<element>] : LocationAwareException",
              "code": "            }\n            if (!additionalFailures.isEmpty()) {\n                projectConfigurationException.initCauses(additionalFailures);\n                failures.add(transform(projectConfigurationException));\n            }\n        } else if (exception instanceof ServiceCreationException) {\n            failures.add(transform(new InitializationException(exception)));"
            },
            {
              "step": 38,
              "variableName": "result",
              "startLine": 53,
              "startColumn": 54,
              "endLine": 53,
              "endColumn": 60,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/MultipleBuildFailuresExceptionAnalyser.java",
              "type": "ArrayList [<element>] : LocationAwareException",
              "code": "        for (Throwable failure : failures) {\n            if (failure instanceof MultipleBuildFailures) {\n                for (Throwable cause : ((MultipleBuildFailures) failure).getCauses()) {\n                    collector.collectFailures(cause, result);\n                }\n            } else {\n                collector.collectFailures(failure, result);"
            },
            {
              "step": 39,
              "variableName": "result",
              "startLine": 60,
              "startColumn": 39,
              "endLine": 60,
              "endColumn": 45,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/MultipleBuildFailuresExceptionAnalyser.java",
              "type": "ArrayList [<element>] : LocationAwareException",
              "code": "            }\n        }\n        if (result.size() == 1 && result.get(0) instanceof RuntimeException) {\n            return (RuntimeException) result.get(0);\n        } else {\n            return new MultipleBuildFailures(result);\n        }"
            },
            {
              "step": 40,
              "variableName": "result.get(0)",
              "startLine": 60,
              "startColumn": 39,
              "endLine": 60,
              "endColumn": 52,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/MultipleBuildFailuresExceptionAnalyser.java",
              "type": "LocationAwareException",
              "code": "            }\n        }\n        if (result.size() == 1 && result.get(0) instanceof RuntimeException) {\n            return (RuntimeException) result.get(0);\n        } else {\n            return new MultipleBuildFailures(result);\n        }"
            },
            {
              "step": 41,
              "variableName": "(RuntimeException) result.get(0)",
              "startLine": 60,
              "startColumn": 20,
              "endLine": 60,
              "endColumn": 52,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/initialization/exception/MultipleBuildFailuresExceptionAnalyser.java",
              "type": "LocationAwareException",
              "code": "            }\n        }\n        if (result.size() == 1 && result.get(0) instanceof RuntimeException) {\n            return (RuntimeException) result.get(0);\n        } else {\n            return new MultipleBuildFailures(result);\n        }"
            },
            {
              "step": 42,
              "variableName": "exceptionAnalyser.transform(finishFailures)",
              "startLine": 72,
              "startColumn": 16,
              "endLine": 72,
              "endColumn": 59,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/internal/buildtree/DefaultBuildTreeFinishExecutor.java",
              "type": "LocationAwareException",
              "code": "            finishFailures.addAll(result.getFailures());\n        });\n\n        return exceptionAnalyser.transform(finishFailures);\n    }\n}\n"
            },
            {
              "step": 43,
              "variableName": "delegate.finishBuildTree(failures)",
              "startLine": 46,
              "startColumn": 28,
              "endLine": 46,
              "endColumn": 62,
              "uri": "gradle-8.14.0/subprojects/composite-builds/src/main/java/org/gradle/composite/internal/OperationFiringBuildTreeFinishExecutor.java",
              "type": "LocationAwareException",
              "code": "            @Override\n            public RuntimeException call(BuildOperationContext context) {\n                try {\n                    return delegate.finishBuildTree(failures);\n                } finally {\n                    context.setResult(RESULT);\n                }"
            },
            {
              "step": 44,
              "variableName": "buildOperation.call(context)",
              "startLine": 239,
              "startColumn": 21,
              "endLine": 239,
              "endColumn": 49,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/testFixtures/java/org/gradle/internal/operations/TestBuildOperationRunner.java",
              "type": "LocationAwareException",
              "code": "            TestBuildOperationContext context = new TestBuildOperationContext(record);\n            T t;\n            try {\n                t = buildOperation.call(context);\n            } catch (Throwable failure) {\n                if (record.failure == null) {\n                    record.failure = failure;"
            },
            {
              "step": 45,
              "variableName": "t",
              "startLine": 246,
              "startColumn": 20,
              "endLine": 246,
              "endColumn": 21,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/testFixtures/java/org/gradle/internal/operations/TestBuildOperationRunner.java",
              "type": "LocationAwareException",
              "code": "                }\n                throw throwAsUncheckedException(failure);\n            }\n            return t;\n        }\n\n        private <O extends BuildOperation> void execute(O buildOperation, BuildOperationWorker<O> worker) {"
            },
            {
              "step": 46,
              "variableName": "log.call(buildOperation)",
              "startLine": 51,
              "startColumn": 16,
              "endLine": 51,
              "endColumn": 40,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/testFixtures/java/org/gradle/internal/operations/TestBuildOperationRunner.java",
              "type": "LocationAwareException",
              "code": "\n    @Override\n    public <T> T call(CallableBuildOperation<T> buildOperation) {\n        return log.call(buildOperation);\n    }\n\n    @Override"
            },
            {
              "step": 47,
              "variableName": "ca",
              "startLine": 115,
              "startColumn": 5,
              "endLine": 121,
              "endColumn": 7,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/configurationcache/ConfigurationCacheBuildOperations.kt",
              "type": "LocationAwareException",
              "code": "\ninternal\nfun <T : Any> BuildOperationRunner.withModelLoadOperation(block: () -> T): T =\n    call(object : CallableBuildOperation<T> {\n        override fun description(): BuildOperationDescriptor.Builder = BuildOperationDescriptor\n            .displayName(\"Load model from configuration cache\")\n            .progressDisplayName(\"Loading model from configuration cache\")"
            },
            {
              "step": 48,
              "variableName": "ca",
              "startLine": 115,
              "startColumn": 5,
              "endLine": 121,
              "endColumn": 7,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/configurationcache/ConfigurationCacheBuildOperations.kt",
              "type": "LocationAwareException",
              "code": "\ninternal\nfun <T : Any> BuildOperationRunner.withModelLoadOperation(block: () -> T): T =\n    call(object : CallableBuildOperation<T> {\n        override fun description(): BuildOperationDescriptor.Builder = BuildOperationDescriptor\n            .displayName(\"Load model from configuration cache\")\n            .progressDisplayName(\"Loading model from configuration cache\")"
            },
            {
              "step": 49,
              "variableName": "b",
              "startLine": 635,
              "startColumn": 9,
              "endLine": 641,
              "endColumn": 10,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "        // No need to record the `ClassLoaderScope` tree when loading\n        scopeRegistryListener.dispose()\n\n        buildOperationRunner.withModelLoadOperation {\n            val storeLoadResult = entryStore.useForStateLoad(StateType.Model) { stateFile: ConfigurationCacheStateFile ->\n                cacheIO.readModelFrom(stateFile)\n            }"
            },
            {
              "step": 50,
              "variableName": "block()",
              "startLine": 668,
              "startColumn": 22,
              "endLine": 668,
              "endColumn": 29,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "    private\n    inline fun <T> runAtConfigurationTime(block: () -> T): T {\n        prepareConfigurationTimeBarrier()\n        val result = block()\n        crossConfigurationTimeBarrier()\n        return result\n    }"
            },
            {
              "step": 51,
              "variableName": "result",
              "startLine": 670,
              "startColumn": 16,
              "endLine": 670,
              "endColumn": 22,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "        prepareConfigurationTimeBarrier()\n        val result = block()\n        crossConfigurationTimeBarrier()\n        return result\n    }\n\n    private"
            },
            {
              "step": 52,
              "variableName": "runAtConfigurationTime(...) : LocationAwareException",
              "startLine": 631,
              "startColumn": 28,
              "endLine": 642,
              "endColumn": 6,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "    data class LoadResultMetadata(val originInvocationId: String? = null)\n\n    private\n    fun loadModel(): Any = runAtConfigurationTime {\n        // No need to record the `ClassLoaderScope` tree when loading\n        scopeRegistryListener.dispose()\n"
            },
            {
              "step": 53,
              "variableName": "loadModel()",
              "startLine": 268,
              "startColumn": 20,
              "endLine": 268,
              "endColumn": 31,
              "uri": "gradle-8.14.0/platforms/core-configuration/configuration-cache/src/main/kotlin/org/gradle/internal/cc/impl/DefaultConfigurationCache.kt",
              "type": "LocationAwareException",
              "code": "    override fun <T : Any> loadOrCreateModel(creator: () -> T): T {\n        if (isLoaded) {\n            runLoadedSideEffects()\n            return loadModel().uncheckedCast()\n        }\n\n        return runWorkThatContributesToCacheEntry {"
            },
            {
              "step": 54,
              "variableName": "Any",
              "startLine": 22,
              "startColumn": 15,
              "endLine": 22,
              "endColumn": 18,
              "uri": "gradle-8.14.0/platforms/core-configuration/stdlib-kotlin-extensions/src/main/kotlin/org/gradle/internal/extensions/stdlib/CastExtensions.kt",
              "type": "Object",
              "code": "import org.gradle.internal.Cast\n\n\nfun <T : Any> Any.uncheckedCast(): T =\n    Cast.uncheckedNonnullCast(this)\n"
            },
            {
              "step": 55,
              "variableName": "this",
              "startLine": 23,
              "startColumn": 31,
              "endLine": 23,
              "endColumn": 35,
              "uri": "gradle-8.14.0/platforms/core-configuration/stdlib-kotlin-extensions/src/main/kotlin/org/gradle/internal/extensions/stdlib/CastExtensions.kt",
              "type": "Object",
              "code": "\n\nfun <T : Any> Any.uncheckedCast(): T =\n    Cast.uncheckedNonnullCast(this)\n"
            },
            {
              "step": 56,
              "variableName": "Object object",
              "startLine": 76,
              "startColumn": 46,
              "endLine": 76,
              "endColumn": 59,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/Cast.java",
              "type": "Object",
              "code": "    }\n\n    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})\n    public static <T> T uncheckedNonnullCast(Object object) {\n        return (T) object;\n    }\n}"
            },
            {
              "step": 57,
              "variableName": "(T) object",
              "startLine": 77,
              "startColumn": 16,
              "endLine": 77,
              "endColumn": 26,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/Cast.java",
              "type": "Object",
              "code": "\n    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})\n    public static <T> T uncheckedNonnullCast(Object object) {\n        return (T) object;\n    }\n}\n"
            },
            {
              "step": 58,
              "variableName": "Cast.uncheckedNonnullCast(collectionType)",
              "startLine": 223,
              "startColumn": 16,
              "endLine": 223,
              "endColumn": 57,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/api/internal/provider/AbstractCollectionProperty.java",
              "type": "Class",
              "code": "    @Override\n    @Nonnull\n    public Class<C> getType() {\n        return Cast.uncheckedNonnullCast(collectionType);\n    }\n\n    @Override"
            },
            {
              "step": 59,
              "variableName": "provider.getType()",
              "startLine": 41,
              "startColumn": 35,
              "endLine": 41,
              "endColumn": 53,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/api/internal/provider/OrElseFixedValueProvider.java",
              "type": "Class",
              "code": "    @Nullable\n    @Override\n    public Class<T> getType() {\n        return Cast.uncheckedCast(provider.getType());\n    }\n\n    @Override"
            },
            {
              "step": 60,
              "variableName": "@Nullable Object object",
              "startLine": 71,
              "startColumn": 39,
              "endLine": 71,
              "endColumn": 62,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/Cast.java",
              "type": "Object",
              "code": "\n    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})\n    @Nullable\n    public static <T> T uncheckedCast(@Nullable Object object) {\n        return (T) object;\n    }\n"
            },
            {
              "step": 61,
              "variableName": "(T) object",
              "startLine": 72,
              "startColumn": 16,
              "endLine": 72,
              "endColumn": 26,
              "uri": "gradle-8.14.0/platforms/core-runtime/stdlib-java-extensions/src/main/java/org/gradle/internal/Cast.java",
              "type": "Object",
              "code": "    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})\n    @Nullable\n    public static <T> T uncheckedCast(@Nullable Object object) {\n        return (T) object;\n    }\n\n    @SuppressWarnings({\"unchecked\", \"TypeParameterUnusedInFormals\"})"
            },
            {
              "step": 62,
              "variableName": "Cast.uncheckedCast(sanitizer.sanitize(t))",
              "startLine": 41,
              "startColumn": 15,
              "endLine": 41,
              "endColumn": 56,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/api/internal/provider/TypeSanitizingTransformer.java",
              "type": "Object",
              "code": "\n    @Override\n    public T transform(T t) {\n        T v = Cast.uncheckedCast(sanitizer.sanitize(t));\n        if (targetType.isInstance(v)) {\n            return v;\n        }"
            },
            {
              "step": 63,
              "variableName": "v",
              "startLine": 43,
              "startColumn": 20,
              "endLine": 43,
              "endColumn": 21,
              "uri": "gradle-8.14.0/platforms/core-configuration/model-core/src/main/java/org/gradle/api/internal/provider/TypeSanitizingTransformer.java",
              "type": "Object",
              "code": "    public T transform(T t) {\n        T v = Cast.uncheckedCast(sanitizer.sanitize(t));\n        if (targetType.isInstance(v)) {\n            return v;\n        }\n        throw new IllegalArgumentException(String.format(\"Cannot get the value of %s of type %s as the provider associated with this property returned a value of type %s.\", owner.getDisplayName(), targetType.getName(), v.getClass().getName()));\n    }"
            },
            {
              "step": 64,
              "variableName": "describer.transform(this)",
              "startLine": 163,
              "startColumn": 16,
              "endLine": 163,
              "endColumn": 41,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/repositories/DefaultMavenArtifactRepository.java",
              "type": "String",
              "code": "\n    @Override\n    public String getDisplayName() {\n        return describer.transform(this);\n    }\n\n    @Override"
            },
            {
              "step": 65,
              "variableName": "describable.getDisplayName()",
              "startLine": 313,
              "startColumn": 35,
              "endLine": 313,
              "endColumn": 63,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "String",
              "code": "        public String getDisplayName() {\n            synchronized (this) {\n                if (displayName == null) {\n                    displayName = describable.getDisplayName();\n                    if (capDisplayName != null || !(describable instanceof DisplayName)) {\n                        describable = null;\n                    }"
            },
            {
              "step": 66,
              "variableName": "displayName",
              "startLine": 318,
              "startColumn": 24,
              "endLine": 318,
              "endColumn": 35,
              "uri": "gradle-8.14.0/platforms/core-runtime/base-services/src/main/java/org/gradle/internal/Describables.java",
              "type": "String",
              "code": "                        describable = null;\n                    }\n                }\n                return displayName;\n            }\n        }\n    }"
            },
            {
              "step": 67,
              "variableName": "displayName().getDisplayName()",
              "startLine": 50,
              "startColumn": 16,
              "endLine": 50,
              "endColumn": 46,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/configurations/ResolutionHost.java",
              "type": "String",
              "code": "    DisplayName displayName();\n\n    default String getDisplayName() {\n        return displayName().getDisplayName();\n    }\n\n    default DisplayName displayName(String type) {"
            },
            {
              "step": 68,
              "variableName": "resolutionHost.getDisplayName()",
              "startLine": 75,
              "startColumn": 60,
              "endLine": 75,
              "endColumn": 91,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ivyservice/resolveengine/artifact/ResolvedArtifactSetResolver.java",
              "type": "String",
              "code": "\n            @Override\n            public BuildOperationDescriptor.Builder description() {\n                String displayName = \"Resolve files of \" + resolutionHost.getDisplayName();\n                return BuildOperationDescriptor\n                    .displayName(displayName)\n                    .progressDisplayName(displayName)"
            },
            {
              "step": 69,
              "variableName": "\"Resolve files of \" + resolutionHost.getDisplayName()",
              "startLine": 75,
              "startColumn": 38,
              "endLine": 75,
              "endColumn": 91,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ivyservice/resolveengine/artifact/ResolvedArtifactSetResolver.java",
              "type": "String",
              "code": "\n            @Override\n            public BuildOperationDescriptor.Builder description() {\n                String displayName = \"Resolve files of \" + resolutionHost.getDisplayName();\n                return BuildOperationDescriptor\n                    .displayName(displayName)\n                    .progressDisplayName(displayName)"
            },
            {
              "step": 70,
              "variableName": "displayName",
              "startLine": 77,
              "startColumn": 34,
              "endLine": 77,
              "endColumn": 45,
              "uri": "gradle-8.14.0/platforms/software/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ivyservice/resolveengine/artifact/ResolvedArtifactSetResolver.java",
              "type": "String",
              "code": "            public BuildOperationDescriptor.Builder description() {\n                String displayName = \"Resolve files of \" + resolutionHost.getDisplayName();\n                return BuildOperationDescriptor\n                    .displayName(displayName)\n                    .progressDisplayName(displayName)\n                    .details(new ResolveArtifactsBuildOperationType.Details() {\n                        @Override"
            },
            {
              "step": 71,
              "variableName": "String displayName",
              "startLine": 111,
              "startColumn": 39,
              "endLine": 111,
              "endColumn": 57,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/main/java/org/gradle/internal/operations/BuildOperationDescriptor.java",
              "type": "String",
              "code": "        return totalProgress;\n    }\n\n    public static Builder displayName(String displayName) {\n        return new Builder(displayName);\n    }\n"
            },
            {
              "step": 72,
              "variableName": "displayName",
              "startLine": 112,
              "startColumn": 28,
              "endLine": 112,
              "endColumn": 39,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/main/java/org/gradle/internal/operations/BuildOperationDescriptor.java",
              "type": "String",
              "code": "    }\n\n    public static Builder displayName(String displayName) {\n        return new Builder(displayName);\n    }\n\n    @Override"
            },
            {
              "step": 73,
              "variableName": "String displayName",
              "startLine": 138,
              "startColumn": 25,
              "endLine": 138,
              "endColumn": 43,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/main/java/org/gradle/internal/operations/BuildOperationDescriptor.java",
              "type": "String",
              "code": "        private BuildOperationMetadata metadata = BuildOperationMetadata.NONE;\n        private int totalProgress;\n\n        private Builder(String displayName) {\n            this.displayName = displayName;\n            this.name = displayName;\n        }"
            },
            {
              "step": 74,
              "variableName": "displayName",
              "startLine": 139,
              "startColumn": 32,
              "endLine": 139,
              "endColumn": 43,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/main/java/org/gradle/internal/operations/BuildOperationDescriptor.java",
              "type": "String",
              "code": "        private int totalProgress;\n\n        private Builder(String displayName) {\n            this.displayName = displayName;\n            this.name = displayName;\n        }\n"
            },
            {
              "step": 75,
              "variableName": "this",
              "startLine": 139,
              "startColumn": 13,
              "endLine": 139,
              "endColumn": 17,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/main/java/org/gradle/internal/operations/BuildOperationDescriptor.java",
              "type": "Builder [displayName] : String",
              "code": "        private int totalProgress;\n\n        private Builder(String displayName) {\n            this.displayName = displayName;\n            this.name = displayName;\n        }\n"
            },
            {
              "step": 76,
              "variableName": "new Builder(displayName)",
              "startLine": 112,
              "startColumn": 16,
              "endLine": 112,
              "endColumn": 40,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/main/java/org/gradle/internal/operations/BuildOperationDescriptor.java",
              "type": "Builder [displayName] : String",
              "code": "    }\n\n    public static Builder displayName(String displayName) {\n        return new Builder(displayName);\n    }\n\n    @Override"
            },
            {
              "step": 77,
              "variableName": "BuildOperationDescriptor.displayName(description)",
              "startLine": 67,
              "startColumn": 16,
              "endLine": 67,
              "endColumn": 65,
              "uri": "gradle-8.14.0/platforms/native/platform-native/src/main/java/org/gradle/nativeplatform/toolchain/internal/DefaultCommandLineToolInvocation.java",
              "type": "Builder [displayName] : String",
              "code": "\n    @Override\n    public BuildOperationDescriptor.Builder description() {\n        return BuildOperationDescriptor.displayName(description);\n    }\n}\n"
            },
            {
              "step": 78,
              "variableName": "invocation.description()",
              "startLine": 58,
              "startColumn": 48,
              "endLine": 58,
              "endColumn": 72,
              "uri": "gradle-8.14.0/platforms/native/platform-native/src/main/java/org/gradle/nativeplatform/toolchain/internal/DefaultCommandLineToolInvocationWorker.java",
              "type": "Builder [displayName] : String",
              "code": "\n    @Override\n    public void execute(CommandLineToolInvocation invocation, BuildOperationContext context) {\n        BuildOperationDescriptor description = invocation.description().build();\n        ExecAction toolExec = execActionFactory.newExecAction();\n\n        toolExec.executable(executable);"
            },
            {
              "step": 79,
              "variableName": "build",
              "startLine": 180,
              "startColumn": 41,
              "endLine": 180,
              "endColumn": 46,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/main/java/org/gradle/internal/operations/BuildOperationDescriptor.java",
              "type": "Builder [displayName] : String",
              "code": "            return this;\n        }\n\n        public BuildOperationDescriptor build() {\n            return build(null, null);\n        }\n"
            },
            {
              "step": 80,
              "variableName": "build(null, null)",
              "startLine": 181,
              "startColumn": 20,
              "endLine": 181,
              "endColumn": 37,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/main/java/org/gradle/internal/operations/BuildOperationDescriptor.java",
              "type": "Builder [displayName] : String",
              "code": "        }\n\n        public BuildOperationDescriptor build() {\n            return build(null, null);\n        }\n\n        @Nullable"
            },
            {
              "step": 81,
              "variableName": "build",
              "startLine": 189,
              "startColumn": 41,
              "endLine": 189,
              "endColumn": 46,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/main/java/org/gradle/internal/operations/BuildOperationDescriptor.java",
              "type": "Builder [displayName] : String",
              "code": "            return parent;\n        }\n\n        public BuildOperationDescriptor build(@Nullable OperationIdentifier id, @Nullable OperationIdentifier defaultParentId) {\n            return new BuildOperationDescriptor(id, parent == null ? defaultParentId : parent.getId(), name, displayName, progressDisplayName, details, metadata, totalProgress);\n        }\n    }"
            },
            {
              "step": 82,
              "variableName": "displayName",
              "startLine": 190,
              "startColumn": 110,
              "endLine": 190,
              "endColumn": 121,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/main/java/org/gradle/internal/operations/BuildOperationDescriptor.java",
              "type": "Builder [displayName] : String",
              "code": "        }\n\n        public BuildOperationDescriptor build(@Nullable OperationIdentifier id, @Nullable OperationIdentifier defaultParentId) {\n            return new BuildOperationDescriptor(id, parent == null ? defaultParentId : parent.getId(), name, displayName, progressDisplayName, details, metadata, totalProgress);\n        }\n    }\n}"
            },
            {
              "step": 83,
              "variableName": "displayName",
              "startLine": 190,
              "startColumn": 110,
              "endLine": 190,
              "endColumn": 121,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/main/java/org/gradle/internal/operations/BuildOperationDescriptor.java",
              "type": "String",
              "code": "        }\n\n        public BuildOperationDescriptor build(@Nullable OperationIdentifier id, @Nullable OperationIdentifier defaultParentId) {\n            return new BuildOperationDescriptor(id, parent == null ? defaultParentId : parent.getId(), name, displayName, progressDisplayName, details, metadata, totalProgress);\n        }\n    }\n}"
            },
            {
              "step": 84,
              "variableName": "String displayName",
              "startLine": 38,
              "startColumn": 9,
              "endLine": 38,
              "endColumn": 27,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/main/java/org/gradle/internal/operations/BuildOperationDescriptor.java",
              "type": "String",
              "code": "        @Nullable OperationIdentifier id,\n        @Nullable OperationIdentifier parentId,\n        String name,\n        String displayName,\n        @Nullable String progressDisplayName,\n        @Nullable Object details,\n        BuildOperationMetadata metadata,"
            },
            {
              "step": 85,
              "variableName": "displayName",
              "startLine": 47,
              "startColumn": 28,
              "endLine": 47,
              "endColumn": 39,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/main/java/org/gradle/internal/operations/BuildOperationDescriptor.java",
              "type": "String",
              "code": "        this.id = id;\n        this.parentId = parentId;\n        this.name = name;\n        this.displayName = displayName;\n        this.progressDisplayName = progressDisplayName;\n        this.details = details;\n        this.metadata = metadata;"
            },
            {
              "step": 86,
              "variableName": "this",
              "startLine": 47,
              "startColumn": 9,
              "endLine": 47,
              "endColumn": 13,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/main/java/org/gradle/internal/operations/BuildOperationDescriptor.java",
              "type": "BuildOperationDescriptor [displayName] : String",
              "code": "        this.id = id;\n        this.parentId = parentId;\n        this.name = name;\n        this.displayName = displayName;\n        this.progressDisplayName = progressDisplayName;\n        this.details = details;\n        this.metadata = metadata;"
            },
            {
              "step": 87,
              "variableName": "new BuildOperationDescriptor(id, parent == null ? defaultParentId : parent.getId(), name, displayName, progressDisplayName, details, metadata, totalProgress)",
              "startLine": 190,
              "startColumn": 20,
              "endLine": 190,
              "endColumn": 177,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/main/java/org/gradle/internal/operations/BuildOperationDescriptor.java",
              "type": "BuildOperationDescriptor [displayName] : String",
              "code": "        }\n\n        public BuildOperationDescriptor build(@Nullable OperationIdentifier id, @Nullable OperationIdentifier defaultParentId) {\n            return new BuildOperationDescriptor(id, parent == null ? defaultParentId : parent.getId(), name, displayName, progressDisplayName, details, metadata, totalProgress);\n        }\n    }\n}"
            },
            {
              "step": 88,
              "variableName": "build(null, null)",
              "startLine": 181,
              "startColumn": 20,
              "endLine": 181,
              "endColumn": 37,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/main/java/org/gradle/internal/operations/BuildOperationDescriptor.java",
              "type": "BuildOperationDescriptor [displayName] : String",
              "code": "        }\n\n        public BuildOperationDescriptor build() {\n            return build(null, null);\n        }\n\n        @Nullable"
            },
            {
              "step": 89,
              "variableName": "invocation.description().build()",
              "startLine": 58,
              "startColumn": 48,
              "endLine": 58,
              "endColumn": 80,
              "uri": "gradle-8.14.0/platforms/native/platform-native/src/main/java/org/gradle/nativeplatform/toolchain/internal/DefaultCommandLineToolInvocationWorker.java",
              "type": "BuildOperationDescriptor [displayName] : String",
              "code": "\n    @Override\n    public void execute(CommandLineToolInvocation invocation, BuildOperationContext context) {\n        BuildOperationDescriptor description = invocation.description().build();\n        ExecAction toolExec = execActionFactory.newExecAction();\n\n        toolExec.executable(executable);"
            },
            {
              "step": 90,
              "variableName": "description",
              "startLine": 88,
              "startColumn": 53,
              "endLine": 88,
              "endColumn": 64,
              "uri": "gradle-8.14.0/platforms/native/platform-native/src/main/java/org/gradle/nativeplatform/toolchain/internal/DefaultCommandLineToolInvocationWorker.java",
              "type": "BuildOperationDescriptor [displayName] : String",
              "code": "\n        try {\n            toolExec.execute();\n            invocation.getLogger().operationSuccess(description.getDisplayName(), combineOutput(stdOutput, errOutput));\n        } catch (ExecException e) {\n            invocation.getLogger().operationFailed(description.getDisplayName(), combineOutput(stdOutput, errOutput));\n            throw new CommandLineToolInvocationFailure(invocation, String.format(\"%s failed while %s.\", name, description.getDisplayName()));"
            },
            {
              "step": 91,
              "variableName": "getDisplayName",
              "startLine": 72,
              "startColumn": 19,
              "endLine": 72,
              "endColumn": 33,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/main/java/org/gradle/internal/operations/BuildOperationDescriptor.java",
              "type": "BuildOperationDescriptor [displayName] : String",
              "code": "     * operation, and should describe the operation whether currently running or not, eg \"Run test A\" rather than\n     * \"Running test A\".\n     */\n    public String getDisplayName() {\n        return displayName;\n    }\n"
            },
            {
              "step": 92,
              "variableName": "displayName",
              "startLine": 73,
              "startColumn": 16,
              "endLine": 73,
              "endColumn": 27,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/main/java/org/gradle/internal/operations/BuildOperationDescriptor.java",
              "type": "BuildOperationDescriptor [displayName] : String",
              "code": "     * \"Running test A\".\n     */\n    public String getDisplayName() {\n        return displayName;\n    }\n\n    /**"
            },
            {
              "step": 93,
              "variableName": "displayName",
              "startLine": 73,
              "startColumn": 16,
              "endLine": 73,
              "endColumn": 27,
              "uri": "gradle-8.14.0/platforms/core-runtime/build-operations/src/main/java/org/gradle/internal/operations/BuildOperationDescriptor.java",
              "type": "String",
              "code": "     * \"Running test A\".\n     */\n    public String getDisplayName() {\n        return displayName;\n    }\n\n    /**"
            },
            {
              "step": 94,
              "variableName": "description.getDisplayName()",
              "startLine": 88,
              "startColumn": 53,
              "endLine": 88,
              "endColumn": 81,
              "uri": "gradle-8.14.0/platforms/native/platform-native/src/main/java/org/gradle/nativeplatform/toolchain/internal/DefaultCommandLineToolInvocationWorker.java",
              "type": "String",
              "code": "\n        try {\n            toolExec.execute();\n            invocation.getLogger().operationSuccess(description.getDisplayName(), combineOutput(stdOutput, errOutput));\n        } catch (ExecException e) {\n            invocation.getLogger().operationFailed(description.getDisplayName(), combineOutput(stdOutput, errOutput));\n            throw new CommandLineToolInvocationFailure(invocation, String.format(\"%s failed while %s.\", name, description.getDisplayName()));"
            },
            {
              "step": 95,
              "variableName": "String description",
              "startLine": 67,
              "startColumn": 47,
              "endLine": 67,
              "endColumn": 65,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/internal/operations/logging/DefaultBuildOperationLogger.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public synchronized void operationSuccess(String description, String output) {\n        assert started;\n        logInBoth(LogLevel.DEBUG, description.concat(\" successful.\"));\n        maybeShowSuccess(output);"
            },
            {
              "step": 96,
              "variableName": "description",
              "startLine": 69,
              "startColumn": 35,
              "endLine": 69,
              "endColumn": 46,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/internal/operations/logging/DefaultBuildOperationLogger.java",
              "type": "String",
              "code": "    @Override\n    public synchronized void operationSuccess(String description, String output) {\n        assert started;\n        logInBoth(LogLevel.DEBUG, description.concat(\" successful.\"));\n        maybeShowSuccess(output);\n    }\n"
            },
            {
              "step": 97,
              "variableName": "description.concat(\" successful.\")",
              "startLine": 69,
              "startColumn": 35,
              "endLine": 69,
              "endColumn": 69,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/internal/operations/logging/DefaultBuildOperationLogger.java",
              "type": "String",
              "code": "    @Override\n    public synchronized void operationSuccess(String description, String output) {\n        assert started;\n        logInBoth(LogLevel.DEBUG, description.concat(\" successful.\"));\n        maybeShowSuccess(output);\n    }\n"
            },
            {
              "step": 98,
              "variableName": "String message",
              "startLine": 108,
              "startColumn": 47,
              "endLine": 108,
              "endColumn": 61,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/internal/operations/logging/DefaultBuildOperationLogger.java",
              "type": "String",
              "code": "        numberOfFailedOperationsSeen++;\n    }\n\n    private void logInBoth(LogLevel logLevel, String message) {\n        logger.log(logLevel, message);\n        logWriter.println(message);\n    }"
            },
            {
              "step": 99,
              "variableName": "message",
              "startLine": 110,
              "startColumn": 27,
              "endLine": 110,
              "endColumn": 34,
              "uri": "gradle-8.14.0/subprojects/core/src/main/java/org/gradle/internal/operations/logging/DefaultBuildOperationLogger.java",
              "type": "",
              "code": "\n    private void logInBoth(LogLevel logLevel, String message) {\n        logger.log(logLevel, message);\n        logWriter.println(message);\n    }\n\n    @Override"
            }
          ],
          "label": "No"
        }
      ]
    }
  ]
}