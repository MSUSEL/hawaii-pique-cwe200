{
  "532": [
    {
      "resultIndex": 0,
      "fileName": "AbstractClientParametersAuthenticationFilter.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "credentials",
              "startLine": 156,
              "startColumn": 16,
              "endLine": 156,
              "endColumn": 27,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/AbstractClientParametersAuthenticationFilter.java",
              "type": "HashMap",
              "code": "        if (clientId == null) {\n            credentials.put(CLIENT_ASSERTION, request.getParameter(CLIENT_ASSERTION));\n        }\n        return credentials;\n    }\n\n    @Override"
            },
            {
              "step": 1,
              "variableName": "getCredentials(req)",
              "startLine": 78,
              "startColumn": 41,
              "endLine": 78,
              "endColumn": 60,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/AbstractClientParametersAuthenticationFilter.java",
              "type": "HashMap",
              "code": "        HttpServletRequest req = (HttpServletRequest) request;\n        HttpServletResponse res = (HttpServletResponse) response;\n\n        Map<String, String> loginInfo = getCredentials(req);\n        String clientId = loginInfo.get(CLIENT_ID);\n\n        try {"
            },
            {
              "step": 2,
              "variableName": "loginInfo",
              "startLine": 79,
              "startColumn": 27,
              "endLine": 79,
              "endColumn": 36,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/AbstractClientParametersAuthenticationFilter.java",
              "type": "HashMap",
              "code": "        HttpServletResponse res = (HttpServletResponse) response;\n\n        Map<String, String> loginInfo = getCredentials(req);\n        String clientId = loginInfo.get(CLIENT_ID);\n\n        try {\n            if (clientId == null) {"
            },
            {
              "step": 3,
              "variableName": "loginInfo.get(CLIENT_ID)",
              "startLine": 79,
              "startColumn": 27,
              "endLine": 79,
              "endColumn": 51,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/AbstractClientParametersAuthenticationFilter.java",
              "type": "String",
              "code": "        HttpServletResponse res = (HttpServletResponse) response;\n\n        Map<String, String> loginInfo = getCredentials(req);\n        String clientId = loginInfo.get(CLIENT_ID);\n\n        try {\n            if (clientId == null) {"
            },
            {
              "step": 4,
              "variableName": "clientId",
              "startLine": 85,
              "startColumn": 60,
              "endLine": 85,
              "endColumn": 68,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/AbstractClientParametersAuthenticationFilter.java",
              "type": "String",
              "code": "            if (clientId == null) {\n                clientId = Optional.ofNullable(loginInfo.get(CLIENT_ASSERTION)).map(JwtClientAuthentication::getClientIdOidcAssertion).orElse(null);\n            }\n            wrapClientCredentialLogin(req, res, loginInfo, clientId);\n        } catch (AuthenticationException ex) {\n            logger.debug(\"Could not authenticate with client credentials.\");\n            authenticationEntryPoint.commence(req, res, ex);"
            },
            {
              "step": 5,
              "variableName": "String clientId",
              "startLine": 35,
              "startColumn": 123,
              "endLine": 35,
              "endColumn": 138,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/ClientParametersAuthenticationFilter.java",
              "type": "String",
              "code": "public class ClientParametersAuthenticationFilter extends AbstractClientParametersAuthenticationFilter {\n\n    @Override\n    public void wrapClientCredentialLogin(HttpServletRequest req, HttpServletResponse res, Map<String, String> loginInfo, String clientId) {\n        if (!StringUtils.hasText(req.getHeader(\"Authorization\")) && isUrlEncodedForm(req)) {\n            doClientCredentialLogin(req, loginInfo, clientId);\n        }"
            },
            {
              "step": 6,
              "variableName": "clientId",
              "startLine": 37,
              "startColumn": 53,
              "endLine": 37,
              "endColumn": 61,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/ClientParametersAuthenticationFilter.java",
              "type": "String",
              "code": "    @Override\n    public void wrapClientCredentialLogin(HttpServletRequest req, HttpServletResponse res, Map<String, String> loginInfo, String clientId) {\n        if (!StringUtils.hasText(req.getHeader(\"Authorization\")) && isUrlEncodedForm(req)) {\n            doClientCredentialLogin(req, loginInfo, clientId);\n        }\n    }\n"
            },
            {
              "step": 7,
              "variableName": "String clientId",
              "startLine": 97,
              "startColumn": 99,
              "endLine": 97,
              "endColumn": 114,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/AbstractClientParametersAuthenticationFilter.java",
              "type": "String",
              "code": "\n    public abstract void wrapClientCredentialLogin(HttpServletRequest req, HttpServletResponse res, Map<String, String> loginInfo, String clientId);\n\n    protected void doClientCredentialLogin(HttpServletRequest req, Map<String, String> loginInfo, String clientId) {\n        Authentication clientAuth = performClientAuthentication(req, loginInfo, clientId);\n        SecurityContextHolder.getContext().setAuthentication(clientAuth);\n    }"
            },
            {
              "step": 8,
              "variableName": "clientId",
              "startLine": 98,
              "startColumn": 81,
              "endLine": 98,
              "endColumn": 89,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/AbstractClientParametersAuthenticationFilter.java",
              "type": "String",
              "code": "    public abstract void wrapClientCredentialLogin(HttpServletRequest req, HttpServletResponse res, Map<String, String> loginInfo, String clientId);\n\n    protected void doClientCredentialLogin(HttpServletRequest req, Map<String, String> loginInfo, String clientId) {\n        Authentication clientAuth = performClientAuthentication(req, loginInfo, clientId);\n        SecurityContextHolder.getContext().setAuthentication(clientAuth);\n    }\n"
            },
            {
              "step": 9,
              "variableName": "String clientId",
              "startLine": 116,
              "startColumn": 111,
              "endLine": 116,
              "endColumn": 126,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/AbstractClientParametersAuthenticationFilter.java",
              "type": "String",
              "code": "        return OAuth2Utils.parseParameterList(request.getParameter(\"scope\"));\n    }\n\n    private Authentication performClientAuthentication(HttpServletRequest req, Map<String, String> loginInfo, String clientId) {\n        String clientSecret = loginInfo.get(CLIENT_SECRET);\n        UsernamePasswordAuthenticationToken authentication = new UsernamePasswordAuthenticationToken(clientId, clientSecret);\n        authentication.setDetails(new UaaAuthenticationDetails(req, clientId));"
            },
            {
              "step": 10,
              "variableName": "clientId",
              "startLine": 143,
              "startColumn": 106,
              "endLine": 143,
              "endColumn": 114,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/AbstractClientParametersAuthenticationFilter.java",
              "type": "String",
              "code": "        } catch (AuthenticationException e) {\n            throw new BadCredentialsException(e.getMessage(), e);\n        } catch (Exception e) {\n            logger.debug(\"Unable to authenticate client: {}\", UaaStringUtils.getCleanedUserControlString(clientId), e);\n            throw new BadCredentialsException(e.getMessage(), e);\n        }\n    }"
            },
            {
              "step": 11,
              "variableName": "String input",
              "startLine": 317,
              "startColumn": 54,
              "endLine": 317,
              "endColumn": 66,
              "uri": "uaa-77.28.0/model/src/main/java/org/cloudfoundry/identity/uaa/util/UaaStringUtils.java",
              "type": "String",
              "code": "        return result.substring(1, result.length() - 1);\n    }\n\n    public static String getCleanedUserControlString(String input) {\n        if (input == null) {\n            return null;\n        }"
            },
            {
              "step": 12,
              "variableName": "input",
              "startLine": 321,
              "startColumn": 37,
              "endLine": 321,
              "endColumn": 42,
              "uri": "uaa-77.28.0/model/src/main/java/org/cloudfoundry/identity/uaa/util/UaaStringUtils.java",
              "type": "String",
              "code": "        if (input == null) {\n            return null;\n        }\n        return CTRL_PATTERN.matcher(input).replaceAll(\"_\");\n    }\n\n    public static String getValidatedString(String input) {"
            },
            {
              "step": 13,
              "variableName": "CTRL_PATTERN.matcher(input)",
              "startLine": 321,
              "startColumn": 16,
              "endLine": 321,
              "endColumn": 43,
              "uri": "uaa-77.28.0/model/src/main/java/org/cloudfoundry/identity/uaa/util/UaaStringUtils.java",
              "type": "Matcher",
              "code": "        if (input == null) {\n            return null;\n        }\n        return CTRL_PATTERN.matcher(input).replaceAll(\"_\");\n    }\n\n    public static String getValidatedString(String input) {"
            },
            {
              "step": 14,
              "variableName": "CTRL_PATTERN.matcher(input).replaceAll(\"_\")",
              "startLine": 321,
              "startColumn": 16,
              "endLine": 321,
              "endColumn": 59,
              "uri": "uaa-77.28.0/model/src/main/java/org/cloudfoundry/identity/uaa/util/UaaStringUtils.java",
              "type": "String",
              "code": "        if (input == null) {\n            return null;\n        }\n        return CTRL_PATTERN.matcher(input).replaceAll(\"_\");\n    }\n\n    public static String getValidatedString(String input) {"
            },
            {
              "step": 15,
              "variableName": "UaaStringUtils.getCleanedUserControlString(clientId)",
              "startLine": 143,
              "startColumn": 63,
              "endLine": 143,
              "endColumn": 115,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/AbstractClientParametersAuthenticationFilter.java",
              "type": "",
              "code": "        } catch (AuthenticationException e) {\n            throw new BadCredentialsException(e.getMessage(), e);\n        } catch (Exception e) {\n            logger.debug(\"Unable to authenticate client: {}\", UaaStringUtils.getCleanedUserControlString(clientId), e);\n            throw new BadCredentialsException(e.getMessage(), e);\n        }\n    }"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "credentials",
              "startLine": 156,
              "startColumn": 16,
              "endLine": 156,
              "endColumn": 27,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/AbstractClientParametersAuthenticationFilter.java",
              "type": "HashMap",
              "code": "        if (clientId == null) {\n            credentials.put(CLIENT_ASSERTION, request.getParameter(CLIENT_ASSERTION));\n        }\n        return credentials;\n    }\n\n    @Override"
            },
            {
              "step": 1,
              "variableName": "getCredentials(req)",
              "startLine": 78,
              "startColumn": 41,
              "endLine": 78,
              "endColumn": 60,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/AbstractClientParametersAuthenticationFilter.java",
              "type": "HashMap",
              "code": "        HttpServletRequest req = (HttpServletRequest) request;\n        HttpServletResponse res = (HttpServletResponse) response;\n\n        Map<String, String> loginInfo = getCredentials(req);\n        String clientId = loginInfo.get(CLIENT_ID);\n\n        try {"
            },
            {
              "step": 2,
              "variableName": "loginInfo",
              "startLine": 79,
              "startColumn": 27,
              "endLine": 79,
              "endColumn": 36,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/AbstractClientParametersAuthenticationFilter.java",
              "type": "HashMap",
              "code": "        HttpServletResponse res = (HttpServletResponse) response;\n\n        Map<String, String> loginInfo = getCredentials(req);\n        String clientId = loginInfo.get(CLIENT_ID);\n\n        try {\n            if (clientId == null) {"
            },
            {
              "step": 3,
              "variableName": "loginInfo.get(CLIENT_ID)",
              "startLine": 79,
              "startColumn": 27,
              "endLine": 79,
              "endColumn": 51,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/AbstractClientParametersAuthenticationFilter.java",
              "type": "String",
              "code": "        HttpServletResponse res = (HttpServletResponse) response;\n\n        Map<String, String> loginInfo = getCredentials(req);\n        String clientId = loginInfo.get(CLIENT_ID);\n\n        try {\n            if (clientId == null) {"
            },
            {
              "step": 4,
              "variableName": "clientId",
              "startLine": 85,
              "startColumn": 60,
              "endLine": 85,
              "endColumn": 68,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/AbstractClientParametersAuthenticationFilter.java",
              "type": "String",
              "code": "            if (clientId == null) {\n                clientId = Optional.ofNullable(loginInfo.get(CLIENT_ASSERTION)).map(JwtClientAuthentication::getClientIdOidcAssertion).orElse(null);\n            }\n            wrapClientCredentialLogin(req, res, loginInfo, clientId);\n        } catch (AuthenticationException ex) {\n            logger.debug(\"Could not authenticate with client credentials.\");\n            authenticationEntryPoint.commence(req, res, ex);"
            },
            {
              "step": 5,
              "variableName": "String clientId",
              "startLine": 35,
              "startColumn": 123,
              "endLine": 35,
              "endColumn": 138,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/LoginClientParametersAuthenticationFilter.java",
              "type": "String",
              "code": "public class LoginClientParametersAuthenticationFilter extends AbstractClientParametersAuthenticationFilter {\n\n    @Override\n    public void wrapClientCredentialLogin(HttpServletRequest req, HttpServletResponse res, Map<String, String> loginInfo, String clientId) {\n        if (loginInfo.isEmpty()) {\n            throw new BadCredentialsException(\"Request does not contain credentials.\");\n        } else if (clientAuthenticationManager == null || loginInfo.get(CLIENT_ID) == null) {"
            },
            {
              "step": 6,
              "variableName": "clientId",
              "startLine": 45,
              "startColumn": 53,
              "endLine": 45,
              "endColumn": 61,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/LoginClientParametersAuthenticationFilter.java",
              "type": "String",
              "code": "        } else {\n            logger.debug(\"Located credentials in request, with keys: {}\", UaaStringUtils.getCleanedUserControlString(loginInfo.keySet().toString()));\n\n            doClientCredentialLogin(req, loginInfo, clientId);\n        }\n    }\n}"
            },
            {
              "step": 7,
              "variableName": "String clientId",
              "startLine": 97,
              "startColumn": 99,
              "endLine": 97,
              "endColumn": 114,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/AbstractClientParametersAuthenticationFilter.java",
              "type": "String",
              "code": "\n    public abstract void wrapClientCredentialLogin(HttpServletRequest req, HttpServletResponse res, Map<String, String> loginInfo, String clientId);\n\n    protected void doClientCredentialLogin(HttpServletRequest req, Map<String, String> loginInfo, String clientId) {\n        Authentication clientAuth = performClientAuthentication(req, loginInfo, clientId);\n        SecurityContextHolder.getContext().setAuthentication(clientAuth);\n    }"
            },
            {
              "step": 8,
              "variableName": "clientId",
              "startLine": 98,
              "startColumn": 81,
              "endLine": 98,
              "endColumn": 89,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/AbstractClientParametersAuthenticationFilter.java",
              "type": "String",
              "code": "    public abstract void wrapClientCredentialLogin(HttpServletRequest req, HttpServletResponse res, Map<String, String> loginInfo, String clientId);\n\n    protected void doClientCredentialLogin(HttpServletRequest req, Map<String, String> loginInfo, String clientId) {\n        Authentication clientAuth = performClientAuthentication(req, loginInfo, clientId);\n        SecurityContextHolder.getContext().setAuthentication(clientAuth);\n    }\n"
            },
            {
              "step": 9,
              "variableName": "String clientId",
              "startLine": 116,
              "startColumn": 111,
              "endLine": 116,
              "endColumn": 126,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/AbstractClientParametersAuthenticationFilter.java",
              "type": "String",
              "code": "        return OAuth2Utils.parseParameterList(request.getParameter(\"scope\"));\n    }\n\n    private Authentication performClientAuthentication(HttpServletRequest req, Map<String, String> loginInfo, String clientId) {\n        String clientSecret = loginInfo.get(CLIENT_SECRET);\n        UsernamePasswordAuthenticationToken authentication = new UsernamePasswordAuthenticationToken(clientId, clientSecret);\n        authentication.setDetails(new UaaAuthenticationDetails(req, clientId));"
            },
            {
              "step": 10,
              "variableName": "clientId",
              "startLine": 143,
              "startColumn": 106,
              "endLine": 143,
              "endColumn": 114,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/AbstractClientParametersAuthenticationFilter.java",
              "type": "String",
              "code": "        } catch (AuthenticationException e) {\n            throw new BadCredentialsException(e.getMessage(), e);\n        } catch (Exception e) {\n            logger.debug(\"Unable to authenticate client: {}\", UaaStringUtils.getCleanedUserControlString(clientId), e);\n            throw new BadCredentialsException(e.getMessage(), e);\n        }\n    }"
            },
            {
              "step": 11,
              "variableName": "String input",
              "startLine": 317,
              "startColumn": 54,
              "endLine": 317,
              "endColumn": 66,
              "uri": "uaa-77.28.0/model/src/main/java/org/cloudfoundry/identity/uaa/util/UaaStringUtils.java",
              "type": "String",
              "code": "        return result.substring(1, result.length() - 1);\n    }\n\n    public static String getCleanedUserControlString(String input) {\n        if (input == null) {\n            return null;\n        }"
            },
            {
              "step": 12,
              "variableName": "input",
              "startLine": 321,
              "startColumn": 37,
              "endLine": 321,
              "endColumn": 42,
              "uri": "uaa-77.28.0/model/src/main/java/org/cloudfoundry/identity/uaa/util/UaaStringUtils.java",
              "type": "String",
              "code": "        if (input == null) {\n            return null;\n        }\n        return CTRL_PATTERN.matcher(input).replaceAll(\"_\");\n    }\n\n    public static String getValidatedString(String input) {"
            },
            {
              "step": 13,
              "variableName": "CTRL_PATTERN.matcher(input)",
              "startLine": 321,
              "startColumn": 16,
              "endLine": 321,
              "endColumn": 43,
              "uri": "uaa-77.28.0/model/src/main/java/org/cloudfoundry/identity/uaa/util/UaaStringUtils.java",
              "type": "Matcher",
              "code": "        if (input == null) {\n            return null;\n        }\n        return CTRL_PATTERN.matcher(input).replaceAll(\"_\");\n    }\n\n    public static String getValidatedString(String input) {"
            },
            {
              "step": 14,
              "variableName": "CTRL_PATTERN.matcher(input).replaceAll(\"_\")",
              "startLine": 321,
              "startColumn": 16,
              "endLine": 321,
              "endColumn": 59,
              "uri": "uaa-77.28.0/model/src/main/java/org/cloudfoundry/identity/uaa/util/UaaStringUtils.java",
              "type": "String",
              "code": "        if (input == null) {\n            return null;\n        }\n        return CTRL_PATTERN.matcher(input).replaceAll(\"_\");\n    }\n\n    public static String getValidatedString(String input) {"
            },
            {
              "step": 15,
              "variableName": "UaaStringUtils.getCleanedUserControlString(clientId)",
              "startLine": 143,
              "startColumn": 63,
              "endLine": 143,
              "endColumn": 115,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/AbstractClientParametersAuthenticationFilter.java",
              "type": "",
              "code": "        } catch (AuthenticationException e) {\n            throw new BadCredentialsException(e.getMessage(), e);\n        } catch (Exception e) {\n            logger.debug(\"Unable to authenticate client: {}\", UaaStringUtils.getCleanedUserControlString(clientId), e);\n            throw new BadCredentialsException(e.getMessage(), e);\n        }\n    }"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 1,
      "fileName": "BackwardsCompatibleTokenEndpointAuthenticationFilter.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "credentials",
              "startLine": 220,
              "startColumn": 81,
              "endLine": 220,
              "endColumn": 92,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/BackwardsCompatibleTokenEndpointAuthenticationFilter.java",
              "type": "Authentication",
              "code": "        Authentication authResult = null;\n        if (GRANT_TYPE_PASSWORD.equals(grantType)) {\n            Authentication credentials = extractCredentials(request);\n            log.debug(\"Authentication credentials found password grant for '\" + credentials.getName() + \"'\");\n            authResult = authenticationManager.authenticate(credentials);\n\n            if (authResult != null && authResult.isAuthenticated() && authResult instanceof UaaAuthentication uaaAuthentication"
            },
            {
              "step": 1,
              "variableName": "credentials.getName()",
              "startLine": 220,
              "startColumn": 81,
              "endLine": 220,
              "endColumn": 102,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/BackwardsCompatibleTokenEndpointAuthenticationFilter.java",
              "type": "String",
              "code": "        Authentication authResult = null;\n        if (GRANT_TYPE_PASSWORD.equals(grantType)) {\n            Authentication credentials = extractCredentials(request);\n            log.debug(\"Authentication credentials found password grant for '\" + credentials.getName() + \"'\");\n            authResult = authenticationManager.authenticate(credentials);\n\n            if (authResult != null && authResult.isAuthenticated() && authResult instanceof UaaAuthentication uaaAuthentication"
            },
            {
              "step": 2,
              "variableName": "\"Authentication credentials found password grant for '\" + credentials.getName() + \"'\"",
              "startLine": 220,
              "startColumn": 23,
              "endLine": 220,
              "endColumn": 108,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/BackwardsCompatibleTokenEndpointAuthenticationFilter.java",
              "type": "",
              "code": "        Authentication authResult = null;\n        if (GRANT_TYPE_PASSWORD.equals(grantType)) {\n            Authentication credentials = extractCredentials(request);\n            log.debug(\"Authentication credentials found password grant for '\" + credentials.getName() + \"'\");\n            authResult = authenticationManager.authenticate(credentials);\n\n            if (authResult != null && authResult.isAuthenticated() && authResult instanceof UaaAuthentication uaaAuthentication"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 2,
      "fileName": "LoginClientParametersAuthenticationFilter.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "credentials",
              "startLine": 156,
              "startColumn": 16,
              "endLine": 156,
              "endColumn": 27,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/AbstractClientParametersAuthenticationFilter.java",
              "type": "HashMap",
              "code": "        if (clientId == null) {\n            credentials.put(CLIENT_ASSERTION, request.getParameter(CLIENT_ASSERTION));\n        }\n        return credentials;\n    }\n\n    @Override"
            },
            {
              "step": 1,
              "variableName": "getCredentials(req)",
              "startLine": 78,
              "startColumn": 41,
              "endLine": 78,
              "endColumn": 60,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/AbstractClientParametersAuthenticationFilter.java",
              "type": "HashMap",
              "code": "        HttpServletRequest req = (HttpServletRequest) request;\n        HttpServletResponse res = (HttpServletResponse) response;\n\n        Map<String, String> loginInfo = getCredentials(req);\n        String clientId = loginInfo.get(CLIENT_ID);\n\n        try {"
            },
            {
              "step": 2,
              "variableName": "loginInfo",
              "startLine": 79,
              "startColumn": 27,
              "endLine": 79,
              "endColumn": 36,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/AbstractClientParametersAuthenticationFilter.java",
              "type": "HashMap",
              "code": "        HttpServletResponse res = (HttpServletResponse) response;\n\n        Map<String, String> loginInfo = getCredentials(req);\n        String clientId = loginInfo.get(CLIENT_ID);\n\n        try {\n            if (clientId == null) {"
            },
            {
              "step": 3,
              "variableName": "loginInfo.get(CLIENT_ID)",
              "startLine": 79,
              "startColumn": 27,
              "endLine": 79,
              "endColumn": 51,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/AbstractClientParametersAuthenticationFilter.java",
              "type": "String",
              "code": "        HttpServletResponse res = (HttpServletResponse) response;\n\n        Map<String, String> loginInfo = getCredentials(req);\n        String clientId = loginInfo.get(CLIENT_ID);\n\n        try {\n            if (clientId == null) {"
            },
            {
              "step": 4,
              "variableName": "clientId",
              "startLine": 85,
              "startColumn": 60,
              "endLine": 85,
              "endColumn": 68,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/AbstractClientParametersAuthenticationFilter.java",
              "type": "String",
              "code": "            if (clientId == null) {\n                clientId = Optional.ofNullable(loginInfo.get(CLIENT_ASSERTION)).map(JwtClientAuthentication::getClientIdOidcAssertion).orElse(null);\n            }\n            wrapClientCredentialLogin(req, res, loginInfo, clientId);\n        } catch (AuthenticationException ex) {\n            logger.debug(\"Could not authenticate with client credentials.\");\n            authenticationEntryPoint.commence(req, res, ex);"
            },
            {
              "step": 5,
              "variableName": "String clientId",
              "startLine": 35,
              "startColumn": 123,
              "endLine": 35,
              "endColumn": 138,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/LoginClientParametersAuthenticationFilter.java",
              "type": "String",
              "code": "public class LoginClientParametersAuthenticationFilter extends AbstractClientParametersAuthenticationFilter {\n\n    @Override\n    public void wrapClientCredentialLogin(HttpServletRequest req, HttpServletResponse res, Map<String, String> loginInfo, String clientId) {\n        if (loginInfo.isEmpty()) {\n            throw new BadCredentialsException(\"Request does not contain credentials.\");\n        } else if (clientAuthenticationManager == null || loginInfo.get(CLIENT_ID) == null) {"
            },
            {
              "step": 6,
              "variableName": "clientId",
              "startLine": 40,
              "startColumn": 110,
              "endLine": 40,
              "endColumn": 118,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/LoginClientParametersAuthenticationFilter.java",
              "type": "String",
              "code": "            throw new BadCredentialsException(\"Request does not contain credentials.\");\n        } else if (clientAuthenticationManager == null || loginInfo.get(CLIENT_ID) == null) {\n            logger.debug(\"Insufficient resources to perform client authentication. AuthMgr:\" +\n                    clientAuthenticationManager + \"; clientId:\" + UaaStringUtils.getCleanedUserControlString(clientId));\n            throw new BadCredentialsException(\"Request does not contain client credentials.\");\n        } else {\n            logger.debug(\"Located credentials in request, with keys: {}\", UaaStringUtils.getCleanedUserControlString(loginInfo.keySet().toString()));"
            },
            {
              "step": 7,
              "variableName": "String input",
              "startLine": 317,
              "startColumn": 54,
              "endLine": 317,
              "endColumn": 66,
              "uri": "uaa-77.28.0/model/src/main/java/org/cloudfoundry/identity/uaa/util/UaaStringUtils.java",
              "type": "String",
              "code": "        return result.substring(1, result.length() - 1);\n    }\n\n    public static String getCleanedUserControlString(String input) {\n        if (input == null) {\n            return null;\n        }"
            },
            {
              "step": 8,
              "variableName": "input",
              "startLine": 321,
              "startColumn": 37,
              "endLine": 321,
              "endColumn": 42,
              "uri": "uaa-77.28.0/model/src/main/java/org/cloudfoundry/identity/uaa/util/UaaStringUtils.java",
              "type": "String",
              "code": "        if (input == null) {\n            return null;\n        }\n        return CTRL_PATTERN.matcher(input).replaceAll(\"_\");\n    }\n\n    public static String getValidatedString(String input) {"
            },
            {
              "step": 9,
              "variableName": "CTRL_PATTERN.matcher(input)",
              "startLine": 321,
              "startColumn": 16,
              "endLine": 321,
              "endColumn": 43,
              "uri": "uaa-77.28.0/model/src/main/java/org/cloudfoundry/identity/uaa/util/UaaStringUtils.java",
              "type": "Matcher",
              "code": "        if (input == null) {\n            return null;\n        }\n        return CTRL_PATTERN.matcher(input).replaceAll(\"_\");\n    }\n\n    public static String getValidatedString(String input) {"
            },
            {
              "step": 10,
              "variableName": "CTRL_PATTERN.matcher(input).replaceAll(\"_\")",
              "startLine": 321,
              "startColumn": 16,
              "endLine": 321,
              "endColumn": 59,
              "uri": "uaa-77.28.0/model/src/main/java/org/cloudfoundry/identity/uaa/util/UaaStringUtils.java",
              "type": "String",
              "code": "        if (input == null) {\n            return null;\n        }\n        return CTRL_PATTERN.matcher(input).replaceAll(\"_\");\n    }\n\n    public static String getValidatedString(String input) {"
            },
            {
              "step": 11,
              "variableName": "UaaStringUtils.getCleanedUserControlString(clientId)",
              "startLine": 40,
              "startColumn": 67,
              "endLine": 40,
              "endColumn": 119,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/LoginClientParametersAuthenticationFilter.java",
              "type": "String",
              "code": "            throw new BadCredentialsException(\"Request does not contain credentials.\");\n        } else if (clientAuthenticationManager == null || loginInfo.get(CLIENT_ID) == null) {\n            logger.debug(\"Insufficient resources to perform client authentication. AuthMgr:\" +\n                    clientAuthenticationManager + \"; clientId:\" + UaaStringUtils.getCleanedUserControlString(clientId));\n            throw new BadCredentialsException(\"Request does not contain client credentials.\");\n        } else {\n            logger.debug(\"Located credentials in request, with keys: {}\", UaaStringUtils.getCleanedUserControlString(loginInfo.keySet().toString()));"
            },
            {
              "step": 12,
              "variableName": "\"Insufficient resources to perform client authentication. AuthMgr:\" +",
              "startLine": 39,
              "startColumn": 26,
              "endLine": 40,
              "endColumn": 119,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/LoginClientParametersAuthenticationFilter.java",
              "type": "",
              "code": "        if (loginInfo.isEmpty()) {\n            throw new BadCredentialsException(\"Request does not contain credentials.\");\n        } else if (clientAuthenticationManager == null || loginInfo.get(CLIENT_ID) == null) {\n            logger.debug(\"Insufficient resources to perform client authentication. AuthMgr:\" +\n                    clientAuthenticationManager + \"; clientId:\" + UaaStringUtils.getCleanedUserControlString(clientId));\n            throw new BadCredentialsException(\"Request does not contain client credentials.\");\n        } else {"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 3,
      "fileName": "AuthzAuthenticationManager.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "credentials",
              "startLine": 221,
              "startColumn": 61,
              "endLine": 221,
              "endColumn": 72,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/BackwardsCompatibleTokenEndpointAuthenticationFilter.java",
              "type": "Authentication",
              "code": "        if (GRANT_TYPE_PASSWORD.equals(grantType)) {\n            Authentication credentials = extractCredentials(request);\n            log.debug(\"Authentication credentials found password grant for '\" + credentials.getName() + \"'\");\n            authResult = authenticationManager.authenticate(credentials);\n\n            if (authResult != null && authResult.isAuthenticated() && authResult instanceof UaaAuthentication uaaAuthentication\n                    && SessionUtils.isPasswordChangeRequired(request.getSession())) {"
            },
            {
              "step": 1,
              "variableName": "Authentication req",
              "startLine": 65,
              "startColumn": 40,
              "endLine": 65,
              "endColumn": 58,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/manager/AuthzAuthenticationManager.java",
              "type": "Authentication",
              "code": "    }\n\n    @Override\n    public Authentication authenticate(Authentication req) throws AuthenticationException {\n        logger.debug(\"Processing authentication request for \" + req.getName());\n\n        if (req.getCredentials() == null) {"
            },
            {
              "step": 2,
              "variableName": "req",
              "startLine": 66,
              "startColumn": 65,
              "endLine": 66,
              "endColumn": 68,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/manager/AuthzAuthenticationManager.java",
              "type": "Authentication",
              "code": "\n    @Override\n    public Authentication authenticate(Authentication req) throws AuthenticationException {\n        logger.debug(\"Processing authentication request for \" + req.getName());\n\n        if (req.getCredentials() == null) {\n            BadCredentialsException e = new BadCredentialsException(\"No password supplied\");"
            },
            {
              "step": 3,
              "variableName": "req.getName()",
              "startLine": 66,
              "startColumn": 65,
              "endLine": 66,
              "endColumn": 78,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/manager/AuthzAuthenticationManager.java",
              "type": "String",
              "code": "\n    @Override\n    public Authentication authenticate(Authentication req) throws AuthenticationException {\n        logger.debug(\"Processing authentication request for \" + req.getName());\n\n        if (req.getCredentials() == null) {\n            BadCredentialsException e = new BadCredentialsException(\"No password supplied\");"
            },
            {
              "step": 4,
              "variableName": "\"Processing authentication request for \" + req.getName()",
              "startLine": 66,
              "startColumn": 22,
              "endLine": 66,
              "endColumn": 78,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/manager/AuthzAuthenticationManager.java",
              "type": "",
              "code": "\n    @Override\n    public Authentication authenticate(Authentication req) throws AuthenticationException {\n        logger.debug(\"Processing authentication request for \" + req.getName());\n\n        if (req.getCredentials() == null) {\n            BadCredentialsException e = new BadCredentialsException(\"No password supplied\");"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "credentials",
              "startLine": 221,
              "startColumn": 61,
              "endLine": 221,
              "endColumn": 72,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/BackwardsCompatibleTokenEndpointAuthenticationFilter.java",
              "type": "Authentication",
              "code": "        if (GRANT_TYPE_PASSWORD.equals(grantType)) {\n            Authentication credentials = extractCredentials(request);\n            log.debug(\"Authentication credentials found password grant for '\" + credentials.getName() + \"'\");\n            authResult = authenticationManager.authenticate(credentials);\n\n            if (authResult != null && authResult.isAuthenticated() && authResult instanceof UaaAuthentication uaaAuthentication\n                    && SessionUtils.isPasswordChangeRequired(request.getSession())) {"
            },
            {
              "step": 1,
              "variableName": "Authentication authentication",
              "startLine": 48,
              "startColumn": 40,
              "endLine": 48,
              "endColumn": 69,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/manager/ChainedAuthenticationManager.java",
              "type": "Authentication",
              "code": "    }\n\n    @Override\n    public Authentication authenticate(Authentication authentication) throws AuthenticationException {\n        if (!(authentication instanceof Authentication)) {\n            return null;\n        }"
            },
            {
              "step": 2,
              "variableName": "token",
              "startLine": 54,
              "startColumn": 22,
              "endLine": 54,
              "endColumn": 27,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/manager/ChainedAuthenticationManager.java",
              "type": "UsernamePasswordAuthenticationToken",
              "code": "        }\n        UsernamePasswordAuthenticationToken output = null;\n        if (authentication instanceof UsernamePasswordAuthenticationToken token) {\n            output = token;\n        } else {\n            output = new UsernamePasswordAuthenticationToken(authentication.getPrincipal(),\n                    (authentication.getCredentials() != null ? authentication.getCredentials().toString() : null),"
            },
            {
              "step": 3,
              "variableName": "auth != null ? auth : output",
              "startLine": 81,
              "startColumn": 85,
              "endLine": 81,
              "endColumn": 113,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/manager/ChainedAuthenticationManager.java",
              "type": "... : UsernamePasswordAuthenticationToken",
              "code": "                }\n                Authentication thisAuth = null;\n                try {\n                    thisAuth = delegates[i].getAuthenticationManager().authenticate(auth != null ? auth : output);\n                } catch (AuthenticationException x) {\n                    if (logger.isDebugEnabled()) {\n                        logger.debug(\"Chained authentication exception:\" + x.getMessage() + \" at:\" + (x.getStackTrace().length > 0 ? x.getStackTrace()[0] : \"(no stack trace)\"));"
            },
            {
              "step": 4,
              "variableName": "Authentication req",
              "startLine": 65,
              "startColumn": 40,
              "endLine": 65,
              "endColumn": 58,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/manager/AuthzAuthenticationManager.java",
              "type": "UsernamePasswordAuthenticationToken",
              "code": "    }\n\n    @Override\n    public Authentication authenticate(Authentication req) throws AuthenticationException {\n        logger.debug(\"Processing authentication request for \" + req.getName());\n\n        if (req.getCredentials() == null) {"
            },
            {
              "step": 5,
              "variableName": "req",
              "startLine": 66,
              "startColumn": 65,
              "endLine": 66,
              "endColumn": 68,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/manager/AuthzAuthenticationManager.java",
              "type": "UsernamePasswordAuthenticationToken",
              "code": "\n    @Override\n    public Authentication authenticate(Authentication req) throws AuthenticationException {\n        logger.debug(\"Processing authentication request for \" + req.getName());\n\n        if (req.getCredentials() == null) {\n            BadCredentialsException e = new BadCredentialsException(\"No password supplied\");"
            },
            {
              "step": 6,
              "variableName": "req.getName()",
              "startLine": 66,
              "startColumn": 65,
              "endLine": 66,
              "endColumn": 78,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/manager/AuthzAuthenticationManager.java",
              "type": "String",
              "code": "\n    @Override\n    public Authentication authenticate(Authentication req) throws AuthenticationException {\n        logger.debug(\"Processing authentication request for \" + req.getName());\n\n        if (req.getCredentials() == null) {\n            BadCredentialsException e = new BadCredentialsException(\"No password supplied\");"
            },
            {
              "step": 7,
              "variableName": "\"Processing authentication request for \" + req.getName()",
              "startLine": 66,
              "startColumn": 22,
              "endLine": 66,
              "endColumn": 78,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/manager/AuthzAuthenticationManager.java",
              "type": "",
              "code": "\n    @Override\n    public Authentication authenticate(Authentication req) throws AuthenticationException {\n        logger.debug(\"Processing authentication request for \" + req.getName());\n\n        if (req.getCredentials() == null) {\n            BadCredentialsException e = new BadCredentialsException(\"No password supplied\");"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "credentials",
              "startLine": 99,
              "startColumn": 80,
              "endLine": 99,
              "endColumn": 91,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/oauth/provider/endpoint/TokenEndpointAuthenticationFilter.java",
              "type": "Authentication",
              "code": "                    logger.debug(\"Authentication credentials found\");\n                }\n\n                Authentication authResult = authenticationManager.authenticate(credentials);\n\n                if (debug) {\n                    logger.debug(\"Authentication success: \" + authResult.getName());"
            },
            {
              "step": 1,
              "variableName": "Authentication req",
              "startLine": 65,
              "startColumn": 40,
              "endLine": 65,
              "endColumn": 58,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/manager/AuthzAuthenticationManager.java",
              "type": "Authentication",
              "code": "    }\n\n    @Override\n    public Authentication authenticate(Authentication req) throws AuthenticationException {\n        logger.debug(\"Processing authentication request for \" + req.getName());\n\n        if (req.getCredentials() == null) {"
            },
            {
              "step": 2,
              "variableName": "req",
              "startLine": 66,
              "startColumn": 65,
              "endLine": 66,
              "endColumn": 68,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/manager/AuthzAuthenticationManager.java",
              "type": "Authentication",
              "code": "\n    @Override\n    public Authentication authenticate(Authentication req) throws AuthenticationException {\n        logger.debug(\"Processing authentication request for \" + req.getName());\n\n        if (req.getCredentials() == null) {\n            BadCredentialsException e = new BadCredentialsException(\"No password supplied\");"
            },
            {
              "step": 3,
              "variableName": "req.getName()",
              "startLine": 66,
              "startColumn": 65,
              "endLine": 66,
              "endColumn": 78,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/manager/AuthzAuthenticationManager.java",
              "type": "String",
              "code": "\n    @Override\n    public Authentication authenticate(Authentication req) throws AuthenticationException {\n        logger.debug(\"Processing authentication request for \" + req.getName());\n\n        if (req.getCredentials() == null) {\n            BadCredentialsException e = new BadCredentialsException(\"No password supplied\");"
            },
            {
              "step": 4,
              "variableName": "\"Processing authentication request for \" + req.getName()",
              "startLine": 66,
              "startColumn": 22,
              "endLine": 66,
              "endColumn": 78,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/manager/AuthzAuthenticationManager.java",
              "type": "",
              "code": "\n    @Override\n    public Authentication authenticate(Authentication req) throws AuthenticationException {\n        logger.debug(\"Processing authentication request for \" + req.getName());\n\n        if (req.getCredentials() == null) {\n            BadCredentialsException e = new BadCredentialsException(\"No password supplied\");"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "credentials",
              "startLine": 99,
              "startColumn": 80,
              "endLine": 99,
              "endColumn": 91,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/oauth/provider/endpoint/TokenEndpointAuthenticationFilter.java",
              "type": "Authentication",
              "code": "                    logger.debug(\"Authentication credentials found\");\n                }\n\n                Authentication authResult = authenticationManager.authenticate(credentials);\n\n                if (debug) {\n                    logger.debug(\"Authentication success: \" + authResult.getName());"
            },
            {
              "step": 1,
              "variableName": "Authentication authentication",
              "startLine": 48,
              "startColumn": 40,
              "endLine": 48,
              "endColumn": 69,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/manager/ChainedAuthenticationManager.java",
              "type": "Authentication",
              "code": "    }\n\n    @Override\n    public Authentication authenticate(Authentication authentication) throws AuthenticationException {\n        if (!(authentication instanceof Authentication)) {\n            return null;\n        }"
            },
            {
              "step": 2,
              "variableName": "token",
              "startLine": 54,
              "startColumn": 22,
              "endLine": 54,
              "endColumn": 27,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/manager/ChainedAuthenticationManager.java",
              "type": "UsernamePasswordAuthenticationToken",
              "code": "        }\n        UsernamePasswordAuthenticationToken output = null;\n        if (authentication instanceof UsernamePasswordAuthenticationToken token) {\n            output = token;\n        } else {\n            output = new UsernamePasswordAuthenticationToken(authentication.getPrincipal(),\n                    (authentication.getCredentials() != null ? authentication.getCredentials().toString() : null),"
            },
            {
              "step": 3,
              "variableName": "auth != null ? auth : output",
              "startLine": 81,
              "startColumn": 85,
              "endLine": 81,
              "endColumn": 113,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/manager/ChainedAuthenticationManager.java",
              "type": "... : UsernamePasswordAuthenticationToken",
              "code": "                }\n                Authentication thisAuth = null;\n                try {\n                    thisAuth = delegates[i].getAuthenticationManager().authenticate(auth != null ? auth : output);\n                } catch (AuthenticationException x) {\n                    if (logger.isDebugEnabled()) {\n                        logger.debug(\"Chained authentication exception:\" + x.getMessage() + \" at:\" + (x.getStackTrace().length > 0 ? x.getStackTrace()[0] : \"(no stack trace)\"));"
            },
            {
              "step": 4,
              "variableName": "Authentication req",
              "startLine": 65,
              "startColumn": 40,
              "endLine": 65,
              "endColumn": 58,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/manager/AuthzAuthenticationManager.java",
              "type": "UsernamePasswordAuthenticationToken",
              "code": "    }\n\n    @Override\n    public Authentication authenticate(Authentication req) throws AuthenticationException {\n        logger.debug(\"Processing authentication request for \" + req.getName());\n\n        if (req.getCredentials() == null) {"
            },
            {
              "step": 5,
              "variableName": "req",
              "startLine": 66,
              "startColumn": 65,
              "endLine": 66,
              "endColumn": 68,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/manager/AuthzAuthenticationManager.java",
              "type": "UsernamePasswordAuthenticationToken",
              "code": "\n    @Override\n    public Authentication authenticate(Authentication req) throws AuthenticationException {\n        logger.debug(\"Processing authentication request for \" + req.getName());\n\n        if (req.getCredentials() == null) {\n            BadCredentialsException e = new BadCredentialsException(\"No password supplied\");"
            },
            {
              "step": 6,
              "variableName": "req.getName()",
              "startLine": 66,
              "startColumn": 65,
              "endLine": 66,
              "endColumn": 78,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/manager/AuthzAuthenticationManager.java",
              "type": "String",
              "code": "\n    @Override\n    public Authentication authenticate(Authentication req) throws AuthenticationException {\n        logger.debug(\"Processing authentication request for \" + req.getName());\n\n        if (req.getCredentials() == null) {\n            BadCredentialsException e = new BadCredentialsException(\"No password supplied\");"
            },
            {
              "step": 7,
              "variableName": "\"Processing authentication request for \" + req.getName()",
              "startLine": 66,
              "startColumn": 22,
              "endLine": 66,
              "endColumn": 78,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/manager/AuthzAuthenticationManager.java",
              "type": "",
              "code": "\n    @Override\n    public Authentication authenticate(Authentication req) throws AuthenticationException {\n        logger.debug(\"Processing authentication request for \" + req.getName());\n\n        if (req.getCredentials() == null) {\n            BadCredentialsException e = new BadCredentialsException(\"No password supplied\");"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 4,
      "fileName": "AuthzAuthenticationManager.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "credentials",
              "startLine": 221,
              "startColumn": 61,
              "endLine": 221,
              "endColumn": 72,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/BackwardsCompatibleTokenEndpointAuthenticationFilter.java",
              "type": "Authentication",
              "code": "        if (GRANT_TYPE_PASSWORD.equals(grantType)) {\n            Authentication credentials = extractCredentials(request);\n            log.debug(\"Authentication credentials found password grant for '\" + credentials.getName() + \"'\");\n            authResult = authenticationManager.authenticate(credentials);\n\n            if (authResult != null && authResult.isAuthenticated() && authResult instanceof UaaAuthentication uaaAuthentication\n                    && SessionUtils.isPasswordChangeRequired(request.getSession())) {"
            },
            {
              "step": 1,
              "variableName": "Authentication req",
              "startLine": 65,
              "startColumn": 40,
              "endLine": 65,
              "endColumn": 58,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/manager/AuthzAuthenticationManager.java",
              "type": "Authentication",
              "code": "    }\n\n    @Override\n    public Authentication authenticate(Authentication req) throws AuthenticationException {\n        logger.debug(\"Processing authentication request for \" + req.getName());\n\n        if (req.getCredentials() == null) {"
            },
            {
              "step": 2,
              "variableName": "req",
              "startLine": 77,
              "startColumn": 46,
              "endLine": 77,
              "endColumn": 49,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/manager/AuthzAuthenticationManager.java",
              "type": "Authentication",
              "code": "        UaaUser user = getUaaUser(req);\n\n        if (user == null) {\n            logger.debug(\"No user named '\" + req.getName() + \"' was found for origin:\" + origin);\n            publish(new UserNotFoundEvent(req, IdentityZoneHolder.getCurrentZoneId()));\n        } else {\n            if (!accountLoginPolicy.isAllowed(user, req)) {"
            },
            {
              "step": 3,
              "variableName": "req.getName()",
              "startLine": 77,
              "startColumn": 46,
              "endLine": 77,
              "endColumn": 59,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/manager/AuthzAuthenticationManager.java",
              "type": "String",
              "code": "        UaaUser user = getUaaUser(req);\n\n        if (user == null) {\n            logger.debug(\"No user named '\" + req.getName() + \"' was found for origin:\" + origin);\n            publish(new UserNotFoundEvent(req, IdentityZoneHolder.getCurrentZoneId()));\n        } else {\n            if (!accountLoginPolicy.isAllowed(user, req)) {"
            },
            {
              "step": 4,
              "variableName": "\"No user named '\" + req.getName() + \"' was found for origin:\" + origin",
              "startLine": 77,
              "startColumn": 26,
              "endLine": 77,
              "endColumn": 96,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/manager/AuthzAuthenticationManager.java",
              "type": "",
              "code": "        UaaUser user = getUaaUser(req);\n\n        if (user == null) {\n            logger.debug(\"No user named '\" + req.getName() + \"' was found for origin:\" + origin);\n            publish(new UserNotFoundEvent(req, IdentityZoneHolder.getCurrentZoneId()));\n        } else {\n            if (!accountLoginPolicy.isAllowed(user, req)) {"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "credentials",
              "startLine": 221,
              "startColumn": 61,
              "endLine": 221,
              "endColumn": 72,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/BackwardsCompatibleTokenEndpointAuthenticationFilter.java",
              "type": "Authentication",
              "code": "        if (GRANT_TYPE_PASSWORD.equals(grantType)) {\n            Authentication credentials = extractCredentials(request);\n            log.debug(\"Authentication credentials found password grant for '\" + credentials.getName() + \"'\");\n            authResult = authenticationManager.authenticate(credentials);\n\n            if (authResult != null && authResult.isAuthenticated() && authResult instanceof UaaAuthentication uaaAuthentication\n                    && SessionUtils.isPasswordChangeRequired(request.getSession())) {"
            },
            {
              "step": 1,
              "variableName": "Authentication authentication",
              "startLine": 48,
              "startColumn": 40,
              "endLine": 48,
              "endColumn": 69,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/manager/ChainedAuthenticationManager.java",
              "type": "Authentication",
              "code": "    }\n\n    @Override\n    public Authentication authenticate(Authentication authentication) throws AuthenticationException {\n        if (!(authentication instanceof Authentication)) {\n            return null;\n        }"
            },
            {
              "step": 2,
              "variableName": "token",
              "startLine": 54,
              "startColumn": 22,
              "endLine": 54,
              "endColumn": 27,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/manager/ChainedAuthenticationManager.java",
              "type": "UsernamePasswordAuthenticationToken",
              "code": "        }\n        UsernamePasswordAuthenticationToken output = null;\n        if (authentication instanceof UsernamePasswordAuthenticationToken token) {\n            output = token;\n        } else {\n            output = new UsernamePasswordAuthenticationToken(authentication.getPrincipal(),\n                    (authentication.getCredentials() != null ? authentication.getCredentials().toString() : null),"
            },
            {
              "step": 3,
              "variableName": "auth != null ? auth : output",
              "startLine": 81,
              "startColumn": 85,
              "endLine": 81,
              "endColumn": 113,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/manager/ChainedAuthenticationManager.java",
              "type": "... : UsernamePasswordAuthenticationToken",
              "code": "                }\n                Authentication thisAuth = null;\n                try {\n                    thisAuth = delegates[i].getAuthenticationManager().authenticate(auth != null ? auth : output);\n                } catch (AuthenticationException x) {\n                    if (logger.isDebugEnabled()) {\n                        logger.debug(\"Chained authentication exception:\" + x.getMessage() + \" at:\" + (x.getStackTrace().length > 0 ? x.getStackTrace()[0] : \"(no stack trace)\"));"
            },
            {
              "step": 4,
              "variableName": "Authentication req",
              "startLine": 65,
              "startColumn": 40,
              "endLine": 65,
              "endColumn": 58,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/manager/AuthzAuthenticationManager.java",
              "type": "UsernamePasswordAuthenticationToken",
              "code": "    }\n\n    @Override\n    public Authentication authenticate(Authentication req) throws AuthenticationException {\n        logger.debug(\"Processing authentication request for \" + req.getName());\n\n        if (req.getCredentials() == null) {"
            },
            {
              "step": 5,
              "variableName": "req",
              "startLine": 77,
              "startColumn": 46,
              "endLine": 77,
              "endColumn": 49,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/manager/AuthzAuthenticationManager.java",
              "type": "UsernamePasswordAuthenticationToken",
              "code": "        UaaUser user = getUaaUser(req);\n\n        if (user == null) {\n            logger.debug(\"No user named '\" + req.getName() + \"' was found for origin:\" + origin);\n            publish(new UserNotFoundEvent(req, IdentityZoneHolder.getCurrentZoneId()));\n        } else {\n            if (!accountLoginPolicy.isAllowed(user, req)) {"
            },
            {
              "step": 6,
              "variableName": "req.getName()",
              "startLine": 77,
              "startColumn": 46,
              "endLine": 77,
              "endColumn": 59,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/manager/AuthzAuthenticationManager.java",
              "type": "String",
              "code": "        UaaUser user = getUaaUser(req);\n\n        if (user == null) {\n            logger.debug(\"No user named '\" + req.getName() + \"' was found for origin:\" + origin);\n            publish(new UserNotFoundEvent(req, IdentityZoneHolder.getCurrentZoneId()));\n        } else {\n            if (!accountLoginPolicy.isAllowed(user, req)) {"
            },
            {
              "step": 7,
              "variableName": "\"No user named '\" + req.getName() + \"' was found for origin:\" + origin",
              "startLine": 77,
              "startColumn": 26,
              "endLine": 77,
              "endColumn": 96,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/manager/AuthzAuthenticationManager.java",
              "type": "",
              "code": "        UaaUser user = getUaaUser(req);\n\n        if (user == null) {\n            logger.debug(\"No user named '\" + req.getName() + \"' was found for origin:\" + origin);\n            publish(new UserNotFoundEvent(req, IdentityZoneHolder.getCurrentZoneId()));\n        } else {\n            if (!accountLoginPolicy.isAllowed(user, req)) {"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "credentials",
              "startLine": 99,
              "startColumn": 80,
              "endLine": 99,
              "endColumn": 91,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/oauth/provider/endpoint/TokenEndpointAuthenticationFilter.java",
              "type": "Authentication",
              "code": "                    logger.debug(\"Authentication credentials found\");\n                }\n\n                Authentication authResult = authenticationManager.authenticate(credentials);\n\n                if (debug) {\n                    logger.debug(\"Authentication success: \" + authResult.getName());"
            },
            {
              "step": 1,
              "variableName": "Authentication req",
              "startLine": 65,
              "startColumn": 40,
              "endLine": 65,
              "endColumn": 58,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/manager/AuthzAuthenticationManager.java",
              "type": "Authentication",
              "code": "    }\n\n    @Override\n    public Authentication authenticate(Authentication req) throws AuthenticationException {\n        logger.debug(\"Processing authentication request for \" + req.getName());\n\n        if (req.getCredentials() == null) {"
            },
            {
              "step": 2,
              "variableName": "req",
              "startLine": 77,
              "startColumn": 46,
              "endLine": 77,
              "endColumn": 49,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/manager/AuthzAuthenticationManager.java",
              "type": "Authentication",
              "code": "        UaaUser user = getUaaUser(req);\n\n        if (user == null) {\n            logger.debug(\"No user named '\" + req.getName() + \"' was found for origin:\" + origin);\n            publish(new UserNotFoundEvent(req, IdentityZoneHolder.getCurrentZoneId()));\n        } else {\n            if (!accountLoginPolicy.isAllowed(user, req)) {"
            },
            {
              "step": 3,
              "variableName": "req.getName()",
              "startLine": 77,
              "startColumn": 46,
              "endLine": 77,
              "endColumn": 59,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/manager/AuthzAuthenticationManager.java",
              "type": "String",
              "code": "        UaaUser user = getUaaUser(req);\n\n        if (user == null) {\n            logger.debug(\"No user named '\" + req.getName() + \"' was found for origin:\" + origin);\n            publish(new UserNotFoundEvent(req, IdentityZoneHolder.getCurrentZoneId()));\n        } else {\n            if (!accountLoginPolicy.isAllowed(user, req)) {"
            },
            {
              "step": 4,
              "variableName": "\"No user named '\" + req.getName() + \"' was found for origin:\" + origin",
              "startLine": 77,
              "startColumn": 26,
              "endLine": 77,
              "endColumn": 96,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/manager/AuthzAuthenticationManager.java",
              "type": "",
              "code": "        UaaUser user = getUaaUser(req);\n\n        if (user == null) {\n            logger.debug(\"No user named '\" + req.getName() + \"' was found for origin:\" + origin);\n            publish(new UserNotFoundEvent(req, IdentityZoneHolder.getCurrentZoneId()));\n        } else {\n            if (!accountLoginPolicy.isAllowed(user, req)) {"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "credentials",
              "startLine": 99,
              "startColumn": 80,
              "endLine": 99,
              "endColumn": 91,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/oauth/provider/endpoint/TokenEndpointAuthenticationFilter.java",
              "type": "Authentication",
              "code": "                    logger.debug(\"Authentication credentials found\");\n                }\n\n                Authentication authResult = authenticationManager.authenticate(credentials);\n\n                if (debug) {\n                    logger.debug(\"Authentication success: \" + authResult.getName());"
            },
            {
              "step": 1,
              "variableName": "Authentication authentication",
              "startLine": 48,
              "startColumn": 40,
              "endLine": 48,
              "endColumn": 69,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/manager/ChainedAuthenticationManager.java",
              "type": "Authentication",
              "code": "    }\n\n    @Override\n    public Authentication authenticate(Authentication authentication) throws AuthenticationException {\n        if (!(authentication instanceof Authentication)) {\n            return null;\n        }"
            },
            {
              "step": 2,
              "variableName": "token",
              "startLine": 54,
              "startColumn": 22,
              "endLine": 54,
              "endColumn": 27,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/manager/ChainedAuthenticationManager.java",
              "type": "UsernamePasswordAuthenticationToken",
              "code": "        }\n        UsernamePasswordAuthenticationToken output = null;\n        if (authentication instanceof UsernamePasswordAuthenticationToken token) {\n            output = token;\n        } else {\n            output = new UsernamePasswordAuthenticationToken(authentication.getPrincipal(),\n                    (authentication.getCredentials() != null ? authentication.getCredentials().toString() : null),"
            },
            {
              "step": 3,
              "variableName": "auth != null ? auth : output",
              "startLine": 81,
              "startColumn": 85,
              "endLine": 81,
              "endColumn": 113,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/manager/ChainedAuthenticationManager.java",
              "type": "... : UsernamePasswordAuthenticationToken",
              "code": "                }\n                Authentication thisAuth = null;\n                try {\n                    thisAuth = delegates[i].getAuthenticationManager().authenticate(auth != null ? auth : output);\n                } catch (AuthenticationException x) {\n                    if (logger.isDebugEnabled()) {\n                        logger.debug(\"Chained authentication exception:\" + x.getMessage() + \" at:\" + (x.getStackTrace().length > 0 ? x.getStackTrace()[0] : \"(no stack trace)\"));"
            },
            {
              "step": 4,
              "variableName": "Authentication req",
              "startLine": 65,
              "startColumn": 40,
              "endLine": 65,
              "endColumn": 58,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/manager/AuthzAuthenticationManager.java",
              "type": "UsernamePasswordAuthenticationToken",
              "code": "    }\n\n    @Override\n    public Authentication authenticate(Authentication req) throws AuthenticationException {\n        logger.debug(\"Processing authentication request for \" + req.getName());\n\n        if (req.getCredentials() == null) {"
            },
            {
              "step": 5,
              "variableName": "req",
              "startLine": 77,
              "startColumn": 46,
              "endLine": 77,
              "endColumn": 49,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/manager/AuthzAuthenticationManager.java",
              "type": "UsernamePasswordAuthenticationToken",
              "code": "        UaaUser user = getUaaUser(req);\n\n        if (user == null) {\n            logger.debug(\"No user named '\" + req.getName() + \"' was found for origin:\" + origin);\n            publish(new UserNotFoundEvent(req, IdentityZoneHolder.getCurrentZoneId()));\n        } else {\n            if (!accountLoginPolicy.isAllowed(user, req)) {"
            },
            {
              "step": 6,
              "variableName": "req.getName()",
              "startLine": 77,
              "startColumn": 46,
              "endLine": 77,
              "endColumn": 59,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/manager/AuthzAuthenticationManager.java",
              "type": "String",
              "code": "        UaaUser user = getUaaUser(req);\n\n        if (user == null) {\n            logger.debug(\"No user named '\" + req.getName() + \"' was found for origin:\" + origin);\n            publish(new UserNotFoundEvent(req, IdentityZoneHolder.getCurrentZoneId()));\n        } else {\n            if (!accountLoginPolicy.isAllowed(user, req)) {"
            },
            {
              "step": 7,
              "variableName": "\"No user named '\" + req.getName() + \"' was found for origin:\" + origin",
              "startLine": 77,
              "startColumn": 26,
              "endLine": 77,
              "endColumn": 96,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/manager/AuthzAuthenticationManager.java",
              "type": "",
              "code": "        UaaUser user = getUaaUser(req);\n\n        if (user == null) {\n            logger.debug(\"No user named '\" + req.getName() + \"' was found for origin:\" + origin);\n            publish(new UserNotFoundEvent(req, IdentityZoneHolder.getCurrentZoneId()));\n        } else {\n            if (!accountLoginPolicy.isAllowed(user, req)) {"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 5,
      "fileName": "AuthzAuthenticationManager.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "credentials",
              "startLine": 221,
              "startColumn": 61,
              "endLine": 221,
              "endColumn": 72,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/BackwardsCompatibleTokenEndpointAuthenticationFilter.java",
              "type": "Authentication",
              "code": "        if (GRANT_TYPE_PASSWORD.equals(grantType)) {\n            Authentication credentials = extractCredentials(request);\n            log.debug(\"Authentication credentials found password grant for '\" + credentials.getName() + \"'\");\n            authResult = authenticationManager.authenticate(credentials);\n\n            if (authResult != null && authResult.isAuthenticated() && authResult instanceof UaaAuthentication uaaAuthentication\n                    && SessionUtils.isPasswordChangeRequired(request.getSession())) {"
            },
            {
              "step": 1,
              "variableName": "Authentication req",
              "startLine": 65,
              "startColumn": 40,
              "endLine": 65,
              "endColumn": 58,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/manager/AuthzAuthenticationManager.java",
              "type": "Authentication",
              "code": "    }\n\n    @Override\n    public Authentication authenticate(Authentication req) throws AuthenticationException {\n        logger.debug(\"Processing authentication request for \" + req.getName());\n\n        if (req.getCredentials() == null) {"
            },
            {
              "step": 2,
              "variableName": "req",
              "startLine": 91,
              "startColumn": 67,
              "endLine": 91,
              "endColumn": 70,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/manager/AuthzAuthenticationManager.java",
              "type": "Authentication",
              "code": "            boolean passwordMatches = ((CharSequence) req.getCredentials()).length() != 0 && encoder.matches((CharSequence) req.getCredentials(), user.getPassword());\n\n            if (!passwordMatches) {\n                logger.debug(\"Password did not match for user \" + req.getName());\n                publish(new IdentityProviderAuthenticationFailureEvent(req, req.getName(), OriginKeys.UAA, IdentityZoneHolder.getCurrentZoneId()));\n                publish(new UserAuthenticationFailureEvent(user, req, IdentityZoneHolder.getCurrentZoneId()));\n            } else {"
            },
            {
              "step": 3,
              "variableName": "req.getName()",
              "startLine": 91,
              "startColumn": 67,
              "endLine": 91,
              "endColumn": 80,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/manager/AuthzAuthenticationManager.java",
              "type": "String",
              "code": "            boolean passwordMatches = ((CharSequence) req.getCredentials()).length() != 0 && encoder.matches((CharSequence) req.getCredentials(), user.getPassword());\n\n            if (!passwordMatches) {\n                logger.debug(\"Password did not match for user \" + req.getName());\n                publish(new IdentityProviderAuthenticationFailureEvent(req, req.getName(), OriginKeys.UAA, IdentityZoneHolder.getCurrentZoneId()));\n                publish(new UserAuthenticationFailureEvent(user, req, IdentityZoneHolder.getCurrentZoneId()));\n            } else {"
            },
            {
              "step": 4,
              "variableName": "\"Password did not match for user \" + req.getName()",
              "startLine": 91,
              "startColumn": 30,
              "endLine": 91,
              "endColumn": 80,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/manager/AuthzAuthenticationManager.java",
              "type": "",
              "code": "            boolean passwordMatches = ((CharSequence) req.getCredentials()).length() != 0 && encoder.matches((CharSequence) req.getCredentials(), user.getPassword());\n\n            if (!passwordMatches) {\n                logger.debug(\"Password did not match for user \" + req.getName());\n                publish(new IdentityProviderAuthenticationFailureEvent(req, req.getName(), OriginKeys.UAA, IdentityZoneHolder.getCurrentZoneId()));\n                publish(new UserAuthenticationFailureEvent(user, req, IdentityZoneHolder.getCurrentZoneId()));\n            } else {"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "credentials",
              "startLine": 221,
              "startColumn": 61,
              "endLine": 221,
              "endColumn": 72,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/BackwardsCompatibleTokenEndpointAuthenticationFilter.java",
              "type": "Authentication",
              "code": "        if (GRANT_TYPE_PASSWORD.equals(grantType)) {\n            Authentication credentials = extractCredentials(request);\n            log.debug(\"Authentication credentials found password grant for '\" + credentials.getName() + \"'\");\n            authResult = authenticationManager.authenticate(credentials);\n\n            if (authResult != null && authResult.isAuthenticated() && authResult instanceof UaaAuthentication uaaAuthentication\n                    && SessionUtils.isPasswordChangeRequired(request.getSession())) {"
            },
            {
              "step": 1,
              "variableName": "Authentication authentication",
              "startLine": 48,
              "startColumn": 40,
              "endLine": 48,
              "endColumn": 69,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/manager/ChainedAuthenticationManager.java",
              "type": "Authentication",
              "code": "    }\n\n    @Override\n    public Authentication authenticate(Authentication authentication) throws AuthenticationException {\n        if (!(authentication instanceof Authentication)) {\n            return null;\n        }"
            },
            {
              "step": 2,
              "variableName": "token",
              "startLine": 54,
              "startColumn": 22,
              "endLine": 54,
              "endColumn": 27,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/manager/ChainedAuthenticationManager.java",
              "type": "UsernamePasswordAuthenticationToken",
              "code": "        }\n        UsernamePasswordAuthenticationToken output = null;\n        if (authentication instanceof UsernamePasswordAuthenticationToken token) {\n            output = token;\n        } else {\n            output = new UsernamePasswordAuthenticationToken(authentication.getPrincipal(),\n                    (authentication.getCredentials() != null ? authentication.getCredentials().toString() : null),"
            },
            {
              "step": 3,
              "variableName": "auth != null ? auth : output",
              "startLine": 81,
              "startColumn": 85,
              "endLine": 81,
              "endColumn": 113,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/manager/ChainedAuthenticationManager.java",
              "type": "... : UsernamePasswordAuthenticationToken",
              "code": "                }\n                Authentication thisAuth = null;\n                try {\n                    thisAuth = delegates[i].getAuthenticationManager().authenticate(auth != null ? auth : output);\n                } catch (AuthenticationException x) {\n                    if (logger.isDebugEnabled()) {\n                        logger.debug(\"Chained authentication exception:\" + x.getMessage() + \" at:\" + (x.getStackTrace().length > 0 ? x.getStackTrace()[0] : \"(no stack trace)\"));"
            },
            {
              "step": 4,
              "variableName": "Authentication req",
              "startLine": 65,
              "startColumn": 40,
              "endLine": 65,
              "endColumn": 58,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/manager/AuthzAuthenticationManager.java",
              "type": "UsernamePasswordAuthenticationToken",
              "code": "    }\n\n    @Override\n    public Authentication authenticate(Authentication req) throws AuthenticationException {\n        logger.debug(\"Processing authentication request for \" + req.getName());\n\n        if (req.getCredentials() == null) {"
            },
            {
              "step": 5,
              "variableName": "req",
              "startLine": 91,
              "startColumn": 67,
              "endLine": 91,
              "endColumn": 70,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/manager/AuthzAuthenticationManager.java",
              "type": "UsernamePasswordAuthenticationToken",
              "code": "            boolean passwordMatches = ((CharSequence) req.getCredentials()).length() != 0 && encoder.matches((CharSequence) req.getCredentials(), user.getPassword());\n\n            if (!passwordMatches) {\n                logger.debug(\"Password did not match for user \" + req.getName());\n                publish(new IdentityProviderAuthenticationFailureEvent(req, req.getName(), OriginKeys.UAA, IdentityZoneHolder.getCurrentZoneId()));\n                publish(new UserAuthenticationFailureEvent(user, req, IdentityZoneHolder.getCurrentZoneId()));\n            } else {"
            },
            {
              "step": 6,
              "variableName": "req.getName()",
              "startLine": 91,
              "startColumn": 67,
              "endLine": 91,
              "endColumn": 80,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/manager/AuthzAuthenticationManager.java",
              "type": "String",
              "code": "            boolean passwordMatches = ((CharSequence) req.getCredentials()).length() != 0 && encoder.matches((CharSequence) req.getCredentials(), user.getPassword());\n\n            if (!passwordMatches) {\n                logger.debug(\"Password did not match for user \" + req.getName());\n                publish(new IdentityProviderAuthenticationFailureEvent(req, req.getName(), OriginKeys.UAA, IdentityZoneHolder.getCurrentZoneId()));\n                publish(new UserAuthenticationFailureEvent(user, req, IdentityZoneHolder.getCurrentZoneId()));\n            } else {"
            },
            {
              "step": 7,
              "variableName": "\"Password did not match for user \" + req.getName()",
              "startLine": 91,
              "startColumn": 30,
              "endLine": 91,
              "endColumn": 80,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/manager/AuthzAuthenticationManager.java",
              "type": "",
              "code": "            boolean passwordMatches = ((CharSequence) req.getCredentials()).length() != 0 && encoder.matches((CharSequence) req.getCredentials(), user.getPassword());\n\n            if (!passwordMatches) {\n                logger.debug(\"Password did not match for user \" + req.getName());\n                publish(new IdentityProviderAuthenticationFailureEvent(req, req.getName(), OriginKeys.UAA, IdentityZoneHolder.getCurrentZoneId()));\n                publish(new UserAuthenticationFailureEvent(user, req, IdentityZoneHolder.getCurrentZoneId()));\n            } else {"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "credentials",
              "startLine": 99,
              "startColumn": 80,
              "endLine": 99,
              "endColumn": 91,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/oauth/provider/endpoint/TokenEndpointAuthenticationFilter.java",
              "type": "Authentication",
              "code": "                    logger.debug(\"Authentication credentials found\");\n                }\n\n                Authentication authResult = authenticationManager.authenticate(credentials);\n\n                if (debug) {\n                    logger.debug(\"Authentication success: \" + authResult.getName());"
            },
            {
              "step": 1,
              "variableName": "Authentication req",
              "startLine": 65,
              "startColumn": 40,
              "endLine": 65,
              "endColumn": 58,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/manager/AuthzAuthenticationManager.java",
              "type": "Authentication",
              "code": "    }\n\n    @Override\n    public Authentication authenticate(Authentication req) throws AuthenticationException {\n        logger.debug(\"Processing authentication request for \" + req.getName());\n\n        if (req.getCredentials() == null) {"
            },
            {
              "step": 2,
              "variableName": "req",
              "startLine": 91,
              "startColumn": 67,
              "endLine": 91,
              "endColumn": 70,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/manager/AuthzAuthenticationManager.java",
              "type": "Authentication",
              "code": "            boolean passwordMatches = ((CharSequence) req.getCredentials()).length() != 0 && encoder.matches((CharSequence) req.getCredentials(), user.getPassword());\n\n            if (!passwordMatches) {\n                logger.debug(\"Password did not match for user \" + req.getName());\n                publish(new IdentityProviderAuthenticationFailureEvent(req, req.getName(), OriginKeys.UAA, IdentityZoneHolder.getCurrentZoneId()));\n                publish(new UserAuthenticationFailureEvent(user, req, IdentityZoneHolder.getCurrentZoneId()));\n            } else {"
            },
            {
              "step": 3,
              "variableName": "req.getName()",
              "startLine": 91,
              "startColumn": 67,
              "endLine": 91,
              "endColumn": 80,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/manager/AuthzAuthenticationManager.java",
              "type": "String",
              "code": "            boolean passwordMatches = ((CharSequence) req.getCredentials()).length() != 0 && encoder.matches((CharSequence) req.getCredentials(), user.getPassword());\n\n            if (!passwordMatches) {\n                logger.debug(\"Password did not match for user \" + req.getName());\n                publish(new IdentityProviderAuthenticationFailureEvent(req, req.getName(), OriginKeys.UAA, IdentityZoneHolder.getCurrentZoneId()));\n                publish(new UserAuthenticationFailureEvent(user, req, IdentityZoneHolder.getCurrentZoneId()));\n            } else {"
            },
            {
              "step": 4,
              "variableName": "\"Password did not match for user \" + req.getName()",
              "startLine": 91,
              "startColumn": 30,
              "endLine": 91,
              "endColumn": 80,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/manager/AuthzAuthenticationManager.java",
              "type": "",
              "code": "            boolean passwordMatches = ((CharSequence) req.getCredentials()).length() != 0 && encoder.matches((CharSequence) req.getCredentials(), user.getPassword());\n\n            if (!passwordMatches) {\n                logger.debug(\"Password did not match for user \" + req.getName());\n                publish(new IdentityProviderAuthenticationFailureEvent(req, req.getName(), OriginKeys.UAA, IdentityZoneHolder.getCurrentZoneId()));\n                publish(new UserAuthenticationFailureEvent(user, req, IdentityZoneHolder.getCurrentZoneId()));\n            } else {"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "credentials",
              "startLine": 99,
              "startColumn": 80,
              "endLine": 99,
              "endColumn": 91,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/oauth/provider/endpoint/TokenEndpointAuthenticationFilter.java",
              "type": "Authentication",
              "code": "                    logger.debug(\"Authentication credentials found\");\n                }\n\n                Authentication authResult = authenticationManager.authenticate(credentials);\n\n                if (debug) {\n                    logger.debug(\"Authentication success: \" + authResult.getName());"
            },
            {
              "step": 1,
              "variableName": "Authentication authentication",
              "startLine": 48,
              "startColumn": 40,
              "endLine": 48,
              "endColumn": 69,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/manager/ChainedAuthenticationManager.java",
              "type": "Authentication",
              "code": "    }\n\n    @Override\n    public Authentication authenticate(Authentication authentication) throws AuthenticationException {\n        if (!(authentication instanceof Authentication)) {\n            return null;\n        }"
            },
            {
              "step": 2,
              "variableName": "token",
              "startLine": 54,
              "startColumn": 22,
              "endLine": 54,
              "endColumn": 27,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/manager/ChainedAuthenticationManager.java",
              "type": "UsernamePasswordAuthenticationToken",
              "code": "        }\n        UsernamePasswordAuthenticationToken output = null;\n        if (authentication instanceof UsernamePasswordAuthenticationToken token) {\n            output = token;\n        } else {\n            output = new UsernamePasswordAuthenticationToken(authentication.getPrincipal(),\n                    (authentication.getCredentials() != null ? authentication.getCredentials().toString() : null),"
            },
            {
              "step": 3,
              "variableName": "auth != null ? auth : output",
              "startLine": 81,
              "startColumn": 85,
              "endLine": 81,
              "endColumn": 113,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/manager/ChainedAuthenticationManager.java",
              "type": "... : UsernamePasswordAuthenticationToken",
              "code": "                }\n                Authentication thisAuth = null;\n                try {\n                    thisAuth = delegates[i].getAuthenticationManager().authenticate(auth != null ? auth : output);\n                } catch (AuthenticationException x) {\n                    if (logger.isDebugEnabled()) {\n                        logger.debug(\"Chained authentication exception:\" + x.getMessage() + \" at:\" + (x.getStackTrace().length > 0 ? x.getStackTrace()[0] : \"(no stack trace)\"));"
            },
            {
              "step": 4,
              "variableName": "Authentication req",
              "startLine": 65,
              "startColumn": 40,
              "endLine": 65,
              "endColumn": 58,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/manager/AuthzAuthenticationManager.java",
              "type": "UsernamePasswordAuthenticationToken",
              "code": "    }\n\n    @Override\n    public Authentication authenticate(Authentication req) throws AuthenticationException {\n        logger.debug(\"Processing authentication request for \" + req.getName());\n\n        if (req.getCredentials() == null) {"
            },
            {
              "step": 5,
              "variableName": "req",
              "startLine": 91,
              "startColumn": 67,
              "endLine": 91,
              "endColumn": 70,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/manager/AuthzAuthenticationManager.java",
              "type": "UsernamePasswordAuthenticationToken",
              "code": "            boolean passwordMatches = ((CharSequence) req.getCredentials()).length() != 0 && encoder.matches((CharSequence) req.getCredentials(), user.getPassword());\n\n            if (!passwordMatches) {\n                logger.debug(\"Password did not match for user \" + req.getName());\n                publish(new IdentityProviderAuthenticationFailureEvent(req, req.getName(), OriginKeys.UAA, IdentityZoneHolder.getCurrentZoneId()));\n                publish(new UserAuthenticationFailureEvent(user, req, IdentityZoneHolder.getCurrentZoneId()));\n            } else {"
            },
            {
              "step": 6,
              "variableName": "req.getName()",
              "startLine": 91,
              "startColumn": 67,
              "endLine": 91,
              "endColumn": 80,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/manager/AuthzAuthenticationManager.java",
              "type": "String",
              "code": "            boolean passwordMatches = ((CharSequence) req.getCredentials()).length() != 0 && encoder.matches((CharSequence) req.getCredentials(), user.getPassword());\n\n            if (!passwordMatches) {\n                logger.debug(\"Password did not match for user \" + req.getName());\n                publish(new IdentityProviderAuthenticationFailureEvent(req, req.getName(), OriginKeys.UAA, IdentityZoneHolder.getCurrentZoneId()));\n                publish(new UserAuthenticationFailureEvent(user, req, IdentityZoneHolder.getCurrentZoneId()));\n            } else {"
            },
            {
              "step": 7,
              "variableName": "\"Password did not match for user \" + req.getName()",
              "startLine": 91,
              "startColumn": 30,
              "endLine": 91,
              "endColumn": 80,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/manager/AuthzAuthenticationManager.java",
              "type": "",
              "code": "            boolean passwordMatches = ((CharSequence) req.getCredentials()).length() != 0 && encoder.matches((CharSequence) req.getCredentials(), user.getPassword());\n\n            if (!passwordMatches) {\n                logger.debug(\"Password did not match for user \" + req.getName());\n                publish(new IdentityProviderAuthenticationFailureEvent(req, req.getName(), OriginKeys.UAA, IdentityZoneHolder.getCurrentZoneId()));\n                publish(new UserAuthenticationFailureEvent(user, req, IdentityZoneHolder.getCurrentZoneId()));\n            } else {"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 6,
      "fileName": "ExternalLoginAuthenticationManager.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "credentials",
              "startLine": 221,
              "startColumn": 61,
              "endLine": 221,
              "endColumn": 72,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/BackwardsCompatibleTokenEndpointAuthenticationFilter.java",
              "type": "Authentication",
              "code": "        if (GRANT_TYPE_PASSWORD.equals(grantType)) {\n            Authentication credentials = extractCredentials(request);\n            log.debug(\"Authentication credentials found password grant for '\" + credentials.getName() + \"'\");\n            authResult = authenticationManager.authenticate(credentials);\n\n            if (authResult != null && authResult.isAuthenticated() && authResult instanceof UaaAuthentication uaaAuthentication\n                    && SessionUtils.isPasswordChangeRequired(request.getSession())) {"
            },
            {
              "step": 1,
              "variableName": "Authentication request",
              "startLine": 117,
              "startColumn": 40,
              "endLine": 117,
              "endColumn": 62,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/manager/ExternalLoginAuthenticationManager.java",
              "type": "Authentication",
              "code": "    }\n\n    @Override\n    public Authentication authenticate(Authentication request) throws AuthenticationException {\n        if (logger.isDebugEnabled()) {\n            logger.debug(\"Starting external authentication for:{}\", UaaStringUtils.getCleanedUserControlString(request.toString()));\n        }"
            },
            {
              "step": 2,
              "variableName": "request",
              "startLine": 119,
              "startColumn": 112,
              "endLine": 119,
              "endColumn": 119,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/manager/ExternalLoginAuthenticationManager.java",
              "type": "Authentication",
              "code": "    @Override\n    public Authentication authenticate(Authentication request) throws AuthenticationException {\n        if (logger.isDebugEnabled()) {\n            logger.debug(\"Starting external authentication for:{}\", UaaStringUtils.getCleanedUserControlString(request.toString()));\n        }\n        ExternalAuthenticationDetails authenticationData = getExternalAuthenticationDetails(request);\n        UaaUser userFromRequest = getUser(request, authenticationData);"
            },
            {
              "step": 3,
              "variableName": "parameter this : UaaAuthentication",
              "startLine": 43,
              "endLine": 43,
              "endColumn": 10,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/UaaAuthentication.java",
              "type": "UaaAuthentication",
              "code": "@JsonDeserialize(using = UaaAuthenticationDeserializer.class)\n@Getter\n@Setter\n@ToString\npublic class UaaAuthentication extends AbstractAuthenticationToken\n        implements Authentication, Serializable {\n"
            },
            {
              "step": 4,
              "variableName": "this : UaaAuthentication",
              "startLine": 43,
              "endLine": 43,
              "endColumn": 10,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/UaaAuthentication.java",
              "type": "UaaAuthentication",
              "code": "@JsonDeserialize(using = UaaAuthenticationDeserializer.class)\n@Getter\n@Setter\n@ToString\npublic class UaaAuthentication extends AbstractAuthenticationToken\n        implements Authentication, Serializable {\n"
            },
            {
              "step": 5,
              "variableName": "principal;",
              "startLine": 48,
              "startColumn": 32,
              "endLine": 48,
              "endColumn": 42,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/UaaAuthentication.java",
              "type": "UaaAuthentication",
              "code": "        implements Authentication, Serializable {\n\n    private final Object credentials;\n    private final UaaPrincipal principal;\n    private long authenticatedTime = -1L;\n    private long expiresAt = -1L;\n    private Set<String> externalGroups;"
            },
            {
              "step": 6,
              "variableName": "principal;",
              "startLine": 48,
              "startColumn": 32,
              "endLine": 48,
              "endColumn": 42,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/UaaAuthentication.java",
              "type": "UaaPrincipal",
              "code": "        implements Authentication, Serializable {\n\n    private final Object credentials;\n    private final UaaPrincipal principal;\n    private long authenticatedTime = -1L;\n    private long expiresAt = -1L;\n    private Set<String> externalGroups;"
            },
            {
              "step": 7,
              "variableName": "getPrincipal(...) : UaaPrincipal",
              "startLine": 43,
              "endLine": 43,
              "endColumn": 10,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/UaaAuthentication.java",
              "type": "UaaPrincipal",
              "code": "@JsonDeserialize(using = UaaAuthenticationDeserializer.class)\n@Getter\n@Setter\n@ToString\npublic class UaaAuthentication extends AbstractAuthenticationToken\n        implements Authentication, Serializable {\n"
            },
            {
              "step": 8,
              "variableName": "... + ... : String",
              "startLine": 43,
              "endLine": 43,
              "endColumn": 10,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/UaaAuthentication.java",
              "type": "String",
              "code": "@JsonDeserialize(using = UaaAuthenticationDeserializer.class)\n@Getter\n@Setter\n@ToString\npublic class UaaAuthentication extends AbstractAuthenticationToken\n        implements Authentication, Serializable {\n"
            },
            {
              "step": 9,
              "variableName": "request.toString()",
              "startLine": 119,
              "startColumn": 112,
              "endLine": 119,
              "endColumn": 130,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/manager/ExternalLoginAuthenticationManager.java",
              "type": "String",
              "code": "    @Override\n    public Authentication authenticate(Authentication request) throws AuthenticationException {\n        if (logger.isDebugEnabled()) {\n            logger.debug(\"Starting external authentication for:{}\", UaaStringUtils.getCleanedUserControlString(request.toString()));\n        }\n        ExternalAuthenticationDetails authenticationData = getExternalAuthenticationDetails(request);\n        UaaUser userFromRequest = getUser(request, authenticationData);"
            },
            {
              "step": 10,
              "variableName": "String input",
              "startLine": 317,
              "startColumn": 54,
              "endLine": 317,
              "endColumn": 66,
              "uri": "uaa-77.28.0/model/src/main/java/org/cloudfoundry/identity/uaa/util/UaaStringUtils.java",
              "type": "String",
              "code": "        return result.substring(1, result.length() - 1);\n    }\n\n    public static String getCleanedUserControlString(String input) {\n        if (input == null) {\n            return null;\n        }"
            },
            {
              "step": 11,
              "variableName": "input",
              "startLine": 321,
              "startColumn": 37,
              "endLine": 321,
              "endColumn": 42,
              "uri": "uaa-77.28.0/model/src/main/java/org/cloudfoundry/identity/uaa/util/UaaStringUtils.java",
              "type": "String",
              "code": "        if (input == null) {\n            return null;\n        }\n        return CTRL_PATTERN.matcher(input).replaceAll(\"_\");\n    }\n\n    public static String getValidatedString(String input) {"
            },
            {
              "step": 12,
              "variableName": "CTRL_PATTERN.matcher(input)",
              "startLine": 321,
              "startColumn": 16,
              "endLine": 321,
              "endColumn": 43,
              "uri": "uaa-77.28.0/model/src/main/java/org/cloudfoundry/identity/uaa/util/UaaStringUtils.java",
              "type": "Matcher",
              "code": "        if (input == null) {\n            return null;\n        }\n        return CTRL_PATTERN.matcher(input).replaceAll(\"_\");\n    }\n\n    public static String getValidatedString(String input) {"
            },
            {
              "step": 13,
              "variableName": "CTRL_PATTERN.matcher(input).replaceAll(\"_\")",
              "startLine": 321,
              "startColumn": 16,
              "endLine": 321,
              "endColumn": 59,
              "uri": "uaa-77.28.0/model/src/main/java/org/cloudfoundry/identity/uaa/util/UaaStringUtils.java",
              "type": "String",
              "code": "        if (input == null) {\n            return null;\n        }\n        return CTRL_PATTERN.matcher(input).replaceAll(\"_\");\n    }\n\n    public static String getValidatedString(String input) {"
            },
            {
              "step": 14,
              "variableName": "UaaStringUtils.getCleanedUserControlString(request.toString())",
              "startLine": 119,
              "startColumn": 69,
              "endLine": 119,
              "endColumn": 131,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/manager/ExternalLoginAuthenticationManager.java",
              "type": "",
              "code": "    @Override\n    public Authentication authenticate(Authentication request) throws AuthenticationException {\n        if (logger.isDebugEnabled()) {\n            logger.debug(\"Starting external authentication for:{}\", UaaStringUtils.getCleanedUserControlString(request.toString()));\n        }\n        ExternalAuthenticationDetails authenticationData = getExternalAuthenticationDetails(request);\n        UaaUser userFromRequest = getUser(request, authenticationData);"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "credentials",
              "startLine": 221,
              "startColumn": 61,
              "endLine": 221,
              "endColumn": 72,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/BackwardsCompatibleTokenEndpointAuthenticationFilter.java",
              "type": "Authentication",
              "code": "        if (GRANT_TYPE_PASSWORD.equals(grantType)) {\n            Authentication credentials = extractCredentials(request);\n            log.debug(\"Authentication credentials found password grant for '\" + credentials.getName() + \"'\");\n            authResult = authenticationManager.authenticate(credentials);\n\n            if (authResult != null && authResult.isAuthenticated() && authResult instanceof UaaAuthentication uaaAuthentication\n                    && SessionUtils.isPasswordChangeRequired(request.getSession())) {"
            },
            {
              "step": 1,
              "variableName": "Authentication authentication",
              "startLine": 173,
              "startColumn": 44,
              "endLine": 173,
              "endColumn": 73,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/PasscodeAuthenticationFilter.java",
              "type": "Authentication",
              "code": "        }\n\n        @Override\n        public Authentication authenticate(Authentication authentication) throws AuthenticationException {\n            if (!(authentication instanceof PasscodeAuthenticationFilter.ExpiringCodeAuthentication expiringCodeAuthentication)) {\n                return parent.authenticate(authentication);\n            } else {"
            },
            {
              "step": 2,
              "variableName": "authentication",
              "startLine": 175,
              "startColumn": 44,
              "endLine": 175,
              "endColumn": 58,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/PasscodeAuthenticationFilter.java",
              "type": "Authentication",
              "code": "        @Override\n        public Authentication authenticate(Authentication authentication) throws AuthenticationException {\n            if (!(authentication instanceof PasscodeAuthenticationFilter.ExpiringCodeAuthentication expiringCodeAuthentication)) {\n                return parent.authenticate(authentication);\n            } else {\n                // Validate passcode\n                logger.debug(\"Located credentials in request, with passcode\");"
            },
            {
              "step": 3,
              "variableName": "Authentication request",
              "startLine": 117,
              "startColumn": 40,
              "endLine": 117,
              "endColumn": 62,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/manager/ExternalLoginAuthenticationManager.java",
              "type": "Authentication",
              "code": "    }\n\n    @Override\n    public Authentication authenticate(Authentication request) throws AuthenticationException {\n        if (logger.isDebugEnabled()) {\n            logger.debug(\"Starting external authentication for:{}\", UaaStringUtils.getCleanedUserControlString(request.toString()));\n        }"
            },
            {
              "step": 4,
              "variableName": "request",
              "startLine": 119,
              "startColumn": 112,
              "endLine": 119,
              "endColumn": 119,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/manager/ExternalLoginAuthenticationManager.java",
              "type": "Authentication",
              "code": "    @Override\n    public Authentication authenticate(Authentication request) throws AuthenticationException {\n        if (logger.isDebugEnabled()) {\n            logger.debug(\"Starting external authentication for:{}\", UaaStringUtils.getCleanedUserControlString(request.toString()));\n        }\n        ExternalAuthenticationDetails authenticationData = getExternalAuthenticationDetails(request);\n        UaaUser userFromRequest = getUser(request, authenticationData);"
            },
            {
              "step": 5,
              "variableName": "parameter this : UaaAuthentication",
              "startLine": 43,
              "endLine": 43,
              "endColumn": 10,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/UaaAuthentication.java",
              "type": "UaaAuthentication",
              "code": "@JsonDeserialize(using = UaaAuthenticationDeserializer.class)\n@Getter\n@Setter\n@ToString\npublic class UaaAuthentication extends AbstractAuthenticationToken\n        implements Authentication, Serializable {\n"
            },
            {
              "step": 6,
              "variableName": "this : UaaAuthentication",
              "startLine": 43,
              "endLine": 43,
              "endColumn": 10,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/UaaAuthentication.java",
              "type": "UaaAuthentication",
              "code": "@JsonDeserialize(using = UaaAuthenticationDeserializer.class)\n@Getter\n@Setter\n@ToString\npublic class UaaAuthentication extends AbstractAuthenticationToken\n        implements Authentication, Serializable {\n"
            },
            {
              "step": 7,
              "variableName": "externalGroups;",
              "startLine": 51,
              "startColumn": 25,
              "endLine": 51,
              "endColumn": 40,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/UaaAuthentication.java",
              "type": "UaaAuthentication",
              "code": "    private final UaaPrincipal principal;\n    private long authenticatedTime = -1L;\n    private long expiresAt = -1L;\n    private Set<String> externalGroups;\n    private Set<String> authenticationMethods;\n    private Set<String> authContextClassRef;\n    private Long lastLoginSuccessTime;"
            },
            {
              "step": 8,
              "variableName": "externalGroups;",
              "startLine": 51,
              "startColumn": 25,
              "endLine": 51,
              "endColumn": 40,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/UaaAuthentication.java",
              "type": "Set",
              "code": "    private final UaaPrincipal principal;\n    private long authenticatedTime = -1L;\n    private long expiresAt = -1L;\n    private Set<String> externalGroups;\n    private Set<String> authenticationMethods;\n    private Set<String> authContextClassRef;\n    private Long lastLoginSuccessTime;"
            },
            {
              "step": 9,
              "variableName": "getExternalGroups(...) : Set",
              "startLine": 43,
              "endLine": 43,
              "endColumn": 10,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/UaaAuthentication.java",
              "type": "Set",
              "code": "@JsonDeserialize(using = UaaAuthenticationDeserializer.class)\n@Getter\n@Setter\n@ToString\npublic class UaaAuthentication extends AbstractAuthenticationToken\n        implements Authentication, Serializable {\n"
            },
            {
              "step": 10,
              "variableName": "... + ... : String",
              "startLine": 43,
              "endLine": 43,
              "endColumn": 10,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/UaaAuthentication.java",
              "type": "String",
              "code": "@JsonDeserialize(using = UaaAuthenticationDeserializer.class)\n@Getter\n@Setter\n@ToString\npublic class UaaAuthentication extends AbstractAuthenticationToken\n        implements Authentication, Serializable {\n"
            },
            {
              "step": 11,
              "variableName": "request.toString()",
              "startLine": 119,
              "startColumn": 112,
              "endLine": 119,
              "endColumn": 130,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/manager/ExternalLoginAuthenticationManager.java",
              "type": "String",
              "code": "    @Override\n    public Authentication authenticate(Authentication request) throws AuthenticationException {\n        if (logger.isDebugEnabled()) {\n            logger.debug(\"Starting external authentication for:{}\", UaaStringUtils.getCleanedUserControlString(request.toString()));\n        }\n        ExternalAuthenticationDetails authenticationData = getExternalAuthenticationDetails(request);\n        UaaUser userFromRequest = getUser(request, authenticationData);"
            },
            {
              "step": 12,
              "variableName": "String input",
              "startLine": 317,
              "startColumn": 54,
              "endLine": 317,
              "endColumn": 66,
              "uri": "uaa-77.28.0/model/src/main/java/org/cloudfoundry/identity/uaa/util/UaaStringUtils.java",
              "type": "String",
              "code": "        return result.substring(1, result.length() - 1);\n    }\n\n    public static String getCleanedUserControlString(String input) {\n        if (input == null) {\n            return null;\n        }"
            },
            {
              "step": 13,
              "variableName": "input",
              "startLine": 321,
              "startColumn": 37,
              "endLine": 321,
              "endColumn": 42,
              "uri": "uaa-77.28.0/model/src/main/java/org/cloudfoundry/identity/uaa/util/UaaStringUtils.java",
              "type": "String",
              "code": "        if (input == null) {\n            return null;\n        }\n        return CTRL_PATTERN.matcher(input).replaceAll(\"_\");\n    }\n\n    public static String getValidatedString(String input) {"
            },
            {
              "step": 14,
              "variableName": "CTRL_PATTERN.matcher(input)",
              "startLine": 321,
              "startColumn": 16,
              "endLine": 321,
              "endColumn": 43,
              "uri": "uaa-77.28.0/model/src/main/java/org/cloudfoundry/identity/uaa/util/UaaStringUtils.java",
              "type": "Matcher",
              "code": "        if (input == null) {\n            return null;\n        }\n        return CTRL_PATTERN.matcher(input).replaceAll(\"_\");\n    }\n\n    public static String getValidatedString(String input) {"
            },
            {
              "step": 15,
              "variableName": "CTRL_PATTERN.matcher(input).replaceAll(\"_\")",
              "startLine": 321,
              "startColumn": 16,
              "endLine": 321,
              "endColumn": 59,
              "uri": "uaa-77.28.0/model/src/main/java/org/cloudfoundry/identity/uaa/util/UaaStringUtils.java",
              "type": "String",
              "code": "        if (input == null) {\n            return null;\n        }\n        return CTRL_PATTERN.matcher(input).replaceAll(\"_\");\n    }\n\n    public static String getValidatedString(String input) {"
            },
            {
              "step": 16,
              "variableName": "UaaStringUtils.getCleanedUserControlString(request.toString())",
              "startLine": 119,
              "startColumn": 69,
              "endLine": 119,
              "endColumn": 131,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/manager/ExternalLoginAuthenticationManager.java",
              "type": "",
              "code": "    @Override\n    public Authentication authenticate(Authentication request) throws AuthenticationException {\n        if (logger.isDebugEnabled()) {\n            logger.debug(\"Starting external authentication for:{}\", UaaStringUtils.getCleanedUserControlString(request.toString()));\n        }\n        ExternalAuthenticationDetails authenticationData = getExternalAuthenticationDetails(request);\n        UaaUser userFromRequest = getUser(request, authenticationData);"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "credentials;",
              "startLine": 47,
              "startColumn": 26,
              "endLine": 47,
              "endColumn": 38,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/UaaAuthentication.java",
              "type": "Object",
              "code": "public class UaaAuthentication extends AbstractAuthenticationToken\n        implements Authentication, Serializable {\n\n    private final Object credentials;\n    private final UaaPrincipal principal;\n    private long authenticatedTime = -1L;\n    private long expiresAt = -1L;"
            },
            {
              "step": 1,
              "variableName": "getCredentials(...) : Object",
              "startLine": 43,
              "endLine": 43,
              "endColumn": 10,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/UaaAuthentication.java",
              "type": "Object",
              "code": "@JsonDeserialize(using = UaaAuthenticationDeserializer.class)\n@Getter\n@Setter\n@ToString\npublic class UaaAuthentication extends AbstractAuthenticationToken\n        implements Authentication, Serializable {\n"
            },
            {
              "step": 2,
              "variableName": "... + ... : String",
              "startLine": 43,
              "endLine": 43,
              "endColumn": 10,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/UaaAuthentication.java",
              "type": "String",
              "code": "@JsonDeserialize(using = UaaAuthenticationDeserializer.class)\n@Getter\n@Setter\n@ToString\npublic class UaaAuthentication extends AbstractAuthenticationToken\n        implements Authentication, Serializable {\n"
            },
            {
              "step": 3,
              "variableName": "request.toString()",
              "startLine": 119,
              "startColumn": 112,
              "endLine": 119,
              "endColumn": 130,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/manager/ExternalLoginAuthenticationManager.java",
              "type": "String",
              "code": "    @Override\n    public Authentication authenticate(Authentication request) throws AuthenticationException {\n        if (logger.isDebugEnabled()) {\n            logger.debug(\"Starting external authentication for:{}\", UaaStringUtils.getCleanedUserControlString(request.toString()));\n        }\n        ExternalAuthenticationDetails authenticationData = getExternalAuthenticationDetails(request);\n        UaaUser userFromRequest = getUser(request, authenticationData);"
            },
            {
              "step": 4,
              "variableName": "String input",
              "startLine": 317,
              "startColumn": 54,
              "endLine": 317,
              "endColumn": 66,
              "uri": "uaa-77.28.0/model/src/main/java/org/cloudfoundry/identity/uaa/util/UaaStringUtils.java",
              "type": "String",
              "code": "        return result.substring(1, result.length() - 1);\n    }\n\n    public static String getCleanedUserControlString(String input) {\n        if (input == null) {\n            return null;\n        }"
            },
            {
              "step": 5,
              "variableName": "input",
              "startLine": 321,
              "startColumn": 37,
              "endLine": 321,
              "endColumn": 42,
              "uri": "uaa-77.28.0/model/src/main/java/org/cloudfoundry/identity/uaa/util/UaaStringUtils.java",
              "type": "String",
              "code": "        if (input == null) {\n            return null;\n        }\n        return CTRL_PATTERN.matcher(input).replaceAll(\"_\");\n    }\n\n    public static String getValidatedString(String input) {"
            },
            {
              "step": 6,
              "variableName": "CTRL_PATTERN.matcher(input)",
              "startLine": 321,
              "startColumn": 16,
              "endLine": 321,
              "endColumn": 43,
              "uri": "uaa-77.28.0/model/src/main/java/org/cloudfoundry/identity/uaa/util/UaaStringUtils.java",
              "type": "Matcher",
              "code": "        if (input == null) {\n            return null;\n        }\n        return CTRL_PATTERN.matcher(input).replaceAll(\"_\");\n    }\n\n    public static String getValidatedString(String input) {"
            },
            {
              "step": 7,
              "variableName": "CTRL_PATTERN.matcher(input).replaceAll(\"_\")",
              "startLine": 321,
              "startColumn": 16,
              "endLine": 321,
              "endColumn": 59,
              "uri": "uaa-77.28.0/model/src/main/java/org/cloudfoundry/identity/uaa/util/UaaStringUtils.java",
              "type": "String",
              "code": "        if (input == null) {\n            return null;\n        }\n        return CTRL_PATTERN.matcher(input).replaceAll(\"_\");\n    }\n\n    public static String getValidatedString(String input) {"
            },
            {
              "step": 8,
              "variableName": "UaaStringUtils.getCleanedUserControlString(request.toString())",
              "startLine": 119,
              "startColumn": 69,
              "endLine": 119,
              "endColumn": 131,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/manager/ExternalLoginAuthenticationManager.java",
              "type": "",
              "code": "    @Override\n    public Authentication authenticate(Authentication request) throws AuthenticationException {\n        if (logger.isDebugEnabled()) {\n            logger.debug(\"Starting external authentication for:{}\", UaaStringUtils.getCleanedUserControlString(request.toString()));\n        }\n        ExternalAuthenticationDetails authenticationData = getExternalAuthenticationDetails(request);\n        UaaUser userFromRequest = getUser(request, authenticationData);"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "credentials",
              "startLine": 99,
              "startColumn": 80,
              "endLine": 99,
              "endColumn": 91,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/oauth/provider/endpoint/TokenEndpointAuthenticationFilter.java",
              "type": "Authentication",
              "code": "                    logger.debug(\"Authentication credentials found\");\n                }\n\n                Authentication authResult = authenticationManager.authenticate(credentials);\n\n                if (debug) {\n                    logger.debug(\"Authentication success: \" + authResult.getName());"
            },
            {
              "step": 1,
              "variableName": "Authentication request",
              "startLine": 117,
              "startColumn": 40,
              "endLine": 117,
              "endColumn": 62,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/manager/ExternalLoginAuthenticationManager.java",
              "type": "Authentication",
              "code": "    }\n\n    @Override\n    public Authentication authenticate(Authentication request) throws AuthenticationException {\n        if (logger.isDebugEnabled()) {\n            logger.debug(\"Starting external authentication for:{}\", UaaStringUtils.getCleanedUserControlString(request.toString()));\n        }"
            },
            {
              "step": 2,
              "variableName": "request",
              "startLine": 119,
              "startColumn": 112,
              "endLine": 119,
              "endColumn": 119,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/manager/ExternalLoginAuthenticationManager.java",
              "type": "Authentication",
              "code": "    @Override\n    public Authentication authenticate(Authentication request) throws AuthenticationException {\n        if (logger.isDebugEnabled()) {\n            logger.debug(\"Starting external authentication for:{}\", UaaStringUtils.getCleanedUserControlString(request.toString()));\n        }\n        ExternalAuthenticationDetails authenticationData = getExternalAuthenticationDetails(request);\n        UaaUser userFromRequest = getUser(request, authenticationData);"
            },
            {
              "step": 3,
              "variableName": "parameter this : UaaAuthentication",
              "startLine": 43,
              "endLine": 43,
              "endColumn": 10,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/UaaAuthentication.java",
              "type": "UaaAuthentication",
              "code": "@JsonDeserialize(using = UaaAuthenticationDeserializer.class)\n@Getter\n@Setter\n@ToString\npublic class UaaAuthentication extends AbstractAuthenticationToken\n        implements Authentication, Serializable {\n"
            },
            {
              "step": 4,
              "variableName": "this : UaaAuthentication",
              "startLine": 43,
              "endLine": 43,
              "endColumn": 10,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/UaaAuthentication.java",
              "type": "UaaAuthentication",
              "code": "@JsonDeserialize(using = UaaAuthenticationDeserializer.class)\n@Getter\n@Setter\n@ToString\npublic class UaaAuthentication extends AbstractAuthenticationToken\n        implements Authentication, Serializable {\n"
            },
            {
              "step": 5,
              "variableName": "principal;",
              "startLine": 48,
              "startColumn": 32,
              "endLine": 48,
              "endColumn": 42,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/UaaAuthentication.java",
              "type": "UaaAuthentication",
              "code": "        implements Authentication, Serializable {\n\n    private final Object credentials;\n    private final UaaPrincipal principal;\n    private long authenticatedTime = -1L;\n    private long expiresAt = -1L;\n    private Set<String> externalGroups;"
            },
            {
              "step": 6,
              "variableName": "principal;",
              "startLine": 48,
              "startColumn": 32,
              "endLine": 48,
              "endColumn": 42,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/UaaAuthentication.java",
              "type": "UaaPrincipal",
              "code": "        implements Authentication, Serializable {\n\n    private final Object credentials;\n    private final UaaPrincipal principal;\n    private long authenticatedTime = -1L;\n    private long expiresAt = -1L;\n    private Set<String> externalGroups;"
            },
            {
              "step": 7,
              "variableName": "getPrincipal(...) : UaaPrincipal",
              "startLine": 43,
              "endLine": 43,
              "endColumn": 10,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/UaaAuthentication.java",
              "type": "UaaPrincipal",
              "code": "@JsonDeserialize(using = UaaAuthenticationDeserializer.class)\n@Getter\n@Setter\n@ToString\npublic class UaaAuthentication extends AbstractAuthenticationToken\n        implements Authentication, Serializable {\n"
            },
            {
              "step": 8,
              "variableName": "... + ... : String",
              "startLine": 43,
              "endLine": 43,
              "endColumn": 10,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/UaaAuthentication.java",
              "type": "String",
              "code": "@JsonDeserialize(using = UaaAuthenticationDeserializer.class)\n@Getter\n@Setter\n@ToString\npublic class UaaAuthentication extends AbstractAuthenticationToken\n        implements Authentication, Serializable {\n"
            },
            {
              "step": 9,
              "variableName": "request.toString()",
              "startLine": 119,
              "startColumn": 112,
              "endLine": 119,
              "endColumn": 130,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/manager/ExternalLoginAuthenticationManager.java",
              "type": "String",
              "code": "    @Override\n    public Authentication authenticate(Authentication request) throws AuthenticationException {\n        if (logger.isDebugEnabled()) {\n            logger.debug(\"Starting external authentication for:{}\", UaaStringUtils.getCleanedUserControlString(request.toString()));\n        }\n        ExternalAuthenticationDetails authenticationData = getExternalAuthenticationDetails(request);\n        UaaUser userFromRequest = getUser(request, authenticationData);"
            },
            {
              "step": 10,
              "variableName": "String input",
              "startLine": 317,
              "startColumn": 54,
              "endLine": 317,
              "endColumn": 66,
              "uri": "uaa-77.28.0/model/src/main/java/org/cloudfoundry/identity/uaa/util/UaaStringUtils.java",
              "type": "String",
              "code": "        return result.substring(1, result.length() - 1);\n    }\n\n    public static String getCleanedUserControlString(String input) {\n        if (input == null) {\n            return null;\n        }"
            },
            {
              "step": 11,
              "variableName": "input",
              "startLine": 321,
              "startColumn": 37,
              "endLine": 321,
              "endColumn": 42,
              "uri": "uaa-77.28.0/model/src/main/java/org/cloudfoundry/identity/uaa/util/UaaStringUtils.java",
              "type": "String",
              "code": "        if (input == null) {\n            return null;\n        }\n        return CTRL_PATTERN.matcher(input).replaceAll(\"_\");\n    }\n\n    public static String getValidatedString(String input) {"
            },
            {
              "step": 12,
              "variableName": "CTRL_PATTERN.matcher(input)",
              "startLine": 321,
              "startColumn": 16,
              "endLine": 321,
              "endColumn": 43,
              "uri": "uaa-77.28.0/model/src/main/java/org/cloudfoundry/identity/uaa/util/UaaStringUtils.java",
              "type": "Matcher",
              "code": "        if (input == null) {\n            return null;\n        }\n        return CTRL_PATTERN.matcher(input).replaceAll(\"_\");\n    }\n\n    public static String getValidatedString(String input) {"
            },
            {
              "step": 13,
              "variableName": "CTRL_PATTERN.matcher(input).replaceAll(\"_\")",
              "startLine": 321,
              "startColumn": 16,
              "endLine": 321,
              "endColumn": 59,
              "uri": "uaa-77.28.0/model/src/main/java/org/cloudfoundry/identity/uaa/util/UaaStringUtils.java",
              "type": "String",
              "code": "        if (input == null) {\n            return null;\n        }\n        return CTRL_PATTERN.matcher(input).replaceAll(\"_\");\n    }\n\n    public static String getValidatedString(String input) {"
            },
            {
              "step": 14,
              "variableName": "UaaStringUtils.getCleanedUserControlString(request.toString())",
              "startLine": 119,
              "startColumn": 69,
              "endLine": 119,
              "endColumn": 131,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/manager/ExternalLoginAuthenticationManager.java",
              "type": "",
              "code": "    @Override\n    public Authentication authenticate(Authentication request) throws AuthenticationException {\n        if (logger.isDebugEnabled()) {\n            logger.debug(\"Starting external authentication for:{}\", UaaStringUtils.getCleanedUserControlString(request.toString()));\n        }\n        ExternalAuthenticationDetails authenticationData = getExternalAuthenticationDetails(request);\n        UaaUser userFromRequest = getUser(request, authenticationData);"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 7,
      "fileName": "RestAuthenticationManager.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "credentials",
              "startLine": 221,
              "startColumn": 61,
              "endLine": 221,
              "endColumn": 72,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/BackwardsCompatibleTokenEndpointAuthenticationFilter.java",
              "type": "Authentication",
              "code": "        if (GRANT_TYPE_PASSWORD.equals(grantType)) {\n            Authentication credentials = extractCredentials(request);\n            log.debug(\"Authentication credentials found password grant for '\" + credentials.getName() + \"'\");\n            authResult = authenticationManager.authenticate(credentials);\n\n            if (authResult != null && authResult.isAuthenticated() && authResult instanceof UaaAuthentication uaaAuthentication\n                    && SessionUtils.isPasswordChangeRequired(request.getSession())) {"
            },
            {
              "step": 1,
              "variableName": "Authentication authentication",
              "startLine": 103,
              "startColumn": 40,
              "endLine": 103,
              "endColumn": 69,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/manager/RestAuthenticationManager.java",
              "type": "Authentication",
              "code": "    }\n\n    @Override\n    public Authentication authenticate(Authentication authentication) throws AuthenticationException {\n        String username = authentication.getName();\n\n        HttpHeaders headers = getHeaders();"
            },
            {
              "step": 2,
              "variableName": "authentication",
              "startLine": 114,
              "startColumn": 72,
              "endLine": 114,
              "endColumn": 86,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/manager/RestAuthenticationManager.java",
              "type": "Authentication",
              "code": "\n        if (response.getStatusCode() == HttpStatus.OK || response.getStatusCode() == HttpStatus.CREATED) {\n            if (evaluateResponse(authentication, response)) {\n                logger.info(\"Successful authentication request for \" + authentication.getName());\n                return new UsernamePasswordAuthenticationToken(username, nullPassword ? null : \"\", UaaAuthority.USER_AUTHORITIES);\n            }\n        } else if (response.getStatusCode() == HttpStatus.UNAUTHORIZED) {"
            },
            {
              "step": 3,
              "variableName": "authentication.getName()",
              "startLine": 114,
              "startColumn": 72,
              "endLine": 114,
              "endColumn": 96,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/manager/RestAuthenticationManager.java",
              "type": "String",
              "code": "\n        if (response.getStatusCode() == HttpStatus.OK || response.getStatusCode() == HttpStatus.CREATED) {\n            if (evaluateResponse(authentication, response)) {\n                logger.info(\"Successful authentication request for \" + authentication.getName());\n                return new UsernamePasswordAuthenticationToken(username, nullPassword ? null : \"\", UaaAuthority.USER_AUTHORITIES);\n            }\n        } else if (response.getStatusCode() == HttpStatus.UNAUTHORIZED) {"
            },
            {
              "step": 4,
              "variableName": "\"Successful authentication request for \" + authentication.getName()",
              "startLine": 114,
              "startColumn": 29,
              "endLine": 114,
              "endColumn": 96,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/manager/RestAuthenticationManager.java",
              "type": "",
              "code": "\n        if (response.getStatusCode() == HttpStatus.OK || response.getStatusCode() == HttpStatus.CREATED) {\n            if (evaluateResponse(authentication, response)) {\n                logger.info(\"Successful authentication request for \" + authentication.getName());\n                return new UsernamePasswordAuthenticationToken(username, nullPassword ? null : \"\", UaaAuthority.USER_AUTHORITIES);\n            }\n        } else if (response.getStatusCode() == HttpStatus.UNAUTHORIZED) {"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "credentials",
              "startLine": 221,
              "startColumn": 61,
              "endLine": 221,
              "endColumn": 72,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/BackwardsCompatibleTokenEndpointAuthenticationFilter.java",
              "type": "Authentication",
              "code": "        if (GRANT_TYPE_PASSWORD.equals(grantType)) {\n            Authentication credentials = extractCredentials(request);\n            log.debug(\"Authentication credentials found password grant for '\" + credentials.getName() + \"'\");\n            authResult = authenticationManager.authenticate(credentials);\n\n            if (authResult != null && authResult.isAuthenticated() && authResult instanceof UaaAuthentication uaaAuthentication\n                    && SessionUtils.isPasswordChangeRequired(request.getSession())) {"
            },
            {
              "step": 1,
              "variableName": "Authentication authentication",
              "startLine": 48,
              "startColumn": 40,
              "endLine": 48,
              "endColumn": 69,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/manager/ChainedAuthenticationManager.java",
              "type": "Authentication",
              "code": "    }\n\n    @Override\n    public Authentication authenticate(Authentication authentication) throws AuthenticationException {\n        if (!(authentication instanceof Authentication)) {\n            return null;\n        }"
            },
            {
              "step": 2,
              "variableName": "token",
              "startLine": 54,
              "startColumn": 22,
              "endLine": 54,
              "endColumn": 27,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/manager/ChainedAuthenticationManager.java",
              "type": "UsernamePasswordAuthenticationToken",
              "code": "        }\n        UsernamePasswordAuthenticationToken output = null;\n        if (authentication instanceof UsernamePasswordAuthenticationToken token) {\n            output = token;\n        } else {\n            output = new UsernamePasswordAuthenticationToken(authentication.getPrincipal(),\n                    (authentication.getCredentials() != null ? authentication.getCredentials().toString() : null),"
            },
            {
              "step": 3,
              "variableName": "auth != null ? auth : output",
              "startLine": 81,
              "startColumn": 85,
              "endLine": 81,
              "endColumn": 113,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/manager/ChainedAuthenticationManager.java",
              "type": "... : UsernamePasswordAuthenticationToken",
              "code": "                }\n                Authentication thisAuth = null;\n                try {\n                    thisAuth = delegates[i].getAuthenticationManager().authenticate(auth != null ? auth : output);\n                } catch (AuthenticationException x) {\n                    if (logger.isDebugEnabled()) {\n                        logger.debug(\"Chained authentication exception:\" + x.getMessage() + \" at:\" + (x.getStackTrace().length > 0 ? x.getStackTrace()[0] : \"(no stack trace)\"));"
            },
            {
              "step": 4,
              "variableName": "Authentication authentication",
              "startLine": 103,
              "startColumn": 40,
              "endLine": 103,
              "endColumn": 69,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/manager/RestAuthenticationManager.java",
              "type": "UsernamePasswordAuthenticationToken",
              "code": "    }\n\n    @Override\n    public Authentication authenticate(Authentication authentication) throws AuthenticationException {\n        String username = authentication.getName();\n\n        HttpHeaders headers = getHeaders();"
            },
            {
              "step": 5,
              "variableName": "authentication",
              "startLine": 114,
              "startColumn": 72,
              "endLine": 114,
              "endColumn": 86,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/manager/RestAuthenticationManager.java",
              "type": "UsernamePasswordAuthenticationToken",
              "code": "\n        if (response.getStatusCode() == HttpStatus.OK || response.getStatusCode() == HttpStatus.CREATED) {\n            if (evaluateResponse(authentication, response)) {\n                logger.info(\"Successful authentication request for \" + authentication.getName());\n                return new UsernamePasswordAuthenticationToken(username, nullPassword ? null : \"\", UaaAuthority.USER_AUTHORITIES);\n            }\n        } else if (response.getStatusCode() == HttpStatus.UNAUTHORIZED) {"
            },
            {
              "step": 6,
              "variableName": "authentication.getName()",
              "startLine": 114,
              "startColumn": 72,
              "endLine": 114,
              "endColumn": 96,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/manager/RestAuthenticationManager.java",
              "type": "String",
              "code": "\n        if (response.getStatusCode() == HttpStatus.OK || response.getStatusCode() == HttpStatus.CREATED) {\n            if (evaluateResponse(authentication, response)) {\n                logger.info(\"Successful authentication request for \" + authentication.getName());\n                return new UsernamePasswordAuthenticationToken(username, nullPassword ? null : \"\", UaaAuthority.USER_AUTHORITIES);\n            }\n        } else if (response.getStatusCode() == HttpStatus.UNAUTHORIZED) {"
            },
            {
              "step": 7,
              "variableName": "\"Successful authentication request for \" + authentication.getName()",
              "startLine": 114,
              "startColumn": 29,
              "endLine": 114,
              "endColumn": 96,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/manager/RestAuthenticationManager.java",
              "type": "",
              "code": "\n        if (response.getStatusCode() == HttpStatus.OK || response.getStatusCode() == HttpStatus.CREATED) {\n            if (evaluateResponse(authentication, response)) {\n                logger.info(\"Successful authentication request for \" + authentication.getName());\n                return new UsernamePasswordAuthenticationToken(username, nullPassword ? null : \"\", UaaAuthority.USER_AUTHORITIES);\n            }\n        } else if (response.getStatusCode() == HttpStatus.UNAUTHORIZED) {"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "credentials",
              "startLine": 99,
              "startColumn": 80,
              "endLine": 99,
              "endColumn": 91,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/oauth/provider/endpoint/TokenEndpointAuthenticationFilter.java",
              "type": "Authentication",
              "code": "                    logger.debug(\"Authentication credentials found\");\n                }\n\n                Authentication authResult = authenticationManager.authenticate(credentials);\n\n                if (debug) {\n                    logger.debug(\"Authentication success: \" + authResult.getName());"
            },
            {
              "step": 1,
              "variableName": "Authentication authentication",
              "startLine": 103,
              "startColumn": 40,
              "endLine": 103,
              "endColumn": 69,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/manager/RestAuthenticationManager.java",
              "type": "Authentication",
              "code": "    }\n\n    @Override\n    public Authentication authenticate(Authentication authentication) throws AuthenticationException {\n        String username = authentication.getName();\n\n        HttpHeaders headers = getHeaders();"
            },
            {
              "step": 2,
              "variableName": "authentication",
              "startLine": 114,
              "startColumn": 72,
              "endLine": 114,
              "endColumn": 86,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/manager/RestAuthenticationManager.java",
              "type": "Authentication",
              "code": "\n        if (response.getStatusCode() == HttpStatus.OK || response.getStatusCode() == HttpStatus.CREATED) {\n            if (evaluateResponse(authentication, response)) {\n                logger.info(\"Successful authentication request for \" + authentication.getName());\n                return new UsernamePasswordAuthenticationToken(username, nullPassword ? null : \"\", UaaAuthority.USER_AUTHORITIES);\n            }\n        } else if (response.getStatusCode() == HttpStatus.UNAUTHORIZED) {"
            },
            {
              "step": 3,
              "variableName": "authentication.getName()",
              "startLine": 114,
              "startColumn": 72,
              "endLine": 114,
              "endColumn": 96,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/manager/RestAuthenticationManager.java",
              "type": "String",
              "code": "\n        if (response.getStatusCode() == HttpStatus.OK || response.getStatusCode() == HttpStatus.CREATED) {\n            if (evaluateResponse(authentication, response)) {\n                logger.info(\"Successful authentication request for \" + authentication.getName());\n                return new UsernamePasswordAuthenticationToken(username, nullPassword ? null : \"\", UaaAuthority.USER_AUTHORITIES);\n            }\n        } else if (response.getStatusCode() == HttpStatus.UNAUTHORIZED) {"
            },
            {
              "step": 4,
              "variableName": "\"Successful authentication request for \" + authentication.getName()",
              "startLine": 114,
              "startColumn": 29,
              "endLine": 114,
              "endColumn": 96,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/manager/RestAuthenticationManager.java",
              "type": "",
              "code": "\n        if (response.getStatusCode() == HttpStatus.OK || response.getStatusCode() == HttpStatus.CREATED) {\n            if (evaluateResponse(authentication, response)) {\n                logger.info(\"Successful authentication request for \" + authentication.getName());\n                return new UsernamePasswordAuthenticationToken(username, nullPassword ? null : \"\", UaaAuthority.USER_AUTHORITIES);\n            }\n        } else if (response.getStatusCode() == HttpStatus.UNAUTHORIZED) {"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "credentials",
              "startLine": 99,
              "startColumn": 80,
              "endLine": 99,
              "endColumn": 91,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/oauth/provider/endpoint/TokenEndpointAuthenticationFilter.java",
              "type": "Authentication",
              "code": "                    logger.debug(\"Authentication credentials found\");\n                }\n\n                Authentication authResult = authenticationManager.authenticate(credentials);\n\n                if (debug) {\n                    logger.debug(\"Authentication success: \" + authResult.getName());"
            },
            {
              "step": 1,
              "variableName": "Authentication authentication",
              "startLine": 48,
              "startColumn": 40,
              "endLine": 48,
              "endColumn": 69,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/manager/ChainedAuthenticationManager.java",
              "type": "Authentication",
              "code": "    }\n\n    @Override\n    public Authentication authenticate(Authentication authentication) throws AuthenticationException {\n        if (!(authentication instanceof Authentication)) {\n            return null;\n        }"
            },
            {
              "step": 2,
              "variableName": "token",
              "startLine": 54,
              "startColumn": 22,
              "endLine": 54,
              "endColumn": 27,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/manager/ChainedAuthenticationManager.java",
              "type": "UsernamePasswordAuthenticationToken",
              "code": "        }\n        UsernamePasswordAuthenticationToken output = null;\n        if (authentication instanceof UsernamePasswordAuthenticationToken token) {\n            output = token;\n        } else {\n            output = new UsernamePasswordAuthenticationToken(authentication.getPrincipal(),\n                    (authentication.getCredentials() != null ? authentication.getCredentials().toString() : null),"
            },
            {
              "step": 3,
              "variableName": "auth != null ? auth : output",
              "startLine": 81,
              "startColumn": 85,
              "endLine": 81,
              "endColumn": 113,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/manager/ChainedAuthenticationManager.java",
              "type": "... : UsernamePasswordAuthenticationToken",
              "code": "                }\n                Authentication thisAuth = null;\n                try {\n                    thisAuth = delegates[i].getAuthenticationManager().authenticate(auth != null ? auth : output);\n                } catch (AuthenticationException x) {\n                    if (logger.isDebugEnabled()) {\n                        logger.debug(\"Chained authentication exception:\" + x.getMessage() + \" at:\" + (x.getStackTrace().length > 0 ? x.getStackTrace()[0] : \"(no stack trace)\"));"
            },
            {
              "step": 4,
              "variableName": "Authentication authentication",
              "startLine": 103,
              "startColumn": 40,
              "endLine": 103,
              "endColumn": 69,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/manager/RestAuthenticationManager.java",
              "type": "UsernamePasswordAuthenticationToken",
              "code": "    }\n\n    @Override\n    public Authentication authenticate(Authentication authentication) throws AuthenticationException {\n        String username = authentication.getName();\n\n        HttpHeaders headers = getHeaders();"
            },
            {
              "step": 5,
              "variableName": "authentication",
              "startLine": 114,
              "startColumn": 72,
              "endLine": 114,
              "endColumn": 86,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/manager/RestAuthenticationManager.java",
              "type": "UsernamePasswordAuthenticationToken",
              "code": "\n        if (response.getStatusCode() == HttpStatus.OK || response.getStatusCode() == HttpStatus.CREATED) {\n            if (evaluateResponse(authentication, response)) {\n                logger.info(\"Successful authentication request for \" + authentication.getName());\n                return new UsernamePasswordAuthenticationToken(username, nullPassword ? null : \"\", UaaAuthority.USER_AUTHORITIES);\n            }\n        } else if (response.getStatusCode() == HttpStatus.UNAUTHORIZED) {"
            },
            {
              "step": 6,
              "variableName": "authentication.getName()",
              "startLine": 114,
              "startColumn": 72,
              "endLine": 114,
              "endColumn": 96,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/manager/RestAuthenticationManager.java",
              "type": "String",
              "code": "\n        if (response.getStatusCode() == HttpStatus.OK || response.getStatusCode() == HttpStatus.CREATED) {\n            if (evaluateResponse(authentication, response)) {\n                logger.info(\"Successful authentication request for \" + authentication.getName());\n                return new UsernamePasswordAuthenticationToken(username, nullPassword ? null : \"\", UaaAuthority.USER_AUTHORITIES);\n            }\n        } else if (response.getStatusCode() == HttpStatus.UNAUTHORIZED) {"
            },
            {
              "step": 7,
              "variableName": "\"Successful authentication request for \" + authentication.getName()",
              "startLine": 114,
              "startColumn": 29,
              "endLine": 114,
              "endColumn": 96,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/manager/RestAuthenticationManager.java",
              "type": "",
              "code": "\n        if (response.getStatusCode() == HttpStatus.OK || response.getStatusCode() == HttpStatus.CREATED) {\n            if (evaluateResponse(authentication, response)) {\n                logger.info(\"Successful authentication request for \" + authentication.getName());\n                return new UsernamePasswordAuthenticationToken(username, nullPassword ? null : \"\", UaaAuthority.USER_AUTHORITIES);\n            }\n        } else if (response.getStatusCode() == HttpStatus.UNAUTHORIZED) {"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 8,
      "fileName": "ResourceBeanDefinitionParser.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "TokenConstants.GRANT_TYPE_CLIENT_CREDENTIALS",
              "startLine": 53,
              "startColumn": 20,
              "endLine": 53,
              "endColumn": 64,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/oauth/provider/config/xml/ResourceBeanDefinitionParser.java",
              "type": "String",
              "code": "\n        String type = element.getAttribute(\"type\");\n        if (!StringUtils.hasText(type)) {\n            type = TokenConstants.GRANT_TYPE_CLIENT_CREDENTIALS;\n        }\n        builder.addPropertyValue(\"grantType\", type);\n"
            },
            {
              "step": 1,
              "variableName": "\"An accessTokenUri must be supplied on a resource element of type \" + type",
              "startLine": 60,
              "startColumn": 28,
              "endLine": 60,
              "endColumn": 102,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/oauth/provider/config/xml/ResourceBeanDefinitionParser.java",
              "type": "",
              "code": "        String accessTokenUri = element.getAttribute(\"access-token-uri\");\n        if (!StringUtils.hasText(accessTokenUri) && !\"implicit\".equals(type)) {\n            parserContext.getReaderContext()\n                    .error(\"An accessTokenUri must be supplied on a resource element of type \" + type, element);\n        }\n        builder.addPropertyValue(\"accessTokenUri\", accessTokenUri);\n"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 9,
      "fileName": "ResourceBeanDefinitionParser.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "TokenConstants.GRANT_TYPE_CLIENT_CREDENTIALS",
              "startLine": 53,
              "startColumn": 20,
              "endLine": 53,
              "endColumn": 64,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/oauth/provider/config/xml/ResourceBeanDefinitionParser.java",
              "type": "String",
              "code": "\n        String type = element.getAttribute(\"type\");\n        if (!StringUtils.hasText(type)) {\n            type = TokenConstants.GRANT_TYPE_CLIENT_CREDENTIALS;\n        }\n        builder.addPropertyValue(\"grantType\", type);\n"
            },
            {
              "step": 1,
              "variableName": "\"The \" + type + \" grant type does not accept an authorization URI\"",
              "startLine": 85,
              "startColumn": 56,
              "endLine": 85,
              "endColumn": 122,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/oauth/provider/config/xml/ResourceBeanDefinitionParser.java",
              "type": "",
              "code": "            if (needsUserAuthorizationUri(type)) {\n                builder.addPropertyValue(\"userAuthorizationUri\", userAuthorizationUri);\n            } else {\n                parserContext.getReaderContext().error(\"The \" + type + \" grant type does not accept an authorization URI\", element);\n            }\n        } else {\n            if (needsUserAuthorizationUri(type)) {"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 10,
      "fileName": "ResourceBeanDefinitionParser.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "TokenConstants.GRANT_TYPE_CLIENT_CREDENTIALS",
              "startLine": 53,
              "startColumn": 20,
              "endLine": 53,
              "endColumn": 64,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/oauth/provider/config/xml/ResourceBeanDefinitionParser.java",
              "type": "String",
              "code": "\n        String type = element.getAttribute(\"type\");\n        if (!StringUtils.hasText(type)) {\n            type = TokenConstants.GRANT_TYPE_CLIENT_CREDENTIALS;\n        }\n        builder.addPropertyValue(\"grantType\", type);\n"
            },
            {
              "step": 1,
              "variableName": "\"An authorization URI must be supplied for a resource of type \" + type",
              "startLine": 89,
              "startColumn": 56,
              "endLine": 89,
              "endColumn": 126,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/oauth/provider/config/xml/ResourceBeanDefinitionParser.java",
              "type": "",
              "code": "            }\n        } else {\n            if (needsUserAuthorizationUri(type)) {\n                parserContext.getReaderContext().error(\"An authorization URI must be supplied for a resource of type \" + type, element);\n            }\n        }\n"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 11,
      "fileName": "ResourceBeanDefinitionParser.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "TokenConstants.GRANT_TYPE_CLIENT_CREDENTIALS",
              "startLine": 53,
              "startColumn": 20,
              "endLine": 53,
              "endColumn": 64,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/oauth/provider/config/xml/ResourceBeanDefinitionParser.java",
              "type": "String",
              "code": "\n        String type = element.getAttribute(\"type\");\n        if (!StringUtils.hasText(type)) {\n            type = TokenConstants.GRANT_TYPE_CLIENT_CREDENTIALS;\n        }\n        builder.addPropertyValue(\"grantType\", type);\n"
            },
            {
              "step": 1,
              "variableName": "\"A \" + attributeName + \" must be supplied on a resource element of type \" + type",
              "startLine": 136,
              "startColumn": 60,
              "endLine": 136,
              "endColumn": 140,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/oauth/provider/config/xml/ResourceBeanDefinitionParser.java",
              "type": "",
              "code": "                if (StringUtils.hasText(attribute)) {\n                    builder.addPropertyValue(attributeName, attribute);\n                } else {\n                    parserContext.getReaderContext().error(\"A \" + attributeName + \" must be supplied on a resource element of type \" + type, element);\n                }\n            }\n        }"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 12,
      "fileName": "TokenEndpointAuthenticationFilter.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "credentials",
              "startLine": 99,
              "startColumn": 80,
              "endLine": 99,
              "endColumn": 91,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/oauth/provider/endpoint/TokenEndpointAuthenticationFilter.java",
              "type": "Authentication",
              "code": "                    logger.debug(\"Authentication credentials found\");\n                }\n\n                Authentication authResult = authenticationManager.authenticate(credentials);\n\n                if (debug) {\n                    logger.debug(\"Authentication success: \" + authResult.getName());"
            },
            {
              "step": 1,
              "variableName": "Authentication authentication",
              "startLine": 51,
              "startColumn": 40,
              "endLine": 51,
              "endColumn": 69,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/manager/UsernamePasswordExtractingAuthenticationManager.java",
              "type": "Authentication",
              "code": "     * authenticate(org.springframework.security.core.Authentication)\n     */\n    @Override\n    public Authentication authenticate(Authentication authentication) throws AuthenticationException {\n        if (authentication == null) {\n            return authentication;\n        }"
            },
            {
              "step": 2,
              "variableName": "token",
              "startLine": 57,
              "startColumn": 22,
              "endLine": 57,
              "endColumn": 27,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/manager/UsernamePasswordExtractingAuthenticationManager.java",
              "type": "UsernamePasswordAuthenticationToken",
              "code": "        }\n        UsernamePasswordAuthenticationToken output = null;\n        if (authentication instanceof UsernamePasswordAuthenticationToken token) {\n            output = token;\n        } else {\n            output = new UsernamePasswordAuthenticationToken(authentication, authentication.getCredentials(),\n                    authentication.getAuthorities());"
            },
            {
              "step": 3,
              "variableName": "output",
              "startLine": 64,
              "startColumn": 38,
              "endLine": 64,
              "endColumn": 44,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/manager/UsernamePasswordExtractingAuthenticationManager.java",
              "type": "UsernamePasswordAuthenticationToken",
              "code": "            output.setAuthenticated(authentication.isAuthenticated());\n            output.setDetails(authentication.getDetails());\n        }\n        return delegate.authenticate(output);\n    }\n\n}"
            },
            {
              "step": 4,
              "variableName": "Authentication authentication",
              "startLine": 25,
              "startColumn": 40,
              "endLine": 25,
              "endColumn": 69,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/manager/CompositeAuthenticationManager.java",
              "type": "UsernamePasswordAuthenticationToken",
              "code": "public class CompositeAuthenticationManager implements AuthenticationManager {\n\n    @Override\n    public Authentication authenticate(Authentication authentication) throws AuthenticationException {\n        Authentication a = SecurityContextHolder.getContext().getAuthentication();\n        OAuth2Authentication oauth2Authentication = null;\n        if (a instanceof OAuth2Authentication auth2Authentication) {"
            },
            {
              "step": 5,
              "variableName": "authentication",
              "startLine": 35,
              "startColumn": 20,
              "endLine": 35,
              "endColumn": 34,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/manager/CompositeAuthenticationManager.java",
              "type": "UsernamePasswordAuthenticationToken",
              "code": "        if (oauth2Authentication != null) {\n            return oauth2Authentication.getUserAuthentication();\n        } else {\n            return authentication;\n        }\n    }\n}"
            },
            {
              "step": 6,
              "variableName": "delegate.authenticate(output)",
              "startLine": 64,
              "startColumn": 16,
              "endLine": 64,
              "endColumn": 45,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/manager/UsernamePasswordExtractingAuthenticationManager.java",
              "type": "UsernamePasswordAuthenticationToken",
              "code": "            output.setAuthenticated(authentication.isAuthenticated());\n            output.setDetails(authentication.getDetails());\n        }\n        return delegate.authenticate(output);\n    }\n\n}"
            },
            {
              "step": 7,
              "variableName": "authenticationManager.authenticate(credentials)",
              "startLine": 99,
              "startColumn": 45,
              "endLine": 99,
              "endColumn": 92,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/oauth/provider/endpoint/TokenEndpointAuthenticationFilter.java",
              "type": "UsernamePasswordAuthenticationToken",
              "code": "                    logger.debug(\"Authentication credentials found\");\n                }\n\n                Authentication authResult = authenticationManager.authenticate(credentials);\n\n                if (debug) {\n                    logger.debug(\"Authentication success: \" + authResult.getName());"
            },
            {
              "step": 8,
              "variableName": "authResult",
              "startLine": 102,
              "startColumn": 63,
              "endLine": 102,
              "endColumn": 73,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/oauth/provider/endpoint/TokenEndpointAuthenticationFilter.java",
              "type": "UsernamePasswordAuthenticationToken",
              "code": "                Authentication authResult = authenticationManager.authenticate(credentials);\n\n                if (debug) {\n                    logger.debug(\"Authentication success: \" + authResult.getName());\n                }\n\n                Authentication clientAuth = SecurityContextHolder.getContext().getAuthentication();"
            },
            {
              "step": 9,
              "variableName": "authResult.getName()",
              "startLine": 102,
              "startColumn": 63,
              "endLine": 102,
              "endColumn": 83,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/oauth/provider/endpoint/TokenEndpointAuthenticationFilter.java",
              "type": "String",
              "code": "                Authentication authResult = authenticationManager.authenticate(credentials);\n\n                if (debug) {\n                    logger.debug(\"Authentication success: \" + authResult.getName());\n                }\n\n                Authentication clientAuth = SecurityContextHolder.getContext().getAuthentication();"
            },
            {
              "step": 10,
              "variableName": "\"Authentication success: \" + authResult.getName()",
              "startLine": 102,
              "startColumn": 34,
              "endLine": 102,
              "endColumn": 83,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/oauth/provider/endpoint/TokenEndpointAuthenticationFilter.java",
              "type": "",
              "code": "                Authentication authResult = authenticationManager.authenticate(credentials);\n\n                if (debug) {\n                    logger.debug(\"Authentication success: \" + authResult.getName());\n                }\n\n                Authentication clientAuth = SecurityContextHolder.getContext().getAuthentication();"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "credentials",
              "startLine": 99,
              "startColumn": 80,
              "endLine": 99,
              "endColumn": 91,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/oauth/provider/endpoint/TokenEndpointAuthenticationFilter.java",
              "type": "Authentication",
              "code": "                    logger.debug(\"Authentication credentials found\");\n                }\n\n                Authentication authResult = authenticationManager.authenticate(credentials);\n\n                if (debug) {\n                    logger.debug(\"Authentication success: \" + authResult.getName());"
            },
            {
              "step": 1,
              "variableName": "Authentication authentication",
              "startLine": 25,
              "startColumn": 40,
              "endLine": 25,
              "endColumn": 69,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/manager/CompositeAuthenticationManager.java",
              "type": "Authentication",
              "code": "public class CompositeAuthenticationManager implements AuthenticationManager {\n\n    @Override\n    public Authentication authenticate(Authentication authentication) throws AuthenticationException {\n        Authentication a = SecurityContextHolder.getContext().getAuthentication();\n        OAuth2Authentication oauth2Authentication = null;\n        if (a instanceof OAuth2Authentication auth2Authentication) {"
            },
            {
              "step": 2,
              "variableName": "authentication",
              "startLine": 35,
              "startColumn": 20,
              "endLine": 35,
              "endColumn": 34,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/manager/CompositeAuthenticationManager.java",
              "type": "Authentication",
              "code": "        if (oauth2Authentication != null) {\n            return oauth2Authentication.getUserAuthentication();\n        } else {\n            return authentication;\n        }\n    }\n}"
            },
            {
              "step": 3,
              "variableName": "authenticationManager.authenticate(credentials)",
              "startLine": 99,
              "startColumn": 45,
              "endLine": 99,
              "endColumn": 92,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/oauth/provider/endpoint/TokenEndpointAuthenticationFilter.java",
              "type": "Authentication",
              "code": "                    logger.debug(\"Authentication credentials found\");\n                }\n\n                Authentication authResult = authenticationManager.authenticate(credentials);\n\n                if (debug) {\n                    logger.debug(\"Authentication success: \" + authResult.getName());"
            },
            {
              "step": 4,
              "variableName": "authResult",
              "startLine": 102,
              "startColumn": 63,
              "endLine": 102,
              "endColumn": 73,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/oauth/provider/endpoint/TokenEndpointAuthenticationFilter.java",
              "type": "Authentication",
              "code": "                Authentication authResult = authenticationManager.authenticate(credentials);\n\n                if (debug) {\n                    logger.debug(\"Authentication success: \" + authResult.getName());\n                }\n\n                Authentication clientAuth = SecurityContextHolder.getContext().getAuthentication();"
            },
            {
              "step": 5,
              "variableName": "getName",
              "startLine": 115,
              "startColumn": 19,
              "endLine": 115,
              "endColumn": 26,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/UaaAuthentication.java",
              "type": "UaaAuthentication",
              "code": "    }\n\n    @Override\n    public String getName() {\n        // Should we return the ID for the principal name? (No, because the\n        // UaaUserDatabase retrieves users by name.)\n        return principal.getName();"
            },
            {
              "step": 6,
              "variableName": "principal",
              "startLine": 118,
              "startColumn": 16,
              "endLine": 118,
              "endColumn": 25,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/UaaAuthentication.java",
              "type": "UaaPrincipal",
              "code": "    public String getName() {\n        // Should we return the ID for the principal name? (No, because the\n        // UaaUserDatabase retrieves users by name.)\n        return principal.getName();\n    }\n\n    public UaaAuthenticationDetails getUaaAuthenticationDetails() {"
            },
            {
              "step": 7,
              "variableName": "name;",
              "startLine": 37,
              "startColumn": 26,
              "endLine": 37,
              "endColumn": 31,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/UaaPrincipal.java",
              "type": "UaaPrincipal",
              "code": "@Data\npublic class UaaPrincipal implements AuthenticatedPrincipal, Principal, Serializable {\n    private final String id;\n    private final String name;\n    private final String email;\n    private final String origin;\n    private final String externalId;"
            },
            {
              "step": 8,
              "variableName": "name;",
              "startLine": 37,
              "startColumn": 26,
              "endLine": 37,
              "endColumn": 31,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/UaaPrincipal.java",
              "type": "String",
              "code": "@Data\npublic class UaaPrincipal implements AuthenticatedPrincipal, Principal, Serializable {\n    private final String id;\n    private final String name;\n    private final String email;\n    private final String origin;\n    private final String externalId;"
            },
            {
              "step": 9,
              "variableName": "principal.getName()",
              "startLine": 118,
              "startColumn": 16,
              "endLine": 118,
              "endColumn": 35,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/UaaAuthentication.java",
              "type": "String",
              "code": "    public String getName() {\n        // Should we return the ID for the principal name? (No, because the\n        // UaaUserDatabase retrieves users by name.)\n        return principal.getName();\n    }\n\n    public UaaAuthenticationDetails getUaaAuthenticationDetails() {"
            },
            {
              "step": 10,
              "variableName": "authResult.getName()",
              "startLine": 102,
              "startColumn": 63,
              "endLine": 102,
              "endColumn": 83,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/oauth/provider/endpoint/TokenEndpointAuthenticationFilter.java",
              "type": "String",
              "code": "                Authentication authResult = authenticationManager.authenticate(credentials);\n\n                if (debug) {\n                    logger.debug(\"Authentication success: \" + authResult.getName());\n                }\n\n                Authentication clientAuth = SecurityContextHolder.getContext().getAuthentication();"
            },
            {
              "step": 11,
              "variableName": "\"Authentication success: \" + authResult.getName()",
              "startLine": 102,
              "startColumn": 34,
              "endLine": 102,
              "endColumn": 83,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/oauth/provider/endpoint/TokenEndpointAuthenticationFilter.java",
              "type": "",
              "code": "                Authentication authResult = authenticationManager.authenticate(credentials);\n\n                if (debug) {\n                    logger.debug(\"Authentication success: \" + authResult.getName());\n                }\n\n                Authentication clientAuth = SecurityContextHolder.getContext().getAuthentication();"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "credentials",
              "startLine": 99,
              "startColumn": 80,
              "endLine": 99,
              "endColumn": 91,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/oauth/provider/endpoint/TokenEndpointAuthenticationFilter.java",
              "type": "Authentication",
              "code": "                    logger.debug(\"Authentication credentials found\");\n                }\n\n                Authentication authResult = authenticationManager.authenticate(credentials);\n\n                if (debug) {\n                    logger.debug(\"Authentication success: \" + authResult.getName());"
            },
            {
              "step": 1,
              "variableName": "Authentication authentication",
              "startLine": 55,
              "startColumn": 40,
              "endLine": 55,
              "endColumn": 69,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/manager/ScopeAuthenticationManager.java",
              "type": "Authentication",
              "code": "    }\n\n    @Override\n    public Authentication authenticate(Authentication authentication) throws AuthenticationException {\n        if (authentication instanceof OAuth2Authentication auth2Authentication) {\n            OAuth2Request creq = auth2Authentication.getOAuth2Request();\n            List<String> scopes = dedup(creq.getScope());"
            },
            {
              "step": 2,
              "variableName": "authentication",
              "startLine": 68,
              "startColumn": 24,
              "endLine": 68,
              "endColumn": 38,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/manager/ScopeAuthenticationManager.java",
              "type": "Authentication",
              "code": "            }\n            if (matches == requiredMatches) {\n                authentication.setAuthenticated(true);\n                return authentication;\n            } else if (isThrowOnNotAuthenticated()) {\n                throw new InsufficientScopeException(\"Insufficient scopes\");\n            }"
            },
            {
              "step": 3,
              "variableName": "authenticationManager.authenticate(credentials)",
              "startLine": 99,
              "startColumn": 45,
              "endLine": 99,
              "endColumn": 92,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/oauth/provider/endpoint/TokenEndpointAuthenticationFilter.java",
              "type": "Authentication",
              "code": "                    logger.debug(\"Authentication credentials found\");\n                }\n\n                Authentication authResult = authenticationManager.authenticate(credentials);\n\n                if (debug) {\n                    logger.debug(\"Authentication success: \" + authResult.getName());"
            },
            {
              "step": 4,
              "variableName": "authResult",
              "startLine": 102,
              "startColumn": 63,
              "endLine": 102,
              "endColumn": 73,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/oauth/provider/endpoint/TokenEndpointAuthenticationFilter.java",
              "type": "Authentication",
              "code": "                Authentication authResult = authenticationManager.authenticate(credentials);\n\n                if (debug) {\n                    logger.debug(\"Authentication success: \" + authResult.getName());\n                }\n\n                Authentication clientAuth = SecurityContextHolder.getContext().getAuthentication();"
            },
            {
              "step": 5,
              "variableName": "getName",
              "startLine": 104,
              "startColumn": 23,
              "endLine": 104,
              "endColumn": 30,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/provider/IdentityProviderValidationRequest.java",
              "type": "UsernamePasswordAuthentication",
              "code": "\n        @JsonIgnore\n        @Override\n        public String getName() {\n            return getUsername();\n        }\n    }"
            },
            {
              "step": 6,
              "variableName": "getUsername()",
              "startLine": 105,
              "startColumn": 20,
              "endLine": 105,
              "endColumn": 33,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/provider/IdentityProviderValidationRequest.java",
              "type": "UsernamePasswordAuthentication",
              "code": "        @JsonIgnore\n        @Override\n        public String getName() {\n            return getUsername();\n        }\n    }\n}"
            },
            {
              "step": 7,
              "variableName": "getUsername",
              "startLine": 63,
              "startColumn": 23,
              "endLine": 63,
              "endColumn": 34,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/provider/IdentityProviderValidationRequest.java",
              "type": "UsernamePasswordAuthentication",
              "code": "            return password.getPassword();\n        }\n\n        public String getUsername() {\n            return username;\n        }\n"
            },
            {
              "step": 8,
              "variableName": "username",
              "startLine": 64,
              "startColumn": 20,
              "endLine": 64,
              "endColumn": 28,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/provider/IdentityProviderValidationRequest.java",
              "type": "String",
              "code": "        }\n\n        public String getUsername() {\n            return username;\n        }\n\n        @JsonIgnore"
            },
            {
              "step": 9,
              "variableName": "getUsername()",
              "startLine": 105,
              "startColumn": 20,
              "endLine": 105,
              "endColumn": 33,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/provider/IdentityProviderValidationRequest.java",
              "type": "String",
              "code": "        @JsonIgnore\n        @Override\n        public String getName() {\n            return getUsername();\n        }\n    }\n}"
            },
            {
              "step": 10,
              "variableName": "authResult.getName()",
              "startLine": 102,
              "startColumn": 63,
              "endLine": 102,
              "endColumn": 83,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/oauth/provider/endpoint/TokenEndpointAuthenticationFilter.java",
              "type": "String",
              "code": "                Authentication authResult = authenticationManager.authenticate(credentials);\n\n                if (debug) {\n                    logger.debug(\"Authentication success: \" + authResult.getName());\n                }\n\n                Authentication clientAuth = SecurityContextHolder.getContext().getAuthentication();"
            },
            {
              "step": 11,
              "variableName": "\"Authentication success: \" + authResult.getName()",
              "startLine": 102,
              "startColumn": 34,
              "endLine": 102,
              "endColumn": 83,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/oauth/provider/endpoint/TokenEndpointAuthenticationFilter.java",
              "type": "",
              "code": "                Authentication authResult = authenticationManager.authenticate(credentials);\n\n                if (debug) {\n                    logger.debug(\"Authentication success: \" + authResult.getName());\n                }\n\n                Authentication clientAuth = SecurityContextHolder.getContext().getAuthentication();"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "credentials",
              "startLine": 99,
              "startColumn": 80,
              "endLine": 99,
              "endColumn": 91,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/oauth/provider/endpoint/TokenEndpointAuthenticationFilter.java",
              "type": "Authentication",
              "code": "                    logger.debug(\"Authentication credentials found\");\n                }\n\n                Authentication authResult = authenticationManager.authenticate(credentials);\n\n                if (debug) {\n                    logger.debug(\"Authentication success: \" + authResult.getName());"
            },
            {
              "step": 1,
              "variableName": "Authentication authentication",
              "startLine": 48,
              "startColumn": 40,
              "endLine": 48,
              "endColumn": 69,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/manager/ChainedAuthenticationManager.java",
              "type": "Authentication",
              "code": "    }\n\n    @Override\n    public Authentication authenticate(Authentication authentication) throws AuthenticationException {\n        if (!(authentication instanceof Authentication)) {\n            return null;\n        }"
            },
            {
              "step": 2,
              "variableName": "token",
              "startLine": 54,
              "startColumn": 22,
              "endLine": 54,
              "endColumn": 27,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/manager/ChainedAuthenticationManager.java",
              "type": "UsernamePasswordAuthenticationToken",
              "code": "        }\n        UsernamePasswordAuthenticationToken output = null;\n        if (authentication instanceof UsernamePasswordAuthenticationToken token) {\n            output = token;\n        } else {\n            output = new UsernamePasswordAuthenticationToken(authentication.getPrincipal(),\n                    (authentication.getCredentials() != null ? authentication.getCredentials().toString() : null),"
            },
            {
              "step": 3,
              "variableName": "auth != null ? auth : output",
              "startLine": 81,
              "startColumn": 85,
              "endLine": 81,
              "endColumn": 113,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/manager/ChainedAuthenticationManager.java",
              "type": "... : UsernamePasswordAuthenticationToken",
              "code": "                }\n                Authentication thisAuth = null;\n                try {\n                    thisAuth = delegates[i].getAuthenticationManager().authenticate(auth != null ? auth : output);\n                } catch (AuthenticationException x) {\n                    if (logger.isDebugEnabled()) {\n                        logger.debug(\"Chained authentication exception:\" + x.getMessage() + \" at:\" + (x.getStackTrace().length > 0 ? x.getStackTrace()[0] : \"(no stack trace)\"));"
            },
            {
              "step": 4,
              "variableName": "Authentication authentication",
              "startLine": 55,
              "startColumn": 40,
              "endLine": 55,
              "endColumn": 69,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/manager/ScopeAuthenticationManager.java",
              "type": "UsernamePasswordAuthenticationToken",
              "code": "    }\n\n    @Override\n    public Authentication authenticate(Authentication authentication) throws AuthenticationException {\n        if (authentication instanceof OAuth2Authentication auth2Authentication) {\n            OAuth2Request creq = auth2Authentication.getOAuth2Request();\n            List<String> scopes = dedup(creq.getScope());"
            },
            {
              "step": 5,
              "variableName": "authentication",
              "startLine": 68,
              "startColumn": 24,
              "endLine": 68,
              "endColumn": 38,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/manager/ScopeAuthenticationManager.java",
              "type": "UsernamePasswordAuthenticationToken",
              "code": "            }\n            if (matches == requiredMatches) {\n                authentication.setAuthenticated(true);\n                return authentication;\n            } else if (isThrowOnNotAuthenticated()) {\n                throw new InsufficientScopeException(\"Insufficient scopes\");\n            }"
            },
            {
              "step": 6,
              "variableName": "delegates[i].getAuthenticationManager().authenticate(auth != null ? auth : output)",
              "startLine": 81,
              "startColumn": 32,
              "endLine": 81,
              "endColumn": 114,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/manager/ChainedAuthenticationManager.java",
              "type": "UsernamePasswordAuthenticationToken",
              "code": "                }\n                Authentication thisAuth = null;\n                try {\n                    thisAuth = delegates[i].getAuthenticationManager().authenticate(auth != null ? auth : output);\n                } catch (AuthenticationException x) {\n                    if (logger.isDebugEnabled()) {\n                        logger.debug(\"Chained authentication exception:\" + x.getMessage() + \" at:\" + (x.getStackTrace().length > 0 ? x.getStackTrace()[0] : \"(no stack trace)\"));"
            },
            {
              "step": 7,
              "variableName": "auth",
              "startLine": 114,
              "startColumn": 20,
              "endLine": 114,
              "endColumn": 24,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/manager/ChainedAuthenticationManager.java",
              "type": "UsernamePasswordAuthenticationToken",
              "code": "            }\n        }\n        if (authenticated) {\n            return auth;\n        } else if (lastException != null) {\n            //we had at least one authentication exception, throw it\n            throw lastException;"
            },
            {
              "step": 8,
              "variableName": "authenticationManager.authenticate(credentials)",
              "startLine": 99,
              "startColumn": 45,
              "endLine": 99,
              "endColumn": 92,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/oauth/provider/endpoint/TokenEndpointAuthenticationFilter.java",
              "type": "UsernamePasswordAuthenticationToken",
              "code": "                    logger.debug(\"Authentication credentials found\");\n                }\n\n                Authentication authResult = authenticationManager.authenticate(credentials);\n\n                if (debug) {\n                    logger.debug(\"Authentication success: \" + authResult.getName());"
            },
            {
              "step": 9,
              "variableName": "authResult",
              "startLine": 102,
              "startColumn": 63,
              "endLine": 102,
              "endColumn": 73,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/oauth/provider/endpoint/TokenEndpointAuthenticationFilter.java",
              "type": "UsernamePasswordAuthenticationToken",
              "code": "                Authentication authResult = authenticationManager.authenticate(credentials);\n\n                if (debug) {\n                    logger.debug(\"Authentication success: \" + authResult.getName());\n                }\n\n                Authentication clientAuth = SecurityContextHolder.getContext().getAuthentication();"
            },
            {
              "step": 10,
              "variableName": "authResult.getName()",
              "startLine": 102,
              "startColumn": 63,
              "endLine": 102,
              "endColumn": 83,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/oauth/provider/endpoint/TokenEndpointAuthenticationFilter.java",
              "type": "String",
              "code": "                Authentication authResult = authenticationManager.authenticate(credentials);\n\n                if (debug) {\n                    logger.debug(\"Authentication success: \" + authResult.getName());\n                }\n\n                Authentication clientAuth = SecurityContextHolder.getContext().getAuthentication();"
            },
            {
              "step": 11,
              "variableName": "\"Authentication success: \" + authResult.getName()",
              "startLine": 102,
              "startColumn": 34,
              "endLine": 102,
              "endColumn": 83,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/oauth/provider/endpoint/TokenEndpointAuthenticationFilter.java",
              "type": "",
              "code": "                Authentication authResult = authenticationManager.authenticate(credentials);\n\n                if (debug) {\n                    logger.debug(\"Authentication success: \" + authResult.getName());\n                }\n\n                Authentication clientAuth = SecurityContextHolder.getContext().getAuthentication();"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 17,
      "fileName": "ExternalOAuthAuthenticationManager.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "relyingPartySecret;",
              "startLine": 46,
              "startColumn": 20,
              "endLine": 46,
              "endColumn": 39,
              "uri": "uaa-77.28.0/model/src/main/java/org/cloudfoundry/identity/uaa/provider/AbstractExternalOAuthIdentityProviderDefinition.java",
              "type": "String",
              "code": "    private boolean skipSslValidation;\n    private String relyingPartyId;\n    @JsonInclude(JsonInclude.Include.NON_NULL)\n    private String relyingPartySecret;\n    private List<String> scopes;\n    private String issuer;\n    private String responseType = \"code\";"
            },
            {
              "step": 1,
              "variableName": "config.getRelyingPartySecret()",
              "startLine": 744,
              "startColumn": 43,
              "endLine": 744,
              "endColumn": 73,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/provider/oauth/ExternalOAuthAuthenticationManager.java",
              "type": "String",
              "code": "            }\n        } else {\n            if (config.isClientAuthInBody()) {\n                body.add(\"client_secret\", config.getRelyingPartySecret());\n            } else {\n                String clientAuthHeader = getClientAuthHeader(config);\n                headers.add(\"Authorization\", clientAuthHeader);"
            },
            {
              "step": 2,
              "variableName": "body",
              "startLine": 744,
              "startColumn": 17,
              "endLine": 744,
              "endColumn": 21,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/provider/oauth/ExternalOAuthAuthenticationManager.java",
              "type": "LinkedMaskingMultiValueMap [<map.value>, <element>] : String",
              "code": "            }\n        } else {\n            if (config.isClientAuthInBody()) {\n                body.add(\"client_secret\", config.getRelyingPartySecret());\n            } else {\n                String clientAuthHeader = getClientAuthHeader(config);\n                headers.add(\"Authorization\", clientAuthHeader);"
            },
            {
              "step": 3,
              "variableName": "body",
              "startLine": 765,
              "startColumn": 90,
              "endLine": 765,
              "endColumn": 94,
              "uri": "uaa-77.28.0/server/src/main/java/org/cloudfoundry/identity/uaa/provider/oauth/ExternalOAuthAuthenticationManager.java",
              "type": "",
              "code": "            return null;\n        }\n\n        logger.debug(\"Performing token exchange with url:{} and request:{}\", requestUri, body);\n        // A configuration that skips SSL/TLS validation requires clobbering the rest template request factory\n        // setup by the bean initializer.\n        ResponseEntity<Map<String, String>> responseEntity ="
            }
          ],
          "label": "No"
        }
      ]
    }
  ]
}