{
  "201": [
    {
      "resultIndex": 0,
      "fileName": "AsyncTaskService.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "sql",
              "startLine": 180,
              "startColumn": 29,
              "endLine": 180,
              "endColumn": 32,
              "uri": "kylin-kylin-5.0.0/src/core-metadata/src/main/java/org/apache/kylin/metadata/query/QueryHistory.java",
              "type": "String",
              "code": "    }\n\n    public QueryHistorySql getQueryHistorySql() {\n        if (JsonUtil.isJson(sql)) {\n            try {\n                QueryHistorySql ret = JsonUtil.readValue(sql, QueryHistorySql.class);\n                if (StringUtils.isBlank(ret.getNormalizedSql())) {"
            },
            {
              "step": 1,
              "variableName": "sql",
              "startLine": 182,
              "startColumn": 58,
              "endLine": 182,
              "endColumn": 61,
              "uri": "kylin-kylin-5.0.0/src/core-metadata/src/main/java/org/apache/kylin/metadata/query/QueryHistory.java",
              "type": "String",
              "code": "    public QueryHistorySql getQueryHistorySql() {\n        if (JsonUtil.isJson(sql)) {\n            try {\n                QueryHistorySql ret = JsonUtil.readValue(sql, QueryHistorySql.class);\n                if (StringUtils.isBlank(ret.getNormalizedSql())) {\n                    ret.setNormalizedSql(sqlPattern);\n                }"
            },
            {
              "step": 2,
              "variableName": "String content",
              "startLine": 108,
              "startColumn": 35,
              "endLine": 108,
              "endColumn": 49,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/util/JsonUtil.java",
              "type": "String",
              "code": "        }\n    }\n\n    public static <T> T readValue(String content, Class<T> valueType) throws IOException {\n        return mapper.readValue(content, valueType);\n    }\n"
            },
            {
              "step": 3,
              "variableName": "mapper.readValue(content, valueType)",
              "startLine": 109,
              "startColumn": 16,
              "endLine": 109,
              "endColumn": 52,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/util/JsonUtil.java",
              "type": "Object",
              "code": "    }\n\n    public static <T> T readValue(String content, Class<T> valueType) throws IOException {\n        return mapper.readValue(content, valueType);\n    }\n\n    public static <T> T readValue(Reader src, Class<T> valueType) throws IOException {"
            },
            {
              "step": 4,
              "variableName": "JsonUtil.readValue(sql, QueryHistorySql.class)",
              "startLine": 182,
              "startColumn": 39,
              "endLine": 182,
              "endColumn": 85,
              "uri": "kylin-kylin-5.0.0/src/core-metadata/src/main/java/org/apache/kylin/metadata/query/QueryHistory.java",
              "type": "QueryHistorySql",
              "code": "    public QueryHistorySql getQueryHistorySql() {\n        if (JsonUtil.isJson(sql)) {\n            try {\n                QueryHistorySql ret = JsonUtil.readValue(sql, QueryHistorySql.class);\n                if (StringUtils.isBlank(ret.getNormalizedSql())) {\n                    ret.setNormalizedSql(sqlPattern);\n                }"
            },
            {
              "step": 5,
              "variableName": "ret",
              "startLine": 186,
              "startColumn": 24,
              "endLine": 186,
              "endColumn": 27,
              "uri": "kylin-kylin-5.0.0/src/core-metadata/src/main/java/org/apache/kylin/metadata/query/QueryHistory.java",
              "type": "QueryHistorySql",
              "code": "                if (StringUtils.isBlank(ret.getNormalizedSql())) {\n                    ret.setNormalizedSql(sqlPattern);\n                }\n                return ret;\n            } catch (IOException e) {\n                log.error(\"Convert sql json string failed\", e);\n            }"
            },
            {
              "step": 6,
              "variableName": "queryHistory.getQueryHistorySql()",
              "startLine": 118,
              "startColumn": 55,
              "endLine": 118,
              "endColumn": 88,
              "uri": "kylin-kylin-5.0.0/src/common-service/src/main/java/org/apache/kylin/rest/service/AsyncTaskService.java",
              "type": "QueryHistorySql",
              "code": "            for (QueryHistory queryHistory : queryHistories) {\n                fillingModelAlias(kylinConfig, request.getProject(), queryHistory);\n                if (onlySql) {\n                    QueryHistorySql queryHistorySql = queryHistory.getQueryHistorySql();\n                    String sql = queryHistorySql.getNormalizedSql();\n                    outputStream.write((sql.replaceAll(\"\\n|\\r\", \" \") + \";\\n\").getBytes(StandardCharsets.UTF_8));\n                } else {"
            },
            {
              "step": 7,
              "variableName": "queryHistorySql",
              "startLine": 119,
              "startColumn": 34,
              "endLine": 119,
              "endColumn": 49,
              "uri": "kylin-kylin-5.0.0/src/common-service/src/main/java/org/apache/kylin/rest/service/AsyncTaskService.java",
              "type": "QueryHistorySql",
              "code": "                fillingModelAlias(kylinConfig, request.getProject(), queryHistory);\n                if (onlySql) {\n                    QueryHistorySql queryHistorySql = queryHistory.getQueryHistorySql();\n                    String sql = queryHistorySql.getNormalizedSql();\n                    outputStream.write((sql.replaceAll(\"\\n|\\r\", \" \") + \";\\n\").getBytes(StandardCharsets.UTF_8));\n                } else {\n                    outputStream.write("
            },
            {
              "step": 8,
              "variableName": "normalizedSql;",
              "startLine": 46,
              "startColumn": 20,
              "endLine": 46,
              "endColumn": 34,
              "uri": "kylin-kylin-5.0.0/src/core-metadata/src/main/java/org/apache/kylin/metadata/query/QueryHistorySql.java",
              "type": "QueryHistorySql",
              "code": "    private String sql;\n\n    @JsonProperty(\"normalized_sql\")\n    private String normalizedSql;\n\n    @JsonProperty(\"params\")\n    private List<QueryHistorySqlParam> params;"
            },
            {
              "step": 9,
              "variableName": "normalizedSql;",
              "startLine": 46,
              "startColumn": 20,
              "endLine": 46,
              "endColumn": 34,
              "uri": "kylin-kylin-5.0.0/src/core-metadata/src/main/java/org/apache/kylin/metadata/query/QueryHistorySql.java",
              "type": "String",
              "code": "    private String sql;\n\n    @JsonProperty(\"normalized_sql\")\n    private String normalizedSql;\n\n    @JsonProperty(\"params\")\n    private List<QueryHistorySqlParam> params;"
            },
            {
              "step": 10,
              "variableName": "queryHistorySql.getNormalizedSql()",
              "startLine": 119,
              "startColumn": 34,
              "endLine": 119,
              "endColumn": 68,
              "uri": "kylin-kylin-5.0.0/src/common-service/src/main/java/org/apache/kylin/rest/service/AsyncTaskService.java",
              "type": "String",
              "code": "                fillingModelAlias(kylinConfig, request.getProject(), queryHistory);\n                if (onlySql) {\n                    QueryHistorySql queryHistorySql = queryHistory.getQueryHistorySql();\n                    String sql = queryHistorySql.getNormalizedSql();\n                    outputStream.write((sql.replaceAll(\"\\n|\\r\", \" \") + \";\\n\").getBytes(StandardCharsets.UTF_8));\n                } else {\n                    outputStream.write("
            },
            {
              "step": 11,
              "variableName": "sql",
              "startLine": 120,
              "startColumn": 41,
              "endLine": 120,
              "endColumn": 44,
              "uri": "kylin-kylin-5.0.0/src/common-service/src/main/java/org/apache/kylin/rest/service/AsyncTaskService.java",
              "type": "String",
              "code": "                if (onlySql) {\n                    QueryHistorySql queryHistorySql = queryHistory.getQueryHistorySql();\n                    String sql = queryHistorySql.getNormalizedSql();\n                    outputStream.write((sql.replaceAll(\"\\n|\\r\", \" \") + \";\\n\").getBytes(StandardCharsets.UTF_8));\n                } else {\n                    outputStream.write(\n                            (QueryHistoryUtil.getDownloadData(queryHistory, zoneOffset, timeZoneOffsetHour) + \"\\n\")"
            },
            {
              "step": 12,
              "variableName": "sql.replaceAll(\"\\n|\\r\", \" \")",
              "startLine": 120,
              "startColumn": 41,
              "endLine": 120,
              "endColumn": 69,
              "uri": "kylin-kylin-5.0.0/src/common-service/src/main/java/org/apache/kylin/rest/service/AsyncTaskService.java",
              "type": "String",
              "code": "                if (onlySql) {\n                    QueryHistorySql queryHistorySql = queryHistory.getQueryHistorySql();\n                    String sql = queryHistorySql.getNormalizedSql();\n                    outputStream.write((sql.replaceAll(\"\\n|\\r\", \" \") + \";\\n\").getBytes(StandardCharsets.UTF_8));\n                } else {\n                    outputStream.write(\n                            (QueryHistoryUtil.getDownloadData(queryHistory, zoneOffset, timeZoneOffsetHour) + \"\\n\")"
            },
            {
              "step": 13,
              "variableName": "sql.replaceAll(\"\\n|\\r\", \" \") + \";\\n\"",
              "startLine": 120,
              "startColumn": 41,
              "endLine": 120,
              "endColumn": 77,
              "uri": "kylin-kylin-5.0.0/src/common-service/src/main/java/org/apache/kylin/rest/service/AsyncTaskService.java",
              "type": "String",
              "code": "                if (onlySql) {\n                    QueryHistorySql queryHistorySql = queryHistory.getQueryHistorySql();\n                    String sql = queryHistorySql.getNormalizedSql();\n                    outputStream.write((sql.replaceAll(\"\\n|\\r\", \" \") + \";\\n\").getBytes(StandardCharsets.UTF_8));\n                } else {\n                    outputStream.write(\n                            (QueryHistoryUtil.getDownloadData(queryHistory, zoneOffset, timeZoneOffsetHour) + \"\\n\")"
            },
            {
              "step": 14,
              "variableName": "(sql.replaceAll(\"\\n|\\r\", \" \") + \";\\n\").getBytes(StandardCharsets.UTF_8)",
              "startLine": 120,
              "startColumn": 40,
              "endLine": 120,
              "endColumn": 111,
              "uri": "kylin-kylin-5.0.0/src/common-service/src/main/java/org/apache/kylin/rest/service/AsyncTaskService.java",
              "type": "",
              "code": "                if (onlySql) {\n                    QueryHistorySql queryHistorySql = queryHistory.getQueryHistorySql();\n                    String sql = queryHistorySql.getNormalizedSql();\n                    outputStream.write((sql.replaceAll(\"\\n|\\r\", \" \") + \";\\n\").getBytes(StandardCharsets.UTF_8));\n                } else {\n                    outputStream.write(\n                            (QueryHistoryUtil.getDownloadData(queryHistory, zoneOffset, timeZoneOffsetHour) + \"\\n\")"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "sql",
              "startLine": 182,
              "startColumn": 58,
              "endLine": 182,
              "endColumn": 61,
              "uri": "kylin-kylin-5.0.0/src/core-metadata/src/main/java/org/apache/kylin/metadata/query/QueryHistory.java",
              "type": "String",
              "code": "    public QueryHistorySql getQueryHistorySql() {\n        if (JsonUtil.isJson(sql)) {\n            try {\n                QueryHistorySql ret = JsonUtil.readValue(sql, QueryHistorySql.class);\n                if (StringUtils.isBlank(ret.getNormalizedSql())) {\n                    ret.setNormalizedSql(sqlPattern);\n                }"
            },
            {
              "step": 1,
              "variableName": "String content",
              "startLine": 108,
              "startColumn": 35,
              "endLine": 108,
              "endColumn": 49,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/util/JsonUtil.java",
              "type": "String",
              "code": "        }\n    }\n\n    public static <T> T readValue(String content, Class<T> valueType) throws IOException {\n        return mapper.readValue(content, valueType);\n    }\n"
            },
            {
              "step": 2,
              "variableName": "mapper.readValue(content, valueType)",
              "startLine": 109,
              "startColumn": 16,
              "endLine": 109,
              "endColumn": 52,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/util/JsonUtil.java",
              "type": "Object",
              "code": "    }\n\n    public static <T> T readValue(String content, Class<T> valueType) throws IOException {\n        return mapper.readValue(content, valueType);\n    }\n\n    public static <T> T readValue(Reader src, Class<T> valueType) throws IOException {"
            },
            {
              "step": 3,
              "variableName": "JsonUtil.readValue(sql, QueryHistorySql.class)",
              "startLine": 182,
              "startColumn": 39,
              "endLine": 182,
              "endColumn": 85,
              "uri": "kylin-kylin-5.0.0/src/core-metadata/src/main/java/org/apache/kylin/metadata/query/QueryHistory.java",
              "type": "QueryHistorySql",
              "code": "    public QueryHistorySql getQueryHistorySql() {\n        if (JsonUtil.isJson(sql)) {\n            try {\n                QueryHistorySql ret = JsonUtil.readValue(sql, QueryHistorySql.class);\n                if (StringUtils.isBlank(ret.getNormalizedSql())) {\n                    ret.setNormalizedSql(sqlPattern);\n                }"
            },
            {
              "step": 4,
              "variableName": "ret",
              "startLine": 186,
              "startColumn": 24,
              "endLine": 186,
              "endColumn": 27,
              "uri": "kylin-kylin-5.0.0/src/core-metadata/src/main/java/org/apache/kylin/metadata/query/QueryHistory.java",
              "type": "QueryHistorySql",
              "code": "                if (StringUtils.isBlank(ret.getNormalizedSql())) {\n                    ret.setNormalizedSql(sqlPattern);\n                }\n                return ret;\n            } catch (IOException e) {\n                log.error(\"Convert sql json string failed\", e);\n            }"
            },
            {
              "step": 5,
              "variableName": "queryHistory.getQueryHistorySql()",
              "startLine": 118,
              "startColumn": 55,
              "endLine": 118,
              "endColumn": 88,
              "uri": "kylin-kylin-5.0.0/src/common-service/src/main/java/org/apache/kylin/rest/service/AsyncTaskService.java",
              "type": "QueryHistorySql",
              "code": "            for (QueryHistory queryHistory : queryHistories) {\n                fillingModelAlias(kylinConfig, request.getProject(), queryHistory);\n                if (onlySql) {\n                    QueryHistorySql queryHistorySql = queryHistory.getQueryHistorySql();\n                    String sql = queryHistorySql.getNormalizedSql();\n                    outputStream.write((sql.replaceAll(\"\\n|\\r\", \" \") + \";\\n\").getBytes(StandardCharsets.UTF_8));\n                } else {"
            },
            {
              "step": 6,
              "variableName": "queryHistorySql",
              "startLine": 119,
              "startColumn": 34,
              "endLine": 119,
              "endColumn": 49,
              "uri": "kylin-kylin-5.0.0/src/common-service/src/main/java/org/apache/kylin/rest/service/AsyncTaskService.java",
              "type": "QueryHistorySql",
              "code": "                fillingModelAlias(kylinConfig, request.getProject(), queryHistory);\n                if (onlySql) {\n                    QueryHistorySql queryHistorySql = queryHistory.getQueryHistorySql();\n                    String sql = queryHistorySql.getNormalizedSql();\n                    outputStream.write((sql.replaceAll(\"\\n|\\r\", \" \") + \";\\n\").getBytes(StandardCharsets.UTF_8));\n                } else {\n                    outputStream.write("
            },
            {
              "step": 7,
              "variableName": "normalizedSql;",
              "startLine": 46,
              "startColumn": 20,
              "endLine": 46,
              "endColumn": 34,
              "uri": "kylin-kylin-5.0.0/src/core-metadata/src/main/java/org/apache/kylin/metadata/query/QueryHistorySql.java",
              "type": "QueryHistorySql",
              "code": "    private String sql;\n\n    @JsonProperty(\"normalized_sql\")\n    private String normalizedSql;\n\n    @JsonProperty(\"params\")\n    private List<QueryHistorySqlParam> params;"
            },
            {
              "step": 8,
              "variableName": "normalizedSql;",
              "startLine": 46,
              "startColumn": 20,
              "endLine": 46,
              "endColumn": 34,
              "uri": "kylin-kylin-5.0.0/src/core-metadata/src/main/java/org/apache/kylin/metadata/query/QueryHistorySql.java",
              "type": "String",
              "code": "    private String sql;\n\n    @JsonProperty(\"normalized_sql\")\n    private String normalizedSql;\n\n    @JsonProperty(\"params\")\n    private List<QueryHistorySqlParam> params;"
            },
            {
              "step": 9,
              "variableName": "queryHistorySql.getNormalizedSql()",
              "startLine": 119,
              "startColumn": 34,
              "endLine": 119,
              "endColumn": 68,
              "uri": "kylin-kylin-5.0.0/src/common-service/src/main/java/org/apache/kylin/rest/service/AsyncTaskService.java",
              "type": "String",
              "code": "                fillingModelAlias(kylinConfig, request.getProject(), queryHistory);\n                if (onlySql) {\n                    QueryHistorySql queryHistorySql = queryHistory.getQueryHistorySql();\n                    String sql = queryHistorySql.getNormalizedSql();\n                    outputStream.write((sql.replaceAll(\"\\n|\\r\", \" \") + \";\\n\").getBytes(StandardCharsets.UTF_8));\n                } else {\n                    outputStream.write("
            },
            {
              "step": 10,
              "variableName": "sql",
              "startLine": 120,
              "startColumn": 41,
              "endLine": 120,
              "endColumn": 44,
              "uri": "kylin-kylin-5.0.0/src/common-service/src/main/java/org/apache/kylin/rest/service/AsyncTaskService.java",
              "type": "String",
              "code": "                if (onlySql) {\n                    QueryHistorySql queryHistorySql = queryHistory.getQueryHistorySql();\n                    String sql = queryHistorySql.getNormalizedSql();\n                    outputStream.write((sql.replaceAll(\"\\n|\\r\", \" \") + \";\\n\").getBytes(StandardCharsets.UTF_8));\n                } else {\n                    outputStream.write(\n                            (QueryHistoryUtil.getDownloadData(queryHistory, zoneOffset, timeZoneOffsetHour) + \"\\n\")"
            },
            {
              "step": 11,
              "variableName": "sql.replaceAll(\"\\n|\\r\", \" \")",
              "startLine": 120,
              "startColumn": 41,
              "endLine": 120,
              "endColumn": 69,
              "uri": "kylin-kylin-5.0.0/src/common-service/src/main/java/org/apache/kylin/rest/service/AsyncTaskService.java",
              "type": "String",
              "code": "                if (onlySql) {\n                    QueryHistorySql queryHistorySql = queryHistory.getQueryHistorySql();\n                    String sql = queryHistorySql.getNormalizedSql();\n                    outputStream.write((sql.replaceAll(\"\\n|\\r\", \" \") + \";\\n\").getBytes(StandardCharsets.UTF_8));\n                } else {\n                    outputStream.write(\n                            (QueryHistoryUtil.getDownloadData(queryHistory, zoneOffset, timeZoneOffsetHour) + \"\\n\")"
            },
            {
              "step": 12,
              "variableName": "sql.replaceAll(\"\\n|\\r\", \" \") + \";\\n\"",
              "startLine": 120,
              "startColumn": 41,
              "endLine": 120,
              "endColumn": 77,
              "uri": "kylin-kylin-5.0.0/src/common-service/src/main/java/org/apache/kylin/rest/service/AsyncTaskService.java",
              "type": "String",
              "code": "                if (onlySql) {\n                    QueryHistorySql queryHistorySql = queryHistory.getQueryHistorySql();\n                    String sql = queryHistorySql.getNormalizedSql();\n                    outputStream.write((sql.replaceAll(\"\\n|\\r\", \" \") + \";\\n\").getBytes(StandardCharsets.UTF_8));\n                } else {\n                    outputStream.write(\n                            (QueryHistoryUtil.getDownloadData(queryHistory, zoneOffset, timeZoneOffsetHour) + \"\\n\")"
            },
            {
              "step": 13,
              "variableName": "(sql.replaceAll(\"\\n|\\r\", \" \") + \";\\n\").getBytes(StandardCharsets.UTF_8)",
              "startLine": 120,
              "startColumn": 40,
              "endLine": 120,
              "endColumn": 111,
              "uri": "kylin-kylin-5.0.0/src/common-service/src/main/java/org/apache/kylin/rest/service/AsyncTaskService.java",
              "type": "",
              "code": "                if (onlySql) {\n                    QueryHistorySql queryHistorySql = queryHistory.getQueryHistorySql();\n                    String sql = queryHistorySql.getNormalizedSql();\n                    outputStream.write((sql.replaceAll(\"\\n|\\r\", \" \") + \";\\n\").getBytes(StandardCharsets.UTF_8));\n                } else {\n                    outputStream.write(\n                            (QueryHistoryUtil.getDownloadData(queryHistory, zoneOffset, timeZoneOffsetHour) + \"\\n\")"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "sqlPattern",
              "startLine": 184,
              "startColumn": 42,
              "endLine": 184,
              "endColumn": 52,
              "uri": "kylin-kylin-5.0.0/src/core-metadata/src/main/java/org/apache/kylin/metadata/query/QueryHistory.java",
              "type": "String",
              "code": "            try {\n                QueryHistorySql ret = JsonUtil.readValue(sql, QueryHistorySql.class);\n                if (StringUtils.isBlank(ret.getNormalizedSql())) {\n                    ret.setNormalizedSql(sqlPattern);\n                }\n                return ret;\n            } catch (IOException e) {"
            },
            {
              "step": 1,
              "variableName": "normalizedSql : String",
              "startLine": 34,
              "endLine": 34,
              "endColumn": 6,
              "uri": "kylin-kylin-5.0.0/src/core-metadata/src/main/java/org/apache/kylin/metadata/query/QueryHistorySql.java",
              "type": "String",
              "code": "import lombok.Data;\nimport lombok.NoArgsConstructor;\n\n@Data\n@NoArgsConstructor\n@AllArgsConstructor\n@JsonIgnoreProperties(ignoreUnknown = true)"
            },
            {
              "step": 2,
              "variableName": "normalizedSql : String",
              "startLine": 34,
              "endLine": 34,
              "endColumn": 6,
              "uri": "kylin-kylin-5.0.0/src/core-metadata/src/main/java/org/apache/kylin/metadata/query/QueryHistorySql.java",
              "type": "String",
              "code": "import lombok.Data;\nimport lombok.NoArgsConstructor;\n\n@Data\n@NoArgsConstructor\n@AllArgsConstructor\n@JsonIgnoreProperties(ignoreUnknown = true)"
            },
            {
              "step": 3,
              "variableName": "this [post update] : QueryHistorySql [normalizedSql] : String",
              "startLine": 34,
              "endLine": 34,
              "endColumn": 6,
              "uri": "kylin-kylin-5.0.0/src/core-metadata/src/main/java/org/apache/kylin/metadata/query/QueryHistorySql.java",
              "type": "QueryHistorySql [normalizedSql] : String",
              "code": "import lombok.Data;\nimport lombok.NoArgsConstructor;\n\n@Data\n@NoArgsConstructor\n@AllArgsConstructor\n@JsonIgnoreProperties(ignoreUnknown = true)"
            },
            {
              "step": 4,
              "variableName": "parameter this [Return] : QueryHistorySql [normalizedSql] : String",
              "startLine": 34,
              "endLine": 34,
              "endColumn": 6,
              "uri": "kylin-kylin-5.0.0/src/core-metadata/src/main/java/org/apache/kylin/metadata/query/QueryHistorySql.java",
              "type": "QueryHistorySql [normalizedSql] : String",
              "code": "import lombok.Data;\nimport lombok.NoArgsConstructor;\n\n@Data\n@NoArgsConstructor\n@AllArgsConstructor\n@JsonIgnoreProperties(ignoreUnknown = true)"
            },
            {
              "step": 5,
              "variableName": "ret",
              "startLine": 184,
              "startColumn": 21,
              "endLine": 184,
              "endColumn": 24,
              "uri": "kylin-kylin-5.0.0/src/core-metadata/src/main/java/org/apache/kylin/metadata/query/QueryHistory.java",
              "type": "QueryHistorySql [normalizedSql] : String",
              "code": "            try {\n                QueryHistorySql ret = JsonUtil.readValue(sql, QueryHistorySql.class);\n                if (StringUtils.isBlank(ret.getNormalizedSql())) {\n                    ret.setNormalizedSql(sqlPattern);\n                }\n                return ret;\n            } catch (IOException e) {"
            },
            {
              "step": 6,
              "variableName": "ret",
              "startLine": 186,
              "startColumn": 24,
              "endLine": 186,
              "endColumn": 27,
              "uri": "kylin-kylin-5.0.0/src/core-metadata/src/main/java/org/apache/kylin/metadata/query/QueryHistory.java",
              "type": "QueryHistorySql [normalizedSql] : String",
              "code": "                if (StringUtils.isBlank(ret.getNormalizedSql())) {\n                    ret.setNormalizedSql(sqlPattern);\n                }\n                return ret;\n            } catch (IOException e) {\n                log.error(\"Convert sql json string failed\", e);\n            }"
            },
            {
              "step": 7,
              "variableName": "queryHistory.getQueryHistorySql()",
              "startLine": 118,
              "startColumn": 55,
              "endLine": 118,
              "endColumn": 88,
              "uri": "kylin-kylin-5.0.0/src/common-service/src/main/java/org/apache/kylin/rest/service/AsyncTaskService.java",
              "type": "QueryHistorySql [normalizedSql] : String",
              "code": "            for (QueryHistory queryHistory : queryHistories) {\n                fillingModelAlias(kylinConfig, request.getProject(), queryHistory);\n                if (onlySql) {\n                    QueryHistorySql queryHistorySql = queryHistory.getQueryHistorySql();\n                    String sql = queryHistorySql.getNormalizedSql();\n                    outputStream.write((sql.replaceAll(\"\\n|\\r\", \" \") + \";\\n\").getBytes(StandardCharsets.UTF_8));\n                } else {"
            },
            {
              "step": 8,
              "variableName": "queryHistorySql",
              "startLine": 119,
              "startColumn": 34,
              "endLine": 119,
              "endColumn": 49,
              "uri": "kylin-kylin-5.0.0/src/common-service/src/main/java/org/apache/kylin/rest/service/AsyncTaskService.java",
              "type": "QueryHistorySql [normalizedSql] : String",
              "code": "                fillingModelAlias(kylinConfig, request.getProject(), queryHistory);\n                if (onlySql) {\n                    QueryHistorySql queryHistorySql = queryHistory.getQueryHistorySql();\n                    String sql = queryHistorySql.getNormalizedSql();\n                    outputStream.write((sql.replaceAll(\"\\n|\\r\", \" \") + \";\\n\").getBytes(StandardCharsets.UTF_8));\n                } else {\n                    outputStream.write("
            },
            {
              "step": 9,
              "variableName": "normalizedSql;",
              "startLine": 46,
              "startColumn": 20,
              "endLine": 46,
              "endColumn": 34,
              "uri": "kylin-kylin-5.0.0/src/core-metadata/src/main/java/org/apache/kylin/metadata/query/QueryHistorySql.java",
              "type": "QueryHistorySql [normalizedSql] : String",
              "code": "    private String sql;\n\n    @JsonProperty(\"normalized_sql\")\n    private String normalizedSql;\n\n    @JsonProperty(\"params\")\n    private List<QueryHistorySqlParam> params;"
            },
            {
              "step": 10,
              "variableName": "normalizedSql;",
              "startLine": 46,
              "startColumn": 20,
              "endLine": 46,
              "endColumn": 34,
              "uri": "kylin-kylin-5.0.0/src/core-metadata/src/main/java/org/apache/kylin/metadata/query/QueryHistorySql.java",
              "type": "QueryHistorySql [normalizedSql] : String",
              "code": "    private String sql;\n\n    @JsonProperty(\"normalized_sql\")\n    private String normalizedSql;\n\n    @JsonProperty(\"params\")\n    private List<QueryHistorySqlParam> params;"
            },
            {
              "step": 11,
              "variableName": "normalizedSql;",
              "startLine": 46,
              "startColumn": 20,
              "endLine": 46,
              "endColumn": 34,
              "uri": "kylin-kylin-5.0.0/src/core-metadata/src/main/java/org/apache/kylin/metadata/query/QueryHistorySql.java",
              "type": "String",
              "code": "    private String sql;\n\n    @JsonProperty(\"normalized_sql\")\n    private String normalizedSql;\n\n    @JsonProperty(\"params\")\n    private List<QueryHistorySqlParam> params;"
            },
            {
              "step": 12,
              "variableName": "queryHistorySql.getNormalizedSql()",
              "startLine": 119,
              "startColumn": 34,
              "endLine": 119,
              "endColumn": 68,
              "uri": "kylin-kylin-5.0.0/src/common-service/src/main/java/org/apache/kylin/rest/service/AsyncTaskService.java",
              "type": "String",
              "code": "                fillingModelAlias(kylinConfig, request.getProject(), queryHistory);\n                if (onlySql) {\n                    QueryHistorySql queryHistorySql = queryHistory.getQueryHistorySql();\n                    String sql = queryHistorySql.getNormalizedSql();\n                    outputStream.write((sql.replaceAll(\"\\n|\\r\", \" \") + \";\\n\").getBytes(StandardCharsets.UTF_8));\n                } else {\n                    outputStream.write("
            },
            {
              "step": 13,
              "variableName": "sql",
              "startLine": 120,
              "startColumn": 41,
              "endLine": 120,
              "endColumn": 44,
              "uri": "kylin-kylin-5.0.0/src/common-service/src/main/java/org/apache/kylin/rest/service/AsyncTaskService.java",
              "type": "String",
              "code": "                if (onlySql) {\n                    QueryHistorySql queryHistorySql = queryHistory.getQueryHistorySql();\n                    String sql = queryHistorySql.getNormalizedSql();\n                    outputStream.write((sql.replaceAll(\"\\n|\\r\", \" \") + \";\\n\").getBytes(StandardCharsets.UTF_8));\n                } else {\n                    outputStream.write(\n                            (QueryHistoryUtil.getDownloadData(queryHistory, zoneOffset, timeZoneOffsetHour) + \"\\n\")"
            },
            {
              "step": 14,
              "variableName": "sql.replaceAll(\"\\n|\\r\", \" \")",
              "startLine": 120,
              "startColumn": 41,
              "endLine": 120,
              "endColumn": 69,
              "uri": "kylin-kylin-5.0.0/src/common-service/src/main/java/org/apache/kylin/rest/service/AsyncTaskService.java",
              "type": "String",
              "code": "                if (onlySql) {\n                    QueryHistorySql queryHistorySql = queryHistory.getQueryHistorySql();\n                    String sql = queryHistorySql.getNormalizedSql();\n                    outputStream.write((sql.replaceAll(\"\\n|\\r\", \" \") + \";\\n\").getBytes(StandardCharsets.UTF_8));\n                } else {\n                    outputStream.write(\n                            (QueryHistoryUtil.getDownloadData(queryHistory, zoneOffset, timeZoneOffsetHour) + \"\\n\")"
            },
            {
              "step": 15,
              "variableName": "sql.replaceAll(\"\\n|\\r\", \" \") + \";\\n\"",
              "startLine": 120,
              "startColumn": 41,
              "endLine": 120,
              "endColumn": 77,
              "uri": "kylin-kylin-5.0.0/src/common-service/src/main/java/org/apache/kylin/rest/service/AsyncTaskService.java",
              "type": "String",
              "code": "                if (onlySql) {\n                    QueryHistorySql queryHistorySql = queryHistory.getQueryHistorySql();\n                    String sql = queryHistorySql.getNormalizedSql();\n                    outputStream.write((sql.replaceAll(\"\\n|\\r\", \" \") + \";\\n\").getBytes(StandardCharsets.UTF_8));\n                } else {\n                    outputStream.write(\n                            (QueryHistoryUtil.getDownloadData(queryHistory, zoneOffset, timeZoneOffsetHour) + \"\\n\")"
            },
            {
              "step": 16,
              "variableName": "(sql.replaceAll(\"\\n|\\r\", \" \") + \";\\n\").getBytes(StandardCharsets.UTF_8)",
              "startLine": 120,
              "startColumn": 40,
              "endLine": 120,
              "endColumn": 111,
              "uri": "kylin-kylin-5.0.0/src/common-service/src/main/java/org/apache/kylin/rest/service/AsyncTaskService.java",
              "type": "",
              "code": "                if (onlySql) {\n                    QueryHistorySql queryHistorySql = queryHistory.getQueryHistorySql();\n                    String sql = queryHistorySql.getNormalizedSql();\n                    outputStream.write((sql.replaceAll(\"\\n|\\r\", \" \") + \";\\n\").getBytes(StandardCharsets.UTF_8));\n                } else {\n                    outputStream.write(\n                            (QueryHistoryUtil.getDownloadData(queryHistory, zoneOffset, timeZoneOffsetHour) + \"\\n\")"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "sql",
              "startLine": 191,
              "startColumn": 36,
              "endLine": 191,
              "endColumn": 39,
              "uri": "kylin-kylin-5.0.0/src/core-metadata/src/main/java/org/apache/kylin/metadata/query/QueryHistory.java",
              "type": "String",
              "code": "                log.error(\"Convert sql json string failed\", e);\n            }\n        }\n        return new QueryHistorySql(sql, sql, null);\n    }\n\n    public boolean isException() {"
            },
            {
              "step": 1,
              "variableName": "sql",
              "startLine": 191,
              "startColumn": 41,
              "endLine": 191,
              "endColumn": 44,
              "uri": "kylin-kylin-5.0.0/src/core-metadata/src/main/java/org/apache/kylin/metadata/query/QueryHistory.java",
              "type": "String",
              "code": "                log.error(\"Convert sql json string failed\", e);\n            }\n        }\n        return new QueryHistorySql(sql, sql, null);\n    }\n\n    public boolean isException() {"
            },
            {
              "step": 2,
              "variableName": "normalizedSql : String",
              "startLine": 36,
              "endLine": 36,
              "endColumn": 20,
              "uri": "kylin-kylin-5.0.0/src/core-metadata/src/main/java/org/apache/kylin/metadata/query/QueryHistorySql.java",
              "type": "String",
              "code": "\n@Data\n@NoArgsConstructor\n@AllArgsConstructor\n@JsonIgnoreProperties(ignoreUnknown = true)\npublic class QueryHistorySql {\n"
            },
            {
              "step": 3,
              "variableName": "normalizedSql : String",
              "startLine": 36,
              "endLine": 36,
              "endColumn": 20,
              "uri": "kylin-kylin-5.0.0/src/core-metadata/src/main/java/org/apache/kylin/metadata/query/QueryHistorySql.java",
              "type": "String",
              "code": "\n@Data\n@NoArgsConstructor\n@AllArgsConstructor\n@JsonIgnoreProperties(ignoreUnknown = true)\npublic class QueryHistorySql {\n"
            },
            {
              "step": 4,
              "variableName": "this [post update] : QueryHistorySql [normalizedSql] : String",
              "startLine": 36,
              "endLine": 36,
              "endColumn": 20,
              "uri": "kylin-kylin-5.0.0/src/core-metadata/src/main/java/org/apache/kylin/metadata/query/QueryHistorySql.java",
              "type": "QueryHistorySql [normalizedSql] : String",
              "code": "\n@Data\n@NoArgsConstructor\n@AllArgsConstructor\n@JsonIgnoreProperties(ignoreUnknown = true)\npublic class QueryHistorySql {\n"
            },
            {
              "step": 5,
              "variableName": "parameter this [Return] : QueryHistorySql [normalizedSql] : String",
              "startLine": 36,
              "endLine": 36,
              "endColumn": 20,
              "uri": "kylin-kylin-5.0.0/src/core-metadata/src/main/java/org/apache/kylin/metadata/query/QueryHistorySql.java",
              "type": "QueryHistorySql [normalizedSql] : String",
              "code": "\n@Data\n@NoArgsConstructor\n@AllArgsConstructor\n@JsonIgnoreProperties(ignoreUnknown = true)\npublic class QueryHistorySql {\n"
            },
            {
              "step": 6,
              "variableName": "new QueryHistorySql(sql, sql, null)",
              "startLine": 191,
              "startColumn": 16,
              "endLine": 191,
              "endColumn": 51,
              "uri": "kylin-kylin-5.0.0/src/core-metadata/src/main/java/org/apache/kylin/metadata/query/QueryHistory.java",
              "type": "QueryHistorySql [normalizedSql] : String",
              "code": "                log.error(\"Convert sql json string failed\", e);\n            }\n        }\n        return new QueryHistorySql(sql, sql, null);\n    }\n\n    public boolean isException() {"
            },
            {
              "step": 7,
              "variableName": "queryHistory.getQueryHistorySql()",
              "startLine": 118,
              "startColumn": 55,
              "endLine": 118,
              "endColumn": 88,
              "uri": "kylin-kylin-5.0.0/src/common-service/src/main/java/org/apache/kylin/rest/service/AsyncTaskService.java",
              "type": "QueryHistorySql [normalizedSql] : String",
              "code": "            for (QueryHistory queryHistory : queryHistories) {\n                fillingModelAlias(kylinConfig, request.getProject(), queryHistory);\n                if (onlySql) {\n                    QueryHistorySql queryHistorySql = queryHistory.getQueryHistorySql();\n                    String sql = queryHistorySql.getNormalizedSql();\n                    outputStream.write((sql.replaceAll(\"\\n|\\r\", \" \") + \";\\n\").getBytes(StandardCharsets.UTF_8));\n                } else {"
            },
            {
              "step": 8,
              "variableName": "queryHistorySql",
              "startLine": 119,
              "startColumn": 34,
              "endLine": 119,
              "endColumn": 49,
              "uri": "kylin-kylin-5.0.0/src/common-service/src/main/java/org/apache/kylin/rest/service/AsyncTaskService.java",
              "type": "QueryHistorySql [normalizedSql] : String",
              "code": "                fillingModelAlias(kylinConfig, request.getProject(), queryHistory);\n                if (onlySql) {\n                    QueryHistorySql queryHistorySql = queryHistory.getQueryHistorySql();\n                    String sql = queryHistorySql.getNormalizedSql();\n                    outputStream.write((sql.replaceAll(\"\\n|\\r\", \" \") + \";\\n\").getBytes(StandardCharsets.UTF_8));\n                } else {\n                    outputStream.write("
            },
            {
              "step": 9,
              "variableName": "normalizedSql;",
              "startLine": 46,
              "startColumn": 20,
              "endLine": 46,
              "endColumn": 34,
              "uri": "kylin-kylin-5.0.0/src/core-metadata/src/main/java/org/apache/kylin/metadata/query/QueryHistorySql.java",
              "type": "QueryHistorySql [normalizedSql] : String",
              "code": "    private String sql;\n\n    @JsonProperty(\"normalized_sql\")\n    private String normalizedSql;\n\n    @JsonProperty(\"params\")\n    private List<QueryHistorySqlParam> params;"
            },
            {
              "step": 10,
              "variableName": "normalizedSql;",
              "startLine": 46,
              "startColumn": 20,
              "endLine": 46,
              "endColumn": 34,
              "uri": "kylin-kylin-5.0.0/src/core-metadata/src/main/java/org/apache/kylin/metadata/query/QueryHistorySql.java",
              "type": "QueryHistorySql [normalizedSql] : String",
              "code": "    private String sql;\n\n    @JsonProperty(\"normalized_sql\")\n    private String normalizedSql;\n\n    @JsonProperty(\"params\")\n    private List<QueryHistorySqlParam> params;"
            },
            {
              "step": 11,
              "variableName": "normalizedSql;",
              "startLine": 46,
              "startColumn": 20,
              "endLine": 46,
              "endColumn": 34,
              "uri": "kylin-kylin-5.0.0/src/core-metadata/src/main/java/org/apache/kylin/metadata/query/QueryHistorySql.java",
              "type": "String",
              "code": "    private String sql;\n\n    @JsonProperty(\"normalized_sql\")\n    private String normalizedSql;\n\n    @JsonProperty(\"params\")\n    private List<QueryHistorySqlParam> params;"
            },
            {
              "step": 12,
              "variableName": "queryHistorySql.getNormalizedSql()",
              "startLine": 119,
              "startColumn": 34,
              "endLine": 119,
              "endColumn": 68,
              "uri": "kylin-kylin-5.0.0/src/common-service/src/main/java/org/apache/kylin/rest/service/AsyncTaskService.java",
              "type": "String",
              "code": "                fillingModelAlias(kylinConfig, request.getProject(), queryHistory);\n                if (onlySql) {\n                    QueryHistorySql queryHistorySql = queryHistory.getQueryHistorySql();\n                    String sql = queryHistorySql.getNormalizedSql();\n                    outputStream.write((sql.replaceAll(\"\\n|\\r\", \" \") + \";\\n\").getBytes(StandardCharsets.UTF_8));\n                } else {\n                    outputStream.write("
            },
            {
              "step": 13,
              "variableName": "sql",
              "startLine": 120,
              "startColumn": 41,
              "endLine": 120,
              "endColumn": 44,
              "uri": "kylin-kylin-5.0.0/src/common-service/src/main/java/org/apache/kylin/rest/service/AsyncTaskService.java",
              "type": "String",
              "code": "                if (onlySql) {\n                    QueryHistorySql queryHistorySql = queryHistory.getQueryHistorySql();\n                    String sql = queryHistorySql.getNormalizedSql();\n                    outputStream.write((sql.replaceAll(\"\\n|\\r\", \" \") + \";\\n\").getBytes(StandardCharsets.UTF_8));\n                } else {\n                    outputStream.write(\n                            (QueryHistoryUtil.getDownloadData(queryHistory, zoneOffset, timeZoneOffsetHour) + \"\\n\")"
            },
            {
              "step": 14,
              "variableName": "sql.replaceAll(\"\\n|\\r\", \" \")",
              "startLine": 120,
              "startColumn": 41,
              "endLine": 120,
              "endColumn": 69,
              "uri": "kylin-kylin-5.0.0/src/common-service/src/main/java/org/apache/kylin/rest/service/AsyncTaskService.java",
              "type": "String",
              "code": "                if (onlySql) {\n                    QueryHistorySql queryHistorySql = queryHistory.getQueryHistorySql();\n                    String sql = queryHistorySql.getNormalizedSql();\n                    outputStream.write((sql.replaceAll(\"\\n|\\r\", \" \") + \";\\n\").getBytes(StandardCharsets.UTF_8));\n                } else {\n                    outputStream.write(\n                            (QueryHistoryUtil.getDownloadData(queryHistory, zoneOffset, timeZoneOffsetHour) + \"\\n\")"
            },
            {
              "step": 15,
              "variableName": "sql.replaceAll(\"\\n|\\r\", \" \") + \";\\n\"",
              "startLine": 120,
              "startColumn": 41,
              "endLine": 120,
              "endColumn": 77,
              "uri": "kylin-kylin-5.0.0/src/common-service/src/main/java/org/apache/kylin/rest/service/AsyncTaskService.java",
              "type": "String",
              "code": "                if (onlySql) {\n                    QueryHistorySql queryHistorySql = queryHistory.getQueryHistorySql();\n                    String sql = queryHistorySql.getNormalizedSql();\n                    outputStream.write((sql.replaceAll(\"\\n|\\r\", \" \") + \";\\n\").getBytes(StandardCharsets.UTF_8));\n                } else {\n                    outputStream.write(\n                            (QueryHistoryUtil.getDownloadData(queryHistory, zoneOffset, timeZoneOffsetHour) + \"\\n\")"
            },
            {
              "step": 16,
              "variableName": "(sql.replaceAll(\"\\n|\\r\", \" \") + \";\\n\").getBytes(StandardCharsets.UTF_8)",
              "startLine": 120,
              "startColumn": 40,
              "endLine": 120,
              "endColumn": 111,
              "uri": "kylin-kylin-5.0.0/src/common-service/src/main/java/org/apache/kylin/rest/service/AsyncTaskService.java",
              "type": "",
              "code": "                if (onlySql) {\n                    QueryHistorySql queryHistorySql = queryHistory.getQueryHistorySql();\n                    String sql = queryHistorySql.getNormalizedSql();\n                    outputStream.write((sql.replaceAll(\"\\n|\\r\", \" \") + \";\\n\").getBytes(StandardCharsets.UTF_8));\n                } else {\n                    outputStream.write(\n                            (QueryHistoryUtil.getDownloadData(queryHistory, zoneOffset, timeZoneOffsetHour) + \"\\n\")"
            }
          ],
          "label": "Yes"
        }
      ]
    }
  ],
  "214": [
    {
      "resultIndex": 1,
      "fileName": "ProcessStatusListener.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "tempMetadataDir",
              "startLine": 113,
              "startColumn": 39,
              "endLine": 113,
              "endColumn": 54,
              "uri": "kylin-kylin-5.0.0/src/common-service/src/main/java/org/apache/kylin/rest/KylinPrepareEnvListener.java",
              "type": "String",
              "code": "    private static void setLocalEnvs() {\n        String tempMetadataDir = TempMetadataBuilder.prepareLocalTempMetadata();\n        KylinConfig.setKylinConfigForLocalTest(tempMetadataDir);\n        File localMetadata = new File(tempMetadataDir);\n\n        // pass checkHadoopHome\n        Unsafe.setProperty(\"hadoop.home.dir\", localMetadata.getAbsolutePath() + \"/working-dir\");"
            },
            {
              "step": 1,
              "variableName": "new File(tempMetadataDir)",
              "startLine": 113,
              "startColumn": 30,
              "endLine": 113,
              "endColumn": 55,
              "uri": "kylin-kylin-5.0.0/src/common-service/src/main/java/org/apache/kylin/rest/KylinPrepareEnvListener.java",
              "type": "File",
              "code": "    private static void setLocalEnvs() {\n        String tempMetadataDir = TempMetadataBuilder.prepareLocalTempMetadata();\n        KylinConfig.setKylinConfigForLocalTest(tempMetadataDir);\n        File localMetadata = new File(tempMetadataDir);\n\n        // pass checkHadoopHome\n        Unsafe.setProperty(\"hadoop.home.dir\", localMetadata.getAbsolutePath() + \"/working-dir\");"
            },
            {
              "step": 2,
              "variableName": "localMetadata",
              "startLine": 116,
              "startColumn": 47,
              "endLine": 116,
              "endColumn": 60,
              "uri": "kylin-kylin-5.0.0/src/common-service/src/main/java/org/apache/kylin/rest/KylinPrepareEnvListener.java",
              "type": "File",
              "code": "        File localMetadata = new File(tempMetadataDir);\n\n        // pass checkHadoopHome\n        Unsafe.setProperty(\"hadoop.home.dir\", localMetadata.getAbsolutePath() + \"/working-dir\");\n        Unsafe.setProperty(\"spark.local\", \"true\");\n\n        // enable push down"
            },
            {
              "step": 3,
              "variableName": "localMetadata.getAbsolutePath()",
              "startLine": 116,
              "startColumn": 47,
              "endLine": 116,
              "endColumn": 78,
              "uri": "kylin-kylin-5.0.0/src/common-service/src/main/java/org/apache/kylin/rest/KylinPrepareEnvListener.java",
              "type": "String",
              "code": "        File localMetadata = new File(tempMetadataDir);\n\n        // pass checkHadoopHome\n        Unsafe.setProperty(\"hadoop.home.dir\", localMetadata.getAbsolutePath() + \"/working-dir\");\n        Unsafe.setProperty(\"spark.local\", \"true\");\n\n        // enable push down"
            },
            {
              "step": 4,
              "variableName": "localMetadata.getAbsolutePath() + \"/working-dir\"",
              "startLine": 116,
              "startColumn": 47,
              "endLine": 116,
              "endColumn": 95,
              "uri": "kylin-kylin-5.0.0/src/common-service/src/main/java/org/apache/kylin/rest/KylinPrepareEnvListener.java",
              "type": "String",
              "code": "        File localMetadata = new File(tempMetadataDir);\n\n        // pass checkHadoopHome\n        Unsafe.setProperty(\"hadoop.home.dir\", localMetadata.getAbsolutePath() + \"/working-dir\");\n        Unsafe.setProperty(\"spark.local\", \"true\");\n\n        // enable push down"
            },
            {
              "step": 5,
              "variableName": "String value",
              "startLine": 81,
              "startColumn": 55,
              "endLine": 81,
              "endColumn": 67,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/util/Unsafe.java",
              "type": "String",
              "code": "    }\n\n    /** Set system property */\n    public static String setProperty(String property, String value) {\n        return SystemPropertiesCache.setProperty(property, value);\n    }\n"
            },
            {
              "step": 6,
              "variableName": "value",
              "startLine": 82,
              "startColumn": 60,
              "endLine": 82,
              "endColumn": 65,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/util/Unsafe.java",
              "type": "String",
              "code": "\n    /** Set system property */\n    public static String setProperty(String property, String value) {\n        return SystemPropertiesCache.setProperty(property, value);\n    }\n\n    /** Clear system property */"
            },
            {
              "step": 7,
              "variableName": "String value",
              "startLine": 50,
              "startColumn": 50,
              "endLine": 50,
              "endColumn": 62,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/SystemPropertiesCache.java",
              "type": "String",
              "code": "    }\n\n    // Mainly invoked in tests\n    public static String setProperty(String key, String value) {\n        System.setProperty(key, value);\n        return (String) CACHED_SYSTEM_PROPERTY.put(key, value);\n    }"
            },
            {
              "step": 8,
              "variableName": "value",
              "startLine": 52,
              "startColumn": 57,
              "endLine": 52,
              "endColumn": 62,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/SystemPropertiesCache.java",
              "type": "String",
              "code": "    // Mainly invoked in tests\n    public static String setProperty(String key, String value) {\n        System.setProperty(key, value);\n        return (String) CACHED_SYSTEM_PROPERTY.put(key, value);\n    }\n\n    // Mainly invoked in tests"
            },
            {
              "step": 9,
              "variableName": "CACHED_SYSTEM_PROPERTY",
              "startLine": 52,
              "startColumn": 25,
              "endLine": 52,
              "endColumn": 47,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/SystemPropertiesCache.java",
              "type": "ConcurrentHashMap [<map.value>] : String",
              "code": "    // Mainly invoked in tests\n    public static String setProperty(String key, String value) {\n        System.setProperty(key, value);\n        return (String) CACHED_SYSTEM_PROPERTY.put(key, value);\n    }\n\n    // Mainly invoked in tests"
            },
            {
              "step": 10,
              "variableName": "CACHED_SYSTEM_PROPERTY",
              "startLine": 31,
              "startColumn": 60,
              "endLine": 31,
              "endColumn": 82,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/SystemPropertiesCache.java",
              "type": "ConcurrentHashMap [<map.value>] : String",
              "code": " */\npublic class SystemPropertiesCache {\n\n    private static final ConcurrentHashMap<Object, Object> CACHED_SYSTEM_PROPERTY = new ConcurrentHashMap<>(\n            System.getProperties());\n\n    protected static Map<Object, Object> getProperties() {"
            },
            {
              "step": 11,
              "variableName": "CACHED_SYSTEM_PROPERTY",
              "startLine": 40,
              "startColumn": 23,
              "endLine": 40,
              "endColumn": 45,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/SystemPropertiesCache.java",
              "type": "ConcurrentHashMap [<map.value>] : String",
              "code": "\n    protected static String getProperty(String key) {\n        checkKey(key);\n        Object oval = CACHED_SYSTEM_PROPERTY.get(key);\n        return (oval instanceof String) ? (String) oval : null;\n    }\n"
            },
            {
              "step": 12,
              "variableName": "CACHED_SYSTEM_PROPERTY.get(key)",
              "startLine": 40,
              "startColumn": 23,
              "endLine": 40,
              "endColumn": 54,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/SystemPropertiesCache.java",
              "type": "String",
              "code": "\n    protected static String getProperty(String key) {\n        checkKey(key);\n        Object oval = CACHED_SYSTEM_PROPERTY.get(key);\n        return (oval instanceof String) ? (String) oval : null;\n    }\n"
            },
            {
              "step": 13,
              "variableName": "(String) oval",
              "startLine": 41,
              "startColumn": 43,
              "endLine": 41,
              "endColumn": 56,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/SystemPropertiesCache.java",
              "type": "String",
              "code": "    protected static String getProperty(String key) {\n        checkKey(key);\n        Object oval = CACHED_SYSTEM_PROPERTY.get(key);\n        return (oval instanceof String) ? (String) oval : null;\n    }\n\n    protected static String getProperty(String key, String defaultValue) {"
            },
            {
              "step": 14,
              "variableName": "(oval instanceof String) ? (String) oval : null",
              "startLine": 41,
              "startColumn": 16,
              "endLine": 41,
              "endColumn": 63,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/SystemPropertiesCache.java",
              "type": "... : String",
              "code": "    protected static String getProperty(String key) {\n        checkKey(key);\n        Object oval = CACHED_SYSTEM_PROPERTY.get(key);\n        return (oval instanceof String) ? (String) oval : null;\n    }\n\n    protected static String getProperty(String key, String defaultValue) {"
            },
            {
              "step": 15,
              "variableName": "SystemPropertiesCache.getProperty(\"KYLIN_HOME\")",
              "startLine": 157,
              "startColumn": 25,
              "endLine": 157,
              "endColumn": 72,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java",
              "type": "String",
              "code": "    public static String getKylinHomeWithoutWarn() {\n        String kylinHome = System.getenv(\"KYLIN_HOME\");\n        if (StringUtils.isEmpty(kylinHome)) {\n            kylinHome = SystemPropertiesCache.getProperty(\"KYLIN_HOME\");\n        }\n        return kylinHome;\n    }"
            },
            {
              "step": 16,
              "variableName": "kylinHome",
              "startLine": 159,
              "startColumn": 16,
              "endLine": 159,
              "endColumn": 25,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java",
              "type": "String",
              "code": "        if (StringUtils.isEmpty(kylinHome)) {\n            kylinHome = SystemPropertiesCache.getProperty(\"KYLIN_HOME\");\n        }\n        return kylinHome;\n    }\n\n    public static String getKylinConfHome() {"
            },
            {
              "step": 17,
              "variableName": "getKylinHomeWithoutWarn()",
              "startLine": 147,
              "startColumn": 28,
              "endLine": 147,
              "endColumn": 53,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java",
              "type": "String",
              "code": "     */\n\n    public static String getKylinHome() {\n        String kylinHome = getKylinHomeWithoutWarn();\n        if (StringUtils.isEmpty(kylinHome)) {\n            logger.warn(\"KYLIN_HOME was not set\");\n        }"
            },
            {
              "step": 18,
              "variableName": "kylinHome",
              "startLine": 151,
              "startColumn": 16,
              "endLine": 151,
              "endColumn": 25,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java",
              "type": "String",
              "code": "        if (StringUtils.isEmpty(kylinHome)) {\n            logger.warn(\"KYLIN_HOME was not set\");\n        }\n        return kylinHome;\n    }\n\n    public static String getKylinHomeWithoutWarn() {"
            },
            {
              "step": 19,
              "variableName": "KylinConfig.getKylinHome()",
              "startLine": 144,
              "startColumn": 89,
              "endLine": 144,
              "endColumn": 115,
              "uri": "kylin-kylin-5.0.0/src/common-service/src/main/java/org/apache/kylin/rest/config/initialize/ProcessStatusListener.java",
              "type": "String",
              "code": "        if (ProcessUtils.isAlive(pid)) {\n            try {\n                log.info(\"Start to destroy process {} of job {}\", pid, jobId);\n                final String killCmd = String.format(Locale.ROOT, \"bash %s/sbin/%s %s\", KylinConfig.getKylinHome(),\n                        KILL_PROCESS_TREE, pid);\n                Process killProc = Runtime.getRuntime().exec(killCmd);\n                if (killProc.waitFor(CMD_EXEC_TIMEOUT_SEC, TimeUnit.SECONDS)) {"
            },
            {
              "step": 20,
              "variableName": "String.f",
              "startLine": 144,
              "startColumn": 40,
              "endLine": 145,
              "endColumn": 48,
              "uri": "kylin-kylin-5.0.0/src/common-service/src/main/java/org/apache/kylin/rest/config/initialize/ProcessStatusListener.java",
              "type": "Object[] [[]] : String",
              "code": "        if (ProcessUtils.isAlive(pid)) {\n            try {\n                log.info(\"Start to destroy process {} of job {}\", pid, jobId);\n                final String killCmd = String.format(Locale.ROOT, \"bash %s/sbin/%s %s\", KylinConfig.getKylinHome(),\n                        KILL_PROCESS_TREE, pid);\n                Process killProc = Runtime.getRuntime().exec(killCmd);\n                if (killProc.waitFor(CMD_EXEC_TIMEOUT_SEC, TimeUnit.SECONDS)) {"
            },
            {
              "step": 21,
              "variableName": "String.f",
              "startLine": 144,
              "startColumn": 40,
              "endLine": 145,
              "endColumn": 48,
              "uri": "kylin-kylin-5.0.0/src/common-service/src/main/java/org/apache/kylin/rest/config/initialize/ProcessStatusListener.java",
              "type": "String",
              "code": "        if (ProcessUtils.isAlive(pid)) {\n            try {\n                log.info(\"Start to destroy process {} of job {}\", pid, jobId);\n                final String killCmd = String.format(Locale.ROOT, \"bash %s/sbin/%s %s\", KylinConfig.getKylinHome(),\n                        KILL_PROCESS_TREE, pid);\n                Process killProc = Runtime.getRuntime().exec(killCmd);\n                if (killProc.waitFor(CMD_EXEC_TIMEOUT_SEC, TimeUnit.SECONDS)) {"
            },
            {
              "step": 22,
              "variableName": "killCmd",
              "startLine": 146,
              "startColumn": 62,
              "endLine": 146,
              "endColumn": 69,
              "uri": "kylin-kylin-5.0.0/src/common-service/src/main/java/org/apache/kylin/rest/config/initialize/ProcessStatusListener.java",
              "type": "",
              "code": "                log.info(\"Start to destroy process {} of job {}\", pid, jobId);\n                final String killCmd = String.format(Locale.ROOT, \"bash %s/sbin/%s %s\", KylinConfig.getKylinHome(),\n                        KILL_PROCESS_TREE, pid);\n                Process killProc = Runtime.getRuntime().exec(killCmd);\n                if (killProc.waitFor(CMD_EXEC_TIMEOUT_SEC, TimeUnit.SECONDS)) {\n                    log.info(\"Try to destroy process {} of job {}, exec cmd '{}', exitValue : {}\", pid, jobId, killCmd,\n                            killProc.exitValue());"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "tempMetadataDir",
              "startLine": 112,
              "startColumn": 48,
              "endLine": 112,
              "endColumn": 63,
              "uri": "kylin-kylin-5.0.0/src/common-service/src/main/java/org/apache/kylin/rest/KylinPrepareEnvListener.java",
              "type": "String",
              "code": "\n    private static void setLocalEnvs() {\n        String tempMetadataDir = TempMetadataBuilder.prepareLocalTempMetadata();\n        KylinConfig.setKylinConfigForLocalTest(tempMetadataDir);\n        File localMetadata = new File(tempMetadataDir);\n\n        // pass checkHadoopHome"
            },
            {
              "step": 1,
              "variableName": "String localMetaDir",
              "startLine": 159,
              "startColumn": 51,
              "endLine": 159,
              "endColumn": 70,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/KylinConfig.java",
              "type": "String",
              "code": "    }\n\n    // Only used in test cases!!!\n    public static void setKylinConfigForLocalTest(String localMetaDir) {\n        synchronized (KylinConfig.class) {\n            if (!new File(localMetaDir, \"kylin.properties\").exists()) {\n                throw new IllegalArgumentException(localMetaDir + \" is not a valid local meta dir\");"
            },
            {
              "step": 2,
              "variableName": "localMetaDir",
              "startLine": 167,
              "startColumn": 56,
              "endLine": 167,
              "endColumn": 68,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/KylinConfig.java",
              "type": "String",
              "code": "\n            destroyInstance();\n            logger.info(\"Setting KylinConfig to \" + localMetaDir);\n            Unsafe.setProperty(KylinConfig.KYLIN_CONF, localMetaDir);\n\n            KylinConfig config = KylinConfig.getInstanceFromEnv();\n            config.setMetadataUrl(localMetaDir + \"/metadata\");"
            },
            {
              "step": 3,
              "variableName": "String value",
              "startLine": 81,
              "startColumn": 55,
              "endLine": 81,
              "endColumn": 67,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/util/Unsafe.java",
              "type": "String",
              "code": "    }\n\n    /** Set system property */\n    public static String setProperty(String property, String value) {\n        return SystemPropertiesCache.setProperty(property, value);\n    }\n"
            },
            {
              "step": 4,
              "variableName": "value",
              "startLine": 82,
              "startColumn": 60,
              "endLine": 82,
              "endColumn": 65,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/util/Unsafe.java",
              "type": "String",
              "code": "\n    /** Set system property */\n    public static String setProperty(String property, String value) {\n        return SystemPropertiesCache.setProperty(property, value);\n    }\n\n    /** Clear system property */"
            },
            {
              "step": 5,
              "variableName": "String value",
              "startLine": 50,
              "startColumn": 50,
              "endLine": 50,
              "endColumn": 62,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/SystemPropertiesCache.java",
              "type": "String",
              "code": "    }\n\n    // Mainly invoked in tests\n    public static String setProperty(String key, String value) {\n        System.setProperty(key, value);\n        return (String) CACHED_SYSTEM_PROPERTY.put(key, value);\n    }"
            },
            {
              "step": 6,
              "variableName": "value",
              "startLine": 52,
              "startColumn": 57,
              "endLine": 52,
              "endColumn": 62,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/SystemPropertiesCache.java",
              "type": "String",
              "code": "    // Mainly invoked in tests\n    public static String setProperty(String key, String value) {\n        System.setProperty(key, value);\n        return (String) CACHED_SYSTEM_PROPERTY.put(key, value);\n    }\n\n    // Mainly invoked in tests"
            },
            {
              "step": 7,
              "variableName": "CACHED_SYSTEM_PROPERTY",
              "startLine": 52,
              "startColumn": 25,
              "endLine": 52,
              "endColumn": 47,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/SystemPropertiesCache.java",
              "type": "ConcurrentHashMap [<map.value>] : String",
              "code": "    // Mainly invoked in tests\n    public static String setProperty(String key, String value) {\n        System.setProperty(key, value);\n        return (String) CACHED_SYSTEM_PROPERTY.put(key, value);\n    }\n\n    // Mainly invoked in tests"
            },
            {
              "step": 8,
              "variableName": "CACHED_SYSTEM_PROPERTY",
              "startLine": 31,
              "startColumn": 60,
              "endLine": 31,
              "endColumn": 82,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/SystemPropertiesCache.java",
              "type": "ConcurrentHashMap [<map.value>] : String",
              "code": " */\npublic class SystemPropertiesCache {\n\n    private static final ConcurrentHashMap<Object, Object> CACHED_SYSTEM_PROPERTY = new ConcurrentHashMap<>(\n            System.getProperties());\n\n    protected static Map<Object, Object> getProperties() {"
            },
            {
              "step": 9,
              "variableName": "CACHED_SYSTEM_PROPERTY",
              "startLine": 40,
              "startColumn": 23,
              "endLine": 40,
              "endColumn": 45,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/SystemPropertiesCache.java",
              "type": "ConcurrentHashMap [<map.value>] : String",
              "code": "\n    protected static String getProperty(String key) {\n        checkKey(key);\n        Object oval = CACHED_SYSTEM_PROPERTY.get(key);\n        return (oval instanceof String) ? (String) oval : null;\n    }\n"
            },
            {
              "step": 10,
              "variableName": "CACHED_SYSTEM_PROPERTY.get(key)",
              "startLine": 40,
              "startColumn": 23,
              "endLine": 40,
              "endColumn": 54,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/SystemPropertiesCache.java",
              "type": "String",
              "code": "\n    protected static String getProperty(String key) {\n        checkKey(key);\n        Object oval = CACHED_SYSTEM_PROPERTY.get(key);\n        return (oval instanceof String) ? (String) oval : null;\n    }\n"
            },
            {
              "step": 11,
              "variableName": "(String) oval",
              "startLine": 41,
              "startColumn": 43,
              "endLine": 41,
              "endColumn": 56,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/SystemPropertiesCache.java",
              "type": "String",
              "code": "    protected static String getProperty(String key) {\n        checkKey(key);\n        Object oval = CACHED_SYSTEM_PROPERTY.get(key);\n        return (oval instanceof String) ? (String) oval : null;\n    }\n\n    protected static String getProperty(String key, String defaultValue) {"
            },
            {
              "step": 12,
              "variableName": "(oval instanceof String) ? (String) oval : null",
              "startLine": 41,
              "startColumn": 16,
              "endLine": 41,
              "endColumn": 63,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/SystemPropertiesCache.java",
              "type": "... : String",
              "code": "    protected static String getProperty(String key) {\n        checkKey(key);\n        Object oval = CACHED_SYSTEM_PROPERTY.get(key);\n        return (oval instanceof String) ? (String) oval : null;\n    }\n\n    protected static String getProperty(String key, String defaultValue) {"
            },
            {
              "step": 13,
              "variableName": "SystemPropertiesCache.getProperty(\"KYLIN_HOME\")",
              "startLine": 157,
              "startColumn": 25,
              "endLine": 157,
              "endColumn": 72,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java",
              "type": "String",
              "code": "    public static String getKylinHomeWithoutWarn() {\n        String kylinHome = System.getenv(\"KYLIN_HOME\");\n        if (StringUtils.isEmpty(kylinHome)) {\n            kylinHome = SystemPropertiesCache.getProperty(\"KYLIN_HOME\");\n        }\n        return kylinHome;\n    }"
            },
            {
              "step": 14,
              "variableName": "kylinHome",
              "startLine": 159,
              "startColumn": 16,
              "endLine": 159,
              "endColumn": 25,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java",
              "type": "String",
              "code": "        if (StringUtils.isEmpty(kylinHome)) {\n            kylinHome = SystemPropertiesCache.getProperty(\"KYLIN_HOME\");\n        }\n        return kylinHome;\n    }\n\n    public static String getKylinConfHome() {"
            },
            {
              "step": 15,
              "variableName": "getKylinHomeWithoutWarn()",
              "startLine": 147,
              "startColumn": 28,
              "endLine": 147,
              "endColumn": 53,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java",
              "type": "String",
              "code": "     */\n\n    public static String getKylinHome() {\n        String kylinHome = getKylinHomeWithoutWarn();\n        if (StringUtils.isEmpty(kylinHome)) {\n            logger.warn(\"KYLIN_HOME was not set\");\n        }"
            },
            {
              "step": 16,
              "variableName": "kylinHome",
              "startLine": 151,
              "startColumn": 16,
              "endLine": 151,
              "endColumn": 25,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java",
              "type": "String",
              "code": "        if (StringUtils.isEmpty(kylinHome)) {\n            logger.warn(\"KYLIN_HOME was not set\");\n        }\n        return kylinHome;\n    }\n\n    public static String getKylinHomeWithoutWarn() {"
            },
            {
              "step": 17,
              "variableName": "KylinConfig.getKylinHome()",
              "startLine": 144,
              "startColumn": 89,
              "endLine": 144,
              "endColumn": 115,
              "uri": "kylin-kylin-5.0.0/src/common-service/src/main/java/org/apache/kylin/rest/config/initialize/ProcessStatusListener.java",
              "type": "String",
              "code": "        if (ProcessUtils.isAlive(pid)) {\n            try {\n                log.info(\"Start to destroy process {} of job {}\", pid, jobId);\n                final String killCmd = String.format(Locale.ROOT, \"bash %s/sbin/%s %s\", KylinConfig.getKylinHome(),\n                        KILL_PROCESS_TREE, pid);\n                Process killProc = Runtime.getRuntime().exec(killCmd);\n                if (killProc.waitFor(CMD_EXEC_TIMEOUT_SEC, TimeUnit.SECONDS)) {"
            },
            {
              "step": 18,
              "variableName": "String.f",
              "startLine": 144,
              "startColumn": 40,
              "endLine": 145,
              "endColumn": 48,
              "uri": "kylin-kylin-5.0.0/src/common-service/src/main/java/org/apache/kylin/rest/config/initialize/ProcessStatusListener.java",
              "type": "Object[] [[]] : String",
              "code": "        if (ProcessUtils.isAlive(pid)) {\n            try {\n                log.info(\"Start to destroy process {} of job {}\", pid, jobId);\n                final String killCmd = String.format(Locale.ROOT, \"bash %s/sbin/%s %s\", KylinConfig.getKylinHome(),\n                        KILL_PROCESS_TREE, pid);\n                Process killProc = Runtime.getRuntime().exec(killCmd);\n                if (killProc.waitFor(CMD_EXEC_TIMEOUT_SEC, TimeUnit.SECONDS)) {"
            },
            {
              "step": 19,
              "variableName": "String.f",
              "startLine": 144,
              "startColumn": 40,
              "endLine": 145,
              "endColumn": 48,
              "uri": "kylin-kylin-5.0.0/src/common-service/src/main/java/org/apache/kylin/rest/config/initialize/ProcessStatusListener.java",
              "type": "String",
              "code": "        if (ProcessUtils.isAlive(pid)) {\n            try {\n                log.info(\"Start to destroy process {} of job {}\", pid, jobId);\n                final String killCmd = String.format(Locale.ROOT, \"bash %s/sbin/%s %s\", KylinConfig.getKylinHome(),\n                        KILL_PROCESS_TREE, pid);\n                Process killProc = Runtime.getRuntime().exec(killCmd);\n                if (killProc.waitFor(CMD_EXEC_TIMEOUT_SEC, TimeUnit.SECONDS)) {"
            },
            {
              "step": 20,
              "variableName": "killCmd",
              "startLine": 146,
              "startColumn": 62,
              "endLine": 146,
              "endColumn": 69,
              "uri": "kylin-kylin-5.0.0/src/common-service/src/main/java/org/apache/kylin/rest/config/initialize/ProcessStatusListener.java",
              "type": "",
              "code": "                log.info(\"Start to destroy process {} of job {}\", pid, jobId);\n                final String killCmd = String.format(Locale.ROOT, \"bash %s/sbin/%s %s\", KylinConfig.getKylinHome(),\n                        KILL_PROCESS_TREE, pid);\n                Process killProc = Runtime.getRuntime().exec(killCmd);\n                if (killProc.waitFor(CMD_EXEC_TIMEOUT_SEC, TimeUnit.SECONDS)) {\n                    log.info(\"Try to destroy process {} of job {}, exec cmd '{}', exitValue : {}\", pid, jobId, killCmd,\n                            killProc.exitValue());"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "kv",
              "startLine": 154,
              "startColumn": 36,
              "endLine": 154,
              "endColumn": 38,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/StorageURL.java",
              "type": "Entry",
              "code": "            str.append(\"@\").append(scheme);\n        }\n        for (Entry<String, String> kv : params.entrySet()) {\n            str.append(\",\").append(kv.getKey());\n            if (!kv.getValue().isEmpty()) {\n                String value = kv.getValue();\n                if (value.contains(\",\")) {"
            },
            {
              "step": 1,
              "variableName": "kv.getKey()",
              "startLine": 154,
              "startColumn": 36,
              "endLine": 154,
              "endColumn": 47,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/StorageURL.java",
              "type": "String",
              "code": "            str.append(\"@\").append(scheme);\n        }\n        for (Entry<String, String> kv : params.entrySet()) {\n            str.append(\",\").append(kv.getKey());\n            if (!kv.getValue().isEmpty()) {\n                String value = kv.getValue();\n                if (value.contains(\",\")) {"
            },
            {
              "step": 2,
              "variableName": "str.append(\",\")",
              "startLine": 154,
              "startColumn": 13,
              "endLine": 154,
              "endColumn": 28,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/StorageURL.java",
              "type": "StringBuilder",
              "code": "            str.append(\"@\").append(scheme);\n        }\n        for (Entry<String, String> kv : params.entrySet()) {\n            str.append(\",\").append(kv.getKey());\n            if (!kv.getValue().isEmpty()) {\n                String value = kv.getValue();\n                if (value.contains(\",\")) {"
            },
            {
              "step": 3,
              "variableName": "str",
              "startLine": 163,
              "startColumn": 16,
              "endLine": 163,
              "endColumn": 19,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/StorageURL.java",
              "type": "StringBuilder",
              "code": "                str.append(\"=\").append(value);\n            }\n        }\n        return str.toString();\n    }\n\n    @Override"
            },
            {
              "step": 4,
              "variableName": "str.toString()",
              "startLine": 163,
              "startColumn": 16,
              "endLine": 163,
              "endColumn": 30,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/StorageURL.java",
              "type": "String",
              "code": "                str.append(\"=\").append(value);\n            }\n        }\n        return str.toString();\n    }\n\n    @Override"
            },
            {
              "step": 5,
              "variableName": "getTestConfig().getMetadataUrl().toString()",
              "startLine": 102,
              "startColumn": 42,
              "endLine": 102,
              "endColumn": 85,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/test/java/org/apache/kylin/junit/MetadataExtension.java",
              "type": "String",
              "code": "            }\n            cleanSingletonInstances();\n\n            val kylinHomePath = new File(getTestConfig().getMetadataUrl().toString()).getParentFile().getAbsolutePath();\n            SystemPropertiesCache.setProperty(\"KYLIN_HOME\", kylinHomePath);\n            val jobJar = org.apache.kylin.common.util.FileUtils.findFile(\n                    new File(kylinHomePath, \"../../../assembly/target/\").getAbsolutePath(), \"kylin-assembly(.?)\\\\.jar\");"
            },
            {
              "step": 6,
              "variableName": "new File(getTestConfig().getMetadataUrl().toString())",
              "startLine": 102,
              "startColumn": 33,
              "endLine": 102,
              "endColumn": 86,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/test/java/org/apache/kylin/junit/MetadataExtension.java",
              "type": "File",
              "code": "            }\n            cleanSingletonInstances();\n\n            val kylinHomePath = new File(getTestConfig().getMetadataUrl().toString()).getParentFile().getAbsolutePath();\n            SystemPropertiesCache.setProperty(\"KYLIN_HOME\", kylinHomePath);\n            val jobJar = org.apache.kylin.common.util.FileUtils.findFile(\n                    new File(kylinHomePath, \"../../../assembly/target/\").getAbsolutePath(), \"kylin-assembly(.?)\\\\.jar\");"
            },
            {
              "step": 7,
              "variableName": "new File(getTestConfig().getMetadataUrl().toString()).getParentFile()",
              "startLine": 102,
              "startColumn": 33,
              "endLine": 102,
              "endColumn": 102,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/test/java/org/apache/kylin/junit/MetadataExtension.java",
              "type": "File",
              "code": "            }\n            cleanSingletonInstances();\n\n            val kylinHomePath = new File(getTestConfig().getMetadataUrl().toString()).getParentFile().getAbsolutePath();\n            SystemPropertiesCache.setProperty(\"KYLIN_HOME\", kylinHomePath);\n            val jobJar = org.apache.kylin.common.util.FileUtils.findFile(\n                    new File(kylinHomePath, \"../../../assembly/target/\").getAbsolutePath(), \"kylin-assembly(.?)\\\\.jar\");"
            },
            {
              "step": 8,
              "variableName": "new File(getTestConfig().getMetadataUrl().toString()).getParentFile().getAbsolutePath()",
              "startLine": 102,
              "startColumn": 33,
              "endLine": 102,
              "endColumn": 120,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/test/java/org/apache/kylin/junit/MetadataExtension.java",
              "type": "String",
              "code": "            }\n            cleanSingletonInstances();\n\n            val kylinHomePath = new File(getTestConfig().getMetadataUrl().toString()).getParentFile().getAbsolutePath();\n            SystemPropertiesCache.setProperty(\"KYLIN_HOME\", kylinHomePath);\n            val jobJar = org.apache.kylin.common.util.FileUtils.findFile(\n                    new File(kylinHomePath, \"../../../assembly/target/\").getAbsolutePath(), \"kylin-assembly(.?)\\\\.jar\");"
            },
            {
              "step": 9,
              "variableName": "kylinHomePath",
              "startLine": 103,
              "startColumn": 61,
              "endLine": 103,
              "endColumn": 74,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/test/java/org/apache/kylin/junit/MetadataExtension.java",
              "type": "String",
              "code": "            cleanSingletonInstances();\n\n            val kylinHomePath = new File(getTestConfig().getMetadataUrl().toString()).getParentFile().getAbsolutePath();\n            SystemPropertiesCache.setProperty(\"KYLIN_HOME\", kylinHomePath);\n            val jobJar = org.apache.kylin.common.util.FileUtils.findFile(\n                    new File(kylinHomePath, \"../../../assembly/target/\").getAbsolutePath(), \"kylin-assembly(.?)\\\\.jar\");\n            KylinConfig testConfig = getTestConfig();"
            },
            {
              "step": 10,
              "variableName": "String value",
              "startLine": 50,
              "startColumn": 50,
              "endLine": 50,
              "endColumn": 62,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/SystemPropertiesCache.java",
              "type": "String",
              "code": "    }\n\n    // Mainly invoked in tests\n    public static String setProperty(String key, String value) {\n        System.setProperty(key, value);\n        return (String) CACHED_SYSTEM_PROPERTY.put(key, value);\n    }"
            },
            {
              "step": 11,
              "variableName": "value",
              "startLine": 52,
              "startColumn": 57,
              "endLine": 52,
              "endColumn": 62,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/SystemPropertiesCache.java",
              "type": "String",
              "code": "    // Mainly invoked in tests\n    public static String setProperty(String key, String value) {\n        System.setProperty(key, value);\n        return (String) CACHED_SYSTEM_PROPERTY.put(key, value);\n    }\n\n    // Mainly invoked in tests"
            },
            {
              "step": 12,
              "variableName": "CACHED_SYSTEM_PROPERTY",
              "startLine": 52,
              "startColumn": 25,
              "endLine": 52,
              "endColumn": 47,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/SystemPropertiesCache.java",
              "type": "ConcurrentHashMap [<map.value>] : String",
              "code": "    // Mainly invoked in tests\n    public static String setProperty(String key, String value) {\n        System.setProperty(key, value);\n        return (String) CACHED_SYSTEM_PROPERTY.put(key, value);\n    }\n\n    // Mainly invoked in tests"
            },
            {
              "step": 13,
              "variableName": "CACHED_SYSTEM_PROPERTY",
              "startLine": 31,
              "startColumn": 60,
              "endLine": 31,
              "endColumn": 82,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/SystemPropertiesCache.java",
              "type": "ConcurrentHashMap [<map.value>] : String",
              "code": " */\npublic class SystemPropertiesCache {\n\n    private static final ConcurrentHashMap<Object, Object> CACHED_SYSTEM_PROPERTY = new ConcurrentHashMap<>(\n            System.getProperties());\n\n    protected static Map<Object, Object> getProperties() {"
            },
            {
              "step": 14,
              "variableName": "CACHED_SYSTEM_PROPERTY",
              "startLine": 40,
              "startColumn": 23,
              "endLine": 40,
              "endColumn": 45,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/SystemPropertiesCache.java",
              "type": "ConcurrentHashMap [<map.value>] : String",
              "code": "\n    protected static String getProperty(String key) {\n        checkKey(key);\n        Object oval = CACHED_SYSTEM_PROPERTY.get(key);\n        return (oval instanceof String) ? (String) oval : null;\n    }\n"
            },
            {
              "step": 15,
              "variableName": "CACHED_SYSTEM_PROPERTY.get(key)",
              "startLine": 40,
              "startColumn": 23,
              "endLine": 40,
              "endColumn": 54,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/SystemPropertiesCache.java",
              "type": "String",
              "code": "\n    protected static String getProperty(String key) {\n        checkKey(key);\n        Object oval = CACHED_SYSTEM_PROPERTY.get(key);\n        return (oval instanceof String) ? (String) oval : null;\n    }\n"
            },
            {
              "step": 16,
              "variableName": "(String) oval",
              "startLine": 41,
              "startColumn": 43,
              "endLine": 41,
              "endColumn": 56,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/SystemPropertiesCache.java",
              "type": "String",
              "code": "    protected static String getProperty(String key) {\n        checkKey(key);\n        Object oval = CACHED_SYSTEM_PROPERTY.get(key);\n        return (oval instanceof String) ? (String) oval : null;\n    }\n\n    protected static String getProperty(String key, String defaultValue) {"
            },
            {
              "step": 17,
              "variableName": "(oval instanceof String) ? (String) oval : null",
              "startLine": 41,
              "startColumn": 16,
              "endLine": 41,
              "endColumn": 63,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/SystemPropertiesCache.java",
              "type": "... : String",
              "code": "    protected static String getProperty(String key) {\n        checkKey(key);\n        Object oval = CACHED_SYSTEM_PROPERTY.get(key);\n        return (oval instanceof String) ? (String) oval : null;\n    }\n\n    protected static String getProperty(String key, String defaultValue) {"
            },
            {
              "step": 18,
              "variableName": "SystemPropertiesCache.getProperty(\"KYLIN_HOME\")",
              "startLine": 157,
              "startColumn": 25,
              "endLine": 157,
              "endColumn": 72,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java",
              "type": "String",
              "code": "    public static String getKylinHomeWithoutWarn() {\n        String kylinHome = System.getenv(\"KYLIN_HOME\");\n        if (StringUtils.isEmpty(kylinHome)) {\n            kylinHome = SystemPropertiesCache.getProperty(\"KYLIN_HOME\");\n        }\n        return kylinHome;\n    }"
            },
            {
              "step": 19,
              "variableName": "kylinHome",
              "startLine": 159,
              "startColumn": 16,
              "endLine": 159,
              "endColumn": 25,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java",
              "type": "String",
              "code": "        if (StringUtils.isEmpty(kylinHome)) {\n            kylinHome = SystemPropertiesCache.getProperty(\"KYLIN_HOME\");\n        }\n        return kylinHome;\n    }\n\n    public static String getKylinConfHome() {"
            },
            {
              "step": 20,
              "variableName": "getKylinHomeWithoutWarn()",
              "startLine": 147,
              "startColumn": 28,
              "endLine": 147,
              "endColumn": 53,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java",
              "type": "String",
              "code": "     */\n\n    public static String getKylinHome() {\n        String kylinHome = getKylinHomeWithoutWarn();\n        if (StringUtils.isEmpty(kylinHome)) {\n            logger.warn(\"KYLIN_HOME was not set\");\n        }"
            },
            {
              "step": 21,
              "variableName": "kylinHome",
              "startLine": 151,
              "startColumn": 16,
              "endLine": 151,
              "endColumn": 25,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java",
              "type": "String",
              "code": "        if (StringUtils.isEmpty(kylinHome)) {\n            logger.warn(\"KYLIN_HOME was not set\");\n        }\n        return kylinHome;\n    }\n\n    public static String getKylinHomeWithoutWarn() {"
            },
            {
              "step": 22,
              "variableName": "KylinConfig.getKylinHome()",
              "startLine": 144,
              "startColumn": 89,
              "endLine": 144,
              "endColumn": 115,
              "uri": "kylin-kylin-5.0.0/src/common-service/src/main/java/org/apache/kylin/rest/config/initialize/ProcessStatusListener.java",
              "type": "String",
              "code": "        if (ProcessUtils.isAlive(pid)) {\n            try {\n                log.info(\"Start to destroy process {} of job {}\", pid, jobId);\n                final String killCmd = String.format(Locale.ROOT, \"bash %s/sbin/%s %s\", KylinConfig.getKylinHome(),\n                        KILL_PROCESS_TREE, pid);\n                Process killProc = Runtime.getRuntime().exec(killCmd);\n                if (killProc.waitFor(CMD_EXEC_TIMEOUT_SEC, TimeUnit.SECONDS)) {"
            },
            {
              "step": 23,
              "variableName": "String.f",
              "startLine": 144,
              "startColumn": 40,
              "endLine": 145,
              "endColumn": 48,
              "uri": "kylin-kylin-5.0.0/src/common-service/src/main/java/org/apache/kylin/rest/config/initialize/ProcessStatusListener.java",
              "type": "Object[] [[]] : String",
              "code": "        if (ProcessUtils.isAlive(pid)) {\n            try {\n                log.info(\"Start to destroy process {} of job {}\", pid, jobId);\n                final String killCmd = String.format(Locale.ROOT, \"bash %s/sbin/%s %s\", KylinConfig.getKylinHome(),\n                        KILL_PROCESS_TREE, pid);\n                Process killProc = Runtime.getRuntime().exec(killCmd);\n                if (killProc.waitFor(CMD_EXEC_TIMEOUT_SEC, TimeUnit.SECONDS)) {"
            },
            {
              "step": 24,
              "variableName": "String.f",
              "startLine": 144,
              "startColumn": 40,
              "endLine": 145,
              "endColumn": 48,
              "uri": "kylin-kylin-5.0.0/src/common-service/src/main/java/org/apache/kylin/rest/config/initialize/ProcessStatusListener.java",
              "type": "String",
              "code": "        if (ProcessUtils.isAlive(pid)) {\n            try {\n                log.info(\"Start to destroy process {} of job {}\", pid, jobId);\n                final String killCmd = String.format(Locale.ROOT, \"bash %s/sbin/%s %s\", KylinConfig.getKylinHome(),\n                        KILL_PROCESS_TREE, pid);\n                Process killProc = Runtime.getRuntime().exec(killCmd);\n                if (killProc.waitFor(CMD_EXEC_TIMEOUT_SEC, TimeUnit.SECONDS)) {"
            },
            {
              "step": 25,
              "variableName": "killCmd",
              "startLine": 146,
              "startColumn": 62,
              "endLine": 146,
              "endColumn": 69,
              "uri": "kylin-kylin-5.0.0/src/common-service/src/main/java/org/apache/kylin/rest/config/initialize/ProcessStatusListener.java",
              "type": "",
              "code": "                log.info(\"Start to destroy process {} of job {}\", pid, jobId);\n                final String killCmd = String.format(Locale.ROOT, \"bash %s/sbin/%s %s\", KylinConfig.getKylinHome(),\n                        KILL_PROCESS_TREE, pid);\n                Process killProc = Runtime.getRuntime().exec(killCmd);\n                if (killProc.waitFor(CMD_EXEC_TIMEOUT_SEC, TimeUnit.SECONDS)) {\n                    log.info(\"Try to destroy process {} of job {}, exec cmd '{}', exitValue : {}\", pid, jobId, killCmd,\n                            killProc.exitValue());"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "kv",
              "startLine": 155,
              "startColumn": 18,
              "endLine": 155,
              "endColumn": 20,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/StorageURL.java",
              "type": "Entry",
              "code": "        }\n        for (Entry<String, String> kv : params.entrySet()) {\n            str.append(\",\").append(kv.getKey());\n            if (!kv.getValue().isEmpty()) {\n                String value = kv.getValue();\n                if (value.contains(\",\")) {\n                    value = \"\\\"\" + value + \"\\\"\";"
            },
            {
              "step": 1,
              "variableName": "kv",
              "startLine": 156,
              "startColumn": 32,
              "endLine": 156,
              "endColumn": 34,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/StorageURL.java",
              "type": "Entry",
              "code": "        for (Entry<String, String> kv : params.entrySet()) {\n            str.append(\",\").append(kv.getKey());\n            if (!kv.getValue().isEmpty()) {\n                String value = kv.getValue();\n                if (value.contains(\",\")) {\n                    value = \"\\\"\" + value + \"\\\"\";\n                }"
            },
            {
              "step": 2,
              "variableName": "kv.getValue()",
              "startLine": 156,
              "startColumn": 32,
              "endLine": 156,
              "endColumn": 45,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/StorageURL.java",
              "type": "String",
              "code": "        for (Entry<String, String> kv : params.entrySet()) {\n            str.append(\",\").append(kv.getKey());\n            if (!kv.getValue().isEmpty()) {\n                String value = kv.getValue();\n                if (value.contains(\",\")) {\n                    value = \"\\\"\" + value + \"\\\"\";\n                }"
            },
            {
              "step": 3,
              "variableName": "value",
              "startLine": 160,
              "startColumn": 40,
              "endLine": 160,
              "endColumn": 45,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/StorageURL.java",
              "type": "String",
              "code": "                if (value.contains(\",\")) {\n                    value = \"\\\"\" + value + \"\\\"\";\n                }\n                str.append(\"=\").append(value);\n            }\n        }\n        return str.toString();"
            },
            {
              "step": 4,
              "variableName": "str.append(\"=\")",
              "startLine": 160,
              "startColumn": 17,
              "endLine": 160,
              "endColumn": 32,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/StorageURL.java",
              "type": "StringBuilder",
              "code": "                if (value.contains(\",\")) {\n                    value = \"\\\"\" + value + \"\\\"\";\n                }\n                str.append(\"=\").append(value);\n            }\n        }\n        return str.toString();"
            },
            {
              "step": 5,
              "variableName": "str",
              "startLine": 163,
              "startColumn": 16,
              "endLine": 163,
              "endColumn": 19,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/StorageURL.java",
              "type": "StringBuilder",
              "code": "                str.append(\"=\").append(value);\n            }\n        }\n        return str.toString();\n    }\n\n    @Override"
            },
            {
              "step": 6,
              "variableName": "str.toString()",
              "startLine": 163,
              "startColumn": 16,
              "endLine": 163,
              "endColumn": 30,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/StorageURL.java",
              "type": "String",
              "code": "                str.append(\"=\").append(value);\n            }\n        }\n        return str.toString();\n    }\n\n    @Override"
            },
            {
              "step": 7,
              "variableName": "getTestConfig().getMetadataUrl().toString()",
              "startLine": 102,
              "startColumn": 42,
              "endLine": 102,
              "endColumn": 85,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/test/java/org/apache/kylin/junit/MetadataExtension.java",
              "type": "String",
              "code": "            }\n            cleanSingletonInstances();\n\n            val kylinHomePath = new File(getTestConfig().getMetadataUrl().toString()).getParentFile().getAbsolutePath();\n            SystemPropertiesCache.setProperty(\"KYLIN_HOME\", kylinHomePath);\n            val jobJar = org.apache.kylin.common.util.FileUtils.findFile(\n                    new File(kylinHomePath, \"../../../assembly/target/\").getAbsolutePath(), \"kylin-assembly(.?)\\\\.jar\");"
            },
            {
              "step": 8,
              "variableName": "new File(getTestConfig().getMetadataUrl().toString())",
              "startLine": 102,
              "startColumn": 33,
              "endLine": 102,
              "endColumn": 86,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/test/java/org/apache/kylin/junit/MetadataExtension.java",
              "type": "File",
              "code": "            }\n            cleanSingletonInstances();\n\n            val kylinHomePath = new File(getTestConfig().getMetadataUrl().toString()).getParentFile().getAbsolutePath();\n            SystemPropertiesCache.setProperty(\"KYLIN_HOME\", kylinHomePath);\n            val jobJar = org.apache.kylin.common.util.FileUtils.findFile(\n                    new File(kylinHomePath, \"../../../assembly/target/\").getAbsolutePath(), \"kylin-assembly(.?)\\\\.jar\");"
            },
            {
              "step": 9,
              "variableName": "new File(getTestConfig().getMetadataUrl().toString()).getParentFile()",
              "startLine": 102,
              "startColumn": 33,
              "endLine": 102,
              "endColumn": 102,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/test/java/org/apache/kylin/junit/MetadataExtension.java",
              "type": "File",
              "code": "            }\n            cleanSingletonInstances();\n\n            val kylinHomePath = new File(getTestConfig().getMetadataUrl().toString()).getParentFile().getAbsolutePath();\n            SystemPropertiesCache.setProperty(\"KYLIN_HOME\", kylinHomePath);\n            val jobJar = org.apache.kylin.common.util.FileUtils.findFile(\n                    new File(kylinHomePath, \"../../../assembly/target/\").getAbsolutePath(), \"kylin-assembly(.?)\\\\.jar\");"
            },
            {
              "step": 10,
              "variableName": "new File(getTestConfig().getMetadataUrl().toString()).getParentFile().getAbsolutePath()",
              "startLine": 102,
              "startColumn": 33,
              "endLine": 102,
              "endColumn": 120,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/test/java/org/apache/kylin/junit/MetadataExtension.java",
              "type": "String",
              "code": "            }\n            cleanSingletonInstances();\n\n            val kylinHomePath = new File(getTestConfig().getMetadataUrl().toString()).getParentFile().getAbsolutePath();\n            SystemPropertiesCache.setProperty(\"KYLIN_HOME\", kylinHomePath);\n            val jobJar = org.apache.kylin.common.util.FileUtils.findFile(\n                    new File(kylinHomePath, \"../../../assembly/target/\").getAbsolutePath(), \"kylin-assembly(.?)\\\\.jar\");"
            },
            {
              "step": 11,
              "variableName": "kylinHomePath",
              "startLine": 103,
              "startColumn": 61,
              "endLine": 103,
              "endColumn": 74,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/test/java/org/apache/kylin/junit/MetadataExtension.java",
              "type": "String",
              "code": "            cleanSingletonInstances();\n\n            val kylinHomePath = new File(getTestConfig().getMetadataUrl().toString()).getParentFile().getAbsolutePath();\n            SystemPropertiesCache.setProperty(\"KYLIN_HOME\", kylinHomePath);\n            val jobJar = org.apache.kylin.common.util.FileUtils.findFile(\n                    new File(kylinHomePath, \"../../../assembly/target/\").getAbsolutePath(), \"kylin-assembly(.?)\\\\.jar\");\n            KylinConfig testConfig = getTestConfig();"
            },
            {
              "step": 12,
              "variableName": "String value",
              "startLine": 50,
              "startColumn": 50,
              "endLine": 50,
              "endColumn": 62,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/SystemPropertiesCache.java",
              "type": "String",
              "code": "    }\n\n    // Mainly invoked in tests\n    public static String setProperty(String key, String value) {\n        System.setProperty(key, value);\n        return (String) CACHED_SYSTEM_PROPERTY.put(key, value);\n    }"
            },
            {
              "step": 13,
              "variableName": "value",
              "startLine": 52,
              "startColumn": 57,
              "endLine": 52,
              "endColumn": 62,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/SystemPropertiesCache.java",
              "type": "String",
              "code": "    // Mainly invoked in tests\n    public static String setProperty(String key, String value) {\n        System.setProperty(key, value);\n        return (String) CACHED_SYSTEM_PROPERTY.put(key, value);\n    }\n\n    // Mainly invoked in tests"
            },
            {
              "step": 14,
              "variableName": "CACHED_SYSTEM_PROPERTY",
              "startLine": 52,
              "startColumn": 25,
              "endLine": 52,
              "endColumn": 47,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/SystemPropertiesCache.java",
              "type": "ConcurrentHashMap [<map.value>] : String",
              "code": "    // Mainly invoked in tests\n    public static String setProperty(String key, String value) {\n        System.setProperty(key, value);\n        return (String) CACHED_SYSTEM_PROPERTY.put(key, value);\n    }\n\n    // Mainly invoked in tests"
            },
            {
              "step": 15,
              "variableName": "CACHED_SYSTEM_PROPERTY",
              "startLine": 31,
              "startColumn": 60,
              "endLine": 31,
              "endColumn": 82,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/SystemPropertiesCache.java",
              "type": "ConcurrentHashMap [<map.value>] : String",
              "code": " */\npublic class SystemPropertiesCache {\n\n    private static final ConcurrentHashMap<Object, Object> CACHED_SYSTEM_PROPERTY = new ConcurrentHashMap<>(\n            System.getProperties());\n\n    protected static Map<Object, Object> getProperties() {"
            },
            {
              "step": 16,
              "variableName": "CACHED_SYSTEM_PROPERTY",
              "startLine": 40,
              "startColumn": 23,
              "endLine": 40,
              "endColumn": 45,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/SystemPropertiesCache.java",
              "type": "ConcurrentHashMap [<map.value>] : String",
              "code": "\n    protected static String getProperty(String key) {\n        checkKey(key);\n        Object oval = CACHED_SYSTEM_PROPERTY.get(key);\n        return (oval instanceof String) ? (String) oval : null;\n    }\n"
            },
            {
              "step": 17,
              "variableName": "CACHED_SYSTEM_PROPERTY.get(key)",
              "startLine": 40,
              "startColumn": 23,
              "endLine": 40,
              "endColumn": 54,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/SystemPropertiesCache.java",
              "type": "String",
              "code": "\n    protected static String getProperty(String key) {\n        checkKey(key);\n        Object oval = CACHED_SYSTEM_PROPERTY.get(key);\n        return (oval instanceof String) ? (String) oval : null;\n    }\n"
            },
            {
              "step": 18,
              "variableName": "(String) oval",
              "startLine": 41,
              "startColumn": 43,
              "endLine": 41,
              "endColumn": 56,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/SystemPropertiesCache.java",
              "type": "String",
              "code": "    protected static String getProperty(String key) {\n        checkKey(key);\n        Object oval = CACHED_SYSTEM_PROPERTY.get(key);\n        return (oval instanceof String) ? (String) oval : null;\n    }\n\n    protected static String getProperty(String key, String defaultValue) {"
            },
            {
              "step": 19,
              "variableName": "(oval instanceof String) ? (String) oval : null",
              "startLine": 41,
              "startColumn": 16,
              "endLine": 41,
              "endColumn": 63,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/SystemPropertiesCache.java",
              "type": "... : String",
              "code": "    protected static String getProperty(String key) {\n        checkKey(key);\n        Object oval = CACHED_SYSTEM_PROPERTY.get(key);\n        return (oval instanceof String) ? (String) oval : null;\n    }\n\n    protected static String getProperty(String key, String defaultValue) {"
            },
            {
              "step": 20,
              "variableName": "SystemPropertiesCache.getProperty(\"KYLIN_HOME\")",
              "startLine": 157,
              "startColumn": 25,
              "endLine": 157,
              "endColumn": 72,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java",
              "type": "String",
              "code": "    public static String getKylinHomeWithoutWarn() {\n        String kylinHome = System.getenv(\"KYLIN_HOME\");\n        if (StringUtils.isEmpty(kylinHome)) {\n            kylinHome = SystemPropertiesCache.getProperty(\"KYLIN_HOME\");\n        }\n        return kylinHome;\n    }"
            },
            {
              "step": 21,
              "variableName": "kylinHome",
              "startLine": 159,
              "startColumn": 16,
              "endLine": 159,
              "endColumn": 25,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java",
              "type": "String",
              "code": "        if (StringUtils.isEmpty(kylinHome)) {\n            kylinHome = SystemPropertiesCache.getProperty(\"KYLIN_HOME\");\n        }\n        return kylinHome;\n    }\n\n    public static String getKylinConfHome() {"
            },
            {
              "step": 22,
              "variableName": "getKylinHomeWithoutWarn()",
              "startLine": 147,
              "startColumn": 28,
              "endLine": 147,
              "endColumn": 53,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java",
              "type": "String",
              "code": "     */\n\n    public static String getKylinHome() {\n        String kylinHome = getKylinHomeWithoutWarn();\n        if (StringUtils.isEmpty(kylinHome)) {\n            logger.warn(\"KYLIN_HOME was not set\");\n        }"
            },
            {
              "step": 23,
              "variableName": "kylinHome",
              "startLine": 151,
              "startColumn": 16,
              "endLine": 151,
              "endColumn": 25,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java",
              "type": "String",
              "code": "        if (StringUtils.isEmpty(kylinHome)) {\n            logger.warn(\"KYLIN_HOME was not set\");\n        }\n        return kylinHome;\n    }\n\n    public static String getKylinHomeWithoutWarn() {"
            },
            {
              "step": 24,
              "variableName": "KylinConfig.getKylinHome()",
              "startLine": 144,
              "startColumn": 89,
              "endLine": 144,
              "endColumn": 115,
              "uri": "kylin-kylin-5.0.0/src/common-service/src/main/java/org/apache/kylin/rest/config/initialize/ProcessStatusListener.java",
              "type": "String",
              "code": "        if (ProcessUtils.isAlive(pid)) {\n            try {\n                log.info(\"Start to destroy process {} of job {}\", pid, jobId);\n                final String killCmd = String.format(Locale.ROOT, \"bash %s/sbin/%s %s\", KylinConfig.getKylinHome(),\n                        KILL_PROCESS_TREE, pid);\n                Process killProc = Runtime.getRuntime().exec(killCmd);\n                if (killProc.waitFor(CMD_EXEC_TIMEOUT_SEC, TimeUnit.SECONDS)) {"
            },
            {
              "step": 25,
              "variableName": "String.f",
              "startLine": 144,
              "startColumn": 40,
              "endLine": 145,
              "endColumn": 48,
              "uri": "kylin-kylin-5.0.0/src/common-service/src/main/java/org/apache/kylin/rest/config/initialize/ProcessStatusListener.java",
              "type": "Object[] [[]] : String",
              "code": "        if (ProcessUtils.isAlive(pid)) {\n            try {\n                log.info(\"Start to destroy process {} of job {}\", pid, jobId);\n                final String killCmd = String.format(Locale.ROOT, \"bash %s/sbin/%s %s\", KylinConfig.getKylinHome(),\n                        KILL_PROCESS_TREE, pid);\n                Process killProc = Runtime.getRuntime().exec(killCmd);\n                if (killProc.waitFor(CMD_EXEC_TIMEOUT_SEC, TimeUnit.SECONDS)) {"
            },
            {
              "step": 26,
              "variableName": "String.f",
              "startLine": 144,
              "startColumn": 40,
              "endLine": 145,
              "endColumn": 48,
              "uri": "kylin-kylin-5.0.0/src/common-service/src/main/java/org/apache/kylin/rest/config/initialize/ProcessStatusListener.java",
              "type": "String",
              "code": "        if (ProcessUtils.isAlive(pid)) {\n            try {\n                log.info(\"Start to destroy process {} of job {}\", pid, jobId);\n                final String killCmd = String.format(Locale.ROOT, \"bash %s/sbin/%s %s\", KylinConfig.getKylinHome(),\n                        KILL_PROCESS_TREE, pid);\n                Process killProc = Runtime.getRuntime().exec(killCmd);\n                if (killProc.waitFor(CMD_EXEC_TIMEOUT_SEC, TimeUnit.SECONDS)) {"
            },
            {
              "step": 27,
              "variableName": "killCmd",
              "startLine": 146,
              "startColumn": 62,
              "endLine": 146,
              "endColumn": 69,
              "uri": "kylin-kylin-5.0.0/src/common-service/src/main/java/org/apache/kylin/rest/config/initialize/ProcessStatusListener.java",
              "type": "",
              "code": "                log.info(\"Start to destroy process {} of job {}\", pid, jobId);\n                final String killCmd = String.format(Locale.ROOT, \"bash %s/sbin/%s %s\", KylinConfig.getKylinHome(),\n                        KILL_PROCESS_TREE, pid);\n                Process killProc = Runtime.getRuntime().exec(killCmd);\n                if (killProc.waitFor(CMD_EXEC_TIMEOUT_SEC, TimeUnit.SECONDS)) {\n                    log.info(\"Try to destroy process {} of job {}, exec cmd '{}', exitValue : {}\", pid, jobId, killCmd,\n                            killProc.exitValue());"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 2,
      "fileName": "CliCommandExecutor.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "tempMetadataDir",
              "startLine": 113,
              "startColumn": 39,
              "endLine": 113,
              "endColumn": 54,
              "uri": "kylin-kylin-5.0.0/src/common-service/src/main/java/org/apache/kylin/rest/KylinPrepareEnvListener.java",
              "type": "String",
              "code": "    private static void setLocalEnvs() {\n        String tempMetadataDir = TempMetadataBuilder.prepareLocalTempMetadata();\n        KylinConfig.setKylinConfigForLocalTest(tempMetadataDir);\n        File localMetadata = new File(tempMetadataDir);\n\n        // pass checkHadoopHome\n        Unsafe.setProperty(\"hadoop.home.dir\", localMetadata.getAbsolutePath() + \"/working-dir\");"
            },
            {
              "step": 1,
              "variableName": "new File(tempMetadataDir)",
              "startLine": 113,
              "startColumn": 30,
              "endLine": 113,
              "endColumn": 55,
              "uri": "kylin-kylin-5.0.0/src/common-service/src/main/java/org/apache/kylin/rest/KylinPrepareEnvListener.java",
              "type": "File",
              "code": "    private static void setLocalEnvs() {\n        String tempMetadataDir = TempMetadataBuilder.prepareLocalTempMetadata();\n        KylinConfig.setKylinConfigForLocalTest(tempMetadataDir);\n        File localMetadata = new File(tempMetadataDir);\n\n        // pass checkHadoopHome\n        Unsafe.setProperty(\"hadoop.home.dir\", localMetadata.getAbsolutePath() + \"/working-dir\");"
            },
            {
              "step": 2,
              "variableName": "localMetadata",
              "startLine": 116,
              "startColumn": 47,
              "endLine": 116,
              "endColumn": 60,
              "uri": "kylin-kylin-5.0.0/src/common-service/src/main/java/org/apache/kylin/rest/KylinPrepareEnvListener.java",
              "type": "File",
              "code": "        File localMetadata = new File(tempMetadataDir);\n\n        // pass checkHadoopHome\n        Unsafe.setProperty(\"hadoop.home.dir\", localMetadata.getAbsolutePath() + \"/working-dir\");\n        Unsafe.setProperty(\"spark.local\", \"true\");\n\n        // enable push down"
            },
            {
              "step": 3,
              "variableName": "localMetadata.getAbsolutePath()",
              "startLine": 116,
              "startColumn": 47,
              "endLine": 116,
              "endColumn": 78,
              "uri": "kylin-kylin-5.0.0/src/common-service/src/main/java/org/apache/kylin/rest/KylinPrepareEnvListener.java",
              "type": "String",
              "code": "        File localMetadata = new File(tempMetadataDir);\n\n        // pass checkHadoopHome\n        Unsafe.setProperty(\"hadoop.home.dir\", localMetadata.getAbsolutePath() + \"/working-dir\");\n        Unsafe.setProperty(\"spark.local\", \"true\");\n\n        // enable push down"
            },
            {
              "step": 4,
              "variableName": "localMetadata.getAbsolutePath() + \"/working-dir\"",
              "startLine": 116,
              "startColumn": 47,
              "endLine": 116,
              "endColumn": 95,
              "uri": "kylin-kylin-5.0.0/src/common-service/src/main/java/org/apache/kylin/rest/KylinPrepareEnvListener.java",
              "type": "String",
              "code": "        File localMetadata = new File(tempMetadataDir);\n\n        // pass checkHadoopHome\n        Unsafe.setProperty(\"hadoop.home.dir\", localMetadata.getAbsolutePath() + \"/working-dir\");\n        Unsafe.setProperty(\"spark.local\", \"true\");\n\n        // enable push down"
            },
            {
              "step": 5,
              "variableName": "String value",
              "startLine": 81,
              "startColumn": 55,
              "endLine": 81,
              "endColumn": 67,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/util/Unsafe.java",
              "type": "String",
              "code": "    }\n\n    /** Set system property */\n    public static String setProperty(String property, String value) {\n        return SystemPropertiesCache.setProperty(property, value);\n    }\n"
            },
            {
              "step": 6,
              "variableName": "value",
              "startLine": 82,
              "startColumn": 60,
              "endLine": 82,
              "endColumn": 65,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/util/Unsafe.java",
              "type": "String",
              "code": "\n    /** Set system property */\n    public static String setProperty(String property, String value) {\n        return SystemPropertiesCache.setProperty(property, value);\n    }\n\n    /** Clear system property */"
            },
            {
              "step": 7,
              "variableName": "String value",
              "startLine": 50,
              "startColumn": 50,
              "endLine": 50,
              "endColumn": 62,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/SystemPropertiesCache.java",
              "type": "String",
              "code": "    }\n\n    // Mainly invoked in tests\n    public static String setProperty(String key, String value) {\n        System.setProperty(key, value);\n        return (String) CACHED_SYSTEM_PROPERTY.put(key, value);\n    }"
            },
            {
              "step": 8,
              "variableName": "value",
              "startLine": 52,
              "startColumn": 57,
              "endLine": 52,
              "endColumn": 62,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/SystemPropertiesCache.java",
              "type": "String",
              "code": "    // Mainly invoked in tests\n    public static String setProperty(String key, String value) {\n        System.setProperty(key, value);\n        return (String) CACHED_SYSTEM_PROPERTY.put(key, value);\n    }\n\n    // Mainly invoked in tests"
            },
            {
              "step": 9,
              "variableName": "CACHED_SYSTEM_PROPERTY",
              "startLine": 52,
              "startColumn": 25,
              "endLine": 52,
              "endColumn": 47,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/SystemPropertiesCache.java",
              "type": "ConcurrentHashMap [<map.value>] : String",
              "code": "    // Mainly invoked in tests\n    public static String setProperty(String key, String value) {\n        System.setProperty(key, value);\n        return (String) CACHED_SYSTEM_PROPERTY.put(key, value);\n    }\n\n    // Mainly invoked in tests"
            },
            {
              "step": 10,
              "variableName": "CACHED_SYSTEM_PROPERTY",
              "startLine": 31,
              "startColumn": 60,
              "endLine": 31,
              "endColumn": 82,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/SystemPropertiesCache.java",
              "type": "ConcurrentHashMap [<map.value>] : String",
              "code": " */\npublic class SystemPropertiesCache {\n\n    private static final ConcurrentHashMap<Object, Object> CACHED_SYSTEM_PROPERTY = new ConcurrentHashMap<>(\n            System.getProperties());\n\n    protected static Map<Object, Object> getProperties() {"
            },
            {
              "step": 11,
              "variableName": "CACHED_SYSTEM_PROPERTY",
              "startLine": 40,
              "startColumn": 23,
              "endLine": 40,
              "endColumn": 45,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/SystemPropertiesCache.java",
              "type": "ConcurrentHashMap [<map.value>] : String",
              "code": "\n    protected static String getProperty(String key) {\n        checkKey(key);\n        Object oval = CACHED_SYSTEM_PROPERTY.get(key);\n        return (oval instanceof String) ? (String) oval : null;\n    }\n"
            },
            {
              "step": 12,
              "variableName": "CACHED_SYSTEM_PROPERTY.get(key)",
              "startLine": 40,
              "startColumn": 23,
              "endLine": 40,
              "endColumn": 54,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/SystemPropertiesCache.java",
              "type": "String",
              "code": "\n    protected static String getProperty(String key) {\n        checkKey(key);\n        Object oval = CACHED_SYSTEM_PROPERTY.get(key);\n        return (oval instanceof String) ? (String) oval : null;\n    }\n"
            },
            {
              "step": 13,
              "variableName": "(String) oval",
              "startLine": 41,
              "startColumn": 43,
              "endLine": 41,
              "endColumn": 56,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/SystemPropertiesCache.java",
              "type": "String",
              "code": "    protected static String getProperty(String key) {\n        checkKey(key);\n        Object oval = CACHED_SYSTEM_PROPERTY.get(key);\n        return (oval instanceof String) ? (String) oval : null;\n    }\n\n    protected static String getProperty(String key, String defaultValue) {"
            },
            {
              "step": 14,
              "variableName": "(oval instanceof String) ? (String) oval : null",
              "startLine": 41,
              "startColumn": 16,
              "endLine": 41,
              "endColumn": 63,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/SystemPropertiesCache.java",
              "type": "... : String",
              "code": "    protected static String getProperty(String key) {\n        checkKey(key);\n        Object oval = CACHED_SYSTEM_PROPERTY.get(key);\n        return (oval instanceof String) ? (String) oval : null;\n    }\n\n    protected static String getProperty(String key, String defaultValue) {"
            },
            {
              "step": 15,
              "variableName": "SystemPropertiesCache.getProperty(\"KYLIN_HOME\")",
              "startLine": 157,
              "startColumn": 25,
              "endLine": 157,
              "endColumn": 72,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java",
              "type": "String",
              "code": "    public static String getKylinHomeWithoutWarn() {\n        String kylinHome = System.getenv(\"KYLIN_HOME\");\n        if (StringUtils.isEmpty(kylinHome)) {\n            kylinHome = SystemPropertiesCache.getProperty(\"KYLIN_HOME\");\n        }\n        return kylinHome;\n    }"
            },
            {
              "step": 16,
              "variableName": "kylinHome",
              "startLine": 159,
              "startColumn": 16,
              "endLine": 159,
              "endColumn": 25,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java",
              "type": "String",
              "code": "        if (StringUtils.isEmpty(kylinHome)) {\n            kylinHome = SystemPropertiesCache.getProperty(\"KYLIN_HOME\");\n        }\n        return kylinHome;\n    }\n\n    public static String getKylinConfHome() {"
            },
            {
              "step": 17,
              "variableName": "getKylinHomeWithoutWarn()",
              "startLine": 147,
              "startColumn": 28,
              "endLine": 147,
              "endColumn": 53,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java",
              "type": "String",
              "code": "     */\n\n    public static String getKylinHome() {\n        String kylinHome = getKylinHomeWithoutWarn();\n        if (StringUtils.isEmpty(kylinHome)) {\n            logger.warn(\"KYLIN_HOME was not set\");\n        }"
            },
            {
              "step": 18,
              "variableName": "kylinHome",
              "startLine": 151,
              "startColumn": 16,
              "endLine": 151,
              "endColumn": 25,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java",
              "type": "String",
              "code": "        if (StringUtils.isEmpty(kylinHome)) {\n            logger.warn(\"KYLIN_HOME was not set\");\n        }\n        return kylinHome;\n    }\n\n    public static String getKylinHomeWithoutWarn() {"
            },
            {
              "step": 19,
              "variableName": "KylinConfig.getKylinHome()",
              "startLine": 185,
              "startColumn": 91,
              "endLine": 185,
              "endColumn": 117,
              "uri": "kylin-kylin-5.0.0/src/ops-service/src/main/java/org/apache/kylin/rest/service/SystemService.java",
              "type": "String",
              "code": "                if (KylinConfig.getInstanceFromEnv().getMicroServiceMode() == null) {\n                    CliCommandExecutor commandExecutor = new CliCommandExecutor();\n                    val patternedLogger = new BufferedLogger(logger);\n                    String finalCommand = String.format(Locale.ROOT, \"%s/bin/diag.sh %s\", KylinConfig.getKylinHome(),\n                            StringUtils.join(arguments, \" \"));\n                    commandExecutor.execute(finalCommand, patternedLogger, uuid);\n                } else {"
            },
            {
              "step": 20,
              "variableName": "String.format(Local",
              "startLine": 185,
              "startColumn": 43,
              "endLine": 186,
              "endColumn": 62,
              "uri": "kylin-kylin-5.0.0/src/ops-service/src/main/java/org/apache/kylin/rest/service/SystemService.java",
              "type": "Object[] [[]] : String",
              "code": "                if (KylinConfig.getInstanceFromEnv().getMicroServiceMode() == null) {\n                    CliCommandExecutor commandExecutor = new CliCommandExecutor();\n                    val patternedLogger = new BufferedLogger(logger);\n                    String finalCommand = String.format(Locale.ROOT, \"%s/bin/diag.sh %s\", KylinConfig.getKylinHome(),\n                            StringUtils.join(arguments, \" \"));\n                    commandExecutor.execute(finalCommand, patternedLogger, uuid);\n                } else {"
            },
            {
              "step": 21,
              "variableName": "String.format(Local",
              "startLine": 185,
              "startColumn": 43,
              "endLine": 186,
              "endColumn": 62,
              "uri": "kylin-kylin-5.0.0/src/ops-service/src/main/java/org/apache/kylin/rest/service/SystemService.java",
              "type": "String",
              "code": "                if (KylinConfig.getInstanceFromEnv().getMicroServiceMode() == null) {\n                    CliCommandExecutor commandExecutor = new CliCommandExecutor();\n                    val patternedLogger = new BufferedLogger(logger);\n                    String finalCommand = String.format(Locale.ROOT, \"%s/bin/diag.sh %s\", KylinConfig.getKylinHome(),\n                            StringUtils.join(arguments, \" \"));\n                    commandExecutor.execute(finalCommand, patternedLogger, uuid);\n                } else {"
            },
            {
              "step": 22,
              "variableName": "finalCommand",
              "startLine": 187,
              "startColumn": 45,
              "endLine": 187,
              "endColumn": 57,
              "uri": "kylin-kylin-5.0.0/src/ops-service/src/main/java/org/apache/kylin/rest/service/SystemService.java",
              "type": "String",
              "code": "                    val patternedLogger = new BufferedLogger(logger);\n                    String finalCommand = String.format(Locale.ROOT, \"%s/bin/diag.sh %s\", KylinConfig.getKylinHome(),\n                            StringUtils.join(arguments, \" \"));\n                    commandExecutor.execute(finalCommand, patternedLogger, uuid);\n                } else {\n                    val packageType = diagPackageType.toString().toLowerCase(Locale.ROOT);\n                    new DiagK8sTool(headers, packageType).execute(arguments);"
            },
            {
              "step": 23,
              "variableName": "String command",
              "startLine": 139,
              "startColumn": 37,
              "endLine": 139,
              "endColumn": 51,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/util/CliCommandExecutor.java",
              "type": "String",
              "code": "        return execute(command, logAppender, null);\n    }\n\n    public CliCmdExecResult execute(String command, Logger logAppender, String jobId) throws ShellException {\n        CliCmdExecResult r;\n        if (remoteHost == null) {\n            r = runNativeCommand(command, logAppender, jobId);"
            },
            {
              "step": 24,
              "variableName": "command",
              "startLine": 144,
              "startColumn": 49,
              "endLine": 144,
              "endColumn": 56,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/util/CliCommandExecutor.java",
              "type": "String",
              "code": "        if (remoteHost == null) {\n            r = runNativeCommand(command, logAppender, jobId);\n        } else {\n            val remoteResult = runRemoteCommand(command, logAppender);\n            r = new CliCmdExecResult(remoteResult.getFirst(), remoteResult.getSecond(), null);\n        }\n"
            },
            {
              "step": 25,
              "variableName": "String command",
              "startLine": 157,
              "startColumn": 52,
              "endLine": 157,
              "endColumn": 66,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/util/CliCommandExecutor.java",
              "type": "String",
              "code": "        return r;\n    }\n\n    private Pair<Integer, String> runRemoteCommand(String command, Logger logAppender) throws ShellException {\n        try {\n            SSHClient ssh = getSshClient();\n"
            },
            {
              "step": 26,
              "variableName": "command",
              "startLine": 162,
              "startColumn": 41,
              "endLine": 162,
              "endColumn": 48,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/util/CliCommandExecutor.java",
              "type": "",
              "code": "            SSHClient ssh = getSshClient();\n\n            SSHClientOutput sshOutput;\n            sshOutput = ssh.execCommand(command, REMOTE_TIMEOUT_SECONDS, logAppender);\n            int exitCode = sshOutput.getExitCode();\n            String output = sshOutput.getText();\n            return Pair.newPair(exitCode, output);"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "tempMetadataDir",
              "startLine": 112,
              "startColumn": 48,
              "endLine": 112,
              "endColumn": 63,
              "uri": "kylin-kylin-5.0.0/src/common-service/src/main/java/org/apache/kylin/rest/KylinPrepareEnvListener.java",
              "type": "String",
              "code": "\n    private static void setLocalEnvs() {\n        String tempMetadataDir = TempMetadataBuilder.prepareLocalTempMetadata();\n        KylinConfig.setKylinConfigForLocalTest(tempMetadataDir);\n        File localMetadata = new File(tempMetadataDir);\n\n        // pass checkHadoopHome"
            },
            {
              "step": 1,
              "variableName": "String localMetaDir",
              "startLine": 159,
              "startColumn": 51,
              "endLine": 159,
              "endColumn": 70,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/KylinConfig.java",
              "type": "String",
              "code": "    }\n\n    // Only used in test cases!!!\n    public static void setKylinConfigForLocalTest(String localMetaDir) {\n        synchronized (KylinConfig.class) {\n            if (!new File(localMetaDir, \"kylin.properties\").exists()) {\n                throw new IllegalArgumentException(localMetaDir + \" is not a valid local meta dir\");"
            },
            {
              "step": 2,
              "variableName": "localMetaDir",
              "startLine": 167,
              "startColumn": 56,
              "endLine": 167,
              "endColumn": 68,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/KylinConfig.java",
              "type": "String",
              "code": "\n            destroyInstance();\n            logger.info(\"Setting KylinConfig to \" + localMetaDir);\n            Unsafe.setProperty(KylinConfig.KYLIN_CONF, localMetaDir);\n\n            KylinConfig config = KylinConfig.getInstanceFromEnv();\n            config.setMetadataUrl(localMetaDir + \"/metadata\");"
            },
            {
              "step": 3,
              "variableName": "String value",
              "startLine": 81,
              "startColumn": 55,
              "endLine": 81,
              "endColumn": 67,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/util/Unsafe.java",
              "type": "String",
              "code": "    }\n\n    /** Set system property */\n    public static String setProperty(String property, String value) {\n        return SystemPropertiesCache.setProperty(property, value);\n    }\n"
            },
            {
              "step": 4,
              "variableName": "value",
              "startLine": 82,
              "startColumn": 60,
              "endLine": 82,
              "endColumn": 65,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/util/Unsafe.java",
              "type": "String",
              "code": "\n    /** Set system property */\n    public static String setProperty(String property, String value) {\n        return SystemPropertiesCache.setProperty(property, value);\n    }\n\n    /** Clear system property */"
            },
            {
              "step": 5,
              "variableName": "String value",
              "startLine": 50,
              "startColumn": 50,
              "endLine": 50,
              "endColumn": 62,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/SystemPropertiesCache.java",
              "type": "String",
              "code": "    }\n\n    // Mainly invoked in tests\n    public static String setProperty(String key, String value) {\n        System.setProperty(key, value);\n        return (String) CACHED_SYSTEM_PROPERTY.put(key, value);\n    }"
            },
            {
              "step": 6,
              "variableName": "value",
              "startLine": 52,
              "startColumn": 57,
              "endLine": 52,
              "endColumn": 62,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/SystemPropertiesCache.java",
              "type": "String",
              "code": "    // Mainly invoked in tests\n    public static String setProperty(String key, String value) {\n        System.setProperty(key, value);\n        return (String) CACHED_SYSTEM_PROPERTY.put(key, value);\n    }\n\n    // Mainly invoked in tests"
            },
            {
              "step": 7,
              "variableName": "CACHED_SYSTEM_PROPERTY",
              "startLine": 52,
              "startColumn": 25,
              "endLine": 52,
              "endColumn": 47,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/SystemPropertiesCache.java",
              "type": "ConcurrentHashMap [<map.value>] : String",
              "code": "    // Mainly invoked in tests\n    public static String setProperty(String key, String value) {\n        System.setProperty(key, value);\n        return (String) CACHED_SYSTEM_PROPERTY.put(key, value);\n    }\n\n    // Mainly invoked in tests"
            },
            {
              "step": 8,
              "variableName": "CACHED_SYSTEM_PROPERTY",
              "startLine": 31,
              "startColumn": 60,
              "endLine": 31,
              "endColumn": 82,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/SystemPropertiesCache.java",
              "type": "ConcurrentHashMap [<map.value>] : String",
              "code": " */\npublic class SystemPropertiesCache {\n\n    private static final ConcurrentHashMap<Object, Object> CACHED_SYSTEM_PROPERTY = new ConcurrentHashMap<>(\n            System.getProperties());\n\n    protected static Map<Object, Object> getProperties() {"
            },
            {
              "step": 9,
              "variableName": "CACHED_SYSTEM_PROPERTY",
              "startLine": 40,
              "startColumn": 23,
              "endLine": 40,
              "endColumn": 45,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/SystemPropertiesCache.java",
              "type": "ConcurrentHashMap [<map.value>] : String",
              "code": "\n    protected static String getProperty(String key) {\n        checkKey(key);\n        Object oval = CACHED_SYSTEM_PROPERTY.get(key);\n        return (oval instanceof String) ? (String) oval : null;\n    }\n"
            },
            {
              "step": 10,
              "variableName": "CACHED_SYSTEM_PROPERTY.get(key)",
              "startLine": 40,
              "startColumn": 23,
              "endLine": 40,
              "endColumn": 54,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/SystemPropertiesCache.java",
              "type": "String",
              "code": "\n    protected static String getProperty(String key) {\n        checkKey(key);\n        Object oval = CACHED_SYSTEM_PROPERTY.get(key);\n        return (oval instanceof String) ? (String) oval : null;\n    }\n"
            },
            {
              "step": 11,
              "variableName": "(String) oval",
              "startLine": 41,
              "startColumn": 43,
              "endLine": 41,
              "endColumn": 56,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/SystemPropertiesCache.java",
              "type": "String",
              "code": "    protected static String getProperty(String key) {\n        checkKey(key);\n        Object oval = CACHED_SYSTEM_PROPERTY.get(key);\n        return (oval instanceof String) ? (String) oval : null;\n    }\n\n    protected static String getProperty(String key, String defaultValue) {"
            },
            {
              "step": 12,
              "variableName": "(oval instanceof String) ? (String) oval : null",
              "startLine": 41,
              "startColumn": 16,
              "endLine": 41,
              "endColumn": 63,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/SystemPropertiesCache.java",
              "type": "... : String",
              "code": "    protected static String getProperty(String key) {\n        checkKey(key);\n        Object oval = CACHED_SYSTEM_PROPERTY.get(key);\n        return (oval instanceof String) ? (String) oval : null;\n    }\n\n    protected static String getProperty(String key, String defaultValue) {"
            },
            {
              "step": 13,
              "variableName": "SystemPropertiesCache.getProperty(\"KYLIN_HOME\")",
              "startLine": 157,
              "startColumn": 25,
              "endLine": 157,
              "endColumn": 72,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java",
              "type": "String",
              "code": "    public static String getKylinHomeWithoutWarn() {\n        String kylinHome = System.getenv(\"KYLIN_HOME\");\n        if (StringUtils.isEmpty(kylinHome)) {\n            kylinHome = SystemPropertiesCache.getProperty(\"KYLIN_HOME\");\n        }\n        return kylinHome;\n    }"
            },
            {
              "step": 14,
              "variableName": "kylinHome",
              "startLine": 159,
              "startColumn": 16,
              "endLine": 159,
              "endColumn": 25,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java",
              "type": "String",
              "code": "        if (StringUtils.isEmpty(kylinHome)) {\n            kylinHome = SystemPropertiesCache.getProperty(\"KYLIN_HOME\");\n        }\n        return kylinHome;\n    }\n\n    public static String getKylinConfHome() {"
            },
            {
              "step": 15,
              "variableName": "getKylinHomeWithoutWarn()",
              "startLine": 147,
              "startColumn": 28,
              "endLine": 147,
              "endColumn": 53,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java",
              "type": "String",
              "code": "     */\n\n    public static String getKylinHome() {\n        String kylinHome = getKylinHomeWithoutWarn();\n        if (StringUtils.isEmpty(kylinHome)) {\n            logger.warn(\"KYLIN_HOME was not set\");\n        }"
            },
            {
              "step": 16,
              "variableName": "kylinHome",
              "startLine": 151,
              "startColumn": 16,
              "endLine": 151,
              "endColumn": 25,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java",
              "type": "String",
              "code": "        if (StringUtils.isEmpty(kylinHome)) {\n            logger.warn(\"KYLIN_HOME was not set\");\n        }\n        return kylinHome;\n    }\n\n    public static String getKylinHomeWithoutWarn() {"
            },
            {
              "step": 17,
              "variableName": "KylinConfig.getKylinHome()",
              "startLine": 185,
              "startColumn": 91,
              "endLine": 185,
              "endColumn": 117,
              "uri": "kylin-kylin-5.0.0/src/ops-service/src/main/java/org/apache/kylin/rest/service/SystemService.java",
              "type": "String",
              "code": "                if (KylinConfig.getInstanceFromEnv().getMicroServiceMode() == null) {\n                    CliCommandExecutor commandExecutor = new CliCommandExecutor();\n                    val patternedLogger = new BufferedLogger(logger);\n                    String finalCommand = String.format(Locale.ROOT, \"%s/bin/diag.sh %s\", KylinConfig.getKylinHome(),\n                            StringUtils.join(arguments, \" \"));\n                    commandExecutor.execute(finalCommand, patternedLogger, uuid);\n                } else {"
            },
            {
              "step": 18,
              "variableName": "String.format(Local",
              "startLine": 185,
              "startColumn": 43,
              "endLine": 186,
              "endColumn": 62,
              "uri": "kylin-kylin-5.0.0/src/ops-service/src/main/java/org/apache/kylin/rest/service/SystemService.java",
              "type": "Object[] [[]] : String",
              "code": "                if (KylinConfig.getInstanceFromEnv().getMicroServiceMode() == null) {\n                    CliCommandExecutor commandExecutor = new CliCommandExecutor();\n                    val patternedLogger = new BufferedLogger(logger);\n                    String finalCommand = String.format(Locale.ROOT, \"%s/bin/diag.sh %s\", KylinConfig.getKylinHome(),\n                            StringUtils.join(arguments, \" \"));\n                    commandExecutor.execute(finalCommand, patternedLogger, uuid);\n                } else {"
            },
            {
              "step": 19,
              "variableName": "String.format(Local",
              "startLine": 185,
              "startColumn": 43,
              "endLine": 186,
              "endColumn": 62,
              "uri": "kylin-kylin-5.0.0/src/ops-service/src/main/java/org/apache/kylin/rest/service/SystemService.java",
              "type": "String",
              "code": "                if (KylinConfig.getInstanceFromEnv().getMicroServiceMode() == null) {\n                    CliCommandExecutor commandExecutor = new CliCommandExecutor();\n                    val patternedLogger = new BufferedLogger(logger);\n                    String finalCommand = String.format(Locale.ROOT, \"%s/bin/diag.sh %s\", KylinConfig.getKylinHome(),\n                            StringUtils.join(arguments, \" \"));\n                    commandExecutor.execute(finalCommand, patternedLogger, uuid);\n                } else {"
            },
            {
              "step": 20,
              "variableName": "finalCommand",
              "startLine": 187,
              "startColumn": 45,
              "endLine": 187,
              "endColumn": 57,
              "uri": "kylin-kylin-5.0.0/src/ops-service/src/main/java/org/apache/kylin/rest/service/SystemService.java",
              "type": "String",
              "code": "                    val patternedLogger = new BufferedLogger(logger);\n                    String finalCommand = String.format(Locale.ROOT, \"%s/bin/diag.sh %s\", KylinConfig.getKylinHome(),\n                            StringUtils.join(arguments, \" \"));\n                    commandExecutor.execute(finalCommand, patternedLogger, uuid);\n                } else {\n                    val packageType = diagPackageType.toString().toLowerCase(Locale.ROOT);\n                    new DiagK8sTool(headers, packageType).execute(arguments);"
            },
            {
              "step": 21,
              "variableName": "String command",
              "startLine": 139,
              "startColumn": 37,
              "endLine": 139,
              "endColumn": 51,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/util/CliCommandExecutor.java",
              "type": "String",
              "code": "        return execute(command, logAppender, null);\n    }\n\n    public CliCmdExecResult execute(String command, Logger logAppender, String jobId) throws ShellException {\n        CliCmdExecResult r;\n        if (remoteHost == null) {\n            r = runNativeCommand(command, logAppender, jobId);"
            },
            {
              "step": 22,
              "variableName": "command",
              "startLine": 144,
              "startColumn": 49,
              "endLine": 144,
              "endColumn": 56,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/util/CliCommandExecutor.java",
              "type": "String",
              "code": "        if (remoteHost == null) {\n            r = runNativeCommand(command, logAppender, jobId);\n        } else {\n            val remoteResult = runRemoteCommand(command, logAppender);\n            r = new CliCmdExecResult(remoteResult.getFirst(), remoteResult.getSecond(), null);\n        }\n"
            },
            {
              "step": 23,
              "variableName": "String command",
              "startLine": 157,
              "startColumn": 52,
              "endLine": 157,
              "endColumn": 66,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/util/CliCommandExecutor.java",
              "type": "String",
              "code": "        return r;\n    }\n\n    private Pair<Integer, String> runRemoteCommand(String command, Logger logAppender) throws ShellException {\n        try {\n            SSHClient ssh = getSshClient();\n"
            },
            {
              "step": 24,
              "variableName": "command",
              "startLine": 162,
              "startColumn": 41,
              "endLine": 162,
              "endColumn": 48,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/util/CliCommandExecutor.java",
              "type": "",
              "code": "            SSHClient ssh = getSshClient();\n\n            SSHClientOutput sshOutput;\n            sshOutput = ssh.execCommand(command, REMOTE_TIMEOUT_SECONDS, logAppender);\n            int exitCode = sshOutput.getExitCode();\n            String output = sshOutput.getText();\n            return Pair.newPair(exitCode, output);"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "kv",
              "startLine": 109,
              "startColumn": 30,
              "endLine": 109,
              "endColumn": 32,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/BackwardCompatibilityConfig.java",
              "type": "Entry",
              "code": "    public Map<String, String> check(Map<String, String> props) {\n        LinkedHashMap<String, String> result = new LinkedHashMap<>();\n        for (Entry<String, String> kv : props.entrySet()) {\n            result.put(check(kv.getKey()), kv.getValue());\n        }\n        return result;\n    }"
            },
            {
              "step": 1,
              "variableName": "kv",
              "startLine": 109,
              "startColumn": 44,
              "endLine": 109,
              "endColumn": 46,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/BackwardCompatibilityConfig.java",
              "type": "Entry",
              "code": "    public Map<String, String> check(Map<String, String> props) {\n        LinkedHashMap<String, String> result = new LinkedHashMap<>();\n        for (Entry<String, String> kv : props.entrySet()) {\n            result.put(check(kv.getKey()), kv.getValue());\n        }\n        return result;\n    }"
            },
            {
              "step": 2,
              "variableName": "kv.getValue()",
              "startLine": 109,
              "startColumn": 44,
              "endLine": 109,
              "endColumn": 57,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/BackwardCompatibilityConfig.java",
              "type": "String",
              "code": "    public Map<String, String> check(Map<String, String> props) {\n        LinkedHashMap<String, String> result = new LinkedHashMap<>();\n        for (Entry<String, String> kv : props.entrySet()) {\n            result.put(check(kv.getKey()), kv.getValue());\n        }\n        return result;\n    }"
            },
            {
              "step": 3,
              "variableName": "result",
              "startLine": 109,
              "startColumn": 13,
              "endLine": 109,
              "endColumn": 19,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/BackwardCompatibilityConfig.java",
              "type": "LinkedHashMap [<map.value>] : String",
              "code": "    public Map<String, String> check(Map<String, String> props) {\n        LinkedHashMap<String, String> result = new LinkedHashMap<>();\n        for (Entry<String, String> kv : props.entrySet()) {\n            result.put(check(kv.getKey()), kv.getValue());\n        }\n        return result;\n    }"
            },
            {
              "step": 4,
              "variableName": "result",
              "startLine": 111,
              "startColumn": 16,
              "endLine": 111,
              "endColumn": 22,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/BackwardCompatibilityConfig.java",
              "type": "LinkedHashMap [<map.value>] : String",
              "code": "        for (Entry<String, String> kv : props.entrySet()) {\n            result.put(check(kv.getKey()), kv.getValue());\n        }\n        return result;\n    }\n\n    public Properties check(Properties props) {"
            },
            {
              "step": 5,
              "variableName": "BCC.check(overrides)",
              "startLine": 53,
              "startColumn": 26,
              "endLine": 53,
              "endColumn": 46,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/KylinConfigExt.java",
              "type": "LinkedHashMap [<map.value>] : String",
              "code": "            throw new IllegalArgumentException();\n        }\n        this.base = base;\n        this.overrides = BCC.check(overrides);\n        // overrides > env > properties\n        this.strSubstitutor = new StrSubstitutor(\n                new CompositeMapView(this.properties, STATIC_SYSTEM_ENV, this.overrides));"
            },
            {
              "step": 6,
              "variableName": "this",
              "startLine": 53,
              "startColumn": 9,
              "endLine": 53,
              "endColumn": 13,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/KylinConfigExt.java",
              "type": "KylinConfigExt [overrides, <map.value>] : String",
              "code": "            throw new IllegalArgumentException();\n        }\n        this.base = base;\n        this.overrides = BCC.check(overrides);\n        // overrides > env > properties\n        this.strSubstitutor = new StrSubstitutor(\n                new CompositeMapView(this.properties, STATIC_SYSTEM_ENV, this.overrides));"
            },
            {
              "step": 7,
              "variableName": "KylinConfigExt",
              "startLine": 47,
              "startColumn": 13,
              "endLine": 47,
              "endColumn": 27,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/KylinConfigExt.java",
              "type": "KylinConfigExt [overrides, <map.value>] : String",
              "code": "        }\n    }\n\n    private KylinConfigExt(KylinConfig base, Map<String, String> overrides) {\n        super(base.getRawAllProperties(), true);\n        if (base.getClass() != KylinConfig.class) {\n            throw new IllegalArgumentException();"
            },
            {
              "step": 8,
              "variableName": "new KylinConfigExt(kylinConfig, overrides)",
              "startLine": 43,
              "startColumn": 20,
              "endLine": 43,
              "endColumn": 62,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/KylinConfigExt.java",
              "type": "KylinConfigExt [overrides, <map.value>] : String",
              "code": "        if (kylinConfig instanceof KylinConfigExt) {\n            return new KylinConfigExt((KylinConfigExt) kylinConfig, overrides);\n        } else {\n            return new KylinConfigExt(kylinConfig, overrides);\n        }\n    }\n"
            },
            {
              "step": 9,
              "variableName": "KylinConfigExt.createInstance(kylinConfigExt, jobOverrides)",
              "startLine": 396,
              "startColumn": 16,
              "endLine": 396,
              "endColumn": 75,
              "uri": "kylin-kylin-5.0.0/src/spark-project/engine-spark/src/main/java/org/apache/kylin/job/execution/NSparkExecutable.java",
              "type": "KylinConfigExt [overrides, <map.value>] : String",
              "code": "            jobOverrides.put(kylinConfigExt.getKubernetesUploadPathKey(),\n                    path + \"/\" + StringUtils.defaultIfBlank(parentId, getId()));\n        }\n        return KylinConfigExt.createInstance(kylinConfigExt, jobOverrides);\n    }\n\n    public KylinConfigExt getKylinConfigExt(KylinConfig originalConfig, String project) {"
            },
            {
              "step": 10,
              "variableName": "getConfig()",
              "startLine": 415,
              "startColumn": 20,
              "endLine": 415,
              "endColumn": 31,
              "uri": "kylin-kylin-5.0.0/src/spark-project/engine-spark/src/main/java/org/apache/kylin/job/execution/NSparkExecutable.java",
              "type": "KylinConfigExt [overrides, <map.value>] : String",
              "code": "    public SparkAppDescription getSparkAppDesc() {\n        val desc = new SparkAppDescription();\n\n        val conf = getConfig();\n        desc.setJobNamePrefix(getJobNamePrefix());\n        desc.setProject(getProject());\n        desc.setJobId(getId());"
            },
            {
              "step": 11,
              "variableName": "conf",
              "startLine": 422,
              "startColumn": 38,
              "endLine": 422,
              "endColumn": 42,
              "uri": "kylin-kylin-5.0.0/src/spark-project/engine-spark/src/main/java/org/apache/kylin/job/execution/NSparkExecutable.java",
              "type": "KylinConfigExt [overrides, <map.value>] : String",
              "code": "        desc.setStepId(getStepId());\n        desc.setSparkSubmitClassName(getSparkSubmitClassName());\n\n        val sparkConf = getSparkConf(conf);\n        desc.setSparkConf(sparkConf);\n        desc.setComma(COMMA);\n        desc.setSparkJars(getSparkJars(conf, sparkConf));"
            },
            {
              "step": 12,
              "variableName": "KylinConfig kylinConf",
              "startLine": 692,
              "startColumn": 46,
              "endLine": 692,
              "endColumn": 67,
              "uri": "kylin-kylin-5.0.0/src/spark-project/engine-spark/src/main/java/org/apache/kylin/job/execution/NSparkExecutable.java",
              "type": "KylinConfigExt [overrides, <map.value>] : String",
              "code": "        return getSparkConf(getConfig());\n    }\n\n    private Map<String, String> getSparkConf(KylinConfig kylinConf) {\n\n        KapConfig kapConf = KapConfig.wrap(kylinConf);\n"
            },
            {
              "step": 13,
              "variableName": "kylinConf",
              "startLine": 705,
              "startColumn": 39,
              "endLine": 705,
              "endColumn": 48,
              "uri": "kylin-kylin-5.0.0/src/spark-project/engine-spark/src/main/java/org/apache/kylin/job/execution/NSparkExecutable.java",
              "type": "KylinConfigExt [overrides, <map.value>] : String",
              "code": "        rewriteTZenv(kylinConf, sparkConf);\n\n        // Rewrite driver extra java options.\n        rewriteDriverExtraJavaOptions(kylinConf, kapConf, sparkConf);\n\n        // Rewrite executor extra java options.\n        rewriteExecutorExtraJavaOptions(kylinConf, sparkConf);"
            },
            {
              "step": 14,
              "variableName": "KylinConfig kylinConf",
              "startLine": 740,
              "startColumn": 48,
              "endLine": 740,
              "endColumn": 69,
              "uri": "kylin-kylin-5.0.0/src/spark-project/engine-spark/src/main/java/org/apache/kylin/job/execution/NSparkExecutable.java",
              "type": "KylinConfigExt [overrides, <map.value>] : String",
              "code": "        }\n    }\n\n    private void rewriteDriverExtraJavaOptions(KylinConfig kylinConf, KapConfig kapConf, //\n            Map<String, String> sparkConf) {\n        StringBuilder sb = new StringBuilder();\n        if (sparkConf.containsKey(DRIVER_EXTRA_JAVA_OPTIONS)) {"
            },
            {
              "step": 15,
              "variableName": "(KylinConfigExt) kylinConf",
              "startLine": 750,
              "startColumn": 54,
              "endLine": 750,
              "endColumn": 80,
              "uri": "kylin-kylin-5.0.0/src/spark-project/engine-spark/src/main/java/org/apache/kylin/job/execution/NSparkExecutable.java",
              "type": "KylinConfigExt [overrides, <map.value>] : String",
              "code": "        String hdfsWorkingDir = kylinConf.getHdfsWorkingDirectory();\n        String sparkDriverHdfsLogPath = null;\n        if (kylinConf instanceof KylinConfigExt) {\n            Map<String, String> extendedOverrides = ((KylinConfigExt) kylinConf).getExtendedOverrides();\n            if (Objects.nonNull(extendedOverrides)) {\n                sparkDriverHdfsLogPath = extendedOverrides.get(\"spark.driver.log4j.appender.hdfs.File\");\n            }"
            },
            {
              "step": 16,
              "variableName": "getExtendedOverrides",
              "startLine": 95,
              "startColumn": 32,
              "endLine": 95,
              "endColumn": 52,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/KylinConfigExt.java",
              "type": "KylinConfigExt [overrides, <map.value>] : String",
              "code": "        return this.strSubstitutor;\n    }\n\n    public Map<String, String> getExtendedOverrides() {\n        return overrides;\n    }\n"
            },
            {
              "step": 17,
              "variableName": "overrides",
              "startLine": 96,
              "startColumn": 16,
              "endLine": 96,
              "endColumn": 25,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/KylinConfigExt.java",
              "type": "KylinConfigExt [overrides, <map.value>] : String",
              "code": "    }\n\n    public Map<String, String> getExtendedOverrides() {\n        return overrides;\n    }\n\n    @Override"
            },
            {
              "step": 18,
              "variableName": "overrides",
              "startLine": 96,
              "startColumn": 16,
              "endLine": 96,
              "endColumn": 25,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/KylinConfigExt.java",
              "type": "LinkedHashMap [<map.value>] : String",
              "code": "    }\n\n    public Map<String, String> getExtendedOverrides() {\n        return overrides;\n    }\n\n    @Override"
            },
            {
              "step": 19,
              "variableName": "((KylinConfigExt) kylinConf).getExtendedOverrides()",
              "startLine": 750,
              "startColumn": 53,
              "endLine": 750,
              "endColumn": 104,
              "uri": "kylin-kylin-5.0.0/src/spark-project/engine-spark/src/main/java/org/apache/kylin/job/execution/NSparkExecutable.java",
              "type": "LinkedHashMap [<map.value>] : String",
              "code": "        String hdfsWorkingDir = kylinConf.getHdfsWorkingDirectory();\n        String sparkDriverHdfsLogPath = null;\n        if (kylinConf instanceof KylinConfigExt) {\n            Map<String, String> extendedOverrides = ((KylinConfigExt) kylinConf).getExtendedOverrides();\n            if (Objects.nonNull(extendedOverrides)) {\n                sparkDriverHdfsLogPath = extendedOverrides.get(\"spark.driver.log4j.appender.hdfs.File\");\n            }"
            },
            {
              "step": 20,
              "variableName": "extendedOverrides",
              "startLine": 752,
              "startColumn": 42,
              "endLine": 752,
              "endColumn": 59,
              "uri": "kylin-kylin-5.0.0/src/spark-project/engine-spark/src/main/java/org/apache/kylin/job/execution/NSparkExecutable.java",
              "type": "LinkedHashMap [<map.value>] : String",
              "code": "        if (kylinConf instanceof KylinConfigExt) {\n            Map<String, String> extendedOverrides = ((KylinConfigExt) kylinConf).getExtendedOverrides();\n            if (Objects.nonNull(extendedOverrides)) {\n                sparkDriverHdfsLogPath = extendedOverrides.get(\"spark.driver.log4j.appender.hdfs.File\");\n            }\n        }\n        if (kapConf.isCloud()) {"
            },
            {
              "step": 21,
              "variableName": "extendedOverrides.get(\"spark.driver.log4j.appender.hdfs.File\")",
              "startLine": 752,
              "startColumn": 42,
              "endLine": 752,
              "endColumn": 104,
              "uri": "kylin-kylin-5.0.0/src/spark-project/engine-spark/src/main/java/org/apache/kylin/job/execution/NSparkExecutable.java",
              "type": "String",
              "code": "        if (kylinConf instanceof KylinConfigExt) {\n            Map<String, String> extendedOverrides = ((KylinConfigExt) kylinConf).getExtendedOverrides();\n            if (Objects.nonNull(extendedOverrides)) {\n                sparkDriverHdfsLogPath = extendedOverrides.get(\"spark.driver.log4j.appender.hdfs.File\");\n            }\n        }\n        if (kapConf.isCloud()) {"
            },
            {
              "step": 22,
              "variableName": "sparkDriverHdfsLogPath",
              "startLine": 763,
              "startColumn": 84,
              "endLine": 763,
              "endColumn": 106,
              "uri": "kylin-kylin-5.0.0/src/spark-project/engine-spark/src/main/java/org/apache/kylin/job/execution/NSparkExecutable.java",
              "type": "String",
              "code": "            }\n        }\n        sb.append(SPACE).append(\"-Dkylin.hdfs.working.dir=\").append(hdfsWorkingDir);\n        sb.append(SPACE).append(\"-Dspark.driver.log4j.appender.hdfs.File=\").append(sparkDriverHdfsLogPath);\n\n        // Log4j conf.\n        rewriteDriverLog4jConf(sb, kylinConf, sparkConf);"
            },
            {
              "step": 23,
              "variableName": "sb.append(SPACE).append(\"-Dspark.driver.log4j.appender.hdfs.File=\")",
              "startLine": 763,
              "startColumn": 9,
              "endLine": 763,
              "endColumn": 76,
              "uri": "kylin-kylin-5.0.0/src/spark-project/engine-spark/src/main/java/org/apache/kylin/job/execution/NSparkExecutable.java",
              "type": "StringBuilder",
              "code": "            }\n        }\n        sb.append(SPACE).append(\"-Dkylin.hdfs.working.dir=\").append(hdfsWorkingDir);\n        sb.append(SPACE).append(\"-Dspark.driver.log4j.appender.hdfs.File=\").append(sparkDriverHdfsLogPath);\n\n        // Log4j conf.\n        rewriteDriverLog4jConf(sb, kylinConf, sparkConf);"
            },
            {
              "step": 24,
              "variableName": "sb",
              "startLine": 786,
              "startColumn": 50,
              "endLine": 786,
              "endColumn": 52,
              "uri": "kylin-kylin-5.0.0/src/spark-project/engine-spark/src/main/java/org/apache/kylin/job/execution/NSparkExecutable.java",
              "type": "StringBuilder",
              "code": "                    .append(kylinConf.buildJobProfilingProfileTimeout());\n        }\n\n        sparkConf.put(DRIVER_EXTRA_JAVA_OPTIONS, sb.toString().trim());\n    }\n\n    @VisibleForTesting"
            },
            {
              "step": 25,
              "variableName": "sb.toString()",
              "startLine": 786,
              "startColumn": 50,
              "endLine": 786,
              "endColumn": 63,
              "uri": "kylin-kylin-5.0.0/src/spark-project/engine-spark/src/main/java/org/apache/kylin/job/execution/NSparkExecutable.java",
              "type": "String",
              "code": "                    .append(kylinConf.buildJobProfilingProfileTimeout());\n        }\n\n        sparkConf.put(DRIVER_EXTRA_JAVA_OPTIONS, sb.toString().trim());\n    }\n\n    @VisibleForTesting"
            },
            {
              "step": 26,
              "variableName": "sb.toString().trim()",
              "startLine": 786,
              "startColumn": 50,
              "endLine": 786,
              "endColumn": 70,
              "uri": "kylin-kylin-5.0.0/src/spark-project/engine-spark/src/main/java/org/apache/kylin/job/execution/NSparkExecutable.java",
              "type": "String",
              "code": "                    .append(kylinConf.buildJobProfilingProfileTimeout());\n        }\n\n        sparkConf.put(DRIVER_EXTRA_JAVA_OPTIONS, sb.toString().trim());\n    }\n\n    @VisibleForTesting"
            },
            {
              "step": 27,
              "variableName": "sparkConf",
              "startLine": 786,
              "startColumn": 9,
              "endLine": 786,
              "endColumn": 18,
              "uri": "kylin-kylin-5.0.0/src/spark-project/engine-spark/src/main/java/org/apache/kylin/job/execution/NSparkExecutable.java",
              "type": "LinkedHashMap [<map.value>] : String",
              "code": "                    .append(kylinConf.buildJobProfilingProfileTimeout());\n        }\n\n        sparkConf.put(DRIVER_EXTRA_JAVA_OPTIONS, sb.toString().trim());\n    }\n\n    @VisibleForTesting"
            },
            {
              "step": 28,
              "variableName": "Map<String, String> sparkConf",
              "startLine": 741,
              "startColumn": 13,
              "endLine": 741,
              "endColumn": 42,
              "uri": "kylin-kylin-5.0.0/src/spark-project/engine-spark/src/main/java/org/apache/kylin/job/execution/NSparkExecutable.java",
              "type": "LinkedHashMap [<map.value>] : String",
              "code": "    }\n\n    private void rewriteDriverExtraJavaOptions(KylinConfig kylinConf, KapConfig kapConf, //\n            Map<String, String> sparkConf) {\n        StringBuilder sb = new StringBuilder();\n        if (sparkConf.containsKey(DRIVER_EXTRA_JAVA_OPTIONS)) {\n            sb.append(sparkConf.get(DRIVER_EXTRA_JAVA_OPTIONS));"
            },
            {
              "step": 29,
              "variableName": "sparkConf",
              "startLine": 705,
              "startColumn": 59,
              "endLine": 705,
              "endColumn": 68,
              "uri": "kylin-kylin-5.0.0/src/spark-project/engine-spark/src/main/java/org/apache/kylin/job/execution/NSparkExecutable.java",
              "type": "LinkedHashMap [<map.value>] : String",
              "code": "        rewriteTZenv(kylinConf, sparkConf);\n\n        // Rewrite driver extra java options.\n        rewriteDriverExtraJavaOptions(kylinConf, kapConf, sparkConf);\n\n        // Rewrite executor extra java options.\n        rewriteExecutorExtraJavaOptions(kylinConf, sparkConf);"
            },
            {
              "step": 30,
              "variableName": "sparkConf",
              "startLine": 719,
              "startColumn": 44,
              "endLine": 719,
              "endColumn": 53,
              "uri": "kylin-kylin-5.0.0/src/spark-project/engine-spark/src/main/java/org/apache/kylin/job/execution/NSparkExecutable.java",
              "type": "LinkedHashMap [<map.value>] : String",
              "code": "        // Rewrite k8s conf.\n        rewriteConfOfKubernetes(sparkConf);\n\n        return Collections.unmodifiableMap(sparkConf);\n    }\n\n    private void rewriteConfOfKubernetes(Map<String, String> sparkConf) {"
            },
            {
              "step": 31,
              "variableName": "Collections.unmodifiableMap(sparkConf)",
              "startLine": 719,
              "startColumn": 16,
              "endLine": 719,
              "endColumn": 54,
              "uri": "kylin-kylin-5.0.0/src/spark-project/engine-spark/src/main/java/org/apache/kylin/job/execution/NSparkExecutable.java",
              "type": "Map [<map.value>] : String",
              "code": "        // Rewrite k8s conf.\n        rewriteConfOfKubernetes(sparkConf);\n\n        return Collections.unmodifiableMap(sparkConf);\n    }\n\n    private void rewriteConfOfKubernetes(Map<String, String> sparkConf) {"
            },
            {
              "step": 32,
              "variableName": "getSparkConf(conf)",
              "startLine": 422,
              "startColumn": 25,
              "endLine": 422,
              "endColumn": 43,
              "uri": "kylin-kylin-5.0.0/src/spark-project/engine-spark/src/main/java/org/apache/kylin/job/execution/NSparkExecutable.java",
              "type": "Map [<map.value>] : String",
              "code": "        desc.setStepId(getStepId());\n        desc.setSparkSubmitClassName(getSparkSubmitClassName());\n\n        val sparkConf = getSparkConf(conf);\n        desc.setSparkConf(sparkConf);\n        desc.setComma(COMMA);\n        desc.setSparkJars(getSparkJars(conf, sparkConf));"
            },
            {
              "step": 33,
              "variableName": "sparkConf",
              "startLine": 423,
              "startColumn": 27,
              "endLine": 423,
              "endColumn": 36,
              "uri": "kylin-kylin-5.0.0/src/spark-project/engine-spark/src/main/java/org/apache/kylin/job/execution/NSparkExecutable.java",
              "type": "Map [<map.value>] : String",
              "code": "        desc.setSparkSubmitClassName(getSparkSubmitClassName());\n\n        val sparkConf = getSparkConf(conf);\n        desc.setSparkConf(sparkConf);\n        desc.setComma(COMMA);\n        desc.setSparkJars(getSparkJars(conf, sparkConf));\n        desc.setSparkFiles(getSparkFiles(conf, sparkConf));"
            },
            {
              "step": 34,
              "variableName": "sparkConf : Map [<map.value>] : String",
              "startLine": 26,
              "endLine": 26,
              "endColumn": 6,
              "uri": "kylin-kylin-5.0.0/src/spark-project/engine-build-sdk/src/main/java/org/apache/kylin/engine/spark/job/SparkAppDescription.java",
              "type": "Map [<map.value>] : String",
              "code": "\nimport lombok.Data;\n\n@Data\npublic class SparkAppDescription {\n\n    private String hadoopConfDir;"
            },
            {
              "step": 35,
              "variableName": "sparkConf : Map [<map.value>] : String",
              "startLine": 26,
              "endLine": 26,
              "endColumn": 6,
              "uri": "kylin-kylin-5.0.0/src/spark-project/engine-build-sdk/src/main/java/org/apache/kylin/engine/spark/job/SparkAppDescription.java",
              "type": "Map [<map.value>] : String",
              "code": "\nimport lombok.Data;\n\n@Data\npublic class SparkAppDescription {\n\n    private String hadoopConfDir;"
            },
            {
              "step": 36,
              "variableName": "this [post update] : SparkAppDescription [sparkConf, <map.value>] : String",
              "startLine": 26,
              "endLine": 26,
              "endColumn": 6,
              "uri": "kylin-kylin-5.0.0/src/spark-project/engine-build-sdk/src/main/java/org/apache/kylin/engine/spark/job/SparkAppDescription.java",
              "type": "SparkAppDescription [sparkConf, <map.value>] : String",
              "code": "\nimport lombok.Data;\n\n@Data\npublic class SparkAppDescription {\n\n    private String hadoopConfDir;"
            },
            {
              "step": 37,
              "variableName": "parameter this [Return] : SparkAppDescription [sparkConf, <map.value>] : String",
              "startLine": 26,
              "endLine": 26,
              "endColumn": 6,
              "uri": "kylin-kylin-5.0.0/src/spark-project/engine-build-sdk/src/main/java/org/apache/kylin/engine/spark/job/SparkAppDescription.java",
              "type": "SparkAppDescription [sparkConf, <map.value>] : String",
              "code": "\nimport lombok.Data;\n\n@Data\npublic class SparkAppDescription {\n\n    private String hadoopConfDir;"
            },
            {
              "step": 38,
              "variableName": "desc",
              "startLine": 423,
              "startColumn": 9,
              "endLine": 423,
              "endColumn": 13,
              "uri": "kylin-kylin-5.0.0/src/spark-project/engine-spark/src/main/java/org/apache/kylin/job/execution/NSparkExecutable.java",
              "type": "SparkAppDescription [sparkConf, <map.value>] : String",
              "code": "        desc.setSparkSubmitClassName(getSparkSubmitClassName());\n\n        val sparkConf = getSparkConf(conf);\n        desc.setSparkConf(sparkConf);\n        desc.setComma(COMMA);\n        desc.setSparkJars(getSparkJars(conf, sparkConf));\n        desc.setSparkFiles(getSparkFiles(conf, sparkConf));"
            },
            {
              "step": 39,
              "variableName": "desc",
              "startLine": 427,
              "startColumn": 16,
              "endLine": 427,
              "endColumn": 20,
              "uri": "kylin-kylin-5.0.0/src/spark-project/engine-spark/src/main/java/org/apache/kylin/job/execution/NSparkExecutable.java",
              "type": "SparkAppDescription [sparkConf, <map.value>] : String",
              "code": "        desc.setComma(COMMA);\n        desc.setSparkJars(getSparkJars(conf, sparkConf));\n        desc.setSparkFiles(getSparkFiles(conf, sparkConf));\n        return desc;\n    }\n\n    protected ExecuteResult runSparkSubmit(String hadoopConfDir, String kylinJobJar, String appArgs) {"
            },
            {
              "step": 40,
              "variableName": "getSparkAppDesc()",
              "startLine": 106,
              "startColumn": 24,
              "endLine": 106,
              "endColumn": 41,
              "uri": "kylin-kylin-5.0.0/src/query-service/src/main/java/org/apache/kylin/rest/service/AsyncQueryJob.java",
              "type": "SparkAppDescription [sparkConf, <map.value>] : String",
              "code": "        val patternedLogger = new BufferedLogger(logger);\n        try {\n            killOrphanApplicationIfExists(getId());\n            val desc = getSparkAppDesc();\n            desc.setHadoopConfDir(hadoopConf);\n            desc.setKylinJobJar(kylinJobJar);\n            desc.setAppArgs(appArgs);"
            },
            {
              "step": 41,
              "variableName": "desc",
              "startLine": 110,
              "startColumn": 102,
              "endLine": 110,
              "endColumn": 106,
              "uri": "kylin-kylin-5.0.0/src/query-service/src/main/java/org/apache/kylin/rest/service/AsyncQueryJob.java",
              "type": "SparkAppDescription [sparkConf, <map.value>] : String",
              "code": "            desc.setHadoopConfDir(hadoopConf);\n            desc.setKylinJobJar(kylinJobJar);\n            desc.setAppArgs(appArgs);\n            String cmd = (String) sparkJobHandler.generateSparkCmd(KylinConfig.getInstanceFromEnv(), desc);\n            CliCommandExecutor exec = getCliCommandExecutor();\n            CliCommandExecutor.CliCmdExecResult r = exec.execute(cmd, patternedLogger, getId());\n            return ExecuteResult.createSucceed(r.getCmd());"
            },
            {
              "step": 42,
              "variableName": "SparkAppDescription desc",
              "startLine": 125,
              "startColumn": 56,
              "endLine": 125,
              "endColumn": 80,
              "uri": "kylin-kylin-5.0.0/src/spark-project/engine-spark/src/main/java/org/apache/kylin/engine/spark/job/DefaultSparkBuildJobHandler.java",
              "type": "SparkAppDescription [sparkConf, <map.value>] : String",
              "code": "    }\n\n    @Override\n    public Object generateSparkCmd(KylinConfig config, SparkAppDescription desc) {\n        // Hadoop conf dir.\n        StringBuilder cmdBuilder = new StringBuilder(\"export HADOOP_CONF_DIR=\");\n        cmdBuilder.append(desc.getHadoopConfDir());"
            },
            {
              "step": 43,
              "variableName": "desc",
              "startLine": 158,
              "startColumn": 35,
              "endLine": 158,
              "endColumn": 39,
              "uri": "kylin-kylin-5.0.0/src/spark-project/engine-spark/src/main/java/org/apache/kylin/engine/spark/job/DefaultSparkBuildJobHandler.java",
              "type": "SparkAppDescription [sparkConf, <map.value>] : String",
              "code": "        // Spark conf.\n        // Maybe we would rewrite some confs, like 'extraJavaOptions', 'extraClassPath',\n        // and the confs rewrited should be removed from props thru #modifyDump.\n        wrapSparkConf(cmdBuilder, desc.getSparkConf());\n\n        // Application jar. KylinJobJar is the application-jar (of spark-submit),\n        // path to a bundled jar including your application and all dependencies,"
            },
            {
              "step": 44,
              "variableName": "sparkConf;",
              "startLine": 45,
              "startColumn": 33,
              "endLine": 45,
              "endColumn": 43,
              "uri": "kylin-kylin-5.0.0/src/spark-project/engine-build-sdk/src/main/java/org/apache/kylin/engine/spark/job/SparkAppDescription.java",
              "type": "SparkAppDescription [sparkConf, <map.value>] : String",
              "code": "\n    private String sparkSubmitClassName;\n\n    private Map<String, String> sparkConf;\n\n    private Set<String> sparkJars;\n"
            },
            {
              "step": 45,
              "variableName": "sparkConf;",
              "startLine": 45,
              "startColumn": 33,
              "endLine": 45,
              "endColumn": 43,
              "uri": "kylin-kylin-5.0.0/src/spark-project/engine-build-sdk/src/main/java/org/apache/kylin/engine/spark/job/SparkAppDescription.java",
              "type": "SparkAppDescription [sparkConf, <map.value>] : String",
              "code": "\n    private String sparkSubmitClassName;\n\n    private Map<String, String> sparkConf;\n\n    private Set<String> sparkJars;\n"
            },
            {
              "step": 46,
              "variableName": "sparkConf;",
              "startLine": 45,
              "startColumn": 33,
              "endLine": 45,
              "endColumn": 43,
              "uri": "kylin-kylin-5.0.0/src/spark-project/engine-build-sdk/src/main/java/org/apache/kylin/engine/spark/job/SparkAppDescription.java",
              "type": "Map [<map.value>] : String",
              "code": "\n    private String sparkSubmitClassName;\n\n    private Map<String, String> sparkConf;\n\n    private Set<String> sparkJars;\n"
            },
            {
              "step": 47,
              "variableName": "desc.getSparkConf()",
              "startLine": 158,
              "startColumn": 35,
              "endLine": 158,
              "endColumn": 54,
              "uri": "kylin-kylin-5.0.0/src/spark-project/engine-spark/src/main/java/org/apache/kylin/engine/spark/job/DefaultSparkBuildJobHandler.java",
              "type": "Map [<map.value>] : String",
              "code": "        // Spark conf.\n        // Maybe we would rewrite some confs, like 'extraJavaOptions', 'extraClassPath',\n        // and the confs rewrited should be removed from props thru #modifyDump.\n        wrapSparkConf(cmdBuilder, desc.getSparkConf());\n\n        // Application jar. KylinJobJar is the application-jar (of spark-submit),\n        // path to a bundled jar including your application and all dependencies,"
            },
            {
              "step": 48,
              "variableName": "Map<String, String> sparkConf",
              "startLine": 200,
              "startColumn": 58,
              "endLine": 200,
              "endColumn": 87,
              "uri": "kylin-kylin-5.0.0/src/spark-project/engine-spark/src/main/java/org/apache/kylin/engine/spark/job/DefaultSparkBuildJobHandler.java",
              "type": "Map [<map.value>] : String",
              "code": "        throw new IllegalArgumentException(msg);\n    }\n\n    private void wrapSparkConf(StringBuilder cmdBuilder, Map<String, String> sparkConf) {\n        for (Map.Entry<String, String> entry : sparkConf.entrySet()) {\n            switch (entry.getKey()) {\n            // Avoid duplicated from '--jars'"
            },
            {
              "step": 49,
              "variableName": "sparkConf",
              "startLine": 201,
              "startColumn": 48,
              "endLine": 201,
              "endColumn": 57,
              "uri": "kylin-kylin-5.0.0/src/spark-project/engine-spark/src/main/java/org/apache/kylin/engine/spark/job/DefaultSparkBuildJobHandler.java",
              "type": "Map [<map.value>] : String",
              "code": "    }\n\n    private void wrapSparkConf(StringBuilder cmdBuilder, Map<String, String> sparkConf) {\n        for (Map.Entry<String, String> entry : sparkConf.entrySet()) {\n            switch (entry.getKey()) {\n            // Avoid duplicated from '--jars'\n            // Avoid duplicated from '--files'"
            },
            {
              "step": 50,
              "variableName": "sparkConf.entrySet()",
              "startLine": 201,
              "startColumn": 48,
              "endLine": 201,
              "endColumn": 68,
              "uri": "kylin-kylin-5.0.0/src/spark-project/engine-spark/src/main/java/org/apache/kylin/engine/spark/job/DefaultSparkBuildJobHandler.java",
              "type": "Set [<element>, <map.value>] : String",
              "code": "    }\n\n    private void wrapSparkConf(StringBuilder cmdBuilder, Map<String, String> sparkConf) {\n        for (Map.Entry<String, String> entry : sparkConf.entrySet()) {\n            switch (entry.getKey()) {\n            // Avoid duplicated from '--jars'\n            // Avoid duplicated from '--files'"
            },
            {
              "step": 51,
              "variableName": "entry",
              "startLine": 202,
              "startColumn": 21,
              "endLine": 202,
              "endColumn": 26,
              "uri": "kylin-kylin-5.0.0/src/spark-project/engine-spark/src/main/java/org/apache/kylin/engine/spark/job/DefaultSparkBuildJobHandler.java",
              "type": "Entry [<map.value>] : String",
              "code": "\n    private void wrapSparkConf(StringBuilder cmdBuilder, Map<String, String> sparkConf) {\n        for (Map.Entry<String, String> entry : sparkConf.entrySet()) {\n            switch (entry.getKey()) {\n            // Avoid duplicated from '--jars'\n            // Avoid duplicated from '--files'\n            case SPARK_JARS_1:"
            },
            {
              "step": 52,
              "variableName": "entry",
              "startLine": 212,
              "startColumn": 61,
              "endLine": 212,
              "endColumn": 66,
              "uri": "kylin-kylin-5.0.0/src/spark-project/engine-spark/src/main/java/org/apache/kylin/engine/spark/job/DefaultSparkBuildJobHandler.java",
              "type": "Entry [<map.value>] : String",
              "code": "                // Do nothing.\n                break;\n            default:\n                appendSparkConf(cmdBuilder, entry.getKey(), entry.getValue());\n                break;\n            }\n        }"
            },
            {
              "step": 53,
              "variableName": "entry.getValue()",
              "startLine": 212,
              "startColumn": 61,
              "endLine": 212,
              "endColumn": 77,
              "uri": "kylin-kylin-5.0.0/src/spark-project/engine-spark/src/main/java/org/apache/kylin/engine/spark/job/DefaultSparkBuildJobHandler.java",
              "type": "String",
              "code": "                // Do nothing.\n                break;\n            default:\n                appendSparkConf(cmdBuilder, entry.getKey(), entry.getValue());\n                break;\n            }\n        }"
            },
            {
              "step": 54,
              "variableName": "String confValue",
              "startLine": 218,
              "startColumn": 70,
              "endLine": 218,
              "endColumn": 86,
              "uri": "kylin-kylin-5.0.0/src/spark-project/engine-spark/src/main/java/org/apache/kylin/engine/spark/job/DefaultSparkBuildJobHandler.java",
              "type": "String",
              "code": "        }\n    }\n\n    protected void appendSparkConf(StringBuilder sb, String confKey, String confValue) {\n        // Multiple parameters in \"--conf\" need to be enclosed in single quotes\n        sb.append(\" --conf '\").append(confKey).append(EQUALS).append(confValue).append(\"' \");\n        sb.append(SUBMIT_LINE_FORMAT);"
            },
            {
              "step": 55,
              "variableName": "confValue",
              "startLine": 220,
              "startColumn": 70,
              "endLine": 220,
              "endColumn": 79,
              "uri": "kylin-kylin-5.0.0/src/spark-project/engine-spark/src/main/java/org/apache/kylin/engine/spark/job/DefaultSparkBuildJobHandler.java",
              "type": "String",
              "code": "\n    protected void appendSparkConf(StringBuilder sb, String confKey, String confValue) {\n        // Multiple parameters in \"--conf\" need to be enclosed in single quotes\n        sb.append(\" --conf '\").append(confKey).append(EQUALS).append(confValue).append(\"' \");\n        sb.append(SUBMIT_LINE_FORMAT);\n    }\n"
            },
            {
              "step": 56,
              "variableName": "sb.append(\" --conf '\").append(confKey).append(EQUALS)",
              "startLine": 220,
              "startColumn": 9,
              "endLine": 220,
              "endColumn": 62,
              "uri": "kylin-kylin-5.0.0/src/spark-project/engine-spark/src/main/java/org/apache/kylin/engine/spark/job/DefaultSparkBuildJobHandler.java",
              "type": "StringBuilder",
              "code": "\n    protected void appendSparkConf(StringBuilder sb, String confKey, String confValue) {\n        // Multiple parameters in \"--conf\" need to be enclosed in single quotes\n        sb.append(\" --conf '\").append(confKey).append(EQUALS).append(confValue).append(\"' \");\n        sb.append(SUBMIT_LINE_FORMAT);\n    }\n"
            },
            {
              "step": 57,
              "variableName": "StringBuilder sb",
              "startLine": 218,
              "startColumn": 36,
              "endLine": 218,
              "endColumn": 52,
              "uri": "kylin-kylin-5.0.0/src/spark-project/engine-spark/src/main/java/org/apache/kylin/engine/spark/job/DefaultSparkBuildJobHandler.java",
              "type": "StringBuilder",
              "code": "        }\n    }\n\n    protected void appendSparkConf(StringBuilder sb, String confKey, String confValue) {\n        // Multiple parameters in \"--conf\" need to be enclosed in single quotes\n        sb.append(\" --conf '\").append(confKey).append(EQUALS).append(confValue).append(\"' \");\n        sb.append(SUBMIT_LINE_FORMAT);"
            },
            {
              "step": 58,
              "variableName": "cmdBuilder",
              "startLine": 212,
              "startColumn": 33,
              "endLine": 212,
              "endColumn": 43,
              "uri": "kylin-kylin-5.0.0/src/spark-project/engine-spark/src/main/java/org/apache/kylin/engine/spark/job/DefaultSparkBuildJobHandler.java",
              "type": "StringBuilder",
              "code": "                // Do nothing.\n                break;\n            default:\n                appendSparkConf(cmdBuilder, entry.getKey(), entry.getValue());\n                break;\n            }\n        }"
            },
            {
              "step": 59,
              "variableName": "StringBuilder cmdBuilder",
              "startLine": 200,
              "startColumn": 32,
              "endLine": 200,
              "endColumn": 56,
              "uri": "kylin-kylin-5.0.0/src/spark-project/engine-spark/src/main/java/org/apache/kylin/engine/spark/job/DefaultSparkBuildJobHandler.java",
              "type": "StringBuilder",
              "code": "        throw new IllegalArgumentException(msg);\n    }\n\n    private void wrapSparkConf(StringBuilder cmdBuilder, Map<String, String> sparkConf) {\n        for (Map.Entry<String, String> entry : sparkConf.entrySet()) {\n            switch (entry.getKey()) {\n            // Avoid duplicated from '--jars'"
            },
            {
              "step": 60,
              "variableName": "cmdBuilder",
              "startLine": 158,
              "startColumn": 23,
              "endLine": 158,
              "endColumn": 33,
              "uri": "kylin-kylin-5.0.0/src/spark-project/engine-spark/src/main/java/org/apache/kylin/engine/spark/job/DefaultSparkBuildJobHandler.java",
              "type": "StringBuilder",
              "code": "        // Spark conf.\n        // Maybe we would rewrite some confs, like 'extraJavaOptions', 'extraClassPath',\n        // and the confs rewrited should be removed from props thru #modifyDump.\n        wrapSparkConf(cmdBuilder, desc.getSparkConf());\n\n        // Application jar. KylinJobJar is the application-jar (of spark-submit),\n        // path to a bundled jar including your application and all dependencies,"
            },
            {
              "step": 61,
              "variableName": "cmdBuilder",
              "startLine": 170,
              "startColumn": 32,
              "endLine": 170,
              "endColumn": 42,
              "uri": "kylin-kylin-5.0.0/src/spark-project/engine-spark/src/main/java/org/apache/kylin/engine/spark/job/DefaultSparkBuildJobHandler.java",
              "type": "StringBuilder",
              "code": "        // Application parameter file.\n        cmdBuilder.append(SPACE).append(desc.getAppArgs());\n\n        final String command = cmdBuilder.toString();\n        logger.info(\"spark submit cmd: {}\", command);\n\n        // Safe check."
            },
            {
              "step": 62,
              "variableName": "cmdBuilder.toString()",
              "startLine": 170,
              "startColumn": 32,
              "endLine": 170,
              "endColumn": 53,
              "uri": "kylin-kylin-5.0.0/src/spark-project/engine-spark/src/main/java/org/apache/kylin/engine/spark/job/DefaultSparkBuildJobHandler.java",
              "type": "String",
              "code": "        // Application parameter file.\n        cmdBuilder.append(SPACE).append(desc.getAppArgs());\n\n        final String command = cmdBuilder.toString();\n        logger.info(\"spark submit cmd: {}\", command);\n\n        // Safe check."
            },
            {
              "step": 63,
              "variableName": "command",
              "startLine": 175,
              "startColumn": 16,
              "endLine": 175,
              "endColumn": 23,
              "uri": "kylin-kylin-5.0.0/src/spark-project/engine-spark/src/main/java/org/apache/kylin/engine/spark/job/DefaultSparkBuildJobHandler.java",
              "type": "String",
              "code": "\n        // Safe check.\n        checkCommandInjection(command);\n        return command;\n    }\n\n    private void checkCommandInjection(String command) {"
            },
            {
              "step": 64,
              "variableName": "sparkJobHandler.generateSparkCmd(KylinConfig.getInstanceFromEnv(), desc)",
              "startLine": 110,
              "startColumn": 35,
              "endLine": 110,
              "endColumn": 107,
              "uri": "kylin-kylin-5.0.0/src/query-service/src/main/java/org/apache/kylin/rest/service/AsyncQueryJob.java",
              "type": "String",
              "code": "            desc.setHadoopConfDir(hadoopConf);\n            desc.setKylinJobJar(kylinJobJar);\n            desc.setAppArgs(appArgs);\n            String cmd = (String) sparkJobHandler.generateSparkCmd(KylinConfig.getInstanceFromEnv(), desc);\n            CliCommandExecutor exec = getCliCommandExecutor();\n            CliCommandExecutor.CliCmdExecResult r = exec.execute(cmd, patternedLogger, getId());\n            return ExecuteResult.createSucceed(r.getCmd());"
            },
            {
              "step": 65,
              "variableName": "(String) sparkJobHandler.generateSparkCmd(KylinConfig.getInstanceFromEnv(), desc)",
              "startLine": 110,
              "startColumn": 26,
              "endLine": 110,
              "endColumn": 107,
              "uri": "kylin-kylin-5.0.0/src/query-service/src/main/java/org/apache/kylin/rest/service/AsyncQueryJob.java",
              "type": "String",
              "code": "            desc.setHadoopConfDir(hadoopConf);\n            desc.setKylinJobJar(kylinJobJar);\n            desc.setAppArgs(appArgs);\n            String cmd = (String) sparkJobHandler.generateSparkCmd(KylinConfig.getInstanceFromEnv(), desc);\n            CliCommandExecutor exec = getCliCommandExecutor();\n            CliCommandExecutor.CliCmdExecResult r = exec.execute(cmd, patternedLogger, getId());\n            return ExecuteResult.createSucceed(r.getCmd());"
            },
            {
              "step": 66,
              "variableName": "cmd",
              "startLine": 112,
              "startColumn": 66,
              "endLine": 112,
              "endColumn": 69,
              "uri": "kylin-kylin-5.0.0/src/query-service/src/main/java/org/apache/kylin/rest/service/AsyncQueryJob.java",
              "type": "String",
              "code": "            desc.setAppArgs(appArgs);\n            String cmd = (String) sparkJobHandler.generateSparkCmd(KylinConfig.getInstanceFromEnv(), desc);\n            CliCommandExecutor exec = getCliCommandExecutor();\n            CliCommandExecutor.CliCmdExecResult r = exec.execute(cmd, patternedLogger, getId());\n            return ExecuteResult.createSucceed(r.getCmd());\n        } catch (Exception e) {\n            return ExecuteResult.createError(e);"
            },
            {
              "step": 67,
              "variableName": "String command",
              "startLine": 139,
              "startColumn": 37,
              "endLine": 139,
              "endColumn": 51,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/util/CliCommandExecutor.java",
              "type": "String",
              "code": "        return execute(command, logAppender, null);\n    }\n\n    public CliCmdExecResult execute(String command, Logger logAppender, String jobId) throws ShellException {\n        CliCmdExecResult r;\n        if (remoteHost == null) {\n            r = runNativeCommand(command, logAppender, jobId);"
            },
            {
              "step": 68,
              "variableName": "command",
              "startLine": 144,
              "startColumn": 49,
              "endLine": 144,
              "endColumn": 56,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/util/CliCommandExecutor.java",
              "type": "String",
              "code": "        if (remoteHost == null) {\n            r = runNativeCommand(command, logAppender, jobId);\n        } else {\n            val remoteResult = runRemoteCommand(command, logAppender);\n            r = new CliCmdExecResult(remoteResult.getFirst(), remoteResult.getSecond(), null);\n        }\n"
            },
            {
              "step": 69,
              "variableName": "String command",
              "startLine": 157,
              "startColumn": 52,
              "endLine": 157,
              "endColumn": 66,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/util/CliCommandExecutor.java",
              "type": "String",
              "code": "        return r;\n    }\n\n    private Pair<Integer, String> runRemoteCommand(String command, Logger logAppender) throws ShellException {\n        try {\n            SSHClient ssh = getSshClient();\n"
            },
            {
              "step": 70,
              "variableName": "command",
              "startLine": 162,
              "startColumn": 41,
              "endLine": 162,
              "endColumn": 48,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/util/CliCommandExecutor.java",
              "type": "",
              "code": "            SSHClient ssh = getSshClient();\n\n            SSHClientOutput sshOutput;\n            sshOutput = ssh.execCommand(command, REMOTE_TIMEOUT_SECONDS, logAppender);\n            int exitCode = sshOutput.getExitCode();\n            String output = sshOutput.getText();\n            return Pair.newPair(exitCode, output);"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "kv",
              "startLine": 109,
              "startColumn": 44,
              "endLine": 109,
              "endColumn": 46,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/BackwardCompatibilityConfig.java",
              "type": "Entry",
              "code": "    public Map<String, String> check(Map<String, String> props) {\n        LinkedHashMap<String, String> result = new LinkedHashMap<>();\n        for (Entry<String, String> kv : props.entrySet()) {\n            result.put(check(kv.getKey()), kv.getValue());\n        }\n        return result;\n    }"
            },
            {
              "step": 1,
              "variableName": "kv.getValue()",
              "startLine": 109,
              "startColumn": 44,
              "endLine": 109,
              "endColumn": 57,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/BackwardCompatibilityConfig.java",
              "type": "String",
              "code": "    public Map<String, String> check(Map<String, String> props) {\n        LinkedHashMap<String, String> result = new LinkedHashMap<>();\n        for (Entry<String, String> kv : props.entrySet()) {\n            result.put(check(kv.getKey()), kv.getValue());\n        }\n        return result;\n    }"
            },
            {
              "step": 2,
              "variableName": "result",
              "startLine": 109,
              "startColumn": 13,
              "endLine": 109,
              "endColumn": 19,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/BackwardCompatibilityConfig.java",
              "type": "LinkedHashMap [<map.value>] : String",
              "code": "    public Map<String, String> check(Map<String, String> props) {\n        LinkedHashMap<String, String> result = new LinkedHashMap<>();\n        for (Entry<String, String> kv : props.entrySet()) {\n            result.put(check(kv.getKey()), kv.getValue());\n        }\n        return result;\n    }"
            },
            {
              "step": 3,
              "variableName": "result",
              "startLine": 111,
              "startColumn": 16,
              "endLine": 111,
              "endColumn": 22,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/BackwardCompatibilityConfig.java",
              "type": "LinkedHashMap [<map.value>] : String",
              "code": "        for (Entry<String, String> kv : props.entrySet()) {\n            result.put(check(kv.getKey()), kv.getValue());\n        }\n        return result;\n    }\n\n    public Properties check(Properties props) {"
            },
            {
              "step": 4,
              "variableName": "BCC.check(overrides)",
              "startLine": 53,
              "startColumn": 26,
              "endLine": 53,
              "endColumn": 46,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/KylinConfigExt.java",
              "type": "LinkedHashMap [<map.value>] : String",
              "code": "            throw new IllegalArgumentException();\n        }\n        this.base = base;\n        this.overrides = BCC.check(overrides);\n        // overrides > env > properties\n        this.strSubstitutor = new StrSubstitutor(\n                new CompositeMapView(this.properties, STATIC_SYSTEM_ENV, this.overrides));"
            },
            {
              "step": 5,
              "variableName": "this",
              "startLine": 53,
              "startColumn": 9,
              "endLine": 53,
              "endColumn": 13,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/KylinConfigExt.java",
              "type": "KylinConfigExt [overrides, <map.value>] : String",
              "code": "            throw new IllegalArgumentException();\n        }\n        this.base = base;\n        this.overrides = BCC.check(overrides);\n        // overrides > env > properties\n        this.strSubstitutor = new StrSubstitutor(\n                new CompositeMapView(this.properties, STATIC_SYSTEM_ENV, this.overrides));"
            },
            {
              "step": 6,
              "variableName": "KylinConfigExt",
              "startLine": 47,
              "startColumn": 13,
              "endLine": 47,
              "endColumn": 27,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/KylinConfigExt.java",
              "type": "KylinConfigExt [overrides, <map.value>] : String",
              "code": "        }\n    }\n\n    private KylinConfigExt(KylinConfig base, Map<String, String> overrides) {\n        super(base.getRawAllProperties(), true);\n        if (base.getClass() != KylinConfig.class) {\n            throw new IllegalArgumentException();"
            },
            {
              "step": 7,
              "variableName": "new KylinConfigExt(kylinConfig, overrides)",
              "startLine": 43,
              "startColumn": 20,
              "endLine": 43,
              "endColumn": 62,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/KylinConfigExt.java",
              "type": "KylinConfigExt [overrides, <map.value>] : String",
              "code": "        if (kylinConfig instanceof KylinConfigExt) {\n            return new KylinConfigExt((KylinConfigExt) kylinConfig, overrides);\n        } else {\n            return new KylinConfigExt(kylinConfig, overrides);\n        }\n    }\n"
            },
            {
              "step": 8,
              "variableName": "KylinConfigExt.createInstance(kylinConfigExt, jobOverrides)",
              "startLine": 396,
              "startColumn": 16,
              "endLine": 396,
              "endColumn": 75,
              "uri": "kylin-kylin-5.0.0/src/spark-project/engine-spark/src/main/java/org/apache/kylin/job/execution/NSparkExecutable.java",
              "type": "KylinConfigExt [overrides, <map.value>] : String",
              "code": "            jobOverrides.put(kylinConfigExt.getKubernetesUploadPathKey(),\n                    path + \"/\" + StringUtils.defaultIfBlank(parentId, getId()));\n        }\n        return KylinConfigExt.createInstance(kylinConfigExt, jobOverrides);\n    }\n\n    public KylinConfigExt getKylinConfigExt(KylinConfig originalConfig, String project) {"
            },
            {
              "step": 9,
              "variableName": "getConfig()",
              "startLine": 415,
              "startColumn": 20,
              "endLine": 415,
              "endColumn": 31,
              "uri": "kylin-kylin-5.0.0/src/spark-project/engine-spark/src/main/java/org/apache/kylin/job/execution/NSparkExecutable.java",
              "type": "KylinConfigExt [overrides, <map.value>] : String",
              "code": "    public SparkAppDescription getSparkAppDesc() {\n        val desc = new SparkAppDescription();\n\n        val conf = getConfig();\n        desc.setJobNamePrefix(getJobNamePrefix());\n        desc.setProject(getProject());\n        desc.setJobId(getId());"
            },
            {
              "step": 10,
              "variableName": "conf",
              "startLine": 422,
              "startColumn": 38,
              "endLine": 422,
              "endColumn": 42,
              "uri": "kylin-kylin-5.0.0/src/spark-project/engine-spark/src/main/java/org/apache/kylin/job/execution/NSparkExecutable.java",
              "type": "KylinConfigExt [overrides, <map.value>] : String",
              "code": "        desc.setStepId(getStepId());\n        desc.setSparkSubmitClassName(getSparkSubmitClassName());\n\n        val sparkConf = getSparkConf(conf);\n        desc.setSparkConf(sparkConf);\n        desc.setComma(COMMA);\n        desc.setSparkJars(getSparkJars(conf, sparkConf));"
            },
            {
              "step": 11,
              "variableName": "KylinConfig kylinConf",
              "startLine": 692,
              "startColumn": 46,
              "endLine": 692,
              "endColumn": 67,
              "uri": "kylin-kylin-5.0.0/src/spark-project/engine-spark/src/main/java/org/apache/kylin/job/execution/NSparkExecutable.java",
              "type": "KylinConfigExt [overrides, <map.value>] : String",
              "code": "        return getSparkConf(getConfig());\n    }\n\n    private Map<String, String> getSparkConf(KylinConfig kylinConf) {\n\n        KapConfig kapConf = KapConfig.wrap(kylinConf);\n"
            },
            {
              "step": 12,
              "variableName": "kylinConf",
              "startLine": 705,
              "startColumn": 39,
              "endLine": 705,
              "endColumn": 48,
              "uri": "kylin-kylin-5.0.0/src/spark-project/engine-spark/src/main/java/org/apache/kylin/job/execution/NSparkExecutable.java",
              "type": "KylinConfigExt [overrides, <map.value>] : String",
              "code": "        rewriteTZenv(kylinConf, sparkConf);\n\n        // Rewrite driver extra java options.\n        rewriteDriverExtraJavaOptions(kylinConf, kapConf, sparkConf);\n\n        // Rewrite executor extra java options.\n        rewriteExecutorExtraJavaOptions(kylinConf, sparkConf);"
            },
            {
              "step": 13,
              "variableName": "KylinConfig kylinConf",
              "startLine": 740,
              "startColumn": 48,
              "endLine": 740,
              "endColumn": 69,
              "uri": "kylin-kylin-5.0.0/src/spark-project/engine-spark/src/main/java/org/apache/kylin/job/execution/NSparkExecutable.java",
              "type": "KylinConfigExt [overrides, <map.value>] : String",
              "code": "        }\n    }\n\n    private void rewriteDriverExtraJavaOptions(KylinConfig kylinConf, KapConfig kapConf, //\n            Map<String, String> sparkConf) {\n        StringBuilder sb = new StringBuilder();\n        if (sparkConf.containsKey(DRIVER_EXTRA_JAVA_OPTIONS)) {"
            },
            {
              "step": 14,
              "variableName": "(KylinConfigExt) kylinConf",
              "startLine": 750,
              "startColumn": 54,
              "endLine": 750,
              "endColumn": 80,
              "uri": "kylin-kylin-5.0.0/src/spark-project/engine-spark/src/main/java/org/apache/kylin/job/execution/NSparkExecutable.java",
              "type": "KylinConfigExt [overrides, <map.value>] : String",
              "code": "        String hdfsWorkingDir = kylinConf.getHdfsWorkingDirectory();\n        String sparkDriverHdfsLogPath = null;\n        if (kylinConf instanceof KylinConfigExt) {\n            Map<String, String> extendedOverrides = ((KylinConfigExt) kylinConf).getExtendedOverrides();\n            if (Objects.nonNull(extendedOverrides)) {\n                sparkDriverHdfsLogPath = extendedOverrides.get(\"spark.driver.log4j.appender.hdfs.File\");\n            }"
            },
            {
              "step": 15,
              "variableName": "getExtendedOverrides",
              "startLine": 95,
              "startColumn": 32,
              "endLine": 95,
              "endColumn": 52,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/KylinConfigExt.java",
              "type": "KylinConfigExt [overrides, <map.value>] : String",
              "code": "        return this.strSubstitutor;\n    }\n\n    public Map<String, String> getExtendedOverrides() {\n        return overrides;\n    }\n"
            },
            {
              "step": 16,
              "variableName": "overrides",
              "startLine": 96,
              "startColumn": 16,
              "endLine": 96,
              "endColumn": 25,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/KylinConfigExt.java",
              "type": "KylinConfigExt [overrides, <map.value>] : String",
              "code": "    }\n\n    public Map<String, String> getExtendedOverrides() {\n        return overrides;\n    }\n\n    @Override"
            },
            {
              "step": 17,
              "variableName": "overrides",
              "startLine": 96,
              "startColumn": 16,
              "endLine": 96,
              "endColumn": 25,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/KylinConfigExt.java",
              "type": "LinkedHashMap [<map.value>] : String",
              "code": "    }\n\n    public Map<String, String> getExtendedOverrides() {\n        return overrides;\n    }\n\n    @Override"
            },
            {
              "step": 18,
              "variableName": "((KylinConfigExt) kylinConf).getExtendedOverrides()",
              "startLine": 750,
              "startColumn": 53,
              "endLine": 750,
              "endColumn": 104,
              "uri": "kylin-kylin-5.0.0/src/spark-project/engine-spark/src/main/java/org/apache/kylin/job/execution/NSparkExecutable.java",
              "type": "LinkedHashMap [<map.value>] : String",
              "code": "        String hdfsWorkingDir = kylinConf.getHdfsWorkingDirectory();\n        String sparkDriverHdfsLogPath = null;\n        if (kylinConf instanceof KylinConfigExt) {\n            Map<String, String> extendedOverrides = ((KylinConfigExt) kylinConf).getExtendedOverrides();\n            if (Objects.nonNull(extendedOverrides)) {\n                sparkDriverHdfsLogPath = extendedOverrides.get(\"spark.driver.log4j.appender.hdfs.File\");\n            }"
            },
            {
              "step": 19,
              "variableName": "extendedOverrides",
              "startLine": 752,
              "startColumn": 42,
              "endLine": 752,
              "endColumn": 59,
              "uri": "kylin-kylin-5.0.0/src/spark-project/engine-spark/src/main/java/org/apache/kylin/job/execution/NSparkExecutable.java",
              "type": "LinkedHashMap [<map.value>] : String",
              "code": "        if (kylinConf instanceof KylinConfigExt) {\n            Map<String, String> extendedOverrides = ((KylinConfigExt) kylinConf).getExtendedOverrides();\n            if (Objects.nonNull(extendedOverrides)) {\n                sparkDriverHdfsLogPath = extendedOverrides.get(\"spark.driver.log4j.appender.hdfs.File\");\n            }\n        }\n        if (kapConf.isCloud()) {"
            },
            {
              "step": 20,
              "variableName": "extendedOverrides.get(\"spark.driver.log4j.appender.hdfs.File\")",
              "startLine": 752,
              "startColumn": 42,
              "endLine": 752,
              "endColumn": 104,
              "uri": "kylin-kylin-5.0.0/src/spark-project/engine-spark/src/main/java/org/apache/kylin/job/execution/NSparkExecutable.java",
              "type": "String",
              "code": "        if (kylinConf instanceof KylinConfigExt) {\n            Map<String, String> extendedOverrides = ((KylinConfigExt) kylinConf).getExtendedOverrides();\n            if (Objects.nonNull(extendedOverrides)) {\n                sparkDriverHdfsLogPath = extendedOverrides.get(\"spark.driver.log4j.appender.hdfs.File\");\n            }\n        }\n        if (kapConf.isCloud()) {"
            },
            {
              "step": 21,
              "variableName": "sparkDriverHdfsLogPath",
              "startLine": 763,
              "startColumn": 84,
              "endLine": 763,
              "endColumn": 106,
              "uri": "kylin-kylin-5.0.0/src/spark-project/engine-spark/src/main/java/org/apache/kylin/job/execution/NSparkExecutable.java",
              "type": "String",
              "code": "            }\n        }\n        sb.append(SPACE).append(\"-Dkylin.hdfs.working.dir=\").append(hdfsWorkingDir);\n        sb.append(SPACE).append(\"-Dspark.driver.log4j.appender.hdfs.File=\").append(sparkDriverHdfsLogPath);\n\n        // Log4j conf.\n        rewriteDriverLog4jConf(sb, kylinConf, sparkConf);"
            },
            {
              "step": 22,
              "variableName": "sb.append(SPACE).append(\"-Dspark.driver.log4j.appender.hdfs.File=\")",
              "startLine": 763,
              "startColumn": 9,
              "endLine": 763,
              "endColumn": 76,
              "uri": "kylin-kylin-5.0.0/src/spark-project/engine-spark/src/main/java/org/apache/kylin/job/execution/NSparkExecutable.java",
              "type": "StringBuilder",
              "code": "            }\n        }\n        sb.append(SPACE).append(\"-Dkylin.hdfs.working.dir=\").append(hdfsWorkingDir);\n        sb.append(SPACE).append(\"-Dspark.driver.log4j.appender.hdfs.File=\").append(sparkDriverHdfsLogPath);\n\n        // Log4j conf.\n        rewriteDriverLog4jConf(sb, kylinConf, sparkConf);"
            },
            {
              "step": 23,
              "variableName": "sb",
              "startLine": 786,
              "startColumn": 50,
              "endLine": 786,
              "endColumn": 52,
              "uri": "kylin-kylin-5.0.0/src/spark-project/engine-spark/src/main/java/org/apache/kylin/job/execution/NSparkExecutable.java",
              "type": "StringBuilder",
              "code": "                    .append(kylinConf.buildJobProfilingProfileTimeout());\n        }\n\n        sparkConf.put(DRIVER_EXTRA_JAVA_OPTIONS, sb.toString().trim());\n    }\n\n    @VisibleForTesting"
            },
            {
              "step": 24,
              "variableName": "sb.toString()",
              "startLine": 786,
              "startColumn": 50,
              "endLine": 786,
              "endColumn": 63,
              "uri": "kylin-kylin-5.0.0/src/spark-project/engine-spark/src/main/java/org/apache/kylin/job/execution/NSparkExecutable.java",
              "type": "String",
              "code": "                    .append(kylinConf.buildJobProfilingProfileTimeout());\n        }\n\n        sparkConf.put(DRIVER_EXTRA_JAVA_OPTIONS, sb.toString().trim());\n    }\n\n    @VisibleForTesting"
            },
            {
              "step": 25,
              "variableName": "sb.toString().trim()",
              "startLine": 786,
              "startColumn": 50,
              "endLine": 786,
              "endColumn": 70,
              "uri": "kylin-kylin-5.0.0/src/spark-project/engine-spark/src/main/java/org/apache/kylin/job/execution/NSparkExecutable.java",
              "type": "String",
              "code": "                    .append(kylinConf.buildJobProfilingProfileTimeout());\n        }\n\n        sparkConf.put(DRIVER_EXTRA_JAVA_OPTIONS, sb.toString().trim());\n    }\n\n    @VisibleForTesting"
            },
            {
              "step": 26,
              "variableName": "sparkConf",
              "startLine": 786,
              "startColumn": 9,
              "endLine": 786,
              "endColumn": 18,
              "uri": "kylin-kylin-5.0.0/src/spark-project/engine-spark/src/main/java/org/apache/kylin/job/execution/NSparkExecutable.java",
              "type": "LinkedHashMap [<map.value>] : String",
              "code": "                    .append(kylinConf.buildJobProfilingProfileTimeout());\n        }\n\n        sparkConf.put(DRIVER_EXTRA_JAVA_OPTIONS, sb.toString().trim());\n    }\n\n    @VisibleForTesting"
            },
            {
              "step": 27,
              "variableName": "Map<String, String> sparkConf",
              "startLine": 741,
              "startColumn": 13,
              "endLine": 741,
              "endColumn": 42,
              "uri": "kylin-kylin-5.0.0/src/spark-project/engine-spark/src/main/java/org/apache/kylin/job/execution/NSparkExecutable.java",
              "type": "LinkedHashMap [<map.value>] : String",
              "code": "    }\n\n    private void rewriteDriverExtraJavaOptions(KylinConfig kylinConf, KapConfig kapConf, //\n            Map<String, String> sparkConf) {\n        StringBuilder sb = new StringBuilder();\n        if (sparkConf.containsKey(DRIVER_EXTRA_JAVA_OPTIONS)) {\n            sb.append(sparkConf.get(DRIVER_EXTRA_JAVA_OPTIONS));"
            },
            {
              "step": 28,
              "variableName": "sparkConf",
              "startLine": 705,
              "startColumn": 59,
              "endLine": 705,
              "endColumn": 68,
              "uri": "kylin-kylin-5.0.0/src/spark-project/engine-spark/src/main/java/org/apache/kylin/job/execution/NSparkExecutable.java",
              "type": "LinkedHashMap [<map.value>] : String",
              "code": "        rewriteTZenv(kylinConf, sparkConf);\n\n        // Rewrite driver extra java options.\n        rewriteDriverExtraJavaOptions(kylinConf, kapConf, sparkConf);\n\n        // Rewrite executor extra java options.\n        rewriteExecutorExtraJavaOptions(kylinConf, sparkConf);"
            },
            {
              "step": 29,
              "variableName": "sparkConf",
              "startLine": 719,
              "startColumn": 44,
              "endLine": 719,
              "endColumn": 53,
              "uri": "kylin-kylin-5.0.0/src/spark-project/engine-spark/src/main/java/org/apache/kylin/job/execution/NSparkExecutable.java",
              "type": "LinkedHashMap [<map.value>] : String",
              "code": "        // Rewrite k8s conf.\n        rewriteConfOfKubernetes(sparkConf);\n\n        return Collections.unmodifiableMap(sparkConf);\n    }\n\n    private void rewriteConfOfKubernetes(Map<String, String> sparkConf) {"
            },
            {
              "step": 30,
              "variableName": "Collections.unmodifiableMap(sparkConf)",
              "startLine": 719,
              "startColumn": 16,
              "endLine": 719,
              "endColumn": 54,
              "uri": "kylin-kylin-5.0.0/src/spark-project/engine-spark/src/main/java/org/apache/kylin/job/execution/NSparkExecutable.java",
              "type": "Map [<map.value>] : String",
              "code": "        // Rewrite k8s conf.\n        rewriteConfOfKubernetes(sparkConf);\n\n        return Collections.unmodifiableMap(sparkConf);\n    }\n\n    private void rewriteConfOfKubernetes(Map<String, String> sparkConf) {"
            },
            {
              "step": 31,
              "variableName": "getSparkConf(conf)",
              "startLine": 422,
              "startColumn": 25,
              "endLine": 422,
              "endColumn": 43,
              "uri": "kylin-kylin-5.0.0/src/spark-project/engine-spark/src/main/java/org/apache/kylin/job/execution/NSparkExecutable.java",
              "type": "Map [<map.value>] : String",
              "code": "        desc.setStepId(getStepId());\n        desc.setSparkSubmitClassName(getSparkSubmitClassName());\n\n        val sparkConf = getSparkConf(conf);\n        desc.setSparkConf(sparkConf);\n        desc.setComma(COMMA);\n        desc.setSparkJars(getSparkJars(conf, sparkConf));"
            },
            {
              "step": 32,
              "variableName": "sparkConf",
              "startLine": 423,
              "startColumn": 27,
              "endLine": 423,
              "endColumn": 36,
              "uri": "kylin-kylin-5.0.0/src/spark-project/engine-spark/src/main/java/org/apache/kylin/job/execution/NSparkExecutable.java",
              "type": "Map [<map.value>] : String",
              "code": "        desc.setSparkSubmitClassName(getSparkSubmitClassName());\n\n        val sparkConf = getSparkConf(conf);\n        desc.setSparkConf(sparkConf);\n        desc.setComma(COMMA);\n        desc.setSparkJars(getSparkJars(conf, sparkConf));\n        desc.setSparkFiles(getSparkFiles(conf, sparkConf));"
            },
            {
              "step": 33,
              "variableName": "sparkConf : Map [<map.value>] : String",
              "startLine": 26,
              "endLine": 26,
              "endColumn": 6,
              "uri": "kylin-kylin-5.0.0/src/spark-project/engine-build-sdk/src/main/java/org/apache/kylin/engine/spark/job/SparkAppDescription.java",
              "type": "Map [<map.value>] : String",
              "code": "\nimport lombok.Data;\n\n@Data\npublic class SparkAppDescription {\n\n    private String hadoopConfDir;"
            },
            {
              "step": 34,
              "variableName": "sparkConf : Map [<map.value>] : String",
              "startLine": 26,
              "endLine": 26,
              "endColumn": 6,
              "uri": "kylin-kylin-5.0.0/src/spark-project/engine-build-sdk/src/main/java/org/apache/kylin/engine/spark/job/SparkAppDescription.java",
              "type": "Map [<map.value>] : String",
              "code": "\nimport lombok.Data;\n\n@Data\npublic class SparkAppDescription {\n\n    private String hadoopConfDir;"
            },
            {
              "step": 35,
              "variableName": "this [post update] : SparkAppDescription [sparkConf, <map.value>] : String",
              "startLine": 26,
              "endLine": 26,
              "endColumn": 6,
              "uri": "kylin-kylin-5.0.0/src/spark-project/engine-build-sdk/src/main/java/org/apache/kylin/engine/spark/job/SparkAppDescription.java",
              "type": "SparkAppDescription [sparkConf, <map.value>] : String",
              "code": "\nimport lombok.Data;\n\n@Data\npublic class SparkAppDescription {\n\n    private String hadoopConfDir;"
            },
            {
              "step": 36,
              "variableName": "parameter this [Return] : SparkAppDescription [sparkConf, <map.value>] : String",
              "startLine": 26,
              "endLine": 26,
              "endColumn": 6,
              "uri": "kylin-kylin-5.0.0/src/spark-project/engine-build-sdk/src/main/java/org/apache/kylin/engine/spark/job/SparkAppDescription.java",
              "type": "SparkAppDescription [sparkConf, <map.value>] : String",
              "code": "\nimport lombok.Data;\n\n@Data\npublic class SparkAppDescription {\n\n    private String hadoopConfDir;"
            },
            {
              "step": 37,
              "variableName": "desc",
              "startLine": 423,
              "startColumn": 9,
              "endLine": 423,
              "endColumn": 13,
              "uri": "kylin-kylin-5.0.0/src/spark-project/engine-spark/src/main/java/org/apache/kylin/job/execution/NSparkExecutable.java",
              "type": "SparkAppDescription [sparkConf, <map.value>] : String",
              "code": "        desc.setSparkSubmitClassName(getSparkSubmitClassName());\n\n        val sparkConf = getSparkConf(conf);\n        desc.setSparkConf(sparkConf);\n        desc.setComma(COMMA);\n        desc.setSparkJars(getSparkJars(conf, sparkConf));\n        desc.setSparkFiles(getSparkFiles(conf, sparkConf));"
            },
            {
              "step": 38,
              "variableName": "desc",
              "startLine": 427,
              "startColumn": 16,
              "endLine": 427,
              "endColumn": 20,
              "uri": "kylin-kylin-5.0.0/src/spark-project/engine-spark/src/main/java/org/apache/kylin/job/execution/NSparkExecutable.java",
              "type": "SparkAppDescription [sparkConf, <map.value>] : String",
              "code": "        desc.setComma(COMMA);\n        desc.setSparkJars(getSparkJars(conf, sparkConf));\n        desc.setSparkFiles(getSparkFiles(conf, sparkConf));\n        return desc;\n    }\n\n    protected ExecuteResult runSparkSubmit(String hadoopConfDir, String kylinJobJar, String appArgs) {"
            },
            {
              "step": 39,
              "variableName": "getSparkAppDesc()",
              "startLine": 106,
              "startColumn": 24,
              "endLine": 106,
              "endColumn": 41,
              "uri": "kylin-kylin-5.0.0/src/query-service/src/main/java/org/apache/kylin/rest/service/AsyncQueryJob.java",
              "type": "SparkAppDescription [sparkConf, <map.value>] : String",
              "code": "        val patternedLogger = new BufferedLogger(logger);\n        try {\n            killOrphanApplicationIfExists(getId());\n            val desc = getSparkAppDesc();\n            desc.setHadoopConfDir(hadoopConf);\n            desc.setKylinJobJar(kylinJobJar);\n            desc.setAppArgs(appArgs);"
            },
            {
              "step": 40,
              "variableName": "desc",
              "startLine": 110,
              "startColumn": 102,
              "endLine": 110,
              "endColumn": 106,
              "uri": "kylin-kylin-5.0.0/src/query-service/src/main/java/org/apache/kylin/rest/service/AsyncQueryJob.java",
              "type": "SparkAppDescription [sparkConf, <map.value>] : String",
              "code": "            desc.setHadoopConfDir(hadoopConf);\n            desc.setKylinJobJar(kylinJobJar);\n            desc.setAppArgs(appArgs);\n            String cmd = (String) sparkJobHandler.generateSparkCmd(KylinConfig.getInstanceFromEnv(), desc);\n            CliCommandExecutor exec = getCliCommandExecutor();\n            CliCommandExecutor.CliCmdExecResult r = exec.execute(cmd, patternedLogger, getId());\n            return ExecuteResult.createSucceed(r.getCmd());"
            },
            {
              "step": 41,
              "variableName": "SparkAppDescription desc",
              "startLine": 125,
              "startColumn": 56,
              "endLine": 125,
              "endColumn": 80,
              "uri": "kylin-kylin-5.0.0/src/spark-project/engine-spark/src/main/java/org/apache/kylin/engine/spark/job/DefaultSparkBuildJobHandler.java",
              "type": "SparkAppDescription [sparkConf, <map.value>] : String",
              "code": "    }\n\n    @Override\n    public Object generateSparkCmd(KylinConfig config, SparkAppDescription desc) {\n        // Hadoop conf dir.\n        StringBuilder cmdBuilder = new StringBuilder(\"export HADOOP_CONF_DIR=\");\n        cmdBuilder.append(desc.getHadoopConfDir());"
            },
            {
              "step": 42,
              "variableName": "desc",
              "startLine": 158,
              "startColumn": 35,
              "endLine": 158,
              "endColumn": 39,
              "uri": "kylin-kylin-5.0.0/src/spark-project/engine-spark/src/main/java/org/apache/kylin/engine/spark/job/DefaultSparkBuildJobHandler.java",
              "type": "SparkAppDescription [sparkConf, <map.value>] : String",
              "code": "        // Spark conf.\n        // Maybe we would rewrite some confs, like 'extraJavaOptions', 'extraClassPath',\n        // and the confs rewrited should be removed from props thru #modifyDump.\n        wrapSparkConf(cmdBuilder, desc.getSparkConf());\n\n        // Application jar. KylinJobJar is the application-jar (of spark-submit),\n        // path to a bundled jar including your application and all dependencies,"
            },
            {
              "step": 43,
              "variableName": "sparkConf;",
              "startLine": 45,
              "startColumn": 33,
              "endLine": 45,
              "endColumn": 43,
              "uri": "kylin-kylin-5.0.0/src/spark-project/engine-build-sdk/src/main/java/org/apache/kylin/engine/spark/job/SparkAppDescription.java",
              "type": "SparkAppDescription [sparkConf, <map.value>] : String",
              "code": "\n    private String sparkSubmitClassName;\n\n    private Map<String, String> sparkConf;\n\n    private Set<String> sparkJars;\n"
            },
            {
              "step": 44,
              "variableName": "sparkConf;",
              "startLine": 45,
              "startColumn": 33,
              "endLine": 45,
              "endColumn": 43,
              "uri": "kylin-kylin-5.0.0/src/spark-project/engine-build-sdk/src/main/java/org/apache/kylin/engine/spark/job/SparkAppDescription.java",
              "type": "SparkAppDescription [sparkConf, <map.value>] : String",
              "code": "\n    private String sparkSubmitClassName;\n\n    private Map<String, String> sparkConf;\n\n    private Set<String> sparkJars;\n"
            },
            {
              "step": 45,
              "variableName": "sparkConf;",
              "startLine": 45,
              "startColumn": 33,
              "endLine": 45,
              "endColumn": 43,
              "uri": "kylin-kylin-5.0.0/src/spark-project/engine-build-sdk/src/main/java/org/apache/kylin/engine/spark/job/SparkAppDescription.java",
              "type": "Map [<map.value>] : String",
              "code": "\n    private String sparkSubmitClassName;\n\n    private Map<String, String> sparkConf;\n\n    private Set<String> sparkJars;\n"
            },
            {
              "step": 46,
              "variableName": "desc.getSparkConf()",
              "startLine": 158,
              "startColumn": 35,
              "endLine": 158,
              "endColumn": 54,
              "uri": "kylin-kylin-5.0.0/src/spark-project/engine-spark/src/main/java/org/apache/kylin/engine/spark/job/DefaultSparkBuildJobHandler.java",
              "type": "Map [<map.value>] : String",
              "code": "        // Spark conf.\n        // Maybe we would rewrite some confs, like 'extraJavaOptions', 'extraClassPath',\n        // and the confs rewrited should be removed from props thru #modifyDump.\n        wrapSparkConf(cmdBuilder, desc.getSparkConf());\n\n        // Application jar. KylinJobJar is the application-jar (of spark-submit),\n        // path to a bundled jar including your application and all dependencies,"
            },
            {
              "step": 47,
              "variableName": "Map<String, String> sparkConf",
              "startLine": 200,
              "startColumn": 58,
              "endLine": 200,
              "endColumn": 87,
              "uri": "kylin-kylin-5.0.0/src/spark-project/engine-spark/src/main/java/org/apache/kylin/engine/spark/job/DefaultSparkBuildJobHandler.java",
              "type": "Map [<map.value>] : String",
              "code": "        throw new IllegalArgumentException(msg);\n    }\n\n    private void wrapSparkConf(StringBuilder cmdBuilder, Map<String, String> sparkConf) {\n        for (Map.Entry<String, String> entry : sparkConf.entrySet()) {\n            switch (entry.getKey()) {\n            // Avoid duplicated from '--jars'"
            },
            {
              "step": 48,
              "variableName": "sparkConf",
              "startLine": 201,
              "startColumn": 48,
              "endLine": 201,
              "endColumn": 57,
              "uri": "kylin-kylin-5.0.0/src/spark-project/engine-spark/src/main/java/org/apache/kylin/engine/spark/job/DefaultSparkBuildJobHandler.java",
              "type": "Map [<map.value>] : String",
              "code": "    }\n\n    private void wrapSparkConf(StringBuilder cmdBuilder, Map<String, String> sparkConf) {\n        for (Map.Entry<String, String> entry : sparkConf.entrySet()) {\n            switch (entry.getKey()) {\n            // Avoid duplicated from '--jars'\n            // Avoid duplicated from '--files'"
            },
            {
              "step": 49,
              "variableName": "sparkConf.entrySet()",
              "startLine": 201,
              "startColumn": 48,
              "endLine": 201,
              "endColumn": 68,
              "uri": "kylin-kylin-5.0.0/src/spark-project/engine-spark/src/main/java/org/apache/kylin/engine/spark/job/DefaultSparkBuildJobHandler.java",
              "type": "Set [<element>, <map.value>] : String",
              "code": "    }\n\n    private void wrapSparkConf(StringBuilder cmdBuilder, Map<String, String> sparkConf) {\n        for (Map.Entry<String, String> entry : sparkConf.entrySet()) {\n            switch (entry.getKey()) {\n            // Avoid duplicated from '--jars'\n            // Avoid duplicated from '--files'"
            },
            {
              "step": 50,
              "variableName": "entry",
              "startLine": 202,
              "startColumn": 21,
              "endLine": 202,
              "endColumn": 26,
              "uri": "kylin-kylin-5.0.0/src/spark-project/engine-spark/src/main/java/org/apache/kylin/engine/spark/job/DefaultSparkBuildJobHandler.java",
              "type": "Entry [<map.value>] : String",
              "code": "\n    private void wrapSparkConf(StringBuilder cmdBuilder, Map<String, String> sparkConf) {\n        for (Map.Entry<String, String> entry : sparkConf.entrySet()) {\n            switch (entry.getKey()) {\n            // Avoid duplicated from '--jars'\n            // Avoid duplicated from '--files'\n            case SPARK_JARS_1:"
            },
            {
              "step": 51,
              "variableName": "entry",
              "startLine": 212,
              "startColumn": 61,
              "endLine": 212,
              "endColumn": 66,
              "uri": "kylin-kylin-5.0.0/src/spark-project/engine-spark/src/main/java/org/apache/kylin/engine/spark/job/DefaultSparkBuildJobHandler.java",
              "type": "Entry [<map.value>] : String",
              "code": "                // Do nothing.\n                break;\n            default:\n                appendSparkConf(cmdBuilder, entry.getKey(), entry.getValue());\n                break;\n            }\n        }"
            },
            {
              "step": 52,
              "variableName": "entry.getValue()",
              "startLine": 212,
              "startColumn": 61,
              "endLine": 212,
              "endColumn": 77,
              "uri": "kylin-kylin-5.0.0/src/spark-project/engine-spark/src/main/java/org/apache/kylin/engine/spark/job/DefaultSparkBuildJobHandler.java",
              "type": "String",
              "code": "                // Do nothing.\n                break;\n            default:\n                appendSparkConf(cmdBuilder, entry.getKey(), entry.getValue());\n                break;\n            }\n        }"
            },
            {
              "step": 53,
              "variableName": "String confValue",
              "startLine": 218,
              "startColumn": 70,
              "endLine": 218,
              "endColumn": 86,
              "uri": "kylin-kylin-5.0.0/src/spark-project/engine-spark/src/main/java/org/apache/kylin/engine/spark/job/DefaultSparkBuildJobHandler.java",
              "type": "String",
              "code": "        }\n    }\n\n    protected void appendSparkConf(StringBuilder sb, String confKey, String confValue) {\n        // Multiple parameters in \"--conf\" need to be enclosed in single quotes\n        sb.append(\" --conf '\").append(confKey).append(EQUALS).append(confValue).append(\"' \");\n        sb.append(SUBMIT_LINE_FORMAT);"
            },
            {
              "step": 54,
              "variableName": "confValue",
              "startLine": 220,
              "startColumn": 70,
              "endLine": 220,
              "endColumn": 79,
              "uri": "kylin-kylin-5.0.0/src/spark-project/engine-spark/src/main/java/org/apache/kylin/engine/spark/job/DefaultSparkBuildJobHandler.java",
              "type": "String",
              "code": "\n    protected void appendSparkConf(StringBuilder sb, String confKey, String confValue) {\n        // Multiple parameters in \"--conf\" need to be enclosed in single quotes\n        sb.append(\" --conf '\").append(confKey).append(EQUALS).append(confValue).append(\"' \");\n        sb.append(SUBMIT_LINE_FORMAT);\n    }\n"
            },
            {
              "step": 55,
              "variableName": "sb.append(\" --conf '\").append(confKey).append(EQUALS)",
              "startLine": 220,
              "startColumn": 9,
              "endLine": 220,
              "endColumn": 62,
              "uri": "kylin-kylin-5.0.0/src/spark-project/engine-spark/src/main/java/org/apache/kylin/engine/spark/job/DefaultSparkBuildJobHandler.java",
              "type": "StringBuilder",
              "code": "\n    protected void appendSparkConf(StringBuilder sb, String confKey, String confValue) {\n        // Multiple parameters in \"--conf\" need to be enclosed in single quotes\n        sb.append(\" --conf '\").append(confKey).append(EQUALS).append(confValue).append(\"' \");\n        sb.append(SUBMIT_LINE_FORMAT);\n    }\n"
            },
            {
              "step": 56,
              "variableName": "StringBuilder sb",
              "startLine": 218,
              "startColumn": 36,
              "endLine": 218,
              "endColumn": 52,
              "uri": "kylin-kylin-5.0.0/src/spark-project/engine-spark/src/main/java/org/apache/kylin/engine/spark/job/DefaultSparkBuildJobHandler.java",
              "type": "StringBuilder",
              "code": "        }\n    }\n\n    protected void appendSparkConf(StringBuilder sb, String confKey, String confValue) {\n        // Multiple parameters in \"--conf\" need to be enclosed in single quotes\n        sb.append(\" --conf '\").append(confKey).append(EQUALS).append(confValue).append(\"' \");\n        sb.append(SUBMIT_LINE_FORMAT);"
            },
            {
              "step": 57,
              "variableName": "cmdBuilder",
              "startLine": 212,
              "startColumn": 33,
              "endLine": 212,
              "endColumn": 43,
              "uri": "kylin-kylin-5.0.0/src/spark-project/engine-spark/src/main/java/org/apache/kylin/engine/spark/job/DefaultSparkBuildJobHandler.java",
              "type": "StringBuilder",
              "code": "                // Do nothing.\n                break;\n            default:\n                appendSparkConf(cmdBuilder, entry.getKey(), entry.getValue());\n                break;\n            }\n        }"
            },
            {
              "step": 58,
              "variableName": "StringBuilder cmdBuilder",
              "startLine": 200,
              "startColumn": 32,
              "endLine": 200,
              "endColumn": 56,
              "uri": "kylin-kylin-5.0.0/src/spark-project/engine-spark/src/main/java/org/apache/kylin/engine/spark/job/DefaultSparkBuildJobHandler.java",
              "type": "StringBuilder",
              "code": "        throw new IllegalArgumentException(msg);\n    }\n\n    private void wrapSparkConf(StringBuilder cmdBuilder, Map<String, String> sparkConf) {\n        for (Map.Entry<String, String> entry : sparkConf.entrySet()) {\n            switch (entry.getKey()) {\n            // Avoid duplicated from '--jars'"
            },
            {
              "step": 59,
              "variableName": "cmdBuilder",
              "startLine": 158,
              "startColumn": 23,
              "endLine": 158,
              "endColumn": 33,
              "uri": "kylin-kylin-5.0.0/src/spark-project/engine-spark/src/main/java/org/apache/kylin/engine/spark/job/DefaultSparkBuildJobHandler.java",
              "type": "StringBuilder",
              "code": "        // Spark conf.\n        // Maybe we would rewrite some confs, like 'extraJavaOptions', 'extraClassPath',\n        // and the confs rewrited should be removed from props thru #modifyDump.\n        wrapSparkConf(cmdBuilder, desc.getSparkConf());\n\n        // Application jar. KylinJobJar is the application-jar (of spark-submit),\n        // path to a bundled jar including your application and all dependencies,"
            },
            {
              "step": 60,
              "variableName": "cmdBuilder",
              "startLine": 170,
              "startColumn": 32,
              "endLine": 170,
              "endColumn": 42,
              "uri": "kylin-kylin-5.0.0/src/spark-project/engine-spark/src/main/java/org/apache/kylin/engine/spark/job/DefaultSparkBuildJobHandler.java",
              "type": "StringBuilder",
              "code": "        // Application parameter file.\n        cmdBuilder.append(SPACE).append(desc.getAppArgs());\n\n        final String command = cmdBuilder.toString();\n        logger.info(\"spark submit cmd: {}\", command);\n\n        // Safe check."
            },
            {
              "step": 61,
              "variableName": "cmdBuilder.toString()",
              "startLine": 170,
              "startColumn": 32,
              "endLine": 170,
              "endColumn": 53,
              "uri": "kylin-kylin-5.0.0/src/spark-project/engine-spark/src/main/java/org/apache/kylin/engine/spark/job/DefaultSparkBuildJobHandler.java",
              "type": "String",
              "code": "        // Application parameter file.\n        cmdBuilder.append(SPACE).append(desc.getAppArgs());\n\n        final String command = cmdBuilder.toString();\n        logger.info(\"spark submit cmd: {}\", command);\n\n        // Safe check."
            },
            {
              "step": 62,
              "variableName": "command",
              "startLine": 175,
              "startColumn": 16,
              "endLine": 175,
              "endColumn": 23,
              "uri": "kylin-kylin-5.0.0/src/spark-project/engine-spark/src/main/java/org/apache/kylin/engine/spark/job/DefaultSparkBuildJobHandler.java",
              "type": "String",
              "code": "\n        // Safe check.\n        checkCommandInjection(command);\n        return command;\n    }\n\n    private void checkCommandInjection(String command) {"
            },
            {
              "step": 63,
              "variableName": "sparkJobHandler.generateSparkCmd(KylinConfig.getInstanceFromEnv(), desc)",
              "startLine": 110,
              "startColumn": 35,
              "endLine": 110,
              "endColumn": 107,
              "uri": "kylin-kylin-5.0.0/src/query-service/src/main/java/org/apache/kylin/rest/service/AsyncQueryJob.java",
              "type": "String",
              "code": "            desc.setHadoopConfDir(hadoopConf);\n            desc.setKylinJobJar(kylinJobJar);\n            desc.setAppArgs(appArgs);\n            String cmd = (String) sparkJobHandler.generateSparkCmd(KylinConfig.getInstanceFromEnv(), desc);\n            CliCommandExecutor exec = getCliCommandExecutor();\n            CliCommandExecutor.CliCmdExecResult r = exec.execute(cmd, patternedLogger, getId());\n            return ExecuteResult.createSucceed(r.getCmd());"
            },
            {
              "step": 64,
              "variableName": "(String) sparkJobHandler.generateSparkCmd(KylinConfig.getInstanceFromEnv(), desc)",
              "startLine": 110,
              "startColumn": 26,
              "endLine": 110,
              "endColumn": 107,
              "uri": "kylin-kylin-5.0.0/src/query-service/src/main/java/org/apache/kylin/rest/service/AsyncQueryJob.java",
              "type": "String",
              "code": "            desc.setHadoopConfDir(hadoopConf);\n            desc.setKylinJobJar(kylinJobJar);\n            desc.setAppArgs(appArgs);\n            String cmd = (String) sparkJobHandler.generateSparkCmd(KylinConfig.getInstanceFromEnv(), desc);\n            CliCommandExecutor exec = getCliCommandExecutor();\n            CliCommandExecutor.CliCmdExecResult r = exec.execute(cmd, patternedLogger, getId());\n            return ExecuteResult.createSucceed(r.getCmd());"
            },
            {
              "step": 65,
              "variableName": "cmd",
              "startLine": 112,
              "startColumn": 66,
              "endLine": 112,
              "endColumn": 69,
              "uri": "kylin-kylin-5.0.0/src/query-service/src/main/java/org/apache/kylin/rest/service/AsyncQueryJob.java",
              "type": "String",
              "code": "            desc.setAppArgs(appArgs);\n            String cmd = (String) sparkJobHandler.generateSparkCmd(KylinConfig.getInstanceFromEnv(), desc);\n            CliCommandExecutor exec = getCliCommandExecutor();\n            CliCommandExecutor.CliCmdExecResult r = exec.execute(cmd, patternedLogger, getId());\n            return ExecuteResult.createSucceed(r.getCmd());\n        } catch (Exception e) {\n            return ExecuteResult.createError(e);"
            },
            {
              "step": 66,
              "variableName": "String command",
              "startLine": 139,
              "startColumn": 37,
              "endLine": 139,
              "endColumn": 51,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/util/CliCommandExecutor.java",
              "type": "String",
              "code": "        return execute(command, logAppender, null);\n    }\n\n    public CliCmdExecResult execute(String command, Logger logAppender, String jobId) throws ShellException {\n        CliCmdExecResult r;\n        if (remoteHost == null) {\n            r = runNativeCommand(command, logAppender, jobId);"
            },
            {
              "step": 67,
              "variableName": "command",
              "startLine": 144,
              "startColumn": 49,
              "endLine": 144,
              "endColumn": 56,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/util/CliCommandExecutor.java",
              "type": "String",
              "code": "        if (remoteHost == null) {\n            r = runNativeCommand(command, logAppender, jobId);\n        } else {\n            val remoteResult = runRemoteCommand(command, logAppender);\n            r = new CliCmdExecResult(remoteResult.getFirst(), remoteResult.getSecond(), null);\n        }\n"
            },
            {
              "step": 68,
              "variableName": "String command",
              "startLine": 157,
              "startColumn": 52,
              "endLine": 157,
              "endColumn": 66,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/util/CliCommandExecutor.java",
              "type": "String",
              "code": "        return r;\n    }\n\n    private Pair<Integer, String> runRemoteCommand(String command, Logger logAppender) throws ShellException {\n        try {\n            SSHClient ssh = getSshClient();\n"
            },
            {
              "step": 69,
              "variableName": "command",
              "startLine": 162,
              "startColumn": 41,
              "endLine": 162,
              "endColumn": 48,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/util/CliCommandExecutor.java",
              "type": "",
              "code": "            SSHClient ssh = getSshClient();\n\n            SSHClientOutput sshOutput;\n            sshOutput = ssh.execCommand(command, REMOTE_TIMEOUT_SECONDS, logAppender);\n            int exitCode = sshOutput.getExitCode();\n            String output = sshOutput.getText();\n            return Pair.newPair(exitCode, output);"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 3,
      "fileName": "QueryService.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "tempMetadataDir",
              "startLine": 113,
              "startColumn": 39,
              "endLine": 113,
              "endColumn": 54,
              "uri": "kylin-kylin-5.0.0/src/common-service/src/main/java/org/apache/kylin/rest/KylinPrepareEnvListener.java",
              "type": "String",
              "code": "    private static void setLocalEnvs() {\n        String tempMetadataDir = TempMetadataBuilder.prepareLocalTempMetadata();\n        KylinConfig.setKylinConfigForLocalTest(tempMetadataDir);\n        File localMetadata = new File(tempMetadataDir);\n\n        // pass checkHadoopHome\n        Unsafe.setProperty(\"hadoop.home.dir\", localMetadata.getAbsolutePath() + \"/working-dir\");"
            },
            {
              "step": 1,
              "variableName": "new File(tempMetadataDir)",
              "startLine": 113,
              "startColumn": 30,
              "endLine": 113,
              "endColumn": 55,
              "uri": "kylin-kylin-5.0.0/src/common-service/src/main/java/org/apache/kylin/rest/KylinPrepareEnvListener.java",
              "type": "File",
              "code": "    private static void setLocalEnvs() {\n        String tempMetadataDir = TempMetadataBuilder.prepareLocalTempMetadata();\n        KylinConfig.setKylinConfigForLocalTest(tempMetadataDir);\n        File localMetadata = new File(tempMetadataDir);\n\n        // pass checkHadoopHome\n        Unsafe.setProperty(\"hadoop.home.dir\", localMetadata.getAbsolutePath() + \"/working-dir\");"
            },
            {
              "step": 2,
              "variableName": "localMetadata",
              "startLine": 116,
              "startColumn": 47,
              "endLine": 116,
              "endColumn": 60,
              "uri": "kylin-kylin-5.0.0/src/common-service/src/main/java/org/apache/kylin/rest/KylinPrepareEnvListener.java",
              "type": "File",
              "code": "        File localMetadata = new File(tempMetadataDir);\n\n        // pass checkHadoopHome\n        Unsafe.setProperty(\"hadoop.home.dir\", localMetadata.getAbsolutePath() + \"/working-dir\");\n        Unsafe.setProperty(\"spark.local\", \"true\");\n\n        // enable push down"
            },
            {
              "step": 3,
              "variableName": "localMetadata.getAbsolutePath()",
              "startLine": 116,
              "startColumn": 47,
              "endLine": 116,
              "endColumn": 78,
              "uri": "kylin-kylin-5.0.0/src/common-service/src/main/java/org/apache/kylin/rest/KylinPrepareEnvListener.java",
              "type": "String",
              "code": "        File localMetadata = new File(tempMetadataDir);\n\n        // pass checkHadoopHome\n        Unsafe.setProperty(\"hadoop.home.dir\", localMetadata.getAbsolutePath() + \"/working-dir\");\n        Unsafe.setProperty(\"spark.local\", \"true\");\n\n        // enable push down"
            },
            {
              "step": 4,
              "variableName": "localMetadata.getAbsolutePath() + \"/working-dir\"",
              "startLine": 116,
              "startColumn": 47,
              "endLine": 116,
              "endColumn": 95,
              "uri": "kylin-kylin-5.0.0/src/common-service/src/main/java/org/apache/kylin/rest/KylinPrepareEnvListener.java",
              "type": "String",
              "code": "        File localMetadata = new File(tempMetadataDir);\n\n        // pass checkHadoopHome\n        Unsafe.setProperty(\"hadoop.home.dir\", localMetadata.getAbsolutePath() + \"/working-dir\");\n        Unsafe.setProperty(\"spark.local\", \"true\");\n\n        // enable push down"
            },
            {
              "step": 5,
              "variableName": "String value",
              "startLine": 81,
              "startColumn": 55,
              "endLine": 81,
              "endColumn": 67,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/util/Unsafe.java",
              "type": "String",
              "code": "    }\n\n    /** Set system property */\n    public static String setProperty(String property, String value) {\n        return SystemPropertiesCache.setProperty(property, value);\n    }\n"
            },
            {
              "step": 6,
              "variableName": "value",
              "startLine": 82,
              "startColumn": 60,
              "endLine": 82,
              "endColumn": 65,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/util/Unsafe.java",
              "type": "String",
              "code": "\n    /** Set system property */\n    public static String setProperty(String property, String value) {\n        return SystemPropertiesCache.setProperty(property, value);\n    }\n\n    /** Clear system property */"
            },
            {
              "step": 7,
              "variableName": "String value",
              "startLine": 50,
              "startColumn": 50,
              "endLine": 50,
              "endColumn": 62,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/SystemPropertiesCache.java",
              "type": "String",
              "code": "    }\n\n    // Mainly invoked in tests\n    public static String setProperty(String key, String value) {\n        System.setProperty(key, value);\n        return (String) CACHED_SYSTEM_PROPERTY.put(key, value);\n    }"
            },
            {
              "step": 8,
              "variableName": "value",
              "startLine": 52,
              "startColumn": 57,
              "endLine": 52,
              "endColumn": 62,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/SystemPropertiesCache.java",
              "type": "String",
              "code": "    // Mainly invoked in tests\n    public static String setProperty(String key, String value) {\n        System.setProperty(key, value);\n        return (String) CACHED_SYSTEM_PROPERTY.put(key, value);\n    }\n\n    // Mainly invoked in tests"
            },
            {
              "step": 9,
              "variableName": "CACHED_SYSTEM_PROPERTY",
              "startLine": 52,
              "startColumn": 25,
              "endLine": 52,
              "endColumn": 47,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/SystemPropertiesCache.java",
              "type": "ConcurrentHashMap [<map.value>] : String",
              "code": "    // Mainly invoked in tests\n    public static String setProperty(String key, String value) {\n        System.setProperty(key, value);\n        return (String) CACHED_SYSTEM_PROPERTY.put(key, value);\n    }\n\n    // Mainly invoked in tests"
            },
            {
              "step": 10,
              "variableName": "CACHED_SYSTEM_PROPERTY",
              "startLine": 31,
              "startColumn": 60,
              "endLine": 31,
              "endColumn": 82,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/SystemPropertiesCache.java",
              "type": "ConcurrentHashMap [<map.value>] : String",
              "code": " */\npublic class SystemPropertiesCache {\n\n    private static final ConcurrentHashMap<Object, Object> CACHED_SYSTEM_PROPERTY = new ConcurrentHashMap<>(\n            System.getProperties());\n\n    protected static Map<Object, Object> getProperties() {"
            },
            {
              "step": 11,
              "variableName": "CACHED_SYSTEM_PROPERTY",
              "startLine": 40,
              "startColumn": 23,
              "endLine": 40,
              "endColumn": 45,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/SystemPropertiesCache.java",
              "type": "ConcurrentHashMap [<map.value>] : String",
              "code": "\n    protected static String getProperty(String key) {\n        checkKey(key);\n        Object oval = CACHED_SYSTEM_PROPERTY.get(key);\n        return (oval instanceof String) ? (String) oval : null;\n    }\n"
            },
            {
              "step": 12,
              "variableName": "CACHED_SYSTEM_PROPERTY.get(key)",
              "startLine": 40,
              "startColumn": 23,
              "endLine": 40,
              "endColumn": 54,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/SystemPropertiesCache.java",
              "type": "String",
              "code": "\n    protected static String getProperty(String key) {\n        checkKey(key);\n        Object oval = CACHED_SYSTEM_PROPERTY.get(key);\n        return (oval instanceof String) ? (String) oval : null;\n    }\n"
            },
            {
              "step": 13,
              "variableName": "(String) oval",
              "startLine": 41,
              "startColumn": 43,
              "endLine": 41,
              "endColumn": 56,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/SystemPropertiesCache.java",
              "type": "String",
              "code": "    protected static String getProperty(String key) {\n        checkKey(key);\n        Object oval = CACHED_SYSTEM_PROPERTY.get(key);\n        return (oval instanceof String) ? (String) oval : null;\n    }\n\n    protected static String getProperty(String key, String defaultValue) {"
            },
            {
              "step": 14,
              "variableName": "(oval instanceof String) ? (String) oval : null",
              "startLine": 41,
              "startColumn": 16,
              "endLine": 41,
              "endColumn": 63,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/SystemPropertiesCache.java",
              "type": "... : String",
              "code": "    protected static String getProperty(String key) {\n        checkKey(key);\n        Object oval = CACHED_SYSTEM_PROPERTY.get(key);\n        return (oval instanceof String) ? (String) oval : null;\n    }\n\n    protected static String getProperty(String key, String defaultValue) {"
            },
            {
              "step": 15,
              "variableName": "SystemPropertiesCache.getProperty(prop)",
              "startLine": 224,
              "startColumn": 33,
              "endLine": 224,
              "endColumn": 72,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java",
              "type": "String",
              "code": "    }\n\n    protected String getOptional(String prop, String dft) {\n        final String property = SystemPropertiesCache.getProperty(prop);\n        return property != null ? getSubstitutor().replace(property)\n                : getSubstitutor().replace(properties.getProperty(prop, dft));\n    }"
            },
            {
              "step": 16,
              "variableName": "property",
              "startLine": 225,
              "startColumn": 60,
              "endLine": 225,
              "endColumn": 68,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java",
              "type": "String",
              "code": "\n    protected String getOptional(String prop, String dft) {\n        final String property = SystemPropertiesCache.getProperty(prop);\n        return property != null ? getSubstitutor().replace(property)\n                : getSubstitutor().replace(properties.getProperty(prop, dft));\n    }\n"
            },
            {
              "step": 17,
              "variableName": "getSubstitutor().replace(property)",
              "startLine": 225,
              "startColumn": 35,
              "endLine": 225,
              "endColumn": 69,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java",
              "type": "String",
              "code": "\n    protected String getOptional(String prop, String dft) {\n        final String property = SystemPropertiesCache.getProperty(prop);\n        return property != null ? getSubstitutor().replace(property)\n                : getSubstitutor().replace(properties.getProperty(prop, dft));\n    }\n"
            },
            {
              "step": 18,
              "variableName": "property != null ? getSubstitutor().replace(property)",
              "startLine": 225,
              "startColumn": 16,
              "endLine": 226,
              "endColumn": 78,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java",
              "type": "... : String",
              "code": "\n    protected String getOptional(String prop, String dft) {\n        final String property = SystemPropertiesCache.getProperty(prop);\n        return property != null ? getSubstitutor().replace(property)\n                : getSubstitutor().replace(properties.getProperty(prop, dft));\n    }\n"
            },
            {
              "step": 19,
              "variableName": "getOptional(prop, null)",
              "startLine": 220,
              "startColumn": 16,
              "endLine": 220,
              "endColumn": 39,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java",
              "type": "String",
              "code": "    }\n\n    protected final String getOptional(String prop) {\n        return getOptional(prop, null);\n    }\n\n    protected String getOptional(String prop, String dft) {"
            },
            {
              "step": 20,
              "variableName": "getOptional(\"kylin.env.ip-address\")",
              "startLine": 687,
              "startColumn": 16,
              "endLine": 687,
              "endColumn": 51,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java",
              "type": "String",
              "code": "\n    public String getServerIpAddress() {\n        // format: ip\n        return getOptional(\"kylin.env.ip-address\");\n    }\n\n    public String getTransactionLockManager() {"
            },
            {
              "step": 21,
              "variableName": "KylinConfig.getInstanceFromEnv().getServerIpAddress()",
              "startLine": 93,
              "startColumn": 34,
              "endLine": 93,
              "endColumn": 87,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/util/AddressUtil.java",
              "type": "String",
              "code": "\n    public static String getLocalHostExactAddress() {\n        if (StringUtils.isEmpty(localIpAddressCache)) {\n            val localIpAddress = KylinConfig.getInstanceFromEnv().getServerIpAddress();\n            if (StringUtils.isNotBlank(localIpAddress)) {\n                localIpAddressCache = localIpAddress;\n            } else {"
            },
            {
              "step": 22,
              "variableName": "localIpAddressCache",
              "startLine": 102,
              "startColumn": 16,
              "endLine": 102,
              "endColumn": 35,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/util/AddressUtil.java",
              "type": "String",
              "code": "                }\n            }\n        }\n        return localIpAddressCache;\n    }\n\n    public static boolean isSameHost(String driverHost) {"
            },
            {
              "step": 23,
              "variableName": "AddressUtil.getLocalHostExactAddress()",
              "startLine": 767,
              "startColumn": 16,
              "endLine": 767,
              "endColumn": 54,
              "uri": "kylin-kylin-5.0.0/src/query-service/src/main/java/org/apache/kylin/rest/service/QueryService.java",
              "type": "String",
              "code": "    }\n\n    private String getDefaultServer() {\n        return AddressUtil.getLocalHostExactAddress() + \":\" + appConfig.getPort();\n    }\n\n    @VisibleForTesting"
            },
            {
              "step": 24,
              "variableName": "AddressUtil.getLocalHostExactAddress() + \":\" + appConfig.getPort()",
              "startLine": 767,
              "startColumn": 16,
              "endLine": 767,
              "endColumn": 82,
              "uri": "kylin-kylin-5.0.0/src/query-service/src/main/java/org/apache/kylin/rest/service/QueryService.java",
              "type": "String",
              "code": "    }\n\n    private String getDefaultServer() {\n        return AddressUtil.getLocalHostExactAddress() + \":\" + appConfig.getPort();\n    }\n\n    @VisibleForTesting"
            },
            {
              "step": 25,
              "variableName": "getDefaultServer()",
              "startLine": 562,
              "startColumn": 62,
              "endLine": 562,
              "endColumn": 80,
              "uri": "kylin-kylin-5.0.0/src/query-service/src/main/java/org/apache/kylin/rest/service/QueryService.java",
              "type": "",
              "code": "        }\n\n        QueryContext queryContext = QueryContext.current();\n        QueryMetricsContext.start(queryContext.getQueryId(), getDefaultServer());\n\n        final String project = sqlRequest.getProject();\n        SQLResponse sqlResponse = null;"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "tempMetadataDir",
              "startLine": 112,
              "startColumn": 48,
              "endLine": 112,
              "endColumn": 63,
              "uri": "kylin-kylin-5.0.0/src/common-service/src/main/java/org/apache/kylin/rest/KylinPrepareEnvListener.java",
              "type": "String",
              "code": "\n    private static void setLocalEnvs() {\n        String tempMetadataDir = TempMetadataBuilder.prepareLocalTempMetadata();\n        KylinConfig.setKylinConfigForLocalTest(tempMetadataDir);\n        File localMetadata = new File(tempMetadataDir);\n\n        // pass checkHadoopHome"
            },
            {
              "step": 1,
              "variableName": "String localMetaDir",
              "startLine": 159,
              "startColumn": 51,
              "endLine": 159,
              "endColumn": 70,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/KylinConfig.java",
              "type": "String",
              "code": "    }\n\n    // Only used in test cases!!!\n    public static void setKylinConfigForLocalTest(String localMetaDir) {\n        synchronized (KylinConfig.class) {\n            if (!new File(localMetaDir, \"kylin.properties\").exists()) {\n                throw new IllegalArgumentException(localMetaDir + \" is not a valid local meta dir\");"
            },
            {
              "step": 2,
              "variableName": "localMetaDir",
              "startLine": 167,
              "startColumn": 56,
              "endLine": 167,
              "endColumn": 68,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/KylinConfig.java",
              "type": "String",
              "code": "\n            destroyInstance();\n            logger.info(\"Setting KylinConfig to \" + localMetaDir);\n            Unsafe.setProperty(KylinConfig.KYLIN_CONF, localMetaDir);\n\n            KylinConfig config = KylinConfig.getInstanceFromEnv();\n            config.setMetadataUrl(localMetaDir + \"/metadata\");"
            },
            {
              "step": 3,
              "variableName": "String value",
              "startLine": 81,
              "startColumn": 55,
              "endLine": 81,
              "endColumn": 67,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/util/Unsafe.java",
              "type": "String",
              "code": "    }\n\n    /** Set system property */\n    public static String setProperty(String property, String value) {\n        return SystemPropertiesCache.setProperty(property, value);\n    }\n"
            },
            {
              "step": 4,
              "variableName": "value",
              "startLine": 82,
              "startColumn": 60,
              "endLine": 82,
              "endColumn": 65,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/util/Unsafe.java",
              "type": "String",
              "code": "\n    /** Set system property */\n    public static String setProperty(String property, String value) {\n        return SystemPropertiesCache.setProperty(property, value);\n    }\n\n    /** Clear system property */"
            },
            {
              "step": 5,
              "variableName": "String value",
              "startLine": 50,
              "startColumn": 50,
              "endLine": 50,
              "endColumn": 62,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/SystemPropertiesCache.java",
              "type": "String",
              "code": "    }\n\n    // Mainly invoked in tests\n    public static String setProperty(String key, String value) {\n        System.setProperty(key, value);\n        return (String) CACHED_SYSTEM_PROPERTY.put(key, value);\n    }"
            },
            {
              "step": 6,
              "variableName": "value",
              "startLine": 52,
              "startColumn": 57,
              "endLine": 52,
              "endColumn": 62,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/SystemPropertiesCache.java",
              "type": "String",
              "code": "    // Mainly invoked in tests\n    public static String setProperty(String key, String value) {\n        System.setProperty(key, value);\n        return (String) CACHED_SYSTEM_PROPERTY.put(key, value);\n    }\n\n    // Mainly invoked in tests"
            },
            {
              "step": 7,
              "variableName": "CACHED_SYSTEM_PROPERTY",
              "startLine": 52,
              "startColumn": 25,
              "endLine": 52,
              "endColumn": 47,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/SystemPropertiesCache.java",
              "type": "ConcurrentHashMap [<map.value>] : String",
              "code": "    // Mainly invoked in tests\n    public static String setProperty(String key, String value) {\n        System.setProperty(key, value);\n        return (String) CACHED_SYSTEM_PROPERTY.put(key, value);\n    }\n\n    // Mainly invoked in tests"
            },
            {
              "step": 8,
              "variableName": "CACHED_SYSTEM_PROPERTY",
              "startLine": 31,
              "startColumn": 60,
              "endLine": 31,
              "endColumn": 82,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/SystemPropertiesCache.java",
              "type": "ConcurrentHashMap [<map.value>] : String",
              "code": " */\npublic class SystemPropertiesCache {\n\n    private static final ConcurrentHashMap<Object, Object> CACHED_SYSTEM_PROPERTY = new ConcurrentHashMap<>(\n            System.getProperties());\n\n    protected static Map<Object, Object> getProperties() {"
            },
            {
              "step": 9,
              "variableName": "CACHED_SYSTEM_PROPERTY",
              "startLine": 40,
              "startColumn": 23,
              "endLine": 40,
              "endColumn": 45,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/SystemPropertiesCache.java",
              "type": "ConcurrentHashMap [<map.value>] : String",
              "code": "\n    protected static String getProperty(String key) {\n        checkKey(key);\n        Object oval = CACHED_SYSTEM_PROPERTY.get(key);\n        return (oval instanceof String) ? (String) oval : null;\n    }\n"
            },
            {
              "step": 10,
              "variableName": "CACHED_SYSTEM_PROPERTY.get(key)",
              "startLine": 40,
              "startColumn": 23,
              "endLine": 40,
              "endColumn": 54,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/SystemPropertiesCache.java",
              "type": "String",
              "code": "\n    protected static String getProperty(String key) {\n        checkKey(key);\n        Object oval = CACHED_SYSTEM_PROPERTY.get(key);\n        return (oval instanceof String) ? (String) oval : null;\n    }\n"
            },
            {
              "step": 11,
              "variableName": "(String) oval",
              "startLine": 41,
              "startColumn": 43,
              "endLine": 41,
              "endColumn": 56,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/SystemPropertiesCache.java",
              "type": "String",
              "code": "    protected static String getProperty(String key) {\n        checkKey(key);\n        Object oval = CACHED_SYSTEM_PROPERTY.get(key);\n        return (oval instanceof String) ? (String) oval : null;\n    }\n\n    protected static String getProperty(String key, String defaultValue) {"
            },
            {
              "step": 12,
              "variableName": "(oval instanceof String) ? (String) oval : null",
              "startLine": 41,
              "startColumn": 16,
              "endLine": 41,
              "endColumn": 63,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/SystemPropertiesCache.java",
              "type": "... : String",
              "code": "    protected static String getProperty(String key) {\n        checkKey(key);\n        Object oval = CACHED_SYSTEM_PROPERTY.get(key);\n        return (oval instanceof String) ? (String) oval : null;\n    }\n\n    protected static String getProperty(String key, String defaultValue) {"
            },
            {
              "step": 13,
              "variableName": "SystemPropertiesCache.getProperty(prop)",
              "startLine": 224,
              "startColumn": 33,
              "endLine": 224,
              "endColumn": 72,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java",
              "type": "String",
              "code": "    }\n\n    protected String getOptional(String prop, String dft) {\n        final String property = SystemPropertiesCache.getProperty(prop);\n        return property != null ? getSubstitutor().replace(property)\n                : getSubstitutor().replace(properties.getProperty(prop, dft));\n    }"
            },
            {
              "step": 14,
              "variableName": "property",
              "startLine": 225,
              "startColumn": 60,
              "endLine": 225,
              "endColumn": 68,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java",
              "type": "String",
              "code": "\n    protected String getOptional(String prop, String dft) {\n        final String property = SystemPropertiesCache.getProperty(prop);\n        return property != null ? getSubstitutor().replace(property)\n                : getSubstitutor().replace(properties.getProperty(prop, dft));\n    }\n"
            },
            {
              "step": 15,
              "variableName": "getSubstitutor().replace(property)",
              "startLine": 225,
              "startColumn": 35,
              "endLine": 225,
              "endColumn": 69,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java",
              "type": "String",
              "code": "\n    protected String getOptional(String prop, String dft) {\n        final String property = SystemPropertiesCache.getProperty(prop);\n        return property != null ? getSubstitutor().replace(property)\n                : getSubstitutor().replace(properties.getProperty(prop, dft));\n    }\n"
            },
            {
              "step": 16,
              "variableName": "property != null ? getSubstitutor().replace(property)",
              "startLine": 225,
              "startColumn": 16,
              "endLine": 226,
              "endColumn": 78,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java",
              "type": "... : String",
              "code": "\n    protected String getOptional(String prop, String dft) {\n        final String property = SystemPropertiesCache.getProperty(prop);\n        return property != null ? getSubstitutor().replace(property)\n                : getSubstitutor().replace(properties.getProperty(prop, dft));\n    }\n"
            },
            {
              "step": 17,
              "variableName": "getOptional(prop, null)",
              "startLine": 220,
              "startColumn": 16,
              "endLine": 220,
              "endColumn": 39,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java",
              "type": "String",
              "code": "    }\n\n    protected final String getOptional(String prop) {\n        return getOptional(prop, null);\n    }\n\n    protected String getOptional(String prop, String dft) {"
            },
            {
              "step": 18,
              "variableName": "getOptional(\"kylin.env.ip-address\")",
              "startLine": 687,
              "startColumn": 16,
              "endLine": 687,
              "endColumn": 51,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java",
              "type": "String",
              "code": "\n    public String getServerIpAddress() {\n        // format: ip\n        return getOptional(\"kylin.env.ip-address\");\n    }\n\n    public String getTransactionLockManager() {"
            },
            {
              "step": 19,
              "variableName": "KylinConfig.getInstanceFromEnv().getServerIpAddress()",
              "startLine": 93,
              "startColumn": 34,
              "endLine": 93,
              "endColumn": 87,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/util/AddressUtil.java",
              "type": "String",
              "code": "\n    public static String getLocalHostExactAddress() {\n        if (StringUtils.isEmpty(localIpAddressCache)) {\n            val localIpAddress = KylinConfig.getInstanceFromEnv().getServerIpAddress();\n            if (StringUtils.isNotBlank(localIpAddress)) {\n                localIpAddressCache = localIpAddress;\n            } else {"
            },
            {
              "step": 20,
              "variableName": "localIpAddressCache",
              "startLine": 102,
              "startColumn": 16,
              "endLine": 102,
              "endColumn": 35,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/util/AddressUtil.java",
              "type": "String",
              "code": "                }\n            }\n        }\n        return localIpAddressCache;\n    }\n\n    public static boolean isSameHost(String driverHost) {"
            },
            {
              "step": 21,
              "variableName": "AddressUtil.getLocalHostExactAddress()",
              "startLine": 767,
              "startColumn": 16,
              "endLine": 767,
              "endColumn": 54,
              "uri": "kylin-kylin-5.0.0/src/query-service/src/main/java/org/apache/kylin/rest/service/QueryService.java",
              "type": "String",
              "code": "    }\n\n    private String getDefaultServer() {\n        return AddressUtil.getLocalHostExactAddress() + \":\" + appConfig.getPort();\n    }\n\n    @VisibleForTesting"
            },
            {
              "step": 22,
              "variableName": "AddressUtil.getLocalHostExactAddress() + \":\" + appConfig.getPort()",
              "startLine": 767,
              "startColumn": 16,
              "endLine": 767,
              "endColumn": 82,
              "uri": "kylin-kylin-5.0.0/src/query-service/src/main/java/org/apache/kylin/rest/service/QueryService.java",
              "type": "String",
              "code": "    }\n\n    private String getDefaultServer() {\n        return AddressUtil.getLocalHostExactAddress() + \":\" + appConfig.getPort();\n    }\n\n    @VisibleForTesting"
            },
            {
              "step": 23,
              "variableName": "getDefaultServer()",
              "startLine": 562,
              "startColumn": 62,
              "endLine": 562,
              "endColumn": 80,
              "uri": "kylin-kylin-5.0.0/src/query-service/src/main/java/org/apache/kylin/rest/service/QueryService.java",
              "type": "",
              "code": "        }\n\n        QueryContext queryContext = QueryContext.current();\n        QueryMetricsContext.start(queryContext.getQueryId(), getDefaultServer());\n\n        final String project = sqlRequest.getProject();\n        SQLResponse sqlResponse = null;"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "kv",
              "startLine": 154,
              "startColumn": 36,
              "endLine": 154,
              "endColumn": 38,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/StorageURL.java",
              "type": "Entry",
              "code": "            str.append(\"@\").append(scheme);\n        }\n        for (Entry<String, String> kv : params.entrySet()) {\n            str.append(\",\").append(kv.getKey());\n            if (!kv.getValue().isEmpty()) {\n                String value = kv.getValue();\n                if (value.contains(\",\")) {"
            },
            {
              "step": 1,
              "variableName": "kv.getKey()",
              "startLine": 154,
              "startColumn": 36,
              "endLine": 154,
              "endColumn": 47,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/StorageURL.java",
              "type": "String",
              "code": "            str.append(\"@\").append(scheme);\n        }\n        for (Entry<String, String> kv : params.entrySet()) {\n            str.append(\",\").append(kv.getKey());\n            if (!kv.getValue().isEmpty()) {\n                String value = kv.getValue();\n                if (value.contains(\",\")) {"
            },
            {
              "step": 2,
              "variableName": "str.append(\",\")",
              "startLine": 154,
              "startColumn": 13,
              "endLine": 154,
              "endColumn": 28,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/StorageURL.java",
              "type": "StringBuilder",
              "code": "            str.append(\"@\").append(scheme);\n        }\n        for (Entry<String, String> kv : params.entrySet()) {\n            str.append(\",\").append(kv.getKey());\n            if (!kv.getValue().isEmpty()) {\n                String value = kv.getValue();\n                if (value.contains(\",\")) {"
            },
            {
              "step": 3,
              "variableName": "str",
              "startLine": 163,
              "startColumn": 16,
              "endLine": 163,
              "endColumn": 19,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/StorageURL.java",
              "type": "StringBuilder",
              "code": "                str.append(\"=\").append(value);\n            }\n        }\n        return str.toString();\n    }\n\n    @Override"
            },
            {
              "step": 4,
              "variableName": "str.toString()",
              "startLine": 163,
              "startColumn": 16,
              "endLine": 163,
              "endColumn": 30,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/StorageURL.java",
              "type": "String",
              "code": "                str.append(\"=\").append(value);\n            }\n        }\n        return str.toString();\n    }\n\n    @Override"
            },
            {
              "step": 5,
              "variableName": "getTestConfig().getMetadataUrl().toString()",
              "startLine": 102,
              "startColumn": 42,
              "endLine": 102,
              "endColumn": 85,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/test/java/org/apache/kylin/junit/MetadataExtension.java",
              "type": "String",
              "code": "            }\n            cleanSingletonInstances();\n\n            val kylinHomePath = new File(getTestConfig().getMetadataUrl().toString()).getParentFile().getAbsolutePath();\n            SystemPropertiesCache.setProperty(\"KYLIN_HOME\", kylinHomePath);\n            val jobJar = org.apache.kylin.common.util.FileUtils.findFile(\n                    new File(kylinHomePath, \"../../../assembly/target/\").getAbsolutePath(), \"kylin-assembly(.?)\\\\.jar\");"
            },
            {
              "step": 6,
              "variableName": "new File(getTestConfig().getMetadataUrl().toString())",
              "startLine": 102,
              "startColumn": 33,
              "endLine": 102,
              "endColumn": 86,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/test/java/org/apache/kylin/junit/MetadataExtension.java",
              "type": "File",
              "code": "            }\n            cleanSingletonInstances();\n\n            val kylinHomePath = new File(getTestConfig().getMetadataUrl().toString()).getParentFile().getAbsolutePath();\n            SystemPropertiesCache.setProperty(\"KYLIN_HOME\", kylinHomePath);\n            val jobJar = org.apache.kylin.common.util.FileUtils.findFile(\n                    new File(kylinHomePath, \"../../../assembly/target/\").getAbsolutePath(), \"kylin-assembly(.?)\\\\.jar\");"
            },
            {
              "step": 7,
              "variableName": "new File(getTestConfig().getMetadataUrl().toString()).getParentFile()",
              "startLine": 102,
              "startColumn": 33,
              "endLine": 102,
              "endColumn": 102,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/test/java/org/apache/kylin/junit/MetadataExtension.java",
              "type": "File",
              "code": "            }\n            cleanSingletonInstances();\n\n            val kylinHomePath = new File(getTestConfig().getMetadataUrl().toString()).getParentFile().getAbsolutePath();\n            SystemPropertiesCache.setProperty(\"KYLIN_HOME\", kylinHomePath);\n            val jobJar = org.apache.kylin.common.util.FileUtils.findFile(\n                    new File(kylinHomePath, \"../../../assembly/target/\").getAbsolutePath(), \"kylin-assembly(.?)\\\\.jar\");"
            },
            {
              "step": 8,
              "variableName": "new File(getTestConfig().getMetadataUrl().toString()).getParentFile().getAbsolutePath()",
              "startLine": 102,
              "startColumn": 33,
              "endLine": 102,
              "endColumn": 120,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/test/java/org/apache/kylin/junit/MetadataExtension.java",
              "type": "String",
              "code": "            }\n            cleanSingletonInstances();\n\n            val kylinHomePath = new File(getTestConfig().getMetadataUrl().toString()).getParentFile().getAbsolutePath();\n            SystemPropertiesCache.setProperty(\"KYLIN_HOME\", kylinHomePath);\n            val jobJar = org.apache.kylin.common.util.FileUtils.findFile(\n                    new File(kylinHomePath, \"../../../assembly/target/\").getAbsolutePath(), \"kylin-assembly(.?)\\\\.jar\");"
            },
            {
              "step": 9,
              "variableName": "kylinHomePath",
              "startLine": 103,
              "startColumn": 61,
              "endLine": 103,
              "endColumn": 74,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/test/java/org/apache/kylin/junit/MetadataExtension.java",
              "type": "String",
              "code": "            cleanSingletonInstances();\n\n            val kylinHomePath = new File(getTestConfig().getMetadataUrl().toString()).getParentFile().getAbsolutePath();\n            SystemPropertiesCache.setProperty(\"KYLIN_HOME\", kylinHomePath);\n            val jobJar = org.apache.kylin.common.util.FileUtils.findFile(\n                    new File(kylinHomePath, \"../../../assembly/target/\").getAbsolutePath(), \"kylin-assembly(.?)\\\\.jar\");\n            KylinConfig testConfig = getTestConfig();"
            },
            {
              "step": 10,
              "variableName": "String value",
              "startLine": 50,
              "startColumn": 50,
              "endLine": 50,
              "endColumn": 62,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/SystemPropertiesCache.java",
              "type": "String",
              "code": "    }\n\n    // Mainly invoked in tests\n    public static String setProperty(String key, String value) {\n        System.setProperty(key, value);\n        return (String) CACHED_SYSTEM_PROPERTY.put(key, value);\n    }"
            },
            {
              "step": 11,
              "variableName": "value",
              "startLine": 52,
              "startColumn": 57,
              "endLine": 52,
              "endColumn": 62,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/SystemPropertiesCache.java",
              "type": "String",
              "code": "    // Mainly invoked in tests\n    public static String setProperty(String key, String value) {\n        System.setProperty(key, value);\n        return (String) CACHED_SYSTEM_PROPERTY.put(key, value);\n    }\n\n    // Mainly invoked in tests"
            },
            {
              "step": 12,
              "variableName": "CACHED_SYSTEM_PROPERTY",
              "startLine": 52,
              "startColumn": 25,
              "endLine": 52,
              "endColumn": 47,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/SystemPropertiesCache.java",
              "type": "ConcurrentHashMap [<map.value>] : String",
              "code": "    // Mainly invoked in tests\n    public static String setProperty(String key, String value) {\n        System.setProperty(key, value);\n        return (String) CACHED_SYSTEM_PROPERTY.put(key, value);\n    }\n\n    // Mainly invoked in tests"
            },
            {
              "step": 13,
              "variableName": "CACHED_SYSTEM_PROPERTY",
              "startLine": 31,
              "startColumn": 60,
              "endLine": 31,
              "endColumn": 82,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/SystemPropertiesCache.java",
              "type": "ConcurrentHashMap [<map.value>] : String",
              "code": " */\npublic class SystemPropertiesCache {\n\n    private static final ConcurrentHashMap<Object, Object> CACHED_SYSTEM_PROPERTY = new ConcurrentHashMap<>(\n            System.getProperties());\n\n    protected static Map<Object, Object> getProperties() {"
            },
            {
              "step": 14,
              "variableName": "CACHED_SYSTEM_PROPERTY",
              "startLine": 40,
              "startColumn": 23,
              "endLine": 40,
              "endColumn": 45,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/SystemPropertiesCache.java",
              "type": "ConcurrentHashMap [<map.value>] : String",
              "code": "\n    protected static String getProperty(String key) {\n        checkKey(key);\n        Object oval = CACHED_SYSTEM_PROPERTY.get(key);\n        return (oval instanceof String) ? (String) oval : null;\n    }\n"
            },
            {
              "step": 15,
              "variableName": "CACHED_SYSTEM_PROPERTY.get(key)",
              "startLine": 40,
              "startColumn": 23,
              "endLine": 40,
              "endColumn": 54,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/SystemPropertiesCache.java",
              "type": "String",
              "code": "\n    protected static String getProperty(String key) {\n        checkKey(key);\n        Object oval = CACHED_SYSTEM_PROPERTY.get(key);\n        return (oval instanceof String) ? (String) oval : null;\n    }\n"
            },
            {
              "step": 16,
              "variableName": "(String) oval",
              "startLine": 41,
              "startColumn": 43,
              "endLine": 41,
              "endColumn": 56,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/SystemPropertiesCache.java",
              "type": "String",
              "code": "    protected static String getProperty(String key) {\n        checkKey(key);\n        Object oval = CACHED_SYSTEM_PROPERTY.get(key);\n        return (oval instanceof String) ? (String) oval : null;\n    }\n\n    protected static String getProperty(String key, String defaultValue) {"
            },
            {
              "step": 17,
              "variableName": "(oval instanceof String) ? (String) oval : null",
              "startLine": 41,
              "startColumn": 16,
              "endLine": 41,
              "endColumn": 63,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/SystemPropertiesCache.java",
              "type": "... : String",
              "code": "    protected static String getProperty(String key) {\n        checkKey(key);\n        Object oval = CACHED_SYSTEM_PROPERTY.get(key);\n        return (oval instanceof String) ? (String) oval : null;\n    }\n\n    protected static String getProperty(String key, String defaultValue) {"
            },
            {
              "step": 18,
              "variableName": "SystemPropertiesCache.getProperty(prop)",
              "startLine": 224,
              "startColumn": 33,
              "endLine": 224,
              "endColumn": 72,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java",
              "type": "String",
              "code": "    }\n\n    protected String getOptional(String prop, String dft) {\n        final String property = SystemPropertiesCache.getProperty(prop);\n        return property != null ? getSubstitutor().replace(property)\n                : getSubstitutor().replace(properties.getProperty(prop, dft));\n    }"
            },
            {
              "step": 19,
              "variableName": "property",
              "startLine": 225,
              "startColumn": 60,
              "endLine": 225,
              "endColumn": 68,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java",
              "type": "String",
              "code": "\n    protected String getOptional(String prop, String dft) {\n        final String property = SystemPropertiesCache.getProperty(prop);\n        return property != null ? getSubstitutor().replace(property)\n                : getSubstitutor().replace(properties.getProperty(prop, dft));\n    }\n"
            },
            {
              "step": 20,
              "variableName": "getSubstitutor().replace(property)",
              "startLine": 225,
              "startColumn": 35,
              "endLine": 225,
              "endColumn": 69,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java",
              "type": "String",
              "code": "\n    protected String getOptional(String prop, String dft) {\n        final String property = SystemPropertiesCache.getProperty(prop);\n        return property != null ? getSubstitutor().replace(property)\n                : getSubstitutor().replace(properties.getProperty(prop, dft));\n    }\n"
            },
            {
              "step": 21,
              "variableName": "property != null ? getSubstitutor().replace(property)",
              "startLine": 225,
              "startColumn": 16,
              "endLine": 226,
              "endColumn": 78,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java",
              "type": "... : String",
              "code": "\n    protected String getOptional(String prop, String dft) {\n        final String property = SystemPropertiesCache.getProperty(prop);\n        return property != null ? getSubstitutor().replace(property)\n                : getSubstitutor().replace(properties.getProperty(prop, dft));\n    }\n"
            },
            {
              "step": 22,
              "variableName": "getOptional(prop, null)",
              "startLine": 220,
              "startColumn": 16,
              "endLine": 220,
              "endColumn": 39,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java",
              "type": "String",
              "code": "    }\n\n    protected final String getOptional(String prop) {\n        return getOptional(prop, null);\n    }\n\n    protected String getOptional(String prop, String dft) {"
            },
            {
              "step": 23,
              "variableName": "getOptional(\"kylin.env.ip-address\")",
              "startLine": 687,
              "startColumn": 16,
              "endLine": 687,
              "endColumn": 51,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java",
              "type": "String",
              "code": "\n    public String getServerIpAddress() {\n        // format: ip\n        return getOptional(\"kylin.env.ip-address\");\n    }\n\n    public String getTransactionLockManager() {"
            },
            {
              "step": 24,
              "variableName": "KylinConfig.getInstanceFromEnv().getServerIpAddress()",
              "startLine": 93,
              "startColumn": 34,
              "endLine": 93,
              "endColumn": 87,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/util/AddressUtil.java",
              "type": "String",
              "code": "\n    public static String getLocalHostExactAddress() {\n        if (StringUtils.isEmpty(localIpAddressCache)) {\n            val localIpAddress = KylinConfig.getInstanceFromEnv().getServerIpAddress();\n            if (StringUtils.isNotBlank(localIpAddress)) {\n                localIpAddressCache = localIpAddress;\n            } else {"
            },
            {
              "step": 25,
              "variableName": "localIpAddressCache",
              "startLine": 102,
              "startColumn": 16,
              "endLine": 102,
              "endColumn": 35,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/util/AddressUtil.java",
              "type": "String",
              "code": "                }\n            }\n        }\n        return localIpAddressCache;\n    }\n\n    public static boolean isSameHost(String driverHost) {"
            },
            {
              "step": 26,
              "variableName": "AddressUtil.getLocalHostExactAddress()",
              "startLine": 767,
              "startColumn": 16,
              "endLine": 767,
              "endColumn": 54,
              "uri": "kylin-kylin-5.0.0/src/query-service/src/main/java/org/apache/kylin/rest/service/QueryService.java",
              "type": "String",
              "code": "    }\n\n    private String getDefaultServer() {\n        return AddressUtil.getLocalHostExactAddress() + \":\" + appConfig.getPort();\n    }\n\n    @VisibleForTesting"
            },
            {
              "step": 27,
              "variableName": "AddressUtil.getLocalHostExactAddress() + \":\" + appConfig.getPort()",
              "startLine": 767,
              "startColumn": 16,
              "endLine": 767,
              "endColumn": 82,
              "uri": "kylin-kylin-5.0.0/src/query-service/src/main/java/org/apache/kylin/rest/service/QueryService.java",
              "type": "String",
              "code": "    }\n\n    private String getDefaultServer() {\n        return AddressUtil.getLocalHostExactAddress() + \":\" + appConfig.getPort();\n    }\n\n    @VisibleForTesting"
            },
            {
              "step": 28,
              "variableName": "getDefaultServer()",
              "startLine": 562,
              "startColumn": 62,
              "endLine": 562,
              "endColumn": 80,
              "uri": "kylin-kylin-5.0.0/src/query-service/src/main/java/org/apache/kylin/rest/service/QueryService.java",
              "type": "",
              "code": "        }\n\n        QueryContext queryContext = QueryContext.current();\n        QueryMetricsContext.start(queryContext.getQueryId(), getDefaultServer());\n\n        final String project = sqlRequest.getProject();\n        SQLResponse sqlResponse = null;"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "kv",
              "startLine": 155,
              "startColumn": 18,
              "endLine": 155,
              "endColumn": 20,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/StorageURL.java",
              "type": "Entry",
              "code": "        }\n        for (Entry<String, String> kv : params.entrySet()) {\n            str.append(\",\").append(kv.getKey());\n            if (!kv.getValue().isEmpty()) {\n                String value = kv.getValue();\n                if (value.contains(\",\")) {\n                    value = \"\\\"\" + value + \"\\\"\";"
            },
            {
              "step": 1,
              "variableName": "kv",
              "startLine": 156,
              "startColumn": 32,
              "endLine": 156,
              "endColumn": 34,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/StorageURL.java",
              "type": "Entry",
              "code": "        for (Entry<String, String> kv : params.entrySet()) {\n            str.append(\",\").append(kv.getKey());\n            if (!kv.getValue().isEmpty()) {\n                String value = kv.getValue();\n                if (value.contains(\",\")) {\n                    value = \"\\\"\" + value + \"\\\"\";\n                }"
            },
            {
              "step": 2,
              "variableName": "kv.getValue()",
              "startLine": 156,
              "startColumn": 32,
              "endLine": 156,
              "endColumn": 45,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/StorageURL.java",
              "type": "String",
              "code": "        for (Entry<String, String> kv : params.entrySet()) {\n            str.append(\",\").append(kv.getKey());\n            if (!kv.getValue().isEmpty()) {\n                String value = kv.getValue();\n                if (value.contains(\",\")) {\n                    value = \"\\\"\" + value + \"\\\"\";\n                }"
            },
            {
              "step": 3,
              "variableName": "value",
              "startLine": 160,
              "startColumn": 40,
              "endLine": 160,
              "endColumn": 45,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/StorageURL.java",
              "type": "String",
              "code": "                if (value.contains(\",\")) {\n                    value = \"\\\"\" + value + \"\\\"\";\n                }\n                str.append(\"=\").append(value);\n            }\n        }\n        return str.toString();"
            },
            {
              "step": 4,
              "variableName": "str.append(\"=\")",
              "startLine": 160,
              "startColumn": 17,
              "endLine": 160,
              "endColumn": 32,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/StorageURL.java",
              "type": "StringBuilder",
              "code": "                if (value.contains(\",\")) {\n                    value = \"\\\"\" + value + \"\\\"\";\n                }\n                str.append(\"=\").append(value);\n            }\n        }\n        return str.toString();"
            },
            {
              "step": 5,
              "variableName": "str",
              "startLine": 163,
              "startColumn": 16,
              "endLine": 163,
              "endColumn": 19,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/StorageURL.java",
              "type": "StringBuilder",
              "code": "                str.append(\"=\").append(value);\n            }\n        }\n        return str.toString();\n    }\n\n    @Override"
            },
            {
              "step": 6,
              "variableName": "str.toString()",
              "startLine": 163,
              "startColumn": 16,
              "endLine": 163,
              "endColumn": 30,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/StorageURL.java",
              "type": "String",
              "code": "                str.append(\"=\").append(value);\n            }\n        }\n        return str.toString();\n    }\n\n    @Override"
            },
            {
              "step": 7,
              "variableName": "getTestConfig().getMetadataUrl().toString()",
              "startLine": 102,
              "startColumn": 42,
              "endLine": 102,
              "endColumn": 85,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/test/java/org/apache/kylin/junit/MetadataExtension.java",
              "type": "String",
              "code": "            }\n            cleanSingletonInstances();\n\n            val kylinHomePath = new File(getTestConfig().getMetadataUrl().toString()).getParentFile().getAbsolutePath();\n            SystemPropertiesCache.setProperty(\"KYLIN_HOME\", kylinHomePath);\n            val jobJar = org.apache.kylin.common.util.FileUtils.findFile(\n                    new File(kylinHomePath, \"../../../assembly/target/\").getAbsolutePath(), \"kylin-assembly(.?)\\\\.jar\");"
            },
            {
              "step": 8,
              "variableName": "new File(getTestConfig().getMetadataUrl().toString())",
              "startLine": 102,
              "startColumn": 33,
              "endLine": 102,
              "endColumn": 86,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/test/java/org/apache/kylin/junit/MetadataExtension.java",
              "type": "File",
              "code": "            }\n            cleanSingletonInstances();\n\n            val kylinHomePath = new File(getTestConfig().getMetadataUrl().toString()).getParentFile().getAbsolutePath();\n            SystemPropertiesCache.setProperty(\"KYLIN_HOME\", kylinHomePath);\n            val jobJar = org.apache.kylin.common.util.FileUtils.findFile(\n                    new File(kylinHomePath, \"../../../assembly/target/\").getAbsolutePath(), \"kylin-assembly(.?)\\\\.jar\");"
            },
            {
              "step": 9,
              "variableName": "new File(getTestConfig().getMetadataUrl().toString()).getParentFile()",
              "startLine": 102,
              "startColumn": 33,
              "endLine": 102,
              "endColumn": 102,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/test/java/org/apache/kylin/junit/MetadataExtension.java",
              "type": "File",
              "code": "            }\n            cleanSingletonInstances();\n\n            val kylinHomePath = new File(getTestConfig().getMetadataUrl().toString()).getParentFile().getAbsolutePath();\n            SystemPropertiesCache.setProperty(\"KYLIN_HOME\", kylinHomePath);\n            val jobJar = org.apache.kylin.common.util.FileUtils.findFile(\n                    new File(kylinHomePath, \"../../../assembly/target/\").getAbsolutePath(), \"kylin-assembly(.?)\\\\.jar\");"
            },
            {
              "step": 10,
              "variableName": "new File(getTestConfig().getMetadataUrl().toString()).getParentFile().getAbsolutePath()",
              "startLine": 102,
              "startColumn": 33,
              "endLine": 102,
              "endColumn": 120,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/test/java/org/apache/kylin/junit/MetadataExtension.java",
              "type": "String",
              "code": "            }\n            cleanSingletonInstances();\n\n            val kylinHomePath = new File(getTestConfig().getMetadataUrl().toString()).getParentFile().getAbsolutePath();\n            SystemPropertiesCache.setProperty(\"KYLIN_HOME\", kylinHomePath);\n            val jobJar = org.apache.kylin.common.util.FileUtils.findFile(\n                    new File(kylinHomePath, \"../../../assembly/target/\").getAbsolutePath(), \"kylin-assembly(.?)\\\\.jar\");"
            },
            {
              "step": 11,
              "variableName": "kylinHomePath",
              "startLine": 103,
              "startColumn": 61,
              "endLine": 103,
              "endColumn": 74,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/test/java/org/apache/kylin/junit/MetadataExtension.java",
              "type": "String",
              "code": "            cleanSingletonInstances();\n\n            val kylinHomePath = new File(getTestConfig().getMetadataUrl().toString()).getParentFile().getAbsolutePath();\n            SystemPropertiesCache.setProperty(\"KYLIN_HOME\", kylinHomePath);\n            val jobJar = org.apache.kylin.common.util.FileUtils.findFile(\n                    new File(kylinHomePath, \"../../../assembly/target/\").getAbsolutePath(), \"kylin-assembly(.?)\\\\.jar\");\n            KylinConfig testConfig = getTestConfig();"
            },
            {
              "step": 12,
              "variableName": "String value",
              "startLine": 50,
              "startColumn": 50,
              "endLine": 50,
              "endColumn": 62,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/SystemPropertiesCache.java",
              "type": "String",
              "code": "    }\n\n    // Mainly invoked in tests\n    public static String setProperty(String key, String value) {\n        System.setProperty(key, value);\n        return (String) CACHED_SYSTEM_PROPERTY.put(key, value);\n    }"
            },
            {
              "step": 13,
              "variableName": "value",
              "startLine": 52,
              "startColumn": 57,
              "endLine": 52,
              "endColumn": 62,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/SystemPropertiesCache.java",
              "type": "String",
              "code": "    // Mainly invoked in tests\n    public static String setProperty(String key, String value) {\n        System.setProperty(key, value);\n        return (String) CACHED_SYSTEM_PROPERTY.put(key, value);\n    }\n\n    // Mainly invoked in tests"
            },
            {
              "step": 14,
              "variableName": "CACHED_SYSTEM_PROPERTY",
              "startLine": 52,
              "startColumn": 25,
              "endLine": 52,
              "endColumn": 47,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/SystemPropertiesCache.java",
              "type": "ConcurrentHashMap [<map.value>] : String",
              "code": "    // Mainly invoked in tests\n    public static String setProperty(String key, String value) {\n        System.setProperty(key, value);\n        return (String) CACHED_SYSTEM_PROPERTY.put(key, value);\n    }\n\n    // Mainly invoked in tests"
            },
            {
              "step": 15,
              "variableName": "CACHED_SYSTEM_PROPERTY",
              "startLine": 31,
              "startColumn": 60,
              "endLine": 31,
              "endColumn": 82,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/SystemPropertiesCache.java",
              "type": "ConcurrentHashMap [<map.value>] : String",
              "code": " */\npublic class SystemPropertiesCache {\n\n    private static final ConcurrentHashMap<Object, Object> CACHED_SYSTEM_PROPERTY = new ConcurrentHashMap<>(\n            System.getProperties());\n\n    protected static Map<Object, Object> getProperties() {"
            },
            {
              "step": 16,
              "variableName": "CACHED_SYSTEM_PROPERTY",
              "startLine": 40,
              "startColumn": 23,
              "endLine": 40,
              "endColumn": 45,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/SystemPropertiesCache.java",
              "type": "ConcurrentHashMap [<map.value>] : String",
              "code": "\n    protected static String getProperty(String key) {\n        checkKey(key);\n        Object oval = CACHED_SYSTEM_PROPERTY.get(key);\n        return (oval instanceof String) ? (String) oval : null;\n    }\n"
            },
            {
              "step": 17,
              "variableName": "CACHED_SYSTEM_PROPERTY.get(key)",
              "startLine": 40,
              "startColumn": 23,
              "endLine": 40,
              "endColumn": 54,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/SystemPropertiesCache.java",
              "type": "String",
              "code": "\n    protected static String getProperty(String key) {\n        checkKey(key);\n        Object oval = CACHED_SYSTEM_PROPERTY.get(key);\n        return (oval instanceof String) ? (String) oval : null;\n    }\n"
            },
            {
              "step": 18,
              "variableName": "(String) oval",
              "startLine": 41,
              "startColumn": 43,
              "endLine": 41,
              "endColumn": 56,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/SystemPropertiesCache.java",
              "type": "String",
              "code": "    protected static String getProperty(String key) {\n        checkKey(key);\n        Object oval = CACHED_SYSTEM_PROPERTY.get(key);\n        return (oval instanceof String) ? (String) oval : null;\n    }\n\n    protected static String getProperty(String key, String defaultValue) {"
            },
            {
              "step": 19,
              "variableName": "(oval instanceof String) ? (String) oval : null",
              "startLine": 41,
              "startColumn": 16,
              "endLine": 41,
              "endColumn": 63,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/SystemPropertiesCache.java",
              "type": "... : String",
              "code": "    protected static String getProperty(String key) {\n        checkKey(key);\n        Object oval = CACHED_SYSTEM_PROPERTY.get(key);\n        return (oval instanceof String) ? (String) oval : null;\n    }\n\n    protected static String getProperty(String key, String defaultValue) {"
            },
            {
              "step": 20,
              "variableName": "SystemPropertiesCache.getProperty(prop)",
              "startLine": 224,
              "startColumn": 33,
              "endLine": 224,
              "endColumn": 72,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java",
              "type": "String",
              "code": "    }\n\n    protected String getOptional(String prop, String dft) {\n        final String property = SystemPropertiesCache.getProperty(prop);\n        return property != null ? getSubstitutor().replace(property)\n                : getSubstitutor().replace(properties.getProperty(prop, dft));\n    }"
            },
            {
              "step": 21,
              "variableName": "property",
              "startLine": 225,
              "startColumn": 60,
              "endLine": 225,
              "endColumn": 68,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java",
              "type": "String",
              "code": "\n    protected String getOptional(String prop, String dft) {\n        final String property = SystemPropertiesCache.getProperty(prop);\n        return property != null ? getSubstitutor().replace(property)\n                : getSubstitutor().replace(properties.getProperty(prop, dft));\n    }\n"
            },
            {
              "step": 22,
              "variableName": "getSubstitutor().replace(property)",
              "startLine": 225,
              "startColumn": 35,
              "endLine": 225,
              "endColumn": 69,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java",
              "type": "String",
              "code": "\n    protected String getOptional(String prop, String dft) {\n        final String property = SystemPropertiesCache.getProperty(prop);\n        return property != null ? getSubstitutor().replace(property)\n                : getSubstitutor().replace(properties.getProperty(prop, dft));\n    }\n"
            },
            {
              "step": 23,
              "variableName": "property != null ? getSubstitutor().replace(property)",
              "startLine": 225,
              "startColumn": 16,
              "endLine": 226,
              "endColumn": 78,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java",
              "type": "... : String",
              "code": "\n    protected String getOptional(String prop, String dft) {\n        final String property = SystemPropertiesCache.getProperty(prop);\n        return property != null ? getSubstitutor().replace(property)\n                : getSubstitutor().replace(properties.getProperty(prop, dft));\n    }\n"
            },
            {
              "step": 24,
              "variableName": "getOptional(prop, null)",
              "startLine": 220,
              "startColumn": 16,
              "endLine": 220,
              "endColumn": 39,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java",
              "type": "String",
              "code": "    }\n\n    protected final String getOptional(String prop) {\n        return getOptional(prop, null);\n    }\n\n    protected String getOptional(String prop, String dft) {"
            },
            {
              "step": 25,
              "variableName": "getOptional(\"kylin.env.ip-address\")",
              "startLine": 687,
              "startColumn": 16,
              "endLine": 687,
              "endColumn": 51,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java",
              "type": "String",
              "code": "\n    public String getServerIpAddress() {\n        // format: ip\n        return getOptional(\"kylin.env.ip-address\");\n    }\n\n    public String getTransactionLockManager() {"
            },
            {
              "step": 26,
              "variableName": "KylinConfig.getInstanceFromEnv().getServerIpAddress()",
              "startLine": 93,
              "startColumn": 34,
              "endLine": 93,
              "endColumn": 87,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/util/AddressUtil.java",
              "type": "String",
              "code": "\n    public static String getLocalHostExactAddress() {\n        if (StringUtils.isEmpty(localIpAddressCache)) {\n            val localIpAddress = KylinConfig.getInstanceFromEnv().getServerIpAddress();\n            if (StringUtils.isNotBlank(localIpAddress)) {\n                localIpAddressCache = localIpAddress;\n            } else {"
            },
            {
              "step": 27,
              "variableName": "localIpAddressCache",
              "startLine": 102,
              "startColumn": 16,
              "endLine": 102,
              "endColumn": 35,
              "uri": "kylin-kylin-5.0.0/src/core-common/src/main/java/org/apache/kylin/common/util/AddressUtil.java",
              "type": "String",
              "code": "                }\n            }\n        }\n        return localIpAddressCache;\n    }\n\n    public static boolean isSameHost(String driverHost) {"
            },
            {
              "step": 28,
              "variableName": "AddressUtil.getLocalHostExactAddress()",
              "startLine": 767,
              "startColumn": 16,
              "endLine": 767,
              "endColumn": 54,
              "uri": "kylin-kylin-5.0.0/src/query-service/src/main/java/org/apache/kylin/rest/service/QueryService.java",
              "type": "String",
              "code": "    }\n\n    private String getDefaultServer() {\n        return AddressUtil.getLocalHostExactAddress() + \":\" + appConfig.getPort();\n    }\n\n    @VisibleForTesting"
            },
            {
              "step": 29,
              "variableName": "AddressUtil.getLocalHostExactAddress() + \":\" + appConfig.getPort()",
              "startLine": 767,
              "startColumn": 16,
              "endLine": 767,
              "endColumn": 82,
              "uri": "kylin-kylin-5.0.0/src/query-service/src/main/java/org/apache/kylin/rest/service/QueryService.java",
              "type": "String",
              "code": "    }\n\n    private String getDefaultServer() {\n        return AddressUtil.getLocalHostExactAddress() + \":\" + appConfig.getPort();\n    }\n\n    @VisibleForTesting"
            },
            {
              "step": 30,
              "variableName": "getDefaultServer()",
              "startLine": 562,
              "startColumn": 62,
              "endLine": 562,
              "endColumn": 80,
              "uri": "kylin-kylin-5.0.0/src/query-service/src/main/java/org/apache/kylin/rest/service/QueryService.java",
              "type": "",
              "code": "        }\n\n        QueryContext queryContext = QueryContext.current();\n        QueryMetricsContext.start(queryContext.getQueryId(), getDefaultServer());\n\n        final String project = sqlRequest.getProject();\n        SQLResponse sqlResponse = null;"
            }
          ],
          "label": "No"
        }
      ]
    }
  ]
}