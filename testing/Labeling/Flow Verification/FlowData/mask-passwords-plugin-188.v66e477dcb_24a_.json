{
  "532": [
    {
      "resultIndex": 0,
      "fileName": "MaskPasswordsBuildWrapper.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "VAR_PASSWORD_PAIR_NODE",
              "startLine": 558,
              "startColumn": 86,
              "endLine": 558,
              "endColumn": 108,
              "uri": "mask-passwords-plugin-188.v66e477dcb_24a_/src/main/java/com/michelin/cio/hudson/plugins/maskpasswords/MaskPasswordsBuildWrapper.java",
              "type": "String",
              "code": "                        }\r\n                        else {\r\n                            LOGGER.log(Level.WARNING,\r\n                                    \"Encountered incorrect node name: Expected \\\"\" + VAR_PASSWORD_PAIR_NODE + \"\\\", got \\\"{0}\\\"\",\r\n                                    reader.getNodeName());\r\n                        }\r\n                        reader.moveUp();\r"
            },
            {
              "step": 1,
              "variableName": "\"Encountered incorrect node name: Expected \\\"\" + VAR_PASSWORD_PAIR_NODE + \"\\\", got \\\"{0}\\\"\"",
              "startLine": 558,
              "startColumn": 37,
              "endLine": 558,
              "endColumn": 128,
              "uri": "mask-passwords-plugin-188.v66e477dcb_24a_/src/main/java/com/michelin/cio/hudson/plugins/maskpasswords/MaskPasswordsBuildWrapper.java",
              "type": "",
              "code": "                        }\r\n                        else {\r\n                            LOGGER.log(Level.WARNING,\r\n                                    \"Encountered incorrect node name: Expected \\\"\" + VAR_PASSWORD_PAIR_NODE + \"\\\", got \\\"{0}\\\"\",\r\n                                    reader.getNodeName());\r\n                        }\r\n                        reader.moveUp();\r"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 1,
      "fileName": "MaskPasswordsConfig.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "maskPasswordsParamDefClasses",
              "startLine": 501,
              "startColumn": 39,
              "endLine": 501,
              "endColumn": 67,
              "uri": "mask-passwords-plugin-188.v66e477dcb_24a_/src/main/java/com/michelin/cio/hudson/plugins/maskpasswords/MaskPasswordsConfig.java",
              "type": "LinkedHashSet",
              "code": "        // This means that this algorithm expects that the developers do\n        // clearly redefine the return type when implementing parameter\n        // definitions/values.\n        for(String paramDefClassName: maskPasswordsParamDefClasses) {\n            final Class<?> paramDefClass;\n            try {\n                paramDefClass = Jenkins.get().getPluginManager().uberClassLoader.loadClass(paramDefClassName);"
            },
            {
              "step": 1,
              "variableName": "\"Cannot check ParamDef for masking \" + paramDefClassName",
              "startLine": 506,
              "startColumn": 43,
              "endLine": 506,
              "endColumn": 99,
              "uri": "mask-passwords-plugin-188.v66e477dcb_24a_/src/main/java/com/michelin/cio/hudson/plugins/maskpasswords/MaskPasswordsConfig.java",
              "type": "",
              "code": "            try {\n                paramDefClass = Jenkins.get().getPluginManager().uberClassLoader.loadClass(paramDefClassName);\n            } catch (ClassNotFoundException ex) {\n                LOGGER.log(Level.WARNING, \"Cannot check ParamDef for masking \" + paramDefClassName, ex);\n                continue;\n            }\n"
            }
          ],
          "label": "No"
        }
      ]
    }
  ]
}