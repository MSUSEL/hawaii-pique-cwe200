{
  "532": [
    {
      "resultIndex": 0,
      "fileName": "PtNDArray.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "pooledFirstToken",
              "startLine": 262,
              "startColumn": 24,
              "endLine": 262,
              "endColumn": 40,
              "uri": "djl-0.33.0/api/src/main/java/ai/djl/nn/transformer/BertBlock.java",
              "type": "NDArray",
              "code": "        NDArray firstToken = lastOutput.head().get(new NDIndex(\":,1,:\")).squeeze();\n        NDArray pooledFirstToken =\n                pooling.forward(ps, new NDList(firstToken), training).head().tanh();\n        lastOutput.add(pooledFirstToken);\n        return lastOutput;\n    }\n"
            },
            {
              "step": 1,
              "variableName": "lastOutput",
              "startLine": 262,
              "startColumn": 9,
              "endLine": 262,
              "endColumn": 19,
              "uri": "djl-0.33.0/api/src/main/java/ai/djl/nn/transformer/BertBlock.java",
              "type": "NDList [<element>] : NDArray",
              "code": "        NDArray firstToken = lastOutput.head().get(new NDIndex(\":,1,:\")).squeeze();\n        NDArray pooledFirstToken =\n                pooling.forward(ps, new NDList(firstToken), training).head().tanh();\n        lastOutput.add(pooledFirstToken);\n        return lastOutput;\n    }\n"
            },
            {
              "step": 2,
              "variableName": "lastOutput",
              "startLine": 263,
              "startColumn": 16,
              "endLine": 263,
              "endColumn": 26,
              "uri": "djl-0.33.0/api/src/main/java/ai/djl/nn/transformer/BertBlock.java",
              "type": "NDList [<element>] : NDArray",
              "code": "        NDArray pooledFirstToken =\n                pooling.forward(ps, new NDList(firstToken), training).head().tanh();\n        lastOutput.add(pooledFirstToken);\n        return lastOutput;\n    }\n\n    /**"
            },
            {
              "step": 3,
              "variableName": "forwardInternal(parameterStore, inputs, training, params)",
              "startLine": 79,
              "startColumn": 16,
              "endLine": 79,
              "endColumn": 73,
              "uri": "djl-0.33.0/api/src/main/java/ai/djl/nn/AbstractBaseBlock.java",
              "type": "NDList [<element>] : NDArray",
              "code": "            NDManager paramsManager = parameterStore.getManager();\n            initialize(paramsManager, DataType.FLOAT32, inputs.getShapes());\n        }\n        return forwardInternal(parameterStore, inputs, training, params);\n    }\n\n    /** {@inheritDoc} */"
            },
            {
              "step": 4,
              "variableName": "forward(parameterStore, inputs, training, null)",
              "startLine": 129,
              "startColumn": 16,
              "endLine": 129,
              "endColumn": 63,
              "uri": "djl-0.33.0/api/src/main/java/ai/djl/nn/Block.java",
              "type": "NDList [<element>] : NDArray",
              "code": "     * @return the output of the forward pass\n     */\n    default NDList forward(ParameterStore parameterStore, NDList inputs, boolean training) {\n        return forward(parameterStore, inputs, training, null);\n    }\n\n    /**"
            },
            {
              "step": 5,
              "variableName": "scaler.forward(ps, new NDList(context, observedContext), training)",
              "startLine": 210,
              "startColumn": 21,
              "endLine": 210,
              "endColumn": 87,
              "uri": "djl-0.33.0/extensions/timeseries/src/main/java/ai/djl/timeseries/model/deepar/DeepARNetwork.java",
              "type": "NDList [<element>] : NDArray",
              "code": "            NDArray context = pastTarget.get(\":,{}:\", -contextLength);\n            NDArray observedContext = pastObservedValues.get(\":,{}:\", -contextLength);\n            NDArray scale =\n                    scaler.forward(ps, new NDList(context, observedContext), training).get(1);\n\n            NDArray priorSequence = pastTarget.get(\":,:{}\", -contextLength).div(scale);\n            NDArray sequence ="
            },
            {
              "step": 6,
              "variableName": "scaler.forward(ps, new NDList(context, observedContext), training).get(1)",
              "startLine": 210,
              "startColumn": 21,
              "endLine": 210,
              "endColumn": 94,
              "uri": "djl-0.33.0/extensions/timeseries/src/main/java/ai/djl/timeseries/model/deepar/DeepARNetwork.java",
              "type": "NDArray",
              "code": "            NDArray context = pastTarget.get(\":,{}:\", -contextLength);\n            NDArray observedContext = pastObservedValues.get(\":,{}:\", -contextLength);\n            NDArray scale =\n                    scaler.forward(ps, new NDList(context, observedContext), training).get(1);\n\n            NDArray priorSequence = pastTarget.get(\":,:{}\", -contextLength).div(scale);\n            NDArray sequence ="
            },
            {
              "step": 7,
              "variableName": "scale",
              "startLine": 221,
              "startColumn": 77,
              "endLine": 221,
              "endColumn": 82,
              "uri": "djl-0.33.0/extensions/timeseries/src/main/java/ai/djl/timeseries/model/deepar/DeepARNetwork.java",
              "type": "NDArray",
              "code": "            NDArray embeddedCat =\n                    embedder.forward(ps, new NDList(featStaticCat), training).singletonOrThrow();\n            NDArray staticFeat =\n                    NDArrays.concat(new NDList(embeddedCat, featStaticReal, scale.log()), 1);\n            NDArray expandedStaticFeat =\n                    staticFeat.expandDims(1).repeat(1, sequence.getShape().get(1));\n"
            },
            {
              "step": 8,
              "variableName": "log",
              "startLine": 850,
              "startColumn": 22,
              "endLine": 850,
              "endColumn": 25,
              "uri": "djl-0.33.0/engines/pytorch/pytorch-engine/src/main/java/ai/djl/pytorch/engine/PtNDArray.java",
              "type": "PtNDArray",
              "code": "\n    /** {@inheritDoc} */\n    @Override\n    public PtNDArray log() {\n        return JniUtils.log(this);\n    }\n"
            },
            {
              "step": 9,
              "variableName": "this",
              "startLine": 851,
              "startColumn": 29,
              "endLine": 851,
              "endColumn": 33,
              "uri": "djl-0.33.0/engines/pytorch/pytorch-engine/src/main/java/ai/djl/pytorch/engine/PtNDArray.java",
              "type": "",
              "code": "    /** {@inheritDoc} */\n    @Override\n    public PtNDArray log() {\n        return JniUtils.log(this);\n    }\n\n    /** {@inheritDoc} */"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "pooledFirstToken",
              "startLine": 262,
              "startColumn": 24,
              "endLine": 262,
              "endColumn": 40,
              "uri": "djl-0.33.0/api/src/main/java/ai/djl/nn/transformer/BertBlock.java",
              "type": "NDArray",
              "code": "        NDArray firstToken = lastOutput.head().get(new NDIndex(\":,1,:\")).squeeze();\n        NDArray pooledFirstToken =\n                pooling.forward(ps, new NDList(firstToken), training).head().tanh();\n        lastOutput.add(pooledFirstToken);\n        return lastOutput;\n    }\n"
            },
            {
              "step": 1,
              "variableName": "lastOutput",
              "startLine": 262,
              "startColumn": 9,
              "endLine": 262,
              "endColumn": 19,
              "uri": "djl-0.33.0/api/src/main/java/ai/djl/nn/transformer/BertBlock.java",
              "type": "NDList [<element>] : NDArray",
              "code": "        NDArray firstToken = lastOutput.head().get(new NDIndex(\":,1,:\")).squeeze();\n        NDArray pooledFirstToken =\n                pooling.forward(ps, new NDList(firstToken), training).head().tanh();\n        lastOutput.add(pooledFirstToken);\n        return lastOutput;\n    }\n"
            },
            {
              "step": 2,
              "variableName": "lastOutput",
              "startLine": 263,
              "startColumn": 16,
              "endLine": 263,
              "endColumn": 26,
              "uri": "djl-0.33.0/api/src/main/java/ai/djl/nn/transformer/BertBlock.java",
              "type": "NDList [<element>] : NDArray",
              "code": "        NDArray pooledFirstToken =\n                pooling.forward(ps, new NDList(firstToken), training).head().tanh();\n        lastOutput.add(pooledFirstToken);\n        return lastOutput;\n    }\n\n    /**"
            },
            {
              "step": 3,
              "variableName": "forwardInternal(parameterStore, inputs, training, params)",
              "startLine": 79,
              "startColumn": 16,
              "endLine": 79,
              "endColumn": 73,
              "uri": "djl-0.33.0/api/src/main/java/ai/djl/nn/AbstractBaseBlock.java",
              "type": "NDList [<element>] : NDArray",
              "code": "            NDManager paramsManager = parameterStore.getManager();\n            initialize(paramsManager, DataType.FLOAT32, inputs.getShapes());\n        }\n        return forwardInternal(parameterStore, inputs, training, params);\n    }\n\n    /** {@inheritDoc} */"
            },
            {
              "step": 4,
              "variableName": "block.forward(parameterStore, inputs, training, params)",
              "startLine": 72,
              "startColumn": 21,
              "endLine": 72,
              "endColumn": 76,
              "uri": "djl-0.33.0/extensions/timeseries/src/main/java/ai/djl/timeseries/distribution/output/ArgProj.java",
              "type": "NDList [<element>] : NDArray",
              "code": "        NDList paramsUnbounded = new NDList();\n        for (Block block : proj) {\n            paramsUnbounded.add(\n                    block.forward(parameterStore, inputs, training, params).singletonOrThrow());\n        }\n        return domainMap.forward(parameterStore, paramsUnbounded, training, params);\n    }"
            },
            {
              "step": 5,
              "variableName": "singletonOrThrow",
              "startLine": 304,
              "startColumn": 20,
              "endLine": 304,
              "endColumn": 36,
              "uri": "djl-0.33.0/api/src/main/java/ai/djl/ndarray/NDList.java",
              "type": "NDList [<element>] : NDArray",
              "code": "     * @return the head NDArray\n     * @throws IndexOutOfBoundsException if the list does not contain exactly one element\n     */\n    public NDArray singletonOrThrow() {\n        if (size() != 1) {\n            throw new IndexOutOfBoundsException(\n                    \"Incorrect number of elements in NDList.singletonOrThrow: Expected 1 and was \""
            },
            {
              "step": 6,
              "variableName": "get(0)",
              "startLine": 310,
              "startColumn": 16,
              "endLine": 310,
              "endColumn": 22,
              "uri": "djl-0.33.0/api/src/main/java/ai/djl/ndarray/NDList.java",
              "type": "NDList [<element>] : NDArray",
              "code": "                    \"Incorrect number of elements in NDList.singletonOrThrow: Expected 1 and was \"\n                            + size());\n        }\n        return get(0);\n    }\n\n    /**"
            },
            {
              "step": 7,
              "variableName": "get(0)",
              "startLine": 310,
              "startColumn": 16,
              "endLine": 310,
              "endColumn": 22,
              "uri": "djl-0.33.0/api/src/main/java/ai/djl/ndarray/NDList.java",
              "type": "NDArray",
              "code": "                    \"Incorrect number of elements in NDList.singletonOrThrow: Expected 1 and was \"\n                            + size());\n        }\n        return get(0);\n    }\n\n    /**"
            },
            {
              "step": 8,
              "variableName": "block.forward(parameterStore, inputs, training, params).singletonOrThrow()",
              "startLine": 72,
              "startColumn": 21,
              "endLine": 72,
              "endColumn": 95,
              "uri": "djl-0.33.0/extensions/timeseries/src/main/java/ai/djl/timeseries/distribution/output/ArgProj.java",
              "type": "NDArray",
              "code": "        NDList paramsUnbounded = new NDList();\n        for (Block block : proj) {\n            paramsUnbounded.add(\n                    block.forward(parameterStore, inputs, training, params).singletonOrThrow());\n        }\n        return domainMap.forward(parameterStore, paramsUnbounded, training, params);\n    }"
            },
            {
              "step": 9,
              "variableName": "paramsUnbounded",
              "startLine": 71,
              "startColumn": 13,
              "endLine": 71,
              "endColumn": 28,
              "uri": "djl-0.33.0/extensions/timeseries/src/main/java/ai/djl/timeseries/distribution/output/ArgProj.java",
              "type": "NDList [<element>] : NDArray",
              "code": "            PairList<String, Object> params) {\n        NDList paramsUnbounded = new NDList();\n        for (Block block : proj) {\n            paramsUnbounded.add(\n                    block.forward(parameterStore, inputs, training, params).singletonOrThrow());\n        }\n        return domainMap.forward(parameterStore, paramsUnbounded, training, params);"
            },
            {
              "step": 10,
              "variableName": "paramsUnbounded",
              "startLine": 74,
              "startColumn": 50,
              "endLine": 74,
              "endColumn": 65,
              "uri": "djl-0.33.0/extensions/timeseries/src/main/java/ai/djl/timeseries/distribution/output/ArgProj.java",
              "type": "NDList [<element>] : NDArray",
              "code": "            paramsUnbounded.add(\n                    block.forward(parameterStore, inputs, training, params).singletonOrThrow());\n        }\n        return domainMap.forward(parameterStore, paramsUnbounded, training, params);\n    }\n\n    /** {@inheritDoc} */"
            },
            {
              "step": 11,
              "variableName": "NDList inputs",
              "startLine": 72,
              "startColumn": 13,
              "endLine": 72,
              "endColumn": 26,
              "uri": "djl-0.33.0/api/src/main/java/ai/djl/nn/AbstractBaseBlock.java",
              "type": "NDList [<element>] : NDArray",
              "code": "    @Override\n    public final NDList forward(\n            ParameterStore parameterStore,\n            NDList inputs,\n            boolean training,\n            PairList<String, Object> params) {\n        if (training && !isInitialized()) {"
            },
            {
              "step": 12,
              "variableName": "inputs",
              "startLine": 79,
              "startColumn": 48,
              "endLine": 79,
              "endColumn": 54,
              "uri": "djl-0.33.0/api/src/main/java/ai/djl/nn/AbstractBaseBlock.java",
              "type": "NDList [<element>] : NDArray",
              "code": "            NDManager paramsManager = parameterStore.getManager();\n            initialize(paramsManager, DataType.FLOAT32, inputs.getShapes());\n        }\n        return forwardInternal(parameterStore, inputs, training, params);\n    }\n\n    /** {@inheritDoc} */"
            },
            {
              "step": 13,
              "variableName": "NDList inputs",
              "startLine": 104,
              "startColumn": 13,
              "endLine": 104,
              "endColumn": 26,
              "uri": "djl-0.33.0/api/src/main/java/ai/djl/nn/LambdaBlock.java",
              "type": "NDList [<element>] : NDArray",
              "code": "    @Override\n    protected NDList forwardInternal(\n            ParameterStore parameterStore,\n            NDList inputs,\n            boolean training,\n            PairList<String, Object> params) {\n        return lambda.apply(inputs);"
            },
            {
              "step": 14,
              "variableName": "inputs",
              "startLine": 107,
              "startColumn": 29,
              "endLine": 107,
              "endColumn": 35,
              "uri": "djl-0.33.0/api/src/main/java/ai/djl/nn/LambdaBlock.java",
              "type": "NDList [<element>] : NDArray",
              "code": "            NDList inputs,\n            boolean training,\n            PairList<String, Object> params) {\n        return lambda.apply(inputs);\n    }\n\n    /** {@inheritDoc} */"
            },
            {
              "step": 15,
              "variableName": "ndList",
              "startLine": 148,
              "startColumn": 25,
              "endLine": 148,
              "endColumn": 31,
              "uri": "djl-0.33.0/examples/src/main/java/ai/djl/examples/training/transferlearning/TrainAmazonReviewRanking.java",
              "type": "NDList [<element>] : NDArray",
              "code": "        // text embedding layer\n        LambdaBlock lambda =\n                new LambdaBlock(\n                        ndList -> {\n                            NDArray data = ndList.singletonOrThrow();\n                            NDList inputs = new NDList();\n                            inputs.add(data.toType(DataType.INT64, false));"
            },
            {
              "step": 16,
              "variableName": "ndList",
              "startLine": 149,
              "startColumn": 44,
              "endLine": 149,
              "endColumn": 50,
              "uri": "djl-0.33.0/examples/src/main/java/ai/djl/examples/training/transferlearning/TrainAmazonReviewRanking.java",
              "type": "NDList [<element>] : NDArray",
              "code": "        LambdaBlock lambda =\n                new LambdaBlock(\n                        ndList -> {\n                            NDArray data = ndList.singletonOrThrow();\n                            NDList inputs = new NDList();\n                            inputs.add(data.toType(DataType.INT64, false));\n                            inputs.add(data.getManager().full(data.getShape(), 1, DataType.INT64));"
            },
            {
              "step": 17,
              "variableName": "singletonOrThrow",
              "startLine": 304,
              "startColumn": 20,
              "endLine": 304,
              "endColumn": 36,
              "uri": "djl-0.33.0/api/src/main/java/ai/djl/ndarray/NDList.java",
              "type": "NDList [<element>] : NDArray",
              "code": "     * @return the head NDArray\n     * @throws IndexOutOfBoundsException if the list does not contain exactly one element\n     */\n    public NDArray singletonOrThrow() {\n        if (size() != 1) {\n            throw new IndexOutOfBoundsException(\n                    \"Incorrect number of elements in NDList.singletonOrThrow: Expected 1 and was \""
            },
            {
              "step": 18,
              "variableName": "get(0)",
              "startLine": 310,
              "startColumn": 16,
              "endLine": 310,
              "endColumn": 22,
              "uri": "djl-0.33.0/api/src/main/java/ai/djl/ndarray/NDList.java",
              "type": "NDList [<element>] : NDArray",
              "code": "                    \"Incorrect number of elements in NDList.singletonOrThrow: Expected 1 and was \"\n                            + size());\n        }\n        return get(0);\n    }\n\n    /**"
            },
            {
              "step": 19,
              "variableName": "get(0)",
              "startLine": 310,
              "startColumn": 16,
              "endLine": 310,
              "endColumn": 22,
              "uri": "djl-0.33.0/api/src/main/java/ai/djl/ndarray/NDList.java",
              "type": "NDArray",
              "code": "                    \"Incorrect number of elements in NDList.singletonOrThrow: Expected 1 and was \"\n                            + size());\n        }\n        return get(0);\n    }\n\n    /**"
            },
            {
              "step": 20,
              "variableName": "ndList.singletonOrThrow()",
              "startLine": 149,
              "startColumn": 44,
              "endLine": 149,
              "endColumn": 69,
              "uri": "djl-0.33.0/examples/src/main/java/ai/djl/examples/training/transferlearning/TrainAmazonReviewRanking.java",
              "type": "NDArray",
              "code": "        LambdaBlock lambda =\n                new LambdaBlock(\n                        ndList -> {\n                            NDArray data = ndList.singletonOrThrow();\n                            NDList inputs = new NDList();\n                            inputs.add(data.toType(DataType.INT64, false));\n                            inputs.add(data.getManager().full(data.getShape(), 1, DataType.INT64));"
            },
            {
              "step": 21,
              "variableName": "data",
              "startLine": 151,
              "startColumn": 40,
              "endLine": 151,
              "endColumn": 44,
              "uri": "djl-0.33.0/examples/src/main/java/ai/djl/examples/training/transferlearning/TrainAmazonReviewRanking.java",
              "type": "NDArray",
              "code": "                        ndList -> {\n                            NDArray data = ndList.singletonOrThrow();\n                            NDList inputs = new NDList();\n                            inputs.add(data.toType(DataType.INT64, false));\n                            inputs.add(data.getManager().full(data.getShape(), 1, DataType.INT64));\n                            inputs.add(\n                                    data.getManager()"
            },
            {
              "step": 22,
              "variableName": "toType",
              "startLine": 176,
              "startColumn": 22,
              "endLine": 176,
              "endColumn": 28,
              "uri": "djl-0.33.0/engines/pytorch/pytorch-engine/src/main/java/ai/djl/pytorch/engine/PtNDArray.java",
              "type": "PtNDArray",
              "code": "\n    /** {@inheritDoc} */\n    @Override\n    public PtNDArray toType(DataType dataType, boolean copy) {\n        if (dataType.equals(getDataType()) && !copy) {\n            return this;\n        }"
            },
            {
              "step": 23,
              "variableName": "this",
              "startLine": 178,
              "startColumn": 20,
              "endLine": 178,
              "endColumn": 24,
              "uri": "djl-0.33.0/engines/pytorch/pytorch-engine/src/main/java/ai/djl/pytorch/engine/PtNDArray.java",
              "type": "PtNDArray",
              "code": "    @Override\n    public PtNDArray toType(DataType dataType, boolean copy) {\n        if (dataType.equals(getDataType()) && !copy) {\n            return this;\n        }\n        PtNDArray array = JniUtils.to(this, dataType, getDevice());\n        array.setName(array.getName());"
            },
            {
              "step": 24,
              "variableName": "data.toType(DataType.INT64, false)",
              "startLine": 151,
              "startColumn": 40,
              "endLine": 151,
              "endColumn": 74,
              "uri": "djl-0.33.0/examples/src/main/java/ai/djl/examples/training/transferlearning/TrainAmazonReviewRanking.java",
              "type": "PtNDArray",
              "code": "                        ndList -> {\n                            NDArray data = ndList.singletonOrThrow();\n                            NDList inputs = new NDList();\n                            inputs.add(data.toType(DataType.INT64, false));\n                            inputs.add(data.getManager().full(data.getShape(), 1, DataType.INT64));\n                            inputs.add(\n                                    data.getManager()"
            },
            {
              "step": 25,
              "variableName": "inputs",
              "startLine": 151,
              "startColumn": 29,
              "endLine": 151,
              "endColumn": 35,
              "uri": "djl-0.33.0/examples/src/main/java/ai/djl/examples/training/transferlearning/TrainAmazonReviewRanking.java",
              "type": "NDList [<element>] : PtNDArray",
              "code": "                        ndList -> {\n                            NDArray data = ndList.singletonOrThrow();\n                            NDList inputs = new NDList();\n                            inputs.add(data.toType(DataType.INT64, false));\n                            inputs.add(data.getManager().full(data.getShape(), 1, DataType.INT64));\n                            inputs.add(\n                                    data.getManager()"
            },
            {
              "step": 26,
              "variableName": "inputs",
              "startLine": 158,
              "startColumn": 36,
              "endLine": 158,
              "endColumn": 42,
              "uri": "djl-0.33.0/examples/src/main/java/ai/djl/examples/training/transferlearning/TrainAmazonReviewRanking.java",
              "type": "NDList [<element>] : PtNDArray",
              "code": "                                            .arange(data.getShape().get(1)) // maxLen\n                                            .toType(DataType.INT64, false)\n                                            .broadcast(data.getShape()));\n                            return inputs;\n                        });\n        classifier.add(lambda);\n        classifier.add(embedder);"
            },
            {
              "step": 27,
              "variableName": "lambda.apply(inputs)",
              "startLine": 107,
              "startColumn": 16,
              "endLine": 107,
              "endColumn": 36,
              "uri": "djl-0.33.0/api/src/main/java/ai/djl/nn/LambdaBlock.java",
              "type": "NDList [<element>] : PtNDArray",
              "code": "            NDList inputs,\n            boolean training,\n            PairList<String, Object> params) {\n        return lambda.apply(inputs);\n    }\n\n    /** {@inheritDoc} */"
            },
            {
              "step": 28,
              "variableName": "forwardInternal(parameterStore, inputs, training, params)",
              "startLine": 79,
              "startColumn": 16,
              "endLine": 79,
              "endColumn": 73,
              "uri": "djl-0.33.0/api/src/main/java/ai/djl/nn/AbstractBaseBlock.java",
              "type": "NDList [<element>] : PtNDArray",
              "code": "            NDManager paramsManager = parameterStore.getManager();\n            initialize(paramsManager, DataType.FLOAT32, inputs.getShapes());\n        }\n        return forwardInternal(parameterStore, inputs, training, params);\n    }\n\n    /** {@inheritDoc} */"
            },
            {
              "step": 29,
              "variableName": "domainMap.forward(parameterStore, paramsUnbounded, training, params)",
              "startLine": 74,
              "startColumn": 16,
              "endLine": 74,
              "endColumn": 84,
              "uri": "djl-0.33.0/extensions/timeseries/src/main/java/ai/djl/timeseries/distribution/output/ArgProj.java",
              "type": "NDList [<element>] : PtNDArray",
              "code": "            paramsUnbounded.add(\n                    block.forward(parameterStore, inputs, training, params).singletonOrThrow());\n        }\n        return domainMap.forward(parameterStore, paramsUnbounded, training, params);\n    }\n\n    /** {@inheritDoc} */"
            },
            {
              "step": 30,
              "variableName": "forwardInternal(parameterStore, inputs, training, params)",
              "startLine": 79,
              "startColumn": 16,
              "endLine": 79,
              "endColumn": 73,
              "uri": "djl-0.33.0/api/src/main/java/ai/djl/nn/AbstractBaseBlock.java",
              "type": "NDList [<element>] : PtNDArray",
              "code": "            NDManager paramsManager = parameterStore.getManager();\n            initialize(paramsManager, DataType.FLOAT32, inputs.getShapes());\n        }\n        return forwardInternal(parameterStore, inputs, training, params);\n    }\n\n    /** {@inheritDoc} */"
            },
            {
              "step": 31,
              "variableName": "forward(parameterStore, inputs, training, null)",
              "startLine": 129,
              "startColumn": 16,
              "endLine": 129,
              "endColumn": 63,
              "uri": "djl-0.33.0/api/src/main/java/ai/djl/nn/Block.java",
              "type": "NDList [<element>] : PtNDArray",
              "code": "     * @return the output of the forward pass\n     */\n    default NDList forward(ParameterStore parameterStore, NDList inputs, boolean training) {\n        return forward(parameterStore, inputs, training, null);\n    }\n\n    /**"
            },
            {
              "step": 32,
              "variableName": "scaler.forward(ps, new NDList(context, observedContext), training)",
              "startLine": 210,
              "startColumn": 21,
              "endLine": 210,
              "endColumn": 87,
              "uri": "djl-0.33.0/extensions/timeseries/src/main/java/ai/djl/timeseries/model/deepar/DeepARNetwork.java",
              "type": "NDList [<element>] : PtNDArray",
              "code": "            NDArray context = pastTarget.get(\":,{}:\", -contextLength);\n            NDArray observedContext = pastObservedValues.get(\":,{}:\", -contextLength);\n            NDArray scale =\n                    scaler.forward(ps, new NDList(context, observedContext), training).get(1);\n\n            NDArray priorSequence = pastTarget.get(\":,:{}\", -contextLength).div(scale);\n            NDArray sequence ="
            },
            {
              "step": 33,
              "variableName": "scaler.forward(ps, new NDList(context, observedContext), training).get(1)",
              "startLine": 210,
              "startColumn": 21,
              "endLine": 210,
              "endColumn": 94,
              "uri": "djl-0.33.0/extensions/timeseries/src/main/java/ai/djl/timeseries/model/deepar/DeepARNetwork.java",
              "type": "PtNDArray",
              "code": "            NDArray context = pastTarget.get(\":,{}:\", -contextLength);\n            NDArray observedContext = pastObservedValues.get(\":,{}:\", -contextLength);\n            NDArray scale =\n                    scaler.forward(ps, new NDList(context, observedContext), training).get(1);\n\n            NDArray priorSequence = pastTarget.get(\":,:{}\", -contextLength).div(scale);\n            NDArray sequence ="
            },
            {
              "step": 34,
              "variableName": "scale",
              "startLine": 221,
              "startColumn": 77,
              "endLine": 221,
              "endColumn": 82,
              "uri": "djl-0.33.0/extensions/timeseries/src/main/java/ai/djl/timeseries/model/deepar/DeepARNetwork.java",
              "type": "PtNDArray",
              "code": "            NDArray embeddedCat =\n                    embedder.forward(ps, new NDList(featStaticCat), training).singletonOrThrow();\n            NDArray staticFeat =\n                    NDArrays.concat(new NDList(embeddedCat, featStaticReal, scale.log()), 1);\n            NDArray expandedStaticFeat =\n                    staticFeat.expandDims(1).repeat(1, sequence.getShape().get(1));\n"
            },
            {
              "step": 35,
              "variableName": "log",
              "startLine": 850,
              "startColumn": 22,
              "endLine": 850,
              "endColumn": 25,
              "uri": "djl-0.33.0/engines/pytorch/pytorch-engine/src/main/java/ai/djl/pytorch/engine/PtNDArray.java",
              "type": "PtNDArray",
              "code": "\n    /** {@inheritDoc} */\n    @Override\n    public PtNDArray log() {\n        return JniUtils.log(this);\n    }\n"
            },
            {
              "step": 36,
              "variableName": "this",
              "startLine": 851,
              "startColumn": 29,
              "endLine": 851,
              "endColumn": 33,
              "uri": "djl-0.33.0/engines/pytorch/pytorch-engine/src/main/java/ai/djl/pytorch/engine/PtNDArray.java",
              "type": "",
              "code": "    /** {@inheritDoc} */\n    @Override\n    public PtNDArray log() {\n        return JniUtils.log(this);\n    }\n\n    /** {@inheritDoc} */"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "pooledFirstToken",
              "startLine": 262,
              "startColumn": 24,
              "endLine": 262,
              "endColumn": 40,
              "uri": "djl-0.33.0/api/src/main/java/ai/djl/nn/transformer/BertBlock.java",
              "type": "NDArray",
              "code": "        NDArray firstToken = lastOutput.head().get(new NDIndex(\":,1,:\")).squeeze();\n        NDArray pooledFirstToken =\n                pooling.forward(ps, new NDList(firstToken), training).head().tanh();\n        lastOutput.add(pooledFirstToken);\n        return lastOutput;\n    }\n"
            },
            {
              "step": 1,
              "variableName": "lastOutput",
              "startLine": 262,
              "startColumn": 9,
              "endLine": 262,
              "endColumn": 19,
              "uri": "djl-0.33.0/api/src/main/java/ai/djl/nn/transformer/BertBlock.java",
              "type": "NDList [<element>] : NDArray",
              "code": "        NDArray firstToken = lastOutput.head().get(new NDIndex(\":,1,:\")).squeeze();\n        NDArray pooledFirstToken =\n                pooling.forward(ps, new NDList(firstToken), training).head().tanh();\n        lastOutput.add(pooledFirstToken);\n        return lastOutput;\n    }\n"
            },
            {
              "step": 2,
              "variableName": "lastOutput",
              "startLine": 263,
              "startColumn": 16,
              "endLine": 263,
              "endColumn": 26,
              "uri": "djl-0.33.0/api/src/main/java/ai/djl/nn/transformer/BertBlock.java",
              "type": "NDList [<element>] : NDArray",
              "code": "        NDArray pooledFirstToken =\n                pooling.forward(ps, new NDList(firstToken), training).head().tanh();\n        lastOutput.add(pooledFirstToken);\n        return lastOutput;\n    }\n\n    /**"
            },
            {
              "step": 3,
              "variableName": "forwardInternal(parameterStore, inputs, training, params)",
              "startLine": 79,
              "startColumn": 16,
              "endLine": 79,
              "endColumn": 73,
              "uri": "djl-0.33.0/api/src/main/java/ai/djl/nn/AbstractBaseBlock.java",
              "type": "NDList [<element>] : NDArray",
              "code": "            NDManager paramsManager = parameterStore.getManager();\n            initialize(paramsManager, DataType.FLOAT32, inputs.getShapes());\n        }\n        return forwardInternal(parameterStore, inputs, training, params);\n    }\n\n    /** {@inheritDoc} */"
            },
            {
              "step": 4,
              "variableName": "block.forward(parameterStore, inputs, training, params)",
              "startLine": 64,
              "startColumn": 16,
              "endLine": 64,
              "endColumn": 71,
              "uri": "djl-0.33.0/api/src/main/java/ai/djl/modality/nlp/Encoder.java",
              "type": "NDList [<element>] : NDArray",
              "code": "            NDList inputs,\n            boolean training,\n            PairList<String, Object> params) {\n        return block.forward(parameterStore, inputs, training, params);\n    }\n\n    @Override"
            },
            {
              "step": 5,
              "variableName": "forwardInternal(parameterStore, inputs, training, params)",
              "startLine": 79,
              "startColumn": 16,
              "endLine": 79,
              "endColumn": 73,
              "uri": "djl-0.33.0/api/src/main/java/ai/djl/nn/AbstractBaseBlock.java",
              "type": "NDList [<element>] : NDArray",
              "code": "            NDManager paramsManager = parameterStore.getManager();\n            initialize(paramsManager, DataType.FLOAT32, inputs.getShapes());\n        }\n        return forwardInternal(parameterStore, inputs, training, params);\n    }\n\n    /** {@inheritDoc} */"
            },
            {
              "step": 6,
              "variableName": "forward(parameterStore, inputs, training, null)",
              "startLine": 129,
              "startColumn": 16,
              "endLine": 129,
              "endColumn": 63,
              "uri": "djl-0.33.0/api/src/main/java/ai/djl/nn/Block.java",
              "type": "NDList [<element>] : NDArray",
              "code": "     * @return the output of the forward pass\n     */\n    default NDList forward(ParameterStore parameterStore, NDList inputs, boolean training) {\n        return forward(parameterStore, inputs, training, null);\n    }\n\n    /**"
            },
            {
              "step": 7,
              "variableName": "block.forward(parameterStore, current, training)",
              "startLine": 191,
              "startColumn": 23,
              "endLine": 191,
              "endColumn": 71,
              "uri": "djl-0.33.0/api/src/main/java/ai/djl/nn/SequentialBlock.java",
              "type": "NDList [<element>] : NDArray",
              "code": "        List<NDList> past = new ArrayList<>(children.size());\n        NDList current = inputs;\n        for (Block block : children.values()) {\n            current = block.forward(parameterStore, current, training);\n            past.add(current);\n        }\n        if (returnIntermediate) {"
            },
            {
              "step": 8,
              "variableName": "current",
              "startLine": 191,
              "startColumn": 53,
              "endLine": 191,
              "endColumn": 60,
              "uri": "djl-0.33.0/api/src/main/java/ai/djl/nn/SequentialBlock.java",
              "type": "NDList [<element>] : NDArray",
              "code": "        List<NDList> past = new ArrayList<>(children.size());\n        NDList current = inputs;\n        for (Block block : children.values()) {\n            current = block.forward(parameterStore, current, training);\n            past.add(current);\n        }\n        if (returnIntermediate) {"
            },
            {
              "step": 9,
              "variableName": "NDList inputs",
              "startLine": 128,
              "startColumn": 59,
              "endLine": 128,
              "endColumn": 72,
              "uri": "djl-0.33.0/api/src/main/java/ai/djl/nn/Block.java",
              "type": "NDList [<element>] : NDArray",
              "code": "     * @param training true for a training forward pass (turn on dropout and layerNorm)\n     * @return the output of the forward pass\n     */\n    default NDList forward(ParameterStore parameterStore, NDList inputs, boolean training) {\n        return forward(parameterStore, inputs, training, null);\n    }\n"
            },
            {
              "step": 10,
              "variableName": "inputs",
              "startLine": 129,
              "startColumn": 40,
              "endLine": 129,
              "endColumn": 46,
              "uri": "djl-0.33.0/api/src/main/java/ai/djl/nn/Block.java",
              "type": "NDList [<element>] : NDArray",
              "code": "     * @return the output of the forward pass\n     */\n    default NDList forward(ParameterStore parameterStore, NDList inputs, boolean training) {\n        return forward(parameterStore, inputs, training, null);\n    }\n\n    /**"
            },
            {
              "step": 11,
              "variableName": "NDList inputs",
              "startLine": 72,
              "startColumn": 13,
              "endLine": 72,
              "endColumn": 26,
              "uri": "djl-0.33.0/api/src/main/java/ai/djl/nn/AbstractBaseBlock.java",
              "type": "NDList [<element>] : NDArray",
              "code": "    @Override\n    public final NDList forward(\n            ParameterStore parameterStore,\n            NDList inputs,\n            boolean training,\n            PairList<String, Object> params) {\n        if (training && !isInitialized()) {"
            },
            {
              "step": 12,
              "variableName": "inputs",
              "startLine": 79,
              "startColumn": 48,
              "endLine": 79,
              "endColumn": 54,
              "uri": "djl-0.33.0/api/src/main/java/ai/djl/nn/AbstractBaseBlock.java",
              "type": "NDList [<element>] : NDArray",
              "code": "            NDManager paramsManager = parameterStore.getManager();\n            initialize(paramsManager, DataType.FLOAT32, inputs.getShapes());\n        }\n        return forwardInternal(parameterStore, inputs, training, params);\n    }\n\n    /** {@inheritDoc} */"
            },
            {
              "step": 13,
              "variableName": "NDList inputs",
              "startLine": 35,
              "startColumn": 13,
              "endLine": 35,
              "endColumn": 26,
              "uri": "djl-0.33.0/extensions/timeseries/src/main/java/ai/djl/timeseries/model/deepar/DeepARPredictionNetwork.java",
              "type": "NDList [<element>] : NDArray",
              "code": "    @Override\n    protected NDList forwardInternal(\n            ParameterStore parameterStore,\n            NDList inputs,\n            boolean training,\n            PairList<String, Object> params) {\n        NDList unrollInputs ="
            },
            {
              "step": 14,
              "variableName": "inputs",
              "startLine": 40,
              "startColumn": 25,
              "endLine": 40,
              "endColumn": 31,
              "uri": "djl-0.33.0/extensions/timeseries/src/main/java/ai/djl/timeseries/model/deepar/DeepARPredictionNetwork.java",
              "type": "NDList [<element>] : NDArray",
              "code": "            PairList<String, Object> params) {\n        NDList unrollInputs =\n                new NDList(\n                        inputs.get(0), // feat_static_cat\n                        inputs.get(1), // feat_static_real\n                        inputs.get(2), // past_time_feat\n                        inputs.get(3), // past_target"
            },
            {
              "step": 15,
              "variableName": "inputs.get(0)",
              "startLine": 40,
              "startColumn": 25,
              "endLine": 40,
              "endColumn": 38,
              "uri": "djl-0.33.0/extensions/timeseries/src/main/java/ai/djl/timeseries/model/deepar/DeepARPredictionNetwork.java",
              "type": "NDArray",
              "code": "            PairList<String, Object> params) {\n        NDList unrollInputs =\n                new NDList(\n                        inputs.get(0), // feat_static_cat\n                        inputs.get(1), // feat_static_real\n                        inputs.get(2), // past_time_feat\n                        inputs.get(3), // past_target"
            },
            {
              "step": 16,
              "variableName": "new NDLis",
              "startLine": 39,
              "startColumn": 17,
              "endLine": 46,
              "endColumn": 26,
              "uri": "djl-0.33.0/extensions/timeseries/src/main/java/ai/djl/timeseries/model/deepar/DeepARPredictionNetwork.java",
              "type": "NDArray[] [[]] : NDArray",
              "code": "            boolean training,\n            PairList<String, Object> params) {\n        NDList unrollInputs =\n                new NDList(\n                        inputs.get(0), // feat_static_cat\n                        inputs.get(1), // feat_static_real\n                        inputs.get(2), // past_time_feat"
            },
            {
              "step": 17,
              "variableName": "NDArray... arrays",
              "startLine": 76,
              "startColumn": 19,
              "endLine": 76,
              "endColumn": 36,
              "uri": "djl-0.33.0/api/src/main/java/ai/djl/ndarray/NDList.java",
              "type": "NDArray[] [[]] : NDArray",
              "code": "     *\n     * @param arrays the {@link NDArray}s\n     */\n    public NDList(NDArray... arrays) {\n        super(Arrays.asList(arrays));\n    }\n"
            },
            {
              "step": 18,
              "variableName": "arrays",
              "startLine": 77,
              "startColumn": 29,
              "endLine": 77,
              "endColumn": 35,
              "uri": "djl-0.33.0/api/src/main/java/ai/djl/ndarray/NDList.java",
              "type": "NDArray[] [[]] : NDArray",
              "code": "     * @param arrays the {@link NDArray}s\n     */\n    public NDList(NDArray... arrays) {\n        super(Arrays.asList(arrays));\n    }\n\n    /**"
            },
            {
              "step": 19,
              "variableName": "Arrays.asList(arrays)",
              "startLine": 77,
              "startColumn": 15,
              "endLine": 77,
              "endColumn": 36,
              "uri": "djl-0.33.0/api/src/main/java/ai/djl/ndarray/NDList.java",
              "type": "List [<element>] : NDArray",
              "code": "     * @param arrays the {@link NDArray}s\n     */\n    public NDList(NDArray... arrays) {\n        super(Arrays.asList(arrays));\n    }\n\n    /**"
            },
            {
              "step": 20,
              "variableName": "super(Arrays.asList(arrays));",
              "startLine": 77,
              "startColumn": 9,
              "endLine": 77,
              "endColumn": 38,
              "uri": "djl-0.33.0/api/src/main/java/ai/djl/ndarray/NDList.java",
              "type": "NDList [<element>] : NDArray",
              "code": "     * @param arrays the {@link NDArray}s\n     */\n    public NDList(NDArray... arrays) {\n        super(Arrays.asList(arrays));\n    }\n\n    /**"
            },
            {
              "step": 21,
              "variableName": "new NDLis",
              "startLine": 39,
              "startColumn": 17,
              "endLine": 46,
              "endColumn": 26,
              "uri": "djl-0.33.0/extensions/timeseries/src/main/java/ai/djl/timeseries/model/deepar/DeepARPredictionNetwork.java",
              "type": "NDList [<element>] : NDArray",
              "code": "            boolean training,\n            PairList<String, Object> params) {\n        NDList unrollInputs =\n                new NDList(\n                        inputs.get(0), // feat_static_cat\n                        inputs.get(1), // feat_static_real\n                        inputs.get(2), // past_time_feat"
            },
            {
              "step": 22,
              "variableName": "unrollInputs",
              "startLine": 47,
              "startColumn": 63,
              "endLine": 47,
              "endColumn": 75,
              "uri": "djl-0.33.0/extensions/timeseries/src/main/java/ai/djl/timeseries/model/deepar/DeepARPredictionNetwork.java",
              "type": "NDList [<element>] : NDArray",
              "code": "                        inputs.get(4), // past_observed_value\n                        inputs.get(5).get(\":, :1\") // future_time_feat\n                        );\n        NDList unrollOutput = unrollLaggedRnn(parameterStore, unrollInputs, training);\n        NDList state = new NDList(unrollOutput.get(\"hidden_state\"), unrollOutput.get(\"cell_state\"));\n        String[] argNames = distrOutput.getArgsArray();\n"
            },
            {
              "step": 23,
              "variableName": "NDList inputs",
              "startLine": 195,
              "startColumn": 57,
              "endLine": 195,
              "endColumn": 70,
              "uri": "djl-0.33.0/extensions/timeseries/src/main/java/ai/djl/timeseries/model/deepar/DeepARNetwork.java",
              "type": "NDList [<element>] : NDArray",
              "code": "     * @return a {@link NDList} containing arguments of the output distribution, scaling factor, raw\n     *     output of rnn, static input of rnn, output state of rnn\n     */\n    protected NDList unrollLaggedRnn(ParameterStore ps, NDList inputs, boolean training) {\n        try (NDManager scope = inputs.getManager().newSubManager()) {\n            scope.tempAttachAll(inputs);\n"
            },
            {
              "step": 24,
              "variableName": "inputs",
              "startLine": 202,
              "startColumn": 34,
              "endLine": 202,
              "endColumn": 40,
              "uri": "djl-0.33.0/extensions/timeseries/src/main/java/ai/djl/timeseries/model/deepar/DeepARNetwork.java",
              "type": "NDList [<element>] : NDArray",
              "code": "            NDArray featStaticCat = inputs.get(0);\n            NDArray featStaticReal = inputs.get(1);\n            NDArray pastTimeFeat = inputs.get(2);\n            NDArray pastTarget = inputs.get(3);\n            NDArray pastObservedValues = inputs.get(4);\n            NDArray futureTimeFeat = inputs.get(5);\n            NDArray futureTarget = inputs.size() > 6 ? inputs.get(6) : null;"
            },
            {
              "step": 25,
              "variableName": "inputs.get(3)",
              "startLine": 202,
              "startColumn": 34,
              "endLine": 202,
              "endColumn": 47,
              "uri": "djl-0.33.0/extensions/timeseries/src/main/java/ai/djl/timeseries/model/deepar/DeepARNetwork.java",
              "type": "NDArray",
              "code": "            NDArray featStaticCat = inputs.get(0);\n            NDArray featStaticReal = inputs.get(1);\n            NDArray pastTimeFeat = inputs.get(2);\n            NDArray pastTarget = inputs.get(3);\n            NDArray pastObservedValues = inputs.get(4);\n            NDArray futureTimeFeat = inputs.get(5);\n            NDArray futureTarget = inputs.size() > 6 ? inputs.get(6) : null;"
            },
            {
              "step": 26,
              "variableName": "pastTarget",
              "startLine": 207,
              "startColumn": 31,
              "endLine": 207,
              "endColumn": 41,
              "uri": "djl-0.33.0/extensions/timeseries/src/main/java/ai/djl/timeseries/model/deepar/DeepARNetwork.java",
              "type": "NDArray",
              "code": "            NDArray futureTimeFeat = inputs.get(5);\n            NDArray futureTarget = inputs.size() > 6 ? inputs.get(6) : null;\n\n            NDArray context = pastTarget.get(\":,{}:\", -contextLength);\n            NDArray observedContext = pastObservedValues.get(\":,{}:\", -contextLength);\n            NDArray scale =\n                    scaler.forward(ps, new NDList(context, observedContext), training).get(1);"
            },
            {
              "step": 27,
              "variableName": "get",
              "startLine": 636,
              "startColumn": 21,
              "endLine": 636,
              "endColumn": 24,
              "uri": "djl-0.33.0/api/src/main/java/ai/djl/ndarray/NDArray.java",
              "type": "NDArray",
              "code": "     * @return the partial {@code NDArray}\n     * @see NDIndex#NDIndex(String, Object...)\n     */\n    default NDArray get(String indices, Object... args) {\n        return get(new NDIndex(indices, args));\n    }\n"
            },
            {
              "step": 28,
              "variableName": "get(new NDIndex(indices, args))",
              "startLine": 637,
              "startColumn": 16,
              "endLine": 637,
              "endColumn": 47,
              "uri": "djl-0.33.0/api/src/main/java/ai/djl/ndarray/NDArray.java",
              "type": "NDArray",
              "code": "     * @see NDIndex#NDIndex(String, Object...)\n     */\n    default NDArray get(String indices, Object... args) {\n        return get(new NDIndex(indices, args));\n    }\n\n    /**"
            },
            {
              "step": 29,
              "variableName": "get",
              "startLine": 602,
              "startColumn": 21,
              "endLine": 602,
              "endColumn": 24,
              "uri": "djl-0.33.0/api/src/main/java/ai/djl/ndarray/NDArray.java",
              "type": "NDArray",
              "code": "     * @param index the section of this {@code NDArray} to return\n     * @return the partial {@code NDArray}\n     */\n    default NDArray get(NDIndex index) {\n        return get(getManager(), index);\n    }\n"
            },
            {
              "step": 30,
              "variableName": "get(getManager(), index)",
              "startLine": 603,
              "startColumn": 16,
              "endLine": 603,
              "endColumn": 40,
              "uri": "djl-0.33.0/api/src/main/java/ai/djl/ndarray/NDArray.java",
              "type": "NDArray",
              "code": "     * @return the partial {@code NDArray}\n     */\n    default NDArray get(NDIndex index) {\n        return get(getManager(), index);\n    }\n\n    /**"
            },
            {
              "step": 31,
              "variableName": "get",
              "startLine": 613,
              "startColumn": 21,
              "endLine": 613,
              "endColumn": 24,
              "uri": "djl-0.33.0/api/src/main/java/ai/djl/ndarray/NDArray.java",
              "type": "NDArray",
              "code": "     * @param index the section of this {@code NDArray} to return\n     * @return the partial {@code NDArray}\n     */\n    default NDArray get(NDManager manager, NDIndex index) {\n        return getNDArrayInternal().getIndexer(manager).get(this, index);\n    }\n"
            },
            {
              "step": 32,
              "variableName": "this",
              "startLine": 614,
              "startColumn": 61,
              "endLine": 614,
              "endColumn": 65,
              "uri": "djl-0.33.0/api/src/main/java/ai/djl/ndarray/NDArray.java",
              "type": "NDArray",
              "code": "     * @return the partial {@code NDArray}\n     */\n    default NDArray get(NDManager manager, NDIndex index) {\n        return getNDArrayInternal().getIndexer(manager).get(this, index);\n    }\n\n    /**"
            },
            {
              "step": 33,
              "variableName": "NDArray array",
              "startLine": 62,
              "startColumn": 24,
              "endLine": 62,
              "endColumn": 37,
              "uri": "djl-0.33.0/engines/pytorch/pytorch-engine/src/main/java/ai/djl/pytorch/engine/PtNDArrayIndexer.java",
              "type": "NDArray",
              "code": "\n    /** {@inheritDoc} */\n    @Override\n    public NDArray get(NDArray array, NDIndex index) {\n        if (index.getRank() == 0) {\n            if (array.getShape().isScalar()) {\n                return array.getManager() == manager"
            },
            {
              "step": 34,
              "variableName": "(PtNDArray) array",
              "startLine": 74,
              "startColumn": 38,
              "endLine": 74,
              "endColumn": 55,
              "uri": "djl-0.33.0/engines/pytorch/pytorch-engine/src/main/java/ai/djl/pytorch/engine/PtNDArrayIndexer.java",
              "type": "PtNDArray",
              "code": "        }\n\n        if (array == null || array instanceof PtNDArray) {\n            return JniUtils.indexAdv((PtNDArray) array, index, manager);\n        } else {\n            PtNDArray arrayNew =\n                    manager.create(array.toByteBuffer(), array.getShape(), array.getDataType());"
            },
            {
              "step": 35,
              "variableName": "PtNDArray ndArray",
              "startLine": 365,
              "startColumn": 38,
              "endLine": 365,
              "endColumn": 55,
              "uri": "djl-0.33.0/engines/pytorch/pytorch-engine/src/main/java/ai/djl/pytorch/jni/JniUtils.java",
              "type": "PtNDArray",
              "code": "    }\n\n    @SuppressWarnings(\"OptionalGetWithoutIsPresent\")\n    public static PtNDArray indexAdv(PtNDArray ndArray, NDIndex index, PtNDManager manager) {\n        if (ndArray == null) {\n            return ndArray;\n        }"
            },
            {
              "step": 36,
              "variableName": "ndArray",
              "startLine": 367,
              "startColumn": 20,
              "endLine": 367,
              "endColumn": 27,
              "uri": "djl-0.33.0/engines/pytorch/pytorch-engine/src/main/java/ai/djl/pytorch/jni/JniUtils.java",
              "type": "PtNDArray",
              "code": "    @SuppressWarnings(\"OptionalGetWithoutIsPresent\")\n    public static PtNDArray indexAdv(PtNDArray ndArray, NDIndex index, PtNDManager manager) {\n        if (ndArray == null) {\n            return ndArray;\n        }\n        List<NDIndexElement> indices = index.getIndices();\n        long torchIndexHandle = PyTorchLibrary.LIB.torchIndexInit(indices.size());"
            },
            {
              "step": 37,
              "variableName": "JniUtils.indexAdv((PtNDArray) array, index, manager)",
              "startLine": 74,
              "startColumn": 20,
              "endLine": 74,
              "endColumn": 72,
              "uri": "djl-0.33.0/engines/pytorch/pytorch-engine/src/main/java/ai/djl/pytorch/engine/PtNDArrayIndexer.java",
              "type": "PtNDArray",
              "code": "        }\n\n        if (array == null || array instanceof PtNDArray) {\n            return JniUtils.indexAdv((PtNDArray) array, index, manager);\n        } else {\n            PtNDArray arrayNew =\n                    manager.create(array.toByteBuffer(), array.getShape(), array.getDataType());"
            },
            {
              "step": 38,
              "variableName": "getNDArrayInternal().getIndexer(manager).get(this, index)",
              "startLine": 614,
              "startColumn": 16,
              "endLine": 614,
              "endColumn": 73,
              "uri": "djl-0.33.0/api/src/main/java/ai/djl/ndarray/NDArray.java",
              "type": "PtNDArray",
              "code": "     * @return the partial {@code NDArray}\n     */\n    default NDArray get(NDManager manager, NDIndex index) {\n        return getNDArrayInternal().getIndexer(manager).get(this, index);\n    }\n\n    /**"
            },
            {
              "step": 39,
              "variableName": "get(getManager(), index)",
              "startLine": 603,
              "startColumn": 16,
              "endLine": 603,
              "endColumn": 40,
              "uri": "djl-0.33.0/api/src/main/java/ai/djl/ndarray/NDArray.java",
              "type": "PtNDArray",
              "code": "     * @return the partial {@code NDArray}\n     */\n    default NDArray get(NDIndex index) {\n        return get(getManager(), index);\n    }\n\n    /**"
            },
            {
              "step": 40,
              "variableName": "get(new NDIndex(indices, args))",
              "startLine": 637,
              "startColumn": 16,
              "endLine": 637,
              "endColumn": 47,
              "uri": "djl-0.33.0/api/src/main/java/ai/djl/ndarray/NDArray.java",
              "type": "PtNDArray",
              "code": "     * @see NDIndex#NDIndex(String, Object...)\n     */\n    default NDArray get(String indices, Object... args) {\n        return get(new NDIndex(indices, args));\n    }\n\n    /**"
            },
            {
              "step": 41,
              "variableName": "pastTarget.get(\":,{}:\", -contextLength)",
              "startLine": 207,
              "startColumn": 31,
              "endLine": 207,
              "endColumn": 70,
              "uri": "djl-0.33.0/extensions/timeseries/src/main/java/ai/djl/timeseries/model/deepar/DeepARNetwork.java",
              "type": "PtNDArray",
              "code": "            NDArray futureTimeFeat = inputs.get(5);\n            NDArray futureTarget = inputs.size() > 6 ? inputs.get(6) : null;\n\n            NDArray context = pastTarget.get(\":,{}:\", -contextLength);\n            NDArray observedContext = pastObservedValues.get(\":,{}:\", -contextLength);\n            NDArray scale =\n                    scaler.forward(ps, new NDList(context, observedContext), training).get(1);"
            },
            {
              "step": 42,
              "variableName": "context",
              "startLine": 210,
              "startColumn": 51,
              "endLine": 210,
              "endColumn": 58,
              "uri": "djl-0.33.0/extensions/timeseries/src/main/java/ai/djl/timeseries/model/deepar/DeepARNetwork.java",
              "type": "PtNDArray",
              "code": "            NDArray context = pastTarget.get(\":,{}:\", -contextLength);\n            NDArray observedContext = pastObservedValues.get(\":,{}:\", -contextLength);\n            NDArray scale =\n                    scaler.forward(ps, new NDList(context, observedContext), training).get(1);\n\n            NDArray priorSequence = pastTarget.get(\":,:{}\", -contextLength).div(scale);\n            NDArray sequence ="
            },
            {
              "step": 43,
              "variableName": "new NDList(context, observedContext)",
              "startLine": 210,
              "startColumn": 40,
              "endLine": 210,
              "endColumn": 76,
              "uri": "djl-0.33.0/extensions/timeseries/src/main/java/ai/djl/timeseries/model/deepar/DeepARNetwork.java",
              "type": "NDArray[] [[]] : PtNDArray",
              "code": "            NDArray context = pastTarget.get(\":,{}:\", -contextLength);\n            NDArray observedContext = pastObservedValues.get(\":,{}:\", -contextLength);\n            NDArray scale =\n                    scaler.forward(ps, new NDList(context, observedContext), training).get(1);\n\n            NDArray priorSequence = pastTarget.get(\":,:{}\", -contextLength).div(scale);\n            NDArray sequence ="
            },
            {
              "step": 44,
              "variableName": "NDArray... arrays",
              "startLine": 76,
              "startColumn": 19,
              "endLine": 76,
              "endColumn": 36,
              "uri": "djl-0.33.0/api/src/main/java/ai/djl/ndarray/NDList.java",
              "type": "NDArray[] [[]] : PtNDArray",
              "code": "     *\n     * @param arrays the {@link NDArray}s\n     */\n    public NDList(NDArray... arrays) {\n        super(Arrays.asList(arrays));\n    }\n"
            },
            {
              "step": 45,
              "variableName": "arrays",
              "startLine": 77,
              "startColumn": 29,
              "endLine": 77,
              "endColumn": 35,
              "uri": "djl-0.33.0/api/src/main/java/ai/djl/ndarray/NDList.java",
              "type": "NDArray[] [[]] : PtNDArray",
              "code": "     * @param arrays the {@link NDArray}s\n     */\n    public NDList(NDArray... arrays) {\n        super(Arrays.asList(arrays));\n    }\n\n    /**"
            },
            {
              "step": 46,
              "variableName": "Arrays.asList(arrays)",
              "startLine": 77,
              "startColumn": 15,
              "endLine": 77,
              "endColumn": 36,
              "uri": "djl-0.33.0/api/src/main/java/ai/djl/ndarray/NDList.java",
              "type": "List [<element>] : PtNDArray",
              "code": "     * @param arrays the {@link NDArray}s\n     */\n    public NDList(NDArray... arrays) {\n        super(Arrays.asList(arrays));\n    }\n\n    /**"
            },
            {
              "step": 47,
              "variableName": "super(Arrays.asList(arrays));",
              "startLine": 77,
              "startColumn": 9,
              "endLine": 77,
              "endColumn": 38,
              "uri": "djl-0.33.0/api/src/main/java/ai/djl/ndarray/NDList.java",
              "type": "NDList [<element>] : PtNDArray",
              "code": "     * @param arrays the {@link NDArray}s\n     */\n    public NDList(NDArray... arrays) {\n        super(Arrays.asList(arrays));\n    }\n\n    /**"
            },
            {
              "step": 48,
              "variableName": "new NDList(context, observedContext)",
              "startLine": 210,
              "startColumn": 40,
              "endLine": 210,
              "endColumn": 76,
              "uri": "djl-0.33.0/extensions/timeseries/src/main/java/ai/djl/timeseries/model/deepar/DeepARNetwork.java",
              "type": "NDList [<element>] : PtNDArray",
              "code": "            NDArray context = pastTarget.get(\":,{}:\", -contextLength);\n            NDArray observedContext = pastObservedValues.get(\":,{}:\", -contextLength);\n            NDArray scale =\n                    scaler.forward(ps, new NDList(context, observedContext), training).get(1);\n\n            NDArray priorSequence = pastTarget.get(\":,:{}\", -contextLength).div(scale);\n            NDArray sequence ="
            },
            {
              "step": 49,
              "variableName": "NDList inputs",
              "startLine": 128,
              "startColumn": 59,
              "endLine": 128,
              "endColumn": 72,
              "uri": "djl-0.33.0/api/src/main/java/ai/djl/nn/Block.java",
              "type": "NDList [<element>] : PtNDArray",
              "code": "     * @param training true for a training forward pass (turn on dropout and layerNorm)\n     * @return the output of the forward pass\n     */\n    default NDList forward(ParameterStore parameterStore, NDList inputs, boolean training) {\n        return forward(parameterStore, inputs, training, null);\n    }\n"
            },
            {
              "step": 50,
              "variableName": "inputs",
              "startLine": 129,
              "startColumn": 40,
              "endLine": 129,
              "endColumn": 46,
              "uri": "djl-0.33.0/api/src/main/java/ai/djl/nn/Block.java",
              "type": "NDList [<element>] : PtNDArray",
              "code": "     * @return the output of the forward pass\n     */\n    default NDList forward(ParameterStore parameterStore, NDList inputs, boolean training) {\n        return forward(parameterStore, inputs, training, null);\n    }\n\n    /**"
            },
            {
              "step": 51,
              "variableName": "NDList inputs",
              "startLine": 72,
              "startColumn": 13,
              "endLine": 72,
              "endColumn": 26,
              "uri": "djl-0.33.0/api/src/main/java/ai/djl/nn/AbstractBaseBlock.java",
              "type": "NDList [<element>] : PtNDArray",
              "code": "    @Override\n    public final NDList forward(\n            ParameterStore parameterStore,\n            NDList inputs,\n            boolean training,\n            PairList<String, Object> params) {\n        if (training && !isInitialized()) {"
            },
            {
              "step": 52,
              "variableName": "inputs",
              "startLine": 79,
              "startColumn": 48,
              "endLine": 79,
              "endColumn": 54,
              "uri": "djl-0.33.0/api/src/main/java/ai/djl/nn/AbstractBaseBlock.java",
              "type": "NDList [<element>] : PtNDArray",
              "code": "            NDManager paramsManager = parameterStore.getManager();\n            initialize(paramsManager, DataType.FLOAT32, inputs.getShapes());\n        }\n        return forwardInternal(parameterStore, inputs, training, params);\n    }\n\n    /** {@inheritDoc} */"
            },
            {
              "step": 53,
              "variableName": "NDList inputs",
              "startLine": 185,
              "startColumn": 13,
              "endLine": 185,
              "endColumn": 26,
              "uri": "djl-0.33.0/api/src/main/java/ai/djl/nn/SequentialBlock.java",
              "type": "NDList [<element>] : PtNDArray",
              "code": "    @Override\n    protected NDList forwardInternal(\n            ParameterStore parameterStore,\n            NDList inputs,\n            boolean training,\n            PairList<String, Object> params) {\n        List<NDList> past = new ArrayList<>(children.size());"
            },
            {
              "step": 54,
              "variableName": "current",
              "startLine": 198,
              "startColumn": 16,
              "endLine": 198,
              "endColumn": 23,
              "uri": "djl-0.33.0/api/src/main/java/ai/djl/nn/SequentialBlock.java",
              "type": "NDList [<element>] : PtNDArray",
              "code": "            return new NDList(\n                    past.stream().flatMap(Collection::stream).collect(Collectors.toList()));\n        }\n        return current;\n    }\n\n    /** {@inheritDoc} */"
            },
            {
              "step": 55,
              "variableName": "forwardInternal(parameterStore, inputs, training, params)",
              "startLine": 79,
              "startColumn": 16,
              "endLine": 79,
              "endColumn": 73,
              "uri": "djl-0.33.0/api/src/main/java/ai/djl/nn/AbstractBaseBlock.java",
              "type": "NDList [<element>] : PtNDArray",
              "code": "            NDManager paramsManager = parameterStore.getManager();\n            initialize(paramsManager, DataType.FLOAT32, inputs.getShapes());\n        }\n        return forwardInternal(parameterStore, inputs, training, params);\n    }\n\n    /** {@inheritDoc} */"
            },
            {
              "step": 56,
              "variableName": "forward(parameterStore, inputs, training, null)",
              "startLine": 129,
              "startColumn": 16,
              "endLine": 129,
              "endColumn": 63,
              "uri": "djl-0.33.0/api/src/main/java/ai/djl/nn/Block.java",
              "type": "NDList [<element>] : PtNDArray",
              "code": "     * @return the output of the forward pass\n     */\n    default NDList forward(ParameterStore parameterStore, NDList inputs, boolean training) {\n        return forward(parameterStore, inputs, training, null);\n    }\n\n    /**"
            },
            {
              "step": 57,
              "variableName": "scaler.forward(ps, new NDList(context, observedContext), training)",
              "startLine": 210,
              "startColumn": 21,
              "endLine": 210,
              "endColumn": 87,
              "uri": "djl-0.33.0/extensions/timeseries/src/main/java/ai/djl/timeseries/model/deepar/DeepARNetwork.java",
              "type": "NDList [<element>] : PtNDArray",
              "code": "            NDArray context = pastTarget.get(\":,{}:\", -contextLength);\n            NDArray observedContext = pastObservedValues.get(\":,{}:\", -contextLength);\n            NDArray scale =\n                    scaler.forward(ps, new NDList(context, observedContext), training).get(1);\n\n            NDArray priorSequence = pastTarget.get(\":,:{}\", -contextLength).div(scale);\n            NDArray sequence ="
            },
            {
              "step": 58,
              "variableName": "scaler.forward(ps, new NDList(context, observedContext), training).get(1)",
              "startLine": 210,
              "startColumn": 21,
              "endLine": 210,
              "endColumn": 94,
              "uri": "djl-0.33.0/extensions/timeseries/src/main/java/ai/djl/timeseries/model/deepar/DeepARNetwork.java",
              "type": "PtNDArray",
              "code": "            NDArray context = pastTarget.get(\":,{}:\", -contextLength);\n            NDArray observedContext = pastObservedValues.get(\":,{}:\", -contextLength);\n            NDArray scale =\n                    scaler.forward(ps, new NDList(context, observedContext), training).get(1);\n\n            NDArray priorSequence = pastTarget.get(\":,:{}\", -contextLength).div(scale);\n            NDArray sequence ="
            },
            {
              "step": 59,
              "variableName": "scale",
              "startLine": 221,
              "startColumn": 77,
              "endLine": 221,
              "endColumn": 82,
              "uri": "djl-0.33.0/extensions/timeseries/src/main/java/ai/djl/timeseries/model/deepar/DeepARNetwork.java",
              "type": "PtNDArray",
              "code": "            NDArray embeddedCat =\n                    embedder.forward(ps, new NDList(featStaticCat), training).singletonOrThrow();\n            NDArray staticFeat =\n                    NDArrays.concat(new NDList(embeddedCat, featStaticReal, scale.log()), 1);\n            NDArray expandedStaticFeat =\n                    staticFeat.expandDims(1).repeat(1, sequence.getShape().get(1));\n"
            },
            {
              "step": 60,
              "variableName": "log",
              "startLine": 850,
              "startColumn": 22,
              "endLine": 850,
              "endColumn": 25,
              "uri": "djl-0.33.0/engines/pytorch/pytorch-engine/src/main/java/ai/djl/pytorch/engine/PtNDArray.java",
              "type": "PtNDArray",
              "code": "\n    /** {@inheritDoc} */\n    @Override\n    public PtNDArray log() {\n        return JniUtils.log(this);\n    }\n"
            },
            {
              "step": 61,
              "variableName": "this",
              "startLine": 851,
              "startColumn": 29,
              "endLine": 851,
              "endColumn": 33,
              "uri": "djl-0.33.0/engines/pytorch/pytorch-engine/src/main/java/ai/djl/pytorch/engine/PtNDArray.java",
              "type": "",
              "code": "    /** {@inheritDoc} */\n    @Override\n    public PtNDArray log() {\n        return JniUtils.log(this);\n    }\n\n    /** {@inheritDoc} */"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "pooledFirstToken",
              "startLine": 262,
              "startColumn": 24,
              "endLine": 262,
              "endColumn": 40,
              "uri": "djl-0.33.0/api/src/main/java/ai/djl/nn/transformer/BertBlock.java",
              "type": "NDArray",
              "code": "        NDArray firstToken = lastOutput.head().get(new NDIndex(\":,1,:\")).squeeze();\n        NDArray pooledFirstToken =\n                pooling.forward(ps, new NDList(firstToken), training).head().tanh();\n        lastOutput.add(pooledFirstToken);\n        return lastOutput;\n    }\n"
            },
            {
              "step": 1,
              "variableName": "lastOutput",
              "startLine": 262,
              "startColumn": 9,
              "endLine": 262,
              "endColumn": 19,
              "uri": "djl-0.33.0/api/src/main/java/ai/djl/nn/transformer/BertBlock.java",
              "type": "NDList [<element>] : NDArray",
              "code": "        NDArray firstToken = lastOutput.head().get(new NDIndex(\":,1,:\")).squeeze();\n        NDArray pooledFirstToken =\n                pooling.forward(ps, new NDList(firstToken), training).head().tanh();\n        lastOutput.add(pooledFirstToken);\n        return lastOutput;\n    }\n"
            },
            {
              "step": 2,
              "variableName": "lastOutput",
              "startLine": 263,
              "startColumn": 16,
              "endLine": 263,
              "endColumn": 26,
              "uri": "djl-0.33.0/api/src/main/java/ai/djl/nn/transformer/BertBlock.java",
              "type": "NDList [<element>] : NDArray",
              "code": "        NDArray pooledFirstToken =\n                pooling.forward(ps, new NDList(firstToken), training).head().tanh();\n        lastOutput.add(pooledFirstToken);\n        return lastOutput;\n    }\n\n    /**"
            },
            {
              "step": 3,
              "variableName": "forwardInternal(parameterStore, inputs, training, params)",
              "startLine": 79,
              "startColumn": 16,
              "endLine": 79,
              "endColumn": 73,
              "uri": "djl-0.33.0/api/src/main/java/ai/djl/nn/AbstractBaseBlock.java",
              "type": "NDList [<element>] : NDArray",
              "code": "            NDManager paramsManager = parameterStore.getManager();\n            initialize(paramsManager, DataType.FLOAT32, inputs.getShapes());\n        }\n        return forwardInternal(parameterStore, inputs, training, params);\n    }\n\n    /** {@inheritDoc} */"
            },
            {
              "step": 4,
              "variableName": "block.forward(parameterStore, inputs, true, params)",
              "startLine": 83,
              "startColumn": 20,
              "endLine": 83,
              "endColumn": 71,
              "uri": "djl-0.33.0/model-zoo/src/main/java/ai/djl/basicmodelzoo/nlp/SimpleTextDecoder.java",
              "type": "NDList [<element>] : NDArray",
              "code": "            boolean training,\n            PairList<String, Object> params) {\n        if (training) {\n            return block.forward(parameterStore, inputs, true, params);\n        }\n\n        Shape inputShape = inputs.get(0).getShape();"
            },
            {
              "step": 5,
              "variableName": "forwardInternal(parameterStore, inputs, training, params)",
              "startLine": 79,
              "startColumn": 16,
              "endLine": 79,
              "endColumn": 73,
              "uri": "djl-0.33.0/api/src/main/java/ai/djl/nn/AbstractBaseBlock.java",
              "type": "NDList [<element>] : NDArray",
              "code": "            NDManager paramsManager = parameterStore.getManager();\n            initialize(paramsManager, DataType.FLOAT32, inputs.getShapes());\n        }\n        return forwardInternal(parameterStore, inputs, training, params);\n    }\n\n    /** {@inheritDoc} */"
            },
            {
              "step": 6,
              "variableName": "forward(parameterStore, inputs, training, null)",
              "startLine": 129,
              "startColumn": 16,
              "endLine": 129,
              "endColumn": 63,
              "uri": "djl-0.33.0/api/src/main/java/ai/djl/nn/Block.java",
              "type": "NDList [<element>] : NDArray",
              "code": "     * @return the output of the forward pass\n     */\n    default NDList forward(ParameterStore parameterStore, NDList inputs, boolean training) {\n        return forward(parameterStore, inputs, training, null);\n    }\n\n    /**"
            },
            {
              "step": 7,
              "variableName": "scaler.forward(ps, new NDList(context, observedContext), training)",
              "startLine": 210,
              "startColumn": 21,
              "endLine": 210,
              "endColumn": 87,
              "uri": "djl-0.33.0/extensions/timeseries/src/main/java/ai/djl/timeseries/model/deepar/DeepARNetwork.java",
              "type": "NDList [<element>] : NDArray",
              "code": "            NDArray context = pastTarget.get(\":,{}:\", -contextLength);\n            NDArray observedContext = pastObservedValues.get(\":,{}:\", -contextLength);\n            NDArray scale =\n                    scaler.forward(ps, new NDList(context, observedContext), training).get(1);\n\n            NDArray priorSequence = pastTarget.get(\":,:{}\", -contextLength).div(scale);\n            NDArray sequence ="
            },
            {
              "step": 8,
              "variableName": "scaler.forward(ps, new NDList(context, observedContext), training).get(1)",
              "startLine": 210,
              "startColumn": 21,
              "endLine": 210,
              "endColumn": 94,
              "uri": "djl-0.33.0/extensions/timeseries/src/main/java/ai/djl/timeseries/model/deepar/DeepARNetwork.java",
              "type": "NDArray",
              "code": "            NDArray context = pastTarget.get(\":,{}:\", -contextLength);\n            NDArray observedContext = pastObservedValues.get(\":,{}:\", -contextLength);\n            NDArray scale =\n                    scaler.forward(ps, new NDList(context, observedContext), training).get(1);\n\n            NDArray priorSequence = pastTarget.get(\":,:{}\", -contextLength).div(scale);\n            NDArray sequence ="
            },
            {
              "step": 9,
              "variableName": "scale",
              "startLine": 221,
              "startColumn": 77,
              "endLine": 221,
              "endColumn": 82,
              "uri": "djl-0.33.0/extensions/timeseries/src/main/java/ai/djl/timeseries/model/deepar/DeepARNetwork.java",
              "type": "NDArray",
              "code": "            NDArray embeddedCat =\n                    embedder.forward(ps, new NDList(featStaticCat), training).singletonOrThrow();\n            NDArray staticFeat =\n                    NDArrays.concat(new NDList(embeddedCat, featStaticReal, scale.log()), 1);\n            NDArray expandedStaticFeat =\n                    staticFeat.expandDims(1).repeat(1, sequence.getShape().get(1));\n"
            },
            {
              "step": 10,
              "variableName": "log",
              "startLine": 850,
              "startColumn": 22,
              "endLine": 850,
              "endColumn": 25,
              "uri": "djl-0.33.0/engines/pytorch/pytorch-engine/src/main/java/ai/djl/pytorch/engine/PtNDArray.java",
              "type": "PtNDArray",
              "code": "\n    /** {@inheritDoc} */\n    @Override\n    public PtNDArray log() {\n        return JniUtils.log(this);\n    }\n"
            },
            {
              "step": 11,
              "variableName": "this",
              "startLine": 851,
              "startColumn": 29,
              "endLine": 851,
              "endColumn": 33,
              "uri": "djl-0.33.0/engines/pytorch/pytorch-engine/src/main/java/ai/djl/pytorch/engine/PtNDArray.java",
              "type": "",
              "code": "    /** {@inheritDoc} */\n    @Override\n    public PtNDArray log() {\n        return JniUtils.log(this);\n    }\n\n    /** {@inheritDoc} */"
            }
          ],
          "label": "No"
        }
      ]
    }
  ]
}