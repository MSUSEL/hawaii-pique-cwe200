{
  "201": [
    {
      "resultIndex": 51,
      "fileName": "WebdavResponseImpl.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "SESSIONSCOPED",
              "startLine": 50,
              "startColumn": 51,
              "endLine": 50,
              "endColumn": 64,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-jcr-server/src/main/java/org/apache/jackrabbit/webdav/jcr/lock/LockTokenMapper.java",
              "type": "String",
              "code": "    private static final String SESSIONSCOPED = \"4403ef44-4124-11e1-b965-00059a3c7a00\";\n    private static final String OPENSCOPED = \"dccce564-412e-11e1-b969-00059a3c7a00\";\n\n    private static final String SESSPREFIX = OL + SESSIONSCOPED + \":\";\n    private static final String OPENPREFIX = OL + OPENSCOPED + \":\";\n\n    public static String getDavLocktoken(Lock lock) throws RepositoryException {"
            },
            {
              "step": 1,
              "variableName": "OL + SESSIONSCOPED + \":\"",
              "startLine": 50,
              "startColumn": 46,
              "endLine": 50,
              "endColumn": 70,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-jcr-server/src/main/java/org/apache/jackrabbit/webdav/jcr/lock/LockTokenMapper.java",
              "type": "String",
              "code": "    private static final String SESSIONSCOPED = \"4403ef44-4124-11e1-b965-00059a3c7a00\";\n    private static final String OPENSCOPED = \"dccce564-412e-11e1-b969-00059a3c7a00\";\n\n    private static final String SESSPREFIX = OL + SESSIONSCOPED + \":\";\n    private static final String OPENPREFIX = OL + OPENSCOPED + \":\";\n\n    public static String getDavLocktoken(Lock lock) throws RepositoryException {"
            },
            {
              "step": 2,
              "variableName": "SESSPREFIX",
              "startLine": 50,
              "startColumn": 33,
              "endLine": 50,
              "endColumn": 43,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-jcr-server/src/main/java/org/apache/jackrabbit/webdav/jcr/lock/LockTokenMapper.java",
              "type": "String",
              "code": "    private static final String SESSIONSCOPED = \"4403ef44-4124-11e1-b965-00059a3c7a00\";\n    private static final String OPENSCOPED = \"dccce564-412e-11e1-b969-00059a3c7a00\";\n\n    private static final String SESSPREFIX = OL + SESSIONSCOPED + \":\";\n    private static final String OPENPREFIX = OL + OPENSCOPED + \":\";\n\n    public static String getDavLocktoken(Lock lock) throws RepositoryException {"
            },
            {
              "step": 3,
              "variableName": "SESSPREFIX",
              "startLine": 57,
              "startColumn": 20,
              "endLine": 57,
              "endColumn": 30,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-jcr-server/src/main/java/org/apache/jackrabbit/webdav/jcr/lock/LockTokenMapper.java",
              "type": "String",
              "code": "        String jcrLockToken = lock.getLockToken();\n\n        if (jcrLockToken == null) {\n            return SESSPREFIX + Text.escape(lock.getNode().getIdentifier());\n        } else {\n            return OPENPREFIX + Text.escape(jcrLockToken);\n        }"
            },
            {
              "step": 4,
              "variableName": "SESSPREFIX + Text.escape(lock.getNode().getIdentifier())",
              "startLine": 57,
              "startColumn": 20,
              "endLine": 57,
              "endColumn": 76,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-jcr-server/src/main/java/org/apache/jackrabbit/webdav/jcr/lock/LockTokenMapper.java",
              "type": "String",
              "code": "        String jcrLockToken = lock.getLockToken();\n\n        if (jcrLockToken == null) {\n            return SESSPREFIX + Text.escape(lock.getNode().getIdentifier());\n        } else {\n            return OPENPREFIX + Text.escape(jcrLockToken);\n        }"
            },
            {
              "step": 5,
              "variableName": "LockTokenMapper.getDavLocktoken(lock)",
              "startLine": 97,
              "startColumn": 20,
              "endLine": 97,
              "endColumn": 57,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-jcr-server/src/main/java/org/apache/jackrabbit/webdav/jcr/lock/JcrActiveLock.java",
              "type": "String",
              "code": "     */\n    public String getToken() {\n        try {\n            return LockTokenMapper.getDavLocktoken(lock);\n        } catch (RepositoryException e) {\n            // should never get here\n            log.warn(\"Unexpected error while retrieving node identifier for building a DAV specific lock token. {}\","
            },
            {
              "step": 6,
              "variableName": "lock.getToken()",
              "startLine": 997,
              "startColumn": 53,
              "endLine": 997,
              "endColumn": 68,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-webdav/src/main/java/org/apache/jackrabbit/webdav/server/AbstractWebdavServlet.java",
              "type": "String",
              "code": "            ActiveLock lock = resource.lock(lockInfo); \n\n            CodedUrlHeader header = new CodedUrlHeader(\n                    DavConstants.HEADER_LOCK_TOKEN, lock.getToken()); \n            response.setHeader(header.getHeaderName(), header.getHeaderValue()); \n\n            DavPropertySet propSet = new DavPropertySet(); "
            },
            {
              "step": 7,
              "variableName": "String headerValue",
              "startLine": 34,
              "startColumn": 46,
              "endLine": 34,
              "endColumn": 64,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-webdav/src/main/java/org/apache/jackrabbit/webdav/header/CodedUrlHeader.java",
              "type": "String",
              "code": "    private final String headerName;\n    private final String headerValue;\n\n    public CodedUrlHeader(String headerName, String headerValue) {\n        this.headerName = headerName;\n        if (headerValue != null && !(headerValue.startsWith(\"<\") && headerValue.endsWith(\">\"))) {\n            headerValue = \"<\" + headerValue + \">\";"
            },
            {
              "step": 8,
              "variableName": "headerValue",
              "startLine": 39,
              "startColumn": 28,
              "endLine": 39,
              "endColumn": 39,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-webdav/src/main/java/org/apache/jackrabbit/webdav/header/CodedUrlHeader.java",
              "type": "String",
              "code": "        if (headerValue != null && !(headerValue.startsWith(\"<\") && headerValue.endsWith(\">\"))) {\n            headerValue = \"<\" + headerValue + \">\";\n        }\n        this.headerValue = headerValue;\n    }\n\n    /**"
            },
            {
              "step": 9,
              "variableName": "this",
              "startLine": 39,
              "startColumn": 9,
              "endLine": 39,
              "endColumn": 13,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-webdav/src/main/java/org/apache/jackrabbit/webdav/header/CodedUrlHeader.java",
              "type": "CodedUrlHeader [headerValue] : String",
              "code": "        if (headerValue != null && !(headerValue.startsWith(\"<\") && headerValue.endsWith(\">\"))) {\n            headerValue = \"<\" + headerValue + \">\";\n        }\n        this.headerValue = headerValue;\n    }\n\n    /**"
            },
            {
              "step": 10,
              "variableName": "new CodedUrlHeader(",
              "startLine": 996,
              "startColumn": 37,
              "endLine": 997,
              "endColumn": 69,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-webdav/src/main/java/org/apache/jackrabbit/webdav/server/AbstractWebdavServlet.java",
              "type": "CodedUrlHeader [headerValue] : String",
              "code": "            // create a new lock\n            ActiveLock lock = resource.lock(lockInfo); \n\n            CodedUrlHeader header = new CodedUrlHeader(\n                    DavConstants.HEADER_LOCK_TOKEN, lock.getToken()); \n            response.setHeader(header.getHeaderName(), header.getHeaderValue()); \n"
            },
            {
              "step": 11,
              "variableName": "header",
              "startLine": 998,
              "startColumn": 56,
              "endLine": 998,
              "endColumn": 62,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-webdav/src/main/java/org/apache/jackrabbit/webdav/server/AbstractWebdavServlet.java",
              "type": "CodedUrlHeader [headerValue] : String",
              "code": "\n            CodedUrlHeader header = new CodedUrlHeader(\n                    DavConstants.HEADER_LOCK_TOKEN, lock.getToken()); \n            response.setHeader(header.getHeaderName(), header.getHeaderValue()); \n\n            DavPropertySet propSet = new DavPropertySet(); \n            propSet.add(new LockDiscovery(lock)); "
            },
            {
              "step": 12,
              "variableName": "getHeaderValue",
              "startLine": 58,
              "startColumn": 19,
              "endLine": 58,
              "endColumn": 33,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-webdav/src/main/java/org/apache/jackrabbit/webdav/header/CodedUrlHeader.java",
              "type": "CodedUrlHeader [headerValue] : String",
              "code": "     * @return value\n     * @see Header#getHeaderValue()\n     */\n    public String getHeaderValue() {\n        return headerValue;\n    }\n"
            },
            {
              "step": 13,
              "variableName": "headerValue",
              "startLine": 59,
              "startColumn": 16,
              "endLine": 59,
              "endColumn": 27,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-webdav/src/main/java/org/apache/jackrabbit/webdav/header/CodedUrlHeader.java",
              "type": "CodedUrlHeader [headerValue] : String",
              "code": "     * @see Header#getHeaderValue()\n     */\n    public String getHeaderValue() {\n        return headerValue;\n    }\n\n    /**"
            },
            {
              "step": 14,
              "variableName": "headerValue",
              "startLine": 59,
              "startColumn": 16,
              "endLine": 59,
              "endColumn": 27,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-webdav/src/main/java/org/apache/jackrabbit/webdav/header/CodedUrlHeader.java",
              "type": "String",
              "code": "     * @see Header#getHeaderValue()\n     */\n    public String getHeaderValue() {\n        return headerValue;\n    }\n\n    /**"
            },
            {
              "step": 15,
              "variableName": "header.getHeaderValue()",
              "startLine": 998,
              "startColumn": 56,
              "endLine": 998,
              "endColumn": 79,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-webdav/src/main/java/org/apache/jackrabbit/webdav/server/AbstractWebdavServlet.java",
              "type": "String",
              "code": "\n            CodedUrlHeader header = new CodedUrlHeader(\n                    DavConstants.HEADER_LOCK_TOKEN, lock.getToken()); \n            response.setHeader(header.getHeaderName(), header.getHeaderValue()); \n\n            DavPropertySet propSet = new DavPropertySet(); \n            propSet.add(new LockDiscovery(lock)); "
            },
            {
              "step": 16,
              "variableName": "String s1",
              "startLine": 256,
              "startColumn": 37,
              "endLine": 256,
              "endColumn": 46,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-webdav/src/main/java/org/apache/jackrabbit/webdav/WebdavResponseImpl.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public void setHeader(String s, String s1) {\n        httpResponse.setHeader(s, s1);\n    }\n"
            },
            {
              "step": 17,
              "variableName": "s1",
              "startLine": 257,
              "startColumn": 35,
              "endLine": 257,
              "endColumn": 37,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-webdav/src/main/java/org/apache/jackrabbit/webdav/WebdavResponseImpl.java",
              "type": "",
              "code": "\n    @Override\n    public void setHeader(String s, String s1) {\n        httpResponse.setHeader(s, s1);\n    }\n\n    @Override"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "OPENSCOPED",
              "startLine": 51,
              "startColumn": 51,
              "endLine": 51,
              "endColumn": 61,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-jcr-server/src/main/java/org/apache/jackrabbit/webdav/jcr/lock/LockTokenMapper.java",
              "type": "String",
              "code": "    private static final String OPENSCOPED = \"dccce564-412e-11e1-b969-00059a3c7a00\";\n\n    private static final String SESSPREFIX = OL + SESSIONSCOPED + \":\";\n    private static final String OPENPREFIX = OL + OPENSCOPED + \":\";\n\n    public static String getDavLocktoken(Lock lock) throws RepositoryException {\n        String jcrLockToken = lock.getLockToken();"
            },
            {
              "step": 1,
              "variableName": "OL + OPENSCOPED + \":\"",
              "startLine": 51,
              "startColumn": 46,
              "endLine": 51,
              "endColumn": 67,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-jcr-server/src/main/java/org/apache/jackrabbit/webdav/jcr/lock/LockTokenMapper.java",
              "type": "String",
              "code": "    private static final String OPENSCOPED = \"dccce564-412e-11e1-b969-00059a3c7a00\";\n\n    private static final String SESSPREFIX = OL + SESSIONSCOPED + \":\";\n    private static final String OPENPREFIX = OL + OPENSCOPED + \":\";\n\n    public static String getDavLocktoken(Lock lock) throws RepositoryException {\n        String jcrLockToken = lock.getLockToken();"
            },
            {
              "step": 2,
              "variableName": "OPENPREFIX",
              "startLine": 51,
              "startColumn": 33,
              "endLine": 51,
              "endColumn": 43,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-jcr-server/src/main/java/org/apache/jackrabbit/webdav/jcr/lock/LockTokenMapper.java",
              "type": "String",
              "code": "    private static final String OPENSCOPED = \"dccce564-412e-11e1-b969-00059a3c7a00\";\n\n    private static final String SESSPREFIX = OL + SESSIONSCOPED + \":\";\n    private static final String OPENPREFIX = OL + OPENSCOPED + \":\";\n\n    public static String getDavLocktoken(Lock lock) throws RepositoryException {\n        String jcrLockToken = lock.getLockToken();"
            },
            {
              "step": 3,
              "variableName": "OPENPREFIX",
              "startLine": 59,
              "startColumn": 20,
              "endLine": 59,
              "endColumn": 30,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-jcr-server/src/main/java/org/apache/jackrabbit/webdav/jcr/lock/LockTokenMapper.java",
              "type": "String",
              "code": "        if (jcrLockToken == null) {\n            return SESSPREFIX + Text.escape(lock.getNode().getIdentifier());\n        } else {\n            return OPENPREFIX + Text.escape(jcrLockToken);\n        }\n    }\n"
            },
            {
              "step": 4,
              "variableName": "OPENPREFIX + Text.escape(jcrLockToken)",
              "startLine": 59,
              "startColumn": 20,
              "endLine": 59,
              "endColumn": 58,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-jcr-server/src/main/java/org/apache/jackrabbit/webdav/jcr/lock/LockTokenMapper.java",
              "type": "String",
              "code": "        if (jcrLockToken == null) {\n            return SESSPREFIX + Text.escape(lock.getNode().getIdentifier());\n        } else {\n            return OPENPREFIX + Text.escape(jcrLockToken);\n        }\n    }\n"
            },
            {
              "step": 5,
              "variableName": "LockTokenMapper.getDavLocktoken(lock)",
              "startLine": 97,
              "startColumn": 20,
              "endLine": 97,
              "endColumn": 57,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-jcr-server/src/main/java/org/apache/jackrabbit/webdav/jcr/lock/JcrActiveLock.java",
              "type": "String",
              "code": "     */\n    public String getToken() {\n        try {\n            return LockTokenMapper.getDavLocktoken(lock);\n        } catch (RepositoryException e) {\n            // should never get here\n            log.warn(\"Unexpected error while retrieving node identifier for building a DAV specific lock token. {}\","
            },
            {
              "step": 6,
              "variableName": "lock.getToken()",
              "startLine": 997,
              "startColumn": 53,
              "endLine": 997,
              "endColumn": 68,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-webdav/src/main/java/org/apache/jackrabbit/webdav/server/AbstractWebdavServlet.java",
              "type": "String",
              "code": "            ActiveLock lock = resource.lock(lockInfo); \n\n            CodedUrlHeader header = new CodedUrlHeader(\n                    DavConstants.HEADER_LOCK_TOKEN, lock.getToken()); \n            response.setHeader(header.getHeaderName(), header.getHeaderValue()); \n\n            DavPropertySet propSet = new DavPropertySet(); "
            },
            {
              "step": 7,
              "variableName": "String headerValue",
              "startLine": 34,
              "startColumn": 46,
              "endLine": 34,
              "endColumn": 64,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-webdav/src/main/java/org/apache/jackrabbit/webdav/header/CodedUrlHeader.java",
              "type": "String",
              "code": "    private final String headerName;\n    private final String headerValue;\n\n    public CodedUrlHeader(String headerName, String headerValue) {\n        this.headerName = headerName;\n        if (headerValue != null && !(headerValue.startsWith(\"<\") && headerValue.endsWith(\">\"))) {\n            headerValue = \"<\" + headerValue + \">\";"
            },
            {
              "step": 8,
              "variableName": "headerValue",
              "startLine": 39,
              "startColumn": 28,
              "endLine": 39,
              "endColumn": 39,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-webdav/src/main/java/org/apache/jackrabbit/webdav/header/CodedUrlHeader.java",
              "type": "String",
              "code": "        if (headerValue != null && !(headerValue.startsWith(\"<\") && headerValue.endsWith(\">\"))) {\n            headerValue = \"<\" + headerValue + \">\";\n        }\n        this.headerValue = headerValue;\n    }\n\n    /**"
            },
            {
              "step": 9,
              "variableName": "this",
              "startLine": 39,
              "startColumn": 9,
              "endLine": 39,
              "endColumn": 13,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-webdav/src/main/java/org/apache/jackrabbit/webdav/header/CodedUrlHeader.java",
              "type": "CodedUrlHeader [headerValue] : String",
              "code": "        if (headerValue != null && !(headerValue.startsWith(\"<\") && headerValue.endsWith(\">\"))) {\n            headerValue = \"<\" + headerValue + \">\";\n        }\n        this.headerValue = headerValue;\n    }\n\n    /**"
            },
            {
              "step": 10,
              "variableName": "new CodedUrlHeader(",
              "startLine": 996,
              "startColumn": 37,
              "endLine": 997,
              "endColumn": 69,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-webdav/src/main/java/org/apache/jackrabbit/webdav/server/AbstractWebdavServlet.java",
              "type": "CodedUrlHeader [headerValue] : String",
              "code": "            // create a new lock\n            ActiveLock lock = resource.lock(lockInfo); \n\n            CodedUrlHeader header = new CodedUrlHeader(\n                    DavConstants.HEADER_LOCK_TOKEN, lock.getToken()); \n            response.setHeader(header.getHeaderName(), header.getHeaderValue()); \n"
            },
            {
              "step": 11,
              "variableName": "header",
              "startLine": 998,
              "startColumn": 56,
              "endLine": 998,
              "endColumn": 62,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-webdav/src/main/java/org/apache/jackrabbit/webdav/server/AbstractWebdavServlet.java",
              "type": "CodedUrlHeader [headerValue] : String",
              "code": "\n            CodedUrlHeader header = new CodedUrlHeader(\n                    DavConstants.HEADER_LOCK_TOKEN, lock.getToken()); \n            response.setHeader(header.getHeaderName(), header.getHeaderValue()); \n\n            DavPropertySet propSet = new DavPropertySet(); \n            propSet.add(new LockDiscovery(lock)); "
            },
            {
              "step": 12,
              "variableName": "getHeaderValue",
              "startLine": 58,
              "startColumn": 19,
              "endLine": 58,
              "endColumn": 33,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-webdav/src/main/java/org/apache/jackrabbit/webdav/header/CodedUrlHeader.java",
              "type": "CodedUrlHeader [headerValue] : String",
              "code": "     * @return value\n     * @see Header#getHeaderValue()\n     */\n    public String getHeaderValue() {\n        return headerValue;\n    }\n"
            },
            {
              "step": 13,
              "variableName": "headerValue",
              "startLine": 59,
              "startColumn": 16,
              "endLine": 59,
              "endColumn": 27,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-webdav/src/main/java/org/apache/jackrabbit/webdav/header/CodedUrlHeader.java",
              "type": "CodedUrlHeader [headerValue] : String",
              "code": "     * @see Header#getHeaderValue()\n     */\n    public String getHeaderValue() {\n        return headerValue;\n    }\n\n    /**"
            },
            {
              "step": 14,
              "variableName": "headerValue",
              "startLine": 59,
              "startColumn": 16,
              "endLine": 59,
              "endColumn": 27,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-webdav/src/main/java/org/apache/jackrabbit/webdav/header/CodedUrlHeader.java",
              "type": "String",
              "code": "     * @see Header#getHeaderValue()\n     */\n    public String getHeaderValue() {\n        return headerValue;\n    }\n\n    /**"
            },
            {
              "step": 15,
              "variableName": "header.getHeaderValue()",
              "startLine": 998,
              "startColumn": 56,
              "endLine": 998,
              "endColumn": 79,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-webdav/src/main/java/org/apache/jackrabbit/webdav/server/AbstractWebdavServlet.java",
              "type": "String",
              "code": "\n            CodedUrlHeader header = new CodedUrlHeader(\n                    DavConstants.HEADER_LOCK_TOKEN, lock.getToken()); \n            response.setHeader(header.getHeaderName(), header.getHeaderValue()); \n\n            DavPropertySet propSet = new DavPropertySet(); \n            propSet.add(new LockDiscovery(lock)); "
            },
            {
              "step": 16,
              "variableName": "String s1",
              "startLine": 256,
              "startColumn": 37,
              "endLine": 256,
              "endColumn": 46,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-webdav/src/main/java/org/apache/jackrabbit/webdav/WebdavResponseImpl.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public void setHeader(String s, String s1) {\n        httpResponse.setHeader(s, s1);\n    }\n"
            },
            {
              "step": 17,
              "variableName": "s1",
              "startLine": 257,
              "startColumn": 35,
              "endLine": 257,
              "endColumn": 37,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-webdav/src/main/java/org/apache/jackrabbit/webdav/WebdavResponseImpl.java",
              "type": "",
              "code": "\n    @Override\n    public void setHeader(String s, String s1) {\n        httpResponse.setHeader(s, s1);\n    }\n\n    @Override"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "token",
              "startLine": 81,
              "startColumn": 16,
              "endLine": 81,
              "endColumn": 21,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-webdav/src/main/java/org/apache/jackrabbit/webdav/lock/DefaultActiveLock.java",
              "type": "String",
              "code": "     * @see ActiveLock#getToken()\n     */\n    public String getToken() {\n        return token;\n    }\n\n    /**"
            },
            {
              "step": 1,
              "variableName": "lock.getToken()",
              "startLine": 997,
              "startColumn": 53,
              "endLine": 997,
              "endColumn": 68,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-webdav/src/main/java/org/apache/jackrabbit/webdav/server/AbstractWebdavServlet.java",
              "type": "String",
              "code": "            ActiveLock lock = resource.lock(lockInfo); \n\n            CodedUrlHeader header = new CodedUrlHeader(\n                    DavConstants.HEADER_LOCK_TOKEN, lock.getToken()); \n            response.setHeader(header.getHeaderName(), header.getHeaderValue()); \n\n            DavPropertySet propSet = new DavPropertySet(); "
            },
            {
              "step": 2,
              "variableName": "String headerValue",
              "startLine": 34,
              "startColumn": 46,
              "endLine": 34,
              "endColumn": 64,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-webdav/src/main/java/org/apache/jackrabbit/webdav/header/CodedUrlHeader.java",
              "type": "String",
              "code": "    private final String headerName;\n    private final String headerValue;\n\n    public CodedUrlHeader(String headerName, String headerValue) {\n        this.headerName = headerName;\n        if (headerValue != null && !(headerValue.startsWith(\"<\") && headerValue.endsWith(\">\"))) {\n            headerValue = \"<\" + headerValue + \">\";"
            },
            {
              "step": 3,
              "variableName": "headerValue",
              "startLine": 39,
              "startColumn": 28,
              "endLine": 39,
              "endColumn": 39,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-webdav/src/main/java/org/apache/jackrabbit/webdav/header/CodedUrlHeader.java",
              "type": "String",
              "code": "        if (headerValue != null && !(headerValue.startsWith(\"<\") && headerValue.endsWith(\">\"))) {\n            headerValue = \"<\" + headerValue + \">\";\n        }\n        this.headerValue = headerValue;\n    }\n\n    /**"
            },
            {
              "step": 4,
              "variableName": "this",
              "startLine": 39,
              "startColumn": 9,
              "endLine": 39,
              "endColumn": 13,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-webdav/src/main/java/org/apache/jackrabbit/webdav/header/CodedUrlHeader.java",
              "type": "CodedUrlHeader [headerValue] : String",
              "code": "        if (headerValue != null && !(headerValue.startsWith(\"<\") && headerValue.endsWith(\">\"))) {\n            headerValue = \"<\" + headerValue + \">\";\n        }\n        this.headerValue = headerValue;\n    }\n\n    /**"
            },
            {
              "step": 5,
              "variableName": "new CodedUrlHeader(",
              "startLine": 996,
              "startColumn": 37,
              "endLine": 997,
              "endColumn": 69,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-webdav/src/main/java/org/apache/jackrabbit/webdav/server/AbstractWebdavServlet.java",
              "type": "CodedUrlHeader [headerValue] : String",
              "code": "            // create a new lock\n            ActiveLock lock = resource.lock(lockInfo); \n\n            CodedUrlHeader header = new CodedUrlHeader(\n                    DavConstants.HEADER_LOCK_TOKEN, lock.getToken()); \n            response.setHeader(header.getHeaderName(), header.getHeaderValue()); \n"
            },
            {
              "step": 6,
              "variableName": "header",
              "startLine": 998,
              "startColumn": 56,
              "endLine": 998,
              "endColumn": 62,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-webdav/src/main/java/org/apache/jackrabbit/webdav/server/AbstractWebdavServlet.java",
              "type": "CodedUrlHeader [headerValue] : String",
              "code": "\n            CodedUrlHeader header = new CodedUrlHeader(\n                    DavConstants.HEADER_LOCK_TOKEN, lock.getToken()); \n            response.setHeader(header.getHeaderName(), header.getHeaderValue()); \n\n            DavPropertySet propSet = new DavPropertySet(); \n            propSet.add(new LockDiscovery(lock)); "
            },
            {
              "step": 7,
              "variableName": "getHeaderValue",
              "startLine": 58,
              "startColumn": 19,
              "endLine": 58,
              "endColumn": 33,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-webdav/src/main/java/org/apache/jackrabbit/webdav/header/CodedUrlHeader.java",
              "type": "CodedUrlHeader [headerValue] : String",
              "code": "     * @return value\n     * @see Header#getHeaderValue()\n     */\n    public String getHeaderValue() {\n        return headerValue;\n    }\n"
            },
            {
              "step": 8,
              "variableName": "headerValue",
              "startLine": 59,
              "startColumn": 16,
              "endLine": 59,
              "endColumn": 27,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-webdav/src/main/java/org/apache/jackrabbit/webdav/header/CodedUrlHeader.java",
              "type": "CodedUrlHeader [headerValue] : String",
              "code": "     * @see Header#getHeaderValue()\n     */\n    public String getHeaderValue() {\n        return headerValue;\n    }\n\n    /**"
            },
            {
              "step": 9,
              "variableName": "headerValue",
              "startLine": 59,
              "startColumn": 16,
              "endLine": 59,
              "endColumn": 27,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-webdav/src/main/java/org/apache/jackrabbit/webdav/header/CodedUrlHeader.java",
              "type": "String",
              "code": "     * @see Header#getHeaderValue()\n     */\n    public String getHeaderValue() {\n        return headerValue;\n    }\n\n    /**"
            },
            {
              "step": 10,
              "variableName": "header.getHeaderValue()",
              "startLine": 998,
              "startColumn": 56,
              "endLine": 998,
              "endColumn": 79,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-webdav/src/main/java/org/apache/jackrabbit/webdav/server/AbstractWebdavServlet.java",
              "type": "String",
              "code": "\n            CodedUrlHeader header = new CodedUrlHeader(\n                    DavConstants.HEADER_LOCK_TOKEN, lock.getToken()); \n            response.setHeader(header.getHeaderName(), header.getHeaderValue()); \n\n            DavPropertySet propSet = new DavPropertySet(); \n            propSet.add(new LockDiscovery(lock)); "
            },
            {
              "step": 11,
              "variableName": "String s1",
              "startLine": 256,
              "startColumn": 37,
              "endLine": 256,
              "endColumn": 46,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-webdav/src/main/java/org/apache/jackrabbit/webdav/WebdavResponseImpl.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public void setHeader(String s, String s1) {\n        httpResponse.setHeader(s, s1);\n    }\n"
            },
            {
              "step": 12,
              "variableName": "s1",
              "startLine": 257,
              "startColumn": 35,
              "endLine": 257,
              "endColumn": 37,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-webdav/src/main/java/org/apache/jackrabbit/webdav/WebdavResponseImpl.java",
              "type": "",
              "code": "\n    @Override\n    public void setHeader(String s, String s1) {\n        httpResponse.setHeader(s, s1);\n    }\n\n    @Override"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 52,
      "fileName": "AbstractWebdavServlet.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "SESSIONSCOPED",
              "startLine": 50,
              "startColumn": 51,
              "endLine": 50,
              "endColumn": 64,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-jcr-server/src/main/java/org/apache/jackrabbit/webdav/jcr/lock/LockTokenMapper.java",
              "type": "String",
              "code": "    private static final String SESSIONSCOPED = \"4403ef44-4124-11e1-b965-00059a3c7a00\";\n    private static final String OPENSCOPED = \"dccce564-412e-11e1-b969-00059a3c7a00\";\n\n    private static final String SESSPREFIX = OL + SESSIONSCOPED + \":\";\n    private static final String OPENPREFIX = OL + OPENSCOPED + \":\";\n\n    public static String getDavLocktoken(Lock lock) throws RepositoryException {"
            },
            {
              "step": 1,
              "variableName": "OL + SESSIONSCOPED + \":\"",
              "startLine": 50,
              "startColumn": 46,
              "endLine": 50,
              "endColumn": 70,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-jcr-server/src/main/java/org/apache/jackrabbit/webdav/jcr/lock/LockTokenMapper.java",
              "type": "String",
              "code": "    private static final String SESSIONSCOPED = \"4403ef44-4124-11e1-b965-00059a3c7a00\";\n    private static final String OPENSCOPED = \"dccce564-412e-11e1-b969-00059a3c7a00\";\n\n    private static final String SESSPREFIX = OL + SESSIONSCOPED + \":\";\n    private static final String OPENPREFIX = OL + OPENSCOPED + \":\";\n\n    public static String getDavLocktoken(Lock lock) throws RepositoryException {"
            },
            {
              "step": 2,
              "variableName": "SESSPREFIX",
              "startLine": 50,
              "startColumn": 33,
              "endLine": 50,
              "endColumn": 43,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-jcr-server/src/main/java/org/apache/jackrabbit/webdav/jcr/lock/LockTokenMapper.java",
              "type": "String",
              "code": "    private static final String SESSIONSCOPED = \"4403ef44-4124-11e1-b965-00059a3c7a00\";\n    private static final String OPENSCOPED = \"dccce564-412e-11e1-b969-00059a3c7a00\";\n\n    private static final String SESSPREFIX = OL + SESSIONSCOPED + \":\";\n    private static final String OPENPREFIX = OL + OPENSCOPED + \":\";\n\n    public static String getDavLocktoken(Lock lock) throws RepositoryException {"
            },
            {
              "step": 3,
              "variableName": "SESSPREFIX",
              "startLine": 57,
              "startColumn": 20,
              "endLine": 57,
              "endColumn": 30,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-jcr-server/src/main/java/org/apache/jackrabbit/webdav/jcr/lock/LockTokenMapper.java",
              "type": "String",
              "code": "        String jcrLockToken = lock.getLockToken();\n\n        if (jcrLockToken == null) {\n            return SESSPREFIX + Text.escape(lock.getNode().getIdentifier());\n        } else {\n            return OPENPREFIX + Text.escape(jcrLockToken);\n        }"
            },
            {
              "step": 4,
              "variableName": "SESSPREFIX + Text.escape(lock.getNode().getIdentifier())",
              "startLine": 57,
              "startColumn": 20,
              "endLine": 57,
              "endColumn": 76,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-jcr-server/src/main/java/org/apache/jackrabbit/webdav/jcr/lock/LockTokenMapper.java",
              "type": "String",
              "code": "        String jcrLockToken = lock.getLockToken();\n\n        if (jcrLockToken == null) {\n            return SESSPREFIX + Text.escape(lock.getNode().getIdentifier());\n        } else {\n            return OPENPREFIX + Text.escape(jcrLockToken);\n        }"
            },
            {
              "step": 5,
              "variableName": "LockTokenMapper.getDavLocktoken(lock)",
              "startLine": 97,
              "startColumn": 20,
              "endLine": 97,
              "endColumn": 57,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-jcr-server/src/main/java/org/apache/jackrabbit/webdav/jcr/lock/JcrActiveLock.java",
              "type": "String",
              "code": "     */\n    public String getToken() {\n        try {\n            return LockTokenMapper.getDavLocktoken(lock);\n        } catch (RepositoryException e) {\n            // should never get here\n            log.warn(\"Unexpected error while retrieving node identifier for building a DAV specific lock token. {}\","
            },
            {
              "step": 6,
              "variableName": "lock.getToken()",
              "startLine": 997,
              "startColumn": 53,
              "endLine": 997,
              "endColumn": 68,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-webdav/src/main/java/org/apache/jackrabbit/webdav/server/AbstractWebdavServlet.java",
              "type": "String",
              "code": "            ActiveLock lock = resource.lock(lockInfo); \n\n            CodedUrlHeader header = new CodedUrlHeader(\n                    DavConstants.HEADER_LOCK_TOKEN, lock.getToken()); \n            response.setHeader(header.getHeaderName(), header.getHeaderValue()); \n\n            DavPropertySet propSet = new DavPropertySet(); "
            },
            {
              "step": 7,
              "variableName": "String headerValue",
              "startLine": 34,
              "startColumn": 46,
              "endLine": 34,
              "endColumn": 64,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-webdav/src/main/java/org/apache/jackrabbit/webdav/header/CodedUrlHeader.java",
              "type": "String",
              "code": "    private final String headerName;\n    private final String headerValue;\n\n    public CodedUrlHeader(String headerName, String headerValue) {\n        this.headerName = headerName;\n        if (headerValue != null && !(headerValue.startsWith(\"<\") && headerValue.endsWith(\">\"))) {\n            headerValue = \"<\" + headerValue + \">\";"
            },
            {
              "step": 8,
              "variableName": "headerValue",
              "startLine": 39,
              "startColumn": 28,
              "endLine": 39,
              "endColumn": 39,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-webdav/src/main/java/org/apache/jackrabbit/webdav/header/CodedUrlHeader.java",
              "type": "String",
              "code": "        if (headerValue != null && !(headerValue.startsWith(\"<\") && headerValue.endsWith(\">\"))) {\n            headerValue = \"<\" + headerValue + \">\";\n        }\n        this.headerValue = headerValue;\n    }\n\n    /**"
            },
            {
              "step": 9,
              "variableName": "this",
              "startLine": 39,
              "startColumn": 9,
              "endLine": 39,
              "endColumn": 13,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-webdav/src/main/java/org/apache/jackrabbit/webdav/header/CodedUrlHeader.java",
              "type": "CodedUrlHeader [headerValue] : String",
              "code": "        if (headerValue != null && !(headerValue.startsWith(\"<\") && headerValue.endsWith(\">\"))) {\n            headerValue = \"<\" + headerValue + \">\";\n        }\n        this.headerValue = headerValue;\n    }\n\n    /**"
            },
            {
              "step": 10,
              "variableName": "new CodedUrlHeader(",
              "startLine": 996,
              "startColumn": 37,
              "endLine": 997,
              "endColumn": 69,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-webdav/src/main/java/org/apache/jackrabbit/webdav/server/AbstractWebdavServlet.java",
              "type": "CodedUrlHeader [headerValue] : String",
              "code": "            // create a new lock\n            ActiveLock lock = resource.lock(lockInfo); \n\n            CodedUrlHeader header = new CodedUrlHeader(\n                    DavConstants.HEADER_LOCK_TOKEN, lock.getToken()); \n            response.setHeader(header.getHeaderName(), header.getHeaderValue()); \n"
            },
            {
              "step": 11,
              "variableName": "header",
              "startLine": 998,
              "startColumn": 56,
              "endLine": 998,
              "endColumn": 62,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-webdav/src/main/java/org/apache/jackrabbit/webdav/server/AbstractWebdavServlet.java",
              "type": "CodedUrlHeader [headerValue] : String",
              "code": "\n            CodedUrlHeader header = new CodedUrlHeader(\n                    DavConstants.HEADER_LOCK_TOKEN, lock.getToken()); \n            response.setHeader(header.getHeaderName(), header.getHeaderValue()); \n\n            DavPropertySet propSet = new DavPropertySet(); \n            propSet.add(new LockDiscovery(lock)); "
            },
            {
              "step": 12,
              "variableName": "getHeaderValue",
              "startLine": 58,
              "startColumn": 19,
              "endLine": 58,
              "endColumn": 33,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-webdav/src/main/java/org/apache/jackrabbit/webdav/header/CodedUrlHeader.java",
              "type": "CodedUrlHeader [headerValue] : String",
              "code": "     * @return value\n     * @see Header#getHeaderValue()\n     */\n    public String getHeaderValue() {\n        return headerValue;\n    }\n"
            },
            {
              "step": 13,
              "variableName": "headerValue",
              "startLine": 59,
              "startColumn": 16,
              "endLine": 59,
              "endColumn": 27,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-webdav/src/main/java/org/apache/jackrabbit/webdav/header/CodedUrlHeader.java",
              "type": "CodedUrlHeader [headerValue] : String",
              "code": "     * @see Header#getHeaderValue()\n     */\n    public String getHeaderValue() {\n        return headerValue;\n    }\n\n    /**"
            },
            {
              "step": 14,
              "variableName": "headerValue",
              "startLine": 59,
              "startColumn": 16,
              "endLine": 59,
              "endColumn": 27,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-webdav/src/main/java/org/apache/jackrabbit/webdav/header/CodedUrlHeader.java",
              "type": "String",
              "code": "     * @see Header#getHeaderValue()\n     */\n    public String getHeaderValue() {\n        return headerValue;\n    }\n\n    /**"
            },
            {
              "step": 15,
              "variableName": "header.getHeaderValue()",
              "startLine": 998,
              "startColumn": 56,
              "endLine": 998,
              "endColumn": 79,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-webdav/src/main/java/org/apache/jackrabbit/webdav/server/AbstractWebdavServlet.java",
              "type": "",
              "code": "\n            CodedUrlHeader header = new CodedUrlHeader(\n                    DavConstants.HEADER_LOCK_TOKEN, lock.getToken()); \n            response.setHeader(header.getHeaderName(), header.getHeaderValue()); \n\n            DavPropertySet propSet = new DavPropertySet(); \n            propSet.add(new LockDiscovery(lock)); "
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "OPENSCOPED",
              "startLine": 51,
              "startColumn": 51,
              "endLine": 51,
              "endColumn": 61,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-jcr-server/src/main/java/org/apache/jackrabbit/webdav/jcr/lock/LockTokenMapper.java",
              "type": "String",
              "code": "    private static final String OPENSCOPED = \"dccce564-412e-11e1-b969-00059a3c7a00\";\n\n    private static final String SESSPREFIX = OL + SESSIONSCOPED + \":\";\n    private static final String OPENPREFIX = OL + OPENSCOPED + \":\";\n\n    public static String getDavLocktoken(Lock lock) throws RepositoryException {\n        String jcrLockToken = lock.getLockToken();"
            },
            {
              "step": 1,
              "variableName": "OL + OPENSCOPED + \":\"",
              "startLine": 51,
              "startColumn": 46,
              "endLine": 51,
              "endColumn": 67,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-jcr-server/src/main/java/org/apache/jackrabbit/webdav/jcr/lock/LockTokenMapper.java",
              "type": "String",
              "code": "    private static final String OPENSCOPED = \"dccce564-412e-11e1-b969-00059a3c7a00\";\n\n    private static final String SESSPREFIX = OL + SESSIONSCOPED + \":\";\n    private static final String OPENPREFIX = OL + OPENSCOPED + \":\";\n\n    public static String getDavLocktoken(Lock lock) throws RepositoryException {\n        String jcrLockToken = lock.getLockToken();"
            },
            {
              "step": 2,
              "variableName": "OPENPREFIX",
              "startLine": 51,
              "startColumn": 33,
              "endLine": 51,
              "endColumn": 43,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-jcr-server/src/main/java/org/apache/jackrabbit/webdav/jcr/lock/LockTokenMapper.java",
              "type": "String",
              "code": "    private static final String OPENSCOPED = \"dccce564-412e-11e1-b969-00059a3c7a00\";\n\n    private static final String SESSPREFIX = OL + SESSIONSCOPED + \":\";\n    private static final String OPENPREFIX = OL + OPENSCOPED + \":\";\n\n    public static String getDavLocktoken(Lock lock) throws RepositoryException {\n        String jcrLockToken = lock.getLockToken();"
            },
            {
              "step": 3,
              "variableName": "OPENPREFIX",
              "startLine": 59,
              "startColumn": 20,
              "endLine": 59,
              "endColumn": 30,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-jcr-server/src/main/java/org/apache/jackrabbit/webdav/jcr/lock/LockTokenMapper.java",
              "type": "String",
              "code": "        if (jcrLockToken == null) {\n            return SESSPREFIX + Text.escape(lock.getNode().getIdentifier());\n        } else {\n            return OPENPREFIX + Text.escape(jcrLockToken);\n        }\n    }\n"
            },
            {
              "step": 4,
              "variableName": "OPENPREFIX + Text.escape(jcrLockToken)",
              "startLine": 59,
              "startColumn": 20,
              "endLine": 59,
              "endColumn": 58,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-jcr-server/src/main/java/org/apache/jackrabbit/webdav/jcr/lock/LockTokenMapper.java",
              "type": "String",
              "code": "        if (jcrLockToken == null) {\n            return SESSPREFIX + Text.escape(lock.getNode().getIdentifier());\n        } else {\n            return OPENPREFIX + Text.escape(jcrLockToken);\n        }\n    }\n"
            },
            {
              "step": 5,
              "variableName": "LockTokenMapper.getDavLocktoken(lock)",
              "startLine": 97,
              "startColumn": 20,
              "endLine": 97,
              "endColumn": 57,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-jcr-server/src/main/java/org/apache/jackrabbit/webdav/jcr/lock/JcrActiveLock.java",
              "type": "String",
              "code": "     */\n    public String getToken() {\n        try {\n            return LockTokenMapper.getDavLocktoken(lock);\n        } catch (RepositoryException e) {\n            // should never get here\n            log.warn(\"Unexpected error while retrieving node identifier for building a DAV specific lock token. {}\","
            },
            {
              "step": 6,
              "variableName": "lock.getToken()",
              "startLine": 997,
              "startColumn": 53,
              "endLine": 997,
              "endColumn": 68,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-webdav/src/main/java/org/apache/jackrabbit/webdav/server/AbstractWebdavServlet.java",
              "type": "String",
              "code": "            ActiveLock lock = resource.lock(lockInfo); \n\n            CodedUrlHeader header = new CodedUrlHeader(\n                    DavConstants.HEADER_LOCK_TOKEN, lock.getToken()); \n            response.setHeader(header.getHeaderName(), header.getHeaderValue()); \n\n            DavPropertySet propSet = new DavPropertySet(); "
            },
            {
              "step": 7,
              "variableName": "String headerValue",
              "startLine": 34,
              "startColumn": 46,
              "endLine": 34,
              "endColumn": 64,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-webdav/src/main/java/org/apache/jackrabbit/webdav/header/CodedUrlHeader.java",
              "type": "String",
              "code": "    private final String headerName;\n    private final String headerValue;\n\n    public CodedUrlHeader(String headerName, String headerValue) {\n        this.headerName = headerName;\n        if (headerValue != null && !(headerValue.startsWith(\"<\") && headerValue.endsWith(\">\"))) {\n            headerValue = \"<\" + headerValue + \">\";"
            },
            {
              "step": 8,
              "variableName": "headerValue",
              "startLine": 39,
              "startColumn": 28,
              "endLine": 39,
              "endColumn": 39,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-webdav/src/main/java/org/apache/jackrabbit/webdav/header/CodedUrlHeader.java",
              "type": "String",
              "code": "        if (headerValue != null && !(headerValue.startsWith(\"<\") && headerValue.endsWith(\">\"))) {\n            headerValue = \"<\" + headerValue + \">\";\n        }\n        this.headerValue = headerValue;\n    }\n\n    /**"
            },
            {
              "step": 9,
              "variableName": "this",
              "startLine": 39,
              "startColumn": 9,
              "endLine": 39,
              "endColumn": 13,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-webdav/src/main/java/org/apache/jackrabbit/webdav/header/CodedUrlHeader.java",
              "type": "CodedUrlHeader [headerValue] : String",
              "code": "        if (headerValue != null && !(headerValue.startsWith(\"<\") && headerValue.endsWith(\">\"))) {\n            headerValue = \"<\" + headerValue + \">\";\n        }\n        this.headerValue = headerValue;\n    }\n\n    /**"
            },
            {
              "step": 10,
              "variableName": "new CodedUrlHeader(",
              "startLine": 996,
              "startColumn": 37,
              "endLine": 997,
              "endColumn": 69,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-webdav/src/main/java/org/apache/jackrabbit/webdav/server/AbstractWebdavServlet.java",
              "type": "CodedUrlHeader [headerValue] : String",
              "code": "            // create a new lock\n            ActiveLock lock = resource.lock(lockInfo); \n\n            CodedUrlHeader header = new CodedUrlHeader(\n                    DavConstants.HEADER_LOCK_TOKEN, lock.getToken()); \n            response.setHeader(header.getHeaderName(), header.getHeaderValue()); \n"
            },
            {
              "step": 11,
              "variableName": "header",
              "startLine": 998,
              "startColumn": 56,
              "endLine": 998,
              "endColumn": 62,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-webdav/src/main/java/org/apache/jackrabbit/webdav/server/AbstractWebdavServlet.java",
              "type": "CodedUrlHeader [headerValue] : String",
              "code": "\n            CodedUrlHeader header = new CodedUrlHeader(\n                    DavConstants.HEADER_LOCK_TOKEN, lock.getToken()); \n            response.setHeader(header.getHeaderName(), header.getHeaderValue()); \n\n            DavPropertySet propSet = new DavPropertySet(); \n            propSet.add(new LockDiscovery(lock)); "
            },
            {
              "step": 12,
              "variableName": "getHeaderValue",
              "startLine": 58,
              "startColumn": 19,
              "endLine": 58,
              "endColumn": 33,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-webdav/src/main/java/org/apache/jackrabbit/webdav/header/CodedUrlHeader.java",
              "type": "CodedUrlHeader [headerValue] : String",
              "code": "     * @return value\n     * @see Header#getHeaderValue()\n     */\n    public String getHeaderValue() {\n        return headerValue;\n    }\n"
            },
            {
              "step": 13,
              "variableName": "headerValue",
              "startLine": 59,
              "startColumn": 16,
              "endLine": 59,
              "endColumn": 27,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-webdav/src/main/java/org/apache/jackrabbit/webdav/header/CodedUrlHeader.java",
              "type": "CodedUrlHeader [headerValue] : String",
              "code": "     * @see Header#getHeaderValue()\n     */\n    public String getHeaderValue() {\n        return headerValue;\n    }\n\n    /**"
            },
            {
              "step": 14,
              "variableName": "headerValue",
              "startLine": 59,
              "startColumn": 16,
              "endLine": 59,
              "endColumn": 27,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-webdav/src/main/java/org/apache/jackrabbit/webdav/header/CodedUrlHeader.java",
              "type": "String",
              "code": "     * @see Header#getHeaderValue()\n     */\n    public String getHeaderValue() {\n        return headerValue;\n    }\n\n    /**"
            },
            {
              "step": 15,
              "variableName": "header.getHeaderValue()",
              "startLine": 998,
              "startColumn": 56,
              "endLine": 998,
              "endColumn": 79,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-webdav/src/main/java/org/apache/jackrabbit/webdav/server/AbstractWebdavServlet.java",
              "type": "",
              "code": "\n            CodedUrlHeader header = new CodedUrlHeader(\n                    DavConstants.HEADER_LOCK_TOKEN, lock.getToken()); \n            response.setHeader(header.getHeaderName(), header.getHeaderValue()); \n\n            DavPropertySet propSet = new DavPropertySet(); \n            propSet.add(new LockDiscovery(lock)); "
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "token",
              "startLine": 81,
              "startColumn": 16,
              "endLine": 81,
              "endColumn": 21,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-webdav/src/main/java/org/apache/jackrabbit/webdav/lock/DefaultActiveLock.java",
              "type": "String",
              "code": "     * @see ActiveLock#getToken()\n     */\n    public String getToken() {\n        return token;\n    }\n\n    /**"
            },
            {
              "step": 1,
              "variableName": "lock.getToken()",
              "startLine": 997,
              "startColumn": 53,
              "endLine": 997,
              "endColumn": 68,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-webdav/src/main/java/org/apache/jackrabbit/webdav/server/AbstractWebdavServlet.java",
              "type": "String",
              "code": "            ActiveLock lock = resource.lock(lockInfo); \n\n            CodedUrlHeader header = new CodedUrlHeader(\n                    DavConstants.HEADER_LOCK_TOKEN, lock.getToken()); \n            response.setHeader(header.getHeaderName(), header.getHeaderValue()); \n\n            DavPropertySet propSet = new DavPropertySet(); "
            },
            {
              "step": 2,
              "variableName": "String headerValue",
              "startLine": 34,
              "startColumn": 46,
              "endLine": 34,
              "endColumn": 64,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-webdav/src/main/java/org/apache/jackrabbit/webdav/header/CodedUrlHeader.java",
              "type": "String",
              "code": "    private final String headerName;\n    private final String headerValue;\n\n    public CodedUrlHeader(String headerName, String headerValue) {\n        this.headerName = headerName;\n        if (headerValue != null && !(headerValue.startsWith(\"<\") && headerValue.endsWith(\">\"))) {\n            headerValue = \"<\" + headerValue + \">\";"
            },
            {
              "step": 3,
              "variableName": "headerValue",
              "startLine": 39,
              "startColumn": 28,
              "endLine": 39,
              "endColumn": 39,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-webdav/src/main/java/org/apache/jackrabbit/webdav/header/CodedUrlHeader.java",
              "type": "String",
              "code": "        if (headerValue != null && !(headerValue.startsWith(\"<\") && headerValue.endsWith(\">\"))) {\n            headerValue = \"<\" + headerValue + \">\";\n        }\n        this.headerValue = headerValue;\n    }\n\n    /**"
            },
            {
              "step": 4,
              "variableName": "this",
              "startLine": 39,
              "startColumn": 9,
              "endLine": 39,
              "endColumn": 13,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-webdav/src/main/java/org/apache/jackrabbit/webdav/header/CodedUrlHeader.java",
              "type": "CodedUrlHeader [headerValue] : String",
              "code": "        if (headerValue != null && !(headerValue.startsWith(\"<\") && headerValue.endsWith(\">\"))) {\n            headerValue = \"<\" + headerValue + \">\";\n        }\n        this.headerValue = headerValue;\n    }\n\n    /**"
            },
            {
              "step": 5,
              "variableName": "new CodedUrlHeader(",
              "startLine": 996,
              "startColumn": 37,
              "endLine": 997,
              "endColumn": 69,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-webdav/src/main/java/org/apache/jackrabbit/webdav/server/AbstractWebdavServlet.java",
              "type": "CodedUrlHeader [headerValue] : String",
              "code": "            // create a new lock\n            ActiveLock lock = resource.lock(lockInfo); \n\n            CodedUrlHeader header = new CodedUrlHeader(\n                    DavConstants.HEADER_LOCK_TOKEN, lock.getToken()); \n            response.setHeader(header.getHeaderName(), header.getHeaderValue()); \n"
            },
            {
              "step": 6,
              "variableName": "header",
              "startLine": 998,
              "startColumn": 56,
              "endLine": 998,
              "endColumn": 62,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-webdav/src/main/java/org/apache/jackrabbit/webdav/server/AbstractWebdavServlet.java",
              "type": "CodedUrlHeader [headerValue] : String",
              "code": "\n            CodedUrlHeader header = new CodedUrlHeader(\n                    DavConstants.HEADER_LOCK_TOKEN, lock.getToken()); \n            response.setHeader(header.getHeaderName(), header.getHeaderValue()); \n\n            DavPropertySet propSet = new DavPropertySet(); \n            propSet.add(new LockDiscovery(lock)); "
            },
            {
              "step": 7,
              "variableName": "getHeaderValue",
              "startLine": 58,
              "startColumn": 19,
              "endLine": 58,
              "endColumn": 33,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-webdav/src/main/java/org/apache/jackrabbit/webdav/header/CodedUrlHeader.java",
              "type": "CodedUrlHeader [headerValue] : String",
              "code": "     * @return value\n     * @see Header#getHeaderValue()\n     */\n    public String getHeaderValue() {\n        return headerValue;\n    }\n"
            },
            {
              "step": 8,
              "variableName": "headerValue",
              "startLine": 59,
              "startColumn": 16,
              "endLine": 59,
              "endColumn": 27,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-webdav/src/main/java/org/apache/jackrabbit/webdav/header/CodedUrlHeader.java",
              "type": "CodedUrlHeader [headerValue] : String",
              "code": "     * @see Header#getHeaderValue()\n     */\n    public String getHeaderValue() {\n        return headerValue;\n    }\n\n    /**"
            },
            {
              "step": 9,
              "variableName": "headerValue",
              "startLine": 59,
              "startColumn": 16,
              "endLine": 59,
              "endColumn": 27,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-webdav/src/main/java/org/apache/jackrabbit/webdav/header/CodedUrlHeader.java",
              "type": "String",
              "code": "     * @see Header#getHeaderValue()\n     */\n    public String getHeaderValue() {\n        return headerValue;\n    }\n\n    /**"
            },
            {
              "step": 10,
              "variableName": "header.getHeaderValue()",
              "startLine": 998,
              "startColumn": 56,
              "endLine": 998,
              "endColumn": 79,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-webdav/src/main/java/org/apache/jackrabbit/webdav/server/AbstractWebdavServlet.java",
              "type": "",
              "code": "\n            CodedUrlHeader header = new CodedUrlHeader(\n                    DavConstants.HEADER_LOCK_TOKEN, lock.getToken()); \n            response.setHeader(header.getHeaderName(), header.getHeaderValue()); \n\n            DavPropertySet propSet = new DavPropertySet(); \n            propSet.add(new LockDiscovery(lock)); "
            }
          ],
          "label": "No"
        }
      ]
    }
  ],
  "208": [
    {
      "resultIndex": 0,
      "fileName": "BasicCredentialsProvider.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "request.getHeader(DavConstants.HEADER_AUTHORIZATION)",
              "startLine": 82,
              "startColumn": 33,
              "endLine": 82,
              "endColumn": 85,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-jcr-server/src/main/java/org/apache/jackrabbit/server/BasicCredentialsProvider.java",
              "type": "String",
              "code": "    public Credentials getCredentials(HttpServletRequest request)\n            throws LoginException, ServletException {\n        try {\n            String authHeader = request.getHeader(DavConstants.HEADER_AUTHORIZATION);\n            if (authHeader != null) {\n                String[] authStr = authHeader.split(\" \");\n                if (authStr.length >= 2 && authStr[0].equalsIgnoreCase(HttpServletRequest.BASIC_AUTH)) {"
            },
            {
              "step": 1,
              "variableName": "authHeader",
              "startLine": 84,
              "startColumn": 36,
              "endLine": 84,
              "endColumn": 46,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-jcr-server/src/main/java/org/apache/jackrabbit/server/BasicCredentialsProvider.java",
              "type": "String",
              "code": "        try {\n            String authHeader = request.getHeader(DavConstants.HEADER_AUTHORIZATION);\n            if (authHeader != null) {\n                String[] authStr = authHeader.split(\" \");\n                if (authStr.length >= 2 && authStr[0].equalsIgnoreCase(HttpServletRequest.BASIC_AUTH)) {\n                    ByteArrayOutputStream out = new ByteArrayOutputStream();\n                    Base64.decode(authStr[1].toCharArray(), out);"
            },
            {
              "step": 2,
              "variableName": "authHeader.split(\" \")",
              "startLine": 84,
              "startColumn": 36,
              "endLine": 84,
              "endColumn": 57,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-jcr-server/src/main/java/org/apache/jackrabbit/server/BasicCredentialsProvider.java",
              "type": "String[]",
              "code": "        try {\n            String authHeader = request.getHeader(DavConstants.HEADER_AUTHORIZATION);\n            if (authHeader != null) {\n                String[] authStr = authHeader.split(\" \");\n                if (authStr.length >= 2 && authStr[0].equalsIgnoreCase(HttpServletRequest.BASIC_AUTH)) {\n                    ByteArrayOutputStream out = new ByteArrayOutputStream();\n                    Base64.decode(authStr[1].toCharArray(), out);"
            },
            {
              "step": 3,
              "variableName": "authStr[0]",
              "startLine": 85,
              "startColumn": 44,
              "endLine": 85,
              "endColumn": 54,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-jcr-server/src/main/java/org/apache/jackrabbit/server/BasicCredentialsProvider.java",
              "type": "",
              "code": "            String authHeader = request.getHeader(DavConstants.HEADER_AUTHORIZATION);\n            if (authHeader != null) {\n                String[] authStr = authHeader.split(\" \");\n                if (authStr.length >= 2 && authStr[0].equalsIgnoreCase(HttpServletRequest.BASIC_AUTH)) {\n                    ByteArrayOutputStream out = new ByteArrayOutputStream();\n                    Base64.decode(authStr[1].toCharArray(), out);\n                    String decAuthStr = out.toString(\"ISO-8859-1\");"
            }
          ],
          "label": "No"
        }
      ]
    }
  ],
  "209": [
    {
      "resultIndex": 47,
      "fileName": "XPath.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "expected",
              "startLine": 108,
              "startColumn": 9,
              "endLine": 108,
              "endColumn": 17,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/query/xpath/ParseException.java",
              "type": "StringBuffer",
              "code": "        maxSize = expectedTokenSequences[i].length;\n      }\n      for (int j = 0; j < expectedTokenSequences[i].length; j++) {\n        expected.append(tokenImage[expectedTokenSequences[i][j]]).append(\" \");\n      }\n      if (expectedTokenSequences[i][expectedTokenSequences[i].length - 1] != 0) {\n        expected.append(\"...\");"
            },
            {
              "step": 1,
              "variableName": "expected",
              "startLine": 133,
              "startColumn": 15,
              "endLine": 133,
              "endColumn": 23,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/query/xpath/ParseException.java",
              "type": "StringBuffer",
              "code": "    } else {\n      retval += \"Was expecting one of:\" + eol + \"    \";\n    }\n    retval += expected.toString();\n    return retval;\n  }\n"
            },
            {
              "step": 2,
              "variableName": "expected.toString()",
              "startLine": 133,
              "startColumn": 15,
              "endLine": 133,
              "endColumn": 34,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/query/xpath/ParseException.java",
              "type": "String",
              "code": "    } else {\n      retval += \"Was expecting one of:\" + eol + \"    \";\n    }\n    retval += expected.toString();\n    return retval;\n  }\n"
            },
            {
              "step": 3,
              "variableName": "retval",
              "startLine": 134,
              "startColumn": 12,
              "endLine": 134,
              "endColumn": 18,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/query/xpath/ParseException.java",
              "type": "String",
              "code": "      retval += \"Was expecting one of:\" + eol + \"    \";\n    }\n    retval += expected.toString();\n    return retval;\n  }\n\n  /**"
            },
            {
              "step": 4,
              "variableName": "pe.getMessage()",
              "startLine": 76,
              "startColumn": 52,
              "endLine": 76,
              "endColumn": 67,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/query/xpath/XPath.java",
              "type": "",
              "code": "                        }\n                        catch(ParseException pe)\n                        {\n                                System.err.println(pe.getMessage());\n                        }\n                        return;\n                   }"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "expected",
              "startLine": 111,
              "startColumn": 9,
              "endLine": 111,
              "endColumn": 17,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/query/xpath/ParseException.java",
              "type": "StringBuffer",
              "code": "        expected.append(tokenImage[expectedTokenSequences[i][j]]).append(\" \");\n      }\n      if (expectedTokenSequences[i][expectedTokenSequences[i].length - 1] != 0) {\n        expected.append(\"...\");\n      }\n      expected.append(eol).append(\"    \");\n    }"
            },
            {
              "step": 1,
              "variableName": "expected",
              "startLine": 133,
              "startColumn": 15,
              "endLine": 133,
              "endColumn": 23,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/query/xpath/ParseException.java",
              "type": "StringBuffer",
              "code": "    } else {\n      retval += \"Was expecting one of:\" + eol + \"    \";\n    }\n    retval += expected.toString();\n    return retval;\n  }\n"
            },
            {
              "step": 2,
              "variableName": "expected.toString()",
              "startLine": 133,
              "startColumn": 15,
              "endLine": 133,
              "endColumn": 34,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/query/xpath/ParseException.java",
              "type": "String",
              "code": "    } else {\n      retval += \"Was expecting one of:\" + eol + \"    \";\n    }\n    retval += expected.toString();\n    return retval;\n  }\n"
            },
            {
              "step": 3,
              "variableName": "retval",
              "startLine": 134,
              "startColumn": 12,
              "endLine": 134,
              "endColumn": 18,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/query/xpath/ParseException.java",
              "type": "String",
              "code": "      retval += \"Was expecting one of:\" + eol + \"    \";\n    }\n    retval += expected.toString();\n    return retval;\n  }\n\n  /**"
            },
            {
              "step": 4,
              "variableName": "pe.getMessage()",
              "startLine": 76,
              "startColumn": 52,
              "endLine": 76,
              "endColumn": 67,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/query/xpath/XPath.java",
              "type": "",
              "code": "                        }\n                        catch(ParseException pe)\n                        {\n                                System.err.println(pe.getMessage());\n                        }\n                        return;\n                   }"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "expected",
              "startLine": 113,
              "startColumn": 7,
              "endLine": 113,
              "endColumn": 15,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/query/xpath/ParseException.java",
              "type": "StringBuffer",
              "code": "      if (expectedTokenSequences[i][expectedTokenSequences[i].length - 1] != 0) {\n        expected.append(\"...\");\n      }\n      expected.append(eol).append(\"    \");\n    }\n    String retval = \"Encountered \\\"\";\n    Token tok = currentToken.next;"
            },
            {
              "step": 1,
              "variableName": "expected",
              "startLine": 133,
              "startColumn": 15,
              "endLine": 133,
              "endColumn": 23,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/query/xpath/ParseException.java",
              "type": "StringBuffer",
              "code": "    } else {\n      retval += \"Was expecting one of:\" + eol + \"    \";\n    }\n    retval += expected.toString();\n    return retval;\n  }\n"
            },
            {
              "step": 2,
              "variableName": "expected.toString()",
              "startLine": 133,
              "startColumn": 15,
              "endLine": 133,
              "endColumn": 34,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/query/xpath/ParseException.java",
              "type": "String",
              "code": "    } else {\n      retval += \"Was expecting one of:\" + eol + \"    \";\n    }\n    retval += expected.toString();\n    return retval;\n  }\n"
            },
            {
              "step": 3,
              "variableName": "retval",
              "startLine": 134,
              "startColumn": 12,
              "endLine": 134,
              "endColumn": 18,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/query/xpath/ParseException.java",
              "type": "String",
              "code": "      retval += \"Was expecting one of:\" + eol + \"    \";\n    }\n    retval += expected.toString();\n    return retval;\n  }\n\n  /**"
            },
            {
              "step": 4,
              "variableName": "pe.getMessage()",
              "startLine": 76,
              "startColumn": 52,
              "endLine": 76,
              "endColumn": 67,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/query/xpath/XPath.java",
              "type": "",
              "code": "                        }\n                        catch(ParseException pe)\n                        {\n                                System.err.println(pe.getMessage());\n                        }\n                        return;\n                   }"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "expected",
              "startLine": 133,
              "startColumn": 15,
              "endLine": 133,
              "endColumn": 23,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/query/xpath/ParseException.java",
              "type": "StringBuffer",
              "code": "    } else {\n      retval += \"Was expecting one of:\" + eol + \"    \";\n    }\n    retval += expected.toString();\n    return retval;\n  }\n"
            },
            {
              "step": 1,
              "variableName": "expected.toString()",
              "startLine": 133,
              "startColumn": 15,
              "endLine": 133,
              "endColumn": 34,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/query/xpath/ParseException.java",
              "type": "String",
              "code": "    } else {\n      retval += \"Was expecting one of:\" + eol + \"    \";\n    }\n    retval += expected.toString();\n    return retval;\n  }\n"
            },
            {
              "step": 2,
              "variableName": "retval",
              "startLine": 134,
              "startColumn": 12,
              "endLine": 134,
              "endColumn": 18,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/query/xpath/ParseException.java",
              "type": "String",
              "code": "      retval += \"Was expecting one of:\" + eol + \"    \";\n    }\n    retval += expected.toString();\n    return retval;\n  }\n\n  /**"
            },
            {
              "step": 3,
              "variableName": "pe.getMessage()",
              "startLine": 76,
              "startColumn": 52,
              "endLine": 76,
              "endColumn": 67,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/query/xpath/XPath.java",
              "type": "",
              "code": "                        }\n                        catch(ParseException pe)\n                        {\n                                System.err.println(pe.getMessage());\n                        }\n                        return;\n                   }"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 48,
      "fileName": "XPath.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "expected",
              "startLine": 108,
              "startColumn": 9,
              "endLine": 108,
              "endColumn": 17,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/query/xpath/ParseException.java",
              "type": "StringBuffer",
              "code": "        maxSize = expectedTokenSequences[i].length;\n      }\n      for (int j = 0; j < expectedTokenSequences[i].length; j++) {\n        expected.append(tokenImage[expectedTokenSequences[i][j]]).append(\" \");\n      }\n      if (expectedTokenSequences[i][expectedTokenSequences[i].length - 1] != 0) {\n        expected.append(\"...\");"
            },
            {
              "step": 1,
              "variableName": "expected",
              "startLine": 133,
              "startColumn": 15,
              "endLine": 133,
              "endColumn": 23,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/query/xpath/ParseException.java",
              "type": "StringBuffer",
              "code": "    } else {\n      retval += \"Was expecting one of:\" + eol + \"    \";\n    }\n    retval += expected.toString();\n    return retval;\n  }\n"
            },
            {
              "step": 2,
              "variableName": "expected.toString()",
              "startLine": 133,
              "startColumn": 15,
              "endLine": 133,
              "endColumn": 34,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/query/xpath/ParseException.java",
              "type": "String",
              "code": "    } else {\n      retval += \"Was expecting one of:\" + eol + \"    \";\n    }\n    retval += expected.toString();\n    return retval;\n  }\n"
            },
            {
              "step": 3,
              "variableName": "retval",
              "startLine": 134,
              "startColumn": 12,
              "endLine": 134,
              "endColumn": 18,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/query/xpath/ParseException.java",
              "type": "String",
              "code": "      retval += \"Was expecting one of:\" + eol + \"    \";\n    }\n    retval += expected.toString();\n    return retval;\n  }\n\n  /**"
            },
            {
              "step": 4,
              "variableName": "pe.getMessage()",
              "startLine": 103,
              "startColumn": 52,
              "endLine": 103,
              "endColumn": 67,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/query/xpath/XPath.java",
              "type": "",
              "code": "                          }\n                          catch(ParseException pe)\n                          {\n                                System.err.println(pe.getMessage());\n                          }\n                          catch(Exception e)\n                          {"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "expected",
              "startLine": 111,
              "startColumn": 9,
              "endLine": 111,
              "endColumn": 17,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/query/xpath/ParseException.java",
              "type": "StringBuffer",
              "code": "        expected.append(tokenImage[expectedTokenSequences[i][j]]).append(\" \");\n      }\n      if (expectedTokenSequences[i][expectedTokenSequences[i].length - 1] != 0) {\n        expected.append(\"...\");\n      }\n      expected.append(eol).append(\"    \");\n    }"
            },
            {
              "step": 1,
              "variableName": "expected",
              "startLine": 133,
              "startColumn": 15,
              "endLine": 133,
              "endColumn": 23,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/query/xpath/ParseException.java",
              "type": "StringBuffer",
              "code": "    } else {\n      retval += \"Was expecting one of:\" + eol + \"    \";\n    }\n    retval += expected.toString();\n    return retval;\n  }\n"
            },
            {
              "step": 2,
              "variableName": "expected.toString()",
              "startLine": 133,
              "startColumn": 15,
              "endLine": 133,
              "endColumn": 34,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/query/xpath/ParseException.java",
              "type": "String",
              "code": "    } else {\n      retval += \"Was expecting one of:\" + eol + \"    \";\n    }\n    retval += expected.toString();\n    return retval;\n  }\n"
            },
            {
              "step": 3,
              "variableName": "retval",
              "startLine": 134,
              "startColumn": 12,
              "endLine": 134,
              "endColumn": 18,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/query/xpath/ParseException.java",
              "type": "String",
              "code": "      retval += \"Was expecting one of:\" + eol + \"    \";\n    }\n    retval += expected.toString();\n    return retval;\n  }\n\n  /**"
            },
            {
              "step": 4,
              "variableName": "pe.getMessage()",
              "startLine": 103,
              "startColumn": 52,
              "endLine": 103,
              "endColumn": 67,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/query/xpath/XPath.java",
              "type": "",
              "code": "                          }\n                          catch(ParseException pe)\n                          {\n                                System.err.println(pe.getMessage());\n                          }\n                          catch(Exception e)\n                          {"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "expected",
              "startLine": 113,
              "startColumn": 7,
              "endLine": 113,
              "endColumn": 15,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/query/xpath/ParseException.java",
              "type": "StringBuffer",
              "code": "      if (expectedTokenSequences[i][expectedTokenSequences[i].length - 1] != 0) {\n        expected.append(\"...\");\n      }\n      expected.append(eol).append(\"    \");\n    }\n    String retval = \"Encountered \\\"\";\n    Token tok = currentToken.next;"
            },
            {
              "step": 1,
              "variableName": "expected",
              "startLine": 133,
              "startColumn": 15,
              "endLine": 133,
              "endColumn": 23,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/query/xpath/ParseException.java",
              "type": "StringBuffer",
              "code": "    } else {\n      retval += \"Was expecting one of:\" + eol + \"    \";\n    }\n    retval += expected.toString();\n    return retval;\n  }\n"
            },
            {
              "step": 2,
              "variableName": "expected.toString()",
              "startLine": 133,
              "startColumn": 15,
              "endLine": 133,
              "endColumn": 34,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/query/xpath/ParseException.java",
              "type": "String",
              "code": "    } else {\n      retval += \"Was expecting one of:\" + eol + \"    \";\n    }\n    retval += expected.toString();\n    return retval;\n  }\n"
            },
            {
              "step": 3,
              "variableName": "retval",
              "startLine": 134,
              "startColumn": 12,
              "endLine": 134,
              "endColumn": 18,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/query/xpath/ParseException.java",
              "type": "String",
              "code": "      retval += \"Was expecting one of:\" + eol + \"    \";\n    }\n    retval += expected.toString();\n    return retval;\n  }\n\n  /**"
            },
            {
              "step": 4,
              "variableName": "pe.getMessage()",
              "startLine": 103,
              "startColumn": 52,
              "endLine": 103,
              "endColumn": 67,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/query/xpath/XPath.java",
              "type": "",
              "code": "                          }\n                          catch(ParseException pe)\n                          {\n                                System.err.println(pe.getMessage());\n                          }\n                          catch(Exception e)\n                          {"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "expected",
              "startLine": 133,
              "startColumn": 15,
              "endLine": 133,
              "endColumn": 23,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/query/xpath/ParseException.java",
              "type": "StringBuffer",
              "code": "    } else {\n      retval += \"Was expecting one of:\" + eol + \"    \";\n    }\n    retval += expected.toString();\n    return retval;\n  }\n"
            },
            {
              "step": 1,
              "variableName": "expected.toString()",
              "startLine": 133,
              "startColumn": 15,
              "endLine": 133,
              "endColumn": 34,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/query/xpath/ParseException.java",
              "type": "String",
              "code": "    } else {\n      retval += \"Was expecting one of:\" + eol + \"    \";\n    }\n    retval += expected.toString();\n    return retval;\n  }\n"
            },
            {
              "step": 2,
              "variableName": "retval",
              "startLine": 134,
              "startColumn": 12,
              "endLine": 134,
              "endColumn": 18,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/query/xpath/ParseException.java",
              "type": "String",
              "code": "      retval += \"Was expecting one of:\" + eol + \"    \";\n    }\n    retval += expected.toString();\n    return retval;\n  }\n\n  /**"
            },
            {
              "step": 3,
              "variableName": "pe.getMessage()",
              "startLine": 103,
              "startColumn": 52,
              "endLine": 103,
              "endColumn": 67,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/query/xpath/XPath.java",
              "type": "",
              "code": "                          }\n                          catch(ParseException pe)\n                          {\n                                System.err.println(pe.getMessage());\n                          }\n                          catch(Exception e)\n                          {"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 49,
      "fileName": "XPath.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "expected",
              "startLine": 124,
              "startColumn": 9,
              "endLine": 124,
              "endColumn": 17,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/query/sql/ParseException.java",
              "type": "StringBuffer",
              "code": "        maxSize = expectedTokenSequences[i].length;\n      }\n      for (int j = 0; j < expectedTokenSequences[i].length; j++) {\n        expected.append(tokenImage[expectedTokenSequences[i][j]]).append(\" \");\n      }\n      if (expectedTokenSequences[i][expectedTokenSequences[i].length - 1] != 0) {\n        expected.append(\"...\");"
            },
            {
              "step": 1,
              "variableName": "expected",
              "startLine": 149,
              "startColumn": 15,
              "endLine": 149,
              "endColumn": 23,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/query/sql/ParseException.java",
              "type": "StringBuffer",
              "code": "    } else {\n      retval += \"Was expecting one of:\" + eol + \"    \";\n    }\n    retval += expected.toString();\n    return retval;\n  }\n"
            },
            {
              "step": 2,
              "variableName": "expected.toString()",
              "startLine": 149,
              "startColumn": 15,
              "endLine": 149,
              "endColumn": 34,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/query/sql/ParseException.java",
              "type": "String",
              "code": "    } else {\n      retval += \"Was expecting one of:\" + eol + \"    \";\n    }\n    retval += expected.toString();\n    return retval;\n  }\n"
            },
            {
              "step": 3,
              "variableName": "retval",
              "startLine": 150,
              "startColumn": 12,
              "endLine": 150,
              "endColumn": 18,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/query/sql/ParseException.java",
              "type": "String",
              "code": "      retval += \"Was expecting one of:\" + eol + \"    \";\n    }\n    retval += expected.toString();\n    return retval;\n  }\n\n  /**"
            },
            {
              "step": 4,
              "variableName": "e.getMessage()",
              "startLine": 107,
              "startColumn": 52,
              "endLine": 107,
              "endColumn": 66,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/query/xpath/XPath.java",
              "type": "",
              "code": "                          }\n                          catch(Exception e)\n                          {\n                                System.err.println(e.getMessage());\n                          }\n                    }\n                  }"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "expected",
              "startLine": 127,
              "startColumn": 9,
              "endLine": 127,
              "endColumn": 17,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/query/sql/ParseException.java",
              "type": "StringBuffer",
              "code": "        expected.append(tokenImage[expectedTokenSequences[i][j]]).append(\" \");\n      }\n      if (expectedTokenSequences[i][expectedTokenSequences[i].length - 1] != 0) {\n        expected.append(\"...\");\n      }\n      expected.append(eol).append(\"    \");\n    }"
            },
            {
              "step": 1,
              "variableName": "expected",
              "startLine": 149,
              "startColumn": 15,
              "endLine": 149,
              "endColumn": 23,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/query/sql/ParseException.java",
              "type": "StringBuffer",
              "code": "    } else {\n      retval += \"Was expecting one of:\" + eol + \"    \";\n    }\n    retval += expected.toString();\n    return retval;\n  }\n"
            },
            {
              "step": 2,
              "variableName": "expected.toString()",
              "startLine": 149,
              "startColumn": 15,
              "endLine": 149,
              "endColumn": 34,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/query/sql/ParseException.java",
              "type": "String",
              "code": "    } else {\n      retval += \"Was expecting one of:\" + eol + \"    \";\n    }\n    retval += expected.toString();\n    return retval;\n  }\n"
            },
            {
              "step": 3,
              "variableName": "retval",
              "startLine": 150,
              "startColumn": 12,
              "endLine": 150,
              "endColumn": 18,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/query/sql/ParseException.java",
              "type": "String",
              "code": "      retval += \"Was expecting one of:\" + eol + \"    \";\n    }\n    retval += expected.toString();\n    return retval;\n  }\n\n  /**"
            },
            {
              "step": 4,
              "variableName": "e.getMessage()",
              "startLine": 107,
              "startColumn": 52,
              "endLine": 107,
              "endColumn": 66,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/query/xpath/XPath.java",
              "type": "",
              "code": "                          }\n                          catch(Exception e)\n                          {\n                                System.err.println(e.getMessage());\n                          }\n                    }\n                  }"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "expected",
              "startLine": 129,
              "startColumn": 7,
              "endLine": 129,
              "endColumn": 15,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/query/sql/ParseException.java",
              "type": "StringBuffer",
              "code": "      if (expectedTokenSequences[i][expectedTokenSequences[i].length - 1] != 0) {\n        expected.append(\"...\");\n      }\n      expected.append(eol).append(\"    \");\n    }\n    String retval = \"Encountered \\\"\";\n    Token tok = currentToken.next;"
            },
            {
              "step": 1,
              "variableName": "expected",
              "startLine": 149,
              "startColumn": 15,
              "endLine": 149,
              "endColumn": 23,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/query/sql/ParseException.java",
              "type": "StringBuffer",
              "code": "    } else {\n      retval += \"Was expecting one of:\" + eol + \"    \";\n    }\n    retval += expected.toString();\n    return retval;\n  }\n"
            },
            {
              "step": 2,
              "variableName": "expected.toString()",
              "startLine": 149,
              "startColumn": 15,
              "endLine": 149,
              "endColumn": 34,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/query/sql/ParseException.java",
              "type": "String",
              "code": "    } else {\n      retval += \"Was expecting one of:\" + eol + \"    \";\n    }\n    retval += expected.toString();\n    return retval;\n  }\n"
            },
            {
              "step": 3,
              "variableName": "retval",
              "startLine": 150,
              "startColumn": 12,
              "endLine": 150,
              "endColumn": 18,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/query/sql/ParseException.java",
              "type": "String",
              "code": "      retval += \"Was expecting one of:\" + eol + \"    \";\n    }\n    retval += expected.toString();\n    return retval;\n  }\n\n  /**"
            },
            {
              "step": 4,
              "variableName": "e.getMessage()",
              "startLine": 107,
              "startColumn": 52,
              "endLine": 107,
              "endColumn": 66,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/query/xpath/XPath.java",
              "type": "",
              "code": "                          }\n                          catch(Exception e)\n                          {\n                                System.err.println(e.getMessage());\n                          }\n                    }\n                  }"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "expected",
              "startLine": 149,
              "startColumn": 15,
              "endLine": 149,
              "endColumn": 23,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/query/sql/ParseException.java",
              "type": "StringBuffer",
              "code": "    } else {\n      retval += \"Was expecting one of:\" + eol + \"    \";\n    }\n    retval += expected.toString();\n    return retval;\n  }\n"
            },
            {
              "step": 1,
              "variableName": "expected.toString()",
              "startLine": 149,
              "startColumn": 15,
              "endLine": 149,
              "endColumn": 34,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/query/sql/ParseException.java",
              "type": "String",
              "code": "    } else {\n      retval += \"Was expecting one of:\" + eol + \"    \";\n    }\n    retval += expected.toString();\n    return retval;\n  }\n"
            },
            {
              "step": 2,
              "variableName": "retval",
              "startLine": 150,
              "startColumn": 12,
              "endLine": 150,
              "endColumn": 18,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/query/sql/ParseException.java",
              "type": "String",
              "code": "      retval += \"Was expecting one of:\" + eol + \"    \";\n    }\n    retval += expected.toString();\n    return retval;\n  }\n\n  /**"
            },
            {
              "step": 3,
              "variableName": "e.getMessage()",
              "startLine": 107,
              "startColumn": 52,
              "endLine": 107,
              "endColumn": 66,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/query/xpath/XPath.java",
              "type": "",
              "code": "                          }\n                          catch(Exception e)\n                          {\n                                System.err.println(e.getMessage());\n                          }\n                    }\n                  }"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 50,
      "fileName": "Main.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "expected",
              "startLine": 124,
              "startColumn": 9,
              "endLine": 124,
              "endColumn": 17,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/query/sql/ParseException.java",
              "type": "StringBuffer",
              "code": "        maxSize = expectedTokenSequences[i].length;\n      }\n      for (int j = 0; j < expectedTokenSequences[i].length; j++) {\n        expected.append(tokenImage[expectedTokenSequences[i][j]]).append(\" \");\n      }\n      if (expectedTokenSequences[i][expectedTokenSequences[i].length - 1] != 0) {\n        expected.append(\"...\");"
            },
            {
              "step": 1,
              "variableName": "expected",
              "startLine": 149,
              "startColumn": 15,
              "endLine": 149,
              "endColumn": 23,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/query/sql/ParseException.java",
              "type": "StringBuffer",
              "code": "    } else {\n      retval += \"Was expecting one of:\" + eol + \"    \";\n    }\n    retval += expected.toString();\n    return retval;\n  }\n"
            },
            {
              "step": 2,
              "variableName": "expected.toString()",
              "startLine": 149,
              "startColumn": 15,
              "endLine": 149,
              "endColumn": 34,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/query/sql/ParseException.java",
              "type": "String",
              "code": "    } else {\n      retval += \"Was expecting one of:\" + eol + \"    \";\n    }\n    retval += expected.toString();\n    return retval;\n  }\n"
            },
            {
              "step": 3,
              "variableName": "retval",
              "startLine": 150,
              "startColumn": 12,
              "endLine": 150,
              "endColumn": 18,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/query/sql/ParseException.java",
              "type": "String",
              "code": "      retval += \"Was expecting one of:\" + eol + \"    \";\n    }\n    retval += expected.toString();\n    return retval;\n  }\n\n  /**"
            },
            {
              "step": 4,
              "variableName": "t.getMessage()",
              "startLine": 257,
              "startColumn": 58,
              "endLine": 257,
              "endColumn": 72,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-standalone-components/src/main/java/org/apache/jackrabbit/standalone/Main.java",
              "type": "String",
              "code": "                        +\"http://\" + host + \":\" + connector.getPort() + \"/\");\n            } catch (Throwable t) {\n                System.err.println(\n                        \"Unable to start the server: \" + t.getMessage());\n                System.exit(1);\n            }\n        }"
            },
            {
              "step": 5,
              "variableName": "\"Unable to start the server: \" + t.getMessage()",
              "startLine": 257,
              "startColumn": 25,
              "endLine": 257,
              "endColumn": 72,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-standalone-components/src/main/java/org/apache/jackrabbit/standalone/Main.java",
              "type": "",
              "code": "                        +\"http://\" + host + \":\" + connector.getPort() + \"/\");\n            } catch (Throwable t) {\n                System.err.println(\n                        \"Unable to start the server: \" + t.getMessage());\n                System.exit(1);\n            }\n        }"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "expected",
              "startLine": 127,
              "startColumn": 9,
              "endLine": 127,
              "endColumn": 17,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/query/sql/ParseException.java",
              "type": "StringBuffer",
              "code": "        expected.append(tokenImage[expectedTokenSequences[i][j]]).append(\" \");\n      }\n      if (expectedTokenSequences[i][expectedTokenSequences[i].length - 1] != 0) {\n        expected.append(\"...\");\n      }\n      expected.append(eol).append(\"    \");\n    }"
            },
            {
              "step": 1,
              "variableName": "expected",
              "startLine": 149,
              "startColumn": 15,
              "endLine": 149,
              "endColumn": 23,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/query/sql/ParseException.java",
              "type": "StringBuffer",
              "code": "    } else {\n      retval += \"Was expecting one of:\" + eol + \"    \";\n    }\n    retval += expected.toString();\n    return retval;\n  }\n"
            },
            {
              "step": 2,
              "variableName": "expected.toString()",
              "startLine": 149,
              "startColumn": 15,
              "endLine": 149,
              "endColumn": 34,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/query/sql/ParseException.java",
              "type": "String",
              "code": "    } else {\n      retval += \"Was expecting one of:\" + eol + \"    \";\n    }\n    retval += expected.toString();\n    return retval;\n  }\n"
            },
            {
              "step": 3,
              "variableName": "retval",
              "startLine": 150,
              "startColumn": 12,
              "endLine": 150,
              "endColumn": 18,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/query/sql/ParseException.java",
              "type": "String",
              "code": "      retval += \"Was expecting one of:\" + eol + \"    \";\n    }\n    retval += expected.toString();\n    return retval;\n  }\n\n  /**"
            },
            {
              "step": 4,
              "variableName": "t.getMessage()",
              "startLine": 257,
              "startColumn": 58,
              "endLine": 257,
              "endColumn": 72,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-standalone-components/src/main/java/org/apache/jackrabbit/standalone/Main.java",
              "type": "String",
              "code": "                        +\"http://\" + host + \":\" + connector.getPort() + \"/\");\n            } catch (Throwable t) {\n                System.err.println(\n                        \"Unable to start the server: \" + t.getMessage());\n                System.exit(1);\n            }\n        }"
            },
            {
              "step": 5,
              "variableName": "\"Unable to start the server: \" + t.getMessage()",
              "startLine": 257,
              "startColumn": 25,
              "endLine": 257,
              "endColumn": 72,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-standalone-components/src/main/java/org/apache/jackrabbit/standalone/Main.java",
              "type": "",
              "code": "                        +\"http://\" + host + \":\" + connector.getPort() + \"/\");\n            } catch (Throwable t) {\n                System.err.println(\n                        \"Unable to start the server: \" + t.getMessage());\n                System.exit(1);\n            }\n        }"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "expected",
              "startLine": 129,
              "startColumn": 7,
              "endLine": 129,
              "endColumn": 15,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/query/sql/ParseException.java",
              "type": "StringBuffer",
              "code": "      if (expectedTokenSequences[i][expectedTokenSequences[i].length - 1] != 0) {\n        expected.append(\"...\");\n      }\n      expected.append(eol).append(\"    \");\n    }\n    String retval = \"Encountered \\\"\";\n    Token tok = currentToken.next;"
            },
            {
              "step": 1,
              "variableName": "expected",
              "startLine": 149,
              "startColumn": 15,
              "endLine": 149,
              "endColumn": 23,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/query/sql/ParseException.java",
              "type": "StringBuffer",
              "code": "    } else {\n      retval += \"Was expecting one of:\" + eol + \"    \";\n    }\n    retval += expected.toString();\n    return retval;\n  }\n"
            },
            {
              "step": 2,
              "variableName": "expected.toString()",
              "startLine": 149,
              "startColumn": 15,
              "endLine": 149,
              "endColumn": 34,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/query/sql/ParseException.java",
              "type": "String",
              "code": "    } else {\n      retval += \"Was expecting one of:\" + eol + \"    \";\n    }\n    retval += expected.toString();\n    return retval;\n  }\n"
            },
            {
              "step": 3,
              "variableName": "retval",
              "startLine": 150,
              "startColumn": 12,
              "endLine": 150,
              "endColumn": 18,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/query/sql/ParseException.java",
              "type": "String",
              "code": "      retval += \"Was expecting one of:\" + eol + \"    \";\n    }\n    retval += expected.toString();\n    return retval;\n  }\n\n  /**"
            },
            {
              "step": 4,
              "variableName": "t.getMessage()",
              "startLine": 257,
              "startColumn": 58,
              "endLine": 257,
              "endColumn": 72,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-standalone-components/src/main/java/org/apache/jackrabbit/standalone/Main.java",
              "type": "String",
              "code": "                        +\"http://\" + host + \":\" + connector.getPort() + \"/\");\n            } catch (Throwable t) {\n                System.err.println(\n                        \"Unable to start the server: \" + t.getMessage());\n                System.exit(1);\n            }\n        }"
            },
            {
              "step": 5,
              "variableName": "\"Unable to start the server: \" + t.getMessage()",
              "startLine": 257,
              "startColumn": 25,
              "endLine": 257,
              "endColumn": 72,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-standalone-components/src/main/java/org/apache/jackrabbit/standalone/Main.java",
              "type": "",
              "code": "                        +\"http://\" + host + \":\" + connector.getPort() + \"/\");\n            } catch (Throwable t) {\n                System.err.println(\n                        \"Unable to start the server: \" + t.getMessage());\n                System.exit(1);\n            }\n        }"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "expected",
              "startLine": 149,
              "startColumn": 15,
              "endLine": 149,
              "endColumn": 23,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/query/sql/ParseException.java",
              "type": "StringBuffer",
              "code": "    } else {\n      retval += \"Was expecting one of:\" + eol + \"    \";\n    }\n    retval += expected.toString();\n    return retval;\n  }\n"
            },
            {
              "step": 1,
              "variableName": "expected.toString()",
              "startLine": 149,
              "startColumn": 15,
              "endLine": 149,
              "endColumn": 34,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/query/sql/ParseException.java",
              "type": "String",
              "code": "    } else {\n      retval += \"Was expecting one of:\" + eol + \"    \";\n    }\n    retval += expected.toString();\n    return retval;\n  }\n"
            },
            {
              "step": 2,
              "variableName": "retval",
              "startLine": 150,
              "startColumn": 12,
              "endLine": 150,
              "endColumn": 18,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/query/sql/ParseException.java",
              "type": "String",
              "code": "      retval += \"Was expecting one of:\" + eol + \"    \";\n    }\n    retval += expected.toString();\n    return retval;\n  }\n\n  /**"
            },
            {
              "step": 3,
              "variableName": "t.getMessage()",
              "startLine": 257,
              "startColumn": 58,
              "endLine": 257,
              "endColumn": 72,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-standalone-components/src/main/java/org/apache/jackrabbit/standalone/Main.java",
              "type": "String",
              "code": "                        +\"http://\" + host + \":\" + connector.getPort() + \"/\");\n            } catch (Throwable t) {\n                System.err.println(\n                        \"Unable to start the server: \" + t.getMessage());\n                System.exit(1);\n            }\n        }"
            },
            {
              "step": 4,
              "variableName": "\"Unable to start the server: \" + t.getMessage()",
              "startLine": 257,
              "startColumn": 25,
              "endLine": 257,
              "endColumn": 72,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-standalone-components/src/main/java/org/apache/jackrabbit/standalone/Main.java",
              "type": "",
              "code": "                        +\"http://\" + host + \":\" + connector.getPort() + \"/\");\n            } catch (Throwable t) {\n                System.err.println(\n                        \"Unable to start the server: \" + t.getMessage());\n                System.exit(1);\n            }\n        }"
            }
          ],
          "label": "No"
        }
      ]
    }
  ],
  "532": [
    {
      "resultIndex": 1,
      "fileName": "CachingHierarchyManager.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "P_PASSWORD",
              "startLine": 782,
              "startColumn": 31,
              "endLine": 782,
              "endColumn": 41,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/user/UserManagerImpl.java",
              "type": "Name",
              "code": "        } else {\n            pwHash = password;\n        }\n        setProperty(userNode, P_PASSWORD, getValue(pwHash), userNode.isNew());\n    }\n\n    void setProtectedProperty(NodeImpl node, Name propName, Value value) throws RepositoryException, LockException, ConstraintViolationException, ItemExistsException, VersionException {"
            },
            {
              "step": 1,
              "variableName": "Name name",
              "startLine": 106,
              "startColumn": 57,
              "endLine": 106,
              "endColumn": 66,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/ProtectedItemModifier.java",
              "type": "Name",
              "code": "        return setProperty(parentImpl, name, value, false);\n    }\n\n    protected Property setProperty(NodeImpl parentImpl, Name name, Value value, boolean ignorePermissions) throws RepositoryException {\n        if (!ignorePermissions) {\n            checkPermission(parentImpl, name, getPermission(false, false));\n        }"
            },
            {
              "step": 2,
              "variableName": "name",
              "startLine": 108,
              "startColumn": 41,
              "endLine": 108,
              "endColumn": 45,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/ProtectedItemModifier.java",
              "type": "Name",
              "code": "\n    protected Property setProperty(NodeImpl parentImpl, Name name, Value value, boolean ignorePermissions) throws RepositoryException {\n        if (!ignorePermissions) {\n            checkPermission(parentImpl, name, getPermission(false, false));\n        }\n        // validation: make sure Node is not locked or checked-in.\n        parentImpl.checkSetProperty();"
            },
            {
              "step": 3,
              "variableName": "Name childName",
              "startLine": 170,
              "startColumn": 49,
              "endLine": 170,
              "endColumn": 63,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/ProtectedItemModifier.java",
              "type": "Name",
              "code": "        }\n    }\n\n    private void checkPermission(NodeImpl node, Name childName, int perm) throws RepositoryException {\n        if (perm > Permission.NONE) {\n            SessionImpl sImpl = (SessionImpl) node.getSession();\n            AccessManager acMgr = sImpl.getAccessManager();"
            },
            {
              "step": 4,
              "variableName": "childName",
              "startLine": 175,
              "startColumn": 72,
              "endLine": 175,
              "endColumn": 81,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/ProtectedItemModifier.java",
              "type": "Name",
              "code": "            SessionImpl sImpl = (SessionImpl) node.getSession();\n            AccessManager acMgr = sImpl.getAccessManager();\n\n            boolean isGranted = acMgr.isGranted(node.getPrimaryPath(), childName, perm);\n            if (!isGranted) {\n                throw new AccessDeniedException(\"Permission denied.\");\n            }"
            },
            {
              "step": 5,
              "variableName": "Name childName",
              "startLine": 252,
              "startColumn": 47,
              "endLine": 252,
              "endColumn": 61,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/DefaultAccessManager.java",
              "type": "Name",
              "code": "    /**\n     * @see AccessManager#isGranted(Path, Name, int)\n     */\n    public boolean isGranted(Path parentPath, Name childName, int permissions) throws RepositoryException {\n        Path p = PathFactoryImpl.getInstance().create(parentPath, childName, true);\n        return isGranted(p, permissions);\n    }"
            },
            {
              "step": 6,
              "variableName": "childName",
              "startLine": 253,
              "startColumn": 67,
              "endLine": 253,
              "endColumn": 76,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/DefaultAccessManager.java",
              "type": "Name",
              "code": "     * @see AccessManager#isGranted(Path, Name, int)\n     */\n    public boolean isGranted(Path parentPath, Name childName, int permissions) throws RepositoryException {\n        Path p = PathFactoryImpl.getInstance().create(parentPath, childName, true);\n        return isGranted(p, permissions);\n    }\n"
            },
            {
              "step": 7,
              "variableName": "Name name",
              "startLine": 62,
              "startColumn": 37,
              "endLine": 62,
              "endColumn": 46,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/PathFactoryImpl.java",
              "type": "Name",
              "code": "    /**\n     * @see PathFactory#create(Path, Name, boolean)\n     */\n    public Path create(Path parent, Name name, boolean normalize) throws RepositoryException {\n        return create(parent, name, Path.INDEX_UNDEFINED, normalize);\n    }\n"
            },
            {
              "step": 8,
              "variableName": "name",
              "startLine": 63,
              "startColumn": 31,
              "endLine": 63,
              "endColumn": 35,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/PathFactoryImpl.java",
              "type": "Name",
              "code": "     * @see PathFactory#create(Path, Name, boolean)\n     */\n    public Path create(Path parent, Name name, boolean normalize) throws RepositoryException {\n        return create(parent, name, Path.INDEX_UNDEFINED, normalize);\n    }\n\n    /**"
            },
            {
              "step": 9,
              "variableName": "Name name",
              "startLine": 69,
              "startColumn": 37,
              "endLine": 69,
              "endColumn": 46,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/PathFactoryImpl.java",
              "type": "Name",
              "code": "    /**\n     * @see PathFactory#create(Path, Name, int, boolean)\n     */\n    public Path create(Path parent, Name name, int index, boolean normalize) throws IllegalArgumentException, RepositoryException {\n        if (RootPath.NAME.equals(name)) {\n            throw new IllegalArgumentException();\n        }"
            },
            {
              "step": 10,
              "variableName": "name",
              "startLine": 73,
              "startColumn": 42,
              "endLine": 73,
              "endColumn": 46,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/PathFactoryImpl.java",
              "type": "Name",
              "code": "        if (RootPath.NAME.equals(name)) {\n            throw new IllegalArgumentException();\n        }\n        Path path = new NamePath(parent, name, index);\n        if (normalize) {\n            return path.getNormalizedPath();\n        } else {"
            },
            {
              "step": 11,
              "variableName": "Name name",
              "startLine": 41,
              "startColumn": 34,
              "endLine": 41,
              "endColumn": 43,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/NamePath.java",
              "type": "Name",
              "code": "     */\n    private final int index;\n\n    public NamePath(Path parent, Name name, int index) {\n        super(parent);\n        assert name != null;\n        assert index >= 0;"
            },
            {
              "step": 12,
              "variableName": "name",
              "startLine": 45,
              "startColumn": 21,
              "endLine": 45,
              "endColumn": 25,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/NamePath.java",
              "type": "Name",
              "code": "        super(parent);\n        assert name != null;\n        assert index >= 0;\n        this.name = name;\n        this.index = index;\n    }\n"
            },
            {
              "step": 13,
              "variableName": "this",
              "startLine": 45,
              "startColumn": 9,
              "endLine": 45,
              "endColumn": 13,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/NamePath.java",
              "type": "NamePath [name] : Name",
              "code": "        super(parent);\n        assert name != null;\n        assert index >= 0;\n        this.name = name;\n        this.index = index;\n    }\n"
            },
            {
              "step": 14,
              "variableName": "new NamePath(parent, name, index)",
              "startLine": 73,
              "startColumn": 21,
              "endLine": 73,
              "endColumn": 54,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/PathFactoryImpl.java",
              "type": "NamePath [name] : Name",
              "code": "        if (RootPath.NAME.equals(name)) {\n            throw new IllegalArgumentException();\n        }\n        Path path = new NamePath(parent, name, index);\n        if (normalize) {\n            return path.getNormalizedPath();\n        } else {"
            },
            {
              "step": 15,
              "variableName": "path",
              "startLine": 77,
              "startColumn": 20,
              "endLine": 77,
              "endColumn": 24,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/PathFactoryImpl.java",
              "type": "NamePath [name] : Name",
              "code": "        if (normalize) {\n            return path.getNormalizedPath();\n        } else {\n            return path;\n        }\n    }\n"
            },
            {
              "step": 16,
              "variableName": "create(parent, name, Path.INDEX_UNDEFINED, normalize)",
              "startLine": 63,
              "startColumn": 16,
              "endLine": 63,
              "endColumn": 69,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/PathFactoryImpl.java",
              "type": "NamePath [name] : Name",
              "code": "     * @see PathFactory#create(Path, Name, boolean)\n     */\n    public Path create(Path parent, Name name, boolean normalize) throws RepositoryException {\n        return create(parent, name, Path.INDEX_UNDEFINED, normalize);\n    }\n\n    /**"
            },
            {
              "step": 17,
              "variableName": "PathFactoryImpl.getInstance().create(parentPath, childName, true)",
              "startLine": 253,
              "startColumn": 18,
              "endLine": 253,
              "endColumn": 83,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/DefaultAccessManager.java",
              "type": "NamePath [name] : Name",
              "code": "     * @see AccessManager#isGranted(Path, Name, int)\n     */\n    public boolean isGranted(Path parentPath, Name childName, int permissions) throws RepositoryException {\n        Path p = PathFactoryImpl.getInstance().create(parentPath, childName, true);\n        return isGranted(p, permissions);\n    }\n"
            },
            {
              "step": 18,
              "variableName": "p",
              "startLine": 254,
              "startColumn": 26,
              "endLine": 254,
              "endColumn": 27,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/DefaultAccessManager.java",
              "type": "NamePath [name] : Name",
              "code": "     */\n    public boolean isGranted(Path parentPath, Name childName, int permissions) throws RepositoryException {\n        Path p = PathFactoryImpl.getInstance().create(parentPath, childName, true);\n        return isGranted(p, permissions);\n    }\n\n    /**"
            },
            {
              "step": 19,
              "variableName": "Path absPath",
              "startLine": 241,
              "startColumn": 30,
              "endLine": 241,
              "endColumn": 42,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/DefaultAccessManager.java",
              "type": "NamePath [name] : Name",
              "code": "    /**\n     * @see AccessManager#isGranted(Path, int)\n     */\n    public boolean isGranted(Path absPath, int permissions) throws RepositoryException {\n        checkInitialized();\n        if (!absPath.isAbsolute()) {\n            throw new RepositoryException(\"Absolute path expected\");"
            },
            {
              "step": 20,
              "variableName": "absPath",
              "startLine": 246,
              "startColumn": 43,
              "endLine": 246,
              "endColumn": 50,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/DefaultAccessManager.java",
              "type": "NamePath [name] : Name",
              "code": "        if (!absPath.isAbsolute()) {\n            throw new RepositoryException(\"Absolute path expected\");\n        }\n        return compiledPermissions.grants(absPath, permissions);\n    }\n\n    /**"
            },
            {
              "step": 21,
              "variableName": "Path absPath",
              "startLine": 108,
              "startColumn": 27,
              "endLine": 108,
              "endColumn": 39,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/authorization/AbstractCompiledPermissions.java",
              "type": "NamePath [name] : Name",
              "code": "    /**\n     * @see CompiledPermissions#grants(Path, int)\n     */\n    public boolean grants(Path absPath, int permissions) throws RepositoryException {\n        return getResult(absPath).grants(permissions);\n    }\n"
            },
            {
              "step": 22,
              "variableName": "absPath",
              "startLine": 109,
              "startColumn": 26,
              "endLine": 109,
              "endColumn": 33,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/authorization/AbstractCompiledPermissions.java",
              "type": "NamePath [name] : Name",
              "code": "     * @see CompiledPermissions#grants(Path, int)\n     */\n    public boolean grants(Path absPath, int permissions) throws RepositoryException {\n        return getResult(absPath).grants(permissions);\n    }\n\n    /**"
            },
            {
              "step": 23,
              "variableName": "Path absPath",
              "startLine": 46,
              "startColumn": 29,
              "endLine": 46,
              "endColumn": 41,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/authorization/AbstractCompiledPermissions.java",
              "type": "NamePath [name] : Name",
              "code": "     * @return the <code>Result</code> for the give <code>absPath</code>.\n     * @throws RepositoryException if an error occurs.\n     */\n    public Result getResult(Path absPath) throws RepositoryException {\n        Result result;\n        synchronized (monitor) {\n            result = cache.get(absPath);"
            },
            {
              "step": 24,
              "variableName": "absPath",
              "startLine": 54,
              "startColumn": 42,
              "endLine": 54,
              "endColumn": 49,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/authorization/AbstractCompiledPermissions.java",
              "type": "NamePath [name] : Name",
              "code": "                if (absPath == null) {\n                    result = buildRepositoryResult();\n                } else {\n                    result = buildResult(absPath);\n                }\n                cache.put(absPath, result);\n            }"
            },
            {
              "step": 25,
              "variableName": "Path absPath",
              "startLine": 165,
              "startColumn": 34,
              "endLine": 165,
              "endColumn": 46,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/authorization/acl/CompiledPermissionsImpl.java",
              "type": "NamePath [name] : Name",
              "code": "     * @see AbstractCompiledPermissions#buildResult(org.apache.jackrabbit.spi.Path)\n     */\n    @Override\n    protected Result buildResult(Path absPath) throws RepositoryException {\n        boolean existingNode = false;\n        NodeImpl node;\n"
            },
            {
              "step": 26,
              "variableName": "absPath",
              "startLine": 171,
              "startColumn": 45,
              "endLine": 171,
              "endColumn": 52,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/authorization/acl/CompiledPermissionsImpl.java",
              "type": "NamePath [name] : Name",
              "code": "\n        ItemManager itemMgr = session.getItemManager();\n        try {\n            ItemImpl item = itemMgr.getItem(absPath);\n            if (item.isNode()) {\n                node = (NodeImpl) item;\n                existingNode = true;"
            },
            {
              "step": 27,
              "variableName": "Path path",
              "startLine": 549,
              "startColumn": 29,
              "endLine": 549,
              "endColumn": 38,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/ItemManager.java",
              "type": "NamePath [name] : Name",
              "code": "     * @throws RepositoryException\n     */\n    @Deprecated\n    public ItemImpl getItem(Path path) throws PathNotFoundException,\n            AccessDeniedException, RepositoryException {\n        ItemId id = hierMgr.resolvePath(path);\n        if (id == null) {"
            },
            {
              "step": 28,
              "variableName": "path",
              "startLine": 551,
              "startColumn": 41,
              "endLine": 551,
              "endColumn": 45,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/ItemManager.java",
              "type": "NamePath [name] : Name",
              "code": "    @Deprecated\n    public ItemImpl getItem(Path path) throws PathNotFoundException,\n            AccessDeniedException, RepositoryException {\n        ItemId id = hierMgr.resolvePath(path);\n        if (id == null) {\n            throw new PathNotFoundException(safeGetJCRPath(path));\n        }"
            },
            {
              "step": 29,
              "variableName": "Path path",
              "startLine": 362,
              "startColumn": 37,
              "endLine": 362,
              "endColumn": 46,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NamePath [name] : Name",
              "code": "    /**\n     * {@inheritDoc}\n     */\n    public final ItemId resolvePath(Path path) throws RepositoryException {\n        // shortcut\n        if (path.denotesRoot()) {\n            return rootNodeId;"
            },
            {
              "step": 30,
              "variableName": "path",
              "startLine": 372,
              "startColumn": 28,
              "endLine": 372,
              "endColumn": 32,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NamePath [name] : Name",
              "code": "            log.debug(msg);\n            throw new RepositoryException(msg);\n        }\n        return resolvePath(path, RETURN_ANY);\n    }\n\n    /**"
            },
            {
              "step": 31,
              "variableName": "Path path",
              "startLine": 154,
              "startColumn": 34,
              "endLine": 154,
              "endColumn": 43,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/CachingHierarchyManager.java",
              "type": "NamePath [name] : Name",
              "code": "    /**\n     * {@inheritDoc}\n     */\n    protected ItemId resolvePath(Path path, int typesAllowed)\n            throws RepositoryException {\n\n        Path pathToNode = path;"
            },
            {
              "step": 32,
              "variableName": "path",
              "startLine": 183,
              "startColumn": 52,
              "endLine": 183,
              "endColumn": 56,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/CachingHierarchyManager.java",
              "type": "NamePath [name] : Name",
              "code": "            return resolvePath(elements, element.getDepth() + 1, entry.getId(), typesAllowed);\n        } catch (ItemStateException e) {\n            String msg = \"failed to retrieve state of intermediary node for entry: \" \n                    + entry.getId() + \", path: \" + path.getString();\n            logItemStateException(msg, e);\n            log.debug(msg);\n            // probably stale cache entry -> evict"
            },
            {
              "step": 33,
              "variableName": "getString",
              "startLine": 130,
              "startColumn": 19,
              "endLine": 130,
              "endColumn": 28,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/RelativePath.java",
              "type": "NamePath [name] : Name",
              "code": "        return parent;\n    }\n\n    public String getString() {\n        if (parent != null) {\n            return parent.getString() + Path.DELIMITER + getElementString();\n        } else {"
            },
            {
              "step": 34,
              "variableName": "getElementString()",
              "startLine": 134,
              "startColumn": 20,
              "endLine": 134,
              "endColumn": 38,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/RelativePath.java",
              "type": "NamePath [name] : Name",
              "code": "        if (parent != null) {\n            return parent.getString() + Path.DELIMITER + getElementString();\n        } else {\n            return getElementString();\n        }\n    }\n"
            },
            {
              "step": 35,
              "variableName": "getElementString",
              "startLine": 61,
              "startColumn": 22,
              "endLine": 61,
              "endColumn": 38,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/NamePath.java",
              "type": "NamePath [name] : Name",
              "code": "        }\n    }\n\n    protected String getElementString() {\n        if (index > Path.INDEX_DEFAULT) {\n            return name + \"[\" + index + \"]\";\n        } else {"
            },
            {
              "step": 36,
              "variableName": "name",
              "startLine": 63,
              "startColumn": 20,
              "endLine": 63,
              "endColumn": 24,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/NamePath.java",
              "type": "NamePath [name] : Name",
              "code": "\n    protected String getElementString() {\n        if (index > Path.INDEX_DEFAULT) {\n            return name + \"[\" + index + \"]\";\n        } else {\n            return name.toString();\n        }"
            },
            {
              "step": 37,
              "variableName": "name",
              "startLine": 63,
              "startColumn": 20,
              "endLine": 63,
              "endColumn": 24,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/NamePath.java",
              "type": "Name",
              "code": "\n    protected String getElementString() {\n        if (index > Path.INDEX_DEFAULT) {\n            return name + \"[\" + index + \"]\";\n        } else {\n            return name.toString();\n        }"
            },
            {
              "step": 38,
              "variableName": "name + \"[\" + index + \"]\"",
              "startLine": 63,
              "startColumn": 20,
              "endLine": 63,
              "endColumn": 44,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/NamePath.java",
              "type": "String",
              "code": "\n    protected String getElementString() {\n        if (index > Path.INDEX_DEFAULT) {\n            return name + \"[\" + index + \"]\";\n        } else {\n            return name.toString();\n        }"
            },
            {
              "step": 39,
              "variableName": "getElementString()",
              "startLine": 134,
              "startColumn": 20,
              "endLine": 134,
              "endColumn": 38,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/RelativePath.java",
              "type": "String",
              "code": "        if (parent != null) {\n            return parent.getString() + Path.DELIMITER + getElementString();\n        } else {\n            return getElementString();\n        }\n    }\n"
            },
            {
              "step": 40,
              "variableName": "path.getString()",
              "startLine": 183,
              "startColumn": 52,
              "endLine": 183,
              "endColumn": 68,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/CachingHierarchyManager.java",
              "type": "String",
              "code": "            return resolvePath(elements, element.getDepth() + 1, entry.getId(), typesAllowed);\n        } catch (ItemStateException e) {\n            String msg = \"failed to retrieve state of intermediary node for entry: \" \n                    + entry.getId() + \", path: \" + path.getString();\n            logItemStateException(msg, e);\n            log.debug(msg);\n            // probably stale cache entry -> evict"
            },
            {
              "step": 41,
              "variableName": "msg",
              "startLine": 185,
              "startColumn": 23,
              "endLine": 185,
              "endColumn": 26,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/CachingHierarchyManager.java",
              "type": "",
              "code": "            String msg = \"failed to retrieve state of intermediary node for entry: \" \n                    + entry.getId() + \", path: \" + path.getString();\n            logItemStateException(msg, e);\n            log.debug(msg);\n            // probably stale cache entry -> evict\n            evictAll(entry.getId(), true);\n        }"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "P_PASSWORD",
              "startLine": 782,
              "startColumn": 31,
              "endLine": 782,
              "endColumn": 41,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/user/UserManagerImpl.java",
              "type": "Name",
              "code": "        } else {\n            pwHash = password;\n        }\n        setProperty(userNode, P_PASSWORD, getValue(pwHash), userNode.isNew());\n    }\n\n    void setProtectedProperty(NodeImpl node, Name propName, Value value) throws RepositoryException, LockException, ConstraintViolationException, ItemExistsException, VersionException {"
            },
            {
              "step": 1,
              "variableName": "Name name",
              "startLine": 106,
              "startColumn": 57,
              "endLine": 106,
              "endColumn": 66,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/ProtectedItemModifier.java",
              "type": "Name",
              "code": "        return setProperty(parentImpl, name, value, false);\n    }\n\n    protected Property setProperty(NodeImpl parentImpl, Name name, Value value, boolean ignorePermissions) throws RepositoryException {\n        if (!ignorePermissions) {\n            checkPermission(parentImpl, name, getPermission(false, false));\n        }"
            },
            {
              "step": 2,
              "variableName": "name",
              "startLine": 108,
              "startColumn": 41,
              "endLine": 108,
              "endColumn": 45,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/ProtectedItemModifier.java",
              "type": "Name",
              "code": "\n    protected Property setProperty(NodeImpl parentImpl, Name name, Value value, boolean ignorePermissions) throws RepositoryException {\n        if (!ignorePermissions) {\n            checkPermission(parentImpl, name, getPermission(false, false));\n        }\n        // validation: make sure Node is not locked or checked-in.\n        parentImpl.checkSetProperty();"
            },
            {
              "step": 3,
              "variableName": "Name childName",
              "startLine": 170,
              "startColumn": 49,
              "endLine": 170,
              "endColumn": 63,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/ProtectedItemModifier.java",
              "type": "Name",
              "code": "        }\n    }\n\n    private void checkPermission(NodeImpl node, Name childName, int perm) throws RepositoryException {\n        if (perm > Permission.NONE) {\n            SessionImpl sImpl = (SessionImpl) node.getSession();\n            AccessManager acMgr = sImpl.getAccessManager();"
            },
            {
              "step": 4,
              "variableName": "childName",
              "startLine": 175,
              "startColumn": 72,
              "endLine": 175,
              "endColumn": 81,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/ProtectedItemModifier.java",
              "type": "Name",
              "code": "            SessionImpl sImpl = (SessionImpl) node.getSession();\n            AccessManager acMgr = sImpl.getAccessManager();\n\n            boolean isGranted = acMgr.isGranted(node.getPrimaryPath(), childName, perm);\n            if (!isGranted) {\n                throw new AccessDeniedException(\"Permission denied.\");\n            }"
            },
            {
              "step": 5,
              "variableName": "Name childName",
              "startLine": 252,
              "startColumn": 47,
              "endLine": 252,
              "endColumn": 61,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/DefaultAccessManager.java",
              "type": "Name",
              "code": "    /**\n     * @see AccessManager#isGranted(Path, Name, int)\n     */\n    public boolean isGranted(Path parentPath, Name childName, int permissions) throws RepositoryException {\n        Path p = PathFactoryImpl.getInstance().create(parentPath, childName, true);\n        return isGranted(p, permissions);\n    }"
            },
            {
              "step": 6,
              "variableName": "childName",
              "startLine": 253,
              "startColumn": 67,
              "endLine": 253,
              "endColumn": 76,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/DefaultAccessManager.java",
              "type": "Name",
              "code": "     * @see AccessManager#isGranted(Path, Name, int)\n     */\n    public boolean isGranted(Path parentPath, Name childName, int permissions) throws RepositoryException {\n        Path p = PathFactoryImpl.getInstance().create(parentPath, childName, true);\n        return isGranted(p, permissions);\n    }\n"
            },
            {
              "step": 7,
              "variableName": "Name name",
              "startLine": 62,
              "startColumn": 37,
              "endLine": 62,
              "endColumn": 46,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/PathFactoryImpl.java",
              "type": "Name",
              "code": "    /**\n     * @see PathFactory#create(Path, Name, boolean)\n     */\n    public Path create(Path parent, Name name, boolean normalize) throws RepositoryException {\n        return create(parent, name, Path.INDEX_UNDEFINED, normalize);\n    }\n"
            },
            {
              "step": 8,
              "variableName": "name",
              "startLine": 63,
              "startColumn": 31,
              "endLine": 63,
              "endColumn": 35,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/PathFactoryImpl.java",
              "type": "Name",
              "code": "     * @see PathFactory#create(Path, Name, boolean)\n     */\n    public Path create(Path parent, Name name, boolean normalize) throws RepositoryException {\n        return create(parent, name, Path.INDEX_UNDEFINED, normalize);\n    }\n\n    /**"
            },
            {
              "step": 9,
              "variableName": "Name name",
              "startLine": 69,
              "startColumn": 37,
              "endLine": 69,
              "endColumn": 46,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/PathFactoryImpl.java",
              "type": "Name",
              "code": "    /**\n     * @see PathFactory#create(Path, Name, int, boolean)\n     */\n    public Path create(Path parent, Name name, int index, boolean normalize) throws IllegalArgumentException, RepositoryException {\n        if (RootPath.NAME.equals(name)) {\n            throw new IllegalArgumentException();\n        }"
            },
            {
              "step": 10,
              "variableName": "name",
              "startLine": 73,
              "startColumn": 42,
              "endLine": 73,
              "endColumn": 46,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/PathFactoryImpl.java",
              "type": "Name",
              "code": "        if (RootPath.NAME.equals(name)) {\n            throw new IllegalArgumentException();\n        }\n        Path path = new NamePath(parent, name, index);\n        if (normalize) {\n            return path.getNormalizedPath();\n        } else {"
            },
            {
              "step": 11,
              "variableName": "Name name",
              "startLine": 41,
              "startColumn": 34,
              "endLine": 41,
              "endColumn": 43,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/NamePath.java",
              "type": "Name",
              "code": "     */\n    private final int index;\n\n    public NamePath(Path parent, Name name, int index) {\n        super(parent);\n        assert name != null;\n        assert index >= 0;"
            },
            {
              "step": 12,
              "variableName": "name",
              "startLine": 45,
              "startColumn": 21,
              "endLine": 45,
              "endColumn": 25,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/NamePath.java",
              "type": "Name",
              "code": "        super(parent);\n        assert name != null;\n        assert index >= 0;\n        this.name = name;\n        this.index = index;\n    }\n"
            },
            {
              "step": 13,
              "variableName": "this",
              "startLine": 45,
              "startColumn": 9,
              "endLine": 45,
              "endColumn": 13,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/NamePath.java",
              "type": "NamePath [name] : Name",
              "code": "        super(parent);\n        assert name != null;\n        assert index >= 0;\n        this.name = name;\n        this.index = index;\n    }\n"
            },
            {
              "step": 14,
              "variableName": "new NamePath(parent, name, index)",
              "startLine": 73,
              "startColumn": 21,
              "endLine": 73,
              "endColumn": 54,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/PathFactoryImpl.java",
              "type": "NamePath [name] : Name",
              "code": "        if (RootPath.NAME.equals(name)) {\n            throw new IllegalArgumentException();\n        }\n        Path path = new NamePath(parent, name, index);\n        if (normalize) {\n            return path.getNormalizedPath();\n        } else {"
            },
            {
              "step": 15,
              "variableName": "path",
              "startLine": 75,
              "startColumn": 20,
              "endLine": 75,
              "endColumn": 24,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/PathFactoryImpl.java",
              "type": "NamePath [name] : Name",
              "code": "        }\n        Path path = new NamePath(parent, name, index);\n        if (normalize) {\n            return path.getNormalizedPath();\n        } else {\n            return path;\n        }"
            },
            {
              "step": 16,
              "variableName": "getNormalizedPath",
              "startLine": 107,
              "startColumn": 17,
              "endLine": 107,
              "endColumn": 34,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/NamePath.java",
              "type": "NamePath [name] : Name",
              "code": "                    && !parent.denotesCurrent());\n    }\n\n    public Path getNormalizedPath() throws RepositoryException {\n        if (isNormalized()) {\n            return this;\n        } else {"
            },
            {
              "step": 17,
              "variableName": "this",
              "startLine": 109,
              "startColumn": 20,
              "endLine": 109,
              "endColumn": 24,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/NamePath.java",
              "type": "NamePath [name] : Name",
              "code": "\n    public Path getNormalizedPath() throws RepositoryException {\n        if (isNormalized()) {\n            return this;\n        } else {\n            // parent is guaranteed to be !null\n            Path normalized = parent.getNormalizedPath();"
            },
            {
              "step": 18,
              "variableName": "path.getNormalizedPath()",
              "startLine": 75,
              "startColumn": 20,
              "endLine": 75,
              "endColumn": 44,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/PathFactoryImpl.java",
              "type": "NamePath [name] : Name",
              "code": "        }\n        Path path = new NamePath(parent, name, index);\n        if (normalize) {\n            return path.getNormalizedPath();\n        } else {\n            return path;\n        }"
            },
            {
              "step": 19,
              "variableName": "create(parent, name, Path.INDEX_UNDEFINED, normalize)",
              "startLine": 63,
              "startColumn": 16,
              "endLine": 63,
              "endColumn": 69,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/PathFactoryImpl.java",
              "type": "NamePath [name] : Name",
              "code": "     * @see PathFactory#create(Path, Name, boolean)\n     */\n    public Path create(Path parent, Name name, boolean normalize) throws RepositoryException {\n        return create(parent, name, Path.INDEX_UNDEFINED, normalize);\n    }\n\n    /**"
            },
            {
              "step": 20,
              "variableName": "PathFactoryImpl.getInstance().create(parentPath, childName, true)",
              "startLine": 253,
              "startColumn": 18,
              "endLine": 253,
              "endColumn": 83,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/DefaultAccessManager.java",
              "type": "NamePath [name] : Name",
              "code": "     * @see AccessManager#isGranted(Path, Name, int)\n     */\n    public boolean isGranted(Path parentPath, Name childName, int permissions) throws RepositoryException {\n        Path p = PathFactoryImpl.getInstance().create(parentPath, childName, true);\n        return isGranted(p, permissions);\n    }\n"
            },
            {
              "step": 21,
              "variableName": "p",
              "startLine": 254,
              "startColumn": 26,
              "endLine": 254,
              "endColumn": 27,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/DefaultAccessManager.java",
              "type": "NamePath [name] : Name",
              "code": "     */\n    public boolean isGranted(Path parentPath, Name childName, int permissions) throws RepositoryException {\n        Path p = PathFactoryImpl.getInstance().create(parentPath, childName, true);\n        return isGranted(p, permissions);\n    }\n\n    /**"
            },
            {
              "step": 22,
              "variableName": "Path absPath",
              "startLine": 241,
              "startColumn": 30,
              "endLine": 241,
              "endColumn": 42,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/DefaultAccessManager.java",
              "type": "NamePath [name] : Name",
              "code": "    /**\n     * @see AccessManager#isGranted(Path, int)\n     */\n    public boolean isGranted(Path absPath, int permissions) throws RepositoryException {\n        checkInitialized();\n        if (!absPath.isAbsolute()) {\n            throw new RepositoryException(\"Absolute path expected\");"
            },
            {
              "step": 23,
              "variableName": "absPath",
              "startLine": 246,
              "startColumn": 43,
              "endLine": 246,
              "endColumn": 50,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/DefaultAccessManager.java",
              "type": "NamePath [name] : Name",
              "code": "        if (!absPath.isAbsolute()) {\n            throw new RepositoryException(\"Absolute path expected\");\n        }\n        return compiledPermissions.grants(absPath, permissions);\n    }\n\n    /**"
            },
            {
              "step": 24,
              "variableName": "Path absPath",
              "startLine": 108,
              "startColumn": 27,
              "endLine": 108,
              "endColumn": 39,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/authorization/AbstractCompiledPermissions.java",
              "type": "NamePath [name] : Name",
              "code": "    /**\n     * @see CompiledPermissions#grants(Path, int)\n     */\n    public boolean grants(Path absPath, int permissions) throws RepositoryException {\n        return getResult(absPath).grants(permissions);\n    }\n"
            },
            {
              "step": 25,
              "variableName": "absPath",
              "startLine": 109,
              "startColumn": 26,
              "endLine": 109,
              "endColumn": 33,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/authorization/AbstractCompiledPermissions.java",
              "type": "NamePath [name] : Name",
              "code": "     * @see CompiledPermissions#grants(Path, int)\n     */\n    public boolean grants(Path absPath, int permissions) throws RepositoryException {\n        return getResult(absPath).grants(permissions);\n    }\n\n    /**"
            },
            {
              "step": 26,
              "variableName": "Path absPath",
              "startLine": 228,
              "startColumn": 33,
              "endLine": 228,
              "endColumn": 45,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/authorization/combined/CombinedProvider.java",
              "type": "NamePath [name] : Name",
              "code": "         * @see AbstractCompiledPermissions#getResult(Path)\n         */\n        @Override\n        public Result getResult(Path absPath) throws RepositoryException {\n            // TODO: missing caching\n            return buildResult(absPath);\n        }"
            },
            {
              "step": 27,
              "variableName": "absPath",
              "startLine": 230,
              "startColumn": 32,
              "endLine": 230,
              "endColumn": 39,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/authorization/combined/CombinedProvider.java",
              "type": "NamePath [name] : Name",
              "code": "        @Override\n        public Result getResult(Path absPath) throws RepositoryException {\n            // TODO: missing caching\n            return buildResult(absPath);\n        }\n\n        /**"
            },
            {
              "step": 28,
              "variableName": "Path absPath",
              "startLine": 237,
              "startColumn": 38,
              "endLine": 237,
              "endColumn": 50,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/authorization/combined/CombinedProvider.java",
              "type": "NamePath [name] : Name",
              "code": "         * @see AbstractCompiledPermissions#buildResult(Path)\n         */\n        @Override\n        protected Result buildResult(Path absPath) throws RepositoryException {\n            Result res = null;\n            for (AbstractCompiledPermissions acp : cPermissions) {\n                Result other = acp.getResult(absPath);"
            },
            {
              "step": 29,
              "variableName": "absPath",
              "startLine": 240,
              "startColumn": 46,
              "endLine": 240,
              "endColumn": 53,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/authorization/combined/CombinedProvider.java",
              "type": "NamePath [name] : Name",
              "code": "        protected Result buildResult(Path absPath) throws RepositoryException {\n            Result res = null;\n            for (AbstractCompiledPermissions acp : cPermissions) {\n                Result other = acp.getResult(absPath);\n                res = (res == null) ? other : res.combine(other);\n            }\n            return res;"
            },
            {
              "step": 30,
              "variableName": "Path absPath",
              "startLine": 46,
              "startColumn": 29,
              "endLine": 46,
              "endColumn": 41,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/authorization/AbstractCompiledPermissions.java",
              "type": "NamePath [name] : Name",
              "code": "     * @return the <code>Result</code> for the give <code>absPath</code>.\n     * @throws RepositoryException if an error occurs.\n     */\n    public Result getResult(Path absPath) throws RepositoryException {\n        Result result;\n        synchronized (monitor) {\n            result = cache.get(absPath);"
            },
            {
              "step": 31,
              "variableName": "absPath",
              "startLine": 54,
              "startColumn": 42,
              "endLine": 54,
              "endColumn": 49,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/authorization/AbstractCompiledPermissions.java",
              "type": "NamePath [name] : Name",
              "code": "                if (absPath == null) {\n                    result = buildRepositoryResult();\n                } else {\n                    result = buildResult(absPath);\n                }\n                cache.put(absPath, result);\n            }"
            },
            {
              "step": 32,
              "variableName": "Path absPath",
              "startLine": 165,
              "startColumn": 34,
              "endLine": 165,
              "endColumn": 46,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/authorization/acl/CompiledPermissionsImpl.java",
              "type": "NamePath [name] : Name",
              "code": "     * @see AbstractCompiledPermissions#buildResult(org.apache.jackrabbit.spi.Path)\n     */\n    @Override\n    protected Result buildResult(Path absPath) throws RepositoryException {\n        boolean existingNode = false;\n        NodeImpl node;\n"
            },
            {
              "step": 33,
              "variableName": "absPath",
              "startLine": 171,
              "startColumn": 45,
              "endLine": 171,
              "endColumn": 52,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/authorization/acl/CompiledPermissionsImpl.java",
              "type": "NamePath [name] : Name",
              "code": "\n        ItemManager itemMgr = session.getItemManager();\n        try {\n            ItemImpl item = itemMgr.getItem(absPath);\n            if (item.isNode()) {\n                node = (NodeImpl) item;\n                existingNode = true;"
            },
            {
              "step": 34,
              "variableName": "Path path",
              "startLine": 549,
              "startColumn": 29,
              "endLine": 549,
              "endColumn": 38,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/ItemManager.java",
              "type": "NamePath [name] : Name",
              "code": "     * @throws RepositoryException\n     */\n    @Deprecated\n    public ItemImpl getItem(Path path) throws PathNotFoundException,\n            AccessDeniedException, RepositoryException {\n        ItemId id = hierMgr.resolvePath(path);\n        if (id == null) {"
            },
            {
              "step": 35,
              "variableName": "path",
              "startLine": 559,
              "startColumn": 32,
              "endLine": 559,
              "endColumn": 36,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/ItemManager.java",
              "type": "NamePath [name] : Name",
              "code": "            ItemImpl item = getItem(id, path, true);\n            // Test, if this item is a shareable node.\n            if (item.isNode() && ((NodeImpl) item).isShareable()) {\n                return getNode(path);\n            }\n            return item;\n        } catch (ItemNotFoundException infe) {"
            },
            {
              "step": 36,
              "variableName": "Path path",
              "startLine": 574,
              "startColumn": 29,
              "endLine": 574,
              "endColumn": 38,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/ItemManager.java",
              "type": "NamePath [name] : Name",
              "code": "     * @throws AccessDeniedException\n     * @throws RepositoryException\n     */\n    public NodeImpl getNode(Path path) throws PathNotFoundException,\n            AccessDeniedException, RepositoryException {\n        NodeId id = hierMgr.resolveNodePath(path);\n        if (id == null) {"
            },
            {
              "step": 37,
              "variableName": "path",
              "startLine": 576,
              "startColumn": 45,
              "endLine": 576,
              "endColumn": 49,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/ItemManager.java",
              "type": "NamePath [name] : Name",
              "code": "     */\n    public NodeImpl getNode(Path path) throws PathNotFoundException,\n            AccessDeniedException, RepositoryException {\n        NodeId id = hierMgr.resolveNodePath(path);\n        if (id == null) {\n            throw new PathNotFoundException(safeGetJCRPath(path));\n        }"
            },
            {
              "step": 38,
              "variableName": "Path path",
              "startLine": 378,
              "startColumn": 35,
              "endLine": 378,
              "endColumn": 44,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NamePath [name] : Name",
              "code": "    /**\n     * {@inheritDoc}\n     */\n    public NodeId resolveNodePath(Path path) throws RepositoryException {\n        return (NodeId) resolvePath(path, RETURN_NODE);\n    }\n"
            },
            {
              "step": 39,
              "variableName": "path",
              "startLine": 379,
              "startColumn": 37,
              "endLine": 379,
              "endColumn": 41,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NamePath [name] : Name",
              "code": "     * {@inheritDoc}\n     */\n    public NodeId resolveNodePath(Path path) throws RepositoryException {\n        return (NodeId) resolvePath(path, RETURN_NODE);\n    }\n\n    /**"
            },
            {
              "step": 40,
              "variableName": "Path path",
              "startLine": 154,
              "startColumn": 34,
              "endLine": 154,
              "endColumn": 43,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/CachingHierarchyManager.java",
              "type": "NamePath [name] : Name",
              "code": "    /**\n     * {@inheritDoc}\n     */\n    protected ItemId resolvePath(Path path, int typesAllowed)\n            throws RepositoryException {\n\n        Path pathToNode = path;"
            },
            {
              "step": 41,
              "variableName": "path",
              "startLine": 183,
              "startColumn": 52,
              "endLine": 183,
              "endColumn": 56,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/CachingHierarchyManager.java",
              "type": "NamePath [name] : Name",
              "code": "            return resolvePath(elements, element.getDepth() + 1, entry.getId(), typesAllowed);\n        } catch (ItemStateException e) {\n            String msg = \"failed to retrieve state of intermediary node for entry: \" \n                    + entry.getId() + \", path: \" + path.getString();\n            logItemStateException(msg, e);\n            log.debug(msg);\n            // probably stale cache entry -> evict"
            },
            {
              "step": 42,
              "variableName": "getString",
              "startLine": 130,
              "startColumn": 19,
              "endLine": 130,
              "endColumn": 28,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/RelativePath.java",
              "type": "NamePath [name] : Name",
              "code": "        return parent;\n    }\n\n    public String getString() {\n        if (parent != null) {\n            return parent.getString() + Path.DELIMITER + getElementString();\n        } else {"
            },
            {
              "step": 43,
              "variableName": "getElementString()",
              "startLine": 132,
              "startColumn": 58,
              "endLine": 132,
              "endColumn": 76,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/RelativePath.java",
              "type": "NamePath [name] : Name",
              "code": "\n    public String getString() {\n        if (parent != null) {\n            return parent.getString() + Path.DELIMITER + getElementString();\n        } else {\n            return getElementString();\n        }"
            },
            {
              "step": 44,
              "variableName": "getElementString",
              "startLine": 61,
              "startColumn": 22,
              "endLine": 61,
              "endColumn": 38,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/NamePath.java",
              "type": "NamePath [name] : Name",
              "code": "        }\n    }\n\n    protected String getElementString() {\n        if (index > Path.INDEX_DEFAULT) {\n            return name + \"[\" + index + \"]\";\n        } else {"
            },
            {
              "step": 45,
              "variableName": "name",
              "startLine": 63,
              "startColumn": 20,
              "endLine": 63,
              "endColumn": 24,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/NamePath.java",
              "type": "NamePath [name] : Name",
              "code": "\n    protected String getElementString() {\n        if (index > Path.INDEX_DEFAULT) {\n            return name + \"[\" + index + \"]\";\n        } else {\n            return name.toString();\n        }"
            },
            {
              "step": 46,
              "variableName": "name",
              "startLine": 63,
              "startColumn": 20,
              "endLine": 63,
              "endColumn": 24,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/NamePath.java",
              "type": "Name",
              "code": "\n    protected String getElementString() {\n        if (index > Path.INDEX_DEFAULT) {\n            return name + \"[\" + index + \"]\";\n        } else {\n            return name.toString();\n        }"
            },
            {
              "step": 47,
              "variableName": "name + \"[\" + index + \"]\"",
              "startLine": 63,
              "startColumn": 20,
              "endLine": 63,
              "endColumn": 44,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/NamePath.java",
              "type": "String",
              "code": "\n    protected String getElementString() {\n        if (index > Path.INDEX_DEFAULT) {\n            return name + \"[\" + index + \"]\";\n        } else {\n            return name.toString();\n        }"
            },
            {
              "step": 48,
              "variableName": "getElementString()",
              "startLine": 132,
              "startColumn": 58,
              "endLine": 132,
              "endColumn": 76,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/RelativePath.java",
              "type": "String",
              "code": "\n    public String getString() {\n        if (parent != null) {\n            return parent.getString() + Path.DELIMITER + getElementString();\n        } else {\n            return getElementString();\n        }"
            },
            {
              "step": 49,
              "variableName": "parent.getString() + Path.DELIMITER + getElementString()",
              "startLine": 132,
              "startColumn": 20,
              "endLine": 132,
              "endColumn": 76,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/RelativePath.java",
              "type": "String",
              "code": "\n    public String getString() {\n        if (parent != null) {\n            return parent.getString() + Path.DELIMITER + getElementString();\n        } else {\n            return getElementString();\n        }"
            },
            {
              "step": 50,
              "variableName": "path.getString()",
              "startLine": 183,
              "startColumn": 52,
              "endLine": 183,
              "endColumn": 68,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/CachingHierarchyManager.java",
              "type": "String",
              "code": "            return resolvePath(elements, element.getDepth() + 1, entry.getId(), typesAllowed);\n        } catch (ItemStateException e) {\n            String msg = \"failed to retrieve state of intermediary node for entry: \" \n                    + entry.getId() + \", path: \" + path.getString();\n            logItemStateException(msg, e);\n            log.debug(msg);\n            // probably stale cache entry -> evict"
            },
            {
              "step": 51,
              "variableName": "msg",
              "startLine": 185,
              "startColumn": 23,
              "endLine": 185,
              "endColumn": 26,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/CachingHierarchyManager.java",
              "type": "",
              "code": "            String msg = \"failed to retrieve state of intermediary node for entry: \" \n                    + entry.getId() + \", path: \" + path.getString();\n            logItemStateException(msg, e);\n            log.debug(msg);\n            // probably stale cache entry -> evict\n            evictAll(entry.getId(), true);\n        }"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 2,
      "fileName": "CachingHierarchyManager.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "lockToken",
              "startLine": 1279,
              "startColumn": 19,
              "endLine": 1279,
              "endColumn": 28,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "NodeId",
              "code": "         */\n        public InternalLockInfo(NodeId lockToken, boolean sessionScoped,\n                                boolean deep, String lockOwner, long timeoutHint) {\n            super(lockToken, sessionScoped, deep, lockOwner, timeoutHint);\n        }\n\n        /**"
            },
            {
              "step": 1,
              "variableName": "super(lockToken, sessionScoped, deep, lockOwner, timeoutHint);",
              "startLine": 1279,
              "startColumn": 13,
              "endLine": 1279,
              "endColumn": 75,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "         */\n        public InternalLockInfo(NodeId lockToken, boolean sessionScoped,\n                                boolean deep, String lockOwner, long timeoutHint) {\n            super(lockToken, sessionScoped, deep, lockOwner, timeoutHint);\n        }\n\n        /**"
            },
            {
              "step": 2,
              "variableName": "new InternalLockInfo(",
              "startLine": 340,
              "startColumn": 33,
              "endLine": 341,
              "endColumn": 83,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "\n        SessionImpl session = (SessionImpl) node.getSession();\n        String lockOwner = (ownerInfo != null) ? ownerInfo : session.getUserID();\n        InternalLockInfo info = new InternalLockInfo(\n                node.getNodeId(), isSessionScoped, isDeep, lockOwner, timeoutHint);\n\n        ClusterOperation operation = null;"
            },
            {
              "step": 3,
              "variableName": "info",
              "startLine": 370,
              "startColumn": 17,
              "endLine": 370,
              "endColumn": 21,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "            }\n            if (info.isDeep() && element.hasPath(path)\n                    && element.getChildrenCount() > 0) {\n                info.throwLockException(\"Some child node is locked\", session);\n            }\n\n            // create lock token"
            },
            {
              "step": 4,
              "variableName": "throwLockException",
              "startLine": 259,
              "startColumn": 17,
              "endLine": 259,
              "endColumn": 35,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockInfo.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "     * @throws LockException always thrown, unless another error occurs\n     * @throws RepositoryException if the path of this lock can not be resolved\n     */\n    public void throwLockException(String message, SessionImpl session)\n            throws LockException, RepositoryException {\n        String path;\n        try {"
            },
            {
              "step": 5,
              "variableName": "id",
              "startLine": 264,
              "startColumn": 59,
              "endLine": 264,
              "endColumn": 61,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockInfo.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "        String path;\n        try {\n            path = session.getJCRPath(\n                    session.getHierarchyManager().getPath(id));\n        } catch (RepositoryException ignored) {\n            path = null;\n        }"
            },
            {
              "step": 6,
              "variableName": "id",
              "startLine": 264,
              "startColumn": 59,
              "endLine": 264,
              "endColumn": 61,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockInfo.java",
              "type": "NodeId",
              "code": "        String path;\n        try {\n            path = session.getJCRPath(\n                    session.getHierarchyManager().getPath(id));\n        } catch (RepositoryException ignored) {\n            path = null;\n        }"
            },
            {
              "step": 7,
              "variableName": "ItemId id",
              "startLine": 252,
              "startColumn": 25,
              "endLine": 252,
              "endColumn": 34,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/CachingHierarchyManager.java",
              "type": "NodeId",
              "code": "     * Overridden method simply checks whether we have an item matching the id\n     * and returns its path, otherwise calls base implementation.\n     */\n    public Path getPath(ItemId id)\n            throws ItemNotFoundException, RepositoryException {\n\n        if (id.denotesNode()) {"
            },
            {
              "step": 8,
              "variableName": "msg",
              "startLine": 262,
              "startColumn": 31,
              "endLine": 262,
              "endColumn": 34,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/CachingHierarchyManager.java",
              "type": "",
              "code": "                    return element.getPath();\n                } catch (MalformedPathException mpe) {\n                    String msg = \"Failed to build path of \" + id;\n                    log.debug(msg);\n                    throw new RepositoryException(msg, mpe);\n                }\n            }"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 3,
      "fileName": "CachingHierarchyManager.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "P_PASSWORD",
              "startLine": 782,
              "startColumn": 31,
              "endLine": 782,
              "endColumn": 41,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/user/UserManagerImpl.java",
              "type": "Name",
              "code": "        } else {\n            pwHash = password;\n        }\n        setProperty(userNode, P_PASSWORD, getValue(pwHash), userNode.isNew());\n    }\n\n    void setProtectedProperty(NodeImpl node, Name propName, Value value) throws RepositoryException, LockException, ConstraintViolationException, ItemExistsException, VersionException {"
            },
            {
              "step": 1,
              "variableName": "Name name",
              "startLine": 106,
              "startColumn": 57,
              "endLine": 106,
              "endColumn": 66,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/ProtectedItemModifier.java",
              "type": "Name",
              "code": "        return setProperty(parentImpl, name, value, false);\n    }\n\n    protected Property setProperty(NodeImpl parentImpl, Name name, Value value, boolean ignorePermissions) throws RepositoryException {\n        if (!ignorePermissions) {\n            checkPermission(parentImpl, name, getPermission(false, false));\n        }"
            },
            {
              "step": 2,
              "variableName": "name",
              "startLine": 108,
              "startColumn": 41,
              "endLine": 108,
              "endColumn": 45,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/ProtectedItemModifier.java",
              "type": "Name",
              "code": "\n    protected Property setProperty(NodeImpl parentImpl, Name name, Value value, boolean ignorePermissions) throws RepositoryException {\n        if (!ignorePermissions) {\n            checkPermission(parentImpl, name, getPermission(false, false));\n        }\n        // validation: make sure Node is not locked or checked-in.\n        parentImpl.checkSetProperty();"
            },
            {
              "step": 3,
              "variableName": "Name childName",
              "startLine": 170,
              "startColumn": 49,
              "endLine": 170,
              "endColumn": 63,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/ProtectedItemModifier.java",
              "type": "Name",
              "code": "        }\n    }\n\n    private void checkPermission(NodeImpl node, Name childName, int perm) throws RepositoryException {\n        if (perm > Permission.NONE) {\n            SessionImpl sImpl = (SessionImpl) node.getSession();\n            AccessManager acMgr = sImpl.getAccessManager();"
            },
            {
              "step": 4,
              "variableName": "childName",
              "startLine": 175,
              "startColumn": 72,
              "endLine": 175,
              "endColumn": 81,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/ProtectedItemModifier.java",
              "type": "Name",
              "code": "            SessionImpl sImpl = (SessionImpl) node.getSession();\n            AccessManager acMgr = sImpl.getAccessManager();\n\n            boolean isGranted = acMgr.isGranted(node.getPrimaryPath(), childName, perm);\n            if (!isGranted) {\n                throw new AccessDeniedException(\"Permission denied.\");\n            }"
            },
            {
              "step": 5,
              "variableName": "Name childName",
              "startLine": 252,
              "startColumn": 47,
              "endLine": 252,
              "endColumn": 61,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/DefaultAccessManager.java",
              "type": "Name",
              "code": "    /**\n     * @see AccessManager#isGranted(Path, Name, int)\n     */\n    public boolean isGranted(Path parentPath, Name childName, int permissions) throws RepositoryException {\n        Path p = PathFactoryImpl.getInstance().create(parentPath, childName, true);\n        return isGranted(p, permissions);\n    }"
            },
            {
              "step": 6,
              "variableName": "childName",
              "startLine": 253,
              "startColumn": 67,
              "endLine": 253,
              "endColumn": 76,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/DefaultAccessManager.java",
              "type": "Name",
              "code": "     * @see AccessManager#isGranted(Path, Name, int)\n     */\n    public boolean isGranted(Path parentPath, Name childName, int permissions) throws RepositoryException {\n        Path p = PathFactoryImpl.getInstance().create(parentPath, childName, true);\n        return isGranted(p, permissions);\n    }\n"
            },
            {
              "step": 7,
              "variableName": "Name name",
              "startLine": 62,
              "startColumn": 37,
              "endLine": 62,
              "endColumn": 46,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/PathFactoryImpl.java",
              "type": "Name",
              "code": "    /**\n     * @see PathFactory#create(Path, Name, boolean)\n     */\n    public Path create(Path parent, Name name, boolean normalize) throws RepositoryException {\n        return create(parent, name, Path.INDEX_UNDEFINED, normalize);\n    }\n"
            },
            {
              "step": 8,
              "variableName": "name",
              "startLine": 63,
              "startColumn": 31,
              "endLine": 63,
              "endColumn": 35,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/PathFactoryImpl.java",
              "type": "Name",
              "code": "     * @see PathFactory#create(Path, Name, boolean)\n     */\n    public Path create(Path parent, Name name, boolean normalize) throws RepositoryException {\n        return create(parent, name, Path.INDEX_UNDEFINED, normalize);\n    }\n\n    /**"
            },
            {
              "step": 9,
              "variableName": "Name name",
              "startLine": 69,
              "startColumn": 37,
              "endLine": 69,
              "endColumn": 46,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/PathFactoryImpl.java",
              "type": "Name",
              "code": "    /**\n     * @see PathFactory#create(Path, Name, int, boolean)\n     */\n    public Path create(Path parent, Name name, int index, boolean normalize) throws IllegalArgumentException, RepositoryException {\n        if (RootPath.NAME.equals(name)) {\n            throw new IllegalArgumentException();\n        }"
            },
            {
              "step": 10,
              "variableName": "name",
              "startLine": 73,
              "startColumn": 42,
              "endLine": 73,
              "endColumn": 46,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/PathFactoryImpl.java",
              "type": "Name",
              "code": "        if (RootPath.NAME.equals(name)) {\n            throw new IllegalArgumentException();\n        }\n        Path path = new NamePath(parent, name, index);\n        if (normalize) {\n            return path.getNormalizedPath();\n        } else {"
            },
            {
              "step": 11,
              "variableName": "Name name",
              "startLine": 41,
              "startColumn": 34,
              "endLine": 41,
              "endColumn": 43,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/NamePath.java",
              "type": "Name",
              "code": "     */\n    private final int index;\n\n    public NamePath(Path parent, Name name, int index) {\n        super(parent);\n        assert name != null;\n        assert index >= 0;"
            },
            {
              "step": 12,
              "variableName": "name",
              "startLine": 45,
              "startColumn": 21,
              "endLine": 45,
              "endColumn": 25,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/NamePath.java",
              "type": "Name",
              "code": "        super(parent);\n        assert name != null;\n        assert index >= 0;\n        this.name = name;\n        this.index = index;\n    }\n"
            },
            {
              "step": 13,
              "variableName": "this",
              "startLine": 45,
              "startColumn": 9,
              "endLine": 45,
              "endColumn": 13,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/NamePath.java",
              "type": "NamePath [name] : Name",
              "code": "        super(parent);\n        assert name != null;\n        assert index >= 0;\n        this.name = name;\n        this.index = index;\n    }\n"
            },
            {
              "step": 14,
              "variableName": "new NamePath(parent, name, index)",
              "startLine": 73,
              "startColumn": 21,
              "endLine": 73,
              "endColumn": 54,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/PathFactoryImpl.java",
              "type": "NamePath [name] : Name",
              "code": "        if (RootPath.NAME.equals(name)) {\n            throw new IllegalArgumentException();\n        }\n        Path path = new NamePath(parent, name, index);\n        if (normalize) {\n            return path.getNormalizedPath();\n        } else {"
            },
            {
              "step": 15,
              "variableName": "path",
              "startLine": 77,
              "startColumn": 20,
              "endLine": 77,
              "endColumn": 24,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/PathFactoryImpl.java",
              "type": "NamePath [name] : Name",
              "code": "        if (normalize) {\n            return path.getNormalizedPath();\n        } else {\n            return path;\n        }\n    }\n"
            },
            {
              "step": 16,
              "variableName": "create(parent, name, Path.INDEX_UNDEFINED, normalize)",
              "startLine": 63,
              "startColumn": 16,
              "endLine": 63,
              "endColumn": 69,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/PathFactoryImpl.java",
              "type": "NamePath [name] : Name",
              "code": "     * @see PathFactory#create(Path, Name, boolean)\n     */\n    public Path create(Path parent, Name name, boolean normalize) throws RepositoryException {\n        return create(parent, name, Path.INDEX_UNDEFINED, normalize);\n    }\n\n    /**"
            },
            {
              "step": 17,
              "variableName": "PathFactoryImpl.getInstance().create(parentPath, childName, true)",
              "startLine": 253,
              "startColumn": 18,
              "endLine": 253,
              "endColumn": 83,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/DefaultAccessManager.java",
              "type": "NamePath [name] : Name",
              "code": "     * @see AccessManager#isGranted(Path, Name, int)\n     */\n    public boolean isGranted(Path parentPath, Name childName, int permissions) throws RepositoryException {\n        Path p = PathFactoryImpl.getInstance().create(parentPath, childName, true);\n        return isGranted(p, permissions);\n    }\n"
            },
            {
              "step": 18,
              "variableName": "p",
              "startLine": 254,
              "startColumn": 26,
              "endLine": 254,
              "endColumn": 27,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/DefaultAccessManager.java",
              "type": "NamePath [name] : Name",
              "code": "     */\n    public boolean isGranted(Path parentPath, Name childName, int permissions) throws RepositoryException {\n        Path p = PathFactoryImpl.getInstance().create(parentPath, childName, true);\n        return isGranted(p, permissions);\n    }\n\n    /**"
            },
            {
              "step": 19,
              "variableName": "Path absPath",
              "startLine": 241,
              "startColumn": 30,
              "endLine": 241,
              "endColumn": 42,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/DefaultAccessManager.java",
              "type": "NamePath [name] : Name",
              "code": "    /**\n     * @see AccessManager#isGranted(Path, int)\n     */\n    public boolean isGranted(Path absPath, int permissions) throws RepositoryException {\n        checkInitialized();\n        if (!absPath.isAbsolute()) {\n            throw new RepositoryException(\"Absolute path expected\");"
            },
            {
              "step": 20,
              "variableName": "absPath",
              "startLine": 246,
              "startColumn": 43,
              "endLine": 246,
              "endColumn": 50,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/DefaultAccessManager.java",
              "type": "NamePath [name] : Name",
              "code": "        if (!absPath.isAbsolute()) {\n            throw new RepositoryException(\"Absolute path expected\");\n        }\n        return compiledPermissions.grants(absPath, permissions);\n    }\n\n    /**"
            },
            {
              "step": 21,
              "variableName": "Path absPath",
              "startLine": 108,
              "startColumn": 27,
              "endLine": 108,
              "endColumn": 39,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/authorization/AbstractCompiledPermissions.java",
              "type": "NamePath [name] : Name",
              "code": "    /**\n     * @see CompiledPermissions#grants(Path, int)\n     */\n    public boolean grants(Path absPath, int permissions) throws RepositoryException {\n        return getResult(absPath).grants(permissions);\n    }\n"
            },
            {
              "step": 22,
              "variableName": "absPath",
              "startLine": 109,
              "startColumn": 26,
              "endLine": 109,
              "endColumn": 33,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/authorization/AbstractCompiledPermissions.java",
              "type": "NamePath [name] : Name",
              "code": "     * @see CompiledPermissions#grants(Path, int)\n     */\n    public boolean grants(Path absPath, int permissions) throws RepositoryException {\n        return getResult(absPath).grants(permissions);\n    }\n\n    /**"
            },
            {
              "step": 23,
              "variableName": "Path absPath",
              "startLine": 46,
              "startColumn": 29,
              "endLine": 46,
              "endColumn": 41,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/authorization/AbstractCompiledPermissions.java",
              "type": "NamePath [name] : Name",
              "code": "     * @return the <code>Result</code> for the give <code>absPath</code>.\n     * @throws RepositoryException if an error occurs.\n     */\n    public Result getResult(Path absPath) throws RepositoryException {\n        Result result;\n        synchronized (monitor) {\n            result = cache.get(absPath);"
            },
            {
              "step": 24,
              "variableName": "absPath",
              "startLine": 54,
              "startColumn": 42,
              "endLine": 54,
              "endColumn": 49,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/authorization/AbstractCompiledPermissions.java",
              "type": "NamePath [name] : Name",
              "code": "                if (absPath == null) {\n                    result = buildRepositoryResult();\n                } else {\n                    result = buildResult(absPath);\n                }\n                cache.put(absPath, result);\n            }"
            },
            {
              "step": 25,
              "variableName": "Path absPath",
              "startLine": 165,
              "startColumn": 34,
              "endLine": 165,
              "endColumn": 46,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/authorization/acl/CompiledPermissionsImpl.java",
              "type": "NamePath [name] : Name",
              "code": "     * @see AbstractCompiledPermissions#buildResult(org.apache.jackrabbit.spi.Path)\n     */\n    @Override\n    protected Result buildResult(Path absPath) throws RepositoryException {\n        boolean existingNode = false;\n        NodeImpl node;\n"
            },
            {
              "step": 26,
              "variableName": "absPath",
              "startLine": 171,
              "startColumn": 45,
              "endLine": 171,
              "endColumn": 52,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/authorization/acl/CompiledPermissionsImpl.java",
              "type": "NamePath [name] : Name",
              "code": "\n        ItemManager itemMgr = session.getItemManager();\n        try {\n            ItemImpl item = itemMgr.getItem(absPath);\n            if (item.isNode()) {\n                node = (NodeImpl) item;\n                existingNode = true;"
            },
            {
              "step": 27,
              "variableName": "Path path",
              "startLine": 549,
              "startColumn": 29,
              "endLine": 549,
              "endColumn": 38,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/ItemManager.java",
              "type": "NamePath [name] : Name",
              "code": "     * @throws RepositoryException\n     */\n    @Deprecated\n    public ItemImpl getItem(Path path) throws PathNotFoundException,\n            AccessDeniedException, RepositoryException {\n        ItemId id = hierMgr.resolvePath(path);\n        if (id == null) {"
            },
            {
              "step": 28,
              "variableName": "path",
              "startLine": 551,
              "startColumn": 41,
              "endLine": 551,
              "endColumn": 45,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/ItemManager.java",
              "type": "NamePath [name] : Name",
              "code": "    @Deprecated\n    public ItemImpl getItem(Path path) throws PathNotFoundException,\n            AccessDeniedException, RepositoryException {\n        ItemId id = hierMgr.resolvePath(path);\n        if (id == null) {\n            throw new PathNotFoundException(safeGetJCRPath(path));\n        }"
            },
            {
              "step": 29,
              "variableName": "Path path",
              "startLine": 362,
              "startColumn": 37,
              "endLine": 362,
              "endColumn": 46,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NamePath [name] : Name",
              "code": "    /**\n     * {@inheritDoc}\n     */\n    public final ItemId resolvePath(Path path) throws RepositoryException {\n        // shortcut\n        if (path.denotesRoot()) {\n            return rootNodeId;"
            },
            {
              "step": 30,
              "variableName": "path",
              "startLine": 372,
              "startColumn": 28,
              "endLine": 372,
              "endColumn": 32,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NamePath [name] : Name",
              "code": "            log.debug(msg);\n            throw new RepositoryException(msg);\n        }\n        return resolvePath(path, RETURN_ANY);\n    }\n\n    /**"
            },
            {
              "step": 31,
              "variableName": "Path path",
              "startLine": 154,
              "startColumn": 34,
              "endLine": 154,
              "endColumn": 43,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/CachingHierarchyManager.java",
              "type": "NamePath [name] : Name",
              "code": "    /**\n     * {@inheritDoc}\n     */\n    protected ItemId resolvePath(Path path, int typesAllowed)\n            throws RepositoryException {\n\n        Path pathToNode = path;"
            },
            {
              "step": 32,
              "variableName": "path",
              "startLine": 183,
              "startColumn": 52,
              "endLine": 183,
              "endColumn": 56,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/CachingHierarchyManager.java",
              "type": "NamePath [name] : Name",
              "code": "            return resolvePath(elements, element.getDepth() + 1, entry.getId(), typesAllowed);\n        } catch (ItemStateException e) {\n            String msg = \"failed to retrieve state of intermediary node for entry: \" \n                    + entry.getId() + \", path: \" + path.getString();\n            logItemStateException(msg, e);\n            log.debug(msg);\n            // probably stale cache entry -> evict"
            },
            {
              "step": 33,
              "variableName": "getString",
              "startLine": 130,
              "startColumn": 19,
              "endLine": 130,
              "endColumn": 28,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/RelativePath.java",
              "type": "NamePath [name] : Name",
              "code": "        return parent;\n    }\n\n    public String getString() {\n        if (parent != null) {\n            return parent.getString() + Path.DELIMITER + getElementString();\n        } else {"
            },
            {
              "step": 34,
              "variableName": "getElementString()",
              "startLine": 134,
              "startColumn": 20,
              "endLine": 134,
              "endColumn": 38,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/RelativePath.java",
              "type": "NamePath [name] : Name",
              "code": "        if (parent != null) {\n            return parent.getString() + Path.DELIMITER + getElementString();\n        } else {\n            return getElementString();\n        }\n    }\n"
            },
            {
              "step": 35,
              "variableName": "getElementString",
              "startLine": 61,
              "startColumn": 22,
              "endLine": 61,
              "endColumn": 38,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/NamePath.java",
              "type": "NamePath [name] : Name",
              "code": "        }\n    }\n\n    protected String getElementString() {\n        if (index > Path.INDEX_DEFAULT) {\n            return name + \"[\" + index + \"]\";\n        } else {"
            },
            {
              "step": 36,
              "variableName": "name",
              "startLine": 63,
              "startColumn": 20,
              "endLine": 63,
              "endColumn": 24,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/NamePath.java",
              "type": "NamePath [name] : Name",
              "code": "\n    protected String getElementString() {\n        if (index > Path.INDEX_DEFAULT) {\n            return name + \"[\" + index + \"]\";\n        } else {\n            return name.toString();\n        }"
            },
            {
              "step": 37,
              "variableName": "name",
              "startLine": 63,
              "startColumn": 20,
              "endLine": 63,
              "endColumn": 24,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/NamePath.java",
              "type": "Name",
              "code": "\n    protected String getElementString() {\n        if (index > Path.INDEX_DEFAULT) {\n            return name + \"[\" + index + \"]\";\n        } else {\n            return name.toString();\n        }"
            },
            {
              "step": 38,
              "variableName": "name + \"[\" + index + \"]\"",
              "startLine": 63,
              "startColumn": 20,
              "endLine": 63,
              "endColumn": 44,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/NamePath.java",
              "type": "String",
              "code": "\n    protected String getElementString() {\n        if (index > Path.INDEX_DEFAULT) {\n            return name + \"[\" + index + \"]\";\n        } else {\n            return name.toString();\n        }"
            },
            {
              "step": 39,
              "variableName": "getElementString()",
              "startLine": 134,
              "startColumn": 20,
              "endLine": 134,
              "endColumn": 38,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/RelativePath.java",
              "type": "String",
              "code": "        if (parent != null) {\n            return parent.getString() + Path.DELIMITER + getElementString();\n        } else {\n            return getElementString();\n        }\n    }\n"
            },
            {
              "step": 40,
              "variableName": "path.getString()",
              "startLine": 183,
              "startColumn": 52,
              "endLine": 183,
              "endColumn": 68,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/CachingHierarchyManager.java",
              "type": "String",
              "code": "            return resolvePath(elements, element.getDepth() + 1, entry.getId(), typesAllowed);\n        } catch (ItemStateException e) {\n            String msg = \"failed to retrieve state of intermediary node for entry: \" \n                    + entry.getId() + \", path: \" + path.getString();\n            logItemStateException(msg, e);\n            log.debug(msg);\n            // probably stale cache entry -> evict"
            },
            {
              "step": 41,
              "variableName": "msg",
              "startLine": 184,
              "startColumn": 35,
              "endLine": 184,
              "endColumn": 38,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/CachingHierarchyManager.java",
              "type": "String",
              "code": "        } catch (ItemStateException e) {\n            String msg = \"failed to retrieve state of intermediary node for entry: \" \n                    + entry.getId() + \", path: \" + path.getString();\n            logItemStateException(msg, e);\n            log.debug(msg);\n            // probably stale cache entry -> evict\n            evictAll(entry.getId(), true);"
            },
            {
              "step": 42,
              "variableName": "String logMessage",
              "startLine": 884,
              "startColumn": 40,
              "endLine": 884,
              "endColumn": 57,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/CachingHierarchyManager.java",
              "type": "String",
              "code": "     * @param logMessage log message\n     * @param e item state exception\n     */\n    private void logItemStateException(String logMessage, ItemStateException e) {\n        long now = System.currentTimeMillis();\n        if ((now - itemStateExceptionLogTimestamp) >= ITEM_STATE_EXCEPTION_LOG_INTERVAL_MILLIS) {\n            itemStateExceptionLogTimestamp = now;"
            },
            {
              "step": 43,
              "variableName": "logMessage",
              "startLine": 888,
              "startColumn": 23,
              "endLine": 888,
              "endColumn": 33,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/CachingHierarchyManager.java",
              "type": "",
              "code": "        long now = System.currentTimeMillis();\n        if ((now - itemStateExceptionLogTimestamp) >= ITEM_STATE_EXCEPTION_LOG_INTERVAL_MILLIS) {\n            itemStateExceptionLogTimestamp = now;\n            log.debug(logMessage, e);\n        } else {\n            log.debug(logMessage);\n        }"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "P_PASSWORD",
              "startLine": 782,
              "startColumn": 31,
              "endLine": 782,
              "endColumn": 41,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/user/UserManagerImpl.java",
              "type": "Name",
              "code": "        } else {\n            pwHash = password;\n        }\n        setProperty(userNode, P_PASSWORD, getValue(pwHash), userNode.isNew());\n    }\n\n    void setProtectedProperty(NodeImpl node, Name propName, Value value) throws RepositoryException, LockException, ConstraintViolationException, ItemExistsException, VersionException {"
            },
            {
              "step": 1,
              "variableName": "Name name",
              "startLine": 106,
              "startColumn": 57,
              "endLine": 106,
              "endColumn": 66,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/ProtectedItemModifier.java",
              "type": "Name",
              "code": "        return setProperty(parentImpl, name, value, false);\n    }\n\n    protected Property setProperty(NodeImpl parentImpl, Name name, Value value, boolean ignorePermissions) throws RepositoryException {\n        if (!ignorePermissions) {\n            checkPermission(parentImpl, name, getPermission(false, false));\n        }"
            },
            {
              "step": 2,
              "variableName": "name",
              "startLine": 108,
              "startColumn": 41,
              "endLine": 108,
              "endColumn": 45,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/ProtectedItemModifier.java",
              "type": "Name",
              "code": "\n    protected Property setProperty(NodeImpl parentImpl, Name name, Value value, boolean ignorePermissions) throws RepositoryException {\n        if (!ignorePermissions) {\n            checkPermission(parentImpl, name, getPermission(false, false));\n        }\n        // validation: make sure Node is not locked or checked-in.\n        parentImpl.checkSetProperty();"
            },
            {
              "step": 3,
              "variableName": "Name childName",
              "startLine": 170,
              "startColumn": 49,
              "endLine": 170,
              "endColumn": 63,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/ProtectedItemModifier.java",
              "type": "Name",
              "code": "        }\n    }\n\n    private void checkPermission(NodeImpl node, Name childName, int perm) throws RepositoryException {\n        if (perm > Permission.NONE) {\n            SessionImpl sImpl = (SessionImpl) node.getSession();\n            AccessManager acMgr = sImpl.getAccessManager();"
            },
            {
              "step": 4,
              "variableName": "childName",
              "startLine": 175,
              "startColumn": 72,
              "endLine": 175,
              "endColumn": 81,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/ProtectedItemModifier.java",
              "type": "Name",
              "code": "            SessionImpl sImpl = (SessionImpl) node.getSession();\n            AccessManager acMgr = sImpl.getAccessManager();\n\n            boolean isGranted = acMgr.isGranted(node.getPrimaryPath(), childName, perm);\n            if (!isGranted) {\n                throw new AccessDeniedException(\"Permission denied.\");\n            }"
            },
            {
              "step": 5,
              "variableName": "Name childName",
              "startLine": 252,
              "startColumn": 47,
              "endLine": 252,
              "endColumn": 61,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/DefaultAccessManager.java",
              "type": "Name",
              "code": "    /**\n     * @see AccessManager#isGranted(Path, Name, int)\n     */\n    public boolean isGranted(Path parentPath, Name childName, int permissions) throws RepositoryException {\n        Path p = PathFactoryImpl.getInstance().create(parentPath, childName, true);\n        return isGranted(p, permissions);\n    }"
            },
            {
              "step": 6,
              "variableName": "childName",
              "startLine": 253,
              "startColumn": 67,
              "endLine": 253,
              "endColumn": 76,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/DefaultAccessManager.java",
              "type": "Name",
              "code": "     * @see AccessManager#isGranted(Path, Name, int)\n     */\n    public boolean isGranted(Path parentPath, Name childName, int permissions) throws RepositoryException {\n        Path p = PathFactoryImpl.getInstance().create(parentPath, childName, true);\n        return isGranted(p, permissions);\n    }\n"
            },
            {
              "step": 7,
              "variableName": "Name name",
              "startLine": 62,
              "startColumn": 37,
              "endLine": 62,
              "endColumn": 46,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/PathFactoryImpl.java",
              "type": "Name",
              "code": "    /**\n     * @see PathFactory#create(Path, Name, boolean)\n     */\n    public Path create(Path parent, Name name, boolean normalize) throws RepositoryException {\n        return create(parent, name, Path.INDEX_UNDEFINED, normalize);\n    }\n"
            },
            {
              "step": 8,
              "variableName": "name",
              "startLine": 63,
              "startColumn": 31,
              "endLine": 63,
              "endColumn": 35,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/PathFactoryImpl.java",
              "type": "Name",
              "code": "     * @see PathFactory#create(Path, Name, boolean)\n     */\n    public Path create(Path parent, Name name, boolean normalize) throws RepositoryException {\n        return create(parent, name, Path.INDEX_UNDEFINED, normalize);\n    }\n\n    /**"
            },
            {
              "step": 9,
              "variableName": "Name name",
              "startLine": 69,
              "startColumn": 37,
              "endLine": 69,
              "endColumn": 46,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/PathFactoryImpl.java",
              "type": "Name",
              "code": "    /**\n     * @see PathFactory#create(Path, Name, int, boolean)\n     */\n    public Path create(Path parent, Name name, int index, boolean normalize) throws IllegalArgumentException, RepositoryException {\n        if (RootPath.NAME.equals(name)) {\n            throw new IllegalArgumentException();\n        }"
            },
            {
              "step": 10,
              "variableName": "name",
              "startLine": 73,
              "startColumn": 42,
              "endLine": 73,
              "endColumn": 46,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/PathFactoryImpl.java",
              "type": "Name",
              "code": "        if (RootPath.NAME.equals(name)) {\n            throw new IllegalArgumentException();\n        }\n        Path path = new NamePath(parent, name, index);\n        if (normalize) {\n            return path.getNormalizedPath();\n        } else {"
            },
            {
              "step": 11,
              "variableName": "Name name",
              "startLine": 41,
              "startColumn": 34,
              "endLine": 41,
              "endColumn": 43,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/NamePath.java",
              "type": "Name",
              "code": "     */\n    private final int index;\n\n    public NamePath(Path parent, Name name, int index) {\n        super(parent);\n        assert name != null;\n        assert index >= 0;"
            },
            {
              "step": 12,
              "variableName": "name",
              "startLine": 45,
              "startColumn": 21,
              "endLine": 45,
              "endColumn": 25,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/NamePath.java",
              "type": "Name",
              "code": "        super(parent);\n        assert name != null;\n        assert index >= 0;\n        this.name = name;\n        this.index = index;\n    }\n"
            },
            {
              "step": 13,
              "variableName": "this",
              "startLine": 45,
              "startColumn": 9,
              "endLine": 45,
              "endColumn": 13,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/NamePath.java",
              "type": "NamePath [name] : Name",
              "code": "        super(parent);\n        assert name != null;\n        assert index >= 0;\n        this.name = name;\n        this.index = index;\n    }\n"
            },
            {
              "step": 14,
              "variableName": "new NamePath(parent, name, index)",
              "startLine": 73,
              "startColumn": 21,
              "endLine": 73,
              "endColumn": 54,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/PathFactoryImpl.java",
              "type": "NamePath [name] : Name",
              "code": "        if (RootPath.NAME.equals(name)) {\n            throw new IllegalArgumentException();\n        }\n        Path path = new NamePath(parent, name, index);\n        if (normalize) {\n            return path.getNormalizedPath();\n        } else {"
            },
            {
              "step": 15,
              "variableName": "path",
              "startLine": 75,
              "startColumn": 20,
              "endLine": 75,
              "endColumn": 24,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/PathFactoryImpl.java",
              "type": "NamePath [name] : Name",
              "code": "        }\n        Path path = new NamePath(parent, name, index);\n        if (normalize) {\n            return path.getNormalizedPath();\n        } else {\n            return path;\n        }"
            },
            {
              "step": 16,
              "variableName": "getNormalizedPath",
              "startLine": 107,
              "startColumn": 17,
              "endLine": 107,
              "endColumn": 34,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/NamePath.java",
              "type": "NamePath [name] : Name",
              "code": "                    && !parent.denotesCurrent());\n    }\n\n    public Path getNormalizedPath() throws RepositoryException {\n        if (isNormalized()) {\n            return this;\n        } else {"
            },
            {
              "step": 17,
              "variableName": "this",
              "startLine": 109,
              "startColumn": 20,
              "endLine": 109,
              "endColumn": 24,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/NamePath.java",
              "type": "NamePath [name] : Name",
              "code": "\n    public Path getNormalizedPath() throws RepositoryException {\n        if (isNormalized()) {\n            return this;\n        } else {\n            // parent is guaranteed to be !null\n            Path normalized = parent.getNormalizedPath();"
            },
            {
              "step": 18,
              "variableName": "path.getNormalizedPath()",
              "startLine": 75,
              "startColumn": 20,
              "endLine": 75,
              "endColumn": 44,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/PathFactoryImpl.java",
              "type": "NamePath [name] : Name",
              "code": "        }\n        Path path = new NamePath(parent, name, index);\n        if (normalize) {\n            return path.getNormalizedPath();\n        } else {\n            return path;\n        }"
            },
            {
              "step": 19,
              "variableName": "create(parent, name, Path.INDEX_UNDEFINED, normalize)",
              "startLine": 63,
              "startColumn": 16,
              "endLine": 63,
              "endColumn": 69,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/PathFactoryImpl.java",
              "type": "NamePath [name] : Name",
              "code": "     * @see PathFactory#create(Path, Name, boolean)\n     */\n    public Path create(Path parent, Name name, boolean normalize) throws RepositoryException {\n        return create(parent, name, Path.INDEX_UNDEFINED, normalize);\n    }\n\n    /**"
            },
            {
              "step": 20,
              "variableName": "PathFactoryImpl.getInstance().create(parentPath, childName, true)",
              "startLine": 253,
              "startColumn": 18,
              "endLine": 253,
              "endColumn": 83,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/DefaultAccessManager.java",
              "type": "NamePath [name] : Name",
              "code": "     * @see AccessManager#isGranted(Path, Name, int)\n     */\n    public boolean isGranted(Path parentPath, Name childName, int permissions) throws RepositoryException {\n        Path p = PathFactoryImpl.getInstance().create(parentPath, childName, true);\n        return isGranted(p, permissions);\n    }\n"
            },
            {
              "step": 21,
              "variableName": "p",
              "startLine": 254,
              "startColumn": 26,
              "endLine": 254,
              "endColumn": 27,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/DefaultAccessManager.java",
              "type": "NamePath [name] : Name",
              "code": "     */\n    public boolean isGranted(Path parentPath, Name childName, int permissions) throws RepositoryException {\n        Path p = PathFactoryImpl.getInstance().create(parentPath, childName, true);\n        return isGranted(p, permissions);\n    }\n\n    /**"
            },
            {
              "step": 22,
              "variableName": "Path absPath",
              "startLine": 241,
              "startColumn": 30,
              "endLine": 241,
              "endColumn": 42,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/DefaultAccessManager.java",
              "type": "NamePath [name] : Name",
              "code": "    /**\n     * @see AccessManager#isGranted(Path, int)\n     */\n    public boolean isGranted(Path absPath, int permissions) throws RepositoryException {\n        checkInitialized();\n        if (!absPath.isAbsolute()) {\n            throw new RepositoryException(\"Absolute path expected\");"
            },
            {
              "step": 23,
              "variableName": "absPath",
              "startLine": 246,
              "startColumn": 43,
              "endLine": 246,
              "endColumn": 50,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/DefaultAccessManager.java",
              "type": "NamePath [name] : Name",
              "code": "        if (!absPath.isAbsolute()) {\n            throw new RepositoryException(\"Absolute path expected\");\n        }\n        return compiledPermissions.grants(absPath, permissions);\n    }\n\n    /**"
            },
            {
              "step": 24,
              "variableName": "Path absPath",
              "startLine": 108,
              "startColumn": 27,
              "endLine": 108,
              "endColumn": 39,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/authorization/AbstractCompiledPermissions.java",
              "type": "NamePath [name] : Name",
              "code": "    /**\n     * @see CompiledPermissions#grants(Path, int)\n     */\n    public boolean grants(Path absPath, int permissions) throws RepositoryException {\n        return getResult(absPath).grants(permissions);\n    }\n"
            },
            {
              "step": 25,
              "variableName": "absPath",
              "startLine": 109,
              "startColumn": 26,
              "endLine": 109,
              "endColumn": 33,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/authorization/AbstractCompiledPermissions.java",
              "type": "NamePath [name] : Name",
              "code": "     * @see CompiledPermissions#grants(Path, int)\n     */\n    public boolean grants(Path absPath, int permissions) throws RepositoryException {\n        return getResult(absPath).grants(permissions);\n    }\n\n    /**"
            },
            {
              "step": 26,
              "variableName": "Path absPath",
              "startLine": 228,
              "startColumn": 33,
              "endLine": 228,
              "endColumn": 45,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/authorization/combined/CombinedProvider.java",
              "type": "NamePath [name] : Name",
              "code": "         * @see AbstractCompiledPermissions#getResult(Path)\n         */\n        @Override\n        public Result getResult(Path absPath) throws RepositoryException {\n            // TODO: missing caching\n            return buildResult(absPath);\n        }"
            },
            {
              "step": 27,
              "variableName": "absPath",
              "startLine": 230,
              "startColumn": 32,
              "endLine": 230,
              "endColumn": 39,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/authorization/combined/CombinedProvider.java",
              "type": "NamePath [name] : Name",
              "code": "        @Override\n        public Result getResult(Path absPath) throws RepositoryException {\n            // TODO: missing caching\n            return buildResult(absPath);\n        }\n\n        /**"
            },
            {
              "step": 28,
              "variableName": "Path absPath",
              "startLine": 237,
              "startColumn": 38,
              "endLine": 237,
              "endColumn": 50,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/authorization/combined/CombinedProvider.java",
              "type": "NamePath [name] : Name",
              "code": "         * @see AbstractCompiledPermissions#buildResult(Path)\n         */\n        @Override\n        protected Result buildResult(Path absPath) throws RepositoryException {\n            Result res = null;\n            for (AbstractCompiledPermissions acp : cPermissions) {\n                Result other = acp.getResult(absPath);"
            },
            {
              "step": 29,
              "variableName": "absPath",
              "startLine": 240,
              "startColumn": 46,
              "endLine": 240,
              "endColumn": 53,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/authorization/combined/CombinedProvider.java",
              "type": "NamePath [name] : Name",
              "code": "        protected Result buildResult(Path absPath) throws RepositoryException {\n            Result res = null;\n            for (AbstractCompiledPermissions acp : cPermissions) {\n                Result other = acp.getResult(absPath);\n                res = (res == null) ? other : res.combine(other);\n            }\n            return res;"
            },
            {
              "step": 30,
              "variableName": "Path absPath",
              "startLine": 46,
              "startColumn": 29,
              "endLine": 46,
              "endColumn": 41,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/authorization/AbstractCompiledPermissions.java",
              "type": "NamePath [name] : Name",
              "code": "     * @return the <code>Result</code> for the give <code>absPath</code>.\n     * @throws RepositoryException if an error occurs.\n     */\n    public Result getResult(Path absPath) throws RepositoryException {\n        Result result;\n        synchronized (monitor) {\n            result = cache.get(absPath);"
            },
            {
              "step": 31,
              "variableName": "absPath",
              "startLine": 54,
              "startColumn": 42,
              "endLine": 54,
              "endColumn": 49,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/authorization/AbstractCompiledPermissions.java",
              "type": "NamePath [name] : Name",
              "code": "                if (absPath == null) {\n                    result = buildRepositoryResult();\n                } else {\n                    result = buildResult(absPath);\n                }\n                cache.put(absPath, result);\n            }"
            },
            {
              "step": 32,
              "variableName": "Path absPath",
              "startLine": 165,
              "startColumn": 34,
              "endLine": 165,
              "endColumn": 46,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/authorization/acl/CompiledPermissionsImpl.java",
              "type": "NamePath [name] : Name",
              "code": "     * @see AbstractCompiledPermissions#buildResult(org.apache.jackrabbit.spi.Path)\n     */\n    @Override\n    protected Result buildResult(Path absPath) throws RepositoryException {\n        boolean existingNode = false;\n        NodeImpl node;\n"
            },
            {
              "step": 33,
              "variableName": "absPath",
              "startLine": 171,
              "startColumn": 45,
              "endLine": 171,
              "endColumn": 52,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/authorization/acl/CompiledPermissionsImpl.java",
              "type": "NamePath [name] : Name",
              "code": "\n        ItemManager itemMgr = session.getItemManager();\n        try {\n            ItemImpl item = itemMgr.getItem(absPath);\n            if (item.isNode()) {\n                node = (NodeImpl) item;\n                existingNode = true;"
            },
            {
              "step": 34,
              "variableName": "Path path",
              "startLine": 549,
              "startColumn": 29,
              "endLine": 549,
              "endColumn": 38,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/ItemManager.java",
              "type": "NamePath [name] : Name",
              "code": "     * @throws RepositoryException\n     */\n    @Deprecated\n    public ItemImpl getItem(Path path) throws PathNotFoundException,\n            AccessDeniedException, RepositoryException {\n        ItemId id = hierMgr.resolvePath(path);\n        if (id == null) {"
            },
            {
              "step": 35,
              "variableName": "path",
              "startLine": 559,
              "startColumn": 32,
              "endLine": 559,
              "endColumn": 36,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/ItemManager.java",
              "type": "NamePath [name] : Name",
              "code": "            ItemImpl item = getItem(id, path, true);\n            // Test, if this item is a shareable node.\n            if (item.isNode() && ((NodeImpl) item).isShareable()) {\n                return getNode(path);\n            }\n            return item;\n        } catch (ItemNotFoundException infe) {"
            },
            {
              "step": 36,
              "variableName": "Path path",
              "startLine": 574,
              "startColumn": 29,
              "endLine": 574,
              "endColumn": 38,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/ItemManager.java",
              "type": "NamePath [name] : Name",
              "code": "     * @throws AccessDeniedException\n     * @throws RepositoryException\n     */\n    public NodeImpl getNode(Path path) throws PathNotFoundException,\n            AccessDeniedException, RepositoryException {\n        NodeId id = hierMgr.resolveNodePath(path);\n        if (id == null) {"
            },
            {
              "step": 37,
              "variableName": "path",
              "startLine": 576,
              "startColumn": 45,
              "endLine": 576,
              "endColumn": 49,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/ItemManager.java",
              "type": "NamePath [name] : Name",
              "code": "     */\n    public NodeImpl getNode(Path path) throws PathNotFoundException,\n            AccessDeniedException, RepositoryException {\n        NodeId id = hierMgr.resolveNodePath(path);\n        if (id == null) {\n            throw new PathNotFoundException(safeGetJCRPath(path));\n        }"
            },
            {
              "step": 38,
              "variableName": "Path path",
              "startLine": 378,
              "startColumn": 35,
              "endLine": 378,
              "endColumn": 44,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NamePath [name] : Name",
              "code": "    /**\n     * {@inheritDoc}\n     */\n    public NodeId resolveNodePath(Path path) throws RepositoryException {\n        return (NodeId) resolvePath(path, RETURN_NODE);\n    }\n"
            },
            {
              "step": 39,
              "variableName": "path",
              "startLine": 379,
              "startColumn": 37,
              "endLine": 379,
              "endColumn": 41,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NamePath [name] : Name",
              "code": "     * {@inheritDoc}\n     */\n    public NodeId resolveNodePath(Path path) throws RepositoryException {\n        return (NodeId) resolvePath(path, RETURN_NODE);\n    }\n\n    /**"
            },
            {
              "step": 40,
              "variableName": "Path path",
              "startLine": 154,
              "startColumn": 34,
              "endLine": 154,
              "endColumn": 43,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/CachingHierarchyManager.java",
              "type": "NamePath [name] : Name",
              "code": "    /**\n     * {@inheritDoc}\n     */\n    protected ItemId resolvePath(Path path, int typesAllowed)\n            throws RepositoryException {\n\n        Path pathToNode = path;"
            },
            {
              "step": 41,
              "variableName": "path",
              "startLine": 183,
              "startColumn": 52,
              "endLine": 183,
              "endColumn": 56,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/CachingHierarchyManager.java",
              "type": "NamePath [name] : Name",
              "code": "            return resolvePath(elements, element.getDepth() + 1, entry.getId(), typesAllowed);\n        } catch (ItemStateException e) {\n            String msg = \"failed to retrieve state of intermediary node for entry: \" \n                    + entry.getId() + \", path: \" + path.getString();\n            logItemStateException(msg, e);\n            log.debug(msg);\n            // probably stale cache entry -> evict"
            },
            {
              "step": 42,
              "variableName": "getString",
              "startLine": 130,
              "startColumn": 19,
              "endLine": 130,
              "endColumn": 28,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/RelativePath.java",
              "type": "NamePath [name] : Name",
              "code": "        return parent;\n    }\n\n    public String getString() {\n        if (parent != null) {\n            return parent.getString() + Path.DELIMITER + getElementString();\n        } else {"
            },
            {
              "step": 43,
              "variableName": "getElementString()",
              "startLine": 132,
              "startColumn": 58,
              "endLine": 132,
              "endColumn": 76,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/RelativePath.java",
              "type": "NamePath [name] : Name",
              "code": "\n    public String getString() {\n        if (parent != null) {\n            return parent.getString() + Path.DELIMITER + getElementString();\n        } else {\n            return getElementString();\n        }"
            },
            {
              "step": 44,
              "variableName": "getElementString",
              "startLine": 61,
              "startColumn": 22,
              "endLine": 61,
              "endColumn": 38,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/NamePath.java",
              "type": "NamePath [name] : Name",
              "code": "        }\n    }\n\n    protected String getElementString() {\n        if (index > Path.INDEX_DEFAULT) {\n            return name + \"[\" + index + \"]\";\n        } else {"
            },
            {
              "step": 45,
              "variableName": "name",
              "startLine": 63,
              "startColumn": 20,
              "endLine": 63,
              "endColumn": 24,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/NamePath.java",
              "type": "NamePath [name] : Name",
              "code": "\n    protected String getElementString() {\n        if (index > Path.INDEX_DEFAULT) {\n            return name + \"[\" + index + \"]\";\n        } else {\n            return name.toString();\n        }"
            },
            {
              "step": 46,
              "variableName": "name",
              "startLine": 63,
              "startColumn": 20,
              "endLine": 63,
              "endColumn": 24,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/NamePath.java",
              "type": "Name",
              "code": "\n    protected String getElementString() {\n        if (index > Path.INDEX_DEFAULT) {\n            return name + \"[\" + index + \"]\";\n        } else {\n            return name.toString();\n        }"
            },
            {
              "step": 47,
              "variableName": "name + \"[\" + index + \"]\"",
              "startLine": 63,
              "startColumn": 20,
              "endLine": 63,
              "endColumn": 44,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/NamePath.java",
              "type": "String",
              "code": "\n    protected String getElementString() {\n        if (index > Path.INDEX_DEFAULT) {\n            return name + \"[\" + index + \"]\";\n        } else {\n            return name.toString();\n        }"
            },
            {
              "step": 48,
              "variableName": "getElementString()",
              "startLine": 132,
              "startColumn": 58,
              "endLine": 132,
              "endColumn": 76,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/RelativePath.java",
              "type": "String",
              "code": "\n    public String getString() {\n        if (parent != null) {\n            return parent.getString() + Path.DELIMITER + getElementString();\n        } else {\n            return getElementString();\n        }"
            },
            {
              "step": 49,
              "variableName": "parent.getString() + Path.DELIMITER + getElementString()",
              "startLine": 132,
              "startColumn": 20,
              "endLine": 132,
              "endColumn": 76,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/RelativePath.java",
              "type": "String",
              "code": "\n    public String getString() {\n        if (parent != null) {\n            return parent.getString() + Path.DELIMITER + getElementString();\n        } else {\n            return getElementString();\n        }"
            },
            {
              "step": 50,
              "variableName": "path.getString()",
              "startLine": 183,
              "startColumn": 52,
              "endLine": 183,
              "endColumn": 68,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/CachingHierarchyManager.java",
              "type": "String",
              "code": "            return resolvePath(elements, element.getDepth() + 1, entry.getId(), typesAllowed);\n        } catch (ItemStateException e) {\n            String msg = \"failed to retrieve state of intermediary node for entry: \" \n                    + entry.getId() + \", path: \" + path.getString();\n            logItemStateException(msg, e);\n            log.debug(msg);\n            // probably stale cache entry -> evict"
            },
            {
              "step": 51,
              "variableName": "msg",
              "startLine": 184,
              "startColumn": 35,
              "endLine": 184,
              "endColumn": 38,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/CachingHierarchyManager.java",
              "type": "String",
              "code": "        } catch (ItemStateException e) {\n            String msg = \"failed to retrieve state of intermediary node for entry: \" \n                    + entry.getId() + \", path: \" + path.getString();\n            logItemStateException(msg, e);\n            log.debug(msg);\n            // probably stale cache entry -> evict\n            evictAll(entry.getId(), true);"
            },
            {
              "step": 52,
              "variableName": "String logMessage",
              "startLine": 884,
              "startColumn": 40,
              "endLine": 884,
              "endColumn": 57,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/CachingHierarchyManager.java",
              "type": "String",
              "code": "     * @param logMessage log message\n     * @param e item state exception\n     */\n    private void logItemStateException(String logMessage, ItemStateException e) {\n        long now = System.currentTimeMillis();\n        if ((now - itemStateExceptionLogTimestamp) >= ITEM_STATE_EXCEPTION_LOG_INTERVAL_MILLIS) {\n            itemStateExceptionLogTimestamp = now;"
            },
            {
              "step": 53,
              "variableName": "logMessage",
              "startLine": 888,
              "startColumn": 23,
              "endLine": 888,
              "endColumn": 33,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/CachingHierarchyManager.java",
              "type": "",
              "code": "        long now = System.currentTimeMillis();\n        if ((now - itemStateExceptionLogTimestamp) >= ITEM_STATE_EXCEPTION_LOG_INTERVAL_MILLIS) {\n            itemStateExceptionLogTimestamp = now;\n            log.debug(logMessage, e);\n        } else {\n            log.debug(logMessage);\n        }"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 4,
      "fileName": "CachingHierarchyManager.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "P_PASSWORD",
              "startLine": 782,
              "startColumn": 31,
              "endLine": 782,
              "endColumn": 41,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/user/UserManagerImpl.java",
              "type": "Name",
              "code": "        } else {\n            pwHash = password;\n        }\n        setProperty(userNode, P_PASSWORD, getValue(pwHash), userNode.isNew());\n    }\n\n    void setProtectedProperty(NodeImpl node, Name propName, Value value) throws RepositoryException, LockException, ConstraintViolationException, ItemExistsException, VersionException {"
            },
            {
              "step": 1,
              "variableName": "Name name",
              "startLine": 106,
              "startColumn": 57,
              "endLine": 106,
              "endColumn": 66,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/ProtectedItemModifier.java",
              "type": "Name",
              "code": "        return setProperty(parentImpl, name, value, false);\n    }\n\n    protected Property setProperty(NodeImpl parentImpl, Name name, Value value, boolean ignorePermissions) throws RepositoryException {\n        if (!ignorePermissions) {\n            checkPermission(parentImpl, name, getPermission(false, false));\n        }"
            },
            {
              "step": 2,
              "variableName": "name",
              "startLine": 108,
              "startColumn": 41,
              "endLine": 108,
              "endColumn": 45,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/ProtectedItemModifier.java",
              "type": "Name",
              "code": "\n    protected Property setProperty(NodeImpl parentImpl, Name name, Value value, boolean ignorePermissions) throws RepositoryException {\n        if (!ignorePermissions) {\n            checkPermission(parentImpl, name, getPermission(false, false));\n        }\n        // validation: make sure Node is not locked or checked-in.\n        parentImpl.checkSetProperty();"
            },
            {
              "step": 3,
              "variableName": "Name childName",
              "startLine": 170,
              "startColumn": 49,
              "endLine": 170,
              "endColumn": 63,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/ProtectedItemModifier.java",
              "type": "Name",
              "code": "        }\n    }\n\n    private void checkPermission(NodeImpl node, Name childName, int perm) throws RepositoryException {\n        if (perm > Permission.NONE) {\n            SessionImpl sImpl = (SessionImpl) node.getSession();\n            AccessManager acMgr = sImpl.getAccessManager();"
            },
            {
              "step": 4,
              "variableName": "childName",
              "startLine": 175,
              "startColumn": 72,
              "endLine": 175,
              "endColumn": 81,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/ProtectedItemModifier.java",
              "type": "Name",
              "code": "            SessionImpl sImpl = (SessionImpl) node.getSession();\n            AccessManager acMgr = sImpl.getAccessManager();\n\n            boolean isGranted = acMgr.isGranted(node.getPrimaryPath(), childName, perm);\n            if (!isGranted) {\n                throw new AccessDeniedException(\"Permission denied.\");\n            }"
            },
            {
              "step": 5,
              "variableName": "Name childName",
              "startLine": 252,
              "startColumn": 47,
              "endLine": 252,
              "endColumn": 61,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/DefaultAccessManager.java",
              "type": "Name",
              "code": "    /**\n     * @see AccessManager#isGranted(Path, Name, int)\n     */\n    public boolean isGranted(Path parentPath, Name childName, int permissions) throws RepositoryException {\n        Path p = PathFactoryImpl.getInstance().create(parentPath, childName, true);\n        return isGranted(p, permissions);\n    }"
            },
            {
              "step": 6,
              "variableName": "childName",
              "startLine": 253,
              "startColumn": 67,
              "endLine": 253,
              "endColumn": 76,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/DefaultAccessManager.java",
              "type": "Name",
              "code": "     * @see AccessManager#isGranted(Path, Name, int)\n     */\n    public boolean isGranted(Path parentPath, Name childName, int permissions) throws RepositoryException {\n        Path p = PathFactoryImpl.getInstance().create(parentPath, childName, true);\n        return isGranted(p, permissions);\n    }\n"
            },
            {
              "step": 7,
              "variableName": "Name name",
              "startLine": 62,
              "startColumn": 37,
              "endLine": 62,
              "endColumn": 46,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/PathFactoryImpl.java",
              "type": "Name",
              "code": "    /**\n     * @see PathFactory#create(Path, Name, boolean)\n     */\n    public Path create(Path parent, Name name, boolean normalize) throws RepositoryException {\n        return create(parent, name, Path.INDEX_UNDEFINED, normalize);\n    }\n"
            },
            {
              "step": 8,
              "variableName": "name",
              "startLine": 63,
              "startColumn": 31,
              "endLine": 63,
              "endColumn": 35,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/PathFactoryImpl.java",
              "type": "Name",
              "code": "     * @see PathFactory#create(Path, Name, boolean)\n     */\n    public Path create(Path parent, Name name, boolean normalize) throws RepositoryException {\n        return create(parent, name, Path.INDEX_UNDEFINED, normalize);\n    }\n\n    /**"
            },
            {
              "step": 9,
              "variableName": "Name name",
              "startLine": 69,
              "startColumn": 37,
              "endLine": 69,
              "endColumn": 46,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/PathFactoryImpl.java",
              "type": "Name",
              "code": "    /**\n     * @see PathFactory#create(Path, Name, int, boolean)\n     */\n    public Path create(Path parent, Name name, int index, boolean normalize) throws IllegalArgumentException, RepositoryException {\n        if (RootPath.NAME.equals(name)) {\n            throw new IllegalArgumentException();\n        }"
            },
            {
              "step": 10,
              "variableName": "name",
              "startLine": 73,
              "startColumn": 42,
              "endLine": 73,
              "endColumn": 46,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/PathFactoryImpl.java",
              "type": "Name",
              "code": "        if (RootPath.NAME.equals(name)) {\n            throw new IllegalArgumentException();\n        }\n        Path path = new NamePath(parent, name, index);\n        if (normalize) {\n            return path.getNormalizedPath();\n        } else {"
            },
            {
              "step": 11,
              "variableName": "Name name",
              "startLine": 41,
              "startColumn": 34,
              "endLine": 41,
              "endColumn": 43,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/NamePath.java",
              "type": "Name",
              "code": "     */\n    private final int index;\n\n    public NamePath(Path parent, Name name, int index) {\n        super(parent);\n        assert name != null;\n        assert index >= 0;"
            },
            {
              "step": 12,
              "variableName": "name",
              "startLine": 45,
              "startColumn": 21,
              "endLine": 45,
              "endColumn": 25,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/NamePath.java",
              "type": "Name",
              "code": "        super(parent);\n        assert name != null;\n        assert index >= 0;\n        this.name = name;\n        this.index = index;\n    }\n"
            },
            {
              "step": 13,
              "variableName": "this",
              "startLine": 45,
              "startColumn": 9,
              "endLine": 45,
              "endColumn": 13,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/NamePath.java",
              "type": "NamePath [name] : Name",
              "code": "        super(parent);\n        assert name != null;\n        assert index >= 0;\n        this.name = name;\n        this.index = index;\n    }\n"
            },
            {
              "step": 14,
              "variableName": "new NamePath(parent, name, index)",
              "startLine": 73,
              "startColumn": 21,
              "endLine": 73,
              "endColumn": 54,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/PathFactoryImpl.java",
              "type": "NamePath [name] : Name",
              "code": "        if (RootPath.NAME.equals(name)) {\n            throw new IllegalArgumentException();\n        }\n        Path path = new NamePath(parent, name, index);\n        if (normalize) {\n            return path.getNormalizedPath();\n        } else {"
            },
            {
              "step": 15,
              "variableName": "path",
              "startLine": 77,
              "startColumn": 20,
              "endLine": 77,
              "endColumn": 24,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/PathFactoryImpl.java",
              "type": "NamePath [name] : Name",
              "code": "        if (normalize) {\n            return path.getNormalizedPath();\n        } else {\n            return path;\n        }\n    }\n"
            },
            {
              "step": 16,
              "variableName": "create(parent, name, Path.INDEX_UNDEFINED, normalize)",
              "startLine": 63,
              "startColumn": 16,
              "endLine": 63,
              "endColumn": 69,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/PathFactoryImpl.java",
              "type": "NamePath [name] : Name",
              "code": "     * @see PathFactory#create(Path, Name, boolean)\n     */\n    public Path create(Path parent, Name name, boolean normalize) throws RepositoryException {\n        return create(parent, name, Path.INDEX_UNDEFINED, normalize);\n    }\n\n    /**"
            },
            {
              "step": 17,
              "variableName": "PathFactoryImpl.getInstance().create(parentPath, childName, true)",
              "startLine": 253,
              "startColumn": 18,
              "endLine": 253,
              "endColumn": 83,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/DefaultAccessManager.java",
              "type": "NamePath [name] : Name",
              "code": "     * @see AccessManager#isGranted(Path, Name, int)\n     */\n    public boolean isGranted(Path parentPath, Name childName, int permissions) throws RepositoryException {\n        Path p = PathFactoryImpl.getInstance().create(parentPath, childName, true);\n        return isGranted(p, permissions);\n    }\n"
            },
            {
              "step": 18,
              "variableName": "p",
              "startLine": 254,
              "startColumn": 26,
              "endLine": 254,
              "endColumn": 27,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/DefaultAccessManager.java",
              "type": "NamePath [name] : Name",
              "code": "     */\n    public boolean isGranted(Path parentPath, Name childName, int permissions) throws RepositoryException {\n        Path p = PathFactoryImpl.getInstance().create(parentPath, childName, true);\n        return isGranted(p, permissions);\n    }\n\n    /**"
            },
            {
              "step": 19,
              "variableName": "Path absPath",
              "startLine": 241,
              "startColumn": 30,
              "endLine": 241,
              "endColumn": 42,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/DefaultAccessManager.java",
              "type": "NamePath [name] : Name",
              "code": "    /**\n     * @see AccessManager#isGranted(Path, int)\n     */\n    public boolean isGranted(Path absPath, int permissions) throws RepositoryException {\n        checkInitialized();\n        if (!absPath.isAbsolute()) {\n            throw new RepositoryException(\"Absolute path expected\");"
            },
            {
              "step": 20,
              "variableName": "absPath",
              "startLine": 246,
              "startColumn": 43,
              "endLine": 246,
              "endColumn": 50,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/DefaultAccessManager.java",
              "type": "NamePath [name] : Name",
              "code": "        if (!absPath.isAbsolute()) {\n            throw new RepositoryException(\"Absolute path expected\");\n        }\n        return compiledPermissions.grants(absPath, permissions);\n    }\n\n    /**"
            },
            {
              "step": 21,
              "variableName": "Path absPath",
              "startLine": 108,
              "startColumn": 27,
              "endLine": 108,
              "endColumn": 39,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/authorization/AbstractCompiledPermissions.java",
              "type": "NamePath [name] : Name",
              "code": "    /**\n     * @see CompiledPermissions#grants(Path, int)\n     */\n    public boolean grants(Path absPath, int permissions) throws RepositoryException {\n        return getResult(absPath).grants(permissions);\n    }\n"
            },
            {
              "step": 22,
              "variableName": "absPath",
              "startLine": 109,
              "startColumn": 26,
              "endLine": 109,
              "endColumn": 33,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/authorization/AbstractCompiledPermissions.java",
              "type": "NamePath [name] : Name",
              "code": "     * @see CompiledPermissions#grants(Path, int)\n     */\n    public boolean grants(Path absPath, int permissions) throws RepositoryException {\n        return getResult(absPath).grants(permissions);\n    }\n\n    /**"
            },
            {
              "step": 23,
              "variableName": "Path absPath",
              "startLine": 46,
              "startColumn": 29,
              "endLine": 46,
              "endColumn": 41,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/authorization/AbstractCompiledPermissions.java",
              "type": "NamePath [name] : Name",
              "code": "     * @return the <code>Result</code> for the give <code>absPath</code>.\n     * @throws RepositoryException if an error occurs.\n     */\n    public Result getResult(Path absPath) throws RepositoryException {\n        Result result;\n        synchronized (monitor) {\n            result = cache.get(absPath);"
            },
            {
              "step": 24,
              "variableName": "absPath",
              "startLine": 54,
              "startColumn": 42,
              "endLine": 54,
              "endColumn": 49,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/authorization/AbstractCompiledPermissions.java",
              "type": "NamePath [name] : Name",
              "code": "                if (absPath == null) {\n                    result = buildRepositoryResult();\n                } else {\n                    result = buildResult(absPath);\n                }\n                cache.put(absPath, result);\n            }"
            },
            {
              "step": 25,
              "variableName": "Path absPath",
              "startLine": 165,
              "startColumn": 34,
              "endLine": 165,
              "endColumn": 46,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/authorization/acl/CompiledPermissionsImpl.java",
              "type": "NamePath [name] : Name",
              "code": "     * @see AbstractCompiledPermissions#buildResult(org.apache.jackrabbit.spi.Path)\n     */\n    @Override\n    protected Result buildResult(Path absPath) throws RepositoryException {\n        boolean existingNode = false;\n        NodeImpl node;\n"
            },
            {
              "step": 26,
              "variableName": "absPath",
              "startLine": 171,
              "startColumn": 45,
              "endLine": 171,
              "endColumn": 52,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/authorization/acl/CompiledPermissionsImpl.java",
              "type": "NamePath [name] : Name",
              "code": "\n        ItemManager itemMgr = session.getItemManager();\n        try {\n            ItemImpl item = itemMgr.getItem(absPath);\n            if (item.isNode()) {\n                node = (NodeImpl) item;\n                existingNode = true;"
            },
            {
              "step": 27,
              "variableName": "Path path",
              "startLine": 549,
              "startColumn": 29,
              "endLine": 549,
              "endColumn": 38,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/ItemManager.java",
              "type": "NamePath [name] : Name",
              "code": "     * @throws RepositoryException\n     */\n    @Deprecated\n    public ItemImpl getItem(Path path) throws PathNotFoundException,\n            AccessDeniedException, RepositoryException {\n        ItemId id = hierMgr.resolvePath(path);\n        if (id == null) {"
            },
            {
              "step": 28,
              "variableName": "path",
              "startLine": 551,
              "startColumn": 41,
              "endLine": 551,
              "endColumn": 45,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/ItemManager.java",
              "type": "NamePath [name] : Name",
              "code": "    @Deprecated\n    public ItemImpl getItem(Path path) throws PathNotFoundException,\n            AccessDeniedException, RepositoryException {\n        ItemId id = hierMgr.resolvePath(path);\n        if (id == null) {\n            throw new PathNotFoundException(safeGetJCRPath(path));\n        }"
            },
            {
              "step": 29,
              "variableName": "Path path",
              "startLine": 362,
              "startColumn": 37,
              "endLine": 362,
              "endColumn": 46,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NamePath [name] : Name",
              "code": "    /**\n     * {@inheritDoc}\n     */\n    public final ItemId resolvePath(Path path) throws RepositoryException {\n        // shortcut\n        if (path.denotesRoot()) {\n            return rootNodeId;"
            },
            {
              "step": 30,
              "variableName": "path",
              "startLine": 372,
              "startColumn": 28,
              "endLine": 372,
              "endColumn": 32,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NamePath [name] : Name",
              "code": "            log.debug(msg);\n            throw new RepositoryException(msg);\n        }\n        return resolvePath(path, RETURN_ANY);\n    }\n\n    /**"
            },
            {
              "step": 31,
              "variableName": "Path path",
              "startLine": 154,
              "startColumn": 34,
              "endLine": 154,
              "endColumn": 43,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/CachingHierarchyManager.java",
              "type": "NamePath [name] : Name",
              "code": "    /**\n     * {@inheritDoc}\n     */\n    protected ItemId resolvePath(Path path, int typesAllowed)\n            throws RepositoryException {\n\n        Path pathToNode = path;"
            },
            {
              "step": 32,
              "variableName": "path",
              "startLine": 183,
              "startColumn": 52,
              "endLine": 183,
              "endColumn": 56,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/CachingHierarchyManager.java",
              "type": "NamePath [name] : Name",
              "code": "            return resolvePath(elements, element.getDepth() + 1, entry.getId(), typesAllowed);\n        } catch (ItemStateException e) {\n            String msg = \"failed to retrieve state of intermediary node for entry: \" \n                    + entry.getId() + \", path: \" + path.getString();\n            logItemStateException(msg, e);\n            log.debug(msg);\n            // probably stale cache entry -> evict"
            },
            {
              "step": 33,
              "variableName": "getString",
              "startLine": 130,
              "startColumn": 19,
              "endLine": 130,
              "endColumn": 28,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/RelativePath.java",
              "type": "NamePath [name] : Name",
              "code": "        return parent;\n    }\n\n    public String getString() {\n        if (parent != null) {\n            return parent.getString() + Path.DELIMITER + getElementString();\n        } else {"
            },
            {
              "step": 34,
              "variableName": "getElementString()",
              "startLine": 134,
              "startColumn": 20,
              "endLine": 134,
              "endColumn": 38,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/RelativePath.java",
              "type": "NamePath [name] : Name",
              "code": "        if (parent != null) {\n            return parent.getString() + Path.DELIMITER + getElementString();\n        } else {\n            return getElementString();\n        }\n    }\n"
            },
            {
              "step": 35,
              "variableName": "getElementString",
              "startLine": 61,
              "startColumn": 22,
              "endLine": 61,
              "endColumn": 38,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/NamePath.java",
              "type": "NamePath [name] : Name",
              "code": "        }\n    }\n\n    protected String getElementString() {\n        if (index > Path.INDEX_DEFAULT) {\n            return name + \"[\" + index + \"]\";\n        } else {"
            },
            {
              "step": 36,
              "variableName": "name",
              "startLine": 63,
              "startColumn": 20,
              "endLine": 63,
              "endColumn": 24,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/NamePath.java",
              "type": "NamePath [name] : Name",
              "code": "\n    protected String getElementString() {\n        if (index > Path.INDEX_DEFAULT) {\n            return name + \"[\" + index + \"]\";\n        } else {\n            return name.toString();\n        }"
            },
            {
              "step": 37,
              "variableName": "name",
              "startLine": 63,
              "startColumn": 20,
              "endLine": 63,
              "endColumn": 24,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/NamePath.java",
              "type": "Name",
              "code": "\n    protected String getElementString() {\n        if (index > Path.INDEX_DEFAULT) {\n            return name + \"[\" + index + \"]\";\n        } else {\n            return name.toString();\n        }"
            },
            {
              "step": 38,
              "variableName": "name + \"[\" + index + \"]\"",
              "startLine": 63,
              "startColumn": 20,
              "endLine": 63,
              "endColumn": 44,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/NamePath.java",
              "type": "String",
              "code": "\n    protected String getElementString() {\n        if (index > Path.INDEX_DEFAULT) {\n            return name + \"[\" + index + \"]\";\n        } else {\n            return name.toString();\n        }"
            },
            {
              "step": 39,
              "variableName": "getElementString()",
              "startLine": 134,
              "startColumn": 20,
              "endLine": 134,
              "endColumn": 38,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/RelativePath.java",
              "type": "String",
              "code": "        if (parent != null) {\n            return parent.getString() + Path.DELIMITER + getElementString();\n        } else {\n            return getElementString();\n        }\n    }\n"
            },
            {
              "step": 40,
              "variableName": "path.getString()",
              "startLine": 183,
              "startColumn": 52,
              "endLine": 183,
              "endColumn": 68,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/CachingHierarchyManager.java",
              "type": "String",
              "code": "            return resolvePath(elements, element.getDepth() + 1, entry.getId(), typesAllowed);\n        } catch (ItemStateException e) {\n            String msg = \"failed to retrieve state of intermediary node for entry: \" \n                    + entry.getId() + \", path: \" + path.getString();\n            logItemStateException(msg, e);\n            log.debug(msg);\n            // probably stale cache entry -> evict"
            },
            {
              "step": 41,
              "variableName": "msg",
              "startLine": 184,
              "startColumn": 35,
              "endLine": 184,
              "endColumn": 38,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/CachingHierarchyManager.java",
              "type": "String",
              "code": "        } catch (ItemStateException e) {\n            String msg = \"failed to retrieve state of intermediary node for entry: \" \n                    + entry.getId() + \", path: \" + path.getString();\n            logItemStateException(msg, e);\n            log.debug(msg);\n            // probably stale cache entry -> evict\n            evictAll(entry.getId(), true);"
            },
            {
              "step": 42,
              "variableName": "String logMessage",
              "startLine": 884,
              "startColumn": 40,
              "endLine": 884,
              "endColumn": 57,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/CachingHierarchyManager.java",
              "type": "String",
              "code": "     * @param logMessage log message\n     * @param e item state exception\n     */\n    private void logItemStateException(String logMessage, ItemStateException e) {\n        long now = System.currentTimeMillis();\n        if ((now - itemStateExceptionLogTimestamp) >= ITEM_STATE_EXCEPTION_LOG_INTERVAL_MILLIS) {\n            itemStateExceptionLogTimestamp = now;"
            },
            {
              "step": 43,
              "variableName": "logMessage",
              "startLine": 890,
              "startColumn": 23,
              "endLine": 890,
              "endColumn": 33,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/CachingHierarchyManager.java",
              "type": "",
              "code": "            itemStateExceptionLogTimestamp = now;\n            log.debug(logMessage, e);\n        } else {\n            log.debug(logMessage);\n        }\n    }\n"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "P_PASSWORD",
              "startLine": 782,
              "startColumn": 31,
              "endLine": 782,
              "endColumn": 41,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/user/UserManagerImpl.java",
              "type": "Name",
              "code": "        } else {\n            pwHash = password;\n        }\n        setProperty(userNode, P_PASSWORD, getValue(pwHash), userNode.isNew());\n    }\n\n    void setProtectedProperty(NodeImpl node, Name propName, Value value) throws RepositoryException, LockException, ConstraintViolationException, ItemExistsException, VersionException {"
            },
            {
              "step": 1,
              "variableName": "Name name",
              "startLine": 106,
              "startColumn": 57,
              "endLine": 106,
              "endColumn": 66,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/ProtectedItemModifier.java",
              "type": "Name",
              "code": "        return setProperty(parentImpl, name, value, false);\n    }\n\n    protected Property setProperty(NodeImpl parentImpl, Name name, Value value, boolean ignorePermissions) throws RepositoryException {\n        if (!ignorePermissions) {\n            checkPermission(parentImpl, name, getPermission(false, false));\n        }"
            },
            {
              "step": 2,
              "variableName": "name",
              "startLine": 108,
              "startColumn": 41,
              "endLine": 108,
              "endColumn": 45,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/ProtectedItemModifier.java",
              "type": "Name",
              "code": "\n    protected Property setProperty(NodeImpl parentImpl, Name name, Value value, boolean ignorePermissions) throws RepositoryException {\n        if (!ignorePermissions) {\n            checkPermission(parentImpl, name, getPermission(false, false));\n        }\n        // validation: make sure Node is not locked or checked-in.\n        parentImpl.checkSetProperty();"
            },
            {
              "step": 3,
              "variableName": "Name childName",
              "startLine": 170,
              "startColumn": 49,
              "endLine": 170,
              "endColumn": 63,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/ProtectedItemModifier.java",
              "type": "Name",
              "code": "        }\n    }\n\n    private void checkPermission(NodeImpl node, Name childName, int perm) throws RepositoryException {\n        if (perm > Permission.NONE) {\n            SessionImpl sImpl = (SessionImpl) node.getSession();\n            AccessManager acMgr = sImpl.getAccessManager();"
            },
            {
              "step": 4,
              "variableName": "childName",
              "startLine": 175,
              "startColumn": 72,
              "endLine": 175,
              "endColumn": 81,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/ProtectedItemModifier.java",
              "type": "Name",
              "code": "            SessionImpl sImpl = (SessionImpl) node.getSession();\n            AccessManager acMgr = sImpl.getAccessManager();\n\n            boolean isGranted = acMgr.isGranted(node.getPrimaryPath(), childName, perm);\n            if (!isGranted) {\n                throw new AccessDeniedException(\"Permission denied.\");\n            }"
            },
            {
              "step": 5,
              "variableName": "Name childName",
              "startLine": 252,
              "startColumn": 47,
              "endLine": 252,
              "endColumn": 61,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/DefaultAccessManager.java",
              "type": "Name",
              "code": "    /**\n     * @see AccessManager#isGranted(Path, Name, int)\n     */\n    public boolean isGranted(Path parentPath, Name childName, int permissions) throws RepositoryException {\n        Path p = PathFactoryImpl.getInstance().create(parentPath, childName, true);\n        return isGranted(p, permissions);\n    }"
            },
            {
              "step": 6,
              "variableName": "childName",
              "startLine": 253,
              "startColumn": 67,
              "endLine": 253,
              "endColumn": 76,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/DefaultAccessManager.java",
              "type": "Name",
              "code": "     * @see AccessManager#isGranted(Path, Name, int)\n     */\n    public boolean isGranted(Path parentPath, Name childName, int permissions) throws RepositoryException {\n        Path p = PathFactoryImpl.getInstance().create(parentPath, childName, true);\n        return isGranted(p, permissions);\n    }\n"
            },
            {
              "step": 7,
              "variableName": "Name name",
              "startLine": 62,
              "startColumn": 37,
              "endLine": 62,
              "endColumn": 46,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/PathFactoryImpl.java",
              "type": "Name",
              "code": "    /**\n     * @see PathFactory#create(Path, Name, boolean)\n     */\n    public Path create(Path parent, Name name, boolean normalize) throws RepositoryException {\n        return create(parent, name, Path.INDEX_UNDEFINED, normalize);\n    }\n"
            },
            {
              "step": 8,
              "variableName": "name",
              "startLine": 63,
              "startColumn": 31,
              "endLine": 63,
              "endColumn": 35,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/PathFactoryImpl.java",
              "type": "Name",
              "code": "     * @see PathFactory#create(Path, Name, boolean)\n     */\n    public Path create(Path parent, Name name, boolean normalize) throws RepositoryException {\n        return create(parent, name, Path.INDEX_UNDEFINED, normalize);\n    }\n\n    /**"
            },
            {
              "step": 9,
              "variableName": "Name name",
              "startLine": 69,
              "startColumn": 37,
              "endLine": 69,
              "endColumn": 46,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/PathFactoryImpl.java",
              "type": "Name",
              "code": "    /**\n     * @see PathFactory#create(Path, Name, int, boolean)\n     */\n    public Path create(Path parent, Name name, int index, boolean normalize) throws IllegalArgumentException, RepositoryException {\n        if (RootPath.NAME.equals(name)) {\n            throw new IllegalArgumentException();\n        }"
            },
            {
              "step": 10,
              "variableName": "name",
              "startLine": 73,
              "startColumn": 42,
              "endLine": 73,
              "endColumn": 46,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/PathFactoryImpl.java",
              "type": "Name",
              "code": "        if (RootPath.NAME.equals(name)) {\n            throw new IllegalArgumentException();\n        }\n        Path path = new NamePath(parent, name, index);\n        if (normalize) {\n            return path.getNormalizedPath();\n        } else {"
            },
            {
              "step": 11,
              "variableName": "Name name",
              "startLine": 41,
              "startColumn": 34,
              "endLine": 41,
              "endColumn": 43,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/NamePath.java",
              "type": "Name",
              "code": "     */\n    private final int index;\n\n    public NamePath(Path parent, Name name, int index) {\n        super(parent);\n        assert name != null;\n        assert index >= 0;"
            },
            {
              "step": 12,
              "variableName": "name",
              "startLine": 45,
              "startColumn": 21,
              "endLine": 45,
              "endColumn": 25,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/NamePath.java",
              "type": "Name",
              "code": "        super(parent);\n        assert name != null;\n        assert index >= 0;\n        this.name = name;\n        this.index = index;\n    }\n"
            },
            {
              "step": 13,
              "variableName": "this",
              "startLine": 45,
              "startColumn": 9,
              "endLine": 45,
              "endColumn": 13,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/NamePath.java",
              "type": "NamePath [name] : Name",
              "code": "        super(parent);\n        assert name != null;\n        assert index >= 0;\n        this.name = name;\n        this.index = index;\n    }\n"
            },
            {
              "step": 14,
              "variableName": "new NamePath(parent, name, index)",
              "startLine": 73,
              "startColumn": 21,
              "endLine": 73,
              "endColumn": 54,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/PathFactoryImpl.java",
              "type": "NamePath [name] : Name",
              "code": "        if (RootPath.NAME.equals(name)) {\n            throw new IllegalArgumentException();\n        }\n        Path path = new NamePath(parent, name, index);\n        if (normalize) {\n            return path.getNormalizedPath();\n        } else {"
            },
            {
              "step": 15,
              "variableName": "path",
              "startLine": 75,
              "startColumn": 20,
              "endLine": 75,
              "endColumn": 24,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/PathFactoryImpl.java",
              "type": "NamePath [name] : Name",
              "code": "        }\n        Path path = new NamePath(parent, name, index);\n        if (normalize) {\n            return path.getNormalizedPath();\n        } else {\n            return path;\n        }"
            },
            {
              "step": 16,
              "variableName": "getNormalizedPath",
              "startLine": 107,
              "startColumn": 17,
              "endLine": 107,
              "endColumn": 34,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/NamePath.java",
              "type": "NamePath [name] : Name",
              "code": "                    && !parent.denotesCurrent());\n    }\n\n    public Path getNormalizedPath() throws RepositoryException {\n        if (isNormalized()) {\n            return this;\n        } else {"
            },
            {
              "step": 17,
              "variableName": "this",
              "startLine": 109,
              "startColumn": 20,
              "endLine": 109,
              "endColumn": 24,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/NamePath.java",
              "type": "NamePath [name] : Name",
              "code": "\n    public Path getNormalizedPath() throws RepositoryException {\n        if (isNormalized()) {\n            return this;\n        } else {\n            // parent is guaranteed to be !null\n            Path normalized = parent.getNormalizedPath();"
            },
            {
              "step": 18,
              "variableName": "path.getNormalizedPath()",
              "startLine": 75,
              "startColumn": 20,
              "endLine": 75,
              "endColumn": 44,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/PathFactoryImpl.java",
              "type": "NamePath [name] : Name",
              "code": "        }\n        Path path = new NamePath(parent, name, index);\n        if (normalize) {\n            return path.getNormalizedPath();\n        } else {\n            return path;\n        }"
            },
            {
              "step": 19,
              "variableName": "create(parent, name, Path.INDEX_UNDEFINED, normalize)",
              "startLine": 63,
              "startColumn": 16,
              "endLine": 63,
              "endColumn": 69,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/PathFactoryImpl.java",
              "type": "NamePath [name] : Name",
              "code": "     * @see PathFactory#create(Path, Name, boolean)\n     */\n    public Path create(Path parent, Name name, boolean normalize) throws RepositoryException {\n        return create(parent, name, Path.INDEX_UNDEFINED, normalize);\n    }\n\n    /**"
            },
            {
              "step": 20,
              "variableName": "PathFactoryImpl.getInstance().create(parentPath, childName, true)",
              "startLine": 253,
              "startColumn": 18,
              "endLine": 253,
              "endColumn": 83,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/DefaultAccessManager.java",
              "type": "NamePath [name] : Name",
              "code": "     * @see AccessManager#isGranted(Path, Name, int)\n     */\n    public boolean isGranted(Path parentPath, Name childName, int permissions) throws RepositoryException {\n        Path p = PathFactoryImpl.getInstance().create(parentPath, childName, true);\n        return isGranted(p, permissions);\n    }\n"
            },
            {
              "step": 21,
              "variableName": "p",
              "startLine": 254,
              "startColumn": 26,
              "endLine": 254,
              "endColumn": 27,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/DefaultAccessManager.java",
              "type": "NamePath [name] : Name",
              "code": "     */\n    public boolean isGranted(Path parentPath, Name childName, int permissions) throws RepositoryException {\n        Path p = PathFactoryImpl.getInstance().create(parentPath, childName, true);\n        return isGranted(p, permissions);\n    }\n\n    /**"
            },
            {
              "step": 22,
              "variableName": "Path absPath",
              "startLine": 241,
              "startColumn": 30,
              "endLine": 241,
              "endColumn": 42,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/DefaultAccessManager.java",
              "type": "NamePath [name] : Name",
              "code": "    /**\n     * @see AccessManager#isGranted(Path, int)\n     */\n    public boolean isGranted(Path absPath, int permissions) throws RepositoryException {\n        checkInitialized();\n        if (!absPath.isAbsolute()) {\n            throw new RepositoryException(\"Absolute path expected\");"
            },
            {
              "step": 23,
              "variableName": "absPath",
              "startLine": 246,
              "startColumn": 43,
              "endLine": 246,
              "endColumn": 50,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/DefaultAccessManager.java",
              "type": "NamePath [name] : Name",
              "code": "        if (!absPath.isAbsolute()) {\n            throw new RepositoryException(\"Absolute path expected\");\n        }\n        return compiledPermissions.grants(absPath, permissions);\n    }\n\n    /**"
            },
            {
              "step": 24,
              "variableName": "Path absPath",
              "startLine": 108,
              "startColumn": 27,
              "endLine": 108,
              "endColumn": 39,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/authorization/AbstractCompiledPermissions.java",
              "type": "NamePath [name] : Name",
              "code": "    /**\n     * @see CompiledPermissions#grants(Path, int)\n     */\n    public boolean grants(Path absPath, int permissions) throws RepositoryException {\n        return getResult(absPath).grants(permissions);\n    }\n"
            },
            {
              "step": 25,
              "variableName": "absPath",
              "startLine": 109,
              "startColumn": 26,
              "endLine": 109,
              "endColumn": 33,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/authorization/AbstractCompiledPermissions.java",
              "type": "NamePath [name] : Name",
              "code": "     * @see CompiledPermissions#grants(Path, int)\n     */\n    public boolean grants(Path absPath, int permissions) throws RepositoryException {\n        return getResult(absPath).grants(permissions);\n    }\n\n    /**"
            },
            {
              "step": 26,
              "variableName": "Path absPath",
              "startLine": 228,
              "startColumn": 33,
              "endLine": 228,
              "endColumn": 45,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/authorization/combined/CombinedProvider.java",
              "type": "NamePath [name] : Name",
              "code": "         * @see AbstractCompiledPermissions#getResult(Path)\n         */\n        @Override\n        public Result getResult(Path absPath) throws RepositoryException {\n            // TODO: missing caching\n            return buildResult(absPath);\n        }"
            },
            {
              "step": 27,
              "variableName": "absPath",
              "startLine": 230,
              "startColumn": 32,
              "endLine": 230,
              "endColumn": 39,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/authorization/combined/CombinedProvider.java",
              "type": "NamePath [name] : Name",
              "code": "        @Override\n        public Result getResult(Path absPath) throws RepositoryException {\n            // TODO: missing caching\n            return buildResult(absPath);\n        }\n\n        /**"
            },
            {
              "step": 28,
              "variableName": "Path absPath",
              "startLine": 237,
              "startColumn": 38,
              "endLine": 237,
              "endColumn": 50,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/authorization/combined/CombinedProvider.java",
              "type": "NamePath [name] : Name",
              "code": "         * @see AbstractCompiledPermissions#buildResult(Path)\n         */\n        @Override\n        protected Result buildResult(Path absPath) throws RepositoryException {\n            Result res = null;\n            for (AbstractCompiledPermissions acp : cPermissions) {\n                Result other = acp.getResult(absPath);"
            },
            {
              "step": 29,
              "variableName": "absPath",
              "startLine": 240,
              "startColumn": 46,
              "endLine": 240,
              "endColumn": 53,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/authorization/combined/CombinedProvider.java",
              "type": "NamePath [name] : Name",
              "code": "        protected Result buildResult(Path absPath) throws RepositoryException {\n            Result res = null;\n            for (AbstractCompiledPermissions acp : cPermissions) {\n                Result other = acp.getResult(absPath);\n                res = (res == null) ? other : res.combine(other);\n            }\n            return res;"
            },
            {
              "step": 30,
              "variableName": "Path absPath",
              "startLine": 46,
              "startColumn": 29,
              "endLine": 46,
              "endColumn": 41,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/authorization/AbstractCompiledPermissions.java",
              "type": "NamePath [name] : Name",
              "code": "     * @return the <code>Result</code> for the give <code>absPath</code>.\n     * @throws RepositoryException if an error occurs.\n     */\n    public Result getResult(Path absPath) throws RepositoryException {\n        Result result;\n        synchronized (monitor) {\n            result = cache.get(absPath);"
            },
            {
              "step": 31,
              "variableName": "absPath",
              "startLine": 54,
              "startColumn": 42,
              "endLine": 54,
              "endColumn": 49,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/authorization/AbstractCompiledPermissions.java",
              "type": "NamePath [name] : Name",
              "code": "                if (absPath == null) {\n                    result = buildRepositoryResult();\n                } else {\n                    result = buildResult(absPath);\n                }\n                cache.put(absPath, result);\n            }"
            },
            {
              "step": 32,
              "variableName": "Path absPath",
              "startLine": 165,
              "startColumn": 34,
              "endLine": 165,
              "endColumn": 46,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/authorization/acl/CompiledPermissionsImpl.java",
              "type": "NamePath [name] : Name",
              "code": "     * @see AbstractCompiledPermissions#buildResult(org.apache.jackrabbit.spi.Path)\n     */\n    @Override\n    protected Result buildResult(Path absPath) throws RepositoryException {\n        boolean existingNode = false;\n        NodeImpl node;\n"
            },
            {
              "step": 33,
              "variableName": "absPath",
              "startLine": 171,
              "startColumn": 45,
              "endLine": 171,
              "endColumn": 52,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/authorization/acl/CompiledPermissionsImpl.java",
              "type": "NamePath [name] : Name",
              "code": "\n        ItemManager itemMgr = session.getItemManager();\n        try {\n            ItemImpl item = itemMgr.getItem(absPath);\n            if (item.isNode()) {\n                node = (NodeImpl) item;\n                existingNode = true;"
            },
            {
              "step": 34,
              "variableName": "Path path",
              "startLine": 549,
              "startColumn": 29,
              "endLine": 549,
              "endColumn": 38,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/ItemManager.java",
              "type": "NamePath [name] : Name",
              "code": "     * @throws RepositoryException\n     */\n    @Deprecated\n    public ItemImpl getItem(Path path) throws PathNotFoundException,\n            AccessDeniedException, RepositoryException {\n        ItemId id = hierMgr.resolvePath(path);\n        if (id == null) {"
            },
            {
              "step": 35,
              "variableName": "path",
              "startLine": 559,
              "startColumn": 32,
              "endLine": 559,
              "endColumn": 36,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/ItemManager.java",
              "type": "NamePath [name] : Name",
              "code": "            ItemImpl item = getItem(id, path, true);\n            // Test, if this item is a shareable node.\n            if (item.isNode() && ((NodeImpl) item).isShareable()) {\n                return getNode(path);\n            }\n            return item;\n        } catch (ItemNotFoundException infe) {"
            },
            {
              "step": 36,
              "variableName": "Path path",
              "startLine": 574,
              "startColumn": 29,
              "endLine": 574,
              "endColumn": 38,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/ItemManager.java",
              "type": "NamePath [name] : Name",
              "code": "     * @throws AccessDeniedException\n     * @throws RepositoryException\n     */\n    public NodeImpl getNode(Path path) throws PathNotFoundException,\n            AccessDeniedException, RepositoryException {\n        NodeId id = hierMgr.resolveNodePath(path);\n        if (id == null) {"
            },
            {
              "step": 37,
              "variableName": "path",
              "startLine": 576,
              "startColumn": 45,
              "endLine": 576,
              "endColumn": 49,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/ItemManager.java",
              "type": "NamePath [name] : Name",
              "code": "     */\n    public NodeImpl getNode(Path path) throws PathNotFoundException,\n            AccessDeniedException, RepositoryException {\n        NodeId id = hierMgr.resolveNodePath(path);\n        if (id == null) {\n            throw new PathNotFoundException(safeGetJCRPath(path));\n        }"
            },
            {
              "step": 38,
              "variableName": "Path path",
              "startLine": 378,
              "startColumn": 35,
              "endLine": 378,
              "endColumn": 44,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NamePath [name] : Name",
              "code": "    /**\n     * {@inheritDoc}\n     */\n    public NodeId resolveNodePath(Path path) throws RepositoryException {\n        return (NodeId) resolvePath(path, RETURN_NODE);\n    }\n"
            },
            {
              "step": 39,
              "variableName": "path",
              "startLine": 379,
              "startColumn": 37,
              "endLine": 379,
              "endColumn": 41,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NamePath [name] : Name",
              "code": "     * {@inheritDoc}\n     */\n    public NodeId resolveNodePath(Path path) throws RepositoryException {\n        return (NodeId) resolvePath(path, RETURN_NODE);\n    }\n\n    /**"
            },
            {
              "step": 40,
              "variableName": "Path path",
              "startLine": 154,
              "startColumn": 34,
              "endLine": 154,
              "endColumn": 43,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/CachingHierarchyManager.java",
              "type": "NamePath [name] : Name",
              "code": "    /**\n     * {@inheritDoc}\n     */\n    protected ItemId resolvePath(Path path, int typesAllowed)\n            throws RepositoryException {\n\n        Path pathToNode = path;"
            },
            {
              "step": 41,
              "variableName": "path",
              "startLine": 183,
              "startColumn": 52,
              "endLine": 183,
              "endColumn": 56,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/CachingHierarchyManager.java",
              "type": "NamePath [name] : Name",
              "code": "            return resolvePath(elements, element.getDepth() + 1, entry.getId(), typesAllowed);\n        } catch (ItemStateException e) {\n            String msg = \"failed to retrieve state of intermediary node for entry: \" \n                    + entry.getId() + \", path: \" + path.getString();\n            logItemStateException(msg, e);\n            log.debug(msg);\n            // probably stale cache entry -> evict"
            },
            {
              "step": 42,
              "variableName": "getString",
              "startLine": 130,
              "startColumn": 19,
              "endLine": 130,
              "endColumn": 28,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/RelativePath.java",
              "type": "NamePath [name] : Name",
              "code": "        return parent;\n    }\n\n    public String getString() {\n        if (parent != null) {\n            return parent.getString() + Path.DELIMITER + getElementString();\n        } else {"
            },
            {
              "step": 43,
              "variableName": "getElementString()",
              "startLine": 132,
              "startColumn": 58,
              "endLine": 132,
              "endColumn": 76,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/RelativePath.java",
              "type": "NamePath [name] : Name",
              "code": "\n    public String getString() {\n        if (parent != null) {\n            return parent.getString() + Path.DELIMITER + getElementString();\n        } else {\n            return getElementString();\n        }"
            },
            {
              "step": 44,
              "variableName": "getElementString",
              "startLine": 61,
              "startColumn": 22,
              "endLine": 61,
              "endColumn": 38,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/NamePath.java",
              "type": "NamePath [name] : Name",
              "code": "        }\n    }\n\n    protected String getElementString() {\n        if (index > Path.INDEX_DEFAULT) {\n            return name + \"[\" + index + \"]\";\n        } else {"
            },
            {
              "step": 45,
              "variableName": "name",
              "startLine": 63,
              "startColumn": 20,
              "endLine": 63,
              "endColumn": 24,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/NamePath.java",
              "type": "NamePath [name] : Name",
              "code": "\n    protected String getElementString() {\n        if (index > Path.INDEX_DEFAULT) {\n            return name + \"[\" + index + \"]\";\n        } else {\n            return name.toString();\n        }"
            },
            {
              "step": 46,
              "variableName": "name",
              "startLine": 63,
              "startColumn": 20,
              "endLine": 63,
              "endColumn": 24,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/NamePath.java",
              "type": "Name",
              "code": "\n    protected String getElementString() {\n        if (index > Path.INDEX_DEFAULT) {\n            return name + \"[\" + index + \"]\";\n        } else {\n            return name.toString();\n        }"
            },
            {
              "step": 47,
              "variableName": "name + \"[\" + index + \"]\"",
              "startLine": 63,
              "startColumn": 20,
              "endLine": 63,
              "endColumn": 44,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/NamePath.java",
              "type": "String",
              "code": "\n    protected String getElementString() {\n        if (index > Path.INDEX_DEFAULT) {\n            return name + \"[\" + index + \"]\";\n        } else {\n            return name.toString();\n        }"
            },
            {
              "step": 48,
              "variableName": "getElementString()",
              "startLine": 132,
              "startColumn": 58,
              "endLine": 132,
              "endColumn": 76,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/RelativePath.java",
              "type": "String",
              "code": "\n    public String getString() {\n        if (parent != null) {\n            return parent.getString() + Path.DELIMITER + getElementString();\n        } else {\n            return getElementString();\n        }"
            },
            {
              "step": 49,
              "variableName": "parent.getString() + Path.DELIMITER + getElementString()",
              "startLine": 132,
              "startColumn": 20,
              "endLine": 132,
              "endColumn": 76,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/RelativePath.java",
              "type": "String",
              "code": "\n    public String getString() {\n        if (parent != null) {\n            return parent.getString() + Path.DELIMITER + getElementString();\n        } else {\n            return getElementString();\n        }"
            },
            {
              "step": 50,
              "variableName": "path.getString()",
              "startLine": 183,
              "startColumn": 52,
              "endLine": 183,
              "endColumn": 68,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/CachingHierarchyManager.java",
              "type": "String",
              "code": "            return resolvePath(elements, element.getDepth() + 1, entry.getId(), typesAllowed);\n        } catch (ItemStateException e) {\n            String msg = \"failed to retrieve state of intermediary node for entry: \" \n                    + entry.getId() + \", path: \" + path.getString();\n            logItemStateException(msg, e);\n            log.debug(msg);\n            // probably stale cache entry -> evict"
            },
            {
              "step": 51,
              "variableName": "msg",
              "startLine": 184,
              "startColumn": 35,
              "endLine": 184,
              "endColumn": 38,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/CachingHierarchyManager.java",
              "type": "String",
              "code": "        } catch (ItemStateException e) {\n            String msg = \"failed to retrieve state of intermediary node for entry: \" \n                    + entry.getId() + \", path: \" + path.getString();\n            logItemStateException(msg, e);\n            log.debug(msg);\n            // probably stale cache entry -> evict\n            evictAll(entry.getId(), true);"
            },
            {
              "step": 52,
              "variableName": "String logMessage",
              "startLine": 884,
              "startColumn": 40,
              "endLine": 884,
              "endColumn": 57,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/CachingHierarchyManager.java",
              "type": "String",
              "code": "     * @param logMessage log message\n     * @param e item state exception\n     */\n    private void logItemStateException(String logMessage, ItemStateException e) {\n        long now = System.currentTimeMillis();\n        if ((now - itemStateExceptionLogTimestamp) >= ITEM_STATE_EXCEPTION_LOG_INTERVAL_MILLIS) {\n            itemStateExceptionLogTimestamp = now;"
            },
            {
              "step": 53,
              "variableName": "logMessage",
              "startLine": 890,
              "startColumn": 23,
              "endLine": 890,
              "endColumn": 33,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/CachingHierarchyManager.java",
              "type": "",
              "code": "            itemStateExceptionLogTimestamp = now;\n            log.debug(logMessage, e);\n        } else {\n            log.debug(logMessage);\n        }\n    }\n"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 5,
      "fileName": "HierarchyManagerImpl.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "lockToken",
              "startLine": 1279,
              "startColumn": 19,
              "endLine": 1279,
              "endColumn": 28,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "NodeId",
              "code": "         */\n        public InternalLockInfo(NodeId lockToken, boolean sessionScoped,\n                                boolean deep, String lockOwner, long timeoutHint) {\n            super(lockToken, sessionScoped, deep, lockOwner, timeoutHint);\n        }\n\n        /**"
            },
            {
              "step": 1,
              "variableName": "super(lockToken, sessionScoped, deep, lockOwner, timeoutHint);",
              "startLine": 1279,
              "startColumn": 13,
              "endLine": 1279,
              "endColumn": 75,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "         */\n        public InternalLockInfo(NodeId lockToken, boolean sessionScoped,\n                                boolean deep, String lockOwner, long timeoutHint) {\n            super(lockToken, sessionScoped, deep, lockOwner, timeoutHint);\n        }\n\n        /**"
            },
            {
              "step": 2,
              "variableName": "new InternalLockInfo(",
              "startLine": 340,
              "startColumn": 33,
              "endLine": 341,
              "endColumn": 83,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "\n        SessionImpl session = (SessionImpl) node.getSession();\n        String lockOwner = (ownerInfo != null) ? ownerInfo : session.getUserID();\n        InternalLockInfo info = new InternalLockInfo(\n                node.getNodeId(), isSessionScoped, isDeep, lockOwner, timeoutHint);\n\n        ClusterOperation operation = null;"
            },
            {
              "step": 3,
              "variableName": "info",
              "startLine": 370,
              "startColumn": 17,
              "endLine": 370,
              "endColumn": 21,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "            }\n            if (info.isDeep() && element.hasPath(path)\n                    && element.getChildrenCount() > 0) {\n                info.throwLockException(\"Some child node is locked\", session);\n            }\n\n            // create lock token"
            },
            {
              "step": 4,
              "variableName": "throwLockException",
              "startLine": 259,
              "startColumn": 17,
              "endLine": 259,
              "endColumn": 35,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockInfo.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "     * @throws LockException always thrown, unless another error occurs\n     * @throws RepositoryException if the path of this lock can not be resolved\n     */\n    public void throwLockException(String message, SessionImpl session)\n            throws LockException, RepositoryException {\n        String path;\n        try {"
            },
            {
              "step": 5,
              "variableName": "id",
              "startLine": 264,
              "startColumn": 59,
              "endLine": 264,
              "endColumn": 61,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockInfo.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "        String path;\n        try {\n            path = session.getJCRPath(\n                    session.getHierarchyManager().getPath(id));\n        } catch (RepositoryException ignored) {\n            path = null;\n        }"
            },
            {
              "step": 6,
              "variableName": "id",
              "startLine": 264,
              "startColumn": 59,
              "endLine": 264,
              "endColumn": 61,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockInfo.java",
              "type": "NodeId",
              "code": "        String path;\n        try {\n            path = session.getJCRPath(\n                    session.getHierarchyManager().getPath(id));\n        } catch (RepositoryException ignored) {\n            path = null;\n        }"
            },
            {
              "step": 7,
              "variableName": "ItemId id",
              "startLine": 252,
              "startColumn": 25,
              "endLine": 252,
              "endColumn": 34,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/CachingHierarchyManager.java",
              "type": "NodeId",
              "code": "     * Overridden method simply checks whether we have an item matching the id\n     * and returns its path, otherwise calls base implementation.\n     */\n    public Path getPath(ItemId id)\n            throws ItemNotFoundException, RepositoryException {\n\n        if (id.denotesNode()) {"
            },
            {
              "step": 8,
              "variableName": "id",
              "startLine": 267,
              "startColumn": 30,
              "endLine": 267,
              "endColumn": 32,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/CachingHierarchyManager.java",
              "type": "NodeId",
              "code": "                }\n            }\n        }\n        return super.getPath(id);\n    }\n\n    /**"
            },
            {
              "step": 9,
              "variableName": "ItemId id",
              "startLine": 392,
              "startColumn": 25,
              "endLine": 392,
              "endColumn": 34,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "    /**\n     * {@inheritDoc}\n     */\n    public Path getPath(ItemId id)\n            throws ItemNotFoundException, RepositoryException {\n        // shortcut\n        if (id.equals(rootNodeId)) {"
            },
            {
              "step": 10,
              "variableName": "msg",
              "startLine": 406,
              "startColumn": 23,
              "endLine": 406,
              "endColumn": 26,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "",
              "code": "            return builder.getPath();\n        } catch (NoSuchItemStateException nsise) {\n            String msg = \"failed to build path of \" + id;\n            log.debug(msg);\n            throw new ItemNotFoundException(msg, nsise);\n        } catch (ItemStateException ise) {\n            String msg = \"failed to build path of \" + id;"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 6,
      "fileName": "HierarchyManagerImpl.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "lockToken",
              "startLine": 1279,
              "startColumn": 19,
              "endLine": 1279,
              "endColumn": 28,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "NodeId",
              "code": "         */\n        public InternalLockInfo(NodeId lockToken, boolean sessionScoped,\n                                boolean deep, String lockOwner, long timeoutHint) {\n            super(lockToken, sessionScoped, deep, lockOwner, timeoutHint);\n        }\n\n        /**"
            },
            {
              "step": 1,
              "variableName": "super(lockToken, sessionScoped, deep, lockOwner, timeoutHint);",
              "startLine": 1279,
              "startColumn": 13,
              "endLine": 1279,
              "endColumn": 75,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "         */\n        public InternalLockInfo(NodeId lockToken, boolean sessionScoped,\n                                boolean deep, String lockOwner, long timeoutHint) {\n            super(lockToken, sessionScoped, deep, lockOwner, timeoutHint);\n        }\n\n        /**"
            },
            {
              "step": 2,
              "variableName": "new InternalLockInfo(",
              "startLine": 340,
              "startColumn": 33,
              "endLine": 341,
              "endColumn": 83,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "\n        SessionImpl session = (SessionImpl) node.getSession();\n        String lockOwner = (ownerInfo != null) ? ownerInfo : session.getUserID();\n        InternalLockInfo info = new InternalLockInfo(\n                node.getNodeId(), isSessionScoped, isDeep, lockOwner, timeoutHint);\n\n        ClusterOperation operation = null;"
            },
            {
              "step": 3,
              "variableName": "info",
              "startLine": 370,
              "startColumn": 17,
              "endLine": 370,
              "endColumn": 21,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "            }\n            if (info.isDeep() && element.hasPath(path)\n                    && element.getChildrenCount() > 0) {\n                info.throwLockException(\"Some child node is locked\", session);\n            }\n\n            // create lock token"
            },
            {
              "step": 4,
              "variableName": "throwLockException",
              "startLine": 259,
              "startColumn": 17,
              "endLine": 259,
              "endColumn": 35,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockInfo.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "     * @throws LockException always thrown, unless another error occurs\n     * @throws RepositoryException if the path of this lock can not be resolved\n     */\n    public void throwLockException(String message, SessionImpl session)\n            throws LockException, RepositoryException {\n        String path;\n        try {"
            },
            {
              "step": 5,
              "variableName": "id",
              "startLine": 264,
              "startColumn": 59,
              "endLine": 264,
              "endColumn": 61,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockInfo.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "        String path;\n        try {\n            path = session.getJCRPath(\n                    session.getHierarchyManager().getPath(id));\n        } catch (RepositoryException ignored) {\n            path = null;\n        }"
            },
            {
              "step": 6,
              "variableName": "id",
              "startLine": 264,
              "startColumn": 59,
              "endLine": 264,
              "endColumn": 61,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockInfo.java",
              "type": "NodeId",
              "code": "        String path;\n        try {\n            path = session.getJCRPath(\n                    session.getHierarchyManager().getPath(id));\n        } catch (RepositoryException ignored) {\n            path = null;\n        }"
            },
            {
              "step": 7,
              "variableName": "ItemId id",
              "startLine": 252,
              "startColumn": 25,
              "endLine": 252,
              "endColumn": 34,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/CachingHierarchyManager.java",
              "type": "NodeId",
              "code": "     * Overridden method simply checks whether we have an item matching the id\n     * and returns its path, otherwise calls base implementation.\n     */\n    public Path getPath(ItemId id)\n            throws ItemNotFoundException, RepositoryException {\n\n        if (id.denotesNode()) {"
            },
            {
              "step": 8,
              "variableName": "id",
              "startLine": 267,
              "startColumn": 30,
              "endLine": 267,
              "endColumn": 32,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/CachingHierarchyManager.java",
              "type": "NodeId",
              "code": "                }\n            }\n        }\n        return super.getPath(id);\n    }\n\n    /**"
            },
            {
              "step": 9,
              "variableName": "ItemId id",
              "startLine": 392,
              "startColumn": 25,
              "endLine": 392,
              "endColumn": 34,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "    /**\n     * {@inheritDoc}\n     */\n    public Path getPath(ItemId id)\n            throws ItemNotFoundException, RepositoryException {\n        // shortcut\n        if (id.equals(rootNodeId)) {"
            },
            {
              "step": 10,
              "variableName": "msg",
              "startLine": 410,
              "startColumn": 23,
              "endLine": 410,
              "endColumn": 26,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "",
              "code": "            throw new ItemNotFoundException(msg, nsise);\n        } catch (ItemStateException ise) {\n            String msg = \"failed to build path of \" + id;\n            log.debug(msg);\n            throw new RepositoryException(msg, ise);\n        } catch (MalformedPathException mpe) {\n            String msg = \"failed to build path of \" + id;"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 7,
      "fileName": "HierarchyManagerImpl.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "lockToken",
              "startLine": 1279,
              "startColumn": 19,
              "endLine": 1279,
              "endColumn": 28,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "NodeId",
              "code": "         */\n        public InternalLockInfo(NodeId lockToken, boolean sessionScoped,\n                                boolean deep, String lockOwner, long timeoutHint) {\n            super(lockToken, sessionScoped, deep, lockOwner, timeoutHint);\n        }\n\n        /**"
            },
            {
              "step": 1,
              "variableName": "super(lockToken, sessionScoped, deep, lockOwner, timeoutHint);",
              "startLine": 1279,
              "startColumn": 13,
              "endLine": 1279,
              "endColumn": 75,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "         */\n        public InternalLockInfo(NodeId lockToken, boolean sessionScoped,\n                                boolean deep, String lockOwner, long timeoutHint) {\n            super(lockToken, sessionScoped, deep, lockOwner, timeoutHint);\n        }\n\n        /**"
            },
            {
              "step": 2,
              "variableName": "new InternalLockInfo(",
              "startLine": 340,
              "startColumn": 33,
              "endLine": 341,
              "endColumn": 83,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "\n        SessionImpl session = (SessionImpl) node.getSession();\n        String lockOwner = (ownerInfo != null) ? ownerInfo : session.getUserID();\n        InternalLockInfo info = new InternalLockInfo(\n                node.getNodeId(), isSessionScoped, isDeep, lockOwner, timeoutHint);\n\n        ClusterOperation operation = null;"
            },
            {
              "step": 3,
              "variableName": "info",
              "startLine": 370,
              "startColumn": 17,
              "endLine": 370,
              "endColumn": 21,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "            }\n            if (info.isDeep() && element.hasPath(path)\n                    && element.getChildrenCount() > 0) {\n                info.throwLockException(\"Some child node is locked\", session);\n            }\n\n            // create lock token"
            },
            {
              "step": 4,
              "variableName": "throwLockException",
              "startLine": 259,
              "startColumn": 17,
              "endLine": 259,
              "endColumn": 35,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockInfo.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "     * @throws LockException always thrown, unless another error occurs\n     * @throws RepositoryException if the path of this lock can not be resolved\n     */\n    public void throwLockException(String message, SessionImpl session)\n            throws LockException, RepositoryException {\n        String path;\n        try {"
            },
            {
              "step": 5,
              "variableName": "id",
              "startLine": 264,
              "startColumn": 59,
              "endLine": 264,
              "endColumn": 61,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockInfo.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "        String path;\n        try {\n            path = session.getJCRPath(\n                    session.getHierarchyManager().getPath(id));\n        } catch (RepositoryException ignored) {\n            path = null;\n        }"
            },
            {
              "step": 6,
              "variableName": "id",
              "startLine": 264,
              "startColumn": 59,
              "endLine": 264,
              "endColumn": 61,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockInfo.java",
              "type": "NodeId",
              "code": "        String path;\n        try {\n            path = session.getJCRPath(\n                    session.getHierarchyManager().getPath(id));\n        } catch (RepositoryException ignored) {\n            path = null;\n        }"
            },
            {
              "step": 7,
              "variableName": "ItemId id",
              "startLine": 252,
              "startColumn": 25,
              "endLine": 252,
              "endColumn": 34,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/CachingHierarchyManager.java",
              "type": "NodeId",
              "code": "     * Overridden method simply checks whether we have an item matching the id\n     * and returns its path, otherwise calls base implementation.\n     */\n    public Path getPath(ItemId id)\n            throws ItemNotFoundException, RepositoryException {\n\n        if (id.denotesNode()) {"
            },
            {
              "step": 8,
              "variableName": "id",
              "startLine": 267,
              "startColumn": 30,
              "endLine": 267,
              "endColumn": 32,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/CachingHierarchyManager.java",
              "type": "NodeId",
              "code": "                }\n            }\n        }\n        return super.getPath(id);\n    }\n\n    /**"
            },
            {
              "step": 9,
              "variableName": "ItemId id",
              "startLine": 392,
              "startColumn": 25,
              "endLine": 392,
              "endColumn": 34,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "    /**\n     * {@inheritDoc}\n     */\n    public Path getPath(ItemId id)\n            throws ItemNotFoundException, RepositoryException {\n        // shortcut\n        if (id.equals(rootNodeId)) {"
            },
            {
              "step": 10,
              "variableName": "msg",
              "startLine": 414,
              "startColumn": 23,
              "endLine": 414,
              "endColumn": 26,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "",
              "code": "            throw new RepositoryException(msg, ise);\n        } catch (MalformedPathException mpe) {\n            String msg = \"failed to build path of \" + id;\n            log.debug(msg);\n            throw new RepositoryException(msg, mpe);\n        }\n    }"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 8,
      "fileName": "ItemManager.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "P_PASSWORD",
              "startLine": 782,
              "startColumn": 31,
              "endLine": 782,
              "endColumn": 41,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/user/UserManagerImpl.java",
              "type": "Name",
              "code": "        } else {\n            pwHash = password;\n        }\n        setProperty(userNode, P_PASSWORD, getValue(pwHash), userNode.isNew());\n    }\n\n    void setProtectedProperty(NodeImpl node, Name propName, Value value) throws RepositoryException, LockException, ConstraintViolationException, ItemExistsException, VersionException {"
            },
            {
              "step": 1,
              "variableName": "Name name",
              "startLine": 106,
              "startColumn": 57,
              "endLine": 106,
              "endColumn": 66,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/ProtectedItemModifier.java",
              "type": "Name",
              "code": "        return setProperty(parentImpl, name, value, false);\n    }\n\n    protected Property setProperty(NodeImpl parentImpl, Name name, Value value, boolean ignorePermissions) throws RepositoryException {\n        if (!ignorePermissions) {\n            checkPermission(parentImpl, name, getPermission(false, false));\n        }"
            },
            {
              "step": 2,
              "variableName": "name",
              "startLine": 108,
              "startColumn": 41,
              "endLine": 108,
              "endColumn": 45,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/ProtectedItemModifier.java",
              "type": "Name",
              "code": "\n    protected Property setProperty(NodeImpl parentImpl, Name name, Value value, boolean ignorePermissions) throws RepositoryException {\n        if (!ignorePermissions) {\n            checkPermission(parentImpl, name, getPermission(false, false));\n        }\n        // validation: make sure Node is not locked or checked-in.\n        parentImpl.checkSetProperty();"
            },
            {
              "step": 3,
              "variableName": "Name childName",
              "startLine": 170,
              "startColumn": 49,
              "endLine": 170,
              "endColumn": 63,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/ProtectedItemModifier.java",
              "type": "Name",
              "code": "        }\n    }\n\n    private void checkPermission(NodeImpl node, Name childName, int perm) throws RepositoryException {\n        if (perm > Permission.NONE) {\n            SessionImpl sImpl = (SessionImpl) node.getSession();\n            AccessManager acMgr = sImpl.getAccessManager();"
            },
            {
              "step": 4,
              "variableName": "childName",
              "startLine": 175,
              "startColumn": 72,
              "endLine": 175,
              "endColumn": 81,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/ProtectedItemModifier.java",
              "type": "Name",
              "code": "            SessionImpl sImpl = (SessionImpl) node.getSession();\n            AccessManager acMgr = sImpl.getAccessManager();\n\n            boolean isGranted = acMgr.isGranted(node.getPrimaryPath(), childName, perm);\n            if (!isGranted) {\n                throw new AccessDeniedException(\"Permission denied.\");\n            }"
            },
            {
              "step": 5,
              "variableName": "Name childName",
              "startLine": 252,
              "startColumn": 47,
              "endLine": 252,
              "endColumn": 61,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/DefaultAccessManager.java",
              "type": "Name",
              "code": "    /**\n     * @see AccessManager#isGranted(Path, Name, int)\n     */\n    public boolean isGranted(Path parentPath, Name childName, int permissions) throws RepositoryException {\n        Path p = PathFactoryImpl.getInstance().create(parentPath, childName, true);\n        return isGranted(p, permissions);\n    }"
            },
            {
              "step": 6,
              "variableName": "childName",
              "startLine": 253,
              "startColumn": 67,
              "endLine": 253,
              "endColumn": 76,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/DefaultAccessManager.java",
              "type": "Name",
              "code": "     * @see AccessManager#isGranted(Path, Name, int)\n     */\n    public boolean isGranted(Path parentPath, Name childName, int permissions) throws RepositoryException {\n        Path p = PathFactoryImpl.getInstance().create(parentPath, childName, true);\n        return isGranted(p, permissions);\n    }\n"
            },
            {
              "step": 7,
              "variableName": "Name name",
              "startLine": 62,
              "startColumn": 37,
              "endLine": 62,
              "endColumn": 46,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/PathFactoryImpl.java",
              "type": "Name",
              "code": "    /**\n     * @see PathFactory#create(Path, Name, boolean)\n     */\n    public Path create(Path parent, Name name, boolean normalize) throws RepositoryException {\n        return create(parent, name, Path.INDEX_UNDEFINED, normalize);\n    }\n"
            },
            {
              "step": 8,
              "variableName": "name",
              "startLine": 63,
              "startColumn": 31,
              "endLine": 63,
              "endColumn": 35,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/PathFactoryImpl.java",
              "type": "Name",
              "code": "     * @see PathFactory#create(Path, Name, boolean)\n     */\n    public Path create(Path parent, Name name, boolean normalize) throws RepositoryException {\n        return create(parent, name, Path.INDEX_UNDEFINED, normalize);\n    }\n\n    /**"
            },
            {
              "step": 9,
              "variableName": "Name name",
              "startLine": 69,
              "startColumn": 37,
              "endLine": 69,
              "endColumn": 46,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/PathFactoryImpl.java",
              "type": "Name",
              "code": "    /**\n     * @see PathFactory#create(Path, Name, int, boolean)\n     */\n    public Path create(Path parent, Name name, int index, boolean normalize) throws IllegalArgumentException, RepositoryException {\n        if (RootPath.NAME.equals(name)) {\n            throw new IllegalArgumentException();\n        }"
            },
            {
              "step": 10,
              "variableName": "name",
              "startLine": 73,
              "startColumn": 42,
              "endLine": 73,
              "endColumn": 46,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/PathFactoryImpl.java",
              "type": "Name",
              "code": "        if (RootPath.NAME.equals(name)) {\n            throw new IllegalArgumentException();\n        }\n        Path path = new NamePath(parent, name, index);\n        if (normalize) {\n            return path.getNormalizedPath();\n        } else {"
            },
            {
              "step": 11,
              "variableName": "Name name",
              "startLine": 41,
              "startColumn": 34,
              "endLine": 41,
              "endColumn": 43,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/NamePath.java",
              "type": "Name",
              "code": "     */\n    private final int index;\n\n    public NamePath(Path parent, Name name, int index) {\n        super(parent);\n        assert name != null;\n        assert index >= 0;"
            },
            {
              "step": 12,
              "variableName": "name",
              "startLine": 45,
              "startColumn": 21,
              "endLine": 45,
              "endColumn": 25,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/NamePath.java",
              "type": "Name",
              "code": "        super(parent);\n        assert name != null;\n        assert index >= 0;\n        this.name = name;\n        this.index = index;\n    }\n"
            },
            {
              "step": 13,
              "variableName": "this",
              "startLine": 45,
              "startColumn": 9,
              "endLine": 45,
              "endColumn": 13,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/NamePath.java",
              "type": "NamePath [name] : Name",
              "code": "        super(parent);\n        assert name != null;\n        assert index >= 0;\n        this.name = name;\n        this.index = index;\n    }\n"
            },
            {
              "step": 14,
              "variableName": "new NamePath(parent, name, index)",
              "startLine": 73,
              "startColumn": 21,
              "endLine": 73,
              "endColumn": 54,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/PathFactoryImpl.java",
              "type": "NamePath [name] : Name",
              "code": "        if (RootPath.NAME.equals(name)) {\n            throw new IllegalArgumentException();\n        }\n        Path path = new NamePath(parent, name, index);\n        if (normalize) {\n            return path.getNormalizedPath();\n        } else {"
            },
            {
              "step": 15,
              "variableName": "path",
              "startLine": 77,
              "startColumn": 20,
              "endLine": 77,
              "endColumn": 24,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/PathFactoryImpl.java",
              "type": "NamePath [name] : Name",
              "code": "        if (normalize) {\n            return path.getNormalizedPath();\n        } else {\n            return path;\n        }\n    }\n"
            },
            {
              "step": 16,
              "variableName": "create(parent, name, Path.INDEX_UNDEFINED, normalize)",
              "startLine": 63,
              "startColumn": 16,
              "endLine": 63,
              "endColumn": 69,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/PathFactoryImpl.java",
              "type": "NamePath [name] : Name",
              "code": "     * @see PathFactory#create(Path, Name, boolean)\n     */\n    public Path create(Path parent, Name name, boolean normalize) throws RepositoryException {\n        return create(parent, name, Path.INDEX_UNDEFINED, normalize);\n    }\n\n    /**"
            },
            {
              "step": 17,
              "variableName": "PathFactoryImpl.getInstance().create(parentPath, childName, true)",
              "startLine": 253,
              "startColumn": 18,
              "endLine": 253,
              "endColumn": 83,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/DefaultAccessManager.java",
              "type": "NamePath [name] : Name",
              "code": "     * @see AccessManager#isGranted(Path, Name, int)\n     */\n    public boolean isGranted(Path parentPath, Name childName, int permissions) throws RepositoryException {\n        Path p = PathFactoryImpl.getInstance().create(parentPath, childName, true);\n        return isGranted(p, permissions);\n    }\n"
            },
            {
              "step": 18,
              "variableName": "p",
              "startLine": 254,
              "startColumn": 26,
              "endLine": 254,
              "endColumn": 27,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/DefaultAccessManager.java",
              "type": "NamePath [name] : Name",
              "code": "     */\n    public boolean isGranted(Path parentPath, Name childName, int permissions) throws RepositoryException {\n        Path p = PathFactoryImpl.getInstance().create(parentPath, childName, true);\n        return isGranted(p, permissions);\n    }\n\n    /**"
            },
            {
              "step": 19,
              "variableName": "Path absPath",
              "startLine": 241,
              "startColumn": 30,
              "endLine": 241,
              "endColumn": 42,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/DefaultAccessManager.java",
              "type": "NamePath [name] : Name",
              "code": "    /**\n     * @see AccessManager#isGranted(Path, int)\n     */\n    public boolean isGranted(Path absPath, int permissions) throws RepositoryException {\n        checkInitialized();\n        if (!absPath.isAbsolute()) {\n            throw new RepositoryException(\"Absolute path expected\");"
            },
            {
              "step": 20,
              "variableName": "absPath",
              "startLine": 246,
              "startColumn": 43,
              "endLine": 246,
              "endColumn": 50,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/DefaultAccessManager.java",
              "type": "NamePath [name] : Name",
              "code": "        if (!absPath.isAbsolute()) {\n            throw new RepositoryException(\"Absolute path expected\");\n        }\n        return compiledPermissions.grants(absPath, permissions);\n    }\n\n    /**"
            },
            {
              "step": 21,
              "variableName": "Path absPath",
              "startLine": 108,
              "startColumn": 27,
              "endLine": 108,
              "endColumn": 39,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/authorization/AbstractCompiledPermissions.java",
              "type": "NamePath [name] : Name",
              "code": "    /**\n     * @see CompiledPermissions#grants(Path, int)\n     */\n    public boolean grants(Path absPath, int permissions) throws RepositoryException {\n        return getResult(absPath).grants(permissions);\n    }\n"
            },
            {
              "step": 22,
              "variableName": "absPath",
              "startLine": 109,
              "startColumn": 26,
              "endLine": 109,
              "endColumn": 33,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/authorization/AbstractCompiledPermissions.java",
              "type": "NamePath [name] : Name",
              "code": "     * @see CompiledPermissions#grants(Path, int)\n     */\n    public boolean grants(Path absPath, int permissions) throws RepositoryException {\n        return getResult(absPath).grants(permissions);\n    }\n\n    /**"
            },
            {
              "step": 23,
              "variableName": "Path absPath",
              "startLine": 46,
              "startColumn": 29,
              "endLine": 46,
              "endColumn": 41,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/authorization/AbstractCompiledPermissions.java",
              "type": "NamePath [name] : Name",
              "code": "     * @return the <code>Result</code> for the give <code>absPath</code>.\n     * @throws RepositoryException if an error occurs.\n     */\n    public Result getResult(Path absPath) throws RepositoryException {\n        Result result;\n        synchronized (monitor) {\n            result = cache.get(absPath);"
            },
            {
              "step": 24,
              "variableName": "absPath",
              "startLine": 54,
              "startColumn": 42,
              "endLine": 54,
              "endColumn": 49,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/authorization/AbstractCompiledPermissions.java",
              "type": "NamePath [name] : Name",
              "code": "                if (absPath == null) {\n                    result = buildRepositoryResult();\n                } else {\n                    result = buildResult(absPath);\n                }\n                cache.put(absPath, result);\n            }"
            },
            {
              "step": 25,
              "variableName": "Path absPath",
              "startLine": 165,
              "startColumn": 34,
              "endLine": 165,
              "endColumn": 46,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/authorization/acl/CompiledPermissionsImpl.java",
              "type": "NamePath [name] : Name",
              "code": "     * @see AbstractCompiledPermissions#buildResult(org.apache.jackrabbit.spi.Path)\n     */\n    @Override\n    protected Result buildResult(Path absPath) throws RepositoryException {\n        boolean existingNode = false;\n        NodeImpl node;\n"
            },
            {
              "step": 26,
              "variableName": "absPath",
              "startLine": 171,
              "startColumn": 45,
              "endLine": 171,
              "endColumn": 52,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/authorization/acl/CompiledPermissionsImpl.java",
              "type": "NamePath [name] : Name",
              "code": "\n        ItemManager itemMgr = session.getItemManager();\n        try {\n            ItemImpl item = itemMgr.getItem(absPath);\n            if (item.isNode()) {\n                node = (NodeImpl) item;\n                existingNode = true;"
            },
            {
              "step": 27,
              "variableName": "Path path",
              "startLine": 549,
              "startColumn": 29,
              "endLine": 549,
              "endColumn": 38,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/ItemManager.java",
              "type": "NamePath [name] : Name",
              "code": "     * @throws RepositoryException\n     */\n    @Deprecated\n    public ItemImpl getItem(Path path) throws PathNotFoundException,\n            AccessDeniedException, RepositoryException {\n        ItemId id = hierMgr.resolvePath(path);\n        if (id == null) {"
            },
            {
              "step": 28,
              "variableName": "path",
              "startLine": 553,
              "startColumn": 60,
              "endLine": 553,
              "endColumn": 64,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/ItemManager.java",
              "type": "NamePath [name] : Name",
              "code": "            AccessDeniedException, RepositoryException {\n        ItemId id = hierMgr.resolvePath(path);\n        if (id == null) {\n            throw new PathNotFoundException(safeGetJCRPath(path));\n        }\n        try {\n            ItemImpl item = getItem(id, path, true);"
            },
            {
              "step": 29,
              "variableName": "Path path",
              "startLine": 993,
              "startColumn": 27,
              "endLine": 993,
              "endColumn": 36,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/ItemManager.java",
              "type": "NamePath [name] : Name",
              "code": "     * @param path path to convert\n     * @return JCR path\n     */\n    String safeGetJCRPath(Path path) {\n        try {\n            return session.getJCRPath(path);\n        } catch (NamespaceException e) {"
            },
            {
              "step": 30,
              "variableName": "path",
              "startLine": 997,
              "startColumn": 46,
              "endLine": 997,
              "endColumn": 50,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/ItemManager.java",
              "type": "NamePath [name] : Name",
              "code": "        try {\n            return session.getJCRPath(path);\n        } catch (NamespaceException e) {\n            log.error(\"failed to convert \" + path.toString() + \" to JCR path.\");\n            // return string representation of internal path as a fallback\n            return path.toString();\n        }"
            },
            {
              "step": 31,
              "variableName": "toString",
              "startLine": 315,
              "startColumn": 25,
              "endLine": 315,
              "endColumn": 33,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/AbstractPath.java",
              "type": "NamePath [name] : Name",
              "code": "     *\n     * @return path string\n     */\n    public final String toString() {\n        return getString();\n    }\n"
            },
            {
              "step": 32,
              "variableName": "getString()",
              "startLine": 316,
              "startColumn": 16,
              "endLine": 316,
              "endColumn": 27,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/AbstractPath.java",
              "type": "NamePath [name] : Name",
              "code": "     * @return path string\n     */\n    public final String toString() {\n        return getString();\n    }\n\n}"
            },
            {
              "step": 33,
              "variableName": "getString",
              "startLine": 130,
              "startColumn": 19,
              "endLine": 130,
              "endColumn": 28,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/RelativePath.java",
              "type": "NamePath [name] : Name",
              "code": "        return parent;\n    }\n\n    public String getString() {\n        if (parent != null) {\n            return parent.getString() + Path.DELIMITER + getElementString();\n        } else {"
            },
            {
              "step": 34,
              "variableName": "getElementString()",
              "startLine": 134,
              "startColumn": 20,
              "endLine": 134,
              "endColumn": 38,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/RelativePath.java",
              "type": "NamePath [name] : Name",
              "code": "        if (parent != null) {\n            return parent.getString() + Path.DELIMITER + getElementString();\n        } else {\n            return getElementString();\n        }\n    }\n"
            },
            {
              "step": 35,
              "variableName": "getElementString",
              "startLine": 61,
              "startColumn": 22,
              "endLine": 61,
              "endColumn": 38,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/NamePath.java",
              "type": "NamePath [name] : Name",
              "code": "        }\n    }\n\n    protected String getElementString() {\n        if (index > Path.INDEX_DEFAULT) {\n            return name + \"[\" + index + \"]\";\n        } else {"
            },
            {
              "step": 36,
              "variableName": "name",
              "startLine": 63,
              "startColumn": 20,
              "endLine": 63,
              "endColumn": 24,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/NamePath.java",
              "type": "NamePath [name] : Name",
              "code": "\n    protected String getElementString() {\n        if (index > Path.INDEX_DEFAULT) {\n            return name + \"[\" + index + \"]\";\n        } else {\n            return name.toString();\n        }"
            },
            {
              "step": 37,
              "variableName": "name",
              "startLine": 63,
              "startColumn": 20,
              "endLine": 63,
              "endColumn": 24,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/NamePath.java",
              "type": "Name",
              "code": "\n    protected String getElementString() {\n        if (index > Path.INDEX_DEFAULT) {\n            return name + \"[\" + index + \"]\";\n        } else {\n            return name.toString();\n        }"
            },
            {
              "step": 38,
              "variableName": "name + \"[\" + index + \"]\"",
              "startLine": 63,
              "startColumn": 20,
              "endLine": 63,
              "endColumn": 44,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/NamePath.java",
              "type": "String",
              "code": "\n    protected String getElementString() {\n        if (index > Path.INDEX_DEFAULT) {\n            return name + \"[\" + index + \"]\";\n        } else {\n            return name.toString();\n        }"
            },
            {
              "step": 39,
              "variableName": "getElementString()",
              "startLine": 134,
              "startColumn": 20,
              "endLine": 134,
              "endColumn": 38,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/RelativePath.java",
              "type": "String",
              "code": "        if (parent != null) {\n            return parent.getString() + Path.DELIMITER + getElementString();\n        } else {\n            return getElementString();\n        }\n    }\n"
            },
            {
              "step": 40,
              "variableName": "getString()",
              "startLine": 316,
              "startColumn": 16,
              "endLine": 316,
              "endColumn": 27,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/AbstractPath.java",
              "type": "String",
              "code": "     * @return path string\n     */\n    public final String toString() {\n        return getString();\n    }\n\n}"
            },
            {
              "step": 41,
              "variableName": "path.toString()",
              "startLine": 997,
              "startColumn": 46,
              "endLine": 997,
              "endColumn": 61,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/ItemManager.java",
              "type": "String",
              "code": "        try {\n            return session.getJCRPath(path);\n        } catch (NamespaceException e) {\n            log.error(\"failed to convert \" + path.toString() + \" to JCR path.\");\n            // return string representation of internal path as a fallback\n            return path.toString();\n        }"
            },
            {
              "step": 42,
              "variableName": "\"failed to convert \" + path.toString() + \" to JCR path.\"",
              "startLine": 997,
              "startColumn": 23,
              "endLine": 997,
              "endColumn": 79,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/ItemManager.java",
              "type": "",
              "code": "        try {\n            return session.getJCRPath(path);\n        } catch (NamespaceException e) {\n            log.error(\"failed to convert \" + path.toString() + \" to JCR path.\");\n            // return string representation of internal path as a fallback\n            return path.toString();\n        }"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "P_PASSWORD",
              "startLine": 782,
              "startColumn": 31,
              "endLine": 782,
              "endColumn": 41,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/user/UserManagerImpl.java",
              "type": "Name",
              "code": "        } else {\n            pwHash = password;\n        }\n        setProperty(userNode, P_PASSWORD, getValue(pwHash), userNode.isNew());\n    }\n\n    void setProtectedProperty(NodeImpl node, Name propName, Value value) throws RepositoryException, LockException, ConstraintViolationException, ItemExistsException, VersionException {"
            },
            {
              "step": 1,
              "variableName": "Name name",
              "startLine": 106,
              "startColumn": 57,
              "endLine": 106,
              "endColumn": 66,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/ProtectedItemModifier.java",
              "type": "Name",
              "code": "        return setProperty(parentImpl, name, value, false);\n    }\n\n    protected Property setProperty(NodeImpl parentImpl, Name name, Value value, boolean ignorePermissions) throws RepositoryException {\n        if (!ignorePermissions) {\n            checkPermission(parentImpl, name, getPermission(false, false));\n        }"
            },
            {
              "step": 2,
              "variableName": "name",
              "startLine": 108,
              "startColumn": 41,
              "endLine": 108,
              "endColumn": 45,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/ProtectedItemModifier.java",
              "type": "Name",
              "code": "\n    protected Property setProperty(NodeImpl parentImpl, Name name, Value value, boolean ignorePermissions) throws RepositoryException {\n        if (!ignorePermissions) {\n            checkPermission(parentImpl, name, getPermission(false, false));\n        }\n        // validation: make sure Node is not locked or checked-in.\n        parentImpl.checkSetProperty();"
            },
            {
              "step": 3,
              "variableName": "Name childName",
              "startLine": 170,
              "startColumn": 49,
              "endLine": 170,
              "endColumn": 63,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/ProtectedItemModifier.java",
              "type": "Name",
              "code": "        }\n    }\n\n    private void checkPermission(NodeImpl node, Name childName, int perm) throws RepositoryException {\n        if (perm > Permission.NONE) {\n            SessionImpl sImpl = (SessionImpl) node.getSession();\n            AccessManager acMgr = sImpl.getAccessManager();"
            },
            {
              "step": 4,
              "variableName": "childName",
              "startLine": 175,
              "startColumn": 72,
              "endLine": 175,
              "endColumn": 81,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/ProtectedItemModifier.java",
              "type": "Name",
              "code": "            SessionImpl sImpl = (SessionImpl) node.getSession();\n            AccessManager acMgr = sImpl.getAccessManager();\n\n            boolean isGranted = acMgr.isGranted(node.getPrimaryPath(), childName, perm);\n            if (!isGranted) {\n                throw new AccessDeniedException(\"Permission denied.\");\n            }"
            },
            {
              "step": 5,
              "variableName": "Name childName",
              "startLine": 252,
              "startColumn": 47,
              "endLine": 252,
              "endColumn": 61,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/DefaultAccessManager.java",
              "type": "Name",
              "code": "    /**\n     * @see AccessManager#isGranted(Path, Name, int)\n     */\n    public boolean isGranted(Path parentPath, Name childName, int permissions) throws RepositoryException {\n        Path p = PathFactoryImpl.getInstance().create(parentPath, childName, true);\n        return isGranted(p, permissions);\n    }"
            },
            {
              "step": 6,
              "variableName": "childName",
              "startLine": 253,
              "startColumn": 67,
              "endLine": 253,
              "endColumn": 76,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/DefaultAccessManager.java",
              "type": "Name",
              "code": "     * @see AccessManager#isGranted(Path, Name, int)\n     */\n    public boolean isGranted(Path parentPath, Name childName, int permissions) throws RepositoryException {\n        Path p = PathFactoryImpl.getInstance().create(parentPath, childName, true);\n        return isGranted(p, permissions);\n    }\n"
            },
            {
              "step": 7,
              "variableName": "Name name",
              "startLine": 62,
              "startColumn": 37,
              "endLine": 62,
              "endColumn": 46,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/PathFactoryImpl.java",
              "type": "Name",
              "code": "    /**\n     * @see PathFactory#create(Path, Name, boolean)\n     */\n    public Path create(Path parent, Name name, boolean normalize) throws RepositoryException {\n        return create(parent, name, Path.INDEX_UNDEFINED, normalize);\n    }\n"
            },
            {
              "step": 8,
              "variableName": "name",
              "startLine": 63,
              "startColumn": 31,
              "endLine": 63,
              "endColumn": 35,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/PathFactoryImpl.java",
              "type": "Name",
              "code": "     * @see PathFactory#create(Path, Name, boolean)\n     */\n    public Path create(Path parent, Name name, boolean normalize) throws RepositoryException {\n        return create(parent, name, Path.INDEX_UNDEFINED, normalize);\n    }\n\n    /**"
            },
            {
              "step": 9,
              "variableName": "Name name",
              "startLine": 69,
              "startColumn": 37,
              "endLine": 69,
              "endColumn": 46,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/PathFactoryImpl.java",
              "type": "Name",
              "code": "    /**\n     * @see PathFactory#create(Path, Name, int, boolean)\n     */\n    public Path create(Path parent, Name name, int index, boolean normalize) throws IllegalArgumentException, RepositoryException {\n        if (RootPath.NAME.equals(name)) {\n            throw new IllegalArgumentException();\n        }"
            },
            {
              "step": 10,
              "variableName": "name",
              "startLine": 73,
              "startColumn": 42,
              "endLine": 73,
              "endColumn": 46,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/PathFactoryImpl.java",
              "type": "Name",
              "code": "        if (RootPath.NAME.equals(name)) {\n            throw new IllegalArgumentException();\n        }\n        Path path = new NamePath(parent, name, index);\n        if (normalize) {\n            return path.getNormalizedPath();\n        } else {"
            },
            {
              "step": 11,
              "variableName": "Name name",
              "startLine": 41,
              "startColumn": 34,
              "endLine": 41,
              "endColumn": 43,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/NamePath.java",
              "type": "Name",
              "code": "     */\n    private final int index;\n\n    public NamePath(Path parent, Name name, int index) {\n        super(parent);\n        assert name != null;\n        assert index >= 0;"
            },
            {
              "step": 12,
              "variableName": "name",
              "startLine": 45,
              "startColumn": 21,
              "endLine": 45,
              "endColumn": 25,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/NamePath.java",
              "type": "Name",
              "code": "        super(parent);\n        assert name != null;\n        assert index >= 0;\n        this.name = name;\n        this.index = index;\n    }\n"
            },
            {
              "step": 13,
              "variableName": "this",
              "startLine": 45,
              "startColumn": 9,
              "endLine": 45,
              "endColumn": 13,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/NamePath.java",
              "type": "NamePath [name] : Name",
              "code": "        super(parent);\n        assert name != null;\n        assert index >= 0;\n        this.name = name;\n        this.index = index;\n    }\n"
            },
            {
              "step": 14,
              "variableName": "new NamePath(parent, name, index)",
              "startLine": 73,
              "startColumn": 21,
              "endLine": 73,
              "endColumn": 54,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/PathFactoryImpl.java",
              "type": "NamePath [name] : Name",
              "code": "        if (RootPath.NAME.equals(name)) {\n            throw new IllegalArgumentException();\n        }\n        Path path = new NamePath(parent, name, index);\n        if (normalize) {\n            return path.getNormalizedPath();\n        } else {"
            },
            {
              "step": 15,
              "variableName": "path",
              "startLine": 75,
              "startColumn": 20,
              "endLine": 75,
              "endColumn": 24,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/PathFactoryImpl.java",
              "type": "NamePath [name] : Name",
              "code": "        }\n        Path path = new NamePath(parent, name, index);\n        if (normalize) {\n            return path.getNormalizedPath();\n        } else {\n            return path;\n        }"
            },
            {
              "step": 16,
              "variableName": "getNormalizedPath",
              "startLine": 107,
              "startColumn": 17,
              "endLine": 107,
              "endColumn": 34,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/NamePath.java",
              "type": "NamePath [name] : Name",
              "code": "                    && !parent.denotesCurrent());\n    }\n\n    public Path getNormalizedPath() throws RepositoryException {\n        if (isNormalized()) {\n            return this;\n        } else {"
            },
            {
              "step": 17,
              "variableName": "this",
              "startLine": 109,
              "startColumn": 20,
              "endLine": 109,
              "endColumn": 24,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/NamePath.java",
              "type": "NamePath [name] : Name",
              "code": "\n    public Path getNormalizedPath() throws RepositoryException {\n        if (isNormalized()) {\n            return this;\n        } else {\n            // parent is guaranteed to be !null\n            Path normalized = parent.getNormalizedPath();"
            },
            {
              "step": 18,
              "variableName": "path.getNormalizedPath()",
              "startLine": 75,
              "startColumn": 20,
              "endLine": 75,
              "endColumn": 44,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/PathFactoryImpl.java",
              "type": "NamePath [name] : Name",
              "code": "        }\n        Path path = new NamePath(parent, name, index);\n        if (normalize) {\n            return path.getNormalizedPath();\n        } else {\n            return path;\n        }"
            },
            {
              "step": 19,
              "variableName": "create(parent, name, Path.INDEX_UNDEFINED, normalize)",
              "startLine": 63,
              "startColumn": 16,
              "endLine": 63,
              "endColumn": 69,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/PathFactoryImpl.java",
              "type": "NamePath [name] : Name",
              "code": "     * @see PathFactory#create(Path, Name, boolean)\n     */\n    public Path create(Path parent, Name name, boolean normalize) throws RepositoryException {\n        return create(parent, name, Path.INDEX_UNDEFINED, normalize);\n    }\n\n    /**"
            },
            {
              "step": 20,
              "variableName": "PathFactoryImpl.getInstance().create(parentPath, childName, true)",
              "startLine": 253,
              "startColumn": 18,
              "endLine": 253,
              "endColumn": 83,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/DefaultAccessManager.java",
              "type": "NamePath [name] : Name",
              "code": "     * @see AccessManager#isGranted(Path, Name, int)\n     */\n    public boolean isGranted(Path parentPath, Name childName, int permissions) throws RepositoryException {\n        Path p = PathFactoryImpl.getInstance().create(parentPath, childName, true);\n        return isGranted(p, permissions);\n    }\n"
            },
            {
              "step": 21,
              "variableName": "p",
              "startLine": 254,
              "startColumn": 26,
              "endLine": 254,
              "endColumn": 27,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/DefaultAccessManager.java",
              "type": "NamePath [name] : Name",
              "code": "     */\n    public boolean isGranted(Path parentPath, Name childName, int permissions) throws RepositoryException {\n        Path p = PathFactoryImpl.getInstance().create(parentPath, childName, true);\n        return isGranted(p, permissions);\n    }\n\n    /**"
            },
            {
              "step": 22,
              "variableName": "Path absPath",
              "startLine": 241,
              "startColumn": 30,
              "endLine": 241,
              "endColumn": 42,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/DefaultAccessManager.java",
              "type": "NamePath [name] : Name",
              "code": "    /**\n     * @see AccessManager#isGranted(Path, int)\n     */\n    public boolean isGranted(Path absPath, int permissions) throws RepositoryException {\n        checkInitialized();\n        if (!absPath.isAbsolute()) {\n            throw new RepositoryException(\"Absolute path expected\");"
            },
            {
              "step": 23,
              "variableName": "absPath",
              "startLine": 246,
              "startColumn": 43,
              "endLine": 246,
              "endColumn": 50,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/DefaultAccessManager.java",
              "type": "NamePath [name] : Name",
              "code": "        if (!absPath.isAbsolute()) {\n            throw new RepositoryException(\"Absolute path expected\");\n        }\n        return compiledPermissions.grants(absPath, permissions);\n    }\n\n    /**"
            },
            {
              "step": 24,
              "variableName": "Path absPath",
              "startLine": 108,
              "startColumn": 27,
              "endLine": 108,
              "endColumn": 39,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/authorization/AbstractCompiledPermissions.java",
              "type": "NamePath [name] : Name",
              "code": "    /**\n     * @see CompiledPermissions#grants(Path, int)\n     */\n    public boolean grants(Path absPath, int permissions) throws RepositoryException {\n        return getResult(absPath).grants(permissions);\n    }\n"
            },
            {
              "step": 25,
              "variableName": "absPath",
              "startLine": 109,
              "startColumn": 26,
              "endLine": 109,
              "endColumn": 33,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/authorization/AbstractCompiledPermissions.java",
              "type": "NamePath [name] : Name",
              "code": "     * @see CompiledPermissions#grants(Path, int)\n     */\n    public boolean grants(Path absPath, int permissions) throws RepositoryException {\n        return getResult(absPath).grants(permissions);\n    }\n\n    /**"
            },
            {
              "step": 26,
              "variableName": "Path absPath",
              "startLine": 228,
              "startColumn": 33,
              "endLine": 228,
              "endColumn": 45,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/authorization/combined/CombinedProvider.java",
              "type": "NamePath [name] : Name",
              "code": "         * @see AbstractCompiledPermissions#getResult(Path)\n         */\n        @Override\n        public Result getResult(Path absPath) throws RepositoryException {\n            // TODO: missing caching\n            return buildResult(absPath);\n        }"
            },
            {
              "step": 27,
              "variableName": "absPath",
              "startLine": 230,
              "startColumn": 32,
              "endLine": 230,
              "endColumn": 39,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/authorization/combined/CombinedProvider.java",
              "type": "NamePath [name] : Name",
              "code": "        @Override\n        public Result getResult(Path absPath) throws RepositoryException {\n            // TODO: missing caching\n            return buildResult(absPath);\n        }\n\n        /**"
            },
            {
              "step": 28,
              "variableName": "Path absPath",
              "startLine": 237,
              "startColumn": 38,
              "endLine": 237,
              "endColumn": 50,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/authorization/combined/CombinedProvider.java",
              "type": "NamePath [name] : Name",
              "code": "         * @see AbstractCompiledPermissions#buildResult(Path)\n         */\n        @Override\n        protected Result buildResult(Path absPath) throws RepositoryException {\n            Result res = null;\n            for (AbstractCompiledPermissions acp : cPermissions) {\n                Result other = acp.getResult(absPath);"
            },
            {
              "step": 29,
              "variableName": "absPath",
              "startLine": 240,
              "startColumn": 46,
              "endLine": 240,
              "endColumn": 53,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/authorization/combined/CombinedProvider.java",
              "type": "NamePath [name] : Name",
              "code": "        protected Result buildResult(Path absPath) throws RepositoryException {\n            Result res = null;\n            for (AbstractCompiledPermissions acp : cPermissions) {\n                Result other = acp.getResult(absPath);\n                res = (res == null) ? other : res.combine(other);\n            }\n            return res;"
            },
            {
              "step": 30,
              "variableName": "Path absPath",
              "startLine": 46,
              "startColumn": 29,
              "endLine": 46,
              "endColumn": 41,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/authorization/AbstractCompiledPermissions.java",
              "type": "NamePath [name] : Name",
              "code": "     * @return the <code>Result</code> for the give <code>absPath</code>.\n     * @throws RepositoryException if an error occurs.\n     */\n    public Result getResult(Path absPath) throws RepositoryException {\n        Result result;\n        synchronized (monitor) {\n            result = cache.get(absPath);"
            },
            {
              "step": 31,
              "variableName": "absPath",
              "startLine": 54,
              "startColumn": 42,
              "endLine": 54,
              "endColumn": 49,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/authorization/AbstractCompiledPermissions.java",
              "type": "NamePath [name] : Name",
              "code": "                if (absPath == null) {\n                    result = buildRepositoryResult();\n                } else {\n                    result = buildResult(absPath);\n                }\n                cache.put(absPath, result);\n            }"
            },
            {
              "step": 32,
              "variableName": "Path absPath",
              "startLine": 165,
              "startColumn": 34,
              "endLine": 165,
              "endColumn": 46,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/authorization/acl/CompiledPermissionsImpl.java",
              "type": "NamePath [name] : Name",
              "code": "     * @see AbstractCompiledPermissions#buildResult(org.apache.jackrabbit.spi.Path)\n     */\n    @Override\n    protected Result buildResult(Path absPath) throws RepositoryException {\n        boolean existingNode = false;\n        NodeImpl node;\n"
            },
            {
              "step": 33,
              "variableName": "absPath",
              "startLine": 171,
              "startColumn": 45,
              "endLine": 171,
              "endColumn": 52,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/authorization/acl/CompiledPermissionsImpl.java",
              "type": "NamePath [name] : Name",
              "code": "\n        ItemManager itemMgr = session.getItemManager();\n        try {\n            ItemImpl item = itemMgr.getItem(absPath);\n            if (item.isNode()) {\n                node = (NodeImpl) item;\n                existingNode = true;"
            },
            {
              "step": 34,
              "variableName": "Path path",
              "startLine": 549,
              "startColumn": 29,
              "endLine": 549,
              "endColumn": 38,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/ItemManager.java",
              "type": "NamePath [name] : Name",
              "code": "     * @throws RepositoryException\n     */\n    @Deprecated\n    public ItemImpl getItem(Path path) throws PathNotFoundException,\n            AccessDeniedException, RepositoryException {\n        ItemId id = hierMgr.resolvePath(path);\n        if (id == null) {"
            },
            {
              "step": 35,
              "variableName": "path",
              "startLine": 563,
              "startColumn": 60,
              "endLine": 563,
              "endColumn": 64,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/ItemManager.java",
              "type": "NamePath [name] : Name",
              "code": "            }\n            return item;\n        } catch (ItemNotFoundException infe) {\n            throw new PathNotFoundException(safeGetJCRPath(path));\n        }\n    }\n"
            },
            {
              "step": 36,
              "variableName": "Path path",
              "startLine": 993,
              "startColumn": 27,
              "endLine": 993,
              "endColumn": 36,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/ItemManager.java",
              "type": "NamePath [name] : Name",
              "code": "     * @param path path to convert\n     * @return JCR path\n     */\n    String safeGetJCRPath(Path path) {\n        try {\n            return session.getJCRPath(path);\n        } catch (NamespaceException e) {"
            },
            {
              "step": 37,
              "variableName": "path",
              "startLine": 997,
              "startColumn": 46,
              "endLine": 997,
              "endColumn": 50,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/ItemManager.java",
              "type": "NamePath [name] : Name",
              "code": "        try {\n            return session.getJCRPath(path);\n        } catch (NamespaceException e) {\n            log.error(\"failed to convert \" + path.toString() + \" to JCR path.\");\n            // return string representation of internal path as a fallback\n            return path.toString();\n        }"
            },
            {
              "step": 38,
              "variableName": "toString",
              "startLine": 315,
              "startColumn": 25,
              "endLine": 315,
              "endColumn": 33,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/AbstractPath.java",
              "type": "NamePath [name] : Name",
              "code": "     *\n     * @return path string\n     */\n    public final String toString() {\n        return getString();\n    }\n"
            },
            {
              "step": 39,
              "variableName": "getString()",
              "startLine": 316,
              "startColumn": 16,
              "endLine": 316,
              "endColumn": 27,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/AbstractPath.java",
              "type": "NamePath [name] : Name",
              "code": "     * @return path string\n     */\n    public final String toString() {\n        return getString();\n    }\n\n}"
            },
            {
              "step": 40,
              "variableName": "getString",
              "startLine": 130,
              "startColumn": 19,
              "endLine": 130,
              "endColumn": 28,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/RelativePath.java",
              "type": "NamePath [name] : Name",
              "code": "        return parent;\n    }\n\n    public String getString() {\n        if (parent != null) {\n            return parent.getString() + Path.DELIMITER + getElementString();\n        } else {"
            },
            {
              "step": 41,
              "variableName": "getElementString()",
              "startLine": 132,
              "startColumn": 58,
              "endLine": 132,
              "endColumn": 76,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/RelativePath.java",
              "type": "NamePath [name] : Name",
              "code": "\n    public String getString() {\n        if (parent != null) {\n            return parent.getString() + Path.DELIMITER + getElementString();\n        } else {\n            return getElementString();\n        }"
            },
            {
              "step": 42,
              "variableName": "getElementString",
              "startLine": 61,
              "startColumn": 22,
              "endLine": 61,
              "endColumn": 38,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/NamePath.java",
              "type": "NamePath [name] : Name",
              "code": "        }\n    }\n\n    protected String getElementString() {\n        if (index > Path.INDEX_DEFAULT) {\n            return name + \"[\" + index + \"]\";\n        } else {"
            },
            {
              "step": 43,
              "variableName": "name",
              "startLine": 63,
              "startColumn": 20,
              "endLine": 63,
              "endColumn": 24,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/NamePath.java",
              "type": "NamePath [name] : Name",
              "code": "\n    protected String getElementString() {\n        if (index > Path.INDEX_DEFAULT) {\n            return name + \"[\" + index + \"]\";\n        } else {\n            return name.toString();\n        }"
            },
            {
              "step": 44,
              "variableName": "name",
              "startLine": 63,
              "startColumn": 20,
              "endLine": 63,
              "endColumn": 24,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/NamePath.java",
              "type": "Name",
              "code": "\n    protected String getElementString() {\n        if (index > Path.INDEX_DEFAULT) {\n            return name + \"[\" + index + \"]\";\n        } else {\n            return name.toString();\n        }"
            },
            {
              "step": 45,
              "variableName": "name + \"[\" + index + \"]\"",
              "startLine": 63,
              "startColumn": 20,
              "endLine": 63,
              "endColumn": 44,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/NamePath.java",
              "type": "String",
              "code": "\n    protected String getElementString() {\n        if (index > Path.INDEX_DEFAULT) {\n            return name + \"[\" + index + \"]\";\n        } else {\n            return name.toString();\n        }"
            },
            {
              "step": 46,
              "variableName": "getElementString()",
              "startLine": 132,
              "startColumn": 58,
              "endLine": 132,
              "endColumn": 76,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/RelativePath.java",
              "type": "String",
              "code": "\n    public String getString() {\n        if (parent != null) {\n            return parent.getString() + Path.DELIMITER + getElementString();\n        } else {\n            return getElementString();\n        }"
            },
            {
              "step": 47,
              "variableName": "parent.getString() + Path.DELIMITER + getElementString()",
              "startLine": 132,
              "startColumn": 20,
              "endLine": 132,
              "endColumn": 76,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/RelativePath.java",
              "type": "String",
              "code": "\n    public String getString() {\n        if (parent != null) {\n            return parent.getString() + Path.DELIMITER + getElementString();\n        } else {\n            return getElementString();\n        }"
            },
            {
              "step": 48,
              "variableName": "getString()",
              "startLine": 316,
              "startColumn": 16,
              "endLine": 316,
              "endColumn": 27,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/AbstractPath.java",
              "type": "String",
              "code": "     * @return path string\n     */\n    public final String toString() {\n        return getString();\n    }\n\n}"
            },
            {
              "step": 49,
              "variableName": "path.toString()",
              "startLine": 997,
              "startColumn": 46,
              "endLine": 997,
              "endColumn": 61,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/ItemManager.java",
              "type": "String",
              "code": "        try {\n            return session.getJCRPath(path);\n        } catch (NamespaceException e) {\n            log.error(\"failed to convert \" + path.toString() + \" to JCR path.\");\n            // return string representation of internal path as a fallback\n            return path.toString();\n        }"
            },
            {
              "step": 50,
              "variableName": "\"failed to convert \" + path.toString() + \" to JCR path.\"",
              "startLine": 997,
              "startColumn": 23,
              "endLine": 997,
              "endColumn": 79,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/ItemManager.java",
              "type": "",
              "code": "        try {\n            return session.getJCRPath(path);\n        } catch (NamespaceException e) {\n            log.error(\"failed to convert \" + path.toString() + \" to JCR path.\");\n            // return string representation of internal path as a fallback\n            return path.toString();\n        }"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "P_PASSWORD",
              "startLine": 782,
              "startColumn": 31,
              "endLine": 782,
              "endColumn": 41,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/user/UserManagerImpl.java",
              "type": "Name",
              "code": "        } else {\n            pwHash = password;\n        }\n        setProperty(userNode, P_PASSWORD, getValue(pwHash), userNode.isNew());\n    }\n\n    void setProtectedProperty(NodeImpl node, Name propName, Value value) throws RepositoryException, LockException, ConstraintViolationException, ItemExistsException, VersionException {"
            },
            {
              "step": 1,
              "variableName": "Name name",
              "startLine": 106,
              "startColumn": 57,
              "endLine": 106,
              "endColumn": 66,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/ProtectedItemModifier.java",
              "type": "Name",
              "code": "        return setProperty(parentImpl, name, value, false);\n    }\n\n    protected Property setProperty(NodeImpl parentImpl, Name name, Value value, boolean ignorePermissions) throws RepositoryException {\n        if (!ignorePermissions) {\n            checkPermission(parentImpl, name, getPermission(false, false));\n        }"
            },
            {
              "step": 2,
              "variableName": "name",
              "startLine": 108,
              "startColumn": 41,
              "endLine": 108,
              "endColumn": 45,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/ProtectedItemModifier.java",
              "type": "Name",
              "code": "\n    protected Property setProperty(NodeImpl parentImpl, Name name, Value value, boolean ignorePermissions) throws RepositoryException {\n        if (!ignorePermissions) {\n            checkPermission(parentImpl, name, getPermission(false, false));\n        }\n        // validation: make sure Node is not locked or checked-in.\n        parentImpl.checkSetProperty();"
            },
            {
              "step": 3,
              "variableName": "Name childName",
              "startLine": 170,
              "startColumn": 49,
              "endLine": 170,
              "endColumn": 63,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/ProtectedItemModifier.java",
              "type": "Name",
              "code": "        }\n    }\n\n    private void checkPermission(NodeImpl node, Name childName, int perm) throws RepositoryException {\n        if (perm > Permission.NONE) {\n            SessionImpl sImpl = (SessionImpl) node.getSession();\n            AccessManager acMgr = sImpl.getAccessManager();"
            },
            {
              "step": 4,
              "variableName": "childName",
              "startLine": 175,
              "startColumn": 72,
              "endLine": 175,
              "endColumn": 81,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/ProtectedItemModifier.java",
              "type": "Name",
              "code": "            SessionImpl sImpl = (SessionImpl) node.getSession();\n            AccessManager acMgr = sImpl.getAccessManager();\n\n            boolean isGranted = acMgr.isGranted(node.getPrimaryPath(), childName, perm);\n            if (!isGranted) {\n                throw new AccessDeniedException(\"Permission denied.\");\n            }"
            },
            {
              "step": 5,
              "variableName": "Name childName",
              "startLine": 252,
              "startColumn": 47,
              "endLine": 252,
              "endColumn": 61,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/DefaultAccessManager.java",
              "type": "Name",
              "code": "    /**\n     * @see AccessManager#isGranted(Path, Name, int)\n     */\n    public boolean isGranted(Path parentPath, Name childName, int permissions) throws RepositoryException {\n        Path p = PathFactoryImpl.getInstance().create(parentPath, childName, true);\n        return isGranted(p, permissions);\n    }"
            },
            {
              "step": 6,
              "variableName": "childName",
              "startLine": 253,
              "startColumn": 67,
              "endLine": 253,
              "endColumn": 76,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/DefaultAccessManager.java",
              "type": "Name",
              "code": "     * @see AccessManager#isGranted(Path, Name, int)\n     */\n    public boolean isGranted(Path parentPath, Name childName, int permissions) throws RepositoryException {\n        Path p = PathFactoryImpl.getInstance().create(parentPath, childName, true);\n        return isGranted(p, permissions);\n    }\n"
            },
            {
              "step": 7,
              "variableName": "Name name",
              "startLine": 62,
              "startColumn": 37,
              "endLine": 62,
              "endColumn": 46,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/PathFactoryImpl.java",
              "type": "Name",
              "code": "    /**\n     * @see PathFactory#create(Path, Name, boolean)\n     */\n    public Path create(Path parent, Name name, boolean normalize) throws RepositoryException {\n        return create(parent, name, Path.INDEX_UNDEFINED, normalize);\n    }\n"
            },
            {
              "step": 8,
              "variableName": "name",
              "startLine": 63,
              "startColumn": 31,
              "endLine": 63,
              "endColumn": 35,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/PathFactoryImpl.java",
              "type": "Name",
              "code": "     * @see PathFactory#create(Path, Name, boolean)\n     */\n    public Path create(Path parent, Name name, boolean normalize) throws RepositoryException {\n        return create(parent, name, Path.INDEX_UNDEFINED, normalize);\n    }\n\n    /**"
            },
            {
              "step": 9,
              "variableName": "Name name",
              "startLine": 69,
              "startColumn": 37,
              "endLine": 69,
              "endColumn": 46,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/PathFactoryImpl.java",
              "type": "Name",
              "code": "    /**\n     * @see PathFactory#create(Path, Name, int, boolean)\n     */\n    public Path create(Path parent, Name name, int index, boolean normalize) throws IllegalArgumentException, RepositoryException {\n        if (RootPath.NAME.equals(name)) {\n            throw new IllegalArgumentException();\n        }"
            },
            {
              "step": 10,
              "variableName": "name",
              "startLine": 73,
              "startColumn": 42,
              "endLine": 73,
              "endColumn": 46,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/PathFactoryImpl.java",
              "type": "Name",
              "code": "        if (RootPath.NAME.equals(name)) {\n            throw new IllegalArgumentException();\n        }\n        Path path = new NamePath(parent, name, index);\n        if (normalize) {\n            return path.getNormalizedPath();\n        } else {"
            },
            {
              "step": 11,
              "variableName": "Name name",
              "startLine": 41,
              "startColumn": 34,
              "endLine": 41,
              "endColumn": 43,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/NamePath.java",
              "type": "Name",
              "code": "     */\n    private final int index;\n\n    public NamePath(Path parent, Name name, int index) {\n        super(parent);\n        assert name != null;\n        assert index >= 0;"
            },
            {
              "step": 12,
              "variableName": "name",
              "startLine": 45,
              "startColumn": 21,
              "endLine": 45,
              "endColumn": 25,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/NamePath.java",
              "type": "Name",
              "code": "        super(parent);\n        assert name != null;\n        assert index >= 0;\n        this.name = name;\n        this.index = index;\n    }\n"
            },
            {
              "step": 13,
              "variableName": "this",
              "startLine": 45,
              "startColumn": 9,
              "endLine": 45,
              "endColumn": 13,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/NamePath.java",
              "type": "NamePath [name] : Name",
              "code": "        super(parent);\n        assert name != null;\n        assert index >= 0;\n        this.name = name;\n        this.index = index;\n    }\n"
            },
            {
              "step": 14,
              "variableName": "new NamePath(parent, name, index)",
              "startLine": 73,
              "startColumn": 21,
              "endLine": 73,
              "endColumn": 54,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/PathFactoryImpl.java",
              "type": "NamePath [name] : Name",
              "code": "        if (RootPath.NAME.equals(name)) {\n            throw new IllegalArgumentException();\n        }\n        Path path = new NamePath(parent, name, index);\n        if (normalize) {\n            return path.getNormalizedPath();\n        } else {"
            },
            {
              "step": 15,
              "variableName": "path",
              "startLine": 77,
              "startColumn": 20,
              "endLine": 77,
              "endColumn": 24,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/PathFactoryImpl.java",
              "type": "NamePath [name] : Name",
              "code": "        if (normalize) {\n            return path.getNormalizedPath();\n        } else {\n            return path;\n        }\n    }\n"
            },
            {
              "step": 16,
              "variableName": "create(parent, name, Path.INDEX_UNDEFINED, normalize)",
              "startLine": 63,
              "startColumn": 16,
              "endLine": 63,
              "endColumn": 69,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/PathFactoryImpl.java",
              "type": "NamePath [name] : Name",
              "code": "     * @see PathFactory#create(Path, Name, boolean)\n     */\n    public Path create(Path parent, Name name, boolean normalize) throws RepositoryException {\n        return create(parent, name, Path.INDEX_UNDEFINED, normalize);\n    }\n\n    /**"
            },
            {
              "step": 17,
              "variableName": "PathFactoryImpl.getInstance().create(parentPath, childName, true)",
              "startLine": 253,
              "startColumn": 18,
              "endLine": 253,
              "endColumn": 83,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/DefaultAccessManager.java",
              "type": "NamePath [name] : Name",
              "code": "     * @see AccessManager#isGranted(Path, Name, int)\n     */\n    public boolean isGranted(Path parentPath, Name childName, int permissions) throws RepositoryException {\n        Path p = PathFactoryImpl.getInstance().create(parentPath, childName, true);\n        return isGranted(p, permissions);\n    }\n"
            },
            {
              "step": 18,
              "variableName": "p",
              "startLine": 254,
              "startColumn": 26,
              "endLine": 254,
              "endColumn": 27,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/DefaultAccessManager.java",
              "type": "NamePath [name] : Name",
              "code": "     */\n    public boolean isGranted(Path parentPath, Name childName, int permissions) throws RepositoryException {\n        Path p = PathFactoryImpl.getInstance().create(parentPath, childName, true);\n        return isGranted(p, permissions);\n    }\n\n    /**"
            },
            {
              "step": 19,
              "variableName": "Path absPath",
              "startLine": 241,
              "startColumn": 30,
              "endLine": 241,
              "endColumn": 42,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/DefaultAccessManager.java",
              "type": "NamePath [name] : Name",
              "code": "    /**\n     * @see AccessManager#isGranted(Path, int)\n     */\n    public boolean isGranted(Path absPath, int permissions) throws RepositoryException {\n        checkInitialized();\n        if (!absPath.isAbsolute()) {\n            throw new RepositoryException(\"Absolute path expected\");"
            },
            {
              "step": 20,
              "variableName": "absPath",
              "startLine": 246,
              "startColumn": 43,
              "endLine": 246,
              "endColumn": 50,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/DefaultAccessManager.java",
              "type": "NamePath [name] : Name",
              "code": "        if (!absPath.isAbsolute()) {\n            throw new RepositoryException(\"Absolute path expected\");\n        }\n        return compiledPermissions.grants(absPath, permissions);\n    }\n\n    /**"
            },
            {
              "step": 21,
              "variableName": "Path absPath",
              "startLine": 108,
              "startColumn": 27,
              "endLine": 108,
              "endColumn": 39,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/authorization/AbstractCompiledPermissions.java",
              "type": "NamePath [name] : Name",
              "code": "    /**\n     * @see CompiledPermissions#grants(Path, int)\n     */\n    public boolean grants(Path absPath, int permissions) throws RepositoryException {\n        return getResult(absPath).grants(permissions);\n    }\n"
            },
            {
              "step": 22,
              "variableName": "absPath",
              "startLine": 109,
              "startColumn": 26,
              "endLine": 109,
              "endColumn": 33,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/authorization/AbstractCompiledPermissions.java",
              "type": "NamePath [name] : Name",
              "code": "     * @see CompiledPermissions#grants(Path, int)\n     */\n    public boolean grants(Path absPath, int permissions) throws RepositoryException {\n        return getResult(absPath).grants(permissions);\n    }\n\n    /**"
            },
            {
              "step": 23,
              "variableName": "Path absPath",
              "startLine": 46,
              "startColumn": 29,
              "endLine": 46,
              "endColumn": 41,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/authorization/AbstractCompiledPermissions.java",
              "type": "NamePath [name] : Name",
              "code": "     * @return the <code>Result</code> for the give <code>absPath</code>.\n     * @throws RepositoryException if an error occurs.\n     */\n    public Result getResult(Path absPath) throws RepositoryException {\n        Result result;\n        synchronized (monitor) {\n            result = cache.get(absPath);"
            },
            {
              "step": 24,
              "variableName": "absPath",
              "startLine": 54,
              "startColumn": 42,
              "endLine": 54,
              "endColumn": 49,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/authorization/AbstractCompiledPermissions.java",
              "type": "NamePath [name] : Name",
              "code": "                if (absPath == null) {\n                    result = buildRepositoryResult();\n                } else {\n                    result = buildResult(absPath);\n                }\n                cache.put(absPath, result);\n            }"
            },
            {
              "step": 25,
              "variableName": "Path absPath",
              "startLine": 165,
              "startColumn": 34,
              "endLine": 165,
              "endColumn": 46,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/authorization/acl/CompiledPermissionsImpl.java",
              "type": "NamePath [name] : Name",
              "code": "     * @see AbstractCompiledPermissions#buildResult(org.apache.jackrabbit.spi.Path)\n     */\n    @Override\n    protected Result buildResult(Path absPath) throws RepositoryException {\n        boolean existingNode = false;\n        NodeImpl node;\n"
            },
            {
              "step": 26,
              "variableName": "absPath",
              "startLine": 171,
              "startColumn": 45,
              "endLine": 171,
              "endColumn": 52,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/authorization/acl/CompiledPermissionsImpl.java",
              "type": "NamePath [name] : Name",
              "code": "\n        ItemManager itemMgr = session.getItemManager();\n        try {\n            ItemImpl item = itemMgr.getItem(absPath);\n            if (item.isNode()) {\n                node = (NodeImpl) item;\n                existingNode = true;"
            },
            {
              "step": 27,
              "variableName": "Path path",
              "startLine": 549,
              "startColumn": 29,
              "endLine": 549,
              "endColumn": 38,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/ItemManager.java",
              "type": "NamePath [name] : Name",
              "code": "     * @throws RepositoryException\n     */\n    @Deprecated\n    public ItemImpl getItem(Path path) throws PathNotFoundException,\n            AccessDeniedException, RepositoryException {\n        ItemId id = hierMgr.resolvePath(path);\n        if (id == null) {"
            },
            {
              "step": 28,
              "variableName": "path",
              "startLine": 559,
              "startColumn": 32,
              "endLine": 559,
              "endColumn": 36,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/ItemManager.java",
              "type": "NamePath [name] : Name",
              "code": "            ItemImpl item = getItem(id, path, true);\n            // Test, if this item is a shareable node.\n            if (item.isNode() && ((NodeImpl) item).isShareable()) {\n                return getNode(path);\n            }\n            return item;\n        } catch (ItemNotFoundException infe) {"
            },
            {
              "step": 29,
              "variableName": "Path path",
              "startLine": 574,
              "startColumn": 29,
              "endLine": 574,
              "endColumn": 38,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/ItemManager.java",
              "type": "NamePath [name] : Name",
              "code": "     * @throws AccessDeniedException\n     * @throws RepositoryException\n     */\n    public NodeImpl getNode(Path path) throws PathNotFoundException,\n            AccessDeniedException, RepositoryException {\n        NodeId id = hierMgr.resolveNodePath(path);\n        if (id == null) {"
            },
            {
              "step": 30,
              "variableName": "path",
              "startLine": 578,
              "startColumn": 60,
              "endLine": 578,
              "endColumn": 64,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/ItemManager.java",
              "type": "NamePath [name] : Name",
              "code": "            AccessDeniedException, RepositoryException {\n        NodeId id = hierMgr.resolveNodePath(path);\n        if (id == null) {\n            throw new PathNotFoundException(safeGetJCRPath(path));\n        }\n        NodeId parentId = null;\n        if (!path.denotesRoot()) {"
            },
            {
              "step": 31,
              "variableName": "Path path",
              "startLine": 993,
              "startColumn": 27,
              "endLine": 993,
              "endColumn": 36,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/ItemManager.java",
              "type": "NamePath [name] : Name",
              "code": "     * @param path path to convert\n     * @return JCR path\n     */\n    String safeGetJCRPath(Path path) {\n        try {\n            return session.getJCRPath(path);\n        } catch (NamespaceException e) {"
            },
            {
              "step": 32,
              "variableName": "path",
              "startLine": 997,
              "startColumn": 46,
              "endLine": 997,
              "endColumn": 50,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/ItemManager.java",
              "type": "NamePath [name] : Name",
              "code": "        try {\n            return session.getJCRPath(path);\n        } catch (NamespaceException e) {\n            log.error(\"failed to convert \" + path.toString() + \" to JCR path.\");\n            // return string representation of internal path as a fallback\n            return path.toString();\n        }"
            },
            {
              "step": 33,
              "variableName": "toString",
              "startLine": 315,
              "startColumn": 25,
              "endLine": 315,
              "endColumn": 33,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/AbstractPath.java",
              "type": "NamePath [name] : Name",
              "code": "     *\n     * @return path string\n     */\n    public final String toString() {\n        return getString();\n    }\n"
            },
            {
              "step": 34,
              "variableName": "getString()",
              "startLine": 316,
              "startColumn": 16,
              "endLine": 316,
              "endColumn": 27,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/AbstractPath.java",
              "type": "NamePath [name] : Name",
              "code": "     * @return path string\n     */\n    public final String toString() {\n        return getString();\n    }\n\n}"
            },
            {
              "step": 35,
              "variableName": "getString",
              "startLine": 130,
              "startColumn": 19,
              "endLine": 130,
              "endColumn": 28,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/RelativePath.java",
              "type": "NamePath [name] : Name",
              "code": "        return parent;\n    }\n\n    public String getString() {\n        if (parent != null) {\n            return parent.getString() + Path.DELIMITER + getElementString();\n        } else {"
            },
            {
              "step": 36,
              "variableName": "getElementString()",
              "startLine": 134,
              "startColumn": 20,
              "endLine": 134,
              "endColumn": 38,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/RelativePath.java",
              "type": "NamePath [name] : Name",
              "code": "        if (parent != null) {\n            return parent.getString() + Path.DELIMITER + getElementString();\n        } else {\n            return getElementString();\n        }\n    }\n"
            },
            {
              "step": 37,
              "variableName": "getElementString",
              "startLine": 61,
              "startColumn": 22,
              "endLine": 61,
              "endColumn": 38,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/NamePath.java",
              "type": "NamePath [name] : Name",
              "code": "        }\n    }\n\n    protected String getElementString() {\n        if (index > Path.INDEX_DEFAULT) {\n            return name + \"[\" + index + \"]\";\n        } else {"
            },
            {
              "step": 38,
              "variableName": "name",
              "startLine": 63,
              "startColumn": 20,
              "endLine": 63,
              "endColumn": 24,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/NamePath.java",
              "type": "NamePath [name] : Name",
              "code": "\n    protected String getElementString() {\n        if (index > Path.INDEX_DEFAULT) {\n            return name + \"[\" + index + \"]\";\n        } else {\n            return name.toString();\n        }"
            },
            {
              "step": 39,
              "variableName": "name",
              "startLine": 63,
              "startColumn": 20,
              "endLine": 63,
              "endColumn": 24,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/NamePath.java",
              "type": "Name",
              "code": "\n    protected String getElementString() {\n        if (index > Path.INDEX_DEFAULT) {\n            return name + \"[\" + index + \"]\";\n        } else {\n            return name.toString();\n        }"
            },
            {
              "step": 40,
              "variableName": "name + \"[\" + index + \"]\"",
              "startLine": 63,
              "startColumn": 20,
              "endLine": 63,
              "endColumn": 44,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/NamePath.java",
              "type": "String",
              "code": "\n    protected String getElementString() {\n        if (index > Path.INDEX_DEFAULT) {\n            return name + \"[\" + index + \"]\";\n        } else {\n            return name.toString();\n        }"
            },
            {
              "step": 41,
              "variableName": "getElementString()",
              "startLine": 134,
              "startColumn": 20,
              "endLine": 134,
              "endColumn": 38,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/RelativePath.java",
              "type": "String",
              "code": "        if (parent != null) {\n            return parent.getString() + Path.DELIMITER + getElementString();\n        } else {\n            return getElementString();\n        }\n    }\n"
            },
            {
              "step": 42,
              "variableName": "getString()",
              "startLine": 316,
              "startColumn": 16,
              "endLine": 316,
              "endColumn": 27,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/AbstractPath.java",
              "type": "String",
              "code": "     * @return path string\n     */\n    public final String toString() {\n        return getString();\n    }\n\n}"
            },
            {
              "step": 43,
              "variableName": "path.toString()",
              "startLine": 997,
              "startColumn": 46,
              "endLine": 997,
              "endColumn": 61,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/ItemManager.java",
              "type": "String",
              "code": "        try {\n            return session.getJCRPath(path);\n        } catch (NamespaceException e) {\n            log.error(\"failed to convert \" + path.toString() + \" to JCR path.\");\n            // return string representation of internal path as a fallback\n            return path.toString();\n        }"
            },
            {
              "step": 44,
              "variableName": "\"failed to convert \" + path.toString() + \" to JCR path.\"",
              "startLine": 997,
              "startColumn": 23,
              "endLine": 997,
              "endColumn": 79,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/ItemManager.java",
              "type": "",
              "code": "        try {\n            return session.getJCRPath(path);\n        } catch (NamespaceException e) {\n            log.error(\"failed to convert \" + path.toString() + \" to JCR path.\");\n            // return string representation of internal path as a fallback\n            return path.toString();\n        }"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 9,
      "fileName": "NodeImpl.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "P_PASSWORD",
              "startLine": 782,
              "startColumn": 31,
              "endLine": 782,
              "endColumn": 41,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/user/UserManagerImpl.java",
              "type": "Name",
              "code": "        } else {\n            pwHash = password;\n        }\n        setProperty(userNode, P_PASSWORD, getValue(pwHash), userNode.isNew());\n    }\n\n    void setProtectedProperty(NodeImpl node, Name propName, Value value) throws RepositoryException, LockException, ConstraintViolationException, ItemExistsException, VersionException {"
            },
            {
              "step": 1,
              "variableName": "Name name",
              "startLine": 106,
              "startColumn": 57,
              "endLine": 106,
              "endColumn": 66,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/ProtectedItemModifier.java",
              "type": "Name",
              "code": "        return setProperty(parentImpl, name, value, false);\n    }\n\n    protected Property setProperty(NodeImpl parentImpl, Name name, Value value, boolean ignorePermissions) throws RepositoryException {\n        if (!ignorePermissions) {\n            checkPermission(parentImpl, name, getPermission(false, false));\n        }"
            },
            {
              "step": 2,
              "variableName": "name",
              "startLine": 113,
              "startColumn": 47,
              "endLine": 113,
              "endColumn": 51,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/ProtectedItemModifier.java",
              "type": "Name",
              "code": "        // validation: make sure Node is not locked or checked-in.\n        parentImpl.checkSetProperty();\n        InternalValue intVs = InternalValue.create(value, parentImpl.sessionContext);\n        return parentImpl.internalSetProperty(name, intVs);\n    }\n\n    protected Property setProperty(NodeImpl parentImpl, Name name, Value[] values) throws RepositoryException {"
            },
            {
              "step": 3,
              "variableName": "Name name",
              "startLine": 1000,
              "startColumn": 44,
              "endLine": 1000,
              "endColumn": 53,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/NodeImpl.java",
              "type": "Name",
              "code": "     * @throws ValueFormatException\n     * @throws RepositoryException\n     */\n    protected Property internalSetProperty(Name name, InternalValue value)\n            throws ValueFormatException, RepositoryException {\n        int type;\n        if (value == null) {"
            },
            {
              "step": 4,
              "variableName": "name",
              "startLine": 1010,
              "startColumn": 49,
              "endLine": 1010,
              "endColumn": 53,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/NodeImpl.java",
              "type": "Name",
              "code": "        }\n\n        BitSet status = new BitSet();\n        PropertyImpl prop = getOrCreateProperty(name, type, false, true, status);\n        try {\n            if (value == null) {\n                prop.internalSetValue(null, type);"
            },
            {
              "step": 5,
              "variableName": "Name name",
              "startLine": 390,
              "startColumn": 61,
              "endLine": 390,
              "endColumn": 70,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/NodeImpl.java",
              "type": "Name",
              "code": "     *                                      could be found\n     * @throws RepositoryException          if another error occurs\n     */\n    protected synchronized PropertyImpl getOrCreateProperty(Name name, int type,\n                                                            boolean multiValued,\n                                                            boolean exactTypeMatch,\n                                                            BitSet status)"
            },
            {
              "step": 6,
              "variableName": "name",
              "startLine": 402,
              "startColumn": 53,
              "endLine": 402,
              "endColumn": 57,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/NodeImpl.java",
              "type": "Name",
              "code": "            // -> no need to check item manager\n            PropertyDefinitionImpl def = getApplicablePropertyDefinition(\n                    name, type, multiValued, exactTypeMatch);\n            PropertyImpl prop = createChildProperty(name, type, def);\n            status.set(CREATED);\n            return prop;\n        }"
            },
            {
              "step": 7,
              "variableName": "Name name",
              "startLine": 473,
              "startColumn": 61,
              "endLine": 473,
              "endColumn": 70,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/NodeImpl.java",
              "type": "Name",
              "code": "     * @return the property instance.\n     * @throws RepositoryException if the property cannot be created.\n     */\n    protected synchronized PropertyImpl createChildProperty(Name name, int type,\n                                                            PropertyDefinitionImpl def)\n            throws RepositoryException {\n"
            },
            {
              "step": 8,
              "variableName": "msg",
              "startLine": 495,
              "startColumn": 23,
              "endLine": 495,
              "endColumn": 26,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/NodeImpl.java",
              "type": "",
              "code": "                    propState, data.getNodeState(), propDef);\n        } catch (ItemStateException ise) {\n            String msg = \"failed to add property \" + name + \" to \" + this;\n            log.debug(msg);\n            throw new RepositoryException(msg, ise);\n        }\n"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "P_PASSWORD",
              "startLine": 782,
              "startColumn": 31,
              "endLine": 782,
              "endColumn": 41,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/user/UserManagerImpl.java",
              "type": "Name",
              "code": "        } else {\n            pwHash = password;\n        }\n        setProperty(userNode, P_PASSWORD, getValue(pwHash), userNode.isNew());\n    }\n\n    void setProtectedProperty(NodeImpl node, Name propName, Value value) throws RepositoryException, LockException, ConstraintViolationException, ItemExistsException, VersionException {"
            },
            {
              "step": 1,
              "variableName": "Name name",
              "startLine": 106,
              "startColumn": 57,
              "endLine": 106,
              "endColumn": 66,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/ProtectedItemModifier.java",
              "type": "Name",
              "code": "        return setProperty(parentImpl, name, value, false);\n    }\n\n    protected Property setProperty(NodeImpl parentImpl, Name name, Value value, boolean ignorePermissions) throws RepositoryException {\n        if (!ignorePermissions) {\n            checkPermission(parentImpl, name, getPermission(false, false));\n        }"
            },
            {
              "step": 2,
              "variableName": "name",
              "startLine": 113,
              "startColumn": 47,
              "endLine": 113,
              "endColumn": 51,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/ProtectedItemModifier.java",
              "type": "Name",
              "code": "        // validation: make sure Node is not locked or checked-in.\n        parentImpl.checkSetProperty();\n        InternalValue intVs = InternalValue.create(value, parentImpl.sessionContext);\n        return parentImpl.internalSetProperty(name, intVs);\n    }\n\n    protected Property setProperty(NodeImpl parentImpl, Name name, Value[] values) throws RepositoryException {"
            },
            {
              "step": 3,
              "variableName": "Name name",
              "startLine": 1000,
              "startColumn": 44,
              "endLine": 1000,
              "endColumn": 53,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/NodeImpl.java",
              "type": "Name",
              "code": "     * @throws ValueFormatException\n     * @throws RepositoryException\n     */\n    protected Property internalSetProperty(Name name, InternalValue value)\n            throws ValueFormatException, RepositoryException {\n        int type;\n        if (value == null) {"
            },
            {
              "step": 4,
              "variableName": "name",
              "startLine": 1010,
              "startColumn": 49,
              "endLine": 1010,
              "endColumn": 53,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/NodeImpl.java",
              "type": "Name",
              "code": "        }\n\n        BitSet status = new BitSet();\n        PropertyImpl prop = getOrCreateProperty(name, type, false, true, status);\n        try {\n            if (value == null) {\n                prop.internalSetValue(null, type);"
            },
            {
              "step": 5,
              "variableName": "Name name",
              "startLine": 390,
              "startColumn": 61,
              "endLine": 390,
              "endColumn": 70,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/NodeImpl.java",
              "type": "Name",
              "code": "     *                                      could be found\n     * @throws RepositoryException          if another error occurs\n     */\n    protected synchronized PropertyImpl getOrCreateProperty(Name name, int type,\n                                                            boolean multiValued,\n                                                            boolean exactTypeMatch,\n                                                            BitSet status)"
            },
            {
              "step": 6,
              "variableName": "name",
              "startLine": 454,
              "startColumn": 44,
              "endLine": 454,
              "endColumn": 48,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/NodeImpl.java",
              "type": "Name",
              "code": "                state.setType(type);\n                getNodeState().addPropertyName(name);\n            } else {\n                prop = createChildProperty(name, type, def);\n            }\n            status.set(CREATED);\n            return prop;"
            },
            {
              "step": 7,
              "variableName": "Name name",
              "startLine": 473,
              "startColumn": 61,
              "endLine": 473,
              "endColumn": 70,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/NodeImpl.java",
              "type": "Name",
              "code": "     * @return the property instance.\n     * @throws RepositoryException if the property cannot be created.\n     */\n    protected synchronized PropertyImpl createChildProperty(Name name, int type,\n                                                            PropertyDefinitionImpl def)\n            throws RepositoryException {\n"
            },
            {
              "step": 8,
              "variableName": "msg",
              "startLine": 495,
              "startColumn": 23,
              "endLine": 495,
              "endColumn": 26,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/NodeImpl.java",
              "type": "",
              "code": "                    propState, data.getNodeState(), propDef);\n        } catch (ItemStateException ise) {\n            String msg = \"failed to add property \" + name + \" to \" + this;\n            log.debug(msg);\n            throw new RepositoryException(msg, ise);\n        }\n"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 10,
      "fileName": "NodeImpl.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "P_PASSWORD",
              "startLine": 782,
              "startColumn": 31,
              "endLine": 782,
              "endColumn": 41,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/user/UserManagerImpl.java",
              "type": "Name",
              "code": "        } else {\n            pwHash = password;\n        }\n        setProperty(userNode, P_PASSWORD, getValue(pwHash), userNode.isNew());\n    }\n\n    void setProtectedProperty(NodeImpl node, Name propName, Value value) throws RepositoryException, LockException, ConstraintViolationException, ItemExistsException, VersionException {"
            },
            {
              "step": 1,
              "variableName": "Name name",
              "startLine": 106,
              "startColumn": 57,
              "endLine": 106,
              "endColumn": 66,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/ProtectedItemModifier.java",
              "type": "Name",
              "code": "        return setProperty(parentImpl, name, value, false);\n    }\n\n    protected Property setProperty(NodeImpl parentImpl, Name name, Value value, boolean ignorePermissions) throws RepositoryException {\n        if (!ignorePermissions) {\n            checkPermission(parentImpl, name, getPermission(false, false));\n        }"
            },
            {
              "step": 2,
              "variableName": "name",
              "startLine": 113,
              "startColumn": 47,
              "endLine": 113,
              "endColumn": 51,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/ProtectedItemModifier.java",
              "type": "Name",
              "code": "        // validation: make sure Node is not locked or checked-in.\n        parentImpl.checkSetProperty();\n        InternalValue intVs = InternalValue.create(value, parentImpl.sessionContext);\n        return parentImpl.internalSetProperty(name, intVs);\n    }\n\n    protected Property setProperty(NodeImpl parentImpl, Name name, Value[] values) throws RepositoryException {"
            },
            {
              "step": 3,
              "variableName": "Name name",
              "startLine": 1000,
              "startColumn": 44,
              "endLine": 1000,
              "endColumn": 53,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/NodeImpl.java",
              "type": "Name",
              "code": "     * @throws ValueFormatException\n     * @throws RepositoryException\n     */\n    protected Property internalSetProperty(Name name, InternalValue value)\n            throws ValueFormatException, RepositoryException {\n        int type;\n        if (value == null) {"
            },
            {
              "step": 4,
              "variableName": "name",
              "startLine": 1020,
              "startColumn": 37,
              "endLine": 1020,
              "endColumn": 41,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/NodeImpl.java",
              "type": "Name",
              "code": "        } catch (RepositoryException re) {\n            if (status.get(CREATED)) {\n                // setting value failed, get rid of newly created property\n                removeChildProperty(name);\n            }\n            // rethrow\n            throw re;"
            },
            {
              "step": 5,
              "variableName": "Name propName",
              "startLine": 597,
              "startColumn": 40,
              "endLine": 597,
              "endColumn": 53,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/NodeImpl.java",
              "type": "Name",
              "code": "        }\n    }\n\n    protected void removeChildProperty(Name propName) throws RepositoryException {\n        // modify the state of 'this', i.e. the parent node\n        NodeState thisState = (NodeState) getOrCreateTransientItemState();\n"
            },
            {
              "step": 6,
              "variableName": "msg",
              "startLine": 604,
              "startColumn": 23,
              "endLine": 604,
              "endColumn": 26,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/NodeImpl.java",
              "type": "",
              "code": "        // remove the property entry\n        if (!thisState.removePropertyName(propName)) {\n            String msg = \"failed to remove property \" + propName + \" of \" + this;\n            log.debug(msg);\n            throw new RepositoryException(msg);\n        }\n"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 11,
      "fileName": "AbstractBundlePersistenceManager.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "lockToken",
              "startLine": 1279,
              "startColumn": 19,
              "endLine": 1279,
              "endColumn": 28,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "NodeId",
              "code": "         */\n        public InternalLockInfo(NodeId lockToken, boolean sessionScoped,\n                                boolean deep, String lockOwner, long timeoutHint) {\n            super(lockToken, sessionScoped, deep, lockOwner, timeoutHint);\n        }\n\n        /**"
            },
            {
              "step": 1,
              "variableName": "super(lockToken, sessionScoped, deep, lockOwner, timeoutHint);",
              "startLine": 1279,
              "startColumn": 13,
              "endLine": 1279,
              "endColumn": 75,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "         */\n        public InternalLockInfo(NodeId lockToken, boolean sessionScoped,\n                                boolean deep, String lockOwner, long timeoutHint) {\n            super(lockToken, sessionScoped, deep, lockOwner, timeoutHint);\n        }\n\n        /**"
            },
            {
              "step": 2,
              "variableName": "new InternalLockInfo(",
              "startLine": 340,
              "startColumn": 33,
              "endLine": 341,
              "endColumn": 83,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "\n        SessionImpl session = (SessionImpl) node.getSession();\n        String lockOwner = (ownerInfo != null) ? ownerInfo : session.getUserID();\n        InternalLockInfo info = new InternalLockInfo(\n                node.getNodeId(), isSessionScoped, isDeep, lockOwner, timeoutHint);\n\n        ClusterOperation operation = null;"
            },
            {
              "step": 3,
              "variableName": "info",
              "startLine": 370,
              "startColumn": 17,
              "endLine": 370,
              "endColumn": 21,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "            }\n            if (info.isDeep() && element.hasPath(path)\n                    && element.getChildrenCount() > 0) {\n                info.throwLockException(\"Some child node is locked\", session);\n            }\n\n            // create lock token"
            },
            {
              "step": 4,
              "variableName": "throwLockException",
              "startLine": 259,
              "startColumn": 17,
              "endLine": 259,
              "endColumn": 35,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockInfo.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "     * @throws LockException always thrown, unless another error occurs\n     * @throws RepositoryException if the path of this lock can not be resolved\n     */\n    public void throwLockException(String message, SessionImpl session)\n            throws LockException, RepositoryException {\n        String path;\n        try {"
            },
            {
              "step": 5,
              "variableName": "id",
              "startLine": 264,
              "startColumn": 59,
              "endLine": 264,
              "endColumn": 61,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockInfo.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "        String path;\n        try {\n            path = session.getJCRPath(\n                    session.getHierarchyManager().getPath(id));\n        } catch (RepositoryException ignored) {\n            path = null;\n        }"
            },
            {
              "step": 6,
              "variableName": "id",
              "startLine": 264,
              "startColumn": 59,
              "endLine": 264,
              "endColumn": 61,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockInfo.java",
              "type": "NodeId",
              "code": "        String path;\n        try {\n            path = session.getJCRPath(\n                    session.getHierarchyManager().getPath(id));\n        } catch (RepositoryException ignored) {\n            path = null;\n        }"
            },
            {
              "step": 7,
              "variableName": "ItemId id",
              "startLine": 252,
              "startColumn": 25,
              "endLine": 252,
              "endColumn": 34,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/CachingHierarchyManager.java",
              "type": "NodeId",
              "code": "     * Overridden method simply checks whether we have an item matching the id\n     * and returns its path, otherwise calls base implementation.\n     */\n    public Path getPath(ItemId id)\n            throws ItemNotFoundException, RepositoryException {\n\n        if (id.denotesNode()) {"
            },
            {
              "step": 8,
              "variableName": "id",
              "startLine": 267,
              "startColumn": 30,
              "endLine": 267,
              "endColumn": 32,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/CachingHierarchyManager.java",
              "type": "NodeId",
              "code": "                }\n            }\n        }\n        return super.getPath(id);\n    }\n\n    /**"
            },
            {
              "step": 9,
              "variableName": "ItemId id",
              "startLine": 392,
              "startColumn": 25,
              "endLine": 392,
              "endColumn": 34,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "    /**\n     * {@inheritDoc}\n     */\n    public Path getPath(ItemId id)\n            throws ItemNotFoundException, RepositoryException {\n        // shortcut\n        if (id.equals(rootNodeId)) {"
            },
            {
              "step": 10,
              "variableName": "id",
              "startLine": 402,
              "startColumn": 45,
              "endLine": 402,
              "endColumn": 47,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "        PathBuilder builder = new PathBuilder();\n\n        try {\n            buildPath(builder, getItemState(id), new CycleDetector());\n            return builder.getPath();\n        } catch (NoSuchItemStateException nsise) {\n            String msg = \"failed to build path of \" + id;"
            },
            {
              "step": 11,
              "variableName": "ItemId id",
              "startLine": 152,
              "startColumn": 38,
              "endLine": 152,
              "endColumn": 47,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "     * @throws ItemStateException       if an error occurs\n     * @see ZombieHierarchyManager#getItemState(ItemId)\n     */\n    protected ItemState getItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n        return provider.getItemState(id);\n    }"
            },
            {
              "step": 12,
              "variableName": "id",
              "startLine": 154,
              "startColumn": 38,
              "endLine": 154,
              "endColumn": 40,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "     */\n    protected ItemState getItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n        return provider.getItemState(id);\n    }\n\n    /**"
            },
            {
              "step": 13,
              "variableName": "ItemId id",
              "startLine": 258,
              "startColumn": 35,
              "endLine": 258,
              "endColumn": 44,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "    /**\n     * {@inheritDoc}\n     */\n    public ItemState getItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n        // check the virtual root ids (needed for overlay)\n        for (VirtualItemStateProvider virtualProvider : virtualProviders) {"
            },
            {
              "step": 14,
              "variableName": "id",
              "startLine": 271,
              "startColumn": 43,
              "endLine": 271,
              "endColumn": 45,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "        ISMLocking.ReadLock readLock = acquireReadLock(id);\n        try {\n            // check internal first\n            return getNonVirtualItemState(id);\n        } catch (NoSuchItemStateException e) {\n            // Fall through to virtual state providers. We can afford the\n            // exception-for-control-flow performance hit here, as almost"
            },
            {
              "step": 15,
              "variableName": "ItemId id",
              "startLine": 1767,
              "startColumn": 46,
              "endLine": 1767,
              "endColumn": 55,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "     * Returns the item state for the given id without considering virtual\n     * item state providers.\n     */\n    private ItemState getNonVirtualItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n        // First check if the item state is already in the cache\n        ItemState state = cache.retrieve(id);"
            },
            {
              "step": 16,
              "variableName": "id",
              "startLine": 1798,
              "startColumn": 35,
              "endLine": 1798,
              "endColumn": 37,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "        try {\n            // Load the item state from persistent storage\n            // NOTE: This needs to happen outside a synchronized block!\n            state = loadItemState(id);\n            state.setStatus(ItemState.STATUS_EXISTING);\n            state.setContainer(this);\n"
            },
            {
              "step": 17,
              "variableName": "ItemId id",
              "startLine": 1873,
              "startColumn": 37,
              "endLine": 1873,
              "endColumn": 46,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "     * @param id item id\n     * @return item state\n     */\n    private ItemState loadItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n\n        ItemState state;"
            },
            {
              "step": 18,
              "variableName": "(NodeId) id",
              "startLine": 1878,
              "startColumn": 37,
              "endLine": 1878,
              "endColumn": 48,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "\n        ItemState state;\n        if (id.denotesNode()) {\n            state = persistMgr.load((NodeId) id);\n        } else {\n            state = persistMgr.load((PropertyId) id);\n        }"
            },
            {
              "step": 19,
              "variableName": "NodeId id",
              "startLine": 489,
              "startColumn": 27,
              "endLine": 489,
              "endColumn": 36,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/bundle/AbstractBundlePersistenceManager.java",
              "type": "NodeId",
              "code": "     *\n     * Loads the state via the appropriate NodePropBundle.\n     */\n    public NodeState load(NodeId id) throws NoSuchItemStateException, ItemStateException {\n        NodePropBundle bundle = getBundle(id);\n        if (bundle == null) {\n            throw new NoSuchItemStateException(id.toString());"
            },
            {
              "step": 20,
              "variableName": "id",
              "startLine": 490,
              "startColumn": 43,
              "endLine": 490,
              "endColumn": 45,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/bundle/AbstractBundlePersistenceManager.java",
              "type": "NodeId",
              "code": "     * Loads the state via the appropriate NodePropBundle.\n     */\n    public NodeState load(NodeId id) throws NoSuchItemStateException, ItemStateException {\n        NodePropBundle bundle = getBundle(id);\n        if (bundle == null) {\n            throw new NoSuchItemStateException(id.toString());\n        }"
            },
            {
              "step": 21,
              "variableName": "NodeId id",
              "startLine": 740,
              "startColumn": 38,
              "endLine": 740,
              "endColumn": 47,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/bundle/AbstractBundlePersistenceManager.java",
              "type": "NodeId",
              "code": "     *\n     * @throws ItemStateException if an error occurs.\n     */\n    private NodePropBundle getBundle(NodeId id) throws ItemStateException {\n        NodePropBundle bundle = bundles.get(id);\n        readCounter.incrementAndGet();\n        if (bundle == MISSING) {"
            },
            {
              "step": 22,
              "variableName": "id",
              "startLine": 750,
              "startColumn": 35,
              "endLine": 750,
              "endColumn": 37,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/bundle/AbstractBundlePersistenceManager.java",
              "type": "NodeId",
              "code": "            return bundle;\n        }\n        // cache miss\n        return getBundleCacheMiss(id);\n    }\n\n    /**"
            },
            {
              "step": 23,
              "variableName": "NodeId id",
              "startLine": 763,
              "startColumn": 47,
              "endLine": 763,
              "endColumn": 56,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/bundle/AbstractBundlePersistenceManager.java",
              "type": "NodeId",
              "code": "     * @return\n     * @throws ItemStateException\n     */\n    private NodePropBundle getBundleCacheMiss(NodeId id)\n            throws ItemStateException {\n        long time = System.nanoTime();\n        NodePropBundle bundle = loadBundle(id);"
            },
            {
              "step": 24,
              "variableName": "id",
              "startLine": 770,
              "startColumn": 47,
              "endLine": 770,
              "endColumn": 49,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/bundle/AbstractBundlePersistenceManager.java",
              "type": "",
              "code": "        time = System.nanoTime() - time;\n        cacheMissDuration.addAndGet(time);\n        final long timeMs = time / 1000000;\n        log.debug(\"Loaded bundle {} in {}ms\", id, timeMs);\n        cacheMissCounter.incrementAndGet();\n        if (bundle != null) {\n            bundle.markOld();"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "lockToken",
              "startLine": 1279,
              "startColumn": 19,
              "endLine": 1279,
              "endColumn": 28,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "NodeId",
              "code": "         */\n        public InternalLockInfo(NodeId lockToken, boolean sessionScoped,\n                                boolean deep, String lockOwner, long timeoutHint) {\n            super(lockToken, sessionScoped, deep, lockOwner, timeoutHint);\n        }\n\n        /**"
            },
            {
              "step": 1,
              "variableName": "super(lockToken, sessionScoped, deep, lockOwner, timeoutHint);",
              "startLine": 1279,
              "startColumn": 13,
              "endLine": 1279,
              "endColumn": 75,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "         */\n        public InternalLockInfo(NodeId lockToken, boolean sessionScoped,\n                                boolean deep, String lockOwner, long timeoutHint) {\n            super(lockToken, sessionScoped, deep, lockOwner, timeoutHint);\n        }\n\n        /**"
            },
            {
              "step": 2,
              "variableName": "new InternalLockInfo(",
              "startLine": 340,
              "startColumn": 33,
              "endLine": 341,
              "endColumn": 83,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "\n        SessionImpl session = (SessionImpl) node.getSession();\n        String lockOwner = (ownerInfo != null) ? ownerInfo : session.getUserID();\n        InternalLockInfo info = new InternalLockInfo(\n                node.getNodeId(), isSessionScoped, isDeep, lockOwner, timeoutHint);\n\n        ClusterOperation operation = null;"
            },
            {
              "step": 3,
              "variableName": "info",
              "startLine": 370,
              "startColumn": 17,
              "endLine": 370,
              "endColumn": 21,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "            }\n            if (info.isDeep() && element.hasPath(path)\n                    && element.getChildrenCount() > 0) {\n                info.throwLockException(\"Some child node is locked\", session);\n            }\n\n            // create lock token"
            },
            {
              "step": 4,
              "variableName": "throwLockException",
              "startLine": 259,
              "startColumn": 17,
              "endLine": 259,
              "endColumn": 35,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockInfo.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "     * @throws LockException always thrown, unless another error occurs\n     * @throws RepositoryException if the path of this lock can not be resolved\n     */\n    public void throwLockException(String message, SessionImpl session)\n            throws LockException, RepositoryException {\n        String path;\n        try {"
            },
            {
              "step": 5,
              "variableName": "id",
              "startLine": 264,
              "startColumn": 59,
              "endLine": 264,
              "endColumn": 61,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockInfo.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "        String path;\n        try {\n            path = session.getJCRPath(\n                    session.getHierarchyManager().getPath(id));\n        } catch (RepositoryException ignored) {\n            path = null;\n        }"
            },
            {
              "step": 6,
              "variableName": "id",
              "startLine": 264,
              "startColumn": 59,
              "endLine": 264,
              "endColumn": 61,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockInfo.java",
              "type": "NodeId",
              "code": "        String path;\n        try {\n            path = session.getJCRPath(\n                    session.getHierarchyManager().getPath(id));\n        } catch (RepositoryException ignored) {\n            path = null;\n        }"
            },
            {
              "step": 7,
              "variableName": "ItemId id",
              "startLine": 252,
              "startColumn": 25,
              "endLine": 252,
              "endColumn": 34,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/CachingHierarchyManager.java",
              "type": "NodeId",
              "code": "     * Overridden method simply checks whether we have an item matching the id\n     * and returns its path, otherwise calls base implementation.\n     */\n    public Path getPath(ItemId id)\n            throws ItemNotFoundException, RepositoryException {\n\n        if (id.denotesNode()) {"
            },
            {
              "step": 8,
              "variableName": "id",
              "startLine": 267,
              "startColumn": 30,
              "endLine": 267,
              "endColumn": 32,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/CachingHierarchyManager.java",
              "type": "NodeId",
              "code": "                }\n            }\n        }\n        return super.getPath(id);\n    }\n\n    /**"
            },
            {
              "step": 9,
              "variableName": "ItemId id",
              "startLine": 392,
              "startColumn": 25,
              "endLine": 392,
              "endColumn": 34,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "    /**\n     * {@inheritDoc}\n     */\n    public Path getPath(ItemId id)\n            throws ItemNotFoundException, RepositoryException {\n        // shortcut\n        if (id.equals(rootNodeId)) {"
            },
            {
              "step": 10,
              "variableName": "id",
              "startLine": 402,
              "startColumn": 45,
              "endLine": 402,
              "endColumn": 47,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "        PathBuilder builder = new PathBuilder();\n\n        try {\n            buildPath(builder, getItemState(id), new CycleDetector());\n            return builder.getPath();\n        } catch (NoSuchItemStateException nsise) {\n            String msg = \"failed to build path of \" + id;"
            },
            {
              "step": 11,
              "variableName": "ItemId id",
              "startLine": 152,
              "startColumn": 38,
              "endLine": 152,
              "endColumn": 47,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "     * @throws ItemStateException       if an error occurs\n     * @see ZombieHierarchyManager#getItemState(ItemId)\n     */\n    protected ItemState getItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n        return provider.getItemState(id);\n    }"
            },
            {
              "step": 12,
              "variableName": "id",
              "startLine": 154,
              "startColumn": 38,
              "endLine": 154,
              "endColumn": 40,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "     */\n    protected ItemState getItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n        return provider.getItemState(id);\n    }\n\n    /**"
            },
            {
              "step": 13,
              "variableName": "ItemId id",
              "startLine": 239,
              "startColumn": 35,
              "endLine": 239,
              "endColumn": 44,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/XAItemStateManager.java",
              "type": "NodeId",
              "code": "     * the transactional change log. Fallback is always the call to the base\n     * class.\n     */\n    public ItemState getItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n\n        if (virtualProvider != null && virtualProvider.hasItemState(id)) {"
            },
            {
              "step": 14,
              "variableName": "id",
              "startLine": 242,
              "startColumn": 69,
              "endLine": 242,
              "endColumn": 71,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/XAItemStateManager.java",
              "type": "NodeId",
              "code": "    public ItemState getItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n\n        if (virtualProvider != null && virtualProvider.hasItemState(id)) {\n            return virtualProvider.getItemState(id);\n        }\n        // 1) check local changes"
            },
            {
              "step": 15,
              "variableName": "ItemId id",
              "startLine": 140,
              "startColumn": 33,
              "endLine": 140,
              "endColumn": 42,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/VersionItemStateProvider.java",
              "type": "NodeId",
              "code": "    /**\n     * @inheritDoc\n     */\n    public boolean hasItemState(ItemId id) {\n        return items.get(id) != null || stateMgr.hasItemState(id);\n    }\n"
            },
            {
              "step": 16,
              "variableName": "id",
              "startLine": 141,
              "startColumn": 63,
              "endLine": 141,
              "endColumn": 65,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/VersionItemStateProvider.java",
              "type": "NodeId",
              "code": "     * @inheritDoc\n     */\n    public boolean hasItemState(ItemId id) {\n        return items.get(id) != null || stateMgr.hasItemState(id);\n    }\n\n    /**"
            },
            {
              "step": 17,
              "variableName": "ItemId id",
              "startLine": 296,
              "startColumn": 33,
              "endLine": 296,
              "endColumn": 42,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "    /**\n     * {@inheritDoc}\n     */\n    public boolean hasItemState(ItemId id) {\n        // check the virtual root ids (needed for overlay)\n        for (VirtualItemStateProvider virtualProvider : virtualProviders) {\n            if (virtualProvider.isVirtualRoot(id)) {"
            },
            {
              "step": 18,
              "variableName": "id",
              "startLine": 317,
              "startColumn": 40,
              "endLine": 317,
              "endColumn": 42,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "            }\n\n            // check if this manager has the item state\n            if (hasNonVirtualItemState(id)) {\n                return true;\n            }\n        } finally {"
            },
            {
              "step": 19,
              "variableName": "ItemId id",
              "startLine": 1820,
              "startColumn": 46,
              "endLine": 1820,
              "endColumn": 55,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "     * Checks if this item state manager has the given item state without\n     * considering the virtual item state managers.\n     */\n    protected boolean hasNonVirtualItemState(ItemId id) {\n        if (cache.isCached(id)) {\n            return true;\n        }"
            },
            {
              "step": 20,
              "variableName": "(NodeId) id",
              "startLine": 1827,
              "startColumn": 42,
              "endLine": 1827,
              "endColumn": 53,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "\n        try {\n            if (id.denotesNode()) {\n                return persistMgr.exists((NodeId) id);\n            } else {\n                return persistMgr.exists((PropertyId) id);\n            }"
            },
            {
              "step": 21,
              "variableName": "NodeId id",
              "startLine": 561,
              "startColumn": 27,
              "endLine": 561,
              "endColumn": 36,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/bundle/AbstractBundlePersistenceManager.java",
              "type": "NodeId",
              "code": "     *\n     * Checks the existence via the appropriate NodePropBundle.\n     */\n    public boolean exists(NodeId id) throws ItemStateException {\n        // anticipating a load followed by a exists\n        return getBundle(id) != null;\n    }"
            },
            {
              "step": 22,
              "variableName": "id",
              "startLine": 563,
              "startColumn": 26,
              "endLine": 563,
              "endColumn": 28,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/bundle/AbstractBundlePersistenceManager.java",
              "type": "NodeId",
              "code": "     */\n    public boolean exists(NodeId id) throws ItemStateException {\n        // anticipating a load followed by a exists\n        return getBundle(id) != null;\n    }\n\n    /**"
            },
            {
              "step": 23,
              "variableName": "NodeId id",
              "startLine": 740,
              "startColumn": 38,
              "endLine": 740,
              "endColumn": 47,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/bundle/AbstractBundlePersistenceManager.java",
              "type": "NodeId",
              "code": "     *\n     * @throws ItemStateException if an error occurs.\n     */\n    private NodePropBundle getBundle(NodeId id) throws ItemStateException {\n        NodePropBundle bundle = bundles.get(id);\n        readCounter.incrementAndGet();\n        if (bundle == MISSING) {"
            },
            {
              "step": 24,
              "variableName": "id",
              "startLine": 750,
              "startColumn": 35,
              "endLine": 750,
              "endColumn": 37,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/bundle/AbstractBundlePersistenceManager.java",
              "type": "NodeId",
              "code": "            return bundle;\n        }\n        // cache miss\n        return getBundleCacheMiss(id);\n    }\n\n    /**"
            },
            {
              "step": 25,
              "variableName": "NodeId id",
              "startLine": 763,
              "startColumn": 47,
              "endLine": 763,
              "endColumn": 56,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/bundle/AbstractBundlePersistenceManager.java",
              "type": "NodeId",
              "code": "     * @return\n     * @throws ItemStateException\n     */\n    private NodePropBundle getBundleCacheMiss(NodeId id)\n            throws ItemStateException {\n        long time = System.nanoTime();\n        NodePropBundle bundle = loadBundle(id);"
            },
            {
              "step": 26,
              "variableName": "id",
              "startLine": 770,
              "startColumn": 47,
              "endLine": 770,
              "endColumn": 49,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/bundle/AbstractBundlePersistenceManager.java",
              "type": "",
              "code": "        time = System.nanoTime() - time;\n        cacheMissDuration.addAndGet(time);\n        final long timeMs = time / 1000000;\n        log.debug(\"Loaded bundle {} in {}ms\", id, timeMs);\n        cacheMissCounter.incrementAndGet();\n        if (bundle != null) {\n            bundle.markOld();"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "lockToken",
              "startLine": 1279,
              "startColumn": 19,
              "endLine": 1279,
              "endColumn": 28,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "NodeId",
              "code": "         */\n        public InternalLockInfo(NodeId lockToken, boolean sessionScoped,\n                                boolean deep, String lockOwner, long timeoutHint) {\n            super(lockToken, sessionScoped, deep, lockOwner, timeoutHint);\n        }\n\n        /**"
            },
            {
              "step": 1,
              "variableName": "super(lockToken, sessionScoped, deep, lockOwner, timeoutHint);",
              "startLine": 1279,
              "startColumn": 13,
              "endLine": 1279,
              "endColumn": 75,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "         */\n        public InternalLockInfo(NodeId lockToken, boolean sessionScoped,\n                                boolean deep, String lockOwner, long timeoutHint) {\n            super(lockToken, sessionScoped, deep, lockOwner, timeoutHint);\n        }\n\n        /**"
            },
            {
              "step": 2,
              "variableName": "new InternalLockInfo(",
              "startLine": 340,
              "startColumn": 33,
              "endLine": 341,
              "endColumn": 83,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "\n        SessionImpl session = (SessionImpl) node.getSession();\n        String lockOwner = (ownerInfo != null) ? ownerInfo : session.getUserID();\n        InternalLockInfo info = new InternalLockInfo(\n                node.getNodeId(), isSessionScoped, isDeep, lockOwner, timeoutHint);\n\n        ClusterOperation operation = null;"
            },
            {
              "step": 3,
              "variableName": "info",
              "startLine": 370,
              "startColumn": 17,
              "endLine": 370,
              "endColumn": 21,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "            }\n            if (info.isDeep() && element.hasPath(path)\n                    && element.getChildrenCount() > 0) {\n                info.throwLockException(\"Some child node is locked\", session);\n            }\n\n            // create lock token"
            },
            {
              "step": 4,
              "variableName": "throwLockException",
              "startLine": 259,
              "startColumn": 17,
              "endLine": 259,
              "endColumn": 35,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockInfo.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "     * @throws LockException always thrown, unless another error occurs\n     * @throws RepositoryException if the path of this lock can not be resolved\n     */\n    public void throwLockException(String message, SessionImpl session)\n            throws LockException, RepositoryException {\n        String path;\n        try {"
            },
            {
              "step": 5,
              "variableName": "id",
              "startLine": 264,
              "startColumn": 59,
              "endLine": 264,
              "endColumn": 61,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockInfo.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "        String path;\n        try {\n            path = session.getJCRPath(\n                    session.getHierarchyManager().getPath(id));\n        } catch (RepositoryException ignored) {\n            path = null;\n        }"
            },
            {
              "step": 6,
              "variableName": "id",
              "startLine": 264,
              "startColumn": 59,
              "endLine": 264,
              "endColumn": 61,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockInfo.java",
              "type": "NodeId",
              "code": "        String path;\n        try {\n            path = session.getJCRPath(\n                    session.getHierarchyManager().getPath(id));\n        } catch (RepositoryException ignored) {\n            path = null;\n        }"
            },
            {
              "step": 7,
              "variableName": "ItemId id",
              "startLine": 252,
              "startColumn": 25,
              "endLine": 252,
              "endColumn": 34,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/CachingHierarchyManager.java",
              "type": "NodeId",
              "code": "     * Overridden method simply checks whether we have an item matching the id\n     * and returns its path, otherwise calls base implementation.\n     */\n    public Path getPath(ItemId id)\n            throws ItemNotFoundException, RepositoryException {\n\n        if (id.denotesNode()) {"
            },
            {
              "step": 8,
              "variableName": "id",
              "startLine": 267,
              "startColumn": 30,
              "endLine": 267,
              "endColumn": 32,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/CachingHierarchyManager.java",
              "type": "NodeId",
              "code": "                }\n            }\n        }\n        return super.getPath(id);\n    }\n\n    /**"
            },
            {
              "step": 9,
              "variableName": "ItemId id",
              "startLine": 392,
              "startColumn": 25,
              "endLine": 392,
              "endColumn": 34,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "    /**\n     * {@inheritDoc}\n     */\n    public Path getPath(ItemId id)\n            throws ItemNotFoundException, RepositoryException {\n        // shortcut\n        if (id.equals(rootNodeId)) {"
            },
            {
              "step": 10,
              "variableName": "id",
              "startLine": 402,
              "startColumn": 45,
              "endLine": 402,
              "endColumn": 47,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "        PathBuilder builder = new PathBuilder();\n\n        try {\n            buildPath(builder, getItemState(id), new CycleDetector());\n            return builder.getPath();\n        } catch (NoSuchItemStateException nsise) {\n            String msg = \"failed to build path of \" + id;"
            },
            {
              "step": 11,
              "variableName": "ItemId id",
              "startLine": 152,
              "startColumn": 38,
              "endLine": 152,
              "endColumn": 47,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "     * @throws ItemStateException       if an error occurs\n     * @see ZombieHierarchyManager#getItemState(ItemId)\n     */\n    protected ItemState getItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n        return provider.getItemState(id);\n    }"
            },
            {
              "step": 12,
              "variableName": "id",
              "startLine": 154,
              "startColumn": 38,
              "endLine": 154,
              "endColumn": 40,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "     */\n    protected ItemState getItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n        return provider.getItemState(id);\n    }\n\n    /**"
            },
            {
              "step": 13,
              "variableName": "ItemId id",
              "startLine": 160,
              "startColumn": 35,
              "endLine": 160,
              "endColumn": 44,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/LocalItemStateManager.java",
              "type": "NodeId",
              "code": "    /**\n     * {@inheritDoc}\n     */\n    public ItemState getItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n\n        // check change log"
            },
            {
              "step": 14,
              "variableName": "(NodeId) id",
              "startLine": 175,
              "startColumn": 42,
              "endLine": 175,
              "endColumn": 53,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/LocalItemStateManager.java",
              "type": "NodeId",
              "code": "            if (state == null) {\n                // regular behaviour\n                if (id.denotesNode()) {\n                    state = getNodeState((NodeId) id);\n                } else {\n                    state = getPropertyState((PropertyId) id);\n                }"
            },
            {
              "step": 15,
              "variableName": "NodeId id",
              "startLine": 106,
              "startColumn": 38,
              "endLine": 106,
              "endColumn": 47,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/LocalItemStateManager.java",
              "type": "NodeId",
              "code": "     * @throws NoSuchItemStateException\n     * @throws ItemStateException\n     */\n    protected NodeState getNodeState(NodeId id)\n            throws NoSuchItemStateException, ItemStateException {\n\n        // load from parent manager and wrap"
            },
            {
              "step": 16,
              "variableName": "id",
              "startLine": 110,
              "startColumn": 67,
              "endLine": 110,
              "endColumn": 69,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/LocalItemStateManager.java",
              "type": "NodeId",
              "code": "            throws NoSuchItemStateException, ItemStateException {\n\n        // load from parent manager and wrap\n        NodeState state = (NodeState) sharedStateMgr.getItemState(id);\n        state = new NodeState(state, state.getStatus(), false);\n\n        // put it in cache"
            },
            {
              "step": 17,
              "variableName": "ItemId id",
              "startLine": 258,
              "startColumn": 35,
              "endLine": 258,
              "endColumn": 44,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "    /**\n     * {@inheritDoc}\n     */\n    public ItemState getItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n        // check the virtual root ids (needed for overlay)\n        for (VirtualItemStateProvider virtualProvider : virtualProviders) {"
            },
            {
              "step": 18,
              "variableName": "id",
              "startLine": 271,
              "startColumn": 43,
              "endLine": 271,
              "endColumn": 45,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "        ISMLocking.ReadLock readLock = acquireReadLock(id);\n        try {\n            // check internal first\n            return getNonVirtualItemState(id);\n        } catch (NoSuchItemStateException e) {\n            // Fall through to virtual state providers. We can afford the\n            // exception-for-control-flow performance hit here, as almost"
            },
            {
              "step": 19,
              "variableName": "ItemId id",
              "startLine": 1767,
              "startColumn": 46,
              "endLine": 1767,
              "endColumn": 55,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "     * Returns the item state for the given id without considering virtual\n     * item state providers.\n     */\n    private ItemState getNonVirtualItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n        // First check if the item state is already in the cache\n        ItemState state = cache.retrieve(id);"
            },
            {
              "step": 20,
              "variableName": "id",
              "startLine": 1798,
              "startColumn": 35,
              "endLine": 1798,
              "endColumn": 37,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "        try {\n            // Load the item state from persistent storage\n            // NOTE: This needs to happen outside a synchronized block!\n            state = loadItemState(id);\n            state.setStatus(ItemState.STATUS_EXISTING);\n            state.setContainer(this);\n"
            },
            {
              "step": 21,
              "variableName": "ItemId id",
              "startLine": 1873,
              "startColumn": 37,
              "endLine": 1873,
              "endColumn": 46,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "     * @param id item id\n     * @return item state\n     */\n    private ItemState loadItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n\n        ItemState state;"
            },
            {
              "step": 22,
              "variableName": "(NodeId) id",
              "startLine": 1878,
              "startColumn": 37,
              "endLine": 1878,
              "endColumn": 48,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "\n        ItemState state;\n        if (id.denotesNode()) {\n            state = persistMgr.load((NodeId) id);\n        } else {\n            state = persistMgr.load((PropertyId) id);\n        }"
            },
            {
              "step": 23,
              "variableName": "NodeId id",
              "startLine": 489,
              "startColumn": 27,
              "endLine": 489,
              "endColumn": 36,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/bundle/AbstractBundlePersistenceManager.java",
              "type": "NodeId",
              "code": "     *\n     * Loads the state via the appropriate NodePropBundle.\n     */\n    public NodeState load(NodeId id) throws NoSuchItemStateException, ItemStateException {\n        NodePropBundle bundle = getBundle(id);\n        if (bundle == null) {\n            throw new NoSuchItemStateException(id.toString());"
            },
            {
              "step": 24,
              "variableName": "id",
              "startLine": 490,
              "startColumn": 43,
              "endLine": 490,
              "endColumn": 45,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/bundle/AbstractBundlePersistenceManager.java",
              "type": "NodeId",
              "code": "     * Loads the state via the appropriate NodePropBundle.\n     */\n    public NodeState load(NodeId id) throws NoSuchItemStateException, ItemStateException {\n        NodePropBundle bundle = getBundle(id);\n        if (bundle == null) {\n            throw new NoSuchItemStateException(id.toString());\n        }"
            },
            {
              "step": 25,
              "variableName": "NodeId id",
              "startLine": 740,
              "startColumn": 38,
              "endLine": 740,
              "endColumn": 47,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/bundle/AbstractBundlePersistenceManager.java",
              "type": "NodeId",
              "code": "     *\n     * @throws ItemStateException if an error occurs.\n     */\n    private NodePropBundle getBundle(NodeId id) throws ItemStateException {\n        NodePropBundle bundle = bundles.get(id);\n        readCounter.incrementAndGet();\n        if (bundle == MISSING) {"
            },
            {
              "step": 26,
              "variableName": "id",
              "startLine": 750,
              "startColumn": 35,
              "endLine": 750,
              "endColumn": 37,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/bundle/AbstractBundlePersistenceManager.java",
              "type": "NodeId",
              "code": "            return bundle;\n        }\n        // cache miss\n        return getBundleCacheMiss(id);\n    }\n\n    /**"
            },
            {
              "step": 27,
              "variableName": "NodeId id",
              "startLine": 763,
              "startColumn": 47,
              "endLine": 763,
              "endColumn": 56,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/bundle/AbstractBundlePersistenceManager.java",
              "type": "NodeId",
              "code": "     * @return\n     * @throws ItemStateException\n     */\n    private NodePropBundle getBundleCacheMiss(NodeId id)\n            throws ItemStateException {\n        long time = System.nanoTime();\n        NodePropBundle bundle = loadBundle(id);"
            },
            {
              "step": 28,
              "variableName": "id",
              "startLine": 770,
              "startColumn": 47,
              "endLine": 770,
              "endColumn": 49,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/bundle/AbstractBundlePersistenceManager.java",
              "type": "",
              "code": "        time = System.nanoTime() - time;\n        cacheMissDuration.addAndGet(time);\n        final long timeMs = time / 1000000;\n        log.debug(\"Loaded bundle {} in {}ms\", id, timeMs);\n        cacheMissCounter.incrementAndGet();\n        if (bundle != null) {\n            bundle.markOld();"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "lockToken",
              "startLine": 1279,
              "startColumn": 19,
              "endLine": 1279,
              "endColumn": 28,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "NodeId",
              "code": "         */\n        public InternalLockInfo(NodeId lockToken, boolean sessionScoped,\n                                boolean deep, String lockOwner, long timeoutHint) {\n            super(lockToken, sessionScoped, deep, lockOwner, timeoutHint);\n        }\n\n        /**"
            },
            {
              "step": 1,
              "variableName": "super(lockToken, sessionScoped, deep, lockOwner, timeoutHint);",
              "startLine": 1279,
              "startColumn": 13,
              "endLine": 1279,
              "endColumn": 75,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "         */\n        public InternalLockInfo(NodeId lockToken, boolean sessionScoped,\n                                boolean deep, String lockOwner, long timeoutHint) {\n            super(lockToken, sessionScoped, deep, lockOwner, timeoutHint);\n        }\n\n        /**"
            },
            {
              "step": 2,
              "variableName": "new InternalLockInfo(",
              "startLine": 340,
              "startColumn": 33,
              "endLine": 341,
              "endColumn": 83,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "\n        SessionImpl session = (SessionImpl) node.getSession();\n        String lockOwner = (ownerInfo != null) ? ownerInfo : session.getUserID();\n        InternalLockInfo info = new InternalLockInfo(\n                node.getNodeId(), isSessionScoped, isDeep, lockOwner, timeoutHint);\n\n        ClusterOperation operation = null;"
            },
            {
              "step": 3,
              "variableName": "info",
              "startLine": 370,
              "startColumn": 17,
              "endLine": 370,
              "endColumn": 21,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "            }\n            if (info.isDeep() && element.hasPath(path)\n                    && element.getChildrenCount() > 0) {\n                info.throwLockException(\"Some child node is locked\", session);\n            }\n\n            // create lock token"
            },
            {
              "step": 4,
              "variableName": "throwLockException",
              "startLine": 259,
              "startColumn": 17,
              "endLine": 259,
              "endColumn": 35,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockInfo.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "     * @throws LockException always thrown, unless another error occurs\n     * @throws RepositoryException if the path of this lock can not be resolved\n     */\n    public void throwLockException(String message, SessionImpl session)\n            throws LockException, RepositoryException {\n        String path;\n        try {"
            },
            {
              "step": 5,
              "variableName": "id",
              "startLine": 264,
              "startColumn": 59,
              "endLine": 264,
              "endColumn": 61,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockInfo.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "        String path;\n        try {\n            path = session.getJCRPath(\n                    session.getHierarchyManager().getPath(id));\n        } catch (RepositoryException ignored) {\n            path = null;\n        }"
            },
            {
              "step": 6,
              "variableName": "id",
              "startLine": 264,
              "startColumn": 59,
              "endLine": 264,
              "endColumn": 61,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockInfo.java",
              "type": "NodeId",
              "code": "        String path;\n        try {\n            path = session.getJCRPath(\n                    session.getHierarchyManager().getPath(id));\n        } catch (RepositoryException ignored) {\n            path = null;\n        }"
            },
            {
              "step": 7,
              "variableName": "ItemId id",
              "startLine": 252,
              "startColumn": 25,
              "endLine": 252,
              "endColumn": 34,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/CachingHierarchyManager.java",
              "type": "NodeId",
              "code": "     * Overridden method simply checks whether we have an item matching the id\n     * and returns its path, otherwise calls base implementation.\n     */\n    public Path getPath(ItemId id)\n            throws ItemNotFoundException, RepositoryException {\n\n        if (id.denotesNode()) {"
            },
            {
              "step": 8,
              "variableName": "id",
              "startLine": 267,
              "startColumn": 30,
              "endLine": 267,
              "endColumn": 32,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/CachingHierarchyManager.java",
              "type": "NodeId",
              "code": "                }\n            }\n        }\n        return super.getPath(id);\n    }\n\n    /**"
            },
            {
              "step": 9,
              "variableName": "ItemId id",
              "startLine": 392,
              "startColumn": 25,
              "endLine": 392,
              "endColumn": 34,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "    /**\n     * {@inheritDoc}\n     */\n    public Path getPath(ItemId id)\n            throws ItemNotFoundException, RepositoryException {\n        // shortcut\n        if (id.equals(rootNodeId)) {"
            },
            {
              "step": 10,
              "variableName": "id",
              "startLine": 402,
              "startColumn": 45,
              "endLine": 402,
              "endColumn": 47,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "        PathBuilder builder = new PathBuilder();\n\n        try {\n            buildPath(builder, getItemState(id), new CycleDetector());\n            return builder.getPath();\n        } catch (NoSuchItemStateException nsise) {\n            String msg = \"failed to build path of \" + id;"
            },
            {
              "step": 11,
              "variableName": "ItemId id",
              "startLine": 152,
              "startColumn": 38,
              "endLine": 152,
              "endColumn": 47,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "     * @throws ItemStateException       if an error occurs\n     * @see ZombieHierarchyManager#getItemState(ItemId)\n     */\n    protected ItemState getItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n        return provider.getItemState(id);\n    }"
            },
            {
              "step": 12,
              "variableName": "id",
              "startLine": 154,
              "startColumn": 38,
              "endLine": 154,
              "endColumn": 40,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "     */\n    protected ItemState getItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n        return provider.getItemState(id);\n    }\n\n    /**"
            },
            {
              "step": 13,
              "variableName": "ItemId id",
              "startLine": 132,
              "startColumn": 39,
              "endLine": 132,
              "endColumn": 48,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/observation/ChangeLogBasedHierarchyMgr.java",
              "type": "NodeId",
              "code": "         * <code>id</code>.\n         * @throws ItemStateException if any other error occurs.\n         */\n        public ItemState getItemState(ItemId id) throws NoSuchItemStateException, ItemStateException {\n            // check ChangeLog first\n            try {\n                ItemState state = changes.get(id);"
            },
            {
              "step": 14,
              "variableName": "id",
              "startLine": 142,
              "startColumn": 38,
              "endLine": 142,
              "endColumn": 40,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/observation/ChangeLogBasedHierarchyMgr.java",
              "type": "NodeId",
              "code": "            } catch (NoSuchItemStateException e) {\n                // item has been deleted, but we still return it by asking base\n            }\n            return base.getItemState(id);\n        }\n\n        /**"
            },
            {
              "step": 15,
              "variableName": "ItemId id",
              "startLine": 258,
              "startColumn": 35,
              "endLine": 258,
              "endColumn": 44,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "    /**\n     * {@inheritDoc}\n     */\n    public ItemState getItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n        // check the virtual root ids (needed for overlay)\n        for (VirtualItemStateProvider virtualProvider : virtualProviders) {"
            },
            {
              "step": 16,
              "variableName": "id",
              "startLine": 271,
              "startColumn": 43,
              "endLine": 271,
              "endColumn": 45,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "        ISMLocking.ReadLock readLock = acquireReadLock(id);\n        try {\n            // check internal first\n            return getNonVirtualItemState(id);\n        } catch (NoSuchItemStateException e) {\n            // Fall through to virtual state providers. We can afford the\n            // exception-for-control-flow performance hit here, as almost"
            },
            {
              "step": 17,
              "variableName": "ItemId id",
              "startLine": 1767,
              "startColumn": 46,
              "endLine": 1767,
              "endColumn": 55,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "     * Returns the item state for the given id without considering virtual\n     * item state providers.\n     */\n    private ItemState getNonVirtualItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n        // First check if the item state is already in the cache\n        ItemState state = cache.retrieve(id);"
            },
            {
              "step": 18,
              "variableName": "id",
              "startLine": 1798,
              "startColumn": 35,
              "endLine": 1798,
              "endColumn": 37,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "        try {\n            // Load the item state from persistent storage\n            // NOTE: This needs to happen outside a synchronized block!\n            state = loadItemState(id);\n            state.setStatus(ItemState.STATUS_EXISTING);\n            state.setContainer(this);\n"
            },
            {
              "step": 19,
              "variableName": "ItemId id",
              "startLine": 1873,
              "startColumn": 37,
              "endLine": 1873,
              "endColumn": 46,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "     * @param id item id\n     * @return item state\n     */\n    private ItemState loadItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n\n        ItemState state;"
            },
            {
              "step": 20,
              "variableName": "(NodeId) id",
              "startLine": 1878,
              "startColumn": 37,
              "endLine": 1878,
              "endColumn": 48,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "\n        ItemState state;\n        if (id.denotesNode()) {\n            state = persistMgr.load((NodeId) id);\n        } else {\n            state = persistMgr.load((PropertyId) id);\n        }"
            },
            {
              "step": 21,
              "variableName": "NodeId id",
              "startLine": 489,
              "startColumn": 27,
              "endLine": 489,
              "endColumn": 36,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/bundle/AbstractBundlePersistenceManager.java",
              "type": "NodeId",
              "code": "     *\n     * Loads the state via the appropriate NodePropBundle.\n     */\n    public NodeState load(NodeId id) throws NoSuchItemStateException, ItemStateException {\n        NodePropBundle bundle = getBundle(id);\n        if (bundle == null) {\n            throw new NoSuchItemStateException(id.toString());"
            },
            {
              "step": 22,
              "variableName": "id",
              "startLine": 490,
              "startColumn": 43,
              "endLine": 490,
              "endColumn": 45,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/bundle/AbstractBundlePersistenceManager.java",
              "type": "NodeId",
              "code": "     * Loads the state via the appropriate NodePropBundle.\n     */\n    public NodeState load(NodeId id) throws NoSuchItemStateException, ItemStateException {\n        NodePropBundle bundle = getBundle(id);\n        if (bundle == null) {\n            throw new NoSuchItemStateException(id.toString());\n        }"
            },
            {
              "step": 23,
              "variableName": "NodeId id",
              "startLine": 740,
              "startColumn": 38,
              "endLine": 740,
              "endColumn": 47,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/bundle/AbstractBundlePersistenceManager.java",
              "type": "NodeId",
              "code": "     *\n     * @throws ItemStateException if an error occurs.\n     */\n    private NodePropBundle getBundle(NodeId id) throws ItemStateException {\n        NodePropBundle bundle = bundles.get(id);\n        readCounter.incrementAndGet();\n        if (bundle == MISSING) {"
            },
            {
              "step": 24,
              "variableName": "id",
              "startLine": 750,
              "startColumn": 35,
              "endLine": 750,
              "endColumn": 37,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/bundle/AbstractBundlePersistenceManager.java",
              "type": "NodeId",
              "code": "            return bundle;\n        }\n        // cache miss\n        return getBundleCacheMiss(id);\n    }\n\n    /**"
            },
            {
              "step": 25,
              "variableName": "NodeId id",
              "startLine": 763,
              "startColumn": 47,
              "endLine": 763,
              "endColumn": 56,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/bundle/AbstractBundlePersistenceManager.java",
              "type": "NodeId",
              "code": "     * @return\n     * @throws ItemStateException\n     */\n    private NodePropBundle getBundleCacheMiss(NodeId id)\n            throws ItemStateException {\n        long time = System.nanoTime();\n        NodePropBundle bundle = loadBundle(id);"
            },
            {
              "step": 26,
              "variableName": "id",
              "startLine": 770,
              "startColumn": 47,
              "endLine": 770,
              "endColumn": 49,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/bundle/AbstractBundlePersistenceManager.java",
              "type": "",
              "code": "        time = System.nanoTime() - time;\n        cacheMissDuration.addAndGet(time);\n        final long timeMs = time / 1000000;\n        log.debug(\"Loaded bundle {} in {}ms\", id, timeMs);\n        cacheMissCounter.incrementAndGet();\n        if (bundle != null) {\n            bundle.markOld();"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 12,
      "fileName": "BundleFsPersistenceManager.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "lockToken",
              "startLine": 1279,
              "startColumn": 19,
              "endLine": 1279,
              "endColumn": 28,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "NodeId",
              "code": "         */\n        public InternalLockInfo(NodeId lockToken, boolean sessionScoped,\n                                boolean deep, String lockOwner, long timeoutHint) {\n            super(lockToken, sessionScoped, deep, lockOwner, timeoutHint);\n        }\n\n        /**"
            },
            {
              "step": 1,
              "variableName": "super(lockToken, sessionScoped, deep, lockOwner, timeoutHint);",
              "startLine": 1279,
              "startColumn": 13,
              "endLine": 1279,
              "endColumn": 75,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "         */\n        public InternalLockInfo(NodeId lockToken, boolean sessionScoped,\n                                boolean deep, String lockOwner, long timeoutHint) {\n            super(lockToken, sessionScoped, deep, lockOwner, timeoutHint);\n        }\n\n        /**"
            },
            {
              "step": 2,
              "variableName": "new InternalLockInfo(",
              "startLine": 340,
              "startColumn": 33,
              "endLine": 341,
              "endColumn": 83,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "\n        SessionImpl session = (SessionImpl) node.getSession();\n        String lockOwner = (ownerInfo != null) ? ownerInfo : session.getUserID();\n        InternalLockInfo info = new InternalLockInfo(\n                node.getNodeId(), isSessionScoped, isDeep, lockOwner, timeoutHint);\n\n        ClusterOperation operation = null;"
            },
            {
              "step": 3,
              "variableName": "info",
              "startLine": 370,
              "startColumn": 17,
              "endLine": 370,
              "endColumn": 21,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "            }\n            if (info.isDeep() && element.hasPath(path)\n                    && element.getChildrenCount() > 0) {\n                info.throwLockException(\"Some child node is locked\", session);\n            }\n\n            // create lock token"
            },
            {
              "step": 4,
              "variableName": "throwLockException",
              "startLine": 259,
              "startColumn": 17,
              "endLine": 259,
              "endColumn": 35,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockInfo.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "     * @throws LockException always thrown, unless another error occurs\n     * @throws RepositoryException if the path of this lock can not be resolved\n     */\n    public void throwLockException(String message, SessionImpl session)\n            throws LockException, RepositoryException {\n        String path;\n        try {"
            },
            {
              "step": 5,
              "variableName": "id",
              "startLine": 264,
              "startColumn": 59,
              "endLine": 264,
              "endColumn": 61,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockInfo.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "        String path;\n        try {\n            path = session.getJCRPath(\n                    session.getHierarchyManager().getPath(id));\n        } catch (RepositoryException ignored) {\n            path = null;\n        }"
            },
            {
              "step": 6,
              "variableName": "id",
              "startLine": 264,
              "startColumn": 59,
              "endLine": 264,
              "endColumn": 61,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockInfo.java",
              "type": "NodeId",
              "code": "        String path;\n        try {\n            path = session.getJCRPath(\n                    session.getHierarchyManager().getPath(id));\n        } catch (RepositoryException ignored) {\n            path = null;\n        }"
            },
            {
              "step": 7,
              "variableName": "ItemId id",
              "startLine": 252,
              "startColumn": 25,
              "endLine": 252,
              "endColumn": 34,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/CachingHierarchyManager.java",
              "type": "NodeId",
              "code": "     * Overridden method simply checks whether we have an item matching the id\n     * and returns its path, otherwise calls base implementation.\n     */\n    public Path getPath(ItemId id)\n            throws ItemNotFoundException, RepositoryException {\n\n        if (id.denotesNode()) {"
            },
            {
              "step": 8,
              "variableName": "id",
              "startLine": 267,
              "startColumn": 30,
              "endLine": 267,
              "endColumn": 32,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/CachingHierarchyManager.java",
              "type": "NodeId",
              "code": "                }\n            }\n        }\n        return super.getPath(id);\n    }\n\n    /**"
            },
            {
              "step": 9,
              "variableName": "ItemId id",
              "startLine": 392,
              "startColumn": 25,
              "endLine": 392,
              "endColumn": 34,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "    /**\n     * {@inheritDoc}\n     */\n    public Path getPath(ItemId id)\n            throws ItemNotFoundException, RepositoryException {\n        // shortcut\n        if (id.equals(rootNodeId)) {"
            },
            {
              "step": 10,
              "variableName": "id",
              "startLine": 402,
              "startColumn": 45,
              "endLine": 402,
              "endColumn": 47,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "        PathBuilder builder = new PathBuilder();\n\n        try {\n            buildPath(builder, getItemState(id), new CycleDetector());\n            return builder.getPath();\n        } catch (NoSuchItemStateException nsise) {\n            String msg = \"failed to build path of \" + id;"
            },
            {
              "step": 11,
              "variableName": "ItemId id",
              "startLine": 152,
              "startColumn": 38,
              "endLine": 152,
              "endColumn": 47,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "     * @throws ItemStateException       if an error occurs\n     * @see ZombieHierarchyManager#getItemState(ItemId)\n     */\n    protected ItemState getItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n        return provider.getItemState(id);\n    }"
            },
            {
              "step": 12,
              "variableName": "id",
              "startLine": 154,
              "startColumn": 38,
              "endLine": 154,
              "endColumn": 40,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "     */\n    protected ItemState getItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n        return provider.getItemState(id);\n    }\n\n    /**"
            },
            {
              "step": 13,
              "variableName": "ItemId id",
              "startLine": 258,
              "startColumn": 35,
              "endLine": 258,
              "endColumn": 44,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "    /**\n     * {@inheritDoc}\n     */\n    public ItemState getItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n        // check the virtual root ids (needed for overlay)\n        for (VirtualItemStateProvider virtualProvider : virtualProviders) {"
            },
            {
              "step": 14,
              "variableName": "id",
              "startLine": 271,
              "startColumn": 43,
              "endLine": 271,
              "endColumn": 45,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "        ISMLocking.ReadLock readLock = acquireReadLock(id);\n        try {\n            // check internal first\n            return getNonVirtualItemState(id);\n        } catch (NoSuchItemStateException e) {\n            // Fall through to virtual state providers. We can afford the\n            // exception-for-control-flow performance hit here, as almost"
            },
            {
              "step": 15,
              "variableName": "ItemId id",
              "startLine": 1767,
              "startColumn": 46,
              "endLine": 1767,
              "endColumn": 55,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "     * Returns the item state for the given id without considering virtual\n     * item state providers.\n     */\n    private ItemState getNonVirtualItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n        // First check if the item state is already in the cache\n        ItemState state = cache.retrieve(id);"
            },
            {
              "step": 16,
              "variableName": "id",
              "startLine": 1798,
              "startColumn": 35,
              "endLine": 1798,
              "endColumn": 37,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "        try {\n            // Load the item state from persistent storage\n            // NOTE: This needs to happen outside a synchronized block!\n            state = loadItemState(id);\n            state.setStatus(ItemState.STATUS_EXISTING);\n            state.setContainer(this);\n"
            },
            {
              "step": 17,
              "variableName": "ItemId id",
              "startLine": 1873,
              "startColumn": 37,
              "endLine": 1873,
              "endColumn": 46,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "     * @param id item id\n     * @return item state\n     */\n    private ItemState loadItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n\n        ItemState state;"
            },
            {
              "step": 18,
              "variableName": "(NodeId) id",
              "startLine": 1878,
              "startColumn": 37,
              "endLine": 1878,
              "endColumn": 48,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "\n        ItemState state;\n        if (id.denotesNode()) {\n            state = persistMgr.load((NodeId) id);\n        } else {\n            state = persistMgr.load((PropertyId) id);\n        }"
            },
            {
              "step": 19,
              "variableName": "NodeId id",
              "startLine": 489,
              "startColumn": 27,
              "endLine": 489,
              "endColumn": 36,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/bundle/AbstractBundlePersistenceManager.java",
              "type": "NodeId",
              "code": "     *\n     * Loads the state via the appropriate NodePropBundle.\n     */\n    public NodeState load(NodeId id) throws NoSuchItemStateException, ItemStateException {\n        NodePropBundle bundle = getBundle(id);\n        if (bundle == null) {\n            throw new NoSuchItemStateException(id.toString());"
            },
            {
              "step": 20,
              "variableName": "id",
              "startLine": 490,
              "startColumn": 43,
              "endLine": 490,
              "endColumn": 45,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/bundle/AbstractBundlePersistenceManager.java",
              "type": "NodeId",
              "code": "     * Loads the state via the appropriate NodePropBundle.\n     */\n    public NodeState load(NodeId id) throws NoSuchItemStateException, ItemStateException {\n        NodePropBundle bundle = getBundle(id);\n        if (bundle == null) {\n            throw new NoSuchItemStateException(id.toString());\n        }"
            },
            {
              "step": 21,
              "variableName": "NodeId id",
              "startLine": 740,
              "startColumn": 38,
              "endLine": 740,
              "endColumn": 47,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/bundle/AbstractBundlePersistenceManager.java",
              "type": "NodeId",
              "code": "     *\n     * @throws ItemStateException if an error occurs.\n     */\n    private NodePropBundle getBundle(NodeId id) throws ItemStateException {\n        NodePropBundle bundle = bundles.get(id);\n        readCounter.incrementAndGet();\n        if (bundle == MISSING) {"
            },
            {
              "step": 22,
              "variableName": "id",
              "startLine": 750,
              "startColumn": 35,
              "endLine": 750,
              "endColumn": 37,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/bundle/AbstractBundlePersistenceManager.java",
              "type": "NodeId",
              "code": "            return bundle;\n        }\n        // cache miss\n        return getBundleCacheMiss(id);\n    }\n\n    /**"
            },
            {
              "step": 23,
              "variableName": "NodeId id",
              "startLine": 763,
              "startColumn": 47,
              "endLine": 763,
              "endColumn": 56,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/bundle/AbstractBundlePersistenceManager.java",
              "type": "NodeId",
              "code": "     * @return\n     * @throws ItemStateException\n     */\n    private NodePropBundle getBundleCacheMiss(NodeId id)\n            throws ItemStateException {\n        long time = System.nanoTime();\n        NodePropBundle bundle = loadBundle(id);"
            },
            {
              "step": 24,
              "variableName": "id",
              "startLine": 766,
              "startColumn": 44,
              "endLine": 766,
              "endColumn": 46,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/bundle/AbstractBundlePersistenceManager.java",
              "type": "NodeId",
              "code": "    private NodePropBundle getBundleCacheMiss(NodeId id)\n            throws ItemStateException {\n        long time = System.nanoTime();\n        NodePropBundle bundle = loadBundle(id);\n        time = System.nanoTime() - time;\n        cacheMissDuration.addAndGet(time);\n        final long timeMs = time / 1000000;"
            },
            {
              "step": 25,
              "variableName": "NodeId id",
              "startLine": 234,
              "startColumn": 41,
              "endLine": 234,
              "endColumn": 50,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/bundle/BundleFsPersistenceManager.java",
              "type": "NodeId",
              "code": "    /**\n     * {@inheritDoc}\n     */\n    protected NodePropBundle loadBundle(NodeId id) throws ItemStateException {\n        try {\n            String path = buildNodeFilePath(null, id).toString();\n            if (!itemFs.exists(path)) {"
            },
            {
              "step": 26,
              "variableName": "msg",
              "startLine": 248,
              "startColumn": 23,
              "endLine": 248,
              "endColumn": 26,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/bundle/BundleFsPersistenceManager.java",
              "type": "",
              "code": "            }\n        } catch (Exception e) {\n            String msg = \"failed to read bundle: \" + id + \": \" + e;\n            log.error(msg);\n            throw new ItemStateException(msg, e);\n        }\n    }"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "lockToken",
              "startLine": 1279,
              "startColumn": 19,
              "endLine": 1279,
              "endColumn": 28,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "NodeId",
              "code": "         */\n        public InternalLockInfo(NodeId lockToken, boolean sessionScoped,\n                                boolean deep, String lockOwner, long timeoutHint) {\n            super(lockToken, sessionScoped, deep, lockOwner, timeoutHint);\n        }\n\n        /**"
            },
            {
              "step": 1,
              "variableName": "super(lockToken, sessionScoped, deep, lockOwner, timeoutHint);",
              "startLine": 1279,
              "startColumn": 13,
              "endLine": 1279,
              "endColumn": 75,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "         */\n        public InternalLockInfo(NodeId lockToken, boolean sessionScoped,\n                                boolean deep, String lockOwner, long timeoutHint) {\n            super(lockToken, sessionScoped, deep, lockOwner, timeoutHint);\n        }\n\n        /**"
            },
            {
              "step": 2,
              "variableName": "new InternalLockInfo(",
              "startLine": 340,
              "startColumn": 33,
              "endLine": 341,
              "endColumn": 83,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "\n        SessionImpl session = (SessionImpl) node.getSession();\n        String lockOwner = (ownerInfo != null) ? ownerInfo : session.getUserID();\n        InternalLockInfo info = new InternalLockInfo(\n                node.getNodeId(), isSessionScoped, isDeep, lockOwner, timeoutHint);\n\n        ClusterOperation operation = null;"
            },
            {
              "step": 3,
              "variableName": "info",
              "startLine": 370,
              "startColumn": 17,
              "endLine": 370,
              "endColumn": 21,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "            }\n            if (info.isDeep() && element.hasPath(path)\n                    && element.getChildrenCount() > 0) {\n                info.throwLockException(\"Some child node is locked\", session);\n            }\n\n            // create lock token"
            },
            {
              "step": 4,
              "variableName": "throwLockException",
              "startLine": 259,
              "startColumn": 17,
              "endLine": 259,
              "endColumn": 35,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockInfo.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "     * @throws LockException always thrown, unless another error occurs\n     * @throws RepositoryException if the path of this lock can not be resolved\n     */\n    public void throwLockException(String message, SessionImpl session)\n            throws LockException, RepositoryException {\n        String path;\n        try {"
            },
            {
              "step": 5,
              "variableName": "id",
              "startLine": 264,
              "startColumn": 59,
              "endLine": 264,
              "endColumn": 61,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockInfo.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "        String path;\n        try {\n            path = session.getJCRPath(\n                    session.getHierarchyManager().getPath(id));\n        } catch (RepositoryException ignored) {\n            path = null;\n        }"
            },
            {
              "step": 6,
              "variableName": "id",
              "startLine": 264,
              "startColumn": 59,
              "endLine": 264,
              "endColumn": 61,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockInfo.java",
              "type": "NodeId",
              "code": "        String path;\n        try {\n            path = session.getJCRPath(\n                    session.getHierarchyManager().getPath(id));\n        } catch (RepositoryException ignored) {\n            path = null;\n        }"
            },
            {
              "step": 7,
              "variableName": "ItemId id",
              "startLine": 252,
              "startColumn": 25,
              "endLine": 252,
              "endColumn": 34,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/CachingHierarchyManager.java",
              "type": "NodeId",
              "code": "     * Overridden method simply checks whether we have an item matching the id\n     * and returns its path, otherwise calls base implementation.\n     */\n    public Path getPath(ItemId id)\n            throws ItemNotFoundException, RepositoryException {\n\n        if (id.denotesNode()) {"
            },
            {
              "step": 8,
              "variableName": "id",
              "startLine": 267,
              "startColumn": 30,
              "endLine": 267,
              "endColumn": 32,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/CachingHierarchyManager.java",
              "type": "NodeId",
              "code": "                }\n            }\n        }\n        return super.getPath(id);\n    }\n\n    /**"
            },
            {
              "step": 9,
              "variableName": "ItemId id",
              "startLine": 392,
              "startColumn": 25,
              "endLine": 392,
              "endColumn": 34,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "    /**\n     * {@inheritDoc}\n     */\n    public Path getPath(ItemId id)\n            throws ItemNotFoundException, RepositoryException {\n        // shortcut\n        if (id.equals(rootNodeId)) {"
            },
            {
              "step": 10,
              "variableName": "id",
              "startLine": 402,
              "startColumn": 45,
              "endLine": 402,
              "endColumn": 47,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "        PathBuilder builder = new PathBuilder();\n\n        try {\n            buildPath(builder, getItemState(id), new CycleDetector());\n            return builder.getPath();\n        } catch (NoSuchItemStateException nsise) {\n            String msg = \"failed to build path of \" + id;"
            },
            {
              "step": 11,
              "variableName": "ItemId id",
              "startLine": 152,
              "startColumn": 38,
              "endLine": 152,
              "endColumn": 47,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "     * @throws ItemStateException       if an error occurs\n     * @see ZombieHierarchyManager#getItemState(ItemId)\n     */\n    protected ItemState getItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n        return provider.getItemState(id);\n    }"
            },
            {
              "step": 12,
              "variableName": "id",
              "startLine": 154,
              "startColumn": 38,
              "endLine": 154,
              "endColumn": 40,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "     */\n    protected ItemState getItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n        return provider.getItemState(id);\n    }\n\n    /**"
            },
            {
              "step": 13,
              "variableName": "ItemId id",
              "startLine": 239,
              "startColumn": 35,
              "endLine": 239,
              "endColumn": 44,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/XAItemStateManager.java",
              "type": "NodeId",
              "code": "     * the transactional change log. Fallback is always the call to the base\n     * class.\n     */\n    public ItemState getItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n\n        if (virtualProvider != null && virtualProvider.hasItemState(id)) {"
            },
            {
              "step": 14,
              "variableName": "id",
              "startLine": 242,
              "startColumn": 69,
              "endLine": 242,
              "endColumn": 71,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/XAItemStateManager.java",
              "type": "NodeId",
              "code": "    public ItemState getItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n\n        if (virtualProvider != null && virtualProvider.hasItemState(id)) {\n            return virtualProvider.getItemState(id);\n        }\n        // 1) check local changes"
            },
            {
              "step": 15,
              "variableName": "ItemId id",
              "startLine": 140,
              "startColumn": 33,
              "endLine": 140,
              "endColumn": 42,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/VersionItemStateProvider.java",
              "type": "NodeId",
              "code": "    /**\n     * @inheritDoc\n     */\n    public boolean hasItemState(ItemId id) {\n        return items.get(id) != null || stateMgr.hasItemState(id);\n    }\n"
            },
            {
              "step": 16,
              "variableName": "id",
              "startLine": 141,
              "startColumn": 63,
              "endLine": 141,
              "endColumn": 65,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/VersionItemStateProvider.java",
              "type": "NodeId",
              "code": "     * @inheritDoc\n     */\n    public boolean hasItemState(ItemId id) {\n        return items.get(id) != null || stateMgr.hasItemState(id);\n    }\n\n    /**"
            },
            {
              "step": 17,
              "variableName": "ItemId id",
              "startLine": 296,
              "startColumn": 33,
              "endLine": 296,
              "endColumn": 42,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "    /**\n     * {@inheritDoc}\n     */\n    public boolean hasItemState(ItemId id) {\n        // check the virtual root ids (needed for overlay)\n        for (VirtualItemStateProvider virtualProvider : virtualProviders) {\n            if (virtualProvider.isVirtualRoot(id)) {"
            },
            {
              "step": 18,
              "variableName": "id",
              "startLine": 317,
              "startColumn": 40,
              "endLine": 317,
              "endColumn": 42,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "            }\n\n            // check if this manager has the item state\n            if (hasNonVirtualItemState(id)) {\n                return true;\n            }\n        } finally {"
            },
            {
              "step": 19,
              "variableName": "ItemId id",
              "startLine": 1820,
              "startColumn": 46,
              "endLine": 1820,
              "endColumn": 55,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "     * Checks if this item state manager has the given item state without\n     * considering the virtual item state managers.\n     */\n    protected boolean hasNonVirtualItemState(ItemId id) {\n        if (cache.isCached(id)) {\n            return true;\n        }"
            },
            {
              "step": 20,
              "variableName": "(NodeId) id",
              "startLine": 1827,
              "startColumn": 42,
              "endLine": 1827,
              "endColumn": 53,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "\n        try {\n            if (id.denotesNode()) {\n                return persistMgr.exists((NodeId) id);\n            } else {\n                return persistMgr.exists((PropertyId) id);\n            }"
            },
            {
              "step": 21,
              "variableName": "NodeId id",
              "startLine": 561,
              "startColumn": 27,
              "endLine": 561,
              "endColumn": 36,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/bundle/AbstractBundlePersistenceManager.java",
              "type": "NodeId",
              "code": "     *\n     * Checks the existence via the appropriate NodePropBundle.\n     */\n    public boolean exists(NodeId id) throws ItemStateException {\n        // anticipating a load followed by a exists\n        return getBundle(id) != null;\n    }"
            },
            {
              "step": 22,
              "variableName": "id",
              "startLine": 563,
              "startColumn": 26,
              "endLine": 563,
              "endColumn": 28,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/bundle/AbstractBundlePersistenceManager.java",
              "type": "NodeId",
              "code": "     */\n    public boolean exists(NodeId id) throws ItemStateException {\n        // anticipating a load followed by a exists\n        return getBundle(id) != null;\n    }\n\n    /**"
            },
            {
              "step": 23,
              "variableName": "NodeId id",
              "startLine": 740,
              "startColumn": 38,
              "endLine": 740,
              "endColumn": 47,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/bundle/AbstractBundlePersistenceManager.java",
              "type": "NodeId",
              "code": "     *\n     * @throws ItemStateException if an error occurs.\n     */\n    private NodePropBundle getBundle(NodeId id) throws ItemStateException {\n        NodePropBundle bundle = bundles.get(id);\n        readCounter.incrementAndGet();\n        if (bundle == MISSING) {"
            },
            {
              "step": 24,
              "variableName": "id",
              "startLine": 750,
              "startColumn": 35,
              "endLine": 750,
              "endColumn": 37,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/bundle/AbstractBundlePersistenceManager.java",
              "type": "NodeId",
              "code": "            return bundle;\n        }\n        // cache miss\n        return getBundleCacheMiss(id);\n    }\n\n    /**"
            },
            {
              "step": 25,
              "variableName": "NodeId id",
              "startLine": 763,
              "startColumn": 47,
              "endLine": 763,
              "endColumn": 56,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/bundle/AbstractBundlePersistenceManager.java",
              "type": "NodeId",
              "code": "     * @return\n     * @throws ItemStateException\n     */\n    private NodePropBundle getBundleCacheMiss(NodeId id)\n            throws ItemStateException {\n        long time = System.nanoTime();\n        NodePropBundle bundle = loadBundle(id);"
            },
            {
              "step": 26,
              "variableName": "id",
              "startLine": 766,
              "startColumn": 44,
              "endLine": 766,
              "endColumn": 46,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/bundle/AbstractBundlePersistenceManager.java",
              "type": "NodeId",
              "code": "    private NodePropBundle getBundleCacheMiss(NodeId id)\n            throws ItemStateException {\n        long time = System.nanoTime();\n        NodePropBundle bundle = loadBundle(id);\n        time = System.nanoTime() - time;\n        cacheMissDuration.addAndGet(time);\n        final long timeMs = time / 1000000;"
            },
            {
              "step": 27,
              "variableName": "NodeId id",
              "startLine": 234,
              "startColumn": 41,
              "endLine": 234,
              "endColumn": 50,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/bundle/BundleFsPersistenceManager.java",
              "type": "NodeId",
              "code": "    /**\n     * {@inheritDoc}\n     */\n    protected NodePropBundle loadBundle(NodeId id) throws ItemStateException {\n        try {\n            String path = buildNodeFilePath(null, id).toString();\n            if (!itemFs.exists(path)) {"
            },
            {
              "step": 28,
              "variableName": "msg",
              "startLine": 248,
              "startColumn": 23,
              "endLine": 248,
              "endColumn": 26,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/bundle/BundleFsPersistenceManager.java",
              "type": "",
              "code": "            }\n        } catch (Exception e) {\n            String msg = \"failed to read bundle: \" + id + \": \" + e;\n            log.error(msg);\n            throw new ItemStateException(msg, e);\n        }\n    }"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "lockToken",
              "startLine": 1279,
              "startColumn": 19,
              "endLine": 1279,
              "endColumn": 28,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "NodeId",
              "code": "         */\n        public InternalLockInfo(NodeId lockToken, boolean sessionScoped,\n                                boolean deep, String lockOwner, long timeoutHint) {\n            super(lockToken, sessionScoped, deep, lockOwner, timeoutHint);\n        }\n\n        /**"
            },
            {
              "step": 1,
              "variableName": "super(lockToken, sessionScoped, deep, lockOwner, timeoutHint);",
              "startLine": 1279,
              "startColumn": 13,
              "endLine": 1279,
              "endColumn": 75,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "         */\n        public InternalLockInfo(NodeId lockToken, boolean sessionScoped,\n                                boolean deep, String lockOwner, long timeoutHint) {\n            super(lockToken, sessionScoped, deep, lockOwner, timeoutHint);\n        }\n\n        /**"
            },
            {
              "step": 2,
              "variableName": "new InternalLockInfo(",
              "startLine": 340,
              "startColumn": 33,
              "endLine": 341,
              "endColumn": 83,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "\n        SessionImpl session = (SessionImpl) node.getSession();\n        String lockOwner = (ownerInfo != null) ? ownerInfo : session.getUserID();\n        InternalLockInfo info = new InternalLockInfo(\n                node.getNodeId(), isSessionScoped, isDeep, lockOwner, timeoutHint);\n\n        ClusterOperation operation = null;"
            },
            {
              "step": 3,
              "variableName": "info",
              "startLine": 370,
              "startColumn": 17,
              "endLine": 370,
              "endColumn": 21,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "            }\n            if (info.isDeep() && element.hasPath(path)\n                    && element.getChildrenCount() > 0) {\n                info.throwLockException(\"Some child node is locked\", session);\n            }\n\n            // create lock token"
            },
            {
              "step": 4,
              "variableName": "throwLockException",
              "startLine": 259,
              "startColumn": 17,
              "endLine": 259,
              "endColumn": 35,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockInfo.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "     * @throws LockException always thrown, unless another error occurs\n     * @throws RepositoryException if the path of this lock can not be resolved\n     */\n    public void throwLockException(String message, SessionImpl session)\n            throws LockException, RepositoryException {\n        String path;\n        try {"
            },
            {
              "step": 5,
              "variableName": "id",
              "startLine": 264,
              "startColumn": 59,
              "endLine": 264,
              "endColumn": 61,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockInfo.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "        String path;\n        try {\n            path = session.getJCRPath(\n                    session.getHierarchyManager().getPath(id));\n        } catch (RepositoryException ignored) {\n            path = null;\n        }"
            },
            {
              "step": 6,
              "variableName": "id",
              "startLine": 264,
              "startColumn": 59,
              "endLine": 264,
              "endColumn": 61,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockInfo.java",
              "type": "NodeId",
              "code": "        String path;\n        try {\n            path = session.getJCRPath(\n                    session.getHierarchyManager().getPath(id));\n        } catch (RepositoryException ignored) {\n            path = null;\n        }"
            },
            {
              "step": 7,
              "variableName": "ItemId id",
              "startLine": 252,
              "startColumn": 25,
              "endLine": 252,
              "endColumn": 34,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/CachingHierarchyManager.java",
              "type": "NodeId",
              "code": "     * Overridden method simply checks whether we have an item matching the id\n     * and returns its path, otherwise calls base implementation.\n     */\n    public Path getPath(ItemId id)\n            throws ItemNotFoundException, RepositoryException {\n\n        if (id.denotesNode()) {"
            },
            {
              "step": 8,
              "variableName": "id",
              "startLine": 267,
              "startColumn": 30,
              "endLine": 267,
              "endColumn": 32,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/CachingHierarchyManager.java",
              "type": "NodeId",
              "code": "                }\n            }\n        }\n        return super.getPath(id);\n    }\n\n    /**"
            },
            {
              "step": 9,
              "variableName": "ItemId id",
              "startLine": 392,
              "startColumn": 25,
              "endLine": 392,
              "endColumn": 34,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "    /**\n     * {@inheritDoc}\n     */\n    public Path getPath(ItemId id)\n            throws ItemNotFoundException, RepositoryException {\n        // shortcut\n        if (id.equals(rootNodeId)) {"
            },
            {
              "step": 10,
              "variableName": "id",
              "startLine": 402,
              "startColumn": 45,
              "endLine": 402,
              "endColumn": 47,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "        PathBuilder builder = new PathBuilder();\n\n        try {\n            buildPath(builder, getItemState(id), new CycleDetector());\n            return builder.getPath();\n        } catch (NoSuchItemStateException nsise) {\n            String msg = \"failed to build path of \" + id;"
            },
            {
              "step": 11,
              "variableName": "ItemId id",
              "startLine": 152,
              "startColumn": 38,
              "endLine": 152,
              "endColumn": 47,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "     * @throws ItemStateException       if an error occurs\n     * @see ZombieHierarchyManager#getItemState(ItemId)\n     */\n    protected ItemState getItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n        return provider.getItemState(id);\n    }"
            },
            {
              "step": 12,
              "variableName": "id",
              "startLine": 154,
              "startColumn": 38,
              "endLine": 154,
              "endColumn": 40,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "     */\n    protected ItemState getItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n        return provider.getItemState(id);\n    }\n\n    /**"
            },
            {
              "step": 13,
              "variableName": "ItemId id",
              "startLine": 160,
              "startColumn": 35,
              "endLine": 160,
              "endColumn": 44,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/LocalItemStateManager.java",
              "type": "NodeId",
              "code": "    /**\n     * {@inheritDoc}\n     */\n    public ItemState getItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n\n        // check change log"
            },
            {
              "step": 14,
              "variableName": "(NodeId) id",
              "startLine": 175,
              "startColumn": 42,
              "endLine": 175,
              "endColumn": 53,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/LocalItemStateManager.java",
              "type": "NodeId",
              "code": "            if (state == null) {\n                // regular behaviour\n                if (id.denotesNode()) {\n                    state = getNodeState((NodeId) id);\n                } else {\n                    state = getPropertyState((PropertyId) id);\n                }"
            },
            {
              "step": 15,
              "variableName": "NodeId id",
              "startLine": 106,
              "startColumn": 38,
              "endLine": 106,
              "endColumn": 47,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/LocalItemStateManager.java",
              "type": "NodeId",
              "code": "     * @throws NoSuchItemStateException\n     * @throws ItemStateException\n     */\n    protected NodeState getNodeState(NodeId id)\n            throws NoSuchItemStateException, ItemStateException {\n\n        // load from parent manager and wrap"
            },
            {
              "step": 16,
              "variableName": "id",
              "startLine": 110,
              "startColumn": 67,
              "endLine": 110,
              "endColumn": 69,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/LocalItemStateManager.java",
              "type": "NodeId",
              "code": "            throws NoSuchItemStateException, ItemStateException {\n\n        // load from parent manager and wrap\n        NodeState state = (NodeState) sharedStateMgr.getItemState(id);\n        state = new NodeState(state, state.getStatus(), false);\n\n        // put it in cache"
            },
            {
              "step": 17,
              "variableName": "ItemId id",
              "startLine": 258,
              "startColumn": 35,
              "endLine": 258,
              "endColumn": 44,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "    /**\n     * {@inheritDoc}\n     */\n    public ItemState getItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n        // check the virtual root ids (needed for overlay)\n        for (VirtualItemStateProvider virtualProvider : virtualProviders) {"
            },
            {
              "step": 18,
              "variableName": "id",
              "startLine": 271,
              "startColumn": 43,
              "endLine": 271,
              "endColumn": 45,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "        ISMLocking.ReadLock readLock = acquireReadLock(id);\n        try {\n            // check internal first\n            return getNonVirtualItemState(id);\n        } catch (NoSuchItemStateException e) {\n            // Fall through to virtual state providers. We can afford the\n            // exception-for-control-flow performance hit here, as almost"
            },
            {
              "step": 19,
              "variableName": "ItemId id",
              "startLine": 1767,
              "startColumn": 46,
              "endLine": 1767,
              "endColumn": 55,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "     * Returns the item state for the given id without considering virtual\n     * item state providers.\n     */\n    private ItemState getNonVirtualItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n        // First check if the item state is already in the cache\n        ItemState state = cache.retrieve(id);"
            },
            {
              "step": 20,
              "variableName": "id",
              "startLine": 1798,
              "startColumn": 35,
              "endLine": 1798,
              "endColumn": 37,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "        try {\n            // Load the item state from persistent storage\n            // NOTE: This needs to happen outside a synchronized block!\n            state = loadItemState(id);\n            state.setStatus(ItemState.STATUS_EXISTING);\n            state.setContainer(this);\n"
            },
            {
              "step": 21,
              "variableName": "ItemId id",
              "startLine": 1873,
              "startColumn": 37,
              "endLine": 1873,
              "endColumn": 46,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "     * @param id item id\n     * @return item state\n     */\n    private ItemState loadItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n\n        ItemState state;"
            },
            {
              "step": 22,
              "variableName": "(NodeId) id",
              "startLine": 1878,
              "startColumn": 37,
              "endLine": 1878,
              "endColumn": 48,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "\n        ItemState state;\n        if (id.denotesNode()) {\n            state = persistMgr.load((NodeId) id);\n        } else {\n            state = persistMgr.load((PropertyId) id);\n        }"
            },
            {
              "step": 23,
              "variableName": "NodeId id",
              "startLine": 489,
              "startColumn": 27,
              "endLine": 489,
              "endColumn": 36,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/bundle/AbstractBundlePersistenceManager.java",
              "type": "NodeId",
              "code": "     *\n     * Loads the state via the appropriate NodePropBundle.\n     */\n    public NodeState load(NodeId id) throws NoSuchItemStateException, ItemStateException {\n        NodePropBundle bundle = getBundle(id);\n        if (bundle == null) {\n            throw new NoSuchItemStateException(id.toString());"
            },
            {
              "step": 24,
              "variableName": "id",
              "startLine": 490,
              "startColumn": 43,
              "endLine": 490,
              "endColumn": 45,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/bundle/AbstractBundlePersistenceManager.java",
              "type": "NodeId",
              "code": "     * Loads the state via the appropriate NodePropBundle.\n     */\n    public NodeState load(NodeId id) throws NoSuchItemStateException, ItemStateException {\n        NodePropBundle bundle = getBundle(id);\n        if (bundle == null) {\n            throw new NoSuchItemStateException(id.toString());\n        }"
            },
            {
              "step": 25,
              "variableName": "NodeId id",
              "startLine": 740,
              "startColumn": 38,
              "endLine": 740,
              "endColumn": 47,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/bundle/AbstractBundlePersistenceManager.java",
              "type": "NodeId",
              "code": "     *\n     * @throws ItemStateException if an error occurs.\n     */\n    private NodePropBundle getBundle(NodeId id) throws ItemStateException {\n        NodePropBundle bundle = bundles.get(id);\n        readCounter.incrementAndGet();\n        if (bundle == MISSING) {"
            },
            {
              "step": 26,
              "variableName": "id",
              "startLine": 750,
              "startColumn": 35,
              "endLine": 750,
              "endColumn": 37,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/bundle/AbstractBundlePersistenceManager.java",
              "type": "NodeId",
              "code": "            return bundle;\n        }\n        // cache miss\n        return getBundleCacheMiss(id);\n    }\n\n    /**"
            },
            {
              "step": 27,
              "variableName": "NodeId id",
              "startLine": 763,
              "startColumn": 47,
              "endLine": 763,
              "endColumn": 56,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/bundle/AbstractBundlePersistenceManager.java",
              "type": "NodeId",
              "code": "     * @return\n     * @throws ItemStateException\n     */\n    private NodePropBundle getBundleCacheMiss(NodeId id)\n            throws ItemStateException {\n        long time = System.nanoTime();\n        NodePropBundle bundle = loadBundle(id);"
            },
            {
              "step": 28,
              "variableName": "id",
              "startLine": 766,
              "startColumn": 44,
              "endLine": 766,
              "endColumn": 46,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/bundle/AbstractBundlePersistenceManager.java",
              "type": "NodeId",
              "code": "    private NodePropBundle getBundleCacheMiss(NodeId id)\n            throws ItemStateException {\n        long time = System.nanoTime();\n        NodePropBundle bundle = loadBundle(id);\n        time = System.nanoTime() - time;\n        cacheMissDuration.addAndGet(time);\n        final long timeMs = time / 1000000;"
            },
            {
              "step": 29,
              "variableName": "NodeId id",
              "startLine": 234,
              "startColumn": 41,
              "endLine": 234,
              "endColumn": 50,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/bundle/BundleFsPersistenceManager.java",
              "type": "NodeId",
              "code": "    /**\n     * {@inheritDoc}\n     */\n    protected NodePropBundle loadBundle(NodeId id) throws ItemStateException {\n        try {\n            String path = buildNodeFilePath(null, id).toString();\n            if (!itemFs.exists(path)) {"
            },
            {
              "step": 30,
              "variableName": "msg",
              "startLine": 248,
              "startColumn": 23,
              "endLine": 248,
              "endColumn": 26,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/bundle/BundleFsPersistenceManager.java",
              "type": "",
              "code": "            }\n        } catch (Exception e) {\n            String msg = \"failed to read bundle: \" + id + \": \" + e;\n            log.error(msg);\n            throw new ItemStateException(msg, e);\n        }\n    }"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "lockToken",
              "startLine": 1279,
              "startColumn": 19,
              "endLine": 1279,
              "endColumn": 28,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "NodeId",
              "code": "         */\n        public InternalLockInfo(NodeId lockToken, boolean sessionScoped,\n                                boolean deep, String lockOwner, long timeoutHint) {\n            super(lockToken, sessionScoped, deep, lockOwner, timeoutHint);\n        }\n\n        /**"
            },
            {
              "step": 1,
              "variableName": "super(lockToken, sessionScoped, deep, lockOwner, timeoutHint);",
              "startLine": 1279,
              "startColumn": 13,
              "endLine": 1279,
              "endColumn": 75,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "         */\n        public InternalLockInfo(NodeId lockToken, boolean sessionScoped,\n                                boolean deep, String lockOwner, long timeoutHint) {\n            super(lockToken, sessionScoped, deep, lockOwner, timeoutHint);\n        }\n\n        /**"
            },
            {
              "step": 2,
              "variableName": "new InternalLockInfo(",
              "startLine": 340,
              "startColumn": 33,
              "endLine": 341,
              "endColumn": 83,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "\n        SessionImpl session = (SessionImpl) node.getSession();\n        String lockOwner = (ownerInfo != null) ? ownerInfo : session.getUserID();\n        InternalLockInfo info = new InternalLockInfo(\n                node.getNodeId(), isSessionScoped, isDeep, lockOwner, timeoutHint);\n\n        ClusterOperation operation = null;"
            },
            {
              "step": 3,
              "variableName": "info",
              "startLine": 370,
              "startColumn": 17,
              "endLine": 370,
              "endColumn": 21,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "            }\n            if (info.isDeep() && element.hasPath(path)\n                    && element.getChildrenCount() > 0) {\n                info.throwLockException(\"Some child node is locked\", session);\n            }\n\n            // create lock token"
            },
            {
              "step": 4,
              "variableName": "throwLockException",
              "startLine": 259,
              "startColumn": 17,
              "endLine": 259,
              "endColumn": 35,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockInfo.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "     * @throws LockException always thrown, unless another error occurs\n     * @throws RepositoryException if the path of this lock can not be resolved\n     */\n    public void throwLockException(String message, SessionImpl session)\n            throws LockException, RepositoryException {\n        String path;\n        try {"
            },
            {
              "step": 5,
              "variableName": "id",
              "startLine": 264,
              "startColumn": 59,
              "endLine": 264,
              "endColumn": 61,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockInfo.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "        String path;\n        try {\n            path = session.getJCRPath(\n                    session.getHierarchyManager().getPath(id));\n        } catch (RepositoryException ignored) {\n            path = null;\n        }"
            },
            {
              "step": 6,
              "variableName": "id",
              "startLine": 264,
              "startColumn": 59,
              "endLine": 264,
              "endColumn": 61,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockInfo.java",
              "type": "NodeId",
              "code": "        String path;\n        try {\n            path = session.getJCRPath(\n                    session.getHierarchyManager().getPath(id));\n        } catch (RepositoryException ignored) {\n            path = null;\n        }"
            },
            {
              "step": 7,
              "variableName": "ItemId id",
              "startLine": 252,
              "startColumn": 25,
              "endLine": 252,
              "endColumn": 34,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/CachingHierarchyManager.java",
              "type": "NodeId",
              "code": "     * Overridden method simply checks whether we have an item matching the id\n     * and returns its path, otherwise calls base implementation.\n     */\n    public Path getPath(ItemId id)\n            throws ItemNotFoundException, RepositoryException {\n\n        if (id.denotesNode()) {"
            },
            {
              "step": 8,
              "variableName": "id",
              "startLine": 267,
              "startColumn": 30,
              "endLine": 267,
              "endColumn": 32,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/CachingHierarchyManager.java",
              "type": "NodeId",
              "code": "                }\n            }\n        }\n        return super.getPath(id);\n    }\n\n    /**"
            },
            {
              "step": 9,
              "variableName": "ItemId id",
              "startLine": 392,
              "startColumn": 25,
              "endLine": 392,
              "endColumn": 34,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "    /**\n     * {@inheritDoc}\n     */\n    public Path getPath(ItemId id)\n            throws ItemNotFoundException, RepositoryException {\n        // shortcut\n        if (id.equals(rootNodeId)) {"
            },
            {
              "step": 10,
              "variableName": "id",
              "startLine": 402,
              "startColumn": 45,
              "endLine": 402,
              "endColumn": 47,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "        PathBuilder builder = new PathBuilder();\n\n        try {\n            buildPath(builder, getItemState(id), new CycleDetector());\n            return builder.getPath();\n        } catch (NoSuchItemStateException nsise) {\n            String msg = \"failed to build path of \" + id;"
            },
            {
              "step": 11,
              "variableName": "ItemId id",
              "startLine": 152,
              "startColumn": 38,
              "endLine": 152,
              "endColumn": 47,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "     * @throws ItemStateException       if an error occurs\n     * @see ZombieHierarchyManager#getItemState(ItemId)\n     */\n    protected ItemState getItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n        return provider.getItemState(id);\n    }"
            },
            {
              "step": 12,
              "variableName": "id",
              "startLine": 154,
              "startColumn": 38,
              "endLine": 154,
              "endColumn": 40,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "     */\n    protected ItemState getItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n        return provider.getItemState(id);\n    }\n\n    /**"
            },
            {
              "step": 13,
              "variableName": "ItemId id",
              "startLine": 132,
              "startColumn": 39,
              "endLine": 132,
              "endColumn": 48,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/observation/ChangeLogBasedHierarchyMgr.java",
              "type": "NodeId",
              "code": "         * <code>id</code>.\n         * @throws ItemStateException if any other error occurs.\n         */\n        public ItemState getItemState(ItemId id) throws NoSuchItemStateException, ItemStateException {\n            // check ChangeLog first\n            try {\n                ItemState state = changes.get(id);"
            },
            {
              "step": 14,
              "variableName": "id",
              "startLine": 142,
              "startColumn": 38,
              "endLine": 142,
              "endColumn": 40,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/observation/ChangeLogBasedHierarchyMgr.java",
              "type": "NodeId",
              "code": "            } catch (NoSuchItemStateException e) {\n                // item has been deleted, but we still return it by asking base\n            }\n            return base.getItemState(id);\n        }\n\n        /**"
            },
            {
              "step": 15,
              "variableName": "ItemId id",
              "startLine": 258,
              "startColumn": 35,
              "endLine": 258,
              "endColumn": 44,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "    /**\n     * {@inheritDoc}\n     */\n    public ItemState getItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n        // check the virtual root ids (needed for overlay)\n        for (VirtualItemStateProvider virtualProvider : virtualProviders) {"
            },
            {
              "step": 16,
              "variableName": "id",
              "startLine": 271,
              "startColumn": 43,
              "endLine": 271,
              "endColumn": 45,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "        ISMLocking.ReadLock readLock = acquireReadLock(id);\n        try {\n            // check internal first\n            return getNonVirtualItemState(id);\n        } catch (NoSuchItemStateException e) {\n            // Fall through to virtual state providers. We can afford the\n            // exception-for-control-flow performance hit here, as almost"
            },
            {
              "step": 17,
              "variableName": "ItemId id",
              "startLine": 1767,
              "startColumn": 46,
              "endLine": 1767,
              "endColumn": 55,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "     * Returns the item state for the given id without considering virtual\n     * item state providers.\n     */\n    private ItemState getNonVirtualItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n        // First check if the item state is already in the cache\n        ItemState state = cache.retrieve(id);"
            },
            {
              "step": 18,
              "variableName": "id",
              "startLine": 1798,
              "startColumn": 35,
              "endLine": 1798,
              "endColumn": 37,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "        try {\n            // Load the item state from persistent storage\n            // NOTE: This needs to happen outside a synchronized block!\n            state = loadItemState(id);\n            state.setStatus(ItemState.STATUS_EXISTING);\n            state.setContainer(this);\n"
            },
            {
              "step": 19,
              "variableName": "ItemId id",
              "startLine": 1873,
              "startColumn": 37,
              "endLine": 1873,
              "endColumn": 46,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "     * @param id item id\n     * @return item state\n     */\n    private ItemState loadItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n\n        ItemState state;"
            },
            {
              "step": 20,
              "variableName": "(NodeId) id",
              "startLine": 1878,
              "startColumn": 37,
              "endLine": 1878,
              "endColumn": 48,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "\n        ItemState state;\n        if (id.denotesNode()) {\n            state = persistMgr.load((NodeId) id);\n        } else {\n            state = persistMgr.load((PropertyId) id);\n        }"
            },
            {
              "step": 21,
              "variableName": "NodeId id",
              "startLine": 489,
              "startColumn": 27,
              "endLine": 489,
              "endColumn": 36,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/bundle/AbstractBundlePersistenceManager.java",
              "type": "NodeId",
              "code": "     *\n     * Loads the state via the appropriate NodePropBundle.\n     */\n    public NodeState load(NodeId id) throws NoSuchItemStateException, ItemStateException {\n        NodePropBundle bundle = getBundle(id);\n        if (bundle == null) {\n            throw new NoSuchItemStateException(id.toString());"
            },
            {
              "step": 22,
              "variableName": "id",
              "startLine": 490,
              "startColumn": 43,
              "endLine": 490,
              "endColumn": 45,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/bundle/AbstractBundlePersistenceManager.java",
              "type": "NodeId",
              "code": "     * Loads the state via the appropriate NodePropBundle.\n     */\n    public NodeState load(NodeId id) throws NoSuchItemStateException, ItemStateException {\n        NodePropBundle bundle = getBundle(id);\n        if (bundle == null) {\n            throw new NoSuchItemStateException(id.toString());\n        }"
            },
            {
              "step": 23,
              "variableName": "NodeId id",
              "startLine": 740,
              "startColumn": 38,
              "endLine": 740,
              "endColumn": 47,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/bundle/AbstractBundlePersistenceManager.java",
              "type": "NodeId",
              "code": "     *\n     * @throws ItemStateException if an error occurs.\n     */\n    private NodePropBundle getBundle(NodeId id) throws ItemStateException {\n        NodePropBundle bundle = bundles.get(id);\n        readCounter.incrementAndGet();\n        if (bundle == MISSING) {"
            },
            {
              "step": 24,
              "variableName": "id",
              "startLine": 750,
              "startColumn": 35,
              "endLine": 750,
              "endColumn": 37,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/bundle/AbstractBundlePersistenceManager.java",
              "type": "NodeId",
              "code": "            return bundle;\n        }\n        // cache miss\n        return getBundleCacheMiss(id);\n    }\n\n    /**"
            },
            {
              "step": 25,
              "variableName": "NodeId id",
              "startLine": 763,
              "startColumn": 47,
              "endLine": 763,
              "endColumn": 56,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/bundle/AbstractBundlePersistenceManager.java",
              "type": "NodeId",
              "code": "     * @return\n     * @throws ItemStateException\n     */\n    private NodePropBundle getBundleCacheMiss(NodeId id)\n            throws ItemStateException {\n        long time = System.nanoTime();\n        NodePropBundle bundle = loadBundle(id);"
            },
            {
              "step": 26,
              "variableName": "id",
              "startLine": 766,
              "startColumn": 44,
              "endLine": 766,
              "endColumn": 46,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/bundle/AbstractBundlePersistenceManager.java",
              "type": "NodeId",
              "code": "    private NodePropBundle getBundleCacheMiss(NodeId id)\n            throws ItemStateException {\n        long time = System.nanoTime();\n        NodePropBundle bundle = loadBundle(id);\n        time = System.nanoTime() - time;\n        cacheMissDuration.addAndGet(time);\n        final long timeMs = time / 1000000;"
            },
            {
              "step": 27,
              "variableName": "NodeId id",
              "startLine": 234,
              "startColumn": 41,
              "endLine": 234,
              "endColumn": 50,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/bundle/BundleFsPersistenceManager.java",
              "type": "NodeId",
              "code": "    /**\n     * {@inheritDoc}\n     */\n    protected NodePropBundle loadBundle(NodeId id) throws ItemStateException {\n        try {\n            String path = buildNodeFilePath(null, id).toString();\n            if (!itemFs.exists(path)) {"
            },
            {
              "step": 28,
              "variableName": "msg",
              "startLine": 248,
              "startColumn": 23,
              "endLine": 248,
              "endColumn": 26,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/bundle/BundleFsPersistenceManager.java",
              "type": "",
              "code": "            }\n        } catch (Exception e) {\n            String msg = \"failed to read bundle: \" + id + \": \" + e;\n            log.error(msg);\n            throw new ItemStateException(msg, e);\n        }\n    }"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 13,
      "fileName": "DatabasePersistenceManager.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "lockToken",
              "startLine": 1279,
              "startColumn": 19,
              "endLine": 1279,
              "endColumn": 28,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "NodeId",
              "code": "         */\n        public InternalLockInfo(NodeId lockToken, boolean sessionScoped,\n                                boolean deep, String lockOwner, long timeoutHint) {\n            super(lockToken, sessionScoped, deep, lockOwner, timeoutHint);\n        }\n\n        /**"
            },
            {
              "step": 1,
              "variableName": "super(lockToken, sessionScoped, deep, lockOwner, timeoutHint);",
              "startLine": 1279,
              "startColumn": 13,
              "endLine": 1279,
              "endColumn": 75,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "         */\n        public InternalLockInfo(NodeId lockToken, boolean sessionScoped,\n                                boolean deep, String lockOwner, long timeoutHint) {\n            super(lockToken, sessionScoped, deep, lockOwner, timeoutHint);\n        }\n\n        /**"
            },
            {
              "step": 2,
              "variableName": "new InternalLockInfo(",
              "startLine": 340,
              "startColumn": 33,
              "endLine": 341,
              "endColumn": 83,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "\n        SessionImpl session = (SessionImpl) node.getSession();\n        String lockOwner = (ownerInfo != null) ? ownerInfo : session.getUserID();\n        InternalLockInfo info = new InternalLockInfo(\n                node.getNodeId(), isSessionScoped, isDeep, lockOwner, timeoutHint);\n\n        ClusterOperation operation = null;"
            },
            {
              "step": 3,
              "variableName": "info",
              "startLine": 370,
              "startColumn": 17,
              "endLine": 370,
              "endColumn": 21,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "            }\n            if (info.isDeep() && element.hasPath(path)\n                    && element.getChildrenCount() > 0) {\n                info.throwLockException(\"Some child node is locked\", session);\n            }\n\n            // create lock token"
            },
            {
              "step": 4,
              "variableName": "throwLockException",
              "startLine": 259,
              "startColumn": 17,
              "endLine": 259,
              "endColumn": 35,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockInfo.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "     * @throws LockException always thrown, unless another error occurs\n     * @throws RepositoryException if the path of this lock can not be resolved\n     */\n    public void throwLockException(String message, SessionImpl session)\n            throws LockException, RepositoryException {\n        String path;\n        try {"
            },
            {
              "step": 5,
              "variableName": "id",
              "startLine": 264,
              "startColumn": 59,
              "endLine": 264,
              "endColumn": 61,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockInfo.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "        String path;\n        try {\n            path = session.getJCRPath(\n                    session.getHierarchyManager().getPath(id));\n        } catch (RepositoryException ignored) {\n            path = null;\n        }"
            },
            {
              "step": 6,
              "variableName": "id",
              "startLine": 264,
              "startColumn": 59,
              "endLine": 264,
              "endColumn": 61,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockInfo.java",
              "type": "NodeId",
              "code": "        String path;\n        try {\n            path = session.getJCRPath(\n                    session.getHierarchyManager().getPath(id));\n        } catch (RepositoryException ignored) {\n            path = null;\n        }"
            },
            {
              "step": 7,
              "variableName": "ItemId id",
              "startLine": 252,
              "startColumn": 25,
              "endLine": 252,
              "endColumn": 34,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/CachingHierarchyManager.java",
              "type": "NodeId",
              "code": "     * Overridden method simply checks whether we have an item matching the id\n     * and returns its path, otherwise calls base implementation.\n     */\n    public Path getPath(ItemId id)\n            throws ItemNotFoundException, RepositoryException {\n\n        if (id.denotesNode()) {"
            },
            {
              "step": 8,
              "variableName": "id",
              "startLine": 267,
              "startColumn": 30,
              "endLine": 267,
              "endColumn": 32,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/CachingHierarchyManager.java",
              "type": "NodeId",
              "code": "                }\n            }\n        }\n        return super.getPath(id);\n    }\n\n    /**"
            },
            {
              "step": 9,
              "variableName": "ItemId id",
              "startLine": 392,
              "startColumn": 25,
              "endLine": 392,
              "endColumn": 34,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "    /**\n     * {@inheritDoc}\n     */\n    public Path getPath(ItemId id)\n            throws ItemNotFoundException, RepositoryException {\n        // shortcut\n        if (id.equals(rootNodeId)) {"
            },
            {
              "step": 10,
              "variableName": "id",
              "startLine": 402,
              "startColumn": 45,
              "endLine": 402,
              "endColumn": 47,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "        PathBuilder builder = new PathBuilder();\n\n        try {\n            buildPath(builder, getItemState(id), new CycleDetector());\n            return builder.getPath();\n        } catch (NoSuchItemStateException nsise) {\n            String msg = \"failed to build path of \" + id;"
            },
            {
              "step": 11,
              "variableName": "ItemId id",
              "startLine": 152,
              "startColumn": 38,
              "endLine": 152,
              "endColumn": 47,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "     * @throws ItemStateException       if an error occurs\n     * @see ZombieHierarchyManager#getItemState(ItemId)\n     */\n    protected ItemState getItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n        return provider.getItemState(id);\n    }"
            },
            {
              "step": 12,
              "variableName": "id",
              "startLine": 154,
              "startColumn": 38,
              "endLine": 154,
              "endColumn": 40,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "     */\n    protected ItemState getItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n        return provider.getItemState(id);\n    }\n\n    /**"
            },
            {
              "step": 13,
              "variableName": "ItemId id",
              "startLine": 258,
              "startColumn": 35,
              "endLine": 258,
              "endColumn": 44,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "    /**\n     * {@inheritDoc}\n     */\n    public ItemState getItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n        // check the virtual root ids (needed for overlay)\n        for (VirtualItemStateProvider virtualProvider : virtualProviders) {"
            },
            {
              "step": 14,
              "variableName": "id",
              "startLine": 271,
              "startColumn": 43,
              "endLine": 271,
              "endColumn": 45,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "        ISMLocking.ReadLock readLock = acquireReadLock(id);\n        try {\n            // check internal first\n            return getNonVirtualItemState(id);\n        } catch (NoSuchItemStateException e) {\n            // Fall through to virtual state providers. We can afford the\n            // exception-for-control-flow performance hit here, as almost"
            },
            {
              "step": 15,
              "variableName": "ItemId id",
              "startLine": 1767,
              "startColumn": 46,
              "endLine": 1767,
              "endColumn": 55,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "     * Returns the item state for the given id without considering virtual\n     * item state providers.\n     */\n    private ItemState getNonVirtualItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n        // First check if the item state is already in the cache\n        ItemState state = cache.retrieve(id);"
            },
            {
              "step": 16,
              "variableName": "id",
              "startLine": 1798,
              "startColumn": 35,
              "endLine": 1798,
              "endColumn": 37,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "        try {\n            // Load the item state from persistent storage\n            // NOTE: This needs to happen outside a synchronized block!\n            state = loadItemState(id);\n            state.setStatus(ItemState.STATUS_EXISTING);\n            state.setContainer(this);\n"
            },
            {
              "step": 17,
              "variableName": "ItemId id",
              "startLine": 1873,
              "startColumn": 37,
              "endLine": 1873,
              "endColumn": 46,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "     * @param id item id\n     * @return item state\n     */\n    private ItemState loadItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n\n        ItemState state;"
            },
            {
              "step": 18,
              "variableName": "(NodeId) id",
              "startLine": 1878,
              "startColumn": 37,
              "endLine": 1878,
              "endColumn": 48,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "\n        ItemState state;\n        if (id.denotesNode()) {\n            state = persistMgr.load((NodeId) id);\n        } else {\n            state = persistMgr.load((PropertyId) id);\n        }"
            },
            {
              "step": 19,
              "variableName": "NodeId id",
              "startLine": 366,
              "startColumn": 27,
              "endLine": 366,
              "endColumn": 36,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/db/DatabasePersistenceManager.java",
              "type": "NodeId",
              "code": "    /**\n     * {@inheritDoc}\n     */\n    public NodeState load(NodeId id)\n            throws NoSuchItemStateException, ItemStateException {\n        if (!initialized) {\n            throw new IllegalStateException(\"not initialized\");"
            },
            {
              "step": 20,
              "variableName": "msg",
              "startLine": 392,
              "startColumn": 27,
              "endLine": 392,
              "endColumn": 30,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/db/DatabasePersistenceManager.java",
              "type": "",
              "code": "                    throw (NoSuchItemStateException) e;\n                }\n                String msg = \"failed to read node state: \" + id;\n                log.error(msg, e);\n                throw new ItemStateException(msg, e);\n            } finally {\n                IOUtils.closeQuietly(in);"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "lockToken",
              "startLine": 1279,
              "startColumn": 19,
              "endLine": 1279,
              "endColumn": 28,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "NodeId",
              "code": "         */\n        public InternalLockInfo(NodeId lockToken, boolean sessionScoped,\n                                boolean deep, String lockOwner, long timeoutHint) {\n            super(lockToken, sessionScoped, deep, lockOwner, timeoutHint);\n        }\n\n        /**"
            },
            {
              "step": 1,
              "variableName": "super(lockToken, sessionScoped, deep, lockOwner, timeoutHint);",
              "startLine": 1279,
              "startColumn": 13,
              "endLine": 1279,
              "endColumn": 75,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "         */\n        public InternalLockInfo(NodeId lockToken, boolean sessionScoped,\n                                boolean deep, String lockOwner, long timeoutHint) {\n            super(lockToken, sessionScoped, deep, lockOwner, timeoutHint);\n        }\n\n        /**"
            },
            {
              "step": 2,
              "variableName": "new InternalLockInfo(",
              "startLine": 340,
              "startColumn": 33,
              "endLine": 341,
              "endColumn": 83,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "\n        SessionImpl session = (SessionImpl) node.getSession();\n        String lockOwner = (ownerInfo != null) ? ownerInfo : session.getUserID();\n        InternalLockInfo info = new InternalLockInfo(\n                node.getNodeId(), isSessionScoped, isDeep, lockOwner, timeoutHint);\n\n        ClusterOperation operation = null;"
            },
            {
              "step": 3,
              "variableName": "info",
              "startLine": 370,
              "startColumn": 17,
              "endLine": 370,
              "endColumn": 21,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "            }\n            if (info.isDeep() && element.hasPath(path)\n                    && element.getChildrenCount() > 0) {\n                info.throwLockException(\"Some child node is locked\", session);\n            }\n\n            // create lock token"
            },
            {
              "step": 4,
              "variableName": "throwLockException",
              "startLine": 259,
              "startColumn": 17,
              "endLine": 259,
              "endColumn": 35,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockInfo.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "     * @throws LockException always thrown, unless another error occurs\n     * @throws RepositoryException if the path of this lock can not be resolved\n     */\n    public void throwLockException(String message, SessionImpl session)\n            throws LockException, RepositoryException {\n        String path;\n        try {"
            },
            {
              "step": 5,
              "variableName": "id",
              "startLine": 264,
              "startColumn": 59,
              "endLine": 264,
              "endColumn": 61,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockInfo.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "        String path;\n        try {\n            path = session.getJCRPath(\n                    session.getHierarchyManager().getPath(id));\n        } catch (RepositoryException ignored) {\n            path = null;\n        }"
            },
            {
              "step": 6,
              "variableName": "id",
              "startLine": 264,
              "startColumn": 59,
              "endLine": 264,
              "endColumn": 61,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockInfo.java",
              "type": "NodeId",
              "code": "        String path;\n        try {\n            path = session.getJCRPath(\n                    session.getHierarchyManager().getPath(id));\n        } catch (RepositoryException ignored) {\n            path = null;\n        }"
            },
            {
              "step": 7,
              "variableName": "ItemId id",
              "startLine": 252,
              "startColumn": 25,
              "endLine": 252,
              "endColumn": 34,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/CachingHierarchyManager.java",
              "type": "NodeId",
              "code": "     * Overridden method simply checks whether we have an item matching the id\n     * and returns its path, otherwise calls base implementation.\n     */\n    public Path getPath(ItemId id)\n            throws ItemNotFoundException, RepositoryException {\n\n        if (id.denotesNode()) {"
            },
            {
              "step": 8,
              "variableName": "id",
              "startLine": 267,
              "startColumn": 30,
              "endLine": 267,
              "endColumn": 32,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/CachingHierarchyManager.java",
              "type": "NodeId",
              "code": "                }\n            }\n        }\n        return super.getPath(id);\n    }\n\n    /**"
            },
            {
              "step": 9,
              "variableName": "ItemId id",
              "startLine": 392,
              "startColumn": 25,
              "endLine": 392,
              "endColumn": 34,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "    /**\n     * {@inheritDoc}\n     */\n    public Path getPath(ItemId id)\n            throws ItemNotFoundException, RepositoryException {\n        // shortcut\n        if (id.equals(rootNodeId)) {"
            },
            {
              "step": 10,
              "variableName": "id",
              "startLine": 402,
              "startColumn": 45,
              "endLine": 402,
              "endColumn": 47,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "        PathBuilder builder = new PathBuilder();\n\n        try {\n            buildPath(builder, getItemState(id), new CycleDetector());\n            return builder.getPath();\n        } catch (NoSuchItemStateException nsise) {\n            String msg = \"failed to build path of \" + id;"
            },
            {
              "step": 11,
              "variableName": "ItemId id",
              "startLine": 152,
              "startColumn": 38,
              "endLine": 152,
              "endColumn": 47,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "     * @throws ItemStateException       if an error occurs\n     * @see ZombieHierarchyManager#getItemState(ItemId)\n     */\n    protected ItemState getItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n        return provider.getItemState(id);\n    }"
            },
            {
              "step": 12,
              "variableName": "id",
              "startLine": 154,
              "startColumn": 38,
              "endLine": 154,
              "endColumn": 40,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "     */\n    protected ItemState getItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n        return provider.getItemState(id);\n    }\n\n    /**"
            },
            {
              "step": 13,
              "variableName": "ItemId id",
              "startLine": 160,
              "startColumn": 35,
              "endLine": 160,
              "endColumn": 44,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/LocalItemStateManager.java",
              "type": "NodeId",
              "code": "    /**\n     * {@inheritDoc}\n     */\n    public ItemState getItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n\n        // check change log"
            },
            {
              "step": 14,
              "variableName": "(NodeId) id",
              "startLine": 175,
              "startColumn": 42,
              "endLine": 175,
              "endColumn": 53,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/LocalItemStateManager.java",
              "type": "NodeId",
              "code": "            if (state == null) {\n                // regular behaviour\n                if (id.denotesNode()) {\n                    state = getNodeState((NodeId) id);\n                } else {\n                    state = getPropertyState((PropertyId) id);\n                }"
            },
            {
              "step": 15,
              "variableName": "NodeId id",
              "startLine": 106,
              "startColumn": 38,
              "endLine": 106,
              "endColumn": 47,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/LocalItemStateManager.java",
              "type": "NodeId",
              "code": "     * @throws NoSuchItemStateException\n     * @throws ItemStateException\n     */\n    protected NodeState getNodeState(NodeId id)\n            throws NoSuchItemStateException, ItemStateException {\n\n        // load from parent manager and wrap"
            },
            {
              "step": 16,
              "variableName": "id",
              "startLine": 110,
              "startColumn": 67,
              "endLine": 110,
              "endColumn": 69,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/LocalItemStateManager.java",
              "type": "NodeId",
              "code": "            throws NoSuchItemStateException, ItemStateException {\n\n        // load from parent manager and wrap\n        NodeState state = (NodeState) sharedStateMgr.getItemState(id);\n        state = new NodeState(state, state.getStatus(), false);\n\n        // put it in cache"
            },
            {
              "step": 17,
              "variableName": "ItemId id",
              "startLine": 258,
              "startColumn": 35,
              "endLine": 258,
              "endColumn": 44,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "    /**\n     * {@inheritDoc}\n     */\n    public ItemState getItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n        // check the virtual root ids (needed for overlay)\n        for (VirtualItemStateProvider virtualProvider : virtualProviders) {"
            },
            {
              "step": 18,
              "variableName": "id",
              "startLine": 271,
              "startColumn": 43,
              "endLine": 271,
              "endColumn": 45,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "        ISMLocking.ReadLock readLock = acquireReadLock(id);\n        try {\n            // check internal first\n            return getNonVirtualItemState(id);\n        } catch (NoSuchItemStateException e) {\n            // Fall through to virtual state providers. We can afford the\n            // exception-for-control-flow performance hit here, as almost"
            },
            {
              "step": 19,
              "variableName": "ItemId id",
              "startLine": 1767,
              "startColumn": 46,
              "endLine": 1767,
              "endColumn": 55,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "     * Returns the item state for the given id without considering virtual\n     * item state providers.\n     */\n    private ItemState getNonVirtualItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n        // First check if the item state is already in the cache\n        ItemState state = cache.retrieve(id);"
            },
            {
              "step": 20,
              "variableName": "id",
              "startLine": 1798,
              "startColumn": 35,
              "endLine": 1798,
              "endColumn": 37,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "        try {\n            // Load the item state from persistent storage\n            // NOTE: This needs to happen outside a synchronized block!\n            state = loadItemState(id);\n            state.setStatus(ItemState.STATUS_EXISTING);\n            state.setContainer(this);\n"
            },
            {
              "step": 21,
              "variableName": "ItemId id",
              "startLine": 1873,
              "startColumn": 37,
              "endLine": 1873,
              "endColumn": 46,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "     * @param id item id\n     * @return item state\n     */\n    private ItemState loadItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n\n        ItemState state;"
            },
            {
              "step": 22,
              "variableName": "(NodeId) id",
              "startLine": 1878,
              "startColumn": 37,
              "endLine": 1878,
              "endColumn": 48,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "\n        ItemState state;\n        if (id.denotesNode()) {\n            state = persistMgr.load((NodeId) id);\n        } else {\n            state = persistMgr.load((PropertyId) id);\n        }"
            },
            {
              "step": 23,
              "variableName": "NodeId id",
              "startLine": 366,
              "startColumn": 27,
              "endLine": 366,
              "endColumn": 36,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/db/DatabasePersistenceManager.java",
              "type": "NodeId",
              "code": "    /**\n     * {@inheritDoc}\n     */\n    public NodeState load(NodeId id)\n            throws NoSuchItemStateException, ItemStateException {\n        if (!initialized) {\n            throw new IllegalStateException(\"not initialized\");"
            },
            {
              "step": 24,
              "variableName": "msg",
              "startLine": 392,
              "startColumn": 27,
              "endLine": 392,
              "endColumn": 30,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/db/DatabasePersistenceManager.java",
              "type": "",
              "code": "                    throw (NoSuchItemStateException) e;\n                }\n                String msg = \"failed to read node state: \" + id;\n                log.error(msg, e);\n                throw new ItemStateException(msg, e);\n            } finally {\n                IOUtils.closeQuietly(in);"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "lockToken",
              "startLine": 1279,
              "startColumn": 19,
              "endLine": 1279,
              "endColumn": 28,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "NodeId",
              "code": "         */\n        public InternalLockInfo(NodeId lockToken, boolean sessionScoped,\n                                boolean deep, String lockOwner, long timeoutHint) {\n            super(lockToken, sessionScoped, deep, lockOwner, timeoutHint);\n        }\n\n        /**"
            },
            {
              "step": 1,
              "variableName": "super(lockToken, sessionScoped, deep, lockOwner, timeoutHint);",
              "startLine": 1279,
              "startColumn": 13,
              "endLine": 1279,
              "endColumn": 75,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "         */\n        public InternalLockInfo(NodeId lockToken, boolean sessionScoped,\n                                boolean deep, String lockOwner, long timeoutHint) {\n            super(lockToken, sessionScoped, deep, lockOwner, timeoutHint);\n        }\n\n        /**"
            },
            {
              "step": 2,
              "variableName": "new InternalLockInfo(",
              "startLine": 340,
              "startColumn": 33,
              "endLine": 341,
              "endColumn": 83,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "\n        SessionImpl session = (SessionImpl) node.getSession();\n        String lockOwner = (ownerInfo != null) ? ownerInfo : session.getUserID();\n        InternalLockInfo info = new InternalLockInfo(\n                node.getNodeId(), isSessionScoped, isDeep, lockOwner, timeoutHint);\n\n        ClusterOperation operation = null;"
            },
            {
              "step": 3,
              "variableName": "info",
              "startLine": 370,
              "startColumn": 17,
              "endLine": 370,
              "endColumn": 21,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "            }\n            if (info.isDeep() && element.hasPath(path)\n                    && element.getChildrenCount() > 0) {\n                info.throwLockException(\"Some child node is locked\", session);\n            }\n\n            // create lock token"
            },
            {
              "step": 4,
              "variableName": "throwLockException",
              "startLine": 259,
              "startColumn": 17,
              "endLine": 259,
              "endColumn": 35,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockInfo.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "     * @throws LockException always thrown, unless another error occurs\n     * @throws RepositoryException if the path of this lock can not be resolved\n     */\n    public void throwLockException(String message, SessionImpl session)\n            throws LockException, RepositoryException {\n        String path;\n        try {"
            },
            {
              "step": 5,
              "variableName": "id",
              "startLine": 264,
              "startColumn": 59,
              "endLine": 264,
              "endColumn": 61,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockInfo.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "        String path;\n        try {\n            path = session.getJCRPath(\n                    session.getHierarchyManager().getPath(id));\n        } catch (RepositoryException ignored) {\n            path = null;\n        }"
            },
            {
              "step": 6,
              "variableName": "id",
              "startLine": 264,
              "startColumn": 59,
              "endLine": 264,
              "endColumn": 61,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockInfo.java",
              "type": "NodeId",
              "code": "        String path;\n        try {\n            path = session.getJCRPath(\n                    session.getHierarchyManager().getPath(id));\n        } catch (RepositoryException ignored) {\n            path = null;\n        }"
            },
            {
              "step": 7,
              "variableName": "ItemId id",
              "startLine": 252,
              "startColumn": 25,
              "endLine": 252,
              "endColumn": 34,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/CachingHierarchyManager.java",
              "type": "NodeId",
              "code": "     * Overridden method simply checks whether we have an item matching the id\n     * and returns its path, otherwise calls base implementation.\n     */\n    public Path getPath(ItemId id)\n            throws ItemNotFoundException, RepositoryException {\n\n        if (id.denotesNode()) {"
            },
            {
              "step": 8,
              "variableName": "id",
              "startLine": 267,
              "startColumn": 30,
              "endLine": 267,
              "endColumn": 32,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/CachingHierarchyManager.java",
              "type": "NodeId",
              "code": "                }\n            }\n        }\n        return super.getPath(id);\n    }\n\n    /**"
            },
            {
              "step": 9,
              "variableName": "ItemId id",
              "startLine": 392,
              "startColumn": 25,
              "endLine": 392,
              "endColumn": 34,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "    /**\n     * {@inheritDoc}\n     */\n    public Path getPath(ItemId id)\n            throws ItemNotFoundException, RepositoryException {\n        // shortcut\n        if (id.equals(rootNodeId)) {"
            },
            {
              "step": 10,
              "variableName": "id",
              "startLine": 402,
              "startColumn": 45,
              "endLine": 402,
              "endColumn": 47,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "        PathBuilder builder = new PathBuilder();\n\n        try {\n            buildPath(builder, getItemState(id), new CycleDetector());\n            return builder.getPath();\n        } catch (NoSuchItemStateException nsise) {\n            String msg = \"failed to build path of \" + id;"
            },
            {
              "step": 11,
              "variableName": "ItemId id",
              "startLine": 152,
              "startColumn": 38,
              "endLine": 152,
              "endColumn": 47,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "     * @throws ItemStateException       if an error occurs\n     * @see ZombieHierarchyManager#getItemState(ItemId)\n     */\n    protected ItemState getItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n        return provider.getItemState(id);\n    }"
            },
            {
              "step": 12,
              "variableName": "id",
              "startLine": 154,
              "startColumn": 38,
              "endLine": 154,
              "endColumn": 40,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "     */\n    protected ItemState getItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n        return provider.getItemState(id);\n    }\n\n    /**"
            },
            {
              "step": 13,
              "variableName": "ItemId id",
              "startLine": 132,
              "startColumn": 39,
              "endLine": 132,
              "endColumn": 48,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/observation/ChangeLogBasedHierarchyMgr.java",
              "type": "NodeId",
              "code": "         * <code>id</code>.\n         * @throws ItemStateException if any other error occurs.\n         */\n        public ItemState getItemState(ItemId id) throws NoSuchItemStateException, ItemStateException {\n            // check ChangeLog first\n            try {\n                ItemState state = changes.get(id);"
            },
            {
              "step": 14,
              "variableName": "id",
              "startLine": 142,
              "startColumn": 38,
              "endLine": 142,
              "endColumn": 40,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/observation/ChangeLogBasedHierarchyMgr.java",
              "type": "NodeId",
              "code": "            } catch (NoSuchItemStateException e) {\n                // item has been deleted, but we still return it by asking base\n            }\n            return base.getItemState(id);\n        }\n\n        /**"
            },
            {
              "step": 15,
              "variableName": "ItemId id",
              "startLine": 258,
              "startColumn": 35,
              "endLine": 258,
              "endColumn": 44,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "    /**\n     * {@inheritDoc}\n     */\n    public ItemState getItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n        // check the virtual root ids (needed for overlay)\n        for (VirtualItemStateProvider virtualProvider : virtualProviders) {"
            },
            {
              "step": 16,
              "variableName": "id",
              "startLine": 271,
              "startColumn": 43,
              "endLine": 271,
              "endColumn": 45,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "        ISMLocking.ReadLock readLock = acquireReadLock(id);\n        try {\n            // check internal first\n            return getNonVirtualItemState(id);\n        } catch (NoSuchItemStateException e) {\n            // Fall through to virtual state providers. We can afford the\n            // exception-for-control-flow performance hit here, as almost"
            },
            {
              "step": 17,
              "variableName": "ItemId id",
              "startLine": 1767,
              "startColumn": 46,
              "endLine": 1767,
              "endColumn": 55,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "     * Returns the item state for the given id without considering virtual\n     * item state providers.\n     */\n    private ItemState getNonVirtualItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n        // First check if the item state is already in the cache\n        ItemState state = cache.retrieve(id);"
            },
            {
              "step": 18,
              "variableName": "id",
              "startLine": 1798,
              "startColumn": 35,
              "endLine": 1798,
              "endColumn": 37,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "        try {\n            // Load the item state from persistent storage\n            // NOTE: This needs to happen outside a synchronized block!\n            state = loadItemState(id);\n            state.setStatus(ItemState.STATUS_EXISTING);\n            state.setContainer(this);\n"
            },
            {
              "step": 19,
              "variableName": "ItemId id",
              "startLine": 1873,
              "startColumn": 37,
              "endLine": 1873,
              "endColumn": 46,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "     * @param id item id\n     * @return item state\n     */\n    private ItemState loadItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n\n        ItemState state;"
            },
            {
              "step": 20,
              "variableName": "(NodeId) id",
              "startLine": 1878,
              "startColumn": 37,
              "endLine": 1878,
              "endColumn": 48,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "\n        ItemState state;\n        if (id.denotesNode()) {\n            state = persistMgr.load((NodeId) id);\n        } else {\n            state = persistMgr.load((PropertyId) id);\n        }"
            },
            {
              "step": 21,
              "variableName": "NodeId id",
              "startLine": 366,
              "startColumn": 27,
              "endLine": 366,
              "endColumn": 36,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/db/DatabasePersistenceManager.java",
              "type": "NodeId",
              "code": "    /**\n     * {@inheritDoc}\n     */\n    public NodeState load(NodeId id)\n            throws NoSuchItemStateException, ItemStateException {\n        if (!initialized) {\n            throw new IllegalStateException(\"not initialized\");"
            },
            {
              "step": 22,
              "variableName": "msg",
              "startLine": 392,
              "startColumn": 27,
              "endLine": 392,
              "endColumn": 30,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/db/DatabasePersistenceManager.java",
              "type": "",
              "code": "                    throw (NoSuchItemStateException) e;\n                }\n                String msg = \"failed to read node state: \" + id;\n                log.error(msg, e);\n                throw new ItemStateException(msg, e);\n            } finally {\n                IOUtils.closeQuietly(in);"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "lockToken",
              "startLine": 1279,
              "startColumn": 19,
              "endLine": 1279,
              "endColumn": 28,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "NodeId",
              "code": "         */\n        public InternalLockInfo(NodeId lockToken, boolean sessionScoped,\n                                boolean deep, String lockOwner, long timeoutHint) {\n            super(lockToken, sessionScoped, deep, lockOwner, timeoutHint);\n        }\n\n        /**"
            },
            {
              "step": 1,
              "variableName": "super(lockToken, sessionScoped, deep, lockOwner, timeoutHint);",
              "startLine": 1279,
              "startColumn": 13,
              "endLine": 1279,
              "endColumn": 75,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "         */\n        public InternalLockInfo(NodeId lockToken, boolean sessionScoped,\n                                boolean deep, String lockOwner, long timeoutHint) {\n            super(lockToken, sessionScoped, deep, lockOwner, timeoutHint);\n        }\n\n        /**"
            },
            {
              "step": 2,
              "variableName": "new InternalLockInfo(",
              "startLine": 340,
              "startColumn": 33,
              "endLine": 341,
              "endColumn": 83,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "\n        SessionImpl session = (SessionImpl) node.getSession();\n        String lockOwner = (ownerInfo != null) ? ownerInfo : session.getUserID();\n        InternalLockInfo info = new InternalLockInfo(\n                node.getNodeId(), isSessionScoped, isDeep, lockOwner, timeoutHint);\n\n        ClusterOperation operation = null;"
            },
            {
              "step": 3,
              "variableName": "info",
              "startLine": 370,
              "startColumn": 17,
              "endLine": 370,
              "endColumn": 21,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "            }\n            if (info.isDeep() && element.hasPath(path)\n                    && element.getChildrenCount() > 0) {\n                info.throwLockException(\"Some child node is locked\", session);\n            }\n\n            // create lock token"
            },
            {
              "step": 4,
              "variableName": "throwLockException",
              "startLine": 259,
              "startColumn": 17,
              "endLine": 259,
              "endColumn": 35,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockInfo.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "     * @throws LockException always thrown, unless another error occurs\n     * @throws RepositoryException if the path of this lock can not be resolved\n     */\n    public void throwLockException(String message, SessionImpl session)\n            throws LockException, RepositoryException {\n        String path;\n        try {"
            },
            {
              "step": 5,
              "variableName": "id",
              "startLine": 264,
              "startColumn": 59,
              "endLine": 264,
              "endColumn": 61,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockInfo.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "        String path;\n        try {\n            path = session.getJCRPath(\n                    session.getHierarchyManager().getPath(id));\n        } catch (RepositoryException ignored) {\n            path = null;\n        }"
            },
            {
              "step": 6,
              "variableName": "id",
              "startLine": 264,
              "startColumn": 59,
              "endLine": 264,
              "endColumn": 61,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockInfo.java",
              "type": "NodeId",
              "code": "        String path;\n        try {\n            path = session.getJCRPath(\n                    session.getHierarchyManager().getPath(id));\n        } catch (RepositoryException ignored) {\n            path = null;\n        }"
            },
            {
              "step": 7,
              "variableName": "ItemId id",
              "startLine": 252,
              "startColumn": 25,
              "endLine": 252,
              "endColumn": 34,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/CachingHierarchyManager.java",
              "type": "NodeId",
              "code": "     * Overridden method simply checks whether we have an item matching the id\n     * and returns its path, otherwise calls base implementation.\n     */\n    public Path getPath(ItemId id)\n            throws ItemNotFoundException, RepositoryException {\n\n        if (id.denotesNode()) {"
            },
            {
              "step": 8,
              "variableName": "id",
              "startLine": 267,
              "startColumn": 30,
              "endLine": 267,
              "endColumn": 32,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/CachingHierarchyManager.java",
              "type": "NodeId",
              "code": "                }\n            }\n        }\n        return super.getPath(id);\n    }\n\n    /**"
            },
            {
              "step": 9,
              "variableName": "ItemId id",
              "startLine": 392,
              "startColumn": 25,
              "endLine": 392,
              "endColumn": 34,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "    /**\n     * {@inheritDoc}\n     */\n    public Path getPath(ItemId id)\n            throws ItemNotFoundException, RepositoryException {\n        // shortcut\n        if (id.equals(rootNodeId)) {"
            },
            {
              "step": 10,
              "variableName": "id",
              "startLine": 402,
              "startColumn": 45,
              "endLine": 402,
              "endColumn": 47,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "        PathBuilder builder = new PathBuilder();\n\n        try {\n            buildPath(builder, getItemState(id), new CycleDetector());\n            return builder.getPath();\n        } catch (NoSuchItemStateException nsise) {\n            String msg = \"failed to build path of \" + id;"
            },
            {
              "step": 11,
              "variableName": "ItemId id",
              "startLine": 152,
              "startColumn": 38,
              "endLine": 152,
              "endColumn": 47,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "     * @throws ItemStateException       if an error occurs\n     * @see ZombieHierarchyManager#getItemState(ItemId)\n     */\n    protected ItemState getItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n        return provider.getItemState(id);\n    }"
            },
            {
              "step": 12,
              "variableName": "id",
              "startLine": 154,
              "startColumn": 38,
              "endLine": 154,
              "endColumn": 40,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "     */\n    protected ItemState getItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n        return provider.getItemState(id);\n    }\n\n    /**"
            },
            {
              "step": 13,
              "variableName": "ItemId id",
              "startLine": 120,
              "startColumn": 48,
              "endLine": 120,
              "endColumn": 57,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/VersionItemStateProvider.java",
              "type": "NodeId",
              "code": "    /**\n     * @inheritDoc\n     */\n    public synchronized ItemState getItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n        ItemState item = items.get(id);\n        if (item == null) {"
            },
            {
              "step": 14,
              "variableName": "id",
              "startLine": 124,
              "startColumn": 42,
              "endLine": 124,
              "endColumn": 44,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/VersionItemStateProvider.java",
              "type": "NodeId",
              "code": "            throws NoSuchItemStateException, ItemStateException {\n        ItemState item = items.get(id);\n        if (item == null) {\n            item = stateMgr.getItemState(id);\n            items.put(id, item);\n        }\n        return item;"
            },
            {
              "step": 15,
              "variableName": "ItemId id",
              "startLine": 258,
              "startColumn": 35,
              "endLine": 258,
              "endColumn": 44,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "    /**\n     * {@inheritDoc}\n     */\n    public ItemState getItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n        // check the virtual root ids (needed for overlay)\n        for (VirtualItemStateProvider virtualProvider : virtualProviders) {"
            },
            {
              "step": 16,
              "variableName": "id",
              "startLine": 271,
              "startColumn": 43,
              "endLine": 271,
              "endColumn": 45,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "        ISMLocking.ReadLock readLock = acquireReadLock(id);\n        try {\n            // check internal first\n            return getNonVirtualItemState(id);\n        } catch (NoSuchItemStateException e) {\n            // Fall through to virtual state providers. We can afford the\n            // exception-for-control-flow performance hit here, as almost"
            },
            {
              "step": 17,
              "variableName": "ItemId id",
              "startLine": 1767,
              "startColumn": 46,
              "endLine": 1767,
              "endColumn": 55,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "     * Returns the item state for the given id without considering virtual\n     * item state providers.\n     */\n    private ItemState getNonVirtualItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n        // First check if the item state is already in the cache\n        ItemState state = cache.retrieve(id);"
            },
            {
              "step": 18,
              "variableName": "id",
              "startLine": 1798,
              "startColumn": 35,
              "endLine": 1798,
              "endColumn": 37,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "        try {\n            // Load the item state from persistent storage\n            // NOTE: This needs to happen outside a synchronized block!\n            state = loadItemState(id);\n            state.setStatus(ItemState.STATUS_EXISTING);\n            state.setContainer(this);\n"
            },
            {
              "step": 19,
              "variableName": "ItemId id",
              "startLine": 1873,
              "startColumn": 37,
              "endLine": 1873,
              "endColumn": 46,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "     * @param id item id\n     * @return item state\n     */\n    private ItemState loadItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n\n        ItemState state;"
            },
            {
              "step": 20,
              "variableName": "(NodeId) id",
              "startLine": 1878,
              "startColumn": 37,
              "endLine": 1878,
              "endColumn": 48,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "\n        ItemState state;\n        if (id.denotesNode()) {\n            state = persistMgr.load((NodeId) id);\n        } else {\n            state = persistMgr.load((PropertyId) id);\n        }"
            },
            {
              "step": 21,
              "variableName": "NodeId id",
              "startLine": 366,
              "startColumn": 27,
              "endLine": 366,
              "endColumn": 36,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/db/DatabasePersistenceManager.java",
              "type": "NodeId",
              "code": "    /**\n     * {@inheritDoc}\n     */\n    public NodeState load(NodeId id)\n            throws NoSuchItemStateException, ItemStateException {\n        if (!initialized) {\n            throw new IllegalStateException(\"not initialized\");"
            },
            {
              "step": 22,
              "variableName": "msg",
              "startLine": 392,
              "startColumn": 27,
              "endLine": 392,
              "endColumn": 30,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/db/DatabasePersistenceManager.java",
              "type": "",
              "code": "                    throw (NoSuchItemStateException) e;\n                }\n                String msg = \"failed to read node state: \" + id;\n                log.error(msg, e);\n                throw new ItemStateException(msg, e);\n            } finally {\n                IOUtils.closeQuietly(in);"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 14,
      "fileName": "DatabasePersistenceManager.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "lockToken",
              "startLine": 1279,
              "startColumn": 19,
              "endLine": 1279,
              "endColumn": 28,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "NodeId",
              "code": "         */\n        public InternalLockInfo(NodeId lockToken, boolean sessionScoped,\n                                boolean deep, String lockOwner, long timeoutHint) {\n            super(lockToken, sessionScoped, deep, lockOwner, timeoutHint);\n        }\n\n        /**"
            },
            {
              "step": 1,
              "variableName": "super(lockToken, sessionScoped, deep, lockOwner, timeoutHint);",
              "startLine": 1279,
              "startColumn": 13,
              "endLine": 1279,
              "endColumn": 75,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "         */\n        public InternalLockInfo(NodeId lockToken, boolean sessionScoped,\n                                boolean deep, String lockOwner, long timeoutHint) {\n            super(lockToken, sessionScoped, deep, lockOwner, timeoutHint);\n        }\n\n        /**"
            },
            {
              "step": 2,
              "variableName": "new InternalLockInfo(",
              "startLine": 340,
              "startColumn": 33,
              "endLine": 341,
              "endColumn": 83,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "\n        SessionImpl session = (SessionImpl) node.getSession();\n        String lockOwner = (ownerInfo != null) ? ownerInfo : session.getUserID();\n        InternalLockInfo info = new InternalLockInfo(\n                node.getNodeId(), isSessionScoped, isDeep, lockOwner, timeoutHint);\n\n        ClusterOperation operation = null;"
            },
            {
              "step": 3,
              "variableName": "info",
              "startLine": 370,
              "startColumn": 17,
              "endLine": 370,
              "endColumn": 21,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "            }\n            if (info.isDeep() && element.hasPath(path)\n                    && element.getChildrenCount() > 0) {\n                info.throwLockException(\"Some child node is locked\", session);\n            }\n\n            // create lock token"
            },
            {
              "step": 4,
              "variableName": "throwLockException",
              "startLine": 259,
              "startColumn": 17,
              "endLine": 259,
              "endColumn": 35,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockInfo.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "     * @throws LockException always thrown, unless another error occurs\n     * @throws RepositoryException if the path of this lock can not be resolved\n     */\n    public void throwLockException(String message, SessionImpl session)\n            throws LockException, RepositoryException {\n        String path;\n        try {"
            },
            {
              "step": 5,
              "variableName": "id",
              "startLine": 264,
              "startColumn": 59,
              "endLine": 264,
              "endColumn": 61,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockInfo.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "        String path;\n        try {\n            path = session.getJCRPath(\n                    session.getHierarchyManager().getPath(id));\n        } catch (RepositoryException ignored) {\n            path = null;\n        }"
            },
            {
              "step": 6,
              "variableName": "id",
              "startLine": 264,
              "startColumn": 59,
              "endLine": 264,
              "endColumn": 61,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockInfo.java",
              "type": "NodeId",
              "code": "        String path;\n        try {\n            path = session.getJCRPath(\n                    session.getHierarchyManager().getPath(id));\n        } catch (RepositoryException ignored) {\n            path = null;\n        }"
            },
            {
              "step": 7,
              "variableName": "ItemId id",
              "startLine": 252,
              "startColumn": 25,
              "endLine": 252,
              "endColumn": 34,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/CachingHierarchyManager.java",
              "type": "NodeId",
              "code": "     * Overridden method simply checks whether we have an item matching the id\n     * and returns its path, otherwise calls base implementation.\n     */\n    public Path getPath(ItemId id)\n            throws ItemNotFoundException, RepositoryException {\n\n        if (id.denotesNode()) {"
            },
            {
              "step": 8,
              "variableName": "id",
              "startLine": 267,
              "startColumn": 30,
              "endLine": 267,
              "endColumn": 32,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/CachingHierarchyManager.java",
              "type": "NodeId",
              "code": "                }\n            }\n        }\n        return super.getPath(id);\n    }\n\n    /**"
            },
            {
              "step": 9,
              "variableName": "ItemId id",
              "startLine": 392,
              "startColumn": 25,
              "endLine": 392,
              "endColumn": 34,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "    /**\n     * {@inheritDoc}\n     */\n    public Path getPath(ItemId id)\n            throws ItemNotFoundException, RepositoryException {\n        // shortcut\n        if (id.equals(rootNodeId)) {"
            },
            {
              "step": 10,
              "variableName": "id",
              "startLine": 402,
              "startColumn": 45,
              "endLine": 402,
              "endColumn": 47,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "        PathBuilder builder = new PathBuilder();\n\n        try {\n            buildPath(builder, getItemState(id), new CycleDetector());\n            return builder.getPath();\n        } catch (NoSuchItemStateException nsise) {\n            String msg = \"failed to build path of \" + id;"
            },
            {
              "step": 11,
              "variableName": "ItemId id",
              "startLine": 152,
              "startColumn": 38,
              "endLine": 152,
              "endColumn": 47,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "     * @throws ItemStateException       if an error occurs\n     * @see ZombieHierarchyManager#getItemState(ItemId)\n     */\n    protected ItemState getItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n        return provider.getItemState(id);\n    }"
            },
            {
              "step": 12,
              "variableName": "id",
              "startLine": 154,
              "startColumn": 38,
              "endLine": 154,
              "endColumn": 40,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "     */\n    protected ItemState getItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n        return provider.getItemState(id);\n    }\n\n    /**"
            },
            {
              "step": 13,
              "variableName": "ItemId id",
              "startLine": 258,
              "startColumn": 35,
              "endLine": 258,
              "endColumn": 44,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "    /**\n     * {@inheritDoc}\n     */\n    public ItemState getItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n        // check the virtual root ids (needed for overlay)\n        for (VirtualItemStateProvider virtualProvider : virtualProviders) {"
            },
            {
              "step": 14,
              "variableName": "id",
              "startLine": 284,
              "startColumn": 46,
              "endLine": 284,
              "endColumn": 48,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "\n        // check if there is a virtual state for the specified item\n        for (VirtualItemStateProvider virtualProvider : virtualProviders) {\n            if (virtualProvider.hasItemState(id)) {\n                return virtualProvider.getItemState(id);\n            }\n        }"
            },
            {
              "step": 15,
              "variableName": "ItemId id",
              "startLine": 140,
              "startColumn": 33,
              "endLine": 140,
              "endColumn": 42,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/VersionItemStateProvider.java",
              "type": "NodeId",
              "code": "    /**\n     * @inheritDoc\n     */\n    public boolean hasItemState(ItemId id) {\n        return items.get(id) != null || stateMgr.hasItemState(id);\n    }\n"
            },
            {
              "step": 16,
              "variableName": "id",
              "startLine": 141,
              "startColumn": 63,
              "endLine": 141,
              "endColumn": 65,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/VersionItemStateProvider.java",
              "type": "NodeId",
              "code": "     * @inheritDoc\n     */\n    public boolean hasItemState(ItemId id) {\n        return items.get(id) != null || stateMgr.hasItemState(id);\n    }\n\n    /**"
            },
            {
              "step": 17,
              "variableName": "ItemId id",
              "startLine": 296,
              "startColumn": 33,
              "endLine": 296,
              "endColumn": 42,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "    /**\n     * {@inheritDoc}\n     */\n    public boolean hasItemState(ItemId id) {\n        // check the virtual root ids (needed for overlay)\n        for (VirtualItemStateProvider virtualProvider : virtualProviders) {\n            if (virtualProvider.isVirtualRoot(id)) {"
            },
            {
              "step": 18,
              "variableName": "id",
              "startLine": 317,
              "startColumn": 40,
              "endLine": 317,
              "endColumn": 42,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "            }\n\n            // check if this manager has the item state\n            if (hasNonVirtualItemState(id)) {\n                return true;\n            }\n        } finally {"
            },
            {
              "step": 19,
              "variableName": "ItemId id",
              "startLine": 1820,
              "startColumn": 46,
              "endLine": 1820,
              "endColumn": 55,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "     * Checks if this item state manager has the given item state without\n     * considering the virtual item state managers.\n     */\n    protected boolean hasNonVirtualItemState(ItemId id) {\n        if (cache.isCached(id)) {\n            return true;\n        }"
            },
            {
              "step": 20,
              "variableName": "(NodeId) id",
              "startLine": 1827,
              "startColumn": 42,
              "endLine": 1827,
              "endColumn": 53,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "\n        try {\n            if (id.denotesNode()) {\n                return persistMgr.exists((NodeId) id);\n            } else {\n                return persistMgr.exists((PropertyId) id);\n            }"
            },
            {
              "step": 21,
              "variableName": "NodeId id",
              "startLine": 688,
              "startColumn": 27,
              "endLine": 688,
              "endColumn": 36,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/db/DatabasePersistenceManager.java",
              "type": "NodeId",
              "code": "    /**\n     * {@inheritDoc}\n     */\n    public boolean exists(NodeId id) throws ItemStateException {\n        if (!initialized) {\n            throw new IllegalStateException(\"not initialized\");\n        }"
            },
            {
              "step": 22,
              "variableName": "msg",
              "startLine": 703,
              "startColumn": 27,
              "endLine": 703,
              "endColumn": 30,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/db/DatabasePersistenceManager.java",
              "type": "",
              "code": "                return rs.next();\n            } catch (Exception e) {\n                String msg = \"failed to check existence of node state: \" + id;\n                log.error(msg, e);\n                throw new ItemStateException(msg, e);\n            } finally {\n                closeResultSet(rs);"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "lockToken",
              "startLine": 1279,
              "startColumn": 19,
              "endLine": 1279,
              "endColumn": 28,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "NodeId",
              "code": "         */\n        public InternalLockInfo(NodeId lockToken, boolean sessionScoped,\n                                boolean deep, String lockOwner, long timeoutHint) {\n            super(lockToken, sessionScoped, deep, lockOwner, timeoutHint);\n        }\n\n        /**"
            },
            {
              "step": 1,
              "variableName": "super(lockToken, sessionScoped, deep, lockOwner, timeoutHint);",
              "startLine": 1279,
              "startColumn": 13,
              "endLine": 1279,
              "endColumn": 75,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "         */\n        public InternalLockInfo(NodeId lockToken, boolean sessionScoped,\n                                boolean deep, String lockOwner, long timeoutHint) {\n            super(lockToken, sessionScoped, deep, lockOwner, timeoutHint);\n        }\n\n        /**"
            },
            {
              "step": 2,
              "variableName": "new InternalLockInfo(",
              "startLine": 340,
              "startColumn": 33,
              "endLine": 341,
              "endColumn": 83,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "\n        SessionImpl session = (SessionImpl) node.getSession();\n        String lockOwner = (ownerInfo != null) ? ownerInfo : session.getUserID();\n        InternalLockInfo info = new InternalLockInfo(\n                node.getNodeId(), isSessionScoped, isDeep, lockOwner, timeoutHint);\n\n        ClusterOperation operation = null;"
            },
            {
              "step": 3,
              "variableName": "info",
              "startLine": 370,
              "startColumn": 17,
              "endLine": 370,
              "endColumn": 21,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "            }\n            if (info.isDeep() && element.hasPath(path)\n                    && element.getChildrenCount() > 0) {\n                info.throwLockException(\"Some child node is locked\", session);\n            }\n\n            // create lock token"
            },
            {
              "step": 4,
              "variableName": "throwLockException",
              "startLine": 259,
              "startColumn": 17,
              "endLine": 259,
              "endColumn": 35,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockInfo.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "     * @throws LockException always thrown, unless another error occurs\n     * @throws RepositoryException if the path of this lock can not be resolved\n     */\n    public void throwLockException(String message, SessionImpl session)\n            throws LockException, RepositoryException {\n        String path;\n        try {"
            },
            {
              "step": 5,
              "variableName": "id",
              "startLine": 264,
              "startColumn": 59,
              "endLine": 264,
              "endColumn": 61,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockInfo.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "        String path;\n        try {\n            path = session.getJCRPath(\n                    session.getHierarchyManager().getPath(id));\n        } catch (RepositoryException ignored) {\n            path = null;\n        }"
            },
            {
              "step": 6,
              "variableName": "id",
              "startLine": 264,
              "startColumn": 59,
              "endLine": 264,
              "endColumn": 61,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockInfo.java",
              "type": "NodeId",
              "code": "        String path;\n        try {\n            path = session.getJCRPath(\n                    session.getHierarchyManager().getPath(id));\n        } catch (RepositoryException ignored) {\n            path = null;\n        }"
            },
            {
              "step": 7,
              "variableName": "ItemId id",
              "startLine": 252,
              "startColumn": 25,
              "endLine": 252,
              "endColumn": 34,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/CachingHierarchyManager.java",
              "type": "NodeId",
              "code": "     * Overridden method simply checks whether we have an item matching the id\n     * and returns its path, otherwise calls base implementation.\n     */\n    public Path getPath(ItemId id)\n            throws ItemNotFoundException, RepositoryException {\n\n        if (id.denotesNode()) {"
            },
            {
              "step": 8,
              "variableName": "id",
              "startLine": 267,
              "startColumn": 30,
              "endLine": 267,
              "endColumn": 32,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/CachingHierarchyManager.java",
              "type": "NodeId",
              "code": "                }\n            }\n        }\n        return super.getPath(id);\n    }\n\n    /**"
            },
            {
              "step": 9,
              "variableName": "ItemId id",
              "startLine": 392,
              "startColumn": 25,
              "endLine": 392,
              "endColumn": 34,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "    /**\n     * {@inheritDoc}\n     */\n    public Path getPath(ItemId id)\n            throws ItemNotFoundException, RepositoryException {\n        // shortcut\n        if (id.equals(rootNodeId)) {"
            },
            {
              "step": 10,
              "variableName": "id",
              "startLine": 402,
              "startColumn": 45,
              "endLine": 402,
              "endColumn": 47,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "        PathBuilder builder = new PathBuilder();\n\n        try {\n            buildPath(builder, getItemState(id), new CycleDetector());\n            return builder.getPath();\n        } catch (NoSuchItemStateException nsise) {\n            String msg = \"failed to build path of \" + id;"
            },
            {
              "step": 11,
              "variableName": "ItemId id",
              "startLine": 152,
              "startColumn": 38,
              "endLine": 152,
              "endColumn": 47,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "     * @throws ItemStateException       if an error occurs\n     * @see ZombieHierarchyManager#getItemState(ItemId)\n     */\n    protected ItemState getItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n        return provider.getItemState(id);\n    }"
            },
            {
              "step": 12,
              "variableName": "id",
              "startLine": 154,
              "startColumn": 38,
              "endLine": 154,
              "endColumn": 40,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "     */\n    protected ItemState getItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n        return provider.getItemState(id);\n    }\n\n    /**"
            },
            {
              "step": 13,
              "variableName": "ItemId id",
              "startLine": 239,
              "startColumn": 35,
              "endLine": 239,
              "endColumn": 44,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/XAItemStateManager.java",
              "type": "NodeId",
              "code": "     * the transactional change log. Fallback is always the call to the base\n     * class.\n     */\n    public ItemState getItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n\n        if (virtualProvider != null && virtualProvider.hasItemState(id)) {"
            },
            {
              "step": 14,
              "variableName": "id",
              "startLine": 242,
              "startColumn": 69,
              "endLine": 242,
              "endColumn": 71,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/XAItemStateManager.java",
              "type": "NodeId",
              "code": "    public ItemState getItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n\n        if (virtualProvider != null && virtualProvider.hasItemState(id)) {\n            return virtualProvider.getItemState(id);\n        }\n        // 1) check local changes"
            },
            {
              "step": 15,
              "variableName": "ItemId id",
              "startLine": 140,
              "startColumn": 33,
              "endLine": 140,
              "endColumn": 42,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/VersionItemStateProvider.java",
              "type": "NodeId",
              "code": "    /**\n     * @inheritDoc\n     */\n    public boolean hasItemState(ItemId id) {\n        return items.get(id) != null || stateMgr.hasItemState(id);\n    }\n"
            },
            {
              "step": 16,
              "variableName": "id",
              "startLine": 141,
              "startColumn": 63,
              "endLine": 141,
              "endColumn": 65,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/VersionItemStateProvider.java",
              "type": "NodeId",
              "code": "     * @inheritDoc\n     */\n    public boolean hasItemState(ItemId id) {\n        return items.get(id) != null || stateMgr.hasItemState(id);\n    }\n\n    /**"
            },
            {
              "step": 17,
              "variableName": "ItemId id",
              "startLine": 296,
              "startColumn": 33,
              "endLine": 296,
              "endColumn": 42,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "    /**\n     * {@inheritDoc}\n     */\n    public boolean hasItemState(ItemId id) {\n        // check the virtual root ids (needed for overlay)\n        for (VirtualItemStateProvider virtualProvider : virtualProviders) {\n            if (virtualProvider.isVirtualRoot(id)) {"
            },
            {
              "step": 18,
              "variableName": "id",
              "startLine": 317,
              "startColumn": 40,
              "endLine": 317,
              "endColumn": 42,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "            }\n\n            // check if this manager has the item state\n            if (hasNonVirtualItemState(id)) {\n                return true;\n            }\n        } finally {"
            },
            {
              "step": 19,
              "variableName": "ItemId id",
              "startLine": 1820,
              "startColumn": 46,
              "endLine": 1820,
              "endColumn": 55,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "     * Checks if this item state manager has the given item state without\n     * considering the virtual item state managers.\n     */\n    protected boolean hasNonVirtualItemState(ItemId id) {\n        if (cache.isCached(id)) {\n            return true;\n        }"
            },
            {
              "step": 20,
              "variableName": "(NodeId) id",
              "startLine": 1827,
              "startColumn": 42,
              "endLine": 1827,
              "endColumn": 53,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "\n        try {\n            if (id.denotesNode()) {\n                return persistMgr.exists((NodeId) id);\n            } else {\n                return persistMgr.exists((PropertyId) id);\n            }"
            },
            {
              "step": 21,
              "variableName": "NodeId id",
              "startLine": 688,
              "startColumn": 27,
              "endLine": 688,
              "endColumn": 36,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/db/DatabasePersistenceManager.java",
              "type": "NodeId",
              "code": "    /**\n     * {@inheritDoc}\n     */\n    public boolean exists(NodeId id) throws ItemStateException {\n        if (!initialized) {\n            throw new IllegalStateException(\"not initialized\");\n        }"
            },
            {
              "step": 22,
              "variableName": "msg",
              "startLine": 703,
              "startColumn": 27,
              "endLine": 703,
              "endColumn": 30,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/db/DatabasePersistenceManager.java",
              "type": "",
              "code": "                return rs.next();\n            } catch (Exception e) {\n                String msg = \"failed to check existence of node state: \" + id;\n                log.error(msg, e);\n                throw new ItemStateException(msg, e);\n            } finally {\n                closeResultSet(rs);"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "lockToken",
              "startLine": 1279,
              "startColumn": 19,
              "endLine": 1279,
              "endColumn": 28,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "NodeId",
              "code": "         */\n        public InternalLockInfo(NodeId lockToken, boolean sessionScoped,\n                                boolean deep, String lockOwner, long timeoutHint) {\n            super(lockToken, sessionScoped, deep, lockOwner, timeoutHint);\n        }\n\n        /**"
            },
            {
              "step": 1,
              "variableName": "super(lockToken, sessionScoped, deep, lockOwner, timeoutHint);",
              "startLine": 1279,
              "startColumn": 13,
              "endLine": 1279,
              "endColumn": 75,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "         */\n        public InternalLockInfo(NodeId lockToken, boolean sessionScoped,\n                                boolean deep, String lockOwner, long timeoutHint) {\n            super(lockToken, sessionScoped, deep, lockOwner, timeoutHint);\n        }\n\n        /**"
            },
            {
              "step": 2,
              "variableName": "new InternalLockInfo(",
              "startLine": 340,
              "startColumn": 33,
              "endLine": 341,
              "endColumn": 83,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "\n        SessionImpl session = (SessionImpl) node.getSession();\n        String lockOwner = (ownerInfo != null) ? ownerInfo : session.getUserID();\n        InternalLockInfo info = new InternalLockInfo(\n                node.getNodeId(), isSessionScoped, isDeep, lockOwner, timeoutHint);\n\n        ClusterOperation operation = null;"
            },
            {
              "step": 3,
              "variableName": "info",
              "startLine": 370,
              "startColumn": 17,
              "endLine": 370,
              "endColumn": 21,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "            }\n            if (info.isDeep() && element.hasPath(path)\n                    && element.getChildrenCount() > 0) {\n                info.throwLockException(\"Some child node is locked\", session);\n            }\n\n            // create lock token"
            },
            {
              "step": 4,
              "variableName": "throwLockException",
              "startLine": 259,
              "startColumn": 17,
              "endLine": 259,
              "endColumn": 35,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockInfo.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "     * @throws LockException always thrown, unless another error occurs\n     * @throws RepositoryException if the path of this lock can not be resolved\n     */\n    public void throwLockException(String message, SessionImpl session)\n            throws LockException, RepositoryException {\n        String path;\n        try {"
            },
            {
              "step": 5,
              "variableName": "id",
              "startLine": 264,
              "startColumn": 59,
              "endLine": 264,
              "endColumn": 61,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockInfo.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "        String path;\n        try {\n            path = session.getJCRPath(\n                    session.getHierarchyManager().getPath(id));\n        } catch (RepositoryException ignored) {\n            path = null;\n        }"
            },
            {
              "step": 6,
              "variableName": "id",
              "startLine": 264,
              "startColumn": 59,
              "endLine": 264,
              "endColumn": 61,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockInfo.java",
              "type": "NodeId",
              "code": "        String path;\n        try {\n            path = session.getJCRPath(\n                    session.getHierarchyManager().getPath(id));\n        } catch (RepositoryException ignored) {\n            path = null;\n        }"
            },
            {
              "step": 7,
              "variableName": "ItemId id",
              "startLine": 252,
              "startColumn": 25,
              "endLine": 252,
              "endColumn": 34,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/CachingHierarchyManager.java",
              "type": "NodeId",
              "code": "     * Overridden method simply checks whether we have an item matching the id\n     * and returns its path, otherwise calls base implementation.\n     */\n    public Path getPath(ItemId id)\n            throws ItemNotFoundException, RepositoryException {\n\n        if (id.denotesNode()) {"
            },
            {
              "step": 8,
              "variableName": "id",
              "startLine": 267,
              "startColumn": 30,
              "endLine": 267,
              "endColumn": 32,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/CachingHierarchyManager.java",
              "type": "NodeId",
              "code": "                }\n            }\n        }\n        return super.getPath(id);\n    }\n\n    /**"
            },
            {
              "step": 9,
              "variableName": "ItemId id",
              "startLine": 392,
              "startColumn": 25,
              "endLine": 392,
              "endColumn": 34,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "    /**\n     * {@inheritDoc}\n     */\n    public Path getPath(ItemId id)\n            throws ItemNotFoundException, RepositoryException {\n        // shortcut\n        if (id.equals(rootNodeId)) {"
            },
            {
              "step": 10,
              "variableName": "id",
              "startLine": 402,
              "startColumn": 45,
              "endLine": 402,
              "endColumn": 47,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "        PathBuilder builder = new PathBuilder();\n\n        try {\n            buildPath(builder, getItemState(id), new CycleDetector());\n            return builder.getPath();\n        } catch (NoSuchItemStateException nsise) {\n            String msg = \"failed to build path of \" + id;"
            },
            {
              "step": 11,
              "variableName": "ItemId id",
              "startLine": 152,
              "startColumn": 38,
              "endLine": 152,
              "endColumn": 47,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "     * @throws ItemStateException       if an error occurs\n     * @see ZombieHierarchyManager#getItemState(ItemId)\n     */\n    protected ItemState getItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n        return provider.getItemState(id);\n    }"
            },
            {
              "step": 12,
              "variableName": "id",
              "startLine": 154,
              "startColumn": 38,
              "endLine": 154,
              "endColumn": 40,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "     */\n    protected ItemState getItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n        return provider.getItemState(id);\n    }\n\n    /**"
            },
            {
              "step": 13,
              "variableName": "ItemId id",
              "startLine": 160,
              "startColumn": 35,
              "endLine": 160,
              "endColumn": 44,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/LocalItemStateManager.java",
              "type": "NodeId",
              "code": "    /**\n     * {@inheritDoc}\n     */\n    public ItemState getItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n\n        // check change log"
            },
            {
              "step": 14,
              "variableName": "(NodeId) id",
              "startLine": 175,
              "startColumn": 42,
              "endLine": 175,
              "endColumn": 53,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/LocalItemStateManager.java",
              "type": "NodeId",
              "code": "            if (state == null) {\n                // regular behaviour\n                if (id.denotesNode()) {\n                    state = getNodeState((NodeId) id);\n                } else {\n                    state = getPropertyState((PropertyId) id);\n                }"
            },
            {
              "step": 15,
              "variableName": "NodeId id",
              "startLine": 106,
              "startColumn": 38,
              "endLine": 106,
              "endColumn": 47,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/LocalItemStateManager.java",
              "type": "NodeId",
              "code": "     * @throws NoSuchItemStateException\n     * @throws ItemStateException\n     */\n    protected NodeState getNodeState(NodeId id)\n            throws NoSuchItemStateException, ItemStateException {\n\n        // load from parent manager and wrap"
            },
            {
              "step": 16,
              "variableName": "id",
              "startLine": 110,
              "startColumn": 67,
              "endLine": 110,
              "endColumn": 69,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/LocalItemStateManager.java",
              "type": "NodeId",
              "code": "            throws NoSuchItemStateException, ItemStateException {\n\n        // load from parent manager and wrap\n        NodeState state = (NodeState) sharedStateMgr.getItemState(id);\n        state = new NodeState(state, state.getStatus(), false);\n\n        // put it in cache"
            },
            {
              "step": 17,
              "variableName": "ItemId id",
              "startLine": 258,
              "startColumn": 35,
              "endLine": 258,
              "endColumn": 44,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "    /**\n     * {@inheritDoc}\n     */\n    public ItemState getItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n        // check the virtual root ids (needed for overlay)\n        for (VirtualItemStateProvider virtualProvider : virtualProviders) {"
            },
            {
              "step": 18,
              "variableName": "id",
              "startLine": 284,
              "startColumn": 46,
              "endLine": 284,
              "endColumn": 48,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "\n        // check if there is a virtual state for the specified item\n        for (VirtualItemStateProvider virtualProvider : virtualProviders) {\n            if (virtualProvider.hasItemState(id)) {\n                return virtualProvider.getItemState(id);\n            }\n        }"
            },
            {
              "step": 19,
              "variableName": "ItemId id",
              "startLine": 140,
              "startColumn": 33,
              "endLine": 140,
              "endColumn": 42,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/VersionItemStateProvider.java",
              "type": "NodeId",
              "code": "    /**\n     * @inheritDoc\n     */\n    public boolean hasItemState(ItemId id) {\n        return items.get(id) != null || stateMgr.hasItemState(id);\n    }\n"
            },
            {
              "step": 20,
              "variableName": "id",
              "startLine": 141,
              "startColumn": 63,
              "endLine": 141,
              "endColumn": 65,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/VersionItemStateProvider.java",
              "type": "NodeId",
              "code": "     * @inheritDoc\n     */\n    public boolean hasItemState(ItemId id) {\n        return items.get(id) != null || stateMgr.hasItemState(id);\n    }\n\n    /**"
            },
            {
              "step": 21,
              "variableName": "ItemId id",
              "startLine": 296,
              "startColumn": 33,
              "endLine": 296,
              "endColumn": 42,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "    /**\n     * {@inheritDoc}\n     */\n    public boolean hasItemState(ItemId id) {\n        // check the virtual root ids (needed for overlay)\n        for (VirtualItemStateProvider virtualProvider : virtualProviders) {\n            if (virtualProvider.isVirtualRoot(id)) {"
            },
            {
              "step": 22,
              "variableName": "id",
              "startLine": 317,
              "startColumn": 40,
              "endLine": 317,
              "endColumn": 42,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "            }\n\n            // check if this manager has the item state\n            if (hasNonVirtualItemState(id)) {\n                return true;\n            }\n        } finally {"
            },
            {
              "step": 23,
              "variableName": "ItemId id",
              "startLine": 1820,
              "startColumn": 46,
              "endLine": 1820,
              "endColumn": 55,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "     * Checks if this item state manager has the given item state without\n     * considering the virtual item state managers.\n     */\n    protected boolean hasNonVirtualItemState(ItemId id) {\n        if (cache.isCached(id)) {\n            return true;\n        }"
            },
            {
              "step": 24,
              "variableName": "(NodeId) id",
              "startLine": 1827,
              "startColumn": 42,
              "endLine": 1827,
              "endColumn": 53,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "\n        try {\n            if (id.denotesNode()) {\n                return persistMgr.exists((NodeId) id);\n            } else {\n                return persistMgr.exists((PropertyId) id);\n            }"
            },
            {
              "step": 25,
              "variableName": "NodeId id",
              "startLine": 688,
              "startColumn": 27,
              "endLine": 688,
              "endColumn": 36,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/db/DatabasePersistenceManager.java",
              "type": "NodeId",
              "code": "    /**\n     * {@inheritDoc}\n     */\n    public boolean exists(NodeId id) throws ItemStateException {\n        if (!initialized) {\n            throw new IllegalStateException(\"not initialized\");\n        }"
            },
            {
              "step": 26,
              "variableName": "msg",
              "startLine": 703,
              "startColumn": 27,
              "endLine": 703,
              "endColumn": 30,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/db/DatabasePersistenceManager.java",
              "type": "",
              "code": "                return rs.next();\n            } catch (Exception e) {\n                String msg = \"failed to check existence of node state: \" + id;\n                log.error(msg, e);\n                throw new ItemStateException(msg, e);\n            } finally {\n                closeResultSet(rs);"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "lockToken",
              "startLine": 1279,
              "startColumn": 19,
              "endLine": 1279,
              "endColumn": 28,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "NodeId",
              "code": "         */\n        public InternalLockInfo(NodeId lockToken, boolean sessionScoped,\n                                boolean deep, String lockOwner, long timeoutHint) {\n            super(lockToken, sessionScoped, deep, lockOwner, timeoutHint);\n        }\n\n        /**"
            },
            {
              "step": 1,
              "variableName": "super(lockToken, sessionScoped, deep, lockOwner, timeoutHint);",
              "startLine": 1279,
              "startColumn": 13,
              "endLine": 1279,
              "endColumn": 75,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "         */\n        public InternalLockInfo(NodeId lockToken, boolean sessionScoped,\n                                boolean deep, String lockOwner, long timeoutHint) {\n            super(lockToken, sessionScoped, deep, lockOwner, timeoutHint);\n        }\n\n        /**"
            },
            {
              "step": 2,
              "variableName": "new InternalLockInfo(",
              "startLine": 340,
              "startColumn": 33,
              "endLine": 341,
              "endColumn": 83,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "\n        SessionImpl session = (SessionImpl) node.getSession();\n        String lockOwner = (ownerInfo != null) ? ownerInfo : session.getUserID();\n        InternalLockInfo info = new InternalLockInfo(\n                node.getNodeId(), isSessionScoped, isDeep, lockOwner, timeoutHint);\n\n        ClusterOperation operation = null;"
            },
            {
              "step": 3,
              "variableName": "info",
              "startLine": 370,
              "startColumn": 17,
              "endLine": 370,
              "endColumn": 21,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "            }\n            if (info.isDeep() && element.hasPath(path)\n                    && element.getChildrenCount() > 0) {\n                info.throwLockException(\"Some child node is locked\", session);\n            }\n\n            // create lock token"
            },
            {
              "step": 4,
              "variableName": "throwLockException",
              "startLine": 259,
              "startColumn": 17,
              "endLine": 259,
              "endColumn": 35,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockInfo.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "     * @throws LockException always thrown, unless another error occurs\n     * @throws RepositoryException if the path of this lock can not be resolved\n     */\n    public void throwLockException(String message, SessionImpl session)\n            throws LockException, RepositoryException {\n        String path;\n        try {"
            },
            {
              "step": 5,
              "variableName": "id",
              "startLine": 264,
              "startColumn": 59,
              "endLine": 264,
              "endColumn": 61,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockInfo.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "        String path;\n        try {\n            path = session.getJCRPath(\n                    session.getHierarchyManager().getPath(id));\n        } catch (RepositoryException ignored) {\n            path = null;\n        }"
            },
            {
              "step": 6,
              "variableName": "id",
              "startLine": 264,
              "startColumn": 59,
              "endLine": 264,
              "endColumn": 61,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockInfo.java",
              "type": "NodeId",
              "code": "        String path;\n        try {\n            path = session.getJCRPath(\n                    session.getHierarchyManager().getPath(id));\n        } catch (RepositoryException ignored) {\n            path = null;\n        }"
            },
            {
              "step": 7,
              "variableName": "ItemId id",
              "startLine": 252,
              "startColumn": 25,
              "endLine": 252,
              "endColumn": 34,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/CachingHierarchyManager.java",
              "type": "NodeId",
              "code": "     * Overridden method simply checks whether we have an item matching the id\n     * and returns its path, otherwise calls base implementation.\n     */\n    public Path getPath(ItemId id)\n            throws ItemNotFoundException, RepositoryException {\n\n        if (id.denotesNode()) {"
            },
            {
              "step": 8,
              "variableName": "id",
              "startLine": 267,
              "startColumn": 30,
              "endLine": 267,
              "endColumn": 32,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/CachingHierarchyManager.java",
              "type": "NodeId",
              "code": "                }\n            }\n        }\n        return super.getPath(id);\n    }\n\n    /**"
            },
            {
              "step": 9,
              "variableName": "ItemId id",
              "startLine": 392,
              "startColumn": 25,
              "endLine": 392,
              "endColumn": 34,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "    /**\n     * {@inheritDoc}\n     */\n    public Path getPath(ItemId id)\n            throws ItemNotFoundException, RepositoryException {\n        // shortcut\n        if (id.equals(rootNodeId)) {"
            },
            {
              "step": 10,
              "variableName": "id",
              "startLine": 402,
              "startColumn": 45,
              "endLine": 402,
              "endColumn": 47,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "        PathBuilder builder = new PathBuilder();\n\n        try {\n            buildPath(builder, getItemState(id), new CycleDetector());\n            return builder.getPath();\n        } catch (NoSuchItemStateException nsise) {\n            String msg = \"failed to build path of \" + id;"
            },
            {
              "step": 11,
              "variableName": "ItemId id",
              "startLine": 152,
              "startColumn": 38,
              "endLine": 152,
              "endColumn": 47,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "     * @throws ItemStateException       if an error occurs\n     * @see ZombieHierarchyManager#getItemState(ItemId)\n     */\n    protected ItemState getItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n        return provider.getItemState(id);\n    }"
            },
            {
              "step": 12,
              "variableName": "id",
              "startLine": 154,
              "startColumn": 38,
              "endLine": 154,
              "endColumn": 40,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "     */\n    protected ItemState getItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n        return provider.getItemState(id);\n    }\n\n    /**"
            },
            {
              "step": 13,
              "variableName": "ItemId id",
              "startLine": 132,
              "startColumn": 39,
              "endLine": 132,
              "endColumn": 48,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/observation/ChangeLogBasedHierarchyMgr.java",
              "type": "NodeId",
              "code": "         * <code>id</code>.\n         * @throws ItemStateException if any other error occurs.\n         */\n        public ItemState getItemState(ItemId id) throws NoSuchItemStateException, ItemStateException {\n            // check ChangeLog first\n            try {\n                ItemState state = changes.get(id);"
            },
            {
              "step": 14,
              "variableName": "id",
              "startLine": 142,
              "startColumn": 38,
              "endLine": 142,
              "endColumn": 40,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/observation/ChangeLogBasedHierarchyMgr.java",
              "type": "NodeId",
              "code": "            } catch (NoSuchItemStateException e) {\n                // item has been deleted, but we still return it by asking base\n            }\n            return base.getItemState(id);\n        }\n\n        /**"
            },
            {
              "step": 15,
              "variableName": "ItemId id",
              "startLine": 258,
              "startColumn": 35,
              "endLine": 258,
              "endColumn": 44,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "    /**\n     * {@inheritDoc}\n     */\n    public ItemState getItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n        // check the virtual root ids (needed for overlay)\n        for (VirtualItemStateProvider virtualProvider : virtualProviders) {"
            },
            {
              "step": 16,
              "variableName": "id",
              "startLine": 284,
              "startColumn": 46,
              "endLine": 284,
              "endColumn": 48,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "\n        // check if there is a virtual state for the specified item\n        for (VirtualItemStateProvider virtualProvider : virtualProviders) {\n            if (virtualProvider.hasItemState(id)) {\n                return virtualProvider.getItemState(id);\n            }\n        }"
            },
            {
              "step": 17,
              "variableName": "ItemId id",
              "startLine": 140,
              "startColumn": 33,
              "endLine": 140,
              "endColumn": 42,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/VersionItemStateProvider.java",
              "type": "NodeId",
              "code": "    /**\n     * @inheritDoc\n     */\n    public boolean hasItemState(ItemId id) {\n        return items.get(id) != null || stateMgr.hasItemState(id);\n    }\n"
            },
            {
              "step": 18,
              "variableName": "id",
              "startLine": 141,
              "startColumn": 63,
              "endLine": 141,
              "endColumn": 65,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/VersionItemStateProvider.java",
              "type": "NodeId",
              "code": "     * @inheritDoc\n     */\n    public boolean hasItemState(ItemId id) {\n        return items.get(id) != null || stateMgr.hasItemState(id);\n    }\n\n    /**"
            },
            {
              "step": 19,
              "variableName": "ItemId id",
              "startLine": 296,
              "startColumn": 33,
              "endLine": 296,
              "endColumn": 42,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "    /**\n     * {@inheritDoc}\n     */\n    public boolean hasItemState(ItemId id) {\n        // check the virtual root ids (needed for overlay)\n        for (VirtualItemStateProvider virtualProvider : virtualProviders) {\n            if (virtualProvider.isVirtualRoot(id)) {"
            },
            {
              "step": 20,
              "variableName": "id",
              "startLine": 317,
              "startColumn": 40,
              "endLine": 317,
              "endColumn": 42,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "            }\n\n            // check if this manager has the item state\n            if (hasNonVirtualItemState(id)) {\n                return true;\n            }\n        } finally {"
            },
            {
              "step": 21,
              "variableName": "ItemId id",
              "startLine": 1820,
              "startColumn": 46,
              "endLine": 1820,
              "endColumn": 55,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "     * Checks if this item state manager has the given item state without\n     * considering the virtual item state managers.\n     */\n    protected boolean hasNonVirtualItemState(ItemId id) {\n        if (cache.isCached(id)) {\n            return true;\n        }"
            },
            {
              "step": 22,
              "variableName": "(NodeId) id",
              "startLine": 1827,
              "startColumn": 42,
              "endLine": 1827,
              "endColumn": 53,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "\n        try {\n            if (id.denotesNode()) {\n                return persistMgr.exists((NodeId) id);\n            } else {\n                return persistMgr.exists((PropertyId) id);\n            }"
            },
            {
              "step": 23,
              "variableName": "NodeId id",
              "startLine": 688,
              "startColumn": 27,
              "endLine": 688,
              "endColumn": 36,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/db/DatabasePersistenceManager.java",
              "type": "NodeId",
              "code": "    /**\n     * {@inheritDoc}\n     */\n    public boolean exists(NodeId id) throws ItemStateException {\n        if (!initialized) {\n            throw new IllegalStateException(\"not initialized\");\n        }"
            },
            {
              "step": 24,
              "variableName": "msg",
              "startLine": 703,
              "startColumn": 27,
              "endLine": 703,
              "endColumn": 30,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/db/DatabasePersistenceManager.java",
              "type": "",
              "code": "                return rs.next();\n            } catch (Exception e) {\n                String msg = \"failed to check existence of node state: \" + id;\n                log.error(msg, e);\n                throw new ItemStateException(msg, e);\n            } finally {\n                closeResultSet(rs);"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 15,
      "fileName": "InMemBundlePersistenceManager.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "lockToken",
              "startLine": 1279,
              "startColumn": 19,
              "endLine": 1279,
              "endColumn": 28,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "NodeId",
              "code": "         */\n        public InternalLockInfo(NodeId lockToken, boolean sessionScoped,\n                                boolean deep, String lockOwner, long timeoutHint) {\n            super(lockToken, sessionScoped, deep, lockOwner, timeoutHint);\n        }\n\n        /**"
            },
            {
              "step": 1,
              "variableName": "super(lockToken, sessionScoped, deep, lockOwner, timeoutHint);",
              "startLine": 1279,
              "startColumn": 13,
              "endLine": 1279,
              "endColumn": 75,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "         */\n        public InternalLockInfo(NodeId lockToken, boolean sessionScoped,\n                                boolean deep, String lockOwner, long timeoutHint) {\n            super(lockToken, sessionScoped, deep, lockOwner, timeoutHint);\n        }\n\n        /**"
            },
            {
              "step": 2,
              "variableName": "new InternalLockInfo(",
              "startLine": 340,
              "startColumn": 33,
              "endLine": 341,
              "endColumn": 83,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "\n        SessionImpl session = (SessionImpl) node.getSession();\n        String lockOwner = (ownerInfo != null) ? ownerInfo : session.getUserID();\n        InternalLockInfo info = new InternalLockInfo(\n                node.getNodeId(), isSessionScoped, isDeep, lockOwner, timeoutHint);\n\n        ClusterOperation operation = null;"
            },
            {
              "step": 3,
              "variableName": "info",
              "startLine": 370,
              "startColumn": 17,
              "endLine": 370,
              "endColumn": 21,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "            }\n            if (info.isDeep() && element.hasPath(path)\n                    && element.getChildrenCount() > 0) {\n                info.throwLockException(\"Some child node is locked\", session);\n            }\n\n            // create lock token"
            },
            {
              "step": 4,
              "variableName": "throwLockException",
              "startLine": 259,
              "startColumn": 17,
              "endLine": 259,
              "endColumn": 35,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockInfo.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "     * @throws LockException always thrown, unless another error occurs\n     * @throws RepositoryException if the path of this lock can not be resolved\n     */\n    public void throwLockException(String message, SessionImpl session)\n            throws LockException, RepositoryException {\n        String path;\n        try {"
            },
            {
              "step": 5,
              "variableName": "id",
              "startLine": 264,
              "startColumn": 59,
              "endLine": 264,
              "endColumn": 61,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockInfo.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "        String path;\n        try {\n            path = session.getJCRPath(\n                    session.getHierarchyManager().getPath(id));\n        } catch (RepositoryException ignored) {\n            path = null;\n        }"
            },
            {
              "step": 6,
              "variableName": "id",
              "startLine": 264,
              "startColumn": 59,
              "endLine": 264,
              "endColumn": 61,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockInfo.java",
              "type": "NodeId",
              "code": "        String path;\n        try {\n            path = session.getJCRPath(\n                    session.getHierarchyManager().getPath(id));\n        } catch (RepositoryException ignored) {\n            path = null;\n        }"
            },
            {
              "step": 7,
              "variableName": "ItemId id",
              "startLine": 252,
              "startColumn": 25,
              "endLine": 252,
              "endColumn": 34,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/CachingHierarchyManager.java",
              "type": "NodeId",
              "code": "     * Overridden method simply checks whether we have an item matching the id\n     * and returns its path, otherwise calls base implementation.\n     */\n    public Path getPath(ItemId id)\n            throws ItemNotFoundException, RepositoryException {\n\n        if (id.denotesNode()) {"
            },
            {
              "step": 8,
              "variableName": "id",
              "startLine": 267,
              "startColumn": 30,
              "endLine": 267,
              "endColumn": 32,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/CachingHierarchyManager.java",
              "type": "NodeId",
              "code": "                }\n            }\n        }\n        return super.getPath(id);\n    }\n\n    /**"
            },
            {
              "step": 9,
              "variableName": "ItemId id",
              "startLine": 392,
              "startColumn": 25,
              "endLine": 392,
              "endColumn": 34,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "    /**\n     * {@inheritDoc}\n     */\n    public Path getPath(ItemId id)\n            throws ItemNotFoundException, RepositoryException {\n        // shortcut\n        if (id.equals(rootNodeId)) {"
            },
            {
              "step": 10,
              "variableName": "id",
              "startLine": 402,
              "startColumn": 45,
              "endLine": 402,
              "endColumn": 47,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "        PathBuilder builder = new PathBuilder();\n\n        try {\n            buildPath(builder, getItemState(id), new CycleDetector());\n            return builder.getPath();\n        } catch (NoSuchItemStateException nsise) {\n            String msg = \"failed to build path of \" + id;"
            },
            {
              "step": 11,
              "variableName": "ItemId id",
              "startLine": 152,
              "startColumn": 38,
              "endLine": 152,
              "endColumn": 47,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "     * @throws ItemStateException       if an error occurs\n     * @see ZombieHierarchyManager#getItemState(ItemId)\n     */\n    protected ItemState getItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n        return provider.getItemState(id);\n    }"
            },
            {
              "step": 12,
              "variableName": "id",
              "startLine": 154,
              "startColumn": 38,
              "endLine": 154,
              "endColumn": 40,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "     */\n    protected ItemState getItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n        return provider.getItemState(id);\n    }\n\n    /**"
            },
            {
              "step": 13,
              "variableName": "ItemId id",
              "startLine": 258,
              "startColumn": 35,
              "endLine": 258,
              "endColumn": 44,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "    /**\n     * {@inheritDoc}\n     */\n    public ItemState getItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n        // check the virtual root ids (needed for overlay)\n        for (VirtualItemStateProvider virtualProvider : virtualProviders) {"
            },
            {
              "step": 14,
              "variableName": "id",
              "startLine": 271,
              "startColumn": 43,
              "endLine": 271,
              "endColumn": 45,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "        ISMLocking.ReadLock readLock = acquireReadLock(id);\n        try {\n            // check internal first\n            return getNonVirtualItemState(id);\n        } catch (NoSuchItemStateException e) {\n            // Fall through to virtual state providers. We can afford the\n            // exception-for-control-flow performance hit here, as almost"
            },
            {
              "step": 15,
              "variableName": "ItemId id",
              "startLine": 1767,
              "startColumn": 46,
              "endLine": 1767,
              "endColumn": 55,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "     * Returns the item state for the given id without considering virtual\n     * item state providers.\n     */\n    private ItemState getNonVirtualItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n        // First check if the item state is already in the cache\n        ItemState state = cache.retrieve(id);"
            },
            {
              "step": 16,
              "variableName": "id",
              "startLine": 1798,
              "startColumn": 35,
              "endLine": 1798,
              "endColumn": 37,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "        try {\n            // Load the item state from persistent storage\n            // NOTE: This needs to happen outside a synchronized block!\n            state = loadItemState(id);\n            state.setStatus(ItemState.STATUS_EXISTING);\n            state.setContainer(this);\n"
            },
            {
              "step": 17,
              "variableName": "ItemId id",
              "startLine": 1873,
              "startColumn": 37,
              "endLine": 1873,
              "endColumn": 46,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "     * @param id item id\n     * @return item state\n     */\n    private ItemState loadItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n\n        ItemState state;"
            },
            {
              "step": 18,
              "variableName": "(NodeId) id",
              "startLine": 1878,
              "startColumn": 37,
              "endLine": 1878,
              "endColumn": 48,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "\n        ItemState state;\n        if (id.denotesNode()) {\n            state = persistMgr.load((NodeId) id);\n        } else {\n            state = persistMgr.load((PropertyId) id);\n        }"
            },
            {
              "step": 19,
              "variableName": "NodeId id",
              "startLine": 489,
              "startColumn": 27,
              "endLine": 489,
              "endColumn": 36,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/bundle/AbstractBundlePersistenceManager.java",
              "type": "NodeId",
              "code": "     *\n     * Loads the state via the appropriate NodePropBundle.\n     */\n    public NodeState load(NodeId id) throws NoSuchItemStateException, ItemStateException {\n        NodePropBundle bundle = getBundle(id);\n        if (bundle == null) {\n            throw new NoSuchItemStateException(id.toString());"
            },
            {
              "step": 20,
              "variableName": "id",
              "startLine": 490,
              "startColumn": 43,
              "endLine": 490,
              "endColumn": 45,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/bundle/AbstractBundlePersistenceManager.java",
              "type": "NodeId",
              "code": "     * Loads the state via the appropriate NodePropBundle.\n     */\n    public NodeState load(NodeId id) throws NoSuchItemStateException, ItemStateException {\n        NodePropBundle bundle = getBundle(id);\n        if (bundle == null) {\n            throw new NoSuchItemStateException(id.toString());\n        }"
            },
            {
              "step": 21,
              "variableName": "NodeId id",
              "startLine": 740,
              "startColumn": 38,
              "endLine": 740,
              "endColumn": 47,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/bundle/AbstractBundlePersistenceManager.java",
              "type": "NodeId",
              "code": "     *\n     * @throws ItemStateException if an error occurs.\n     */\n    private NodePropBundle getBundle(NodeId id) throws ItemStateException {\n        NodePropBundle bundle = bundles.get(id);\n        readCounter.incrementAndGet();\n        if (bundle == MISSING) {"
            },
            {
              "step": 22,
              "variableName": "id",
              "startLine": 750,
              "startColumn": 35,
              "endLine": 750,
              "endColumn": 37,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/bundle/AbstractBundlePersistenceManager.java",
              "type": "NodeId",
              "code": "            return bundle;\n        }\n        // cache miss\n        return getBundleCacheMiss(id);\n    }\n\n    /**"
            },
            {
              "step": 23,
              "variableName": "NodeId id",
              "startLine": 763,
              "startColumn": 47,
              "endLine": 763,
              "endColumn": 56,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/bundle/AbstractBundlePersistenceManager.java",
              "type": "NodeId",
              "code": "     * @return\n     * @throws ItemStateException\n     */\n    private NodePropBundle getBundleCacheMiss(NodeId id)\n            throws ItemStateException {\n        long time = System.nanoTime();\n        NodePropBundle bundle = loadBundle(id);"
            },
            {
              "step": 24,
              "variableName": "id",
              "startLine": 766,
              "startColumn": 44,
              "endLine": 766,
              "endColumn": 46,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/bundle/AbstractBundlePersistenceManager.java",
              "type": "NodeId",
              "code": "    private NodePropBundle getBundleCacheMiss(NodeId id)\n            throws ItemStateException {\n        long time = System.nanoTime();\n        NodePropBundle bundle = loadBundle(id);\n        time = System.nanoTime() - time;\n        cacheMissDuration.addAndGet(time);\n        final long timeMs = time / 1000000;"
            },
            {
              "step": 25,
              "variableName": "NodeId id",
              "startLine": 517,
              "startColumn": 41,
              "endLine": 517,
              "endColumn": 50,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/mem/InMemBundlePersistenceManager.java",
              "type": "NodeId",
              "code": "     * {@inheritDoc}\n     */\n    @Override\n    protected NodePropBundle loadBundle(NodeId id) throws ItemStateException {\n        if (!bundleStore.containsKey(id)) {\n            return null;\n        }"
            },
            {
              "step": 26,
              "variableName": "msg",
              "startLine": 525,
              "startColumn": 23,
              "endLine": 525,
              "endColumn": 26,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/mem/InMemBundlePersistenceManager.java",
              "type": "",
              "code": "            return binding.readBundle(new ByteArrayInputStream(bundleStore.get(id)), id);\n        } catch (Exception e) {\n            String msg = \"failed to read bundle: \" + id + \": \" + e;\n            log.error(msg);\n            throw new ItemStateException(msg, e);\n        }\n    }"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "lockToken",
              "startLine": 1279,
              "startColumn": 19,
              "endLine": 1279,
              "endColumn": 28,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "NodeId",
              "code": "         */\n        public InternalLockInfo(NodeId lockToken, boolean sessionScoped,\n                                boolean deep, String lockOwner, long timeoutHint) {\n            super(lockToken, sessionScoped, deep, lockOwner, timeoutHint);\n        }\n\n        /**"
            },
            {
              "step": 1,
              "variableName": "super(lockToken, sessionScoped, deep, lockOwner, timeoutHint);",
              "startLine": 1279,
              "startColumn": 13,
              "endLine": 1279,
              "endColumn": 75,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "         */\n        public InternalLockInfo(NodeId lockToken, boolean sessionScoped,\n                                boolean deep, String lockOwner, long timeoutHint) {\n            super(lockToken, sessionScoped, deep, lockOwner, timeoutHint);\n        }\n\n        /**"
            },
            {
              "step": 2,
              "variableName": "new InternalLockInfo(",
              "startLine": 340,
              "startColumn": 33,
              "endLine": 341,
              "endColumn": 83,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "\n        SessionImpl session = (SessionImpl) node.getSession();\n        String lockOwner = (ownerInfo != null) ? ownerInfo : session.getUserID();\n        InternalLockInfo info = new InternalLockInfo(\n                node.getNodeId(), isSessionScoped, isDeep, lockOwner, timeoutHint);\n\n        ClusterOperation operation = null;"
            },
            {
              "step": 3,
              "variableName": "info",
              "startLine": 370,
              "startColumn": 17,
              "endLine": 370,
              "endColumn": 21,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "            }\n            if (info.isDeep() && element.hasPath(path)\n                    && element.getChildrenCount() > 0) {\n                info.throwLockException(\"Some child node is locked\", session);\n            }\n\n            // create lock token"
            },
            {
              "step": 4,
              "variableName": "throwLockException",
              "startLine": 259,
              "startColumn": 17,
              "endLine": 259,
              "endColumn": 35,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockInfo.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "     * @throws LockException always thrown, unless another error occurs\n     * @throws RepositoryException if the path of this lock can not be resolved\n     */\n    public void throwLockException(String message, SessionImpl session)\n            throws LockException, RepositoryException {\n        String path;\n        try {"
            },
            {
              "step": 5,
              "variableName": "id",
              "startLine": 264,
              "startColumn": 59,
              "endLine": 264,
              "endColumn": 61,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockInfo.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "        String path;\n        try {\n            path = session.getJCRPath(\n                    session.getHierarchyManager().getPath(id));\n        } catch (RepositoryException ignored) {\n            path = null;\n        }"
            },
            {
              "step": 6,
              "variableName": "id",
              "startLine": 264,
              "startColumn": 59,
              "endLine": 264,
              "endColumn": 61,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockInfo.java",
              "type": "NodeId",
              "code": "        String path;\n        try {\n            path = session.getJCRPath(\n                    session.getHierarchyManager().getPath(id));\n        } catch (RepositoryException ignored) {\n            path = null;\n        }"
            },
            {
              "step": 7,
              "variableName": "ItemId id",
              "startLine": 252,
              "startColumn": 25,
              "endLine": 252,
              "endColumn": 34,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/CachingHierarchyManager.java",
              "type": "NodeId",
              "code": "     * Overridden method simply checks whether we have an item matching the id\n     * and returns its path, otherwise calls base implementation.\n     */\n    public Path getPath(ItemId id)\n            throws ItemNotFoundException, RepositoryException {\n\n        if (id.denotesNode()) {"
            },
            {
              "step": 8,
              "variableName": "id",
              "startLine": 267,
              "startColumn": 30,
              "endLine": 267,
              "endColumn": 32,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/CachingHierarchyManager.java",
              "type": "NodeId",
              "code": "                }\n            }\n        }\n        return super.getPath(id);\n    }\n\n    /**"
            },
            {
              "step": 9,
              "variableName": "ItemId id",
              "startLine": 392,
              "startColumn": 25,
              "endLine": 392,
              "endColumn": 34,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "    /**\n     * {@inheritDoc}\n     */\n    public Path getPath(ItemId id)\n            throws ItemNotFoundException, RepositoryException {\n        // shortcut\n        if (id.equals(rootNodeId)) {"
            },
            {
              "step": 10,
              "variableName": "id",
              "startLine": 402,
              "startColumn": 45,
              "endLine": 402,
              "endColumn": 47,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "        PathBuilder builder = new PathBuilder();\n\n        try {\n            buildPath(builder, getItemState(id), new CycleDetector());\n            return builder.getPath();\n        } catch (NoSuchItemStateException nsise) {\n            String msg = \"failed to build path of \" + id;"
            },
            {
              "step": 11,
              "variableName": "ItemId id",
              "startLine": 152,
              "startColumn": 38,
              "endLine": 152,
              "endColumn": 47,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "     * @throws ItemStateException       if an error occurs\n     * @see ZombieHierarchyManager#getItemState(ItemId)\n     */\n    protected ItemState getItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n        return provider.getItemState(id);\n    }"
            },
            {
              "step": 12,
              "variableName": "id",
              "startLine": 154,
              "startColumn": 38,
              "endLine": 154,
              "endColumn": 40,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "     */\n    protected ItemState getItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n        return provider.getItemState(id);\n    }\n\n    /**"
            },
            {
              "step": 13,
              "variableName": "ItemId id",
              "startLine": 239,
              "startColumn": 35,
              "endLine": 239,
              "endColumn": 44,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/XAItemStateManager.java",
              "type": "NodeId",
              "code": "     * the transactional change log. Fallback is always the call to the base\n     * class.\n     */\n    public ItemState getItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n\n        if (virtualProvider != null && virtualProvider.hasItemState(id)) {"
            },
            {
              "step": 14,
              "variableName": "id",
              "startLine": 242,
              "startColumn": 69,
              "endLine": 242,
              "endColumn": 71,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/XAItemStateManager.java",
              "type": "NodeId",
              "code": "    public ItemState getItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n\n        if (virtualProvider != null && virtualProvider.hasItemState(id)) {\n            return virtualProvider.getItemState(id);\n        }\n        // 1) check local changes"
            },
            {
              "step": 15,
              "variableName": "ItemId id",
              "startLine": 140,
              "startColumn": 33,
              "endLine": 140,
              "endColumn": 42,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/VersionItemStateProvider.java",
              "type": "NodeId",
              "code": "    /**\n     * @inheritDoc\n     */\n    public boolean hasItemState(ItemId id) {\n        return items.get(id) != null || stateMgr.hasItemState(id);\n    }\n"
            },
            {
              "step": 16,
              "variableName": "id",
              "startLine": 141,
              "startColumn": 63,
              "endLine": 141,
              "endColumn": 65,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/VersionItemStateProvider.java",
              "type": "NodeId",
              "code": "     * @inheritDoc\n     */\n    public boolean hasItemState(ItemId id) {\n        return items.get(id) != null || stateMgr.hasItemState(id);\n    }\n\n    /**"
            },
            {
              "step": 17,
              "variableName": "ItemId id",
              "startLine": 296,
              "startColumn": 33,
              "endLine": 296,
              "endColumn": 42,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "    /**\n     * {@inheritDoc}\n     */\n    public boolean hasItemState(ItemId id) {\n        // check the virtual root ids (needed for overlay)\n        for (VirtualItemStateProvider virtualProvider : virtualProviders) {\n            if (virtualProvider.isVirtualRoot(id)) {"
            },
            {
              "step": 18,
              "variableName": "id",
              "startLine": 317,
              "startColumn": 40,
              "endLine": 317,
              "endColumn": 42,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "            }\n\n            // check if this manager has the item state\n            if (hasNonVirtualItemState(id)) {\n                return true;\n            }\n        } finally {"
            },
            {
              "step": 19,
              "variableName": "ItemId id",
              "startLine": 1820,
              "startColumn": 46,
              "endLine": 1820,
              "endColumn": 55,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "     * Checks if this item state manager has the given item state without\n     * considering the virtual item state managers.\n     */\n    protected boolean hasNonVirtualItemState(ItemId id) {\n        if (cache.isCached(id)) {\n            return true;\n        }"
            },
            {
              "step": 20,
              "variableName": "(NodeId) id",
              "startLine": 1827,
              "startColumn": 42,
              "endLine": 1827,
              "endColumn": 53,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "\n        try {\n            if (id.denotesNode()) {\n                return persistMgr.exists((NodeId) id);\n            } else {\n                return persistMgr.exists((PropertyId) id);\n            }"
            },
            {
              "step": 21,
              "variableName": "NodeId id",
              "startLine": 561,
              "startColumn": 27,
              "endLine": 561,
              "endColumn": 36,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/bundle/AbstractBundlePersistenceManager.java",
              "type": "NodeId",
              "code": "     *\n     * Checks the existence via the appropriate NodePropBundle.\n     */\n    public boolean exists(NodeId id) throws ItemStateException {\n        // anticipating a load followed by a exists\n        return getBundle(id) != null;\n    }"
            },
            {
              "step": 22,
              "variableName": "id",
              "startLine": 563,
              "startColumn": 26,
              "endLine": 563,
              "endColumn": 28,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/bundle/AbstractBundlePersistenceManager.java",
              "type": "NodeId",
              "code": "     */\n    public boolean exists(NodeId id) throws ItemStateException {\n        // anticipating a load followed by a exists\n        return getBundle(id) != null;\n    }\n\n    /**"
            },
            {
              "step": 23,
              "variableName": "NodeId id",
              "startLine": 740,
              "startColumn": 38,
              "endLine": 740,
              "endColumn": 47,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/bundle/AbstractBundlePersistenceManager.java",
              "type": "NodeId",
              "code": "     *\n     * @throws ItemStateException if an error occurs.\n     */\n    private NodePropBundle getBundle(NodeId id) throws ItemStateException {\n        NodePropBundle bundle = bundles.get(id);\n        readCounter.incrementAndGet();\n        if (bundle == MISSING) {"
            },
            {
              "step": 24,
              "variableName": "id",
              "startLine": 750,
              "startColumn": 35,
              "endLine": 750,
              "endColumn": 37,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/bundle/AbstractBundlePersistenceManager.java",
              "type": "NodeId",
              "code": "            return bundle;\n        }\n        // cache miss\n        return getBundleCacheMiss(id);\n    }\n\n    /**"
            },
            {
              "step": 25,
              "variableName": "NodeId id",
              "startLine": 763,
              "startColumn": 47,
              "endLine": 763,
              "endColumn": 56,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/bundle/AbstractBundlePersistenceManager.java",
              "type": "NodeId",
              "code": "     * @return\n     * @throws ItemStateException\n     */\n    private NodePropBundle getBundleCacheMiss(NodeId id)\n            throws ItemStateException {\n        long time = System.nanoTime();\n        NodePropBundle bundle = loadBundle(id);"
            },
            {
              "step": 26,
              "variableName": "id",
              "startLine": 766,
              "startColumn": 44,
              "endLine": 766,
              "endColumn": 46,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/bundle/AbstractBundlePersistenceManager.java",
              "type": "NodeId",
              "code": "    private NodePropBundle getBundleCacheMiss(NodeId id)\n            throws ItemStateException {\n        long time = System.nanoTime();\n        NodePropBundle bundle = loadBundle(id);\n        time = System.nanoTime() - time;\n        cacheMissDuration.addAndGet(time);\n        final long timeMs = time / 1000000;"
            },
            {
              "step": 27,
              "variableName": "NodeId id",
              "startLine": 517,
              "startColumn": 41,
              "endLine": 517,
              "endColumn": 50,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/mem/InMemBundlePersistenceManager.java",
              "type": "NodeId",
              "code": "     * {@inheritDoc}\n     */\n    @Override\n    protected NodePropBundle loadBundle(NodeId id) throws ItemStateException {\n        if (!bundleStore.containsKey(id)) {\n            return null;\n        }"
            },
            {
              "step": 28,
              "variableName": "msg",
              "startLine": 525,
              "startColumn": 23,
              "endLine": 525,
              "endColumn": 26,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/mem/InMemBundlePersistenceManager.java",
              "type": "",
              "code": "            return binding.readBundle(new ByteArrayInputStream(bundleStore.get(id)), id);\n        } catch (Exception e) {\n            String msg = \"failed to read bundle: \" + id + \": \" + e;\n            log.error(msg);\n            throw new ItemStateException(msg, e);\n        }\n    }"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "lockToken",
              "startLine": 1279,
              "startColumn": 19,
              "endLine": 1279,
              "endColumn": 28,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "NodeId",
              "code": "         */\n        public InternalLockInfo(NodeId lockToken, boolean sessionScoped,\n                                boolean deep, String lockOwner, long timeoutHint) {\n            super(lockToken, sessionScoped, deep, lockOwner, timeoutHint);\n        }\n\n        /**"
            },
            {
              "step": 1,
              "variableName": "super(lockToken, sessionScoped, deep, lockOwner, timeoutHint);",
              "startLine": 1279,
              "startColumn": 13,
              "endLine": 1279,
              "endColumn": 75,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "         */\n        public InternalLockInfo(NodeId lockToken, boolean sessionScoped,\n                                boolean deep, String lockOwner, long timeoutHint) {\n            super(lockToken, sessionScoped, deep, lockOwner, timeoutHint);\n        }\n\n        /**"
            },
            {
              "step": 2,
              "variableName": "new InternalLockInfo(",
              "startLine": 340,
              "startColumn": 33,
              "endLine": 341,
              "endColumn": 83,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "\n        SessionImpl session = (SessionImpl) node.getSession();\n        String lockOwner = (ownerInfo != null) ? ownerInfo : session.getUserID();\n        InternalLockInfo info = new InternalLockInfo(\n                node.getNodeId(), isSessionScoped, isDeep, lockOwner, timeoutHint);\n\n        ClusterOperation operation = null;"
            },
            {
              "step": 3,
              "variableName": "info",
              "startLine": 370,
              "startColumn": 17,
              "endLine": 370,
              "endColumn": 21,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "            }\n            if (info.isDeep() && element.hasPath(path)\n                    && element.getChildrenCount() > 0) {\n                info.throwLockException(\"Some child node is locked\", session);\n            }\n\n            // create lock token"
            },
            {
              "step": 4,
              "variableName": "throwLockException",
              "startLine": 259,
              "startColumn": 17,
              "endLine": 259,
              "endColumn": 35,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockInfo.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "     * @throws LockException always thrown, unless another error occurs\n     * @throws RepositoryException if the path of this lock can not be resolved\n     */\n    public void throwLockException(String message, SessionImpl session)\n            throws LockException, RepositoryException {\n        String path;\n        try {"
            },
            {
              "step": 5,
              "variableName": "id",
              "startLine": 264,
              "startColumn": 59,
              "endLine": 264,
              "endColumn": 61,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockInfo.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "        String path;\n        try {\n            path = session.getJCRPath(\n                    session.getHierarchyManager().getPath(id));\n        } catch (RepositoryException ignored) {\n            path = null;\n        }"
            },
            {
              "step": 6,
              "variableName": "id",
              "startLine": 264,
              "startColumn": 59,
              "endLine": 264,
              "endColumn": 61,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockInfo.java",
              "type": "NodeId",
              "code": "        String path;\n        try {\n            path = session.getJCRPath(\n                    session.getHierarchyManager().getPath(id));\n        } catch (RepositoryException ignored) {\n            path = null;\n        }"
            },
            {
              "step": 7,
              "variableName": "ItemId id",
              "startLine": 252,
              "startColumn": 25,
              "endLine": 252,
              "endColumn": 34,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/CachingHierarchyManager.java",
              "type": "NodeId",
              "code": "     * Overridden method simply checks whether we have an item matching the id\n     * and returns its path, otherwise calls base implementation.\n     */\n    public Path getPath(ItemId id)\n            throws ItemNotFoundException, RepositoryException {\n\n        if (id.denotesNode()) {"
            },
            {
              "step": 8,
              "variableName": "id",
              "startLine": 267,
              "startColumn": 30,
              "endLine": 267,
              "endColumn": 32,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/CachingHierarchyManager.java",
              "type": "NodeId",
              "code": "                }\n            }\n        }\n        return super.getPath(id);\n    }\n\n    /**"
            },
            {
              "step": 9,
              "variableName": "ItemId id",
              "startLine": 392,
              "startColumn": 25,
              "endLine": 392,
              "endColumn": 34,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "    /**\n     * {@inheritDoc}\n     */\n    public Path getPath(ItemId id)\n            throws ItemNotFoundException, RepositoryException {\n        // shortcut\n        if (id.equals(rootNodeId)) {"
            },
            {
              "step": 10,
              "variableName": "id",
              "startLine": 402,
              "startColumn": 45,
              "endLine": 402,
              "endColumn": 47,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "        PathBuilder builder = new PathBuilder();\n\n        try {\n            buildPath(builder, getItemState(id), new CycleDetector());\n            return builder.getPath();\n        } catch (NoSuchItemStateException nsise) {\n            String msg = \"failed to build path of \" + id;"
            },
            {
              "step": 11,
              "variableName": "ItemId id",
              "startLine": 152,
              "startColumn": 38,
              "endLine": 152,
              "endColumn": 47,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "     * @throws ItemStateException       if an error occurs\n     * @see ZombieHierarchyManager#getItemState(ItemId)\n     */\n    protected ItemState getItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n        return provider.getItemState(id);\n    }"
            },
            {
              "step": 12,
              "variableName": "id",
              "startLine": 154,
              "startColumn": 38,
              "endLine": 154,
              "endColumn": 40,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "     */\n    protected ItemState getItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n        return provider.getItemState(id);\n    }\n\n    /**"
            },
            {
              "step": 13,
              "variableName": "ItemId id",
              "startLine": 160,
              "startColumn": 35,
              "endLine": 160,
              "endColumn": 44,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/LocalItemStateManager.java",
              "type": "NodeId",
              "code": "    /**\n     * {@inheritDoc}\n     */\n    public ItemState getItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n\n        // check change log"
            },
            {
              "step": 14,
              "variableName": "(NodeId) id",
              "startLine": 175,
              "startColumn": 42,
              "endLine": 175,
              "endColumn": 53,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/LocalItemStateManager.java",
              "type": "NodeId",
              "code": "            if (state == null) {\n                // regular behaviour\n                if (id.denotesNode()) {\n                    state = getNodeState((NodeId) id);\n                } else {\n                    state = getPropertyState((PropertyId) id);\n                }"
            },
            {
              "step": 15,
              "variableName": "NodeId id",
              "startLine": 106,
              "startColumn": 38,
              "endLine": 106,
              "endColumn": 47,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/LocalItemStateManager.java",
              "type": "NodeId",
              "code": "     * @throws NoSuchItemStateException\n     * @throws ItemStateException\n     */\n    protected NodeState getNodeState(NodeId id)\n            throws NoSuchItemStateException, ItemStateException {\n\n        // load from parent manager and wrap"
            },
            {
              "step": 16,
              "variableName": "id",
              "startLine": 110,
              "startColumn": 67,
              "endLine": 110,
              "endColumn": 69,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/LocalItemStateManager.java",
              "type": "NodeId",
              "code": "            throws NoSuchItemStateException, ItemStateException {\n\n        // load from parent manager and wrap\n        NodeState state = (NodeState) sharedStateMgr.getItemState(id);\n        state = new NodeState(state, state.getStatus(), false);\n\n        // put it in cache"
            },
            {
              "step": 17,
              "variableName": "ItemId id",
              "startLine": 258,
              "startColumn": 35,
              "endLine": 258,
              "endColumn": 44,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "    /**\n     * {@inheritDoc}\n     */\n    public ItemState getItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n        // check the virtual root ids (needed for overlay)\n        for (VirtualItemStateProvider virtualProvider : virtualProviders) {"
            },
            {
              "step": 18,
              "variableName": "id",
              "startLine": 271,
              "startColumn": 43,
              "endLine": 271,
              "endColumn": 45,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "        ISMLocking.ReadLock readLock = acquireReadLock(id);\n        try {\n            // check internal first\n            return getNonVirtualItemState(id);\n        } catch (NoSuchItemStateException e) {\n            // Fall through to virtual state providers. We can afford the\n            // exception-for-control-flow performance hit here, as almost"
            },
            {
              "step": 19,
              "variableName": "ItemId id",
              "startLine": 1767,
              "startColumn": 46,
              "endLine": 1767,
              "endColumn": 55,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "     * Returns the item state for the given id without considering virtual\n     * item state providers.\n     */\n    private ItemState getNonVirtualItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n        // First check if the item state is already in the cache\n        ItemState state = cache.retrieve(id);"
            },
            {
              "step": 20,
              "variableName": "id",
              "startLine": 1798,
              "startColumn": 35,
              "endLine": 1798,
              "endColumn": 37,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "        try {\n            // Load the item state from persistent storage\n            // NOTE: This needs to happen outside a synchronized block!\n            state = loadItemState(id);\n            state.setStatus(ItemState.STATUS_EXISTING);\n            state.setContainer(this);\n"
            },
            {
              "step": 21,
              "variableName": "ItemId id",
              "startLine": 1873,
              "startColumn": 37,
              "endLine": 1873,
              "endColumn": 46,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "     * @param id item id\n     * @return item state\n     */\n    private ItemState loadItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n\n        ItemState state;"
            },
            {
              "step": 22,
              "variableName": "(NodeId) id",
              "startLine": 1878,
              "startColumn": 37,
              "endLine": 1878,
              "endColumn": 48,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "\n        ItemState state;\n        if (id.denotesNode()) {\n            state = persistMgr.load((NodeId) id);\n        } else {\n            state = persistMgr.load((PropertyId) id);\n        }"
            },
            {
              "step": 23,
              "variableName": "NodeId id",
              "startLine": 489,
              "startColumn": 27,
              "endLine": 489,
              "endColumn": 36,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/bundle/AbstractBundlePersistenceManager.java",
              "type": "NodeId",
              "code": "     *\n     * Loads the state via the appropriate NodePropBundle.\n     */\n    public NodeState load(NodeId id) throws NoSuchItemStateException, ItemStateException {\n        NodePropBundle bundle = getBundle(id);\n        if (bundle == null) {\n            throw new NoSuchItemStateException(id.toString());"
            },
            {
              "step": 24,
              "variableName": "id",
              "startLine": 490,
              "startColumn": 43,
              "endLine": 490,
              "endColumn": 45,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/bundle/AbstractBundlePersistenceManager.java",
              "type": "NodeId",
              "code": "     * Loads the state via the appropriate NodePropBundle.\n     */\n    public NodeState load(NodeId id) throws NoSuchItemStateException, ItemStateException {\n        NodePropBundle bundle = getBundle(id);\n        if (bundle == null) {\n            throw new NoSuchItemStateException(id.toString());\n        }"
            },
            {
              "step": 25,
              "variableName": "NodeId id",
              "startLine": 740,
              "startColumn": 38,
              "endLine": 740,
              "endColumn": 47,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/bundle/AbstractBundlePersistenceManager.java",
              "type": "NodeId",
              "code": "     *\n     * @throws ItemStateException if an error occurs.\n     */\n    private NodePropBundle getBundle(NodeId id) throws ItemStateException {\n        NodePropBundle bundle = bundles.get(id);\n        readCounter.incrementAndGet();\n        if (bundle == MISSING) {"
            },
            {
              "step": 26,
              "variableName": "id",
              "startLine": 750,
              "startColumn": 35,
              "endLine": 750,
              "endColumn": 37,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/bundle/AbstractBundlePersistenceManager.java",
              "type": "NodeId",
              "code": "            return bundle;\n        }\n        // cache miss\n        return getBundleCacheMiss(id);\n    }\n\n    /**"
            },
            {
              "step": 27,
              "variableName": "NodeId id",
              "startLine": 763,
              "startColumn": 47,
              "endLine": 763,
              "endColumn": 56,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/bundle/AbstractBundlePersistenceManager.java",
              "type": "NodeId",
              "code": "     * @return\n     * @throws ItemStateException\n     */\n    private NodePropBundle getBundleCacheMiss(NodeId id)\n            throws ItemStateException {\n        long time = System.nanoTime();\n        NodePropBundle bundle = loadBundle(id);"
            },
            {
              "step": 28,
              "variableName": "id",
              "startLine": 766,
              "startColumn": 44,
              "endLine": 766,
              "endColumn": 46,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/bundle/AbstractBundlePersistenceManager.java",
              "type": "NodeId",
              "code": "    private NodePropBundle getBundleCacheMiss(NodeId id)\n            throws ItemStateException {\n        long time = System.nanoTime();\n        NodePropBundle bundle = loadBundle(id);\n        time = System.nanoTime() - time;\n        cacheMissDuration.addAndGet(time);\n        final long timeMs = time / 1000000;"
            },
            {
              "step": 29,
              "variableName": "NodeId id",
              "startLine": 517,
              "startColumn": 41,
              "endLine": 517,
              "endColumn": 50,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/mem/InMemBundlePersistenceManager.java",
              "type": "NodeId",
              "code": "     * {@inheritDoc}\n     */\n    @Override\n    protected NodePropBundle loadBundle(NodeId id) throws ItemStateException {\n        if (!bundleStore.containsKey(id)) {\n            return null;\n        }"
            },
            {
              "step": 30,
              "variableName": "msg",
              "startLine": 525,
              "startColumn": 23,
              "endLine": 525,
              "endColumn": 26,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/mem/InMemBundlePersistenceManager.java",
              "type": "",
              "code": "            return binding.readBundle(new ByteArrayInputStream(bundleStore.get(id)), id);\n        } catch (Exception e) {\n            String msg = \"failed to read bundle: \" + id + \": \" + e;\n            log.error(msg);\n            throw new ItemStateException(msg, e);\n        }\n    }"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "lockToken",
              "startLine": 1279,
              "startColumn": 19,
              "endLine": 1279,
              "endColumn": 28,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "NodeId",
              "code": "         */\n        public InternalLockInfo(NodeId lockToken, boolean sessionScoped,\n                                boolean deep, String lockOwner, long timeoutHint) {\n            super(lockToken, sessionScoped, deep, lockOwner, timeoutHint);\n        }\n\n        /**"
            },
            {
              "step": 1,
              "variableName": "super(lockToken, sessionScoped, deep, lockOwner, timeoutHint);",
              "startLine": 1279,
              "startColumn": 13,
              "endLine": 1279,
              "endColumn": 75,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "         */\n        public InternalLockInfo(NodeId lockToken, boolean sessionScoped,\n                                boolean deep, String lockOwner, long timeoutHint) {\n            super(lockToken, sessionScoped, deep, lockOwner, timeoutHint);\n        }\n\n        /**"
            },
            {
              "step": 2,
              "variableName": "new InternalLockInfo(",
              "startLine": 340,
              "startColumn": 33,
              "endLine": 341,
              "endColumn": 83,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "\n        SessionImpl session = (SessionImpl) node.getSession();\n        String lockOwner = (ownerInfo != null) ? ownerInfo : session.getUserID();\n        InternalLockInfo info = new InternalLockInfo(\n                node.getNodeId(), isSessionScoped, isDeep, lockOwner, timeoutHint);\n\n        ClusterOperation operation = null;"
            },
            {
              "step": 3,
              "variableName": "info",
              "startLine": 370,
              "startColumn": 17,
              "endLine": 370,
              "endColumn": 21,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "            }\n            if (info.isDeep() && element.hasPath(path)\n                    && element.getChildrenCount() > 0) {\n                info.throwLockException(\"Some child node is locked\", session);\n            }\n\n            // create lock token"
            },
            {
              "step": 4,
              "variableName": "throwLockException",
              "startLine": 259,
              "startColumn": 17,
              "endLine": 259,
              "endColumn": 35,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockInfo.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "     * @throws LockException always thrown, unless another error occurs\n     * @throws RepositoryException if the path of this lock can not be resolved\n     */\n    public void throwLockException(String message, SessionImpl session)\n            throws LockException, RepositoryException {\n        String path;\n        try {"
            },
            {
              "step": 5,
              "variableName": "id",
              "startLine": 264,
              "startColumn": 59,
              "endLine": 264,
              "endColumn": 61,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockInfo.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "        String path;\n        try {\n            path = session.getJCRPath(\n                    session.getHierarchyManager().getPath(id));\n        } catch (RepositoryException ignored) {\n            path = null;\n        }"
            },
            {
              "step": 6,
              "variableName": "id",
              "startLine": 264,
              "startColumn": 59,
              "endLine": 264,
              "endColumn": 61,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockInfo.java",
              "type": "NodeId",
              "code": "        String path;\n        try {\n            path = session.getJCRPath(\n                    session.getHierarchyManager().getPath(id));\n        } catch (RepositoryException ignored) {\n            path = null;\n        }"
            },
            {
              "step": 7,
              "variableName": "ItemId id",
              "startLine": 252,
              "startColumn": 25,
              "endLine": 252,
              "endColumn": 34,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/CachingHierarchyManager.java",
              "type": "NodeId",
              "code": "     * Overridden method simply checks whether we have an item matching the id\n     * and returns its path, otherwise calls base implementation.\n     */\n    public Path getPath(ItemId id)\n            throws ItemNotFoundException, RepositoryException {\n\n        if (id.denotesNode()) {"
            },
            {
              "step": 8,
              "variableName": "id",
              "startLine": 267,
              "startColumn": 30,
              "endLine": 267,
              "endColumn": 32,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/CachingHierarchyManager.java",
              "type": "NodeId",
              "code": "                }\n            }\n        }\n        return super.getPath(id);\n    }\n\n    /**"
            },
            {
              "step": 9,
              "variableName": "ItemId id",
              "startLine": 392,
              "startColumn": 25,
              "endLine": 392,
              "endColumn": 34,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "    /**\n     * {@inheritDoc}\n     */\n    public Path getPath(ItemId id)\n            throws ItemNotFoundException, RepositoryException {\n        // shortcut\n        if (id.equals(rootNodeId)) {"
            },
            {
              "step": 10,
              "variableName": "id",
              "startLine": 402,
              "startColumn": 45,
              "endLine": 402,
              "endColumn": 47,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "        PathBuilder builder = new PathBuilder();\n\n        try {\n            buildPath(builder, getItemState(id), new CycleDetector());\n            return builder.getPath();\n        } catch (NoSuchItemStateException nsise) {\n            String msg = \"failed to build path of \" + id;"
            },
            {
              "step": 11,
              "variableName": "ItemId id",
              "startLine": 152,
              "startColumn": 38,
              "endLine": 152,
              "endColumn": 47,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "     * @throws ItemStateException       if an error occurs\n     * @see ZombieHierarchyManager#getItemState(ItemId)\n     */\n    protected ItemState getItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n        return provider.getItemState(id);\n    }"
            },
            {
              "step": 12,
              "variableName": "id",
              "startLine": 154,
              "startColumn": 38,
              "endLine": 154,
              "endColumn": 40,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "     */\n    protected ItemState getItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n        return provider.getItemState(id);\n    }\n\n    /**"
            },
            {
              "step": 13,
              "variableName": "ItemId id",
              "startLine": 132,
              "startColumn": 39,
              "endLine": 132,
              "endColumn": 48,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/observation/ChangeLogBasedHierarchyMgr.java",
              "type": "NodeId",
              "code": "         * <code>id</code>.\n         * @throws ItemStateException if any other error occurs.\n         */\n        public ItemState getItemState(ItemId id) throws NoSuchItemStateException, ItemStateException {\n            // check ChangeLog first\n            try {\n                ItemState state = changes.get(id);"
            },
            {
              "step": 14,
              "variableName": "id",
              "startLine": 142,
              "startColumn": 38,
              "endLine": 142,
              "endColumn": 40,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/observation/ChangeLogBasedHierarchyMgr.java",
              "type": "NodeId",
              "code": "            } catch (NoSuchItemStateException e) {\n                // item has been deleted, but we still return it by asking base\n            }\n            return base.getItemState(id);\n        }\n\n        /**"
            },
            {
              "step": 15,
              "variableName": "ItemId id",
              "startLine": 258,
              "startColumn": 35,
              "endLine": 258,
              "endColumn": 44,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "    /**\n     * {@inheritDoc}\n     */\n    public ItemState getItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n        // check the virtual root ids (needed for overlay)\n        for (VirtualItemStateProvider virtualProvider : virtualProviders) {"
            },
            {
              "step": 16,
              "variableName": "id",
              "startLine": 271,
              "startColumn": 43,
              "endLine": 271,
              "endColumn": 45,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "        ISMLocking.ReadLock readLock = acquireReadLock(id);\n        try {\n            // check internal first\n            return getNonVirtualItemState(id);\n        } catch (NoSuchItemStateException e) {\n            // Fall through to virtual state providers. We can afford the\n            // exception-for-control-flow performance hit here, as almost"
            },
            {
              "step": 17,
              "variableName": "ItemId id",
              "startLine": 1767,
              "startColumn": 46,
              "endLine": 1767,
              "endColumn": 55,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "     * Returns the item state for the given id without considering virtual\n     * item state providers.\n     */\n    private ItemState getNonVirtualItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n        // First check if the item state is already in the cache\n        ItemState state = cache.retrieve(id);"
            },
            {
              "step": 18,
              "variableName": "id",
              "startLine": 1798,
              "startColumn": 35,
              "endLine": 1798,
              "endColumn": 37,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "        try {\n            // Load the item state from persistent storage\n            // NOTE: This needs to happen outside a synchronized block!\n            state = loadItemState(id);\n            state.setStatus(ItemState.STATUS_EXISTING);\n            state.setContainer(this);\n"
            },
            {
              "step": 19,
              "variableName": "ItemId id",
              "startLine": 1873,
              "startColumn": 37,
              "endLine": 1873,
              "endColumn": 46,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "     * @param id item id\n     * @return item state\n     */\n    private ItemState loadItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n\n        ItemState state;"
            },
            {
              "step": 20,
              "variableName": "(NodeId) id",
              "startLine": 1878,
              "startColumn": 37,
              "endLine": 1878,
              "endColumn": 48,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "\n        ItemState state;\n        if (id.denotesNode()) {\n            state = persistMgr.load((NodeId) id);\n        } else {\n            state = persistMgr.load((PropertyId) id);\n        }"
            },
            {
              "step": 21,
              "variableName": "NodeId id",
              "startLine": 489,
              "startColumn": 27,
              "endLine": 489,
              "endColumn": 36,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/bundle/AbstractBundlePersistenceManager.java",
              "type": "NodeId",
              "code": "     *\n     * Loads the state via the appropriate NodePropBundle.\n     */\n    public NodeState load(NodeId id) throws NoSuchItemStateException, ItemStateException {\n        NodePropBundle bundle = getBundle(id);\n        if (bundle == null) {\n            throw new NoSuchItemStateException(id.toString());"
            },
            {
              "step": 22,
              "variableName": "id",
              "startLine": 490,
              "startColumn": 43,
              "endLine": 490,
              "endColumn": 45,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/bundle/AbstractBundlePersistenceManager.java",
              "type": "NodeId",
              "code": "     * Loads the state via the appropriate NodePropBundle.\n     */\n    public NodeState load(NodeId id) throws NoSuchItemStateException, ItemStateException {\n        NodePropBundle bundle = getBundle(id);\n        if (bundle == null) {\n            throw new NoSuchItemStateException(id.toString());\n        }"
            },
            {
              "step": 23,
              "variableName": "NodeId id",
              "startLine": 740,
              "startColumn": 38,
              "endLine": 740,
              "endColumn": 47,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/bundle/AbstractBundlePersistenceManager.java",
              "type": "NodeId",
              "code": "     *\n     * @throws ItemStateException if an error occurs.\n     */\n    private NodePropBundle getBundle(NodeId id) throws ItemStateException {\n        NodePropBundle bundle = bundles.get(id);\n        readCounter.incrementAndGet();\n        if (bundle == MISSING) {"
            },
            {
              "step": 24,
              "variableName": "id",
              "startLine": 750,
              "startColumn": 35,
              "endLine": 750,
              "endColumn": 37,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/bundle/AbstractBundlePersistenceManager.java",
              "type": "NodeId",
              "code": "            return bundle;\n        }\n        // cache miss\n        return getBundleCacheMiss(id);\n    }\n\n    /**"
            },
            {
              "step": 25,
              "variableName": "NodeId id",
              "startLine": 763,
              "startColumn": 47,
              "endLine": 763,
              "endColumn": 56,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/bundle/AbstractBundlePersistenceManager.java",
              "type": "NodeId",
              "code": "     * @return\n     * @throws ItemStateException\n     */\n    private NodePropBundle getBundleCacheMiss(NodeId id)\n            throws ItemStateException {\n        long time = System.nanoTime();\n        NodePropBundle bundle = loadBundle(id);"
            },
            {
              "step": 26,
              "variableName": "id",
              "startLine": 766,
              "startColumn": 44,
              "endLine": 766,
              "endColumn": 46,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/bundle/AbstractBundlePersistenceManager.java",
              "type": "NodeId",
              "code": "    private NodePropBundle getBundleCacheMiss(NodeId id)\n            throws ItemStateException {\n        long time = System.nanoTime();\n        NodePropBundle bundle = loadBundle(id);\n        time = System.nanoTime() - time;\n        cacheMissDuration.addAndGet(time);\n        final long timeMs = time / 1000000;"
            },
            {
              "step": 27,
              "variableName": "NodeId id",
              "startLine": 517,
              "startColumn": 41,
              "endLine": 517,
              "endColumn": 50,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/mem/InMemBundlePersistenceManager.java",
              "type": "NodeId",
              "code": "     * {@inheritDoc}\n     */\n    @Override\n    protected NodePropBundle loadBundle(NodeId id) throws ItemStateException {\n        if (!bundleStore.containsKey(id)) {\n            return null;\n        }"
            },
            {
              "step": 28,
              "variableName": "msg",
              "startLine": 525,
              "startColumn": 23,
              "endLine": 525,
              "endColumn": 26,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/mem/InMemBundlePersistenceManager.java",
              "type": "",
              "code": "            return binding.readBundle(new ByteArrayInputStream(bundleStore.get(id)), id);\n        } catch (Exception e) {\n            String msg = \"failed to read bundle: \" + id + \": \" + e;\n            log.error(msg);\n            throw new ItemStateException(msg, e);\n        }\n    }"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 16,
      "fileName": "InMemPersistenceManager.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "lockToken",
              "startLine": 1279,
              "startColumn": 19,
              "endLine": 1279,
              "endColumn": 28,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "NodeId",
              "code": "         */\n        public InternalLockInfo(NodeId lockToken, boolean sessionScoped,\n                                boolean deep, String lockOwner, long timeoutHint) {\n            super(lockToken, sessionScoped, deep, lockOwner, timeoutHint);\n        }\n\n        /**"
            },
            {
              "step": 1,
              "variableName": "super(lockToken, sessionScoped, deep, lockOwner, timeoutHint);",
              "startLine": 1279,
              "startColumn": 13,
              "endLine": 1279,
              "endColumn": 75,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "         */\n        public InternalLockInfo(NodeId lockToken, boolean sessionScoped,\n                                boolean deep, String lockOwner, long timeoutHint) {\n            super(lockToken, sessionScoped, deep, lockOwner, timeoutHint);\n        }\n\n        /**"
            },
            {
              "step": 2,
              "variableName": "new InternalLockInfo(",
              "startLine": 340,
              "startColumn": 33,
              "endLine": 341,
              "endColumn": 83,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "\n        SessionImpl session = (SessionImpl) node.getSession();\n        String lockOwner = (ownerInfo != null) ? ownerInfo : session.getUserID();\n        InternalLockInfo info = new InternalLockInfo(\n                node.getNodeId(), isSessionScoped, isDeep, lockOwner, timeoutHint);\n\n        ClusterOperation operation = null;"
            },
            {
              "step": 3,
              "variableName": "info",
              "startLine": 370,
              "startColumn": 17,
              "endLine": 370,
              "endColumn": 21,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "            }\n            if (info.isDeep() && element.hasPath(path)\n                    && element.getChildrenCount() > 0) {\n                info.throwLockException(\"Some child node is locked\", session);\n            }\n\n            // create lock token"
            },
            {
              "step": 4,
              "variableName": "throwLockException",
              "startLine": 259,
              "startColumn": 17,
              "endLine": 259,
              "endColumn": 35,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockInfo.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "     * @throws LockException always thrown, unless another error occurs\n     * @throws RepositoryException if the path of this lock can not be resolved\n     */\n    public void throwLockException(String message, SessionImpl session)\n            throws LockException, RepositoryException {\n        String path;\n        try {"
            },
            {
              "step": 5,
              "variableName": "id",
              "startLine": 264,
              "startColumn": 59,
              "endLine": 264,
              "endColumn": 61,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockInfo.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "        String path;\n        try {\n            path = session.getJCRPath(\n                    session.getHierarchyManager().getPath(id));\n        } catch (RepositoryException ignored) {\n            path = null;\n        }"
            },
            {
              "step": 6,
              "variableName": "id",
              "startLine": 264,
              "startColumn": 59,
              "endLine": 264,
              "endColumn": 61,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockInfo.java",
              "type": "NodeId",
              "code": "        String path;\n        try {\n            path = session.getJCRPath(\n                    session.getHierarchyManager().getPath(id));\n        } catch (RepositoryException ignored) {\n            path = null;\n        }"
            },
            {
              "step": 7,
              "variableName": "ItemId id",
              "startLine": 252,
              "startColumn": 25,
              "endLine": 252,
              "endColumn": 34,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/CachingHierarchyManager.java",
              "type": "NodeId",
              "code": "     * Overridden method simply checks whether we have an item matching the id\n     * and returns its path, otherwise calls base implementation.\n     */\n    public Path getPath(ItemId id)\n            throws ItemNotFoundException, RepositoryException {\n\n        if (id.denotesNode()) {"
            },
            {
              "step": 8,
              "variableName": "id",
              "startLine": 267,
              "startColumn": 30,
              "endLine": 267,
              "endColumn": 32,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/CachingHierarchyManager.java",
              "type": "NodeId",
              "code": "                }\n            }\n        }\n        return super.getPath(id);\n    }\n\n    /**"
            },
            {
              "step": 9,
              "variableName": "ItemId id",
              "startLine": 392,
              "startColumn": 25,
              "endLine": 392,
              "endColumn": 34,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "    /**\n     * {@inheritDoc}\n     */\n    public Path getPath(ItemId id)\n            throws ItemNotFoundException, RepositoryException {\n        // shortcut\n        if (id.equals(rootNodeId)) {"
            },
            {
              "step": 10,
              "variableName": "id",
              "startLine": 402,
              "startColumn": 45,
              "endLine": 402,
              "endColumn": 47,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "        PathBuilder builder = new PathBuilder();\n\n        try {\n            buildPath(builder, getItemState(id), new CycleDetector());\n            return builder.getPath();\n        } catch (NoSuchItemStateException nsise) {\n            String msg = \"failed to build path of \" + id;"
            },
            {
              "step": 11,
              "variableName": "ItemId id",
              "startLine": 152,
              "startColumn": 38,
              "endLine": 152,
              "endColumn": 47,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "     * @throws ItemStateException       if an error occurs\n     * @see ZombieHierarchyManager#getItemState(ItemId)\n     */\n    protected ItemState getItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n        return provider.getItemState(id);\n    }"
            },
            {
              "step": 12,
              "variableName": "id",
              "startLine": 154,
              "startColumn": 38,
              "endLine": 154,
              "endColumn": 40,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "     */\n    protected ItemState getItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n        return provider.getItemState(id);\n    }\n\n    /**"
            },
            {
              "step": 13,
              "variableName": "ItemId id",
              "startLine": 258,
              "startColumn": 35,
              "endLine": 258,
              "endColumn": 44,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "    /**\n     * {@inheritDoc}\n     */\n    public ItemState getItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n        // check the virtual root ids (needed for overlay)\n        for (VirtualItemStateProvider virtualProvider : virtualProviders) {"
            },
            {
              "step": 14,
              "variableName": "id",
              "startLine": 271,
              "startColumn": 43,
              "endLine": 271,
              "endColumn": 45,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "        ISMLocking.ReadLock readLock = acquireReadLock(id);\n        try {\n            // check internal first\n            return getNonVirtualItemState(id);\n        } catch (NoSuchItemStateException e) {\n            // Fall through to virtual state providers. We can afford the\n            // exception-for-control-flow performance hit here, as almost"
            },
            {
              "step": 15,
              "variableName": "ItemId id",
              "startLine": 1767,
              "startColumn": 46,
              "endLine": 1767,
              "endColumn": 55,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "     * Returns the item state for the given id without considering virtual\n     * item state providers.\n     */\n    private ItemState getNonVirtualItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n        // First check if the item state is already in the cache\n        ItemState state = cache.retrieve(id);"
            },
            {
              "step": 16,
              "variableName": "id",
              "startLine": 1798,
              "startColumn": 35,
              "endLine": 1798,
              "endColumn": 37,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "        try {\n            // Load the item state from persistent storage\n            // NOTE: This needs to happen outside a synchronized block!\n            state = loadItemState(id);\n            state.setStatus(ItemState.STATUS_EXISTING);\n            state.setContainer(this);\n"
            },
            {
              "step": 17,
              "variableName": "ItemId id",
              "startLine": 1873,
              "startColumn": 37,
              "endLine": 1873,
              "endColumn": 46,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "     * @param id item id\n     * @return item state\n     */\n    private ItemState loadItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n\n        ItemState state;"
            },
            {
              "step": 18,
              "variableName": "(NodeId) id",
              "startLine": 1878,
              "startColumn": 37,
              "endLine": 1878,
              "endColumn": 48,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "\n        ItemState state;\n        if (id.denotesNode()) {\n            state = persistMgr.load((NodeId) id);\n        } else {\n            state = persistMgr.load((PropertyId) id);\n        }"
            },
            {
              "step": 19,
              "variableName": "NodeId id",
              "startLine": 361,
              "startColumn": 40,
              "endLine": 361,
              "endColumn": 49,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/mem/InMemPersistenceManager.java",
              "type": "NodeId",
              "code": "    /**\n     * {@inheritDoc}\n     */\n    public synchronized NodeState load(NodeId id)\n            throws NoSuchItemStateException, ItemStateException {\n\n        if (!initialized) {"
            },
            {
              "step": 20,
              "variableName": "msg",
              "startLine": 380,
              "startColumn": 23,
              "endLine": 380,
              "endColumn": 26,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/mem/InMemPersistenceManager.java",
              "type": "",
              "code": "            return state;\n        } catch (Exception e) {\n            String msg = \"failed to read node state: \" + id;\n            log.debug(msg);\n            throw new ItemStateException(msg, e);\n        }\n    }"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "lockToken",
              "startLine": 1279,
              "startColumn": 19,
              "endLine": 1279,
              "endColumn": 28,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "NodeId",
              "code": "         */\n        public InternalLockInfo(NodeId lockToken, boolean sessionScoped,\n                                boolean deep, String lockOwner, long timeoutHint) {\n            super(lockToken, sessionScoped, deep, lockOwner, timeoutHint);\n        }\n\n        /**"
            },
            {
              "step": 1,
              "variableName": "super(lockToken, sessionScoped, deep, lockOwner, timeoutHint);",
              "startLine": 1279,
              "startColumn": 13,
              "endLine": 1279,
              "endColumn": 75,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "         */\n        public InternalLockInfo(NodeId lockToken, boolean sessionScoped,\n                                boolean deep, String lockOwner, long timeoutHint) {\n            super(lockToken, sessionScoped, deep, lockOwner, timeoutHint);\n        }\n\n        /**"
            },
            {
              "step": 2,
              "variableName": "new InternalLockInfo(",
              "startLine": 340,
              "startColumn": 33,
              "endLine": 341,
              "endColumn": 83,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "\n        SessionImpl session = (SessionImpl) node.getSession();\n        String lockOwner = (ownerInfo != null) ? ownerInfo : session.getUserID();\n        InternalLockInfo info = new InternalLockInfo(\n                node.getNodeId(), isSessionScoped, isDeep, lockOwner, timeoutHint);\n\n        ClusterOperation operation = null;"
            },
            {
              "step": 3,
              "variableName": "info",
              "startLine": 370,
              "startColumn": 17,
              "endLine": 370,
              "endColumn": 21,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "            }\n            if (info.isDeep() && element.hasPath(path)\n                    && element.getChildrenCount() > 0) {\n                info.throwLockException(\"Some child node is locked\", session);\n            }\n\n            // create lock token"
            },
            {
              "step": 4,
              "variableName": "throwLockException",
              "startLine": 259,
              "startColumn": 17,
              "endLine": 259,
              "endColumn": 35,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockInfo.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "     * @throws LockException always thrown, unless another error occurs\n     * @throws RepositoryException if the path of this lock can not be resolved\n     */\n    public void throwLockException(String message, SessionImpl session)\n            throws LockException, RepositoryException {\n        String path;\n        try {"
            },
            {
              "step": 5,
              "variableName": "id",
              "startLine": 264,
              "startColumn": 59,
              "endLine": 264,
              "endColumn": 61,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockInfo.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "        String path;\n        try {\n            path = session.getJCRPath(\n                    session.getHierarchyManager().getPath(id));\n        } catch (RepositoryException ignored) {\n            path = null;\n        }"
            },
            {
              "step": 6,
              "variableName": "id",
              "startLine": 264,
              "startColumn": 59,
              "endLine": 264,
              "endColumn": 61,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockInfo.java",
              "type": "NodeId",
              "code": "        String path;\n        try {\n            path = session.getJCRPath(\n                    session.getHierarchyManager().getPath(id));\n        } catch (RepositoryException ignored) {\n            path = null;\n        }"
            },
            {
              "step": 7,
              "variableName": "ItemId id",
              "startLine": 252,
              "startColumn": 25,
              "endLine": 252,
              "endColumn": 34,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/CachingHierarchyManager.java",
              "type": "NodeId",
              "code": "     * Overridden method simply checks whether we have an item matching the id\n     * and returns its path, otherwise calls base implementation.\n     */\n    public Path getPath(ItemId id)\n            throws ItemNotFoundException, RepositoryException {\n\n        if (id.denotesNode()) {"
            },
            {
              "step": 8,
              "variableName": "id",
              "startLine": 267,
              "startColumn": 30,
              "endLine": 267,
              "endColumn": 32,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/CachingHierarchyManager.java",
              "type": "NodeId",
              "code": "                }\n            }\n        }\n        return super.getPath(id);\n    }\n\n    /**"
            },
            {
              "step": 9,
              "variableName": "ItemId id",
              "startLine": 392,
              "startColumn": 25,
              "endLine": 392,
              "endColumn": 34,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "    /**\n     * {@inheritDoc}\n     */\n    public Path getPath(ItemId id)\n            throws ItemNotFoundException, RepositoryException {\n        // shortcut\n        if (id.equals(rootNodeId)) {"
            },
            {
              "step": 10,
              "variableName": "id",
              "startLine": 402,
              "startColumn": 45,
              "endLine": 402,
              "endColumn": 47,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "        PathBuilder builder = new PathBuilder();\n\n        try {\n            buildPath(builder, getItemState(id), new CycleDetector());\n            return builder.getPath();\n        } catch (NoSuchItemStateException nsise) {\n            String msg = \"failed to build path of \" + id;"
            },
            {
              "step": 11,
              "variableName": "ItemId id",
              "startLine": 152,
              "startColumn": 38,
              "endLine": 152,
              "endColumn": 47,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "     * @throws ItemStateException       if an error occurs\n     * @see ZombieHierarchyManager#getItemState(ItemId)\n     */\n    protected ItemState getItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n        return provider.getItemState(id);\n    }"
            },
            {
              "step": 12,
              "variableName": "id",
              "startLine": 154,
              "startColumn": 38,
              "endLine": 154,
              "endColumn": 40,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "     */\n    protected ItemState getItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n        return provider.getItemState(id);\n    }\n\n    /**"
            },
            {
              "step": 13,
              "variableName": "ItemId id",
              "startLine": 160,
              "startColumn": 35,
              "endLine": 160,
              "endColumn": 44,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/LocalItemStateManager.java",
              "type": "NodeId",
              "code": "    /**\n     * {@inheritDoc}\n     */\n    public ItemState getItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n\n        // check change log"
            },
            {
              "step": 14,
              "variableName": "(NodeId) id",
              "startLine": 175,
              "startColumn": 42,
              "endLine": 175,
              "endColumn": 53,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/LocalItemStateManager.java",
              "type": "NodeId",
              "code": "            if (state == null) {\n                // regular behaviour\n                if (id.denotesNode()) {\n                    state = getNodeState((NodeId) id);\n                } else {\n                    state = getPropertyState((PropertyId) id);\n                }"
            },
            {
              "step": 15,
              "variableName": "NodeId id",
              "startLine": 106,
              "startColumn": 38,
              "endLine": 106,
              "endColumn": 47,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/LocalItemStateManager.java",
              "type": "NodeId",
              "code": "     * @throws NoSuchItemStateException\n     * @throws ItemStateException\n     */\n    protected NodeState getNodeState(NodeId id)\n            throws NoSuchItemStateException, ItemStateException {\n\n        // load from parent manager and wrap"
            },
            {
              "step": 16,
              "variableName": "id",
              "startLine": 110,
              "startColumn": 67,
              "endLine": 110,
              "endColumn": 69,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/LocalItemStateManager.java",
              "type": "NodeId",
              "code": "            throws NoSuchItemStateException, ItemStateException {\n\n        // load from parent manager and wrap\n        NodeState state = (NodeState) sharedStateMgr.getItemState(id);\n        state = new NodeState(state, state.getStatus(), false);\n\n        // put it in cache"
            },
            {
              "step": 17,
              "variableName": "ItemId id",
              "startLine": 258,
              "startColumn": 35,
              "endLine": 258,
              "endColumn": 44,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "    /**\n     * {@inheritDoc}\n     */\n    public ItemState getItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n        // check the virtual root ids (needed for overlay)\n        for (VirtualItemStateProvider virtualProvider : virtualProviders) {"
            },
            {
              "step": 18,
              "variableName": "id",
              "startLine": 271,
              "startColumn": 43,
              "endLine": 271,
              "endColumn": 45,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "        ISMLocking.ReadLock readLock = acquireReadLock(id);\n        try {\n            // check internal first\n            return getNonVirtualItemState(id);\n        } catch (NoSuchItemStateException e) {\n            // Fall through to virtual state providers. We can afford the\n            // exception-for-control-flow performance hit here, as almost"
            },
            {
              "step": 19,
              "variableName": "ItemId id",
              "startLine": 1767,
              "startColumn": 46,
              "endLine": 1767,
              "endColumn": 55,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "     * Returns the item state for the given id without considering virtual\n     * item state providers.\n     */\n    private ItemState getNonVirtualItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n        // First check if the item state is already in the cache\n        ItemState state = cache.retrieve(id);"
            },
            {
              "step": 20,
              "variableName": "id",
              "startLine": 1798,
              "startColumn": 35,
              "endLine": 1798,
              "endColumn": 37,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "        try {\n            // Load the item state from persistent storage\n            // NOTE: This needs to happen outside a synchronized block!\n            state = loadItemState(id);\n            state.setStatus(ItemState.STATUS_EXISTING);\n            state.setContainer(this);\n"
            },
            {
              "step": 21,
              "variableName": "ItemId id",
              "startLine": 1873,
              "startColumn": 37,
              "endLine": 1873,
              "endColumn": 46,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "     * @param id item id\n     * @return item state\n     */\n    private ItemState loadItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n\n        ItemState state;"
            },
            {
              "step": 22,
              "variableName": "(NodeId) id",
              "startLine": 1878,
              "startColumn": 37,
              "endLine": 1878,
              "endColumn": 48,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "\n        ItemState state;\n        if (id.denotesNode()) {\n            state = persistMgr.load((NodeId) id);\n        } else {\n            state = persistMgr.load((PropertyId) id);\n        }"
            },
            {
              "step": 23,
              "variableName": "NodeId id",
              "startLine": 361,
              "startColumn": 40,
              "endLine": 361,
              "endColumn": 49,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/mem/InMemPersistenceManager.java",
              "type": "NodeId",
              "code": "    /**\n     * {@inheritDoc}\n     */\n    public synchronized NodeState load(NodeId id)\n            throws NoSuchItemStateException, ItemStateException {\n\n        if (!initialized) {"
            },
            {
              "step": 24,
              "variableName": "msg",
              "startLine": 380,
              "startColumn": 23,
              "endLine": 380,
              "endColumn": 26,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/mem/InMemPersistenceManager.java",
              "type": "",
              "code": "            return state;\n        } catch (Exception e) {\n            String msg = \"failed to read node state: \" + id;\n            log.debug(msg);\n            throw new ItemStateException(msg, e);\n        }\n    }"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "lockToken",
              "startLine": 1279,
              "startColumn": 19,
              "endLine": 1279,
              "endColumn": 28,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "NodeId",
              "code": "         */\n        public InternalLockInfo(NodeId lockToken, boolean sessionScoped,\n                                boolean deep, String lockOwner, long timeoutHint) {\n            super(lockToken, sessionScoped, deep, lockOwner, timeoutHint);\n        }\n\n        /**"
            },
            {
              "step": 1,
              "variableName": "super(lockToken, sessionScoped, deep, lockOwner, timeoutHint);",
              "startLine": 1279,
              "startColumn": 13,
              "endLine": 1279,
              "endColumn": 75,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "         */\n        public InternalLockInfo(NodeId lockToken, boolean sessionScoped,\n                                boolean deep, String lockOwner, long timeoutHint) {\n            super(lockToken, sessionScoped, deep, lockOwner, timeoutHint);\n        }\n\n        /**"
            },
            {
              "step": 2,
              "variableName": "new InternalLockInfo(",
              "startLine": 340,
              "startColumn": 33,
              "endLine": 341,
              "endColumn": 83,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "\n        SessionImpl session = (SessionImpl) node.getSession();\n        String lockOwner = (ownerInfo != null) ? ownerInfo : session.getUserID();\n        InternalLockInfo info = new InternalLockInfo(\n                node.getNodeId(), isSessionScoped, isDeep, lockOwner, timeoutHint);\n\n        ClusterOperation operation = null;"
            },
            {
              "step": 3,
              "variableName": "info",
              "startLine": 370,
              "startColumn": 17,
              "endLine": 370,
              "endColumn": 21,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "            }\n            if (info.isDeep() && element.hasPath(path)\n                    && element.getChildrenCount() > 0) {\n                info.throwLockException(\"Some child node is locked\", session);\n            }\n\n            // create lock token"
            },
            {
              "step": 4,
              "variableName": "throwLockException",
              "startLine": 259,
              "startColumn": 17,
              "endLine": 259,
              "endColumn": 35,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockInfo.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "     * @throws LockException always thrown, unless another error occurs\n     * @throws RepositoryException if the path of this lock can not be resolved\n     */\n    public void throwLockException(String message, SessionImpl session)\n            throws LockException, RepositoryException {\n        String path;\n        try {"
            },
            {
              "step": 5,
              "variableName": "id",
              "startLine": 264,
              "startColumn": 59,
              "endLine": 264,
              "endColumn": 61,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockInfo.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "        String path;\n        try {\n            path = session.getJCRPath(\n                    session.getHierarchyManager().getPath(id));\n        } catch (RepositoryException ignored) {\n            path = null;\n        }"
            },
            {
              "step": 6,
              "variableName": "id",
              "startLine": 264,
              "startColumn": 59,
              "endLine": 264,
              "endColumn": 61,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockInfo.java",
              "type": "NodeId",
              "code": "        String path;\n        try {\n            path = session.getJCRPath(\n                    session.getHierarchyManager().getPath(id));\n        } catch (RepositoryException ignored) {\n            path = null;\n        }"
            },
            {
              "step": 7,
              "variableName": "ItemId id",
              "startLine": 252,
              "startColumn": 25,
              "endLine": 252,
              "endColumn": 34,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/CachingHierarchyManager.java",
              "type": "NodeId",
              "code": "     * Overridden method simply checks whether we have an item matching the id\n     * and returns its path, otherwise calls base implementation.\n     */\n    public Path getPath(ItemId id)\n            throws ItemNotFoundException, RepositoryException {\n\n        if (id.denotesNode()) {"
            },
            {
              "step": 8,
              "variableName": "id",
              "startLine": 267,
              "startColumn": 30,
              "endLine": 267,
              "endColumn": 32,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/CachingHierarchyManager.java",
              "type": "NodeId",
              "code": "                }\n            }\n        }\n        return super.getPath(id);\n    }\n\n    /**"
            },
            {
              "step": 9,
              "variableName": "ItemId id",
              "startLine": 392,
              "startColumn": 25,
              "endLine": 392,
              "endColumn": 34,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "    /**\n     * {@inheritDoc}\n     */\n    public Path getPath(ItemId id)\n            throws ItemNotFoundException, RepositoryException {\n        // shortcut\n        if (id.equals(rootNodeId)) {"
            },
            {
              "step": 10,
              "variableName": "id",
              "startLine": 402,
              "startColumn": 45,
              "endLine": 402,
              "endColumn": 47,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "        PathBuilder builder = new PathBuilder();\n\n        try {\n            buildPath(builder, getItemState(id), new CycleDetector());\n            return builder.getPath();\n        } catch (NoSuchItemStateException nsise) {\n            String msg = \"failed to build path of \" + id;"
            },
            {
              "step": 11,
              "variableName": "ItemId id",
              "startLine": 152,
              "startColumn": 38,
              "endLine": 152,
              "endColumn": 47,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "     * @throws ItemStateException       if an error occurs\n     * @see ZombieHierarchyManager#getItemState(ItemId)\n     */\n    protected ItemState getItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n        return provider.getItemState(id);\n    }"
            },
            {
              "step": 12,
              "variableName": "id",
              "startLine": 154,
              "startColumn": 38,
              "endLine": 154,
              "endColumn": 40,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "     */\n    protected ItemState getItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n        return provider.getItemState(id);\n    }\n\n    /**"
            },
            {
              "step": 13,
              "variableName": "ItemId id",
              "startLine": 132,
              "startColumn": 39,
              "endLine": 132,
              "endColumn": 48,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/observation/ChangeLogBasedHierarchyMgr.java",
              "type": "NodeId",
              "code": "         * <code>id</code>.\n         * @throws ItemStateException if any other error occurs.\n         */\n        public ItemState getItemState(ItemId id) throws NoSuchItemStateException, ItemStateException {\n            // check ChangeLog first\n            try {\n                ItemState state = changes.get(id);"
            },
            {
              "step": 14,
              "variableName": "id",
              "startLine": 142,
              "startColumn": 38,
              "endLine": 142,
              "endColumn": 40,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/observation/ChangeLogBasedHierarchyMgr.java",
              "type": "NodeId",
              "code": "            } catch (NoSuchItemStateException e) {\n                // item has been deleted, but we still return it by asking base\n            }\n            return base.getItemState(id);\n        }\n\n        /**"
            },
            {
              "step": 15,
              "variableName": "ItemId id",
              "startLine": 258,
              "startColumn": 35,
              "endLine": 258,
              "endColumn": 44,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "    /**\n     * {@inheritDoc}\n     */\n    public ItemState getItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n        // check the virtual root ids (needed for overlay)\n        for (VirtualItemStateProvider virtualProvider : virtualProviders) {"
            },
            {
              "step": 16,
              "variableName": "id",
              "startLine": 271,
              "startColumn": 43,
              "endLine": 271,
              "endColumn": 45,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "        ISMLocking.ReadLock readLock = acquireReadLock(id);\n        try {\n            // check internal first\n            return getNonVirtualItemState(id);\n        } catch (NoSuchItemStateException e) {\n            // Fall through to virtual state providers. We can afford the\n            // exception-for-control-flow performance hit here, as almost"
            },
            {
              "step": 17,
              "variableName": "ItemId id",
              "startLine": 1767,
              "startColumn": 46,
              "endLine": 1767,
              "endColumn": 55,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "     * Returns the item state for the given id without considering virtual\n     * item state providers.\n     */\n    private ItemState getNonVirtualItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n        // First check if the item state is already in the cache\n        ItemState state = cache.retrieve(id);"
            },
            {
              "step": 18,
              "variableName": "id",
              "startLine": 1798,
              "startColumn": 35,
              "endLine": 1798,
              "endColumn": 37,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "        try {\n            // Load the item state from persistent storage\n            // NOTE: This needs to happen outside a synchronized block!\n            state = loadItemState(id);\n            state.setStatus(ItemState.STATUS_EXISTING);\n            state.setContainer(this);\n"
            },
            {
              "step": 19,
              "variableName": "ItemId id",
              "startLine": 1873,
              "startColumn": 37,
              "endLine": 1873,
              "endColumn": 46,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "     * @param id item id\n     * @return item state\n     */\n    private ItemState loadItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n\n        ItemState state;"
            },
            {
              "step": 20,
              "variableName": "(NodeId) id",
              "startLine": 1878,
              "startColumn": 37,
              "endLine": 1878,
              "endColumn": 48,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "\n        ItemState state;\n        if (id.denotesNode()) {\n            state = persistMgr.load((NodeId) id);\n        } else {\n            state = persistMgr.load((PropertyId) id);\n        }"
            },
            {
              "step": 21,
              "variableName": "NodeId id",
              "startLine": 361,
              "startColumn": 40,
              "endLine": 361,
              "endColumn": 49,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/mem/InMemPersistenceManager.java",
              "type": "NodeId",
              "code": "    /**\n     * {@inheritDoc}\n     */\n    public synchronized NodeState load(NodeId id)\n            throws NoSuchItemStateException, ItemStateException {\n\n        if (!initialized) {"
            },
            {
              "step": 22,
              "variableName": "msg",
              "startLine": 380,
              "startColumn": 23,
              "endLine": 380,
              "endColumn": 26,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/mem/InMemPersistenceManager.java",
              "type": "",
              "code": "            return state;\n        } catch (Exception e) {\n            String msg = \"failed to read node state: \" + id;\n            log.debug(msg);\n            throw new ItemStateException(msg, e);\n        }\n    }"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "lockToken",
              "startLine": 1279,
              "startColumn": 19,
              "endLine": 1279,
              "endColumn": 28,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "NodeId",
              "code": "         */\n        public InternalLockInfo(NodeId lockToken, boolean sessionScoped,\n                                boolean deep, String lockOwner, long timeoutHint) {\n            super(lockToken, sessionScoped, deep, lockOwner, timeoutHint);\n        }\n\n        /**"
            },
            {
              "step": 1,
              "variableName": "super(lockToken, sessionScoped, deep, lockOwner, timeoutHint);",
              "startLine": 1279,
              "startColumn": 13,
              "endLine": 1279,
              "endColumn": 75,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "         */\n        public InternalLockInfo(NodeId lockToken, boolean sessionScoped,\n                                boolean deep, String lockOwner, long timeoutHint) {\n            super(lockToken, sessionScoped, deep, lockOwner, timeoutHint);\n        }\n\n        /**"
            },
            {
              "step": 2,
              "variableName": "new InternalLockInfo(",
              "startLine": 340,
              "startColumn": 33,
              "endLine": 341,
              "endColumn": 83,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "\n        SessionImpl session = (SessionImpl) node.getSession();\n        String lockOwner = (ownerInfo != null) ? ownerInfo : session.getUserID();\n        InternalLockInfo info = new InternalLockInfo(\n                node.getNodeId(), isSessionScoped, isDeep, lockOwner, timeoutHint);\n\n        ClusterOperation operation = null;"
            },
            {
              "step": 3,
              "variableName": "info",
              "startLine": 370,
              "startColumn": 17,
              "endLine": 370,
              "endColumn": 21,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "            }\n            if (info.isDeep() && element.hasPath(path)\n                    && element.getChildrenCount() > 0) {\n                info.throwLockException(\"Some child node is locked\", session);\n            }\n\n            // create lock token"
            },
            {
              "step": 4,
              "variableName": "throwLockException",
              "startLine": 259,
              "startColumn": 17,
              "endLine": 259,
              "endColumn": 35,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockInfo.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "     * @throws LockException always thrown, unless another error occurs\n     * @throws RepositoryException if the path of this lock can not be resolved\n     */\n    public void throwLockException(String message, SessionImpl session)\n            throws LockException, RepositoryException {\n        String path;\n        try {"
            },
            {
              "step": 5,
              "variableName": "id",
              "startLine": 264,
              "startColumn": 59,
              "endLine": 264,
              "endColumn": 61,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockInfo.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "        String path;\n        try {\n            path = session.getJCRPath(\n                    session.getHierarchyManager().getPath(id));\n        } catch (RepositoryException ignored) {\n            path = null;\n        }"
            },
            {
              "step": 6,
              "variableName": "id",
              "startLine": 264,
              "startColumn": 59,
              "endLine": 264,
              "endColumn": 61,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockInfo.java",
              "type": "NodeId",
              "code": "        String path;\n        try {\n            path = session.getJCRPath(\n                    session.getHierarchyManager().getPath(id));\n        } catch (RepositoryException ignored) {\n            path = null;\n        }"
            },
            {
              "step": 7,
              "variableName": "ItemId id",
              "startLine": 252,
              "startColumn": 25,
              "endLine": 252,
              "endColumn": 34,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/CachingHierarchyManager.java",
              "type": "NodeId",
              "code": "     * Overridden method simply checks whether we have an item matching the id\n     * and returns its path, otherwise calls base implementation.\n     */\n    public Path getPath(ItemId id)\n            throws ItemNotFoundException, RepositoryException {\n\n        if (id.denotesNode()) {"
            },
            {
              "step": 8,
              "variableName": "id",
              "startLine": 267,
              "startColumn": 30,
              "endLine": 267,
              "endColumn": 32,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/CachingHierarchyManager.java",
              "type": "NodeId",
              "code": "                }\n            }\n        }\n        return super.getPath(id);\n    }\n\n    /**"
            },
            {
              "step": 9,
              "variableName": "ItemId id",
              "startLine": 392,
              "startColumn": 25,
              "endLine": 392,
              "endColumn": 34,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "    /**\n     * {@inheritDoc}\n     */\n    public Path getPath(ItemId id)\n            throws ItemNotFoundException, RepositoryException {\n        // shortcut\n        if (id.equals(rootNodeId)) {"
            },
            {
              "step": 10,
              "variableName": "id",
              "startLine": 402,
              "startColumn": 45,
              "endLine": 402,
              "endColumn": 47,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "        PathBuilder builder = new PathBuilder();\n\n        try {\n            buildPath(builder, getItemState(id), new CycleDetector());\n            return builder.getPath();\n        } catch (NoSuchItemStateException nsise) {\n            String msg = \"failed to build path of \" + id;"
            },
            {
              "step": 11,
              "variableName": "ItemId id",
              "startLine": 152,
              "startColumn": 38,
              "endLine": 152,
              "endColumn": 47,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "     * @throws ItemStateException       if an error occurs\n     * @see ZombieHierarchyManager#getItemState(ItemId)\n     */\n    protected ItemState getItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n        return provider.getItemState(id);\n    }"
            },
            {
              "step": 12,
              "variableName": "id",
              "startLine": 154,
              "startColumn": 38,
              "endLine": 154,
              "endColumn": 40,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "     */\n    protected ItemState getItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n        return provider.getItemState(id);\n    }\n\n    /**"
            },
            {
              "step": 13,
              "variableName": "ItemId id",
              "startLine": 120,
              "startColumn": 48,
              "endLine": 120,
              "endColumn": 57,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/VersionItemStateProvider.java",
              "type": "NodeId",
              "code": "    /**\n     * @inheritDoc\n     */\n    public synchronized ItemState getItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n        ItemState item = items.get(id);\n        if (item == null) {"
            },
            {
              "step": 14,
              "variableName": "id",
              "startLine": 124,
              "startColumn": 42,
              "endLine": 124,
              "endColumn": 44,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/VersionItemStateProvider.java",
              "type": "NodeId",
              "code": "            throws NoSuchItemStateException, ItemStateException {\n        ItemState item = items.get(id);\n        if (item == null) {\n            item = stateMgr.getItemState(id);\n            items.put(id, item);\n        }\n        return item;"
            },
            {
              "step": 15,
              "variableName": "ItemId id",
              "startLine": 258,
              "startColumn": 35,
              "endLine": 258,
              "endColumn": 44,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "    /**\n     * {@inheritDoc}\n     */\n    public ItemState getItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n        // check the virtual root ids (needed for overlay)\n        for (VirtualItemStateProvider virtualProvider : virtualProviders) {"
            },
            {
              "step": 16,
              "variableName": "id",
              "startLine": 271,
              "startColumn": 43,
              "endLine": 271,
              "endColumn": 45,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "        ISMLocking.ReadLock readLock = acquireReadLock(id);\n        try {\n            // check internal first\n            return getNonVirtualItemState(id);\n        } catch (NoSuchItemStateException e) {\n            // Fall through to virtual state providers. We can afford the\n            // exception-for-control-flow performance hit here, as almost"
            },
            {
              "step": 17,
              "variableName": "ItemId id",
              "startLine": 1767,
              "startColumn": 46,
              "endLine": 1767,
              "endColumn": 55,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "     * Returns the item state for the given id without considering virtual\n     * item state providers.\n     */\n    private ItemState getNonVirtualItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n        // First check if the item state is already in the cache\n        ItemState state = cache.retrieve(id);"
            },
            {
              "step": 18,
              "variableName": "id",
              "startLine": 1798,
              "startColumn": 35,
              "endLine": 1798,
              "endColumn": 37,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "        try {\n            // Load the item state from persistent storage\n            // NOTE: This needs to happen outside a synchronized block!\n            state = loadItemState(id);\n            state.setStatus(ItemState.STATUS_EXISTING);\n            state.setContainer(this);\n"
            },
            {
              "step": 19,
              "variableName": "ItemId id",
              "startLine": 1873,
              "startColumn": 37,
              "endLine": 1873,
              "endColumn": 46,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "     * @param id item id\n     * @return item state\n     */\n    private ItemState loadItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n\n        ItemState state;"
            },
            {
              "step": 20,
              "variableName": "(NodeId) id",
              "startLine": 1878,
              "startColumn": 37,
              "endLine": 1878,
              "endColumn": 48,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "\n        ItemState state;\n        if (id.denotesNode()) {\n            state = persistMgr.load((NodeId) id);\n        } else {\n            state = persistMgr.load((PropertyId) id);\n        }"
            },
            {
              "step": 21,
              "variableName": "NodeId id",
              "startLine": 361,
              "startColumn": 40,
              "endLine": 361,
              "endColumn": 49,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/mem/InMemPersistenceManager.java",
              "type": "NodeId",
              "code": "    /**\n     * {@inheritDoc}\n     */\n    public synchronized NodeState load(NodeId id)\n            throws NoSuchItemStateException, ItemStateException {\n\n        if (!initialized) {"
            },
            {
              "step": 22,
              "variableName": "msg",
              "startLine": 380,
              "startColumn": 23,
              "endLine": 380,
              "endColumn": 26,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/mem/InMemPersistenceManager.java",
              "type": "",
              "code": "            return state;\n        } catch (Exception e) {\n            String msg = \"failed to read node state: \" + id;\n            log.debug(msg);\n            throw new ItemStateException(msg, e);\n        }\n    }"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 17,
      "fileName": "ObjectPersistenceManager.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "lockToken",
              "startLine": 1279,
              "startColumn": 19,
              "endLine": 1279,
              "endColumn": 28,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "NodeId",
              "code": "         */\n        public InternalLockInfo(NodeId lockToken, boolean sessionScoped,\n                                boolean deep, String lockOwner, long timeoutHint) {\n            super(lockToken, sessionScoped, deep, lockOwner, timeoutHint);\n        }\n\n        /**"
            },
            {
              "step": 1,
              "variableName": "super(lockToken, sessionScoped, deep, lockOwner, timeoutHint);",
              "startLine": 1279,
              "startColumn": 13,
              "endLine": 1279,
              "endColumn": 75,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "         */\n        public InternalLockInfo(NodeId lockToken, boolean sessionScoped,\n                                boolean deep, String lockOwner, long timeoutHint) {\n            super(lockToken, sessionScoped, deep, lockOwner, timeoutHint);\n        }\n\n        /**"
            },
            {
              "step": 2,
              "variableName": "new InternalLockInfo(",
              "startLine": 340,
              "startColumn": 33,
              "endLine": 341,
              "endColumn": 83,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "\n        SessionImpl session = (SessionImpl) node.getSession();\n        String lockOwner = (ownerInfo != null) ? ownerInfo : session.getUserID();\n        InternalLockInfo info = new InternalLockInfo(\n                node.getNodeId(), isSessionScoped, isDeep, lockOwner, timeoutHint);\n\n        ClusterOperation operation = null;"
            },
            {
              "step": 3,
              "variableName": "info",
              "startLine": 370,
              "startColumn": 17,
              "endLine": 370,
              "endColumn": 21,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "            }\n            if (info.isDeep() && element.hasPath(path)\n                    && element.getChildrenCount() > 0) {\n                info.throwLockException(\"Some child node is locked\", session);\n            }\n\n            // create lock token"
            },
            {
              "step": 4,
              "variableName": "throwLockException",
              "startLine": 259,
              "startColumn": 17,
              "endLine": 259,
              "endColumn": 35,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockInfo.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "     * @throws LockException always thrown, unless another error occurs\n     * @throws RepositoryException if the path of this lock can not be resolved\n     */\n    public void throwLockException(String message, SessionImpl session)\n            throws LockException, RepositoryException {\n        String path;\n        try {"
            },
            {
              "step": 5,
              "variableName": "id",
              "startLine": 264,
              "startColumn": 59,
              "endLine": 264,
              "endColumn": 61,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockInfo.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "        String path;\n        try {\n            path = session.getJCRPath(\n                    session.getHierarchyManager().getPath(id));\n        } catch (RepositoryException ignored) {\n            path = null;\n        }"
            },
            {
              "step": 6,
              "variableName": "id",
              "startLine": 264,
              "startColumn": 59,
              "endLine": 264,
              "endColumn": 61,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockInfo.java",
              "type": "NodeId",
              "code": "        String path;\n        try {\n            path = session.getJCRPath(\n                    session.getHierarchyManager().getPath(id));\n        } catch (RepositoryException ignored) {\n            path = null;\n        }"
            },
            {
              "step": 7,
              "variableName": "ItemId id",
              "startLine": 252,
              "startColumn": 25,
              "endLine": 252,
              "endColumn": 34,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/CachingHierarchyManager.java",
              "type": "NodeId",
              "code": "     * Overridden method simply checks whether we have an item matching the id\n     * and returns its path, otherwise calls base implementation.\n     */\n    public Path getPath(ItemId id)\n            throws ItemNotFoundException, RepositoryException {\n\n        if (id.denotesNode()) {"
            },
            {
              "step": 8,
              "variableName": "id",
              "startLine": 267,
              "startColumn": 30,
              "endLine": 267,
              "endColumn": 32,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/CachingHierarchyManager.java",
              "type": "NodeId",
              "code": "                }\n            }\n        }\n        return super.getPath(id);\n    }\n\n    /**"
            },
            {
              "step": 9,
              "variableName": "ItemId id",
              "startLine": 392,
              "startColumn": 25,
              "endLine": 392,
              "endColumn": 34,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "    /**\n     * {@inheritDoc}\n     */\n    public Path getPath(ItemId id)\n            throws ItemNotFoundException, RepositoryException {\n        // shortcut\n        if (id.equals(rootNodeId)) {"
            },
            {
              "step": 10,
              "variableName": "id",
              "startLine": 402,
              "startColumn": 45,
              "endLine": 402,
              "endColumn": 47,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "        PathBuilder builder = new PathBuilder();\n\n        try {\n            buildPath(builder, getItemState(id), new CycleDetector());\n            return builder.getPath();\n        } catch (NoSuchItemStateException nsise) {\n            String msg = \"failed to build path of \" + id;"
            },
            {
              "step": 11,
              "variableName": "ItemId id",
              "startLine": 152,
              "startColumn": 38,
              "endLine": 152,
              "endColumn": 47,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "     * @throws ItemStateException       if an error occurs\n     * @see ZombieHierarchyManager#getItemState(ItemId)\n     */\n    protected ItemState getItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n        return provider.getItemState(id);\n    }"
            },
            {
              "step": 12,
              "variableName": "id",
              "startLine": 154,
              "startColumn": 38,
              "endLine": 154,
              "endColumn": 40,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "     */\n    protected ItemState getItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n        return provider.getItemState(id);\n    }\n\n    /**"
            },
            {
              "step": 13,
              "variableName": "ItemId id",
              "startLine": 258,
              "startColumn": 35,
              "endLine": 258,
              "endColumn": 44,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "    /**\n     * {@inheritDoc}\n     */\n    public ItemState getItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n        // check the virtual root ids (needed for overlay)\n        for (VirtualItemStateProvider virtualProvider : virtualProviders) {"
            },
            {
              "step": 14,
              "variableName": "id",
              "startLine": 271,
              "startColumn": 43,
              "endLine": 271,
              "endColumn": 45,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "        ISMLocking.ReadLock readLock = acquireReadLock(id);\n        try {\n            // check internal first\n            return getNonVirtualItemState(id);\n        } catch (NoSuchItemStateException e) {\n            // Fall through to virtual state providers. We can afford the\n            // exception-for-control-flow performance hit here, as almost"
            },
            {
              "step": 15,
              "variableName": "ItemId id",
              "startLine": 1767,
              "startColumn": 46,
              "endLine": 1767,
              "endColumn": 55,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "     * Returns the item state for the given id without considering virtual\n     * item state providers.\n     */\n    private ItemState getNonVirtualItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n        // First check if the item state is already in the cache\n        ItemState state = cache.retrieve(id);"
            },
            {
              "step": 16,
              "variableName": "id",
              "startLine": 1798,
              "startColumn": 35,
              "endLine": 1798,
              "endColumn": 37,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "        try {\n            // Load the item state from persistent storage\n            // NOTE: This needs to happen outside a synchronized block!\n            state = loadItemState(id);\n            state.setStatus(ItemState.STATUS_EXISTING);\n            state.setContainer(this);\n"
            },
            {
              "step": 17,
              "variableName": "ItemId id",
              "startLine": 1873,
              "startColumn": 37,
              "endLine": 1873,
              "endColumn": 46,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "     * @param id item id\n     * @return item state\n     */\n    private ItemState loadItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n\n        ItemState state;"
            },
            {
              "step": 18,
              "variableName": "(NodeId) id",
              "startLine": 1878,
              "startColumn": 37,
              "endLine": 1878,
              "endColumn": 48,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "\n        ItemState state;\n        if (id.denotesNode()) {\n            state = persistMgr.load((NodeId) id);\n        } else {\n            state = persistMgr.load((PropertyId) id);\n        }"
            },
            {
              "step": 19,
              "variableName": "NodeId id",
              "startLine": 185,
              "startColumn": 40,
              "endLine": 185,
              "endColumn": 49,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/obj/ObjectPersistenceManager.java",
              "type": "NodeId",
              "code": "    /**\n     * {@inheritDoc}\n     */\n    public synchronized NodeState load(NodeId id)\n            throws NoSuchItemStateException, ItemStateException {\n        if (!initialized) {\n            throw new IllegalStateException(\"not initialized\");"
            },
            {
              "step": 20,
              "variableName": "msg",
              "startLine": 212,
              "startColumn": 27,
              "endLine": 212,
              "endColumn": 30,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/obj/ObjectPersistenceManager.java",
              "type": "",
              "code": "                return state;\n            } catch (Exception e) {\n                String msg = \"failed to read node state: \" + id;\n                log.debug(msg);\n                throw new ItemStateException(msg, e);\n            } finally {\n                in.close();"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "lockToken",
              "startLine": 1279,
              "startColumn": 19,
              "endLine": 1279,
              "endColumn": 28,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "NodeId",
              "code": "         */\n        public InternalLockInfo(NodeId lockToken, boolean sessionScoped,\n                                boolean deep, String lockOwner, long timeoutHint) {\n            super(lockToken, sessionScoped, deep, lockOwner, timeoutHint);\n        }\n\n        /**"
            },
            {
              "step": 1,
              "variableName": "super(lockToken, sessionScoped, deep, lockOwner, timeoutHint);",
              "startLine": 1279,
              "startColumn": 13,
              "endLine": 1279,
              "endColumn": 75,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "         */\n        public InternalLockInfo(NodeId lockToken, boolean sessionScoped,\n                                boolean deep, String lockOwner, long timeoutHint) {\n            super(lockToken, sessionScoped, deep, lockOwner, timeoutHint);\n        }\n\n        /**"
            },
            {
              "step": 2,
              "variableName": "new InternalLockInfo(",
              "startLine": 340,
              "startColumn": 33,
              "endLine": 341,
              "endColumn": 83,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "\n        SessionImpl session = (SessionImpl) node.getSession();\n        String lockOwner = (ownerInfo != null) ? ownerInfo : session.getUserID();\n        InternalLockInfo info = new InternalLockInfo(\n                node.getNodeId(), isSessionScoped, isDeep, lockOwner, timeoutHint);\n\n        ClusterOperation operation = null;"
            },
            {
              "step": 3,
              "variableName": "info",
              "startLine": 370,
              "startColumn": 17,
              "endLine": 370,
              "endColumn": 21,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "            }\n            if (info.isDeep() && element.hasPath(path)\n                    && element.getChildrenCount() > 0) {\n                info.throwLockException(\"Some child node is locked\", session);\n            }\n\n            // create lock token"
            },
            {
              "step": 4,
              "variableName": "throwLockException",
              "startLine": 259,
              "startColumn": 17,
              "endLine": 259,
              "endColumn": 35,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockInfo.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "     * @throws LockException always thrown, unless another error occurs\n     * @throws RepositoryException if the path of this lock can not be resolved\n     */\n    public void throwLockException(String message, SessionImpl session)\n            throws LockException, RepositoryException {\n        String path;\n        try {"
            },
            {
              "step": 5,
              "variableName": "id",
              "startLine": 264,
              "startColumn": 59,
              "endLine": 264,
              "endColumn": 61,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockInfo.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "        String path;\n        try {\n            path = session.getJCRPath(\n                    session.getHierarchyManager().getPath(id));\n        } catch (RepositoryException ignored) {\n            path = null;\n        }"
            },
            {
              "step": 6,
              "variableName": "id",
              "startLine": 264,
              "startColumn": 59,
              "endLine": 264,
              "endColumn": 61,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockInfo.java",
              "type": "NodeId",
              "code": "        String path;\n        try {\n            path = session.getJCRPath(\n                    session.getHierarchyManager().getPath(id));\n        } catch (RepositoryException ignored) {\n            path = null;\n        }"
            },
            {
              "step": 7,
              "variableName": "ItemId id",
              "startLine": 252,
              "startColumn": 25,
              "endLine": 252,
              "endColumn": 34,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/CachingHierarchyManager.java",
              "type": "NodeId",
              "code": "     * Overridden method simply checks whether we have an item matching the id\n     * and returns its path, otherwise calls base implementation.\n     */\n    public Path getPath(ItemId id)\n            throws ItemNotFoundException, RepositoryException {\n\n        if (id.denotesNode()) {"
            },
            {
              "step": 8,
              "variableName": "id",
              "startLine": 267,
              "startColumn": 30,
              "endLine": 267,
              "endColumn": 32,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/CachingHierarchyManager.java",
              "type": "NodeId",
              "code": "                }\n            }\n        }\n        return super.getPath(id);\n    }\n\n    /**"
            },
            {
              "step": 9,
              "variableName": "ItemId id",
              "startLine": 392,
              "startColumn": 25,
              "endLine": 392,
              "endColumn": 34,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "    /**\n     * {@inheritDoc}\n     */\n    public Path getPath(ItemId id)\n            throws ItemNotFoundException, RepositoryException {\n        // shortcut\n        if (id.equals(rootNodeId)) {"
            },
            {
              "step": 10,
              "variableName": "id",
              "startLine": 402,
              "startColumn": 45,
              "endLine": 402,
              "endColumn": 47,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "        PathBuilder builder = new PathBuilder();\n\n        try {\n            buildPath(builder, getItemState(id), new CycleDetector());\n            return builder.getPath();\n        } catch (NoSuchItemStateException nsise) {\n            String msg = \"failed to build path of \" + id;"
            },
            {
              "step": 11,
              "variableName": "ItemId id",
              "startLine": 152,
              "startColumn": 38,
              "endLine": 152,
              "endColumn": 47,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "     * @throws ItemStateException       if an error occurs\n     * @see ZombieHierarchyManager#getItemState(ItemId)\n     */\n    protected ItemState getItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n        return provider.getItemState(id);\n    }"
            },
            {
              "step": 12,
              "variableName": "id",
              "startLine": 154,
              "startColumn": 38,
              "endLine": 154,
              "endColumn": 40,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "     */\n    protected ItemState getItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n        return provider.getItemState(id);\n    }\n\n    /**"
            },
            {
              "step": 13,
              "variableName": "ItemId id",
              "startLine": 160,
              "startColumn": 35,
              "endLine": 160,
              "endColumn": 44,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/LocalItemStateManager.java",
              "type": "NodeId",
              "code": "    /**\n     * {@inheritDoc}\n     */\n    public ItemState getItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n\n        // check change log"
            },
            {
              "step": 14,
              "variableName": "(NodeId) id",
              "startLine": 175,
              "startColumn": 42,
              "endLine": 175,
              "endColumn": 53,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/LocalItemStateManager.java",
              "type": "NodeId",
              "code": "            if (state == null) {\n                // regular behaviour\n                if (id.denotesNode()) {\n                    state = getNodeState((NodeId) id);\n                } else {\n                    state = getPropertyState((PropertyId) id);\n                }"
            },
            {
              "step": 15,
              "variableName": "NodeId id",
              "startLine": 106,
              "startColumn": 38,
              "endLine": 106,
              "endColumn": 47,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/LocalItemStateManager.java",
              "type": "NodeId",
              "code": "     * @throws NoSuchItemStateException\n     * @throws ItemStateException\n     */\n    protected NodeState getNodeState(NodeId id)\n            throws NoSuchItemStateException, ItemStateException {\n\n        // load from parent manager and wrap"
            },
            {
              "step": 16,
              "variableName": "id",
              "startLine": 110,
              "startColumn": 67,
              "endLine": 110,
              "endColumn": 69,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/LocalItemStateManager.java",
              "type": "NodeId",
              "code": "            throws NoSuchItemStateException, ItemStateException {\n\n        // load from parent manager and wrap\n        NodeState state = (NodeState) sharedStateMgr.getItemState(id);\n        state = new NodeState(state, state.getStatus(), false);\n\n        // put it in cache"
            },
            {
              "step": 17,
              "variableName": "ItemId id",
              "startLine": 258,
              "startColumn": 35,
              "endLine": 258,
              "endColumn": 44,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "    /**\n     * {@inheritDoc}\n     */\n    public ItemState getItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n        // check the virtual root ids (needed for overlay)\n        for (VirtualItemStateProvider virtualProvider : virtualProviders) {"
            },
            {
              "step": 18,
              "variableName": "id",
              "startLine": 271,
              "startColumn": 43,
              "endLine": 271,
              "endColumn": 45,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "        ISMLocking.ReadLock readLock = acquireReadLock(id);\n        try {\n            // check internal first\n            return getNonVirtualItemState(id);\n        } catch (NoSuchItemStateException e) {\n            // Fall through to virtual state providers. We can afford the\n            // exception-for-control-flow performance hit here, as almost"
            },
            {
              "step": 19,
              "variableName": "ItemId id",
              "startLine": 1767,
              "startColumn": 46,
              "endLine": 1767,
              "endColumn": 55,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "     * Returns the item state for the given id without considering virtual\n     * item state providers.\n     */\n    private ItemState getNonVirtualItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n        // First check if the item state is already in the cache\n        ItemState state = cache.retrieve(id);"
            },
            {
              "step": 20,
              "variableName": "id",
              "startLine": 1798,
              "startColumn": 35,
              "endLine": 1798,
              "endColumn": 37,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "        try {\n            // Load the item state from persistent storage\n            // NOTE: This needs to happen outside a synchronized block!\n            state = loadItemState(id);\n            state.setStatus(ItemState.STATUS_EXISTING);\n            state.setContainer(this);\n"
            },
            {
              "step": 21,
              "variableName": "ItemId id",
              "startLine": 1873,
              "startColumn": 37,
              "endLine": 1873,
              "endColumn": 46,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "     * @param id item id\n     * @return item state\n     */\n    private ItemState loadItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n\n        ItemState state;"
            },
            {
              "step": 22,
              "variableName": "(NodeId) id",
              "startLine": 1878,
              "startColumn": 37,
              "endLine": 1878,
              "endColumn": 48,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "\n        ItemState state;\n        if (id.denotesNode()) {\n            state = persistMgr.load((NodeId) id);\n        } else {\n            state = persistMgr.load((PropertyId) id);\n        }"
            },
            {
              "step": 23,
              "variableName": "NodeId id",
              "startLine": 185,
              "startColumn": 40,
              "endLine": 185,
              "endColumn": 49,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/obj/ObjectPersistenceManager.java",
              "type": "NodeId",
              "code": "    /**\n     * {@inheritDoc}\n     */\n    public synchronized NodeState load(NodeId id)\n            throws NoSuchItemStateException, ItemStateException {\n        if (!initialized) {\n            throw new IllegalStateException(\"not initialized\");"
            },
            {
              "step": 24,
              "variableName": "msg",
              "startLine": 212,
              "startColumn": 27,
              "endLine": 212,
              "endColumn": 30,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/obj/ObjectPersistenceManager.java",
              "type": "",
              "code": "                return state;\n            } catch (Exception e) {\n                String msg = \"failed to read node state: \" + id;\n                log.debug(msg);\n                throw new ItemStateException(msg, e);\n            } finally {\n                in.close();"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "lockToken",
              "startLine": 1279,
              "startColumn": 19,
              "endLine": 1279,
              "endColumn": 28,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "NodeId",
              "code": "         */\n        public InternalLockInfo(NodeId lockToken, boolean sessionScoped,\n                                boolean deep, String lockOwner, long timeoutHint) {\n            super(lockToken, sessionScoped, deep, lockOwner, timeoutHint);\n        }\n\n        /**"
            },
            {
              "step": 1,
              "variableName": "super(lockToken, sessionScoped, deep, lockOwner, timeoutHint);",
              "startLine": 1279,
              "startColumn": 13,
              "endLine": 1279,
              "endColumn": 75,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "         */\n        public InternalLockInfo(NodeId lockToken, boolean sessionScoped,\n                                boolean deep, String lockOwner, long timeoutHint) {\n            super(lockToken, sessionScoped, deep, lockOwner, timeoutHint);\n        }\n\n        /**"
            },
            {
              "step": 2,
              "variableName": "new InternalLockInfo(",
              "startLine": 340,
              "startColumn": 33,
              "endLine": 341,
              "endColumn": 83,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "\n        SessionImpl session = (SessionImpl) node.getSession();\n        String lockOwner = (ownerInfo != null) ? ownerInfo : session.getUserID();\n        InternalLockInfo info = new InternalLockInfo(\n                node.getNodeId(), isSessionScoped, isDeep, lockOwner, timeoutHint);\n\n        ClusterOperation operation = null;"
            },
            {
              "step": 3,
              "variableName": "info",
              "startLine": 370,
              "startColumn": 17,
              "endLine": 370,
              "endColumn": 21,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "            }\n            if (info.isDeep() && element.hasPath(path)\n                    && element.getChildrenCount() > 0) {\n                info.throwLockException(\"Some child node is locked\", session);\n            }\n\n            // create lock token"
            },
            {
              "step": 4,
              "variableName": "throwLockException",
              "startLine": 259,
              "startColumn": 17,
              "endLine": 259,
              "endColumn": 35,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockInfo.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "     * @throws LockException always thrown, unless another error occurs\n     * @throws RepositoryException if the path of this lock can not be resolved\n     */\n    public void throwLockException(String message, SessionImpl session)\n            throws LockException, RepositoryException {\n        String path;\n        try {"
            },
            {
              "step": 5,
              "variableName": "id",
              "startLine": 264,
              "startColumn": 59,
              "endLine": 264,
              "endColumn": 61,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockInfo.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "        String path;\n        try {\n            path = session.getJCRPath(\n                    session.getHierarchyManager().getPath(id));\n        } catch (RepositoryException ignored) {\n            path = null;\n        }"
            },
            {
              "step": 6,
              "variableName": "id",
              "startLine": 264,
              "startColumn": 59,
              "endLine": 264,
              "endColumn": 61,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockInfo.java",
              "type": "NodeId",
              "code": "        String path;\n        try {\n            path = session.getJCRPath(\n                    session.getHierarchyManager().getPath(id));\n        } catch (RepositoryException ignored) {\n            path = null;\n        }"
            },
            {
              "step": 7,
              "variableName": "ItemId id",
              "startLine": 252,
              "startColumn": 25,
              "endLine": 252,
              "endColumn": 34,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/CachingHierarchyManager.java",
              "type": "NodeId",
              "code": "     * Overridden method simply checks whether we have an item matching the id\n     * and returns its path, otherwise calls base implementation.\n     */\n    public Path getPath(ItemId id)\n            throws ItemNotFoundException, RepositoryException {\n\n        if (id.denotesNode()) {"
            },
            {
              "step": 8,
              "variableName": "id",
              "startLine": 267,
              "startColumn": 30,
              "endLine": 267,
              "endColumn": 32,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/CachingHierarchyManager.java",
              "type": "NodeId",
              "code": "                }\n            }\n        }\n        return super.getPath(id);\n    }\n\n    /**"
            },
            {
              "step": 9,
              "variableName": "ItemId id",
              "startLine": 392,
              "startColumn": 25,
              "endLine": 392,
              "endColumn": 34,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "    /**\n     * {@inheritDoc}\n     */\n    public Path getPath(ItemId id)\n            throws ItemNotFoundException, RepositoryException {\n        // shortcut\n        if (id.equals(rootNodeId)) {"
            },
            {
              "step": 10,
              "variableName": "id",
              "startLine": 402,
              "startColumn": 45,
              "endLine": 402,
              "endColumn": 47,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "        PathBuilder builder = new PathBuilder();\n\n        try {\n            buildPath(builder, getItemState(id), new CycleDetector());\n            return builder.getPath();\n        } catch (NoSuchItemStateException nsise) {\n            String msg = \"failed to build path of \" + id;"
            },
            {
              "step": 11,
              "variableName": "ItemId id",
              "startLine": 152,
              "startColumn": 38,
              "endLine": 152,
              "endColumn": 47,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "     * @throws ItemStateException       if an error occurs\n     * @see ZombieHierarchyManager#getItemState(ItemId)\n     */\n    protected ItemState getItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n        return provider.getItemState(id);\n    }"
            },
            {
              "step": 12,
              "variableName": "id",
              "startLine": 154,
              "startColumn": 38,
              "endLine": 154,
              "endColumn": 40,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "     */\n    protected ItemState getItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n        return provider.getItemState(id);\n    }\n\n    /**"
            },
            {
              "step": 13,
              "variableName": "ItemId id",
              "startLine": 132,
              "startColumn": 39,
              "endLine": 132,
              "endColumn": 48,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/observation/ChangeLogBasedHierarchyMgr.java",
              "type": "NodeId",
              "code": "         * <code>id</code>.\n         * @throws ItemStateException if any other error occurs.\n         */\n        public ItemState getItemState(ItemId id) throws NoSuchItemStateException, ItemStateException {\n            // check ChangeLog first\n            try {\n                ItemState state = changes.get(id);"
            },
            {
              "step": 14,
              "variableName": "id",
              "startLine": 142,
              "startColumn": 38,
              "endLine": 142,
              "endColumn": 40,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/observation/ChangeLogBasedHierarchyMgr.java",
              "type": "NodeId",
              "code": "            } catch (NoSuchItemStateException e) {\n                // item has been deleted, but we still return it by asking base\n            }\n            return base.getItemState(id);\n        }\n\n        /**"
            },
            {
              "step": 15,
              "variableName": "ItemId id",
              "startLine": 258,
              "startColumn": 35,
              "endLine": 258,
              "endColumn": 44,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "    /**\n     * {@inheritDoc}\n     */\n    public ItemState getItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n        // check the virtual root ids (needed for overlay)\n        for (VirtualItemStateProvider virtualProvider : virtualProviders) {"
            },
            {
              "step": 16,
              "variableName": "id",
              "startLine": 271,
              "startColumn": 43,
              "endLine": 271,
              "endColumn": 45,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "        ISMLocking.ReadLock readLock = acquireReadLock(id);\n        try {\n            // check internal first\n            return getNonVirtualItemState(id);\n        } catch (NoSuchItemStateException e) {\n            // Fall through to virtual state providers. We can afford the\n            // exception-for-control-flow performance hit here, as almost"
            },
            {
              "step": 17,
              "variableName": "ItemId id",
              "startLine": 1767,
              "startColumn": 46,
              "endLine": 1767,
              "endColumn": 55,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "     * Returns the item state for the given id without considering virtual\n     * item state providers.\n     */\n    private ItemState getNonVirtualItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n        // First check if the item state is already in the cache\n        ItemState state = cache.retrieve(id);"
            },
            {
              "step": 18,
              "variableName": "id",
              "startLine": 1798,
              "startColumn": 35,
              "endLine": 1798,
              "endColumn": 37,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "        try {\n            // Load the item state from persistent storage\n            // NOTE: This needs to happen outside a synchronized block!\n            state = loadItemState(id);\n            state.setStatus(ItemState.STATUS_EXISTING);\n            state.setContainer(this);\n"
            },
            {
              "step": 19,
              "variableName": "ItemId id",
              "startLine": 1873,
              "startColumn": 37,
              "endLine": 1873,
              "endColumn": 46,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "     * @param id item id\n     * @return item state\n     */\n    private ItemState loadItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n\n        ItemState state;"
            },
            {
              "step": 20,
              "variableName": "(NodeId) id",
              "startLine": 1878,
              "startColumn": 37,
              "endLine": 1878,
              "endColumn": 48,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "\n        ItemState state;\n        if (id.denotesNode()) {\n            state = persistMgr.load((NodeId) id);\n        } else {\n            state = persistMgr.load((PropertyId) id);\n        }"
            },
            {
              "step": 21,
              "variableName": "NodeId id",
              "startLine": 185,
              "startColumn": 40,
              "endLine": 185,
              "endColumn": 49,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/obj/ObjectPersistenceManager.java",
              "type": "NodeId",
              "code": "    /**\n     * {@inheritDoc}\n     */\n    public synchronized NodeState load(NodeId id)\n            throws NoSuchItemStateException, ItemStateException {\n        if (!initialized) {\n            throw new IllegalStateException(\"not initialized\");"
            },
            {
              "step": 22,
              "variableName": "msg",
              "startLine": 212,
              "startColumn": 27,
              "endLine": 212,
              "endColumn": 30,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/obj/ObjectPersistenceManager.java",
              "type": "",
              "code": "                return state;\n            } catch (Exception e) {\n                String msg = \"failed to read node state: \" + id;\n                log.debug(msg);\n                throw new ItemStateException(msg, e);\n            } finally {\n                in.close();"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "lockToken",
              "startLine": 1279,
              "startColumn": 19,
              "endLine": 1279,
              "endColumn": 28,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "NodeId",
              "code": "         */\n        public InternalLockInfo(NodeId lockToken, boolean sessionScoped,\n                                boolean deep, String lockOwner, long timeoutHint) {\n            super(lockToken, sessionScoped, deep, lockOwner, timeoutHint);\n        }\n\n        /**"
            },
            {
              "step": 1,
              "variableName": "super(lockToken, sessionScoped, deep, lockOwner, timeoutHint);",
              "startLine": 1279,
              "startColumn": 13,
              "endLine": 1279,
              "endColumn": 75,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "         */\n        public InternalLockInfo(NodeId lockToken, boolean sessionScoped,\n                                boolean deep, String lockOwner, long timeoutHint) {\n            super(lockToken, sessionScoped, deep, lockOwner, timeoutHint);\n        }\n\n        /**"
            },
            {
              "step": 2,
              "variableName": "new InternalLockInfo(",
              "startLine": 340,
              "startColumn": 33,
              "endLine": 341,
              "endColumn": 83,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "\n        SessionImpl session = (SessionImpl) node.getSession();\n        String lockOwner = (ownerInfo != null) ? ownerInfo : session.getUserID();\n        InternalLockInfo info = new InternalLockInfo(\n                node.getNodeId(), isSessionScoped, isDeep, lockOwner, timeoutHint);\n\n        ClusterOperation operation = null;"
            },
            {
              "step": 3,
              "variableName": "info",
              "startLine": 370,
              "startColumn": 17,
              "endLine": 370,
              "endColumn": 21,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "            }\n            if (info.isDeep() && element.hasPath(path)\n                    && element.getChildrenCount() > 0) {\n                info.throwLockException(\"Some child node is locked\", session);\n            }\n\n            // create lock token"
            },
            {
              "step": 4,
              "variableName": "throwLockException",
              "startLine": 259,
              "startColumn": 17,
              "endLine": 259,
              "endColumn": 35,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockInfo.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "     * @throws LockException always thrown, unless another error occurs\n     * @throws RepositoryException if the path of this lock can not be resolved\n     */\n    public void throwLockException(String message, SessionImpl session)\n            throws LockException, RepositoryException {\n        String path;\n        try {"
            },
            {
              "step": 5,
              "variableName": "id",
              "startLine": 264,
              "startColumn": 59,
              "endLine": 264,
              "endColumn": 61,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockInfo.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "        String path;\n        try {\n            path = session.getJCRPath(\n                    session.getHierarchyManager().getPath(id));\n        } catch (RepositoryException ignored) {\n            path = null;\n        }"
            },
            {
              "step": 6,
              "variableName": "id",
              "startLine": 264,
              "startColumn": 59,
              "endLine": 264,
              "endColumn": 61,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockInfo.java",
              "type": "NodeId",
              "code": "        String path;\n        try {\n            path = session.getJCRPath(\n                    session.getHierarchyManager().getPath(id));\n        } catch (RepositoryException ignored) {\n            path = null;\n        }"
            },
            {
              "step": 7,
              "variableName": "ItemId id",
              "startLine": 252,
              "startColumn": 25,
              "endLine": 252,
              "endColumn": 34,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/CachingHierarchyManager.java",
              "type": "NodeId",
              "code": "     * Overridden method simply checks whether we have an item matching the id\n     * and returns its path, otherwise calls base implementation.\n     */\n    public Path getPath(ItemId id)\n            throws ItemNotFoundException, RepositoryException {\n\n        if (id.denotesNode()) {"
            },
            {
              "step": 8,
              "variableName": "id",
              "startLine": 267,
              "startColumn": 30,
              "endLine": 267,
              "endColumn": 32,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/CachingHierarchyManager.java",
              "type": "NodeId",
              "code": "                }\n            }\n        }\n        return super.getPath(id);\n    }\n\n    /**"
            },
            {
              "step": 9,
              "variableName": "ItemId id",
              "startLine": 392,
              "startColumn": 25,
              "endLine": 392,
              "endColumn": 34,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "    /**\n     * {@inheritDoc}\n     */\n    public Path getPath(ItemId id)\n            throws ItemNotFoundException, RepositoryException {\n        // shortcut\n        if (id.equals(rootNodeId)) {"
            },
            {
              "step": 10,
              "variableName": "id",
              "startLine": 402,
              "startColumn": 45,
              "endLine": 402,
              "endColumn": 47,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "        PathBuilder builder = new PathBuilder();\n\n        try {\n            buildPath(builder, getItemState(id), new CycleDetector());\n            return builder.getPath();\n        } catch (NoSuchItemStateException nsise) {\n            String msg = \"failed to build path of \" + id;"
            },
            {
              "step": 11,
              "variableName": "ItemId id",
              "startLine": 152,
              "startColumn": 38,
              "endLine": 152,
              "endColumn": 47,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "     * @throws ItemStateException       if an error occurs\n     * @see ZombieHierarchyManager#getItemState(ItemId)\n     */\n    protected ItemState getItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n        return provider.getItemState(id);\n    }"
            },
            {
              "step": 12,
              "variableName": "id",
              "startLine": 154,
              "startColumn": 38,
              "endLine": 154,
              "endColumn": 40,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "     */\n    protected ItemState getItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n        return provider.getItemState(id);\n    }\n\n    /**"
            },
            {
              "step": 13,
              "variableName": "ItemId id",
              "startLine": 120,
              "startColumn": 48,
              "endLine": 120,
              "endColumn": 57,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/VersionItemStateProvider.java",
              "type": "NodeId",
              "code": "    /**\n     * @inheritDoc\n     */\n    public synchronized ItemState getItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n        ItemState item = items.get(id);\n        if (item == null) {"
            },
            {
              "step": 14,
              "variableName": "id",
              "startLine": 124,
              "startColumn": 42,
              "endLine": 124,
              "endColumn": 44,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/VersionItemStateProvider.java",
              "type": "NodeId",
              "code": "            throws NoSuchItemStateException, ItemStateException {\n        ItemState item = items.get(id);\n        if (item == null) {\n            item = stateMgr.getItemState(id);\n            items.put(id, item);\n        }\n        return item;"
            },
            {
              "step": 15,
              "variableName": "ItemId id",
              "startLine": 258,
              "startColumn": 35,
              "endLine": 258,
              "endColumn": 44,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "    /**\n     * {@inheritDoc}\n     */\n    public ItemState getItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n        // check the virtual root ids (needed for overlay)\n        for (VirtualItemStateProvider virtualProvider : virtualProviders) {"
            },
            {
              "step": 16,
              "variableName": "id",
              "startLine": 271,
              "startColumn": 43,
              "endLine": 271,
              "endColumn": 45,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "        ISMLocking.ReadLock readLock = acquireReadLock(id);\n        try {\n            // check internal first\n            return getNonVirtualItemState(id);\n        } catch (NoSuchItemStateException e) {\n            // Fall through to virtual state providers. We can afford the\n            // exception-for-control-flow performance hit here, as almost"
            },
            {
              "step": 17,
              "variableName": "ItemId id",
              "startLine": 1767,
              "startColumn": 46,
              "endLine": 1767,
              "endColumn": 55,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "     * Returns the item state for the given id without considering virtual\n     * item state providers.\n     */\n    private ItemState getNonVirtualItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n        // First check if the item state is already in the cache\n        ItemState state = cache.retrieve(id);"
            },
            {
              "step": 18,
              "variableName": "id",
              "startLine": 1798,
              "startColumn": 35,
              "endLine": 1798,
              "endColumn": 37,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "        try {\n            // Load the item state from persistent storage\n            // NOTE: This needs to happen outside a synchronized block!\n            state = loadItemState(id);\n            state.setStatus(ItemState.STATUS_EXISTING);\n            state.setContainer(this);\n"
            },
            {
              "step": 19,
              "variableName": "ItemId id",
              "startLine": 1873,
              "startColumn": 37,
              "endLine": 1873,
              "endColumn": 46,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "     * @param id item id\n     * @return item state\n     */\n    private ItemState loadItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n\n        ItemState state;"
            },
            {
              "step": 20,
              "variableName": "(NodeId) id",
              "startLine": 1878,
              "startColumn": 37,
              "endLine": 1878,
              "endColumn": 48,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "\n        ItemState state;\n        if (id.denotesNode()) {\n            state = persistMgr.load((NodeId) id);\n        } else {\n            state = persistMgr.load((PropertyId) id);\n        }"
            },
            {
              "step": 21,
              "variableName": "NodeId id",
              "startLine": 185,
              "startColumn": 40,
              "endLine": 185,
              "endColumn": 49,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/obj/ObjectPersistenceManager.java",
              "type": "NodeId",
              "code": "    /**\n     * {@inheritDoc}\n     */\n    public synchronized NodeState load(NodeId id)\n            throws NoSuchItemStateException, ItemStateException {\n        if (!initialized) {\n            throw new IllegalStateException(\"not initialized\");"
            },
            {
              "step": 22,
              "variableName": "msg",
              "startLine": 212,
              "startColumn": 27,
              "endLine": 212,
              "endColumn": 30,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/obj/ObjectPersistenceManager.java",
              "type": "",
              "code": "                return state;\n            } catch (Exception e) {\n                String msg = \"failed to read node state: \" + id;\n                log.debug(msg);\n                throw new ItemStateException(msg, e);\n            } finally {\n                in.close();"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 18,
      "fileName": "ObjectPersistenceManager.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "lockToken",
              "startLine": 1279,
              "startColumn": 19,
              "endLine": 1279,
              "endColumn": 28,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "NodeId",
              "code": "         */\n        public InternalLockInfo(NodeId lockToken, boolean sessionScoped,\n                                boolean deep, String lockOwner, long timeoutHint) {\n            super(lockToken, sessionScoped, deep, lockOwner, timeoutHint);\n        }\n\n        /**"
            },
            {
              "step": 1,
              "variableName": "super(lockToken, sessionScoped, deep, lockOwner, timeoutHint);",
              "startLine": 1279,
              "startColumn": 13,
              "endLine": 1279,
              "endColumn": 75,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "         */\n        public InternalLockInfo(NodeId lockToken, boolean sessionScoped,\n                                boolean deep, String lockOwner, long timeoutHint) {\n            super(lockToken, sessionScoped, deep, lockOwner, timeoutHint);\n        }\n\n        /**"
            },
            {
              "step": 2,
              "variableName": "new InternalLockInfo(",
              "startLine": 340,
              "startColumn": 33,
              "endLine": 341,
              "endColumn": 83,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "\n        SessionImpl session = (SessionImpl) node.getSession();\n        String lockOwner = (ownerInfo != null) ? ownerInfo : session.getUserID();\n        InternalLockInfo info = new InternalLockInfo(\n                node.getNodeId(), isSessionScoped, isDeep, lockOwner, timeoutHint);\n\n        ClusterOperation operation = null;"
            },
            {
              "step": 3,
              "variableName": "info",
              "startLine": 370,
              "startColumn": 17,
              "endLine": 370,
              "endColumn": 21,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "            }\n            if (info.isDeep() && element.hasPath(path)\n                    && element.getChildrenCount() > 0) {\n                info.throwLockException(\"Some child node is locked\", session);\n            }\n\n            // create lock token"
            },
            {
              "step": 4,
              "variableName": "throwLockException",
              "startLine": 259,
              "startColumn": 17,
              "endLine": 259,
              "endColumn": 35,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockInfo.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "     * @throws LockException always thrown, unless another error occurs\n     * @throws RepositoryException if the path of this lock can not be resolved\n     */\n    public void throwLockException(String message, SessionImpl session)\n            throws LockException, RepositoryException {\n        String path;\n        try {"
            },
            {
              "step": 5,
              "variableName": "id",
              "startLine": 264,
              "startColumn": 59,
              "endLine": 264,
              "endColumn": 61,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockInfo.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "        String path;\n        try {\n            path = session.getJCRPath(\n                    session.getHierarchyManager().getPath(id));\n        } catch (RepositoryException ignored) {\n            path = null;\n        }"
            },
            {
              "step": 6,
              "variableName": "id",
              "startLine": 264,
              "startColumn": 59,
              "endLine": 264,
              "endColumn": 61,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockInfo.java",
              "type": "NodeId",
              "code": "        String path;\n        try {\n            path = session.getJCRPath(\n                    session.getHierarchyManager().getPath(id));\n        } catch (RepositoryException ignored) {\n            path = null;\n        }"
            },
            {
              "step": 7,
              "variableName": "ItemId id",
              "startLine": 252,
              "startColumn": 25,
              "endLine": 252,
              "endColumn": 34,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/CachingHierarchyManager.java",
              "type": "NodeId",
              "code": "     * Overridden method simply checks whether we have an item matching the id\n     * and returns its path, otherwise calls base implementation.\n     */\n    public Path getPath(ItemId id)\n            throws ItemNotFoundException, RepositoryException {\n\n        if (id.denotesNode()) {"
            },
            {
              "step": 8,
              "variableName": "id",
              "startLine": 267,
              "startColumn": 30,
              "endLine": 267,
              "endColumn": 32,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/CachingHierarchyManager.java",
              "type": "NodeId",
              "code": "                }\n            }\n        }\n        return super.getPath(id);\n    }\n\n    /**"
            },
            {
              "step": 9,
              "variableName": "ItemId id",
              "startLine": 392,
              "startColumn": 25,
              "endLine": 392,
              "endColumn": 34,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "    /**\n     * {@inheritDoc}\n     */\n    public Path getPath(ItemId id)\n            throws ItemNotFoundException, RepositoryException {\n        // shortcut\n        if (id.equals(rootNodeId)) {"
            },
            {
              "step": 10,
              "variableName": "id",
              "startLine": 402,
              "startColumn": 45,
              "endLine": 402,
              "endColumn": 47,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "        PathBuilder builder = new PathBuilder();\n\n        try {\n            buildPath(builder, getItemState(id), new CycleDetector());\n            return builder.getPath();\n        } catch (NoSuchItemStateException nsise) {\n            String msg = \"failed to build path of \" + id;"
            },
            {
              "step": 11,
              "variableName": "ItemId id",
              "startLine": 152,
              "startColumn": 38,
              "endLine": 152,
              "endColumn": 47,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "     * @throws ItemStateException       if an error occurs\n     * @see ZombieHierarchyManager#getItemState(ItemId)\n     */\n    protected ItemState getItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n        return provider.getItemState(id);\n    }"
            },
            {
              "step": 12,
              "variableName": "id",
              "startLine": 154,
              "startColumn": 38,
              "endLine": 154,
              "endColumn": 40,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "     */\n    protected ItemState getItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n        return provider.getItemState(id);\n    }\n\n    /**"
            },
            {
              "step": 13,
              "variableName": "ItemId id",
              "startLine": 258,
              "startColumn": 35,
              "endLine": 258,
              "endColumn": 44,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "    /**\n     * {@inheritDoc}\n     */\n    public ItemState getItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n        // check the virtual root ids (needed for overlay)\n        for (VirtualItemStateProvider virtualProvider : virtualProviders) {"
            },
            {
              "step": 14,
              "variableName": "id",
              "startLine": 284,
              "startColumn": 46,
              "endLine": 284,
              "endColumn": 48,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "\n        // check if there is a virtual state for the specified item\n        for (VirtualItemStateProvider virtualProvider : virtualProviders) {\n            if (virtualProvider.hasItemState(id)) {\n                return virtualProvider.getItemState(id);\n            }\n        }"
            },
            {
              "step": 15,
              "variableName": "ItemId id",
              "startLine": 140,
              "startColumn": 33,
              "endLine": 140,
              "endColumn": 42,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/VersionItemStateProvider.java",
              "type": "NodeId",
              "code": "    /**\n     * @inheritDoc\n     */\n    public boolean hasItemState(ItemId id) {\n        return items.get(id) != null || stateMgr.hasItemState(id);\n    }\n"
            },
            {
              "step": 16,
              "variableName": "id",
              "startLine": 141,
              "startColumn": 63,
              "endLine": 141,
              "endColumn": 65,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/VersionItemStateProvider.java",
              "type": "NodeId",
              "code": "     * @inheritDoc\n     */\n    public boolean hasItemState(ItemId id) {\n        return items.get(id) != null || stateMgr.hasItemState(id);\n    }\n\n    /**"
            },
            {
              "step": 17,
              "variableName": "ItemId id",
              "startLine": 296,
              "startColumn": 33,
              "endLine": 296,
              "endColumn": 42,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "    /**\n     * {@inheritDoc}\n     */\n    public boolean hasItemState(ItemId id) {\n        // check the virtual root ids (needed for overlay)\n        for (VirtualItemStateProvider virtualProvider : virtualProviders) {\n            if (virtualProvider.isVirtualRoot(id)) {"
            },
            {
              "step": 18,
              "variableName": "id",
              "startLine": 317,
              "startColumn": 40,
              "endLine": 317,
              "endColumn": 42,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "            }\n\n            // check if this manager has the item state\n            if (hasNonVirtualItemState(id)) {\n                return true;\n            }\n        } finally {"
            },
            {
              "step": 19,
              "variableName": "ItemId id",
              "startLine": 1820,
              "startColumn": 46,
              "endLine": 1820,
              "endColumn": 55,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "     * Checks if this item state manager has the given item state without\n     * considering the virtual item state managers.\n     */\n    protected boolean hasNonVirtualItemState(ItemId id) {\n        if (cache.isCached(id)) {\n            return true;\n        }"
            },
            {
              "step": 20,
              "variableName": "(NodeId) id",
              "startLine": 1827,
              "startColumn": 42,
              "endLine": 1827,
              "endColumn": 53,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "\n        try {\n            if (id.denotesNode()) {\n                return persistMgr.exists((NodeId) id);\n            } else {\n                return persistMgr.exists((PropertyId) id);\n            }"
            },
            {
              "step": 21,
              "variableName": "NodeId id",
              "startLine": 477,
              "startColumn": 40,
              "endLine": 477,
              "endColumn": 49,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/obj/ObjectPersistenceManager.java",
              "type": "NodeId",
              "code": "    /**\n     * {@inheritDoc}\n     */\n    public synchronized boolean exists(NodeId id) throws ItemStateException {\n        if (!initialized) {\n            throw new IllegalStateException(\"not initialized\");\n        }"
            },
            {
              "step": 22,
              "variableName": "msg",
              "startLine": 488,
              "startColumn": 23,
              "endLine": 488,
              "endColumn": 26,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/obj/ObjectPersistenceManager.java",
              "type": "",
              "code": "            return nodeFile.exists();\n        } catch (FileSystemException fse) {\n            String msg = \"failed to check existence of item state: \" + id;\n            log.error(msg, fse);\n            throw new ItemStateException(msg, fse);\n        }\n    }"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "lockToken",
              "startLine": 1279,
              "startColumn": 19,
              "endLine": 1279,
              "endColumn": 28,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "NodeId",
              "code": "         */\n        public InternalLockInfo(NodeId lockToken, boolean sessionScoped,\n                                boolean deep, String lockOwner, long timeoutHint) {\n            super(lockToken, sessionScoped, deep, lockOwner, timeoutHint);\n        }\n\n        /**"
            },
            {
              "step": 1,
              "variableName": "super(lockToken, sessionScoped, deep, lockOwner, timeoutHint);",
              "startLine": 1279,
              "startColumn": 13,
              "endLine": 1279,
              "endColumn": 75,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "         */\n        public InternalLockInfo(NodeId lockToken, boolean sessionScoped,\n                                boolean deep, String lockOwner, long timeoutHint) {\n            super(lockToken, sessionScoped, deep, lockOwner, timeoutHint);\n        }\n\n        /**"
            },
            {
              "step": 2,
              "variableName": "new InternalLockInfo(",
              "startLine": 340,
              "startColumn": 33,
              "endLine": 341,
              "endColumn": 83,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "\n        SessionImpl session = (SessionImpl) node.getSession();\n        String lockOwner = (ownerInfo != null) ? ownerInfo : session.getUserID();\n        InternalLockInfo info = new InternalLockInfo(\n                node.getNodeId(), isSessionScoped, isDeep, lockOwner, timeoutHint);\n\n        ClusterOperation operation = null;"
            },
            {
              "step": 3,
              "variableName": "info",
              "startLine": 370,
              "startColumn": 17,
              "endLine": 370,
              "endColumn": 21,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "            }\n            if (info.isDeep() && element.hasPath(path)\n                    && element.getChildrenCount() > 0) {\n                info.throwLockException(\"Some child node is locked\", session);\n            }\n\n            // create lock token"
            },
            {
              "step": 4,
              "variableName": "throwLockException",
              "startLine": 259,
              "startColumn": 17,
              "endLine": 259,
              "endColumn": 35,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockInfo.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "     * @throws LockException always thrown, unless another error occurs\n     * @throws RepositoryException if the path of this lock can not be resolved\n     */\n    public void throwLockException(String message, SessionImpl session)\n            throws LockException, RepositoryException {\n        String path;\n        try {"
            },
            {
              "step": 5,
              "variableName": "id",
              "startLine": 264,
              "startColumn": 59,
              "endLine": 264,
              "endColumn": 61,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockInfo.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "        String path;\n        try {\n            path = session.getJCRPath(\n                    session.getHierarchyManager().getPath(id));\n        } catch (RepositoryException ignored) {\n            path = null;\n        }"
            },
            {
              "step": 6,
              "variableName": "id",
              "startLine": 264,
              "startColumn": 59,
              "endLine": 264,
              "endColumn": 61,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockInfo.java",
              "type": "NodeId",
              "code": "        String path;\n        try {\n            path = session.getJCRPath(\n                    session.getHierarchyManager().getPath(id));\n        } catch (RepositoryException ignored) {\n            path = null;\n        }"
            },
            {
              "step": 7,
              "variableName": "ItemId id",
              "startLine": 252,
              "startColumn": 25,
              "endLine": 252,
              "endColumn": 34,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/CachingHierarchyManager.java",
              "type": "NodeId",
              "code": "     * Overridden method simply checks whether we have an item matching the id\n     * and returns its path, otherwise calls base implementation.\n     */\n    public Path getPath(ItemId id)\n            throws ItemNotFoundException, RepositoryException {\n\n        if (id.denotesNode()) {"
            },
            {
              "step": 8,
              "variableName": "id",
              "startLine": 267,
              "startColumn": 30,
              "endLine": 267,
              "endColumn": 32,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/CachingHierarchyManager.java",
              "type": "NodeId",
              "code": "                }\n            }\n        }\n        return super.getPath(id);\n    }\n\n    /**"
            },
            {
              "step": 9,
              "variableName": "ItemId id",
              "startLine": 392,
              "startColumn": 25,
              "endLine": 392,
              "endColumn": 34,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "    /**\n     * {@inheritDoc}\n     */\n    public Path getPath(ItemId id)\n            throws ItemNotFoundException, RepositoryException {\n        // shortcut\n        if (id.equals(rootNodeId)) {"
            },
            {
              "step": 10,
              "variableName": "id",
              "startLine": 402,
              "startColumn": 45,
              "endLine": 402,
              "endColumn": 47,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "        PathBuilder builder = new PathBuilder();\n\n        try {\n            buildPath(builder, getItemState(id), new CycleDetector());\n            return builder.getPath();\n        } catch (NoSuchItemStateException nsise) {\n            String msg = \"failed to build path of \" + id;"
            },
            {
              "step": 11,
              "variableName": "ItemId id",
              "startLine": 152,
              "startColumn": 38,
              "endLine": 152,
              "endColumn": 47,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "     * @throws ItemStateException       if an error occurs\n     * @see ZombieHierarchyManager#getItemState(ItemId)\n     */\n    protected ItemState getItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n        return provider.getItemState(id);\n    }"
            },
            {
              "step": 12,
              "variableName": "id",
              "startLine": 154,
              "startColumn": 38,
              "endLine": 154,
              "endColumn": 40,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "     */\n    protected ItemState getItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n        return provider.getItemState(id);\n    }\n\n    /**"
            },
            {
              "step": 13,
              "variableName": "ItemId id",
              "startLine": 239,
              "startColumn": 35,
              "endLine": 239,
              "endColumn": 44,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/XAItemStateManager.java",
              "type": "NodeId",
              "code": "     * the transactional change log. Fallback is always the call to the base\n     * class.\n     */\n    public ItemState getItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n\n        if (virtualProvider != null && virtualProvider.hasItemState(id)) {"
            },
            {
              "step": 14,
              "variableName": "id",
              "startLine": 242,
              "startColumn": 69,
              "endLine": 242,
              "endColumn": 71,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/XAItemStateManager.java",
              "type": "NodeId",
              "code": "    public ItemState getItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n\n        if (virtualProvider != null && virtualProvider.hasItemState(id)) {\n            return virtualProvider.getItemState(id);\n        }\n        // 1) check local changes"
            },
            {
              "step": 15,
              "variableName": "ItemId id",
              "startLine": 140,
              "startColumn": 33,
              "endLine": 140,
              "endColumn": 42,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/VersionItemStateProvider.java",
              "type": "NodeId",
              "code": "    /**\n     * @inheritDoc\n     */\n    public boolean hasItemState(ItemId id) {\n        return items.get(id) != null || stateMgr.hasItemState(id);\n    }\n"
            },
            {
              "step": 16,
              "variableName": "id",
              "startLine": 141,
              "startColumn": 63,
              "endLine": 141,
              "endColumn": 65,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/VersionItemStateProvider.java",
              "type": "NodeId",
              "code": "     * @inheritDoc\n     */\n    public boolean hasItemState(ItemId id) {\n        return items.get(id) != null || stateMgr.hasItemState(id);\n    }\n\n    /**"
            },
            {
              "step": 17,
              "variableName": "ItemId id",
              "startLine": 296,
              "startColumn": 33,
              "endLine": 296,
              "endColumn": 42,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "    /**\n     * {@inheritDoc}\n     */\n    public boolean hasItemState(ItemId id) {\n        // check the virtual root ids (needed for overlay)\n        for (VirtualItemStateProvider virtualProvider : virtualProviders) {\n            if (virtualProvider.isVirtualRoot(id)) {"
            },
            {
              "step": 18,
              "variableName": "id",
              "startLine": 317,
              "startColumn": 40,
              "endLine": 317,
              "endColumn": 42,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "            }\n\n            // check if this manager has the item state\n            if (hasNonVirtualItemState(id)) {\n                return true;\n            }\n        } finally {"
            },
            {
              "step": 19,
              "variableName": "ItemId id",
              "startLine": 1820,
              "startColumn": 46,
              "endLine": 1820,
              "endColumn": 55,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "     * Checks if this item state manager has the given item state without\n     * considering the virtual item state managers.\n     */\n    protected boolean hasNonVirtualItemState(ItemId id) {\n        if (cache.isCached(id)) {\n            return true;\n        }"
            },
            {
              "step": 20,
              "variableName": "(NodeId) id",
              "startLine": 1827,
              "startColumn": 42,
              "endLine": 1827,
              "endColumn": 53,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "\n        try {\n            if (id.denotesNode()) {\n                return persistMgr.exists((NodeId) id);\n            } else {\n                return persistMgr.exists((PropertyId) id);\n            }"
            },
            {
              "step": 21,
              "variableName": "NodeId id",
              "startLine": 477,
              "startColumn": 40,
              "endLine": 477,
              "endColumn": 49,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/obj/ObjectPersistenceManager.java",
              "type": "NodeId",
              "code": "    /**\n     * {@inheritDoc}\n     */\n    public synchronized boolean exists(NodeId id) throws ItemStateException {\n        if (!initialized) {\n            throw new IllegalStateException(\"not initialized\");\n        }"
            },
            {
              "step": 22,
              "variableName": "msg",
              "startLine": 488,
              "startColumn": 23,
              "endLine": 488,
              "endColumn": 26,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/obj/ObjectPersistenceManager.java",
              "type": "",
              "code": "            return nodeFile.exists();\n        } catch (FileSystemException fse) {\n            String msg = \"failed to check existence of item state: \" + id;\n            log.error(msg, fse);\n            throw new ItemStateException(msg, fse);\n        }\n    }"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "lockToken",
              "startLine": 1279,
              "startColumn": 19,
              "endLine": 1279,
              "endColumn": 28,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "NodeId",
              "code": "         */\n        public InternalLockInfo(NodeId lockToken, boolean sessionScoped,\n                                boolean deep, String lockOwner, long timeoutHint) {\n            super(lockToken, sessionScoped, deep, lockOwner, timeoutHint);\n        }\n\n        /**"
            },
            {
              "step": 1,
              "variableName": "super(lockToken, sessionScoped, deep, lockOwner, timeoutHint);",
              "startLine": 1279,
              "startColumn": 13,
              "endLine": 1279,
              "endColumn": 75,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "         */\n        public InternalLockInfo(NodeId lockToken, boolean sessionScoped,\n                                boolean deep, String lockOwner, long timeoutHint) {\n            super(lockToken, sessionScoped, deep, lockOwner, timeoutHint);\n        }\n\n        /**"
            },
            {
              "step": 2,
              "variableName": "new InternalLockInfo(",
              "startLine": 340,
              "startColumn": 33,
              "endLine": 341,
              "endColumn": 83,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "\n        SessionImpl session = (SessionImpl) node.getSession();\n        String lockOwner = (ownerInfo != null) ? ownerInfo : session.getUserID();\n        InternalLockInfo info = new InternalLockInfo(\n                node.getNodeId(), isSessionScoped, isDeep, lockOwner, timeoutHint);\n\n        ClusterOperation operation = null;"
            },
            {
              "step": 3,
              "variableName": "info",
              "startLine": 370,
              "startColumn": 17,
              "endLine": 370,
              "endColumn": 21,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "            }\n            if (info.isDeep() && element.hasPath(path)\n                    && element.getChildrenCount() > 0) {\n                info.throwLockException(\"Some child node is locked\", session);\n            }\n\n            // create lock token"
            },
            {
              "step": 4,
              "variableName": "throwLockException",
              "startLine": 259,
              "startColumn": 17,
              "endLine": 259,
              "endColumn": 35,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockInfo.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "     * @throws LockException always thrown, unless another error occurs\n     * @throws RepositoryException if the path of this lock can not be resolved\n     */\n    public void throwLockException(String message, SessionImpl session)\n            throws LockException, RepositoryException {\n        String path;\n        try {"
            },
            {
              "step": 5,
              "variableName": "id",
              "startLine": 264,
              "startColumn": 59,
              "endLine": 264,
              "endColumn": 61,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockInfo.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "        String path;\n        try {\n            path = session.getJCRPath(\n                    session.getHierarchyManager().getPath(id));\n        } catch (RepositoryException ignored) {\n            path = null;\n        }"
            },
            {
              "step": 6,
              "variableName": "id",
              "startLine": 264,
              "startColumn": 59,
              "endLine": 264,
              "endColumn": 61,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockInfo.java",
              "type": "NodeId",
              "code": "        String path;\n        try {\n            path = session.getJCRPath(\n                    session.getHierarchyManager().getPath(id));\n        } catch (RepositoryException ignored) {\n            path = null;\n        }"
            },
            {
              "step": 7,
              "variableName": "ItemId id",
              "startLine": 252,
              "startColumn": 25,
              "endLine": 252,
              "endColumn": 34,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/CachingHierarchyManager.java",
              "type": "NodeId",
              "code": "     * Overridden method simply checks whether we have an item matching the id\n     * and returns its path, otherwise calls base implementation.\n     */\n    public Path getPath(ItemId id)\n            throws ItemNotFoundException, RepositoryException {\n\n        if (id.denotesNode()) {"
            },
            {
              "step": 8,
              "variableName": "id",
              "startLine": 267,
              "startColumn": 30,
              "endLine": 267,
              "endColumn": 32,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/CachingHierarchyManager.java",
              "type": "NodeId",
              "code": "                }\n            }\n        }\n        return super.getPath(id);\n    }\n\n    /**"
            },
            {
              "step": 9,
              "variableName": "ItemId id",
              "startLine": 392,
              "startColumn": 25,
              "endLine": 392,
              "endColumn": 34,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "    /**\n     * {@inheritDoc}\n     */\n    public Path getPath(ItemId id)\n            throws ItemNotFoundException, RepositoryException {\n        // shortcut\n        if (id.equals(rootNodeId)) {"
            },
            {
              "step": 10,
              "variableName": "id",
              "startLine": 402,
              "startColumn": 45,
              "endLine": 402,
              "endColumn": 47,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "        PathBuilder builder = new PathBuilder();\n\n        try {\n            buildPath(builder, getItemState(id), new CycleDetector());\n            return builder.getPath();\n        } catch (NoSuchItemStateException nsise) {\n            String msg = \"failed to build path of \" + id;"
            },
            {
              "step": 11,
              "variableName": "ItemId id",
              "startLine": 152,
              "startColumn": 38,
              "endLine": 152,
              "endColumn": 47,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "     * @throws ItemStateException       if an error occurs\n     * @see ZombieHierarchyManager#getItemState(ItemId)\n     */\n    protected ItemState getItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n        return provider.getItemState(id);\n    }"
            },
            {
              "step": 12,
              "variableName": "id",
              "startLine": 154,
              "startColumn": 38,
              "endLine": 154,
              "endColumn": 40,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "     */\n    protected ItemState getItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n        return provider.getItemState(id);\n    }\n\n    /**"
            },
            {
              "step": 13,
              "variableName": "ItemId id",
              "startLine": 160,
              "startColumn": 35,
              "endLine": 160,
              "endColumn": 44,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/LocalItemStateManager.java",
              "type": "NodeId",
              "code": "    /**\n     * {@inheritDoc}\n     */\n    public ItemState getItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n\n        // check change log"
            },
            {
              "step": 14,
              "variableName": "(NodeId) id",
              "startLine": 175,
              "startColumn": 42,
              "endLine": 175,
              "endColumn": 53,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/LocalItemStateManager.java",
              "type": "NodeId",
              "code": "            if (state == null) {\n                // regular behaviour\n                if (id.denotesNode()) {\n                    state = getNodeState((NodeId) id);\n                } else {\n                    state = getPropertyState((PropertyId) id);\n                }"
            },
            {
              "step": 15,
              "variableName": "NodeId id",
              "startLine": 106,
              "startColumn": 38,
              "endLine": 106,
              "endColumn": 47,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/LocalItemStateManager.java",
              "type": "NodeId",
              "code": "     * @throws NoSuchItemStateException\n     * @throws ItemStateException\n     */\n    protected NodeState getNodeState(NodeId id)\n            throws NoSuchItemStateException, ItemStateException {\n\n        // load from parent manager and wrap"
            },
            {
              "step": 16,
              "variableName": "id",
              "startLine": 110,
              "startColumn": 67,
              "endLine": 110,
              "endColumn": 69,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/LocalItemStateManager.java",
              "type": "NodeId",
              "code": "            throws NoSuchItemStateException, ItemStateException {\n\n        // load from parent manager and wrap\n        NodeState state = (NodeState) sharedStateMgr.getItemState(id);\n        state = new NodeState(state, state.getStatus(), false);\n\n        // put it in cache"
            },
            {
              "step": 17,
              "variableName": "ItemId id",
              "startLine": 258,
              "startColumn": 35,
              "endLine": 258,
              "endColumn": 44,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "    /**\n     * {@inheritDoc}\n     */\n    public ItemState getItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n        // check the virtual root ids (needed for overlay)\n        for (VirtualItemStateProvider virtualProvider : virtualProviders) {"
            },
            {
              "step": 18,
              "variableName": "id",
              "startLine": 284,
              "startColumn": 46,
              "endLine": 284,
              "endColumn": 48,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "\n        // check if there is a virtual state for the specified item\n        for (VirtualItemStateProvider virtualProvider : virtualProviders) {\n            if (virtualProvider.hasItemState(id)) {\n                return virtualProvider.getItemState(id);\n            }\n        }"
            },
            {
              "step": 19,
              "variableName": "ItemId id",
              "startLine": 140,
              "startColumn": 33,
              "endLine": 140,
              "endColumn": 42,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/VersionItemStateProvider.java",
              "type": "NodeId",
              "code": "    /**\n     * @inheritDoc\n     */\n    public boolean hasItemState(ItemId id) {\n        return items.get(id) != null || stateMgr.hasItemState(id);\n    }\n"
            },
            {
              "step": 20,
              "variableName": "id",
              "startLine": 141,
              "startColumn": 63,
              "endLine": 141,
              "endColumn": 65,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/VersionItemStateProvider.java",
              "type": "NodeId",
              "code": "     * @inheritDoc\n     */\n    public boolean hasItemState(ItemId id) {\n        return items.get(id) != null || stateMgr.hasItemState(id);\n    }\n\n    /**"
            },
            {
              "step": 21,
              "variableName": "ItemId id",
              "startLine": 296,
              "startColumn": 33,
              "endLine": 296,
              "endColumn": 42,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "    /**\n     * {@inheritDoc}\n     */\n    public boolean hasItemState(ItemId id) {\n        // check the virtual root ids (needed for overlay)\n        for (VirtualItemStateProvider virtualProvider : virtualProviders) {\n            if (virtualProvider.isVirtualRoot(id)) {"
            },
            {
              "step": 22,
              "variableName": "id",
              "startLine": 317,
              "startColumn": 40,
              "endLine": 317,
              "endColumn": 42,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "            }\n\n            // check if this manager has the item state\n            if (hasNonVirtualItemState(id)) {\n                return true;\n            }\n        } finally {"
            },
            {
              "step": 23,
              "variableName": "ItemId id",
              "startLine": 1820,
              "startColumn": 46,
              "endLine": 1820,
              "endColumn": 55,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "     * Checks if this item state manager has the given item state without\n     * considering the virtual item state managers.\n     */\n    protected boolean hasNonVirtualItemState(ItemId id) {\n        if (cache.isCached(id)) {\n            return true;\n        }"
            },
            {
              "step": 24,
              "variableName": "(NodeId) id",
              "startLine": 1827,
              "startColumn": 42,
              "endLine": 1827,
              "endColumn": 53,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "\n        try {\n            if (id.denotesNode()) {\n                return persistMgr.exists((NodeId) id);\n            } else {\n                return persistMgr.exists((PropertyId) id);\n            }"
            },
            {
              "step": 25,
              "variableName": "NodeId id",
              "startLine": 477,
              "startColumn": 40,
              "endLine": 477,
              "endColumn": 49,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/obj/ObjectPersistenceManager.java",
              "type": "NodeId",
              "code": "    /**\n     * {@inheritDoc}\n     */\n    public synchronized boolean exists(NodeId id) throws ItemStateException {\n        if (!initialized) {\n            throw new IllegalStateException(\"not initialized\");\n        }"
            },
            {
              "step": 26,
              "variableName": "msg",
              "startLine": 488,
              "startColumn": 23,
              "endLine": 488,
              "endColumn": 26,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/obj/ObjectPersistenceManager.java",
              "type": "",
              "code": "            return nodeFile.exists();\n        } catch (FileSystemException fse) {\n            String msg = \"failed to check existence of item state: \" + id;\n            log.error(msg, fse);\n            throw new ItemStateException(msg, fse);\n        }\n    }"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "lockToken",
              "startLine": 1279,
              "startColumn": 19,
              "endLine": 1279,
              "endColumn": 28,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "NodeId",
              "code": "         */\n        public InternalLockInfo(NodeId lockToken, boolean sessionScoped,\n                                boolean deep, String lockOwner, long timeoutHint) {\n            super(lockToken, sessionScoped, deep, lockOwner, timeoutHint);\n        }\n\n        /**"
            },
            {
              "step": 1,
              "variableName": "super(lockToken, sessionScoped, deep, lockOwner, timeoutHint);",
              "startLine": 1279,
              "startColumn": 13,
              "endLine": 1279,
              "endColumn": 75,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "         */\n        public InternalLockInfo(NodeId lockToken, boolean sessionScoped,\n                                boolean deep, String lockOwner, long timeoutHint) {\n            super(lockToken, sessionScoped, deep, lockOwner, timeoutHint);\n        }\n\n        /**"
            },
            {
              "step": 2,
              "variableName": "new InternalLockInfo(",
              "startLine": 340,
              "startColumn": 33,
              "endLine": 341,
              "endColumn": 83,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "\n        SessionImpl session = (SessionImpl) node.getSession();\n        String lockOwner = (ownerInfo != null) ? ownerInfo : session.getUserID();\n        InternalLockInfo info = new InternalLockInfo(\n                node.getNodeId(), isSessionScoped, isDeep, lockOwner, timeoutHint);\n\n        ClusterOperation operation = null;"
            },
            {
              "step": 3,
              "variableName": "info",
              "startLine": 370,
              "startColumn": 17,
              "endLine": 370,
              "endColumn": 21,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "            }\n            if (info.isDeep() && element.hasPath(path)\n                    && element.getChildrenCount() > 0) {\n                info.throwLockException(\"Some child node is locked\", session);\n            }\n\n            // create lock token"
            },
            {
              "step": 4,
              "variableName": "throwLockException",
              "startLine": 259,
              "startColumn": 17,
              "endLine": 259,
              "endColumn": 35,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockInfo.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "     * @throws LockException always thrown, unless another error occurs\n     * @throws RepositoryException if the path of this lock can not be resolved\n     */\n    public void throwLockException(String message, SessionImpl session)\n            throws LockException, RepositoryException {\n        String path;\n        try {"
            },
            {
              "step": 5,
              "variableName": "id",
              "startLine": 264,
              "startColumn": 59,
              "endLine": 264,
              "endColumn": 61,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockInfo.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "        String path;\n        try {\n            path = session.getJCRPath(\n                    session.getHierarchyManager().getPath(id));\n        } catch (RepositoryException ignored) {\n            path = null;\n        }"
            },
            {
              "step": 6,
              "variableName": "id",
              "startLine": 264,
              "startColumn": 59,
              "endLine": 264,
              "endColumn": 61,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockInfo.java",
              "type": "NodeId",
              "code": "        String path;\n        try {\n            path = session.getJCRPath(\n                    session.getHierarchyManager().getPath(id));\n        } catch (RepositoryException ignored) {\n            path = null;\n        }"
            },
            {
              "step": 7,
              "variableName": "ItemId id",
              "startLine": 252,
              "startColumn": 25,
              "endLine": 252,
              "endColumn": 34,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/CachingHierarchyManager.java",
              "type": "NodeId",
              "code": "     * Overridden method simply checks whether we have an item matching the id\n     * and returns its path, otherwise calls base implementation.\n     */\n    public Path getPath(ItemId id)\n            throws ItemNotFoundException, RepositoryException {\n\n        if (id.denotesNode()) {"
            },
            {
              "step": 8,
              "variableName": "id",
              "startLine": 267,
              "startColumn": 30,
              "endLine": 267,
              "endColumn": 32,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/CachingHierarchyManager.java",
              "type": "NodeId",
              "code": "                }\n            }\n        }\n        return super.getPath(id);\n    }\n\n    /**"
            },
            {
              "step": 9,
              "variableName": "ItemId id",
              "startLine": 392,
              "startColumn": 25,
              "endLine": 392,
              "endColumn": 34,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "    /**\n     * {@inheritDoc}\n     */\n    public Path getPath(ItemId id)\n            throws ItemNotFoundException, RepositoryException {\n        // shortcut\n        if (id.equals(rootNodeId)) {"
            },
            {
              "step": 10,
              "variableName": "id",
              "startLine": 402,
              "startColumn": 45,
              "endLine": 402,
              "endColumn": 47,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "        PathBuilder builder = new PathBuilder();\n\n        try {\n            buildPath(builder, getItemState(id), new CycleDetector());\n            return builder.getPath();\n        } catch (NoSuchItemStateException nsise) {\n            String msg = \"failed to build path of \" + id;"
            },
            {
              "step": 11,
              "variableName": "ItemId id",
              "startLine": 152,
              "startColumn": 38,
              "endLine": 152,
              "endColumn": 47,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "     * @throws ItemStateException       if an error occurs\n     * @see ZombieHierarchyManager#getItemState(ItemId)\n     */\n    protected ItemState getItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n        return provider.getItemState(id);\n    }"
            },
            {
              "step": 12,
              "variableName": "id",
              "startLine": 154,
              "startColumn": 38,
              "endLine": 154,
              "endColumn": 40,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "     */\n    protected ItemState getItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n        return provider.getItemState(id);\n    }\n\n    /**"
            },
            {
              "step": 13,
              "variableName": "ItemId id",
              "startLine": 132,
              "startColumn": 39,
              "endLine": 132,
              "endColumn": 48,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/observation/ChangeLogBasedHierarchyMgr.java",
              "type": "NodeId",
              "code": "         * <code>id</code>.\n         * @throws ItemStateException if any other error occurs.\n         */\n        public ItemState getItemState(ItemId id) throws NoSuchItemStateException, ItemStateException {\n            // check ChangeLog first\n            try {\n                ItemState state = changes.get(id);"
            },
            {
              "step": 14,
              "variableName": "id",
              "startLine": 142,
              "startColumn": 38,
              "endLine": 142,
              "endColumn": 40,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/observation/ChangeLogBasedHierarchyMgr.java",
              "type": "NodeId",
              "code": "            } catch (NoSuchItemStateException e) {\n                // item has been deleted, but we still return it by asking base\n            }\n            return base.getItemState(id);\n        }\n\n        /**"
            },
            {
              "step": 15,
              "variableName": "ItemId id",
              "startLine": 258,
              "startColumn": 35,
              "endLine": 258,
              "endColumn": 44,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "    /**\n     * {@inheritDoc}\n     */\n    public ItemState getItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n        // check the virtual root ids (needed for overlay)\n        for (VirtualItemStateProvider virtualProvider : virtualProviders) {"
            },
            {
              "step": 16,
              "variableName": "id",
              "startLine": 284,
              "startColumn": 46,
              "endLine": 284,
              "endColumn": 48,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "\n        // check if there is a virtual state for the specified item\n        for (VirtualItemStateProvider virtualProvider : virtualProviders) {\n            if (virtualProvider.hasItemState(id)) {\n                return virtualProvider.getItemState(id);\n            }\n        }"
            },
            {
              "step": 17,
              "variableName": "ItemId id",
              "startLine": 140,
              "startColumn": 33,
              "endLine": 140,
              "endColumn": 42,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/VersionItemStateProvider.java",
              "type": "NodeId",
              "code": "    /**\n     * @inheritDoc\n     */\n    public boolean hasItemState(ItemId id) {\n        return items.get(id) != null || stateMgr.hasItemState(id);\n    }\n"
            },
            {
              "step": 18,
              "variableName": "id",
              "startLine": 141,
              "startColumn": 63,
              "endLine": 141,
              "endColumn": 65,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/VersionItemStateProvider.java",
              "type": "NodeId",
              "code": "     * @inheritDoc\n     */\n    public boolean hasItemState(ItemId id) {\n        return items.get(id) != null || stateMgr.hasItemState(id);\n    }\n\n    /**"
            },
            {
              "step": 19,
              "variableName": "ItemId id",
              "startLine": 296,
              "startColumn": 33,
              "endLine": 296,
              "endColumn": 42,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "    /**\n     * {@inheritDoc}\n     */\n    public boolean hasItemState(ItemId id) {\n        // check the virtual root ids (needed for overlay)\n        for (VirtualItemStateProvider virtualProvider : virtualProviders) {\n            if (virtualProvider.isVirtualRoot(id)) {"
            },
            {
              "step": 20,
              "variableName": "id",
              "startLine": 317,
              "startColumn": 40,
              "endLine": 317,
              "endColumn": 42,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "            }\n\n            // check if this manager has the item state\n            if (hasNonVirtualItemState(id)) {\n                return true;\n            }\n        } finally {"
            },
            {
              "step": 21,
              "variableName": "ItemId id",
              "startLine": 1820,
              "startColumn": 46,
              "endLine": 1820,
              "endColumn": 55,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "     * Checks if this item state manager has the given item state without\n     * considering the virtual item state managers.\n     */\n    protected boolean hasNonVirtualItemState(ItemId id) {\n        if (cache.isCached(id)) {\n            return true;\n        }"
            },
            {
              "step": 22,
              "variableName": "(NodeId) id",
              "startLine": 1827,
              "startColumn": 42,
              "endLine": 1827,
              "endColumn": 53,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "\n        try {\n            if (id.denotesNode()) {\n                return persistMgr.exists((NodeId) id);\n            } else {\n                return persistMgr.exists((PropertyId) id);\n            }"
            },
            {
              "step": 23,
              "variableName": "NodeId id",
              "startLine": 477,
              "startColumn": 40,
              "endLine": 477,
              "endColumn": 49,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/obj/ObjectPersistenceManager.java",
              "type": "NodeId",
              "code": "    /**\n     * {@inheritDoc}\n     */\n    public synchronized boolean exists(NodeId id) throws ItemStateException {\n        if (!initialized) {\n            throw new IllegalStateException(\"not initialized\");\n        }"
            },
            {
              "step": 24,
              "variableName": "msg",
              "startLine": 488,
              "startColumn": 23,
              "endLine": 488,
              "endColumn": 26,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/obj/ObjectPersistenceManager.java",
              "type": "",
              "code": "            return nodeFile.exists();\n        } catch (FileSystemException fse) {\n            String msg = \"failed to check existence of item state: \" + id;\n            log.error(msg, fse);\n            throw new ItemStateException(msg, fse);\n        }\n    }"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 19,
      "fileName": "BundleDbPersistenceManager.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "lockToken",
              "startLine": 1279,
              "startColumn": 19,
              "endLine": 1279,
              "endColumn": 28,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "NodeId",
              "code": "         */\n        public InternalLockInfo(NodeId lockToken, boolean sessionScoped,\n                                boolean deep, String lockOwner, long timeoutHint) {\n            super(lockToken, sessionScoped, deep, lockOwner, timeoutHint);\n        }\n\n        /**"
            },
            {
              "step": 1,
              "variableName": "super(lockToken, sessionScoped, deep, lockOwner, timeoutHint);",
              "startLine": 1279,
              "startColumn": 13,
              "endLine": 1279,
              "endColumn": 75,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "         */\n        public InternalLockInfo(NodeId lockToken, boolean sessionScoped,\n                                boolean deep, String lockOwner, long timeoutHint) {\n            super(lockToken, sessionScoped, deep, lockOwner, timeoutHint);\n        }\n\n        /**"
            },
            {
              "step": 2,
              "variableName": "new InternalLockInfo(",
              "startLine": 340,
              "startColumn": 33,
              "endLine": 341,
              "endColumn": 83,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "\n        SessionImpl session = (SessionImpl) node.getSession();\n        String lockOwner = (ownerInfo != null) ? ownerInfo : session.getUserID();\n        InternalLockInfo info = new InternalLockInfo(\n                node.getNodeId(), isSessionScoped, isDeep, lockOwner, timeoutHint);\n\n        ClusterOperation operation = null;"
            },
            {
              "step": 3,
              "variableName": "info",
              "startLine": 370,
              "startColumn": 17,
              "endLine": 370,
              "endColumn": 21,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "            }\n            if (info.isDeep() && element.hasPath(path)\n                    && element.getChildrenCount() > 0) {\n                info.throwLockException(\"Some child node is locked\", session);\n            }\n\n            // create lock token"
            },
            {
              "step": 4,
              "variableName": "throwLockException",
              "startLine": 259,
              "startColumn": 17,
              "endLine": 259,
              "endColumn": 35,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockInfo.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "     * @throws LockException always thrown, unless another error occurs\n     * @throws RepositoryException if the path of this lock can not be resolved\n     */\n    public void throwLockException(String message, SessionImpl session)\n            throws LockException, RepositoryException {\n        String path;\n        try {"
            },
            {
              "step": 5,
              "variableName": "id",
              "startLine": 264,
              "startColumn": 59,
              "endLine": 264,
              "endColumn": 61,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockInfo.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "        String path;\n        try {\n            path = session.getJCRPath(\n                    session.getHierarchyManager().getPath(id));\n        } catch (RepositoryException ignored) {\n            path = null;\n        }"
            },
            {
              "step": 6,
              "variableName": "id",
              "startLine": 264,
              "startColumn": 59,
              "endLine": 264,
              "endColumn": 61,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockInfo.java",
              "type": "NodeId",
              "code": "        String path;\n        try {\n            path = session.getJCRPath(\n                    session.getHierarchyManager().getPath(id));\n        } catch (RepositoryException ignored) {\n            path = null;\n        }"
            },
            {
              "step": 7,
              "variableName": "ItemId id",
              "startLine": 252,
              "startColumn": 25,
              "endLine": 252,
              "endColumn": 34,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/CachingHierarchyManager.java",
              "type": "NodeId",
              "code": "     * Overridden method simply checks whether we have an item matching the id\n     * and returns its path, otherwise calls base implementation.\n     */\n    public Path getPath(ItemId id)\n            throws ItemNotFoundException, RepositoryException {\n\n        if (id.denotesNode()) {"
            },
            {
              "step": 8,
              "variableName": "id",
              "startLine": 267,
              "startColumn": 30,
              "endLine": 267,
              "endColumn": 32,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/CachingHierarchyManager.java",
              "type": "NodeId",
              "code": "                }\n            }\n        }\n        return super.getPath(id);\n    }\n\n    /**"
            },
            {
              "step": 9,
              "variableName": "ItemId id",
              "startLine": 392,
              "startColumn": 25,
              "endLine": 392,
              "endColumn": 34,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "    /**\n     * {@inheritDoc}\n     */\n    public Path getPath(ItemId id)\n            throws ItemNotFoundException, RepositoryException {\n        // shortcut\n        if (id.equals(rootNodeId)) {"
            },
            {
              "step": 10,
              "variableName": "id",
              "startLine": 402,
              "startColumn": 45,
              "endLine": 402,
              "endColumn": 47,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "        PathBuilder builder = new PathBuilder();\n\n        try {\n            buildPath(builder, getItemState(id), new CycleDetector());\n            return builder.getPath();\n        } catch (NoSuchItemStateException nsise) {\n            String msg = \"failed to build path of \" + id;"
            },
            {
              "step": 11,
              "variableName": "ItemId id",
              "startLine": 152,
              "startColumn": 38,
              "endLine": 152,
              "endColumn": 47,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "     * @throws ItemStateException       if an error occurs\n     * @see ZombieHierarchyManager#getItemState(ItemId)\n     */\n    protected ItemState getItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n        return provider.getItemState(id);\n    }"
            },
            {
              "step": 12,
              "variableName": "id",
              "startLine": 154,
              "startColumn": 38,
              "endLine": 154,
              "endColumn": 40,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "     */\n    protected ItemState getItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n        return provider.getItemState(id);\n    }\n\n    /**"
            },
            {
              "step": 13,
              "variableName": "ItemId id",
              "startLine": 258,
              "startColumn": 35,
              "endLine": 258,
              "endColumn": 44,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "    /**\n     * {@inheritDoc}\n     */\n    public ItemState getItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n        // check the virtual root ids (needed for overlay)\n        for (VirtualItemStateProvider virtualProvider : virtualProviders) {"
            },
            {
              "step": 14,
              "variableName": "id",
              "startLine": 271,
              "startColumn": 43,
              "endLine": 271,
              "endColumn": 45,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "        ISMLocking.ReadLock readLock = acquireReadLock(id);\n        try {\n            // check internal first\n            return getNonVirtualItemState(id);\n        } catch (NoSuchItemStateException e) {\n            // Fall through to virtual state providers. We can afford the\n            // exception-for-control-flow performance hit here, as almost"
            },
            {
              "step": 15,
              "variableName": "ItemId id",
              "startLine": 1767,
              "startColumn": 46,
              "endLine": 1767,
              "endColumn": 55,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "     * Returns the item state for the given id without considering virtual\n     * item state providers.\n     */\n    private ItemState getNonVirtualItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n        // First check if the item state is already in the cache\n        ItemState state = cache.retrieve(id);"
            },
            {
              "step": 16,
              "variableName": "id",
              "startLine": 1798,
              "startColumn": 35,
              "endLine": 1798,
              "endColumn": 37,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "        try {\n            // Load the item state from persistent storage\n            // NOTE: This needs to happen outside a synchronized block!\n            state = loadItemState(id);\n            state.setStatus(ItemState.STATUS_EXISTING);\n            state.setContainer(this);\n"
            },
            {
              "step": 17,
              "variableName": "ItemId id",
              "startLine": 1873,
              "startColumn": 37,
              "endLine": 1873,
              "endColumn": 46,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "     * @param id item id\n     * @return item state\n     */\n    private ItemState loadItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n\n        ItemState state;"
            },
            {
              "step": 18,
              "variableName": "(NodeId) id",
              "startLine": 1878,
              "startColumn": 37,
              "endLine": 1878,
              "endColumn": 48,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "\n        ItemState state;\n        if (id.denotesNode()) {\n            state = persistMgr.load((NodeId) id);\n        } else {\n            state = persistMgr.load((PropertyId) id);\n        }"
            },
            {
              "step": 19,
              "variableName": "NodeId id",
              "startLine": 489,
              "startColumn": 27,
              "endLine": 489,
              "endColumn": 36,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/bundle/AbstractBundlePersistenceManager.java",
              "type": "NodeId",
              "code": "     *\n     * Loads the state via the appropriate NodePropBundle.\n     */\n    public NodeState load(NodeId id) throws NoSuchItemStateException, ItemStateException {\n        NodePropBundle bundle = getBundle(id);\n        if (bundle == null) {\n            throw new NoSuchItemStateException(id.toString());"
            },
            {
              "step": 20,
              "variableName": "id",
              "startLine": 490,
              "startColumn": 43,
              "endLine": 490,
              "endColumn": 45,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/bundle/AbstractBundlePersistenceManager.java",
              "type": "NodeId",
              "code": "     * Loads the state via the appropriate NodePropBundle.\n     */\n    public NodeState load(NodeId id) throws NoSuchItemStateException, ItemStateException {\n        NodePropBundle bundle = getBundle(id);\n        if (bundle == null) {\n            throw new NoSuchItemStateException(id.toString());\n        }"
            },
            {
              "step": 21,
              "variableName": "NodeId id",
              "startLine": 740,
              "startColumn": 38,
              "endLine": 740,
              "endColumn": 47,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/bundle/AbstractBundlePersistenceManager.java",
              "type": "NodeId",
              "code": "     *\n     * @throws ItemStateException if an error occurs.\n     */\n    private NodePropBundle getBundle(NodeId id) throws ItemStateException {\n        NodePropBundle bundle = bundles.get(id);\n        readCounter.incrementAndGet();\n        if (bundle == MISSING) {"
            },
            {
              "step": 22,
              "variableName": "id",
              "startLine": 750,
              "startColumn": 35,
              "endLine": 750,
              "endColumn": 37,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/bundle/AbstractBundlePersistenceManager.java",
              "type": "NodeId",
              "code": "            return bundle;\n        }\n        // cache miss\n        return getBundleCacheMiss(id);\n    }\n\n    /**"
            },
            {
              "step": 23,
              "variableName": "NodeId id",
              "startLine": 763,
              "startColumn": 47,
              "endLine": 763,
              "endColumn": 56,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/bundle/AbstractBundlePersistenceManager.java",
              "type": "NodeId",
              "code": "     * @return\n     * @throws ItemStateException\n     */\n    private NodePropBundle getBundleCacheMiss(NodeId id)\n            throws ItemStateException {\n        long time = System.nanoTime();\n        NodePropBundle bundle = loadBundle(id);"
            },
            {
              "step": 24,
              "variableName": "id",
              "startLine": 766,
              "startColumn": 44,
              "endLine": 766,
              "endColumn": 46,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/bundle/AbstractBundlePersistenceManager.java",
              "type": "NodeId",
              "code": "    private NodePropBundle getBundleCacheMiss(NodeId id)\n            throws ItemStateException {\n        long time = System.nanoTime();\n        NodePropBundle bundle = loadBundle(id);\n        time = System.nanoTime() - time;\n        cacheMissDuration.addAndGet(time);\n        final long timeMs = time / 1000000;"
            },
            {
              "step": 25,
              "variableName": "NodeId id",
              "startLine": 885,
              "startColumn": 41,
              "endLine": 885,
              "endColumn": 50,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/pool/BundleDbPersistenceManager.java",
              "type": "NodeId",
              "code": "     * {@inheritDoc}\n     */\n    @Override\n    protected NodePropBundle loadBundle(NodeId id) throws ItemStateException {\n        try {\n            ResultSet rs =\n                conHelper.exec(bundleSelectSQL, getKey(id), false, 0);"
            },
            {
              "step": 26,
              "variableName": "msg",
              "startLine": 902,
              "startColumn": 23,
              "endLine": 902,
              "endColumn": 26,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/pool/BundleDbPersistenceManager.java",
              "type": "",
              "code": "            }\n        } catch (SQLException e) {\n        \tString msg = \"failed to read bundle (stacktrace on DEBUG log level): \" + id + \": \" + e; \n            log.error(msg);\n            log.debug(\"failed to read bundle: \" + id, e);\n            throw new ItemStateException(msg, e);\n        }"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "lockToken",
              "startLine": 1279,
              "startColumn": 19,
              "endLine": 1279,
              "endColumn": 28,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "NodeId",
              "code": "         */\n        public InternalLockInfo(NodeId lockToken, boolean sessionScoped,\n                                boolean deep, String lockOwner, long timeoutHint) {\n            super(lockToken, sessionScoped, deep, lockOwner, timeoutHint);\n        }\n\n        /**"
            },
            {
              "step": 1,
              "variableName": "super(lockToken, sessionScoped, deep, lockOwner, timeoutHint);",
              "startLine": 1279,
              "startColumn": 13,
              "endLine": 1279,
              "endColumn": 75,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "         */\n        public InternalLockInfo(NodeId lockToken, boolean sessionScoped,\n                                boolean deep, String lockOwner, long timeoutHint) {\n            super(lockToken, sessionScoped, deep, lockOwner, timeoutHint);\n        }\n\n        /**"
            },
            {
              "step": 2,
              "variableName": "new InternalLockInfo(",
              "startLine": 340,
              "startColumn": 33,
              "endLine": 341,
              "endColumn": 83,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "\n        SessionImpl session = (SessionImpl) node.getSession();\n        String lockOwner = (ownerInfo != null) ? ownerInfo : session.getUserID();\n        InternalLockInfo info = new InternalLockInfo(\n                node.getNodeId(), isSessionScoped, isDeep, lockOwner, timeoutHint);\n\n        ClusterOperation operation = null;"
            },
            {
              "step": 3,
              "variableName": "info",
              "startLine": 370,
              "startColumn": 17,
              "endLine": 370,
              "endColumn": 21,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "            }\n            if (info.isDeep() && element.hasPath(path)\n                    && element.getChildrenCount() > 0) {\n                info.throwLockException(\"Some child node is locked\", session);\n            }\n\n            // create lock token"
            },
            {
              "step": 4,
              "variableName": "throwLockException",
              "startLine": 259,
              "startColumn": 17,
              "endLine": 259,
              "endColumn": 35,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockInfo.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "     * @throws LockException always thrown, unless another error occurs\n     * @throws RepositoryException if the path of this lock can not be resolved\n     */\n    public void throwLockException(String message, SessionImpl session)\n            throws LockException, RepositoryException {\n        String path;\n        try {"
            },
            {
              "step": 5,
              "variableName": "id",
              "startLine": 264,
              "startColumn": 59,
              "endLine": 264,
              "endColumn": 61,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockInfo.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "        String path;\n        try {\n            path = session.getJCRPath(\n                    session.getHierarchyManager().getPath(id));\n        } catch (RepositoryException ignored) {\n            path = null;\n        }"
            },
            {
              "step": 6,
              "variableName": "id",
              "startLine": 264,
              "startColumn": 59,
              "endLine": 264,
              "endColumn": 61,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockInfo.java",
              "type": "NodeId",
              "code": "        String path;\n        try {\n            path = session.getJCRPath(\n                    session.getHierarchyManager().getPath(id));\n        } catch (RepositoryException ignored) {\n            path = null;\n        }"
            },
            {
              "step": 7,
              "variableName": "ItemId id",
              "startLine": 252,
              "startColumn": 25,
              "endLine": 252,
              "endColumn": 34,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/CachingHierarchyManager.java",
              "type": "NodeId",
              "code": "     * Overridden method simply checks whether we have an item matching the id\n     * and returns its path, otherwise calls base implementation.\n     */\n    public Path getPath(ItemId id)\n            throws ItemNotFoundException, RepositoryException {\n\n        if (id.denotesNode()) {"
            },
            {
              "step": 8,
              "variableName": "id",
              "startLine": 267,
              "startColumn": 30,
              "endLine": 267,
              "endColumn": 32,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/CachingHierarchyManager.java",
              "type": "NodeId",
              "code": "                }\n            }\n        }\n        return super.getPath(id);\n    }\n\n    /**"
            },
            {
              "step": 9,
              "variableName": "ItemId id",
              "startLine": 392,
              "startColumn": 25,
              "endLine": 392,
              "endColumn": 34,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "    /**\n     * {@inheritDoc}\n     */\n    public Path getPath(ItemId id)\n            throws ItemNotFoundException, RepositoryException {\n        // shortcut\n        if (id.equals(rootNodeId)) {"
            },
            {
              "step": 10,
              "variableName": "id",
              "startLine": 402,
              "startColumn": 45,
              "endLine": 402,
              "endColumn": 47,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "        PathBuilder builder = new PathBuilder();\n\n        try {\n            buildPath(builder, getItemState(id), new CycleDetector());\n            return builder.getPath();\n        } catch (NoSuchItemStateException nsise) {\n            String msg = \"failed to build path of \" + id;"
            },
            {
              "step": 11,
              "variableName": "ItemId id",
              "startLine": 152,
              "startColumn": 38,
              "endLine": 152,
              "endColumn": 47,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "     * @throws ItemStateException       if an error occurs\n     * @see ZombieHierarchyManager#getItemState(ItemId)\n     */\n    protected ItemState getItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n        return provider.getItemState(id);\n    }"
            },
            {
              "step": 12,
              "variableName": "id",
              "startLine": 154,
              "startColumn": 38,
              "endLine": 154,
              "endColumn": 40,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "     */\n    protected ItemState getItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n        return provider.getItemState(id);\n    }\n\n    /**"
            },
            {
              "step": 13,
              "variableName": "ItemId id",
              "startLine": 239,
              "startColumn": 35,
              "endLine": 239,
              "endColumn": 44,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/XAItemStateManager.java",
              "type": "NodeId",
              "code": "     * the transactional change log. Fallback is always the call to the base\n     * class.\n     */\n    public ItemState getItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n\n        if (virtualProvider != null && virtualProvider.hasItemState(id)) {"
            },
            {
              "step": 14,
              "variableName": "id",
              "startLine": 242,
              "startColumn": 69,
              "endLine": 242,
              "endColumn": 71,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/XAItemStateManager.java",
              "type": "NodeId",
              "code": "    public ItemState getItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n\n        if (virtualProvider != null && virtualProvider.hasItemState(id)) {\n            return virtualProvider.getItemState(id);\n        }\n        // 1) check local changes"
            },
            {
              "step": 15,
              "variableName": "ItemId id",
              "startLine": 140,
              "startColumn": 33,
              "endLine": 140,
              "endColumn": 42,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/VersionItemStateProvider.java",
              "type": "NodeId",
              "code": "    /**\n     * @inheritDoc\n     */\n    public boolean hasItemState(ItemId id) {\n        return items.get(id) != null || stateMgr.hasItemState(id);\n    }\n"
            },
            {
              "step": 16,
              "variableName": "id",
              "startLine": 141,
              "startColumn": 63,
              "endLine": 141,
              "endColumn": 65,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/VersionItemStateProvider.java",
              "type": "NodeId",
              "code": "     * @inheritDoc\n     */\n    public boolean hasItemState(ItemId id) {\n        return items.get(id) != null || stateMgr.hasItemState(id);\n    }\n\n    /**"
            },
            {
              "step": 17,
              "variableName": "ItemId id",
              "startLine": 296,
              "startColumn": 33,
              "endLine": 296,
              "endColumn": 42,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "    /**\n     * {@inheritDoc}\n     */\n    public boolean hasItemState(ItemId id) {\n        // check the virtual root ids (needed for overlay)\n        for (VirtualItemStateProvider virtualProvider : virtualProviders) {\n            if (virtualProvider.isVirtualRoot(id)) {"
            },
            {
              "step": 18,
              "variableName": "id",
              "startLine": 317,
              "startColumn": 40,
              "endLine": 317,
              "endColumn": 42,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "            }\n\n            // check if this manager has the item state\n            if (hasNonVirtualItemState(id)) {\n                return true;\n            }\n        } finally {"
            },
            {
              "step": 19,
              "variableName": "ItemId id",
              "startLine": 1820,
              "startColumn": 46,
              "endLine": 1820,
              "endColumn": 55,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "     * Checks if this item state manager has the given item state without\n     * considering the virtual item state managers.\n     */\n    protected boolean hasNonVirtualItemState(ItemId id) {\n        if (cache.isCached(id)) {\n            return true;\n        }"
            },
            {
              "step": 20,
              "variableName": "(NodeId) id",
              "startLine": 1827,
              "startColumn": 42,
              "endLine": 1827,
              "endColumn": 53,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "\n        try {\n            if (id.denotesNode()) {\n                return persistMgr.exists((NodeId) id);\n            } else {\n                return persistMgr.exists((PropertyId) id);\n            }"
            },
            {
              "step": 21,
              "variableName": "NodeId id",
              "startLine": 561,
              "startColumn": 27,
              "endLine": 561,
              "endColumn": 36,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/bundle/AbstractBundlePersistenceManager.java",
              "type": "NodeId",
              "code": "     *\n     * Checks the existence via the appropriate NodePropBundle.\n     */\n    public boolean exists(NodeId id) throws ItemStateException {\n        // anticipating a load followed by a exists\n        return getBundle(id) != null;\n    }"
            },
            {
              "step": 22,
              "variableName": "id",
              "startLine": 563,
              "startColumn": 26,
              "endLine": 563,
              "endColumn": 28,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/bundle/AbstractBundlePersistenceManager.java",
              "type": "NodeId",
              "code": "     */\n    public boolean exists(NodeId id) throws ItemStateException {\n        // anticipating a load followed by a exists\n        return getBundle(id) != null;\n    }\n\n    /**"
            },
            {
              "step": 23,
              "variableName": "NodeId id",
              "startLine": 740,
              "startColumn": 38,
              "endLine": 740,
              "endColumn": 47,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/bundle/AbstractBundlePersistenceManager.java",
              "type": "NodeId",
              "code": "     *\n     * @throws ItemStateException if an error occurs.\n     */\n    private NodePropBundle getBundle(NodeId id) throws ItemStateException {\n        NodePropBundle bundle = bundles.get(id);\n        readCounter.incrementAndGet();\n        if (bundle == MISSING) {"
            },
            {
              "step": 24,
              "variableName": "id",
              "startLine": 750,
              "startColumn": 35,
              "endLine": 750,
              "endColumn": 37,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/bundle/AbstractBundlePersistenceManager.java",
              "type": "NodeId",
              "code": "            return bundle;\n        }\n        // cache miss\n        return getBundleCacheMiss(id);\n    }\n\n    /**"
            },
            {
              "step": 25,
              "variableName": "NodeId id",
              "startLine": 763,
              "startColumn": 47,
              "endLine": 763,
              "endColumn": 56,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/bundle/AbstractBundlePersistenceManager.java",
              "type": "NodeId",
              "code": "     * @return\n     * @throws ItemStateException\n     */\n    private NodePropBundle getBundleCacheMiss(NodeId id)\n            throws ItemStateException {\n        long time = System.nanoTime();\n        NodePropBundle bundle = loadBundle(id);"
            },
            {
              "step": 26,
              "variableName": "id",
              "startLine": 766,
              "startColumn": 44,
              "endLine": 766,
              "endColumn": 46,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/bundle/AbstractBundlePersistenceManager.java",
              "type": "NodeId",
              "code": "    private NodePropBundle getBundleCacheMiss(NodeId id)\n            throws ItemStateException {\n        long time = System.nanoTime();\n        NodePropBundle bundle = loadBundle(id);\n        time = System.nanoTime() - time;\n        cacheMissDuration.addAndGet(time);\n        final long timeMs = time / 1000000;"
            },
            {
              "step": 27,
              "variableName": "NodeId id",
              "startLine": 885,
              "startColumn": 41,
              "endLine": 885,
              "endColumn": 50,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/pool/BundleDbPersistenceManager.java",
              "type": "NodeId",
              "code": "     * {@inheritDoc}\n     */\n    @Override\n    protected NodePropBundle loadBundle(NodeId id) throws ItemStateException {\n        try {\n            ResultSet rs =\n                conHelper.exec(bundleSelectSQL, getKey(id), false, 0);"
            },
            {
              "step": 28,
              "variableName": "msg",
              "startLine": 902,
              "startColumn": 23,
              "endLine": 902,
              "endColumn": 26,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/pool/BundleDbPersistenceManager.java",
              "type": "",
              "code": "            }\n        } catch (SQLException e) {\n        \tString msg = \"failed to read bundle (stacktrace on DEBUG log level): \" + id + \": \" + e; \n            log.error(msg);\n            log.debug(\"failed to read bundle: \" + id, e);\n            throw new ItemStateException(msg, e);\n        }"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "lockToken",
              "startLine": 1279,
              "startColumn": 19,
              "endLine": 1279,
              "endColumn": 28,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "NodeId",
              "code": "         */\n        public InternalLockInfo(NodeId lockToken, boolean sessionScoped,\n                                boolean deep, String lockOwner, long timeoutHint) {\n            super(lockToken, sessionScoped, deep, lockOwner, timeoutHint);\n        }\n\n        /**"
            },
            {
              "step": 1,
              "variableName": "super(lockToken, sessionScoped, deep, lockOwner, timeoutHint);",
              "startLine": 1279,
              "startColumn": 13,
              "endLine": 1279,
              "endColumn": 75,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "         */\n        public InternalLockInfo(NodeId lockToken, boolean sessionScoped,\n                                boolean deep, String lockOwner, long timeoutHint) {\n            super(lockToken, sessionScoped, deep, lockOwner, timeoutHint);\n        }\n\n        /**"
            },
            {
              "step": 2,
              "variableName": "new InternalLockInfo(",
              "startLine": 340,
              "startColumn": 33,
              "endLine": 341,
              "endColumn": 83,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "\n        SessionImpl session = (SessionImpl) node.getSession();\n        String lockOwner = (ownerInfo != null) ? ownerInfo : session.getUserID();\n        InternalLockInfo info = new InternalLockInfo(\n                node.getNodeId(), isSessionScoped, isDeep, lockOwner, timeoutHint);\n\n        ClusterOperation operation = null;"
            },
            {
              "step": 3,
              "variableName": "info",
              "startLine": 370,
              "startColumn": 17,
              "endLine": 370,
              "endColumn": 21,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "            }\n            if (info.isDeep() && element.hasPath(path)\n                    && element.getChildrenCount() > 0) {\n                info.throwLockException(\"Some child node is locked\", session);\n            }\n\n            // create lock token"
            },
            {
              "step": 4,
              "variableName": "throwLockException",
              "startLine": 259,
              "startColumn": 17,
              "endLine": 259,
              "endColumn": 35,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockInfo.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "     * @throws LockException always thrown, unless another error occurs\n     * @throws RepositoryException if the path of this lock can not be resolved\n     */\n    public void throwLockException(String message, SessionImpl session)\n            throws LockException, RepositoryException {\n        String path;\n        try {"
            },
            {
              "step": 5,
              "variableName": "id",
              "startLine": 264,
              "startColumn": 59,
              "endLine": 264,
              "endColumn": 61,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockInfo.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "        String path;\n        try {\n            path = session.getJCRPath(\n                    session.getHierarchyManager().getPath(id));\n        } catch (RepositoryException ignored) {\n            path = null;\n        }"
            },
            {
              "step": 6,
              "variableName": "id",
              "startLine": 264,
              "startColumn": 59,
              "endLine": 264,
              "endColumn": 61,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockInfo.java",
              "type": "NodeId",
              "code": "        String path;\n        try {\n            path = session.getJCRPath(\n                    session.getHierarchyManager().getPath(id));\n        } catch (RepositoryException ignored) {\n            path = null;\n        }"
            },
            {
              "step": 7,
              "variableName": "ItemId id",
              "startLine": 252,
              "startColumn": 25,
              "endLine": 252,
              "endColumn": 34,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/CachingHierarchyManager.java",
              "type": "NodeId",
              "code": "     * Overridden method simply checks whether we have an item matching the id\n     * and returns its path, otherwise calls base implementation.\n     */\n    public Path getPath(ItemId id)\n            throws ItemNotFoundException, RepositoryException {\n\n        if (id.denotesNode()) {"
            },
            {
              "step": 8,
              "variableName": "id",
              "startLine": 267,
              "startColumn": 30,
              "endLine": 267,
              "endColumn": 32,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/CachingHierarchyManager.java",
              "type": "NodeId",
              "code": "                }\n            }\n        }\n        return super.getPath(id);\n    }\n\n    /**"
            },
            {
              "step": 9,
              "variableName": "ItemId id",
              "startLine": 392,
              "startColumn": 25,
              "endLine": 392,
              "endColumn": 34,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "    /**\n     * {@inheritDoc}\n     */\n    public Path getPath(ItemId id)\n            throws ItemNotFoundException, RepositoryException {\n        // shortcut\n        if (id.equals(rootNodeId)) {"
            },
            {
              "step": 10,
              "variableName": "id",
              "startLine": 402,
              "startColumn": 45,
              "endLine": 402,
              "endColumn": 47,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "        PathBuilder builder = new PathBuilder();\n\n        try {\n            buildPath(builder, getItemState(id), new CycleDetector());\n            return builder.getPath();\n        } catch (NoSuchItemStateException nsise) {\n            String msg = \"failed to build path of \" + id;"
            },
            {
              "step": 11,
              "variableName": "ItemId id",
              "startLine": 152,
              "startColumn": 38,
              "endLine": 152,
              "endColumn": 47,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "     * @throws ItemStateException       if an error occurs\n     * @see ZombieHierarchyManager#getItemState(ItemId)\n     */\n    protected ItemState getItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n        return provider.getItemState(id);\n    }"
            },
            {
              "step": 12,
              "variableName": "id",
              "startLine": 154,
              "startColumn": 38,
              "endLine": 154,
              "endColumn": 40,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "     */\n    protected ItemState getItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n        return provider.getItemState(id);\n    }\n\n    /**"
            },
            {
              "step": 13,
              "variableName": "ItemId id",
              "startLine": 160,
              "startColumn": 35,
              "endLine": 160,
              "endColumn": 44,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/LocalItemStateManager.java",
              "type": "NodeId",
              "code": "    /**\n     * {@inheritDoc}\n     */\n    public ItemState getItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n\n        // check change log"
            },
            {
              "step": 14,
              "variableName": "(NodeId) id",
              "startLine": 175,
              "startColumn": 42,
              "endLine": 175,
              "endColumn": 53,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/LocalItemStateManager.java",
              "type": "NodeId",
              "code": "            if (state == null) {\n                // regular behaviour\n                if (id.denotesNode()) {\n                    state = getNodeState((NodeId) id);\n                } else {\n                    state = getPropertyState((PropertyId) id);\n                }"
            },
            {
              "step": 15,
              "variableName": "NodeId id",
              "startLine": 106,
              "startColumn": 38,
              "endLine": 106,
              "endColumn": 47,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/LocalItemStateManager.java",
              "type": "NodeId",
              "code": "     * @throws NoSuchItemStateException\n     * @throws ItemStateException\n     */\n    protected NodeState getNodeState(NodeId id)\n            throws NoSuchItemStateException, ItemStateException {\n\n        // load from parent manager and wrap"
            },
            {
              "step": 16,
              "variableName": "id",
              "startLine": 110,
              "startColumn": 67,
              "endLine": 110,
              "endColumn": 69,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/LocalItemStateManager.java",
              "type": "NodeId",
              "code": "            throws NoSuchItemStateException, ItemStateException {\n\n        // load from parent manager and wrap\n        NodeState state = (NodeState) sharedStateMgr.getItemState(id);\n        state = new NodeState(state, state.getStatus(), false);\n\n        // put it in cache"
            },
            {
              "step": 17,
              "variableName": "ItemId id",
              "startLine": 258,
              "startColumn": 35,
              "endLine": 258,
              "endColumn": 44,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "    /**\n     * {@inheritDoc}\n     */\n    public ItemState getItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n        // check the virtual root ids (needed for overlay)\n        for (VirtualItemStateProvider virtualProvider : virtualProviders) {"
            },
            {
              "step": 18,
              "variableName": "id",
              "startLine": 271,
              "startColumn": 43,
              "endLine": 271,
              "endColumn": 45,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "        ISMLocking.ReadLock readLock = acquireReadLock(id);\n        try {\n            // check internal first\n            return getNonVirtualItemState(id);\n        } catch (NoSuchItemStateException e) {\n            // Fall through to virtual state providers. We can afford the\n            // exception-for-control-flow performance hit here, as almost"
            },
            {
              "step": 19,
              "variableName": "ItemId id",
              "startLine": 1767,
              "startColumn": 46,
              "endLine": 1767,
              "endColumn": 55,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "     * Returns the item state for the given id without considering virtual\n     * item state providers.\n     */\n    private ItemState getNonVirtualItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n        // First check if the item state is already in the cache\n        ItemState state = cache.retrieve(id);"
            },
            {
              "step": 20,
              "variableName": "id",
              "startLine": 1798,
              "startColumn": 35,
              "endLine": 1798,
              "endColumn": 37,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "        try {\n            // Load the item state from persistent storage\n            // NOTE: This needs to happen outside a synchronized block!\n            state = loadItemState(id);\n            state.setStatus(ItemState.STATUS_EXISTING);\n            state.setContainer(this);\n"
            },
            {
              "step": 21,
              "variableName": "ItemId id",
              "startLine": 1873,
              "startColumn": 37,
              "endLine": 1873,
              "endColumn": 46,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "     * @param id item id\n     * @return item state\n     */\n    private ItemState loadItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n\n        ItemState state;"
            },
            {
              "step": 22,
              "variableName": "(NodeId) id",
              "startLine": 1878,
              "startColumn": 37,
              "endLine": 1878,
              "endColumn": 48,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "\n        ItemState state;\n        if (id.denotesNode()) {\n            state = persistMgr.load((NodeId) id);\n        } else {\n            state = persistMgr.load((PropertyId) id);\n        }"
            },
            {
              "step": 23,
              "variableName": "NodeId id",
              "startLine": 489,
              "startColumn": 27,
              "endLine": 489,
              "endColumn": 36,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/bundle/AbstractBundlePersistenceManager.java",
              "type": "NodeId",
              "code": "     *\n     * Loads the state via the appropriate NodePropBundle.\n     */\n    public NodeState load(NodeId id) throws NoSuchItemStateException, ItemStateException {\n        NodePropBundle bundle = getBundle(id);\n        if (bundle == null) {\n            throw new NoSuchItemStateException(id.toString());"
            },
            {
              "step": 24,
              "variableName": "id",
              "startLine": 490,
              "startColumn": 43,
              "endLine": 490,
              "endColumn": 45,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/bundle/AbstractBundlePersistenceManager.java",
              "type": "NodeId",
              "code": "     * Loads the state via the appropriate NodePropBundle.\n     */\n    public NodeState load(NodeId id) throws NoSuchItemStateException, ItemStateException {\n        NodePropBundle bundle = getBundle(id);\n        if (bundle == null) {\n            throw new NoSuchItemStateException(id.toString());\n        }"
            },
            {
              "step": 25,
              "variableName": "NodeId id",
              "startLine": 740,
              "startColumn": 38,
              "endLine": 740,
              "endColumn": 47,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/bundle/AbstractBundlePersistenceManager.java",
              "type": "NodeId",
              "code": "     *\n     * @throws ItemStateException if an error occurs.\n     */\n    private NodePropBundle getBundle(NodeId id) throws ItemStateException {\n        NodePropBundle bundle = bundles.get(id);\n        readCounter.incrementAndGet();\n        if (bundle == MISSING) {"
            },
            {
              "step": 26,
              "variableName": "id",
              "startLine": 750,
              "startColumn": 35,
              "endLine": 750,
              "endColumn": 37,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/bundle/AbstractBundlePersistenceManager.java",
              "type": "NodeId",
              "code": "            return bundle;\n        }\n        // cache miss\n        return getBundleCacheMiss(id);\n    }\n\n    /**"
            },
            {
              "step": 27,
              "variableName": "NodeId id",
              "startLine": 763,
              "startColumn": 47,
              "endLine": 763,
              "endColumn": 56,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/bundle/AbstractBundlePersistenceManager.java",
              "type": "NodeId",
              "code": "     * @return\n     * @throws ItemStateException\n     */\n    private NodePropBundle getBundleCacheMiss(NodeId id)\n            throws ItemStateException {\n        long time = System.nanoTime();\n        NodePropBundle bundle = loadBundle(id);"
            },
            {
              "step": 28,
              "variableName": "id",
              "startLine": 766,
              "startColumn": 44,
              "endLine": 766,
              "endColumn": 46,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/bundle/AbstractBundlePersistenceManager.java",
              "type": "NodeId",
              "code": "    private NodePropBundle getBundleCacheMiss(NodeId id)\n            throws ItemStateException {\n        long time = System.nanoTime();\n        NodePropBundle bundle = loadBundle(id);\n        time = System.nanoTime() - time;\n        cacheMissDuration.addAndGet(time);\n        final long timeMs = time / 1000000;"
            },
            {
              "step": 29,
              "variableName": "NodeId id",
              "startLine": 885,
              "startColumn": 41,
              "endLine": 885,
              "endColumn": 50,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/pool/BundleDbPersistenceManager.java",
              "type": "NodeId",
              "code": "     * {@inheritDoc}\n     */\n    @Override\n    protected NodePropBundle loadBundle(NodeId id) throws ItemStateException {\n        try {\n            ResultSet rs =\n                conHelper.exec(bundleSelectSQL, getKey(id), false, 0);"
            },
            {
              "step": 30,
              "variableName": "msg",
              "startLine": 902,
              "startColumn": 23,
              "endLine": 902,
              "endColumn": 26,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/pool/BundleDbPersistenceManager.java",
              "type": "",
              "code": "            }\n        } catch (SQLException e) {\n        \tString msg = \"failed to read bundle (stacktrace on DEBUG log level): \" + id + \": \" + e; \n            log.error(msg);\n            log.debug(\"failed to read bundle: \" + id, e);\n            throw new ItemStateException(msg, e);\n        }"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "lockToken",
              "startLine": 1279,
              "startColumn": 19,
              "endLine": 1279,
              "endColumn": 28,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "NodeId",
              "code": "         */\n        public InternalLockInfo(NodeId lockToken, boolean sessionScoped,\n                                boolean deep, String lockOwner, long timeoutHint) {\n            super(lockToken, sessionScoped, deep, lockOwner, timeoutHint);\n        }\n\n        /**"
            },
            {
              "step": 1,
              "variableName": "super(lockToken, sessionScoped, deep, lockOwner, timeoutHint);",
              "startLine": 1279,
              "startColumn": 13,
              "endLine": 1279,
              "endColumn": 75,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "         */\n        public InternalLockInfo(NodeId lockToken, boolean sessionScoped,\n                                boolean deep, String lockOwner, long timeoutHint) {\n            super(lockToken, sessionScoped, deep, lockOwner, timeoutHint);\n        }\n\n        /**"
            },
            {
              "step": 2,
              "variableName": "new InternalLockInfo(",
              "startLine": 340,
              "startColumn": 33,
              "endLine": 341,
              "endColumn": 83,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "\n        SessionImpl session = (SessionImpl) node.getSession();\n        String lockOwner = (ownerInfo != null) ? ownerInfo : session.getUserID();\n        InternalLockInfo info = new InternalLockInfo(\n                node.getNodeId(), isSessionScoped, isDeep, lockOwner, timeoutHint);\n\n        ClusterOperation operation = null;"
            },
            {
              "step": 3,
              "variableName": "info",
              "startLine": 370,
              "startColumn": 17,
              "endLine": 370,
              "endColumn": 21,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "            }\n            if (info.isDeep() && element.hasPath(path)\n                    && element.getChildrenCount() > 0) {\n                info.throwLockException(\"Some child node is locked\", session);\n            }\n\n            // create lock token"
            },
            {
              "step": 4,
              "variableName": "throwLockException",
              "startLine": 259,
              "startColumn": 17,
              "endLine": 259,
              "endColumn": 35,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockInfo.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "     * @throws LockException always thrown, unless another error occurs\n     * @throws RepositoryException if the path of this lock can not be resolved\n     */\n    public void throwLockException(String message, SessionImpl session)\n            throws LockException, RepositoryException {\n        String path;\n        try {"
            },
            {
              "step": 5,
              "variableName": "id",
              "startLine": 264,
              "startColumn": 59,
              "endLine": 264,
              "endColumn": 61,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockInfo.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "        String path;\n        try {\n            path = session.getJCRPath(\n                    session.getHierarchyManager().getPath(id));\n        } catch (RepositoryException ignored) {\n            path = null;\n        }"
            },
            {
              "step": 6,
              "variableName": "id",
              "startLine": 264,
              "startColumn": 59,
              "endLine": 264,
              "endColumn": 61,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockInfo.java",
              "type": "NodeId",
              "code": "        String path;\n        try {\n            path = session.getJCRPath(\n                    session.getHierarchyManager().getPath(id));\n        } catch (RepositoryException ignored) {\n            path = null;\n        }"
            },
            {
              "step": 7,
              "variableName": "ItemId id",
              "startLine": 252,
              "startColumn": 25,
              "endLine": 252,
              "endColumn": 34,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/CachingHierarchyManager.java",
              "type": "NodeId",
              "code": "     * Overridden method simply checks whether we have an item matching the id\n     * and returns its path, otherwise calls base implementation.\n     */\n    public Path getPath(ItemId id)\n            throws ItemNotFoundException, RepositoryException {\n\n        if (id.denotesNode()) {"
            },
            {
              "step": 8,
              "variableName": "id",
              "startLine": 267,
              "startColumn": 30,
              "endLine": 267,
              "endColumn": 32,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/CachingHierarchyManager.java",
              "type": "NodeId",
              "code": "                }\n            }\n        }\n        return super.getPath(id);\n    }\n\n    /**"
            },
            {
              "step": 9,
              "variableName": "ItemId id",
              "startLine": 392,
              "startColumn": 25,
              "endLine": 392,
              "endColumn": 34,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "    /**\n     * {@inheritDoc}\n     */\n    public Path getPath(ItemId id)\n            throws ItemNotFoundException, RepositoryException {\n        // shortcut\n        if (id.equals(rootNodeId)) {"
            },
            {
              "step": 10,
              "variableName": "id",
              "startLine": 402,
              "startColumn": 45,
              "endLine": 402,
              "endColumn": 47,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "        PathBuilder builder = new PathBuilder();\n\n        try {\n            buildPath(builder, getItemState(id), new CycleDetector());\n            return builder.getPath();\n        } catch (NoSuchItemStateException nsise) {\n            String msg = \"failed to build path of \" + id;"
            },
            {
              "step": 11,
              "variableName": "ItemId id",
              "startLine": 152,
              "startColumn": 38,
              "endLine": 152,
              "endColumn": 47,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "     * @throws ItemStateException       if an error occurs\n     * @see ZombieHierarchyManager#getItemState(ItemId)\n     */\n    protected ItemState getItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n        return provider.getItemState(id);\n    }"
            },
            {
              "step": 12,
              "variableName": "id",
              "startLine": 154,
              "startColumn": 38,
              "endLine": 154,
              "endColumn": 40,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "     */\n    protected ItemState getItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n        return provider.getItemState(id);\n    }\n\n    /**"
            },
            {
              "step": 13,
              "variableName": "ItemId id",
              "startLine": 132,
              "startColumn": 39,
              "endLine": 132,
              "endColumn": 48,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/observation/ChangeLogBasedHierarchyMgr.java",
              "type": "NodeId",
              "code": "         * <code>id</code>.\n         * @throws ItemStateException if any other error occurs.\n         */\n        public ItemState getItemState(ItemId id) throws NoSuchItemStateException, ItemStateException {\n            // check ChangeLog first\n            try {\n                ItemState state = changes.get(id);"
            },
            {
              "step": 14,
              "variableName": "id",
              "startLine": 142,
              "startColumn": 38,
              "endLine": 142,
              "endColumn": 40,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/observation/ChangeLogBasedHierarchyMgr.java",
              "type": "NodeId",
              "code": "            } catch (NoSuchItemStateException e) {\n                // item has been deleted, but we still return it by asking base\n            }\n            return base.getItemState(id);\n        }\n\n        /**"
            },
            {
              "step": 15,
              "variableName": "ItemId id",
              "startLine": 258,
              "startColumn": 35,
              "endLine": 258,
              "endColumn": 44,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "    /**\n     * {@inheritDoc}\n     */\n    public ItemState getItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n        // check the virtual root ids (needed for overlay)\n        for (VirtualItemStateProvider virtualProvider : virtualProviders) {"
            },
            {
              "step": 16,
              "variableName": "id",
              "startLine": 271,
              "startColumn": 43,
              "endLine": 271,
              "endColumn": 45,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "        ISMLocking.ReadLock readLock = acquireReadLock(id);\n        try {\n            // check internal first\n            return getNonVirtualItemState(id);\n        } catch (NoSuchItemStateException e) {\n            // Fall through to virtual state providers. We can afford the\n            // exception-for-control-flow performance hit here, as almost"
            },
            {
              "step": 17,
              "variableName": "ItemId id",
              "startLine": 1767,
              "startColumn": 46,
              "endLine": 1767,
              "endColumn": 55,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "     * Returns the item state for the given id without considering virtual\n     * item state providers.\n     */\n    private ItemState getNonVirtualItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n        // First check if the item state is already in the cache\n        ItemState state = cache.retrieve(id);"
            },
            {
              "step": 18,
              "variableName": "id",
              "startLine": 1798,
              "startColumn": 35,
              "endLine": 1798,
              "endColumn": 37,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "        try {\n            // Load the item state from persistent storage\n            // NOTE: This needs to happen outside a synchronized block!\n            state = loadItemState(id);\n            state.setStatus(ItemState.STATUS_EXISTING);\n            state.setContainer(this);\n"
            },
            {
              "step": 19,
              "variableName": "ItemId id",
              "startLine": 1873,
              "startColumn": 37,
              "endLine": 1873,
              "endColumn": 46,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "     * @param id item id\n     * @return item state\n     */\n    private ItemState loadItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n\n        ItemState state;"
            },
            {
              "step": 20,
              "variableName": "(NodeId) id",
              "startLine": 1878,
              "startColumn": 37,
              "endLine": 1878,
              "endColumn": 48,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "\n        ItemState state;\n        if (id.denotesNode()) {\n            state = persistMgr.load((NodeId) id);\n        } else {\n            state = persistMgr.load((PropertyId) id);\n        }"
            },
            {
              "step": 21,
              "variableName": "NodeId id",
              "startLine": 489,
              "startColumn": 27,
              "endLine": 489,
              "endColumn": 36,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/bundle/AbstractBundlePersistenceManager.java",
              "type": "NodeId",
              "code": "     *\n     * Loads the state via the appropriate NodePropBundle.\n     */\n    public NodeState load(NodeId id) throws NoSuchItemStateException, ItemStateException {\n        NodePropBundle bundle = getBundle(id);\n        if (bundle == null) {\n            throw new NoSuchItemStateException(id.toString());"
            },
            {
              "step": 22,
              "variableName": "id",
              "startLine": 490,
              "startColumn": 43,
              "endLine": 490,
              "endColumn": 45,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/bundle/AbstractBundlePersistenceManager.java",
              "type": "NodeId",
              "code": "     * Loads the state via the appropriate NodePropBundle.\n     */\n    public NodeState load(NodeId id) throws NoSuchItemStateException, ItemStateException {\n        NodePropBundle bundle = getBundle(id);\n        if (bundle == null) {\n            throw new NoSuchItemStateException(id.toString());\n        }"
            },
            {
              "step": 23,
              "variableName": "NodeId id",
              "startLine": 740,
              "startColumn": 38,
              "endLine": 740,
              "endColumn": 47,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/bundle/AbstractBundlePersistenceManager.java",
              "type": "NodeId",
              "code": "     *\n     * @throws ItemStateException if an error occurs.\n     */\n    private NodePropBundle getBundle(NodeId id) throws ItemStateException {\n        NodePropBundle bundle = bundles.get(id);\n        readCounter.incrementAndGet();\n        if (bundle == MISSING) {"
            },
            {
              "step": 24,
              "variableName": "id",
              "startLine": 750,
              "startColumn": 35,
              "endLine": 750,
              "endColumn": 37,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/bundle/AbstractBundlePersistenceManager.java",
              "type": "NodeId",
              "code": "            return bundle;\n        }\n        // cache miss\n        return getBundleCacheMiss(id);\n    }\n\n    /**"
            },
            {
              "step": 25,
              "variableName": "NodeId id",
              "startLine": 763,
              "startColumn": 47,
              "endLine": 763,
              "endColumn": 56,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/bundle/AbstractBundlePersistenceManager.java",
              "type": "NodeId",
              "code": "     * @return\n     * @throws ItemStateException\n     */\n    private NodePropBundle getBundleCacheMiss(NodeId id)\n            throws ItemStateException {\n        long time = System.nanoTime();\n        NodePropBundle bundle = loadBundle(id);"
            },
            {
              "step": 26,
              "variableName": "id",
              "startLine": 766,
              "startColumn": 44,
              "endLine": 766,
              "endColumn": 46,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/bundle/AbstractBundlePersistenceManager.java",
              "type": "NodeId",
              "code": "    private NodePropBundle getBundleCacheMiss(NodeId id)\n            throws ItemStateException {\n        long time = System.nanoTime();\n        NodePropBundle bundle = loadBundle(id);\n        time = System.nanoTime() - time;\n        cacheMissDuration.addAndGet(time);\n        final long timeMs = time / 1000000;"
            },
            {
              "step": 27,
              "variableName": "NodeId id",
              "startLine": 885,
              "startColumn": 41,
              "endLine": 885,
              "endColumn": 50,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/pool/BundleDbPersistenceManager.java",
              "type": "NodeId",
              "code": "     * {@inheritDoc}\n     */\n    @Override\n    protected NodePropBundle loadBundle(NodeId id) throws ItemStateException {\n        try {\n            ResultSet rs =\n                conHelper.exec(bundleSelectSQL, getKey(id), false, 0);"
            },
            {
              "step": 28,
              "variableName": "msg",
              "startLine": 902,
              "startColumn": 23,
              "endLine": 902,
              "endColumn": 26,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/pool/BundleDbPersistenceManager.java",
              "type": "",
              "code": "            }\n        } catch (SQLException e) {\n        \tString msg = \"failed to read bundle (stacktrace on DEBUG log level): \" + id + \": \" + e; \n            log.error(msg);\n            log.debug(\"failed to read bundle: \" + id, e);\n            throw new ItemStateException(msg, e);\n        }"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 20,
      "fileName": "BundleDbPersistenceManager.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "lockToken",
              "startLine": 1279,
              "startColumn": 19,
              "endLine": 1279,
              "endColumn": 28,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "NodeId",
              "code": "         */\n        public InternalLockInfo(NodeId lockToken, boolean sessionScoped,\n                                boolean deep, String lockOwner, long timeoutHint) {\n            super(lockToken, sessionScoped, deep, lockOwner, timeoutHint);\n        }\n\n        /**"
            },
            {
              "step": 1,
              "variableName": "super(lockToken, sessionScoped, deep, lockOwner, timeoutHint);",
              "startLine": 1279,
              "startColumn": 13,
              "endLine": 1279,
              "endColumn": 75,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "         */\n        public InternalLockInfo(NodeId lockToken, boolean sessionScoped,\n                                boolean deep, String lockOwner, long timeoutHint) {\n            super(lockToken, sessionScoped, deep, lockOwner, timeoutHint);\n        }\n\n        /**"
            },
            {
              "step": 2,
              "variableName": "new InternalLockInfo(",
              "startLine": 340,
              "startColumn": 33,
              "endLine": 341,
              "endColumn": 83,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "\n        SessionImpl session = (SessionImpl) node.getSession();\n        String lockOwner = (ownerInfo != null) ? ownerInfo : session.getUserID();\n        InternalLockInfo info = new InternalLockInfo(\n                node.getNodeId(), isSessionScoped, isDeep, lockOwner, timeoutHint);\n\n        ClusterOperation operation = null;"
            },
            {
              "step": 3,
              "variableName": "info",
              "startLine": 370,
              "startColumn": 17,
              "endLine": 370,
              "endColumn": 21,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "            }\n            if (info.isDeep() && element.hasPath(path)\n                    && element.getChildrenCount() > 0) {\n                info.throwLockException(\"Some child node is locked\", session);\n            }\n\n            // create lock token"
            },
            {
              "step": 4,
              "variableName": "throwLockException",
              "startLine": 259,
              "startColumn": 17,
              "endLine": 259,
              "endColumn": 35,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockInfo.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "     * @throws LockException always thrown, unless another error occurs\n     * @throws RepositoryException if the path of this lock can not be resolved\n     */\n    public void throwLockException(String message, SessionImpl session)\n            throws LockException, RepositoryException {\n        String path;\n        try {"
            },
            {
              "step": 5,
              "variableName": "id",
              "startLine": 264,
              "startColumn": 59,
              "endLine": 264,
              "endColumn": 61,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockInfo.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "        String path;\n        try {\n            path = session.getJCRPath(\n                    session.getHierarchyManager().getPath(id));\n        } catch (RepositoryException ignored) {\n            path = null;\n        }"
            },
            {
              "step": 6,
              "variableName": "id",
              "startLine": 264,
              "startColumn": 59,
              "endLine": 264,
              "endColumn": 61,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockInfo.java",
              "type": "NodeId",
              "code": "        String path;\n        try {\n            path = session.getJCRPath(\n                    session.getHierarchyManager().getPath(id));\n        } catch (RepositoryException ignored) {\n            path = null;\n        }"
            },
            {
              "step": 7,
              "variableName": "ItemId id",
              "startLine": 252,
              "startColumn": 25,
              "endLine": 252,
              "endColumn": 34,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/CachingHierarchyManager.java",
              "type": "NodeId",
              "code": "     * Overridden method simply checks whether we have an item matching the id\n     * and returns its path, otherwise calls base implementation.\n     */\n    public Path getPath(ItemId id)\n            throws ItemNotFoundException, RepositoryException {\n\n        if (id.denotesNode()) {"
            },
            {
              "step": 8,
              "variableName": "id",
              "startLine": 267,
              "startColumn": 30,
              "endLine": 267,
              "endColumn": 32,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/CachingHierarchyManager.java",
              "type": "NodeId",
              "code": "                }\n            }\n        }\n        return super.getPath(id);\n    }\n\n    /**"
            },
            {
              "step": 9,
              "variableName": "ItemId id",
              "startLine": 392,
              "startColumn": 25,
              "endLine": 392,
              "endColumn": 34,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "    /**\n     * {@inheritDoc}\n     */\n    public Path getPath(ItemId id)\n            throws ItemNotFoundException, RepositoryException {\n        // shortcut\n        if (id.equals(rootNodeId)) {"
            },
            {
              "step": 10,
              "variableName": "id",
              "startLine": 402,
              "startColumn": 45,
              "endLine": 402,
              "endColumn": 47,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "        PathBuilder builder = new PathBuilder();\n\n        try {\n            buildPath(builder, getItemState(id), new CycleDetector());\n            return builder.getPath();\n        } catch (NoSuchItemStateException nsise) {\n            String msg = \"failed to build path of \" + id;"
            },
            {
              "step": 11,
              "variableName": "ItemId id",
              "startLine": 152,
              "startColumn": 38,
              "endLine": 152,
              "endColumn": 47,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "     * @throws ItemStateException       if an error occurs\n     * @see ZombieHierarchyManager#getItemState(ItemId)\n     */\n    protected ItemState getItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n        return provider.getItemState(id);\n    }"
            },
            {
              "step": 12,
              "variableName": "id",
              "startLine": 154,
              "startColumn": 38,
              "endLine": 154,
              "endColumn": 40,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "     */\n    protected ItemState getItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n        return provider.getItemState(id);\n    }\n\n    /**"
            },
            {
              "step": 13,
              "variableName": "ItemId id",
              "startLine": 258,
              "startColumn": 35,
              "endLine": 258,
              "endColumn": 44,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "    /**\n     * {@inheritDoc}\n     */\n    public ItemState getItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n        // check the virtual root ids (needed for overlay)\n        for (VirtualItemStateProvider virtualProvider : virtualProviders) {"
            },
            {
              "step": 14,
              "variableName": "id",
              "startLine": 271,
              "startColumn": 43,
              "endLine": 271,
              "endColumn": 45,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "        ISMLocking.ReadLock readLock = acquireReadLock(id);\n        try {\n            // check internal first\n            return getNonVirtualItemState(id);\n        } catch (NoSuchItemStateException e) {\n            // Fall through to virtual state providers. We can afford the\n            // exception-for-control-flow performance hit here, as almost"
            },
            {
              "step": 15,
              "variableName": "ItemId id",
              "startLine": 1767,
              "startColumn": 46,
              "endLine": 1767,
              "endColumn": 55,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "     * Returns the item state for the given id without considering virtual\n     * item state providers.\n     */\n    private ItemState getNonVirtualItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n        // First check if the item state is already in the cache\n        ItemState state = cache.retrieve(id);"
            },
            {
              "step": 16,
              "variableName": "id",
              "startLine": 1798,
              "startColumn": 35,
              "endLine": 1798,
              "endColumn": 37,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "        try {\n            // Load the item state from persistent storage\n            // NOTE: This needs to happen outside a synchronized block!\n            state = loadItemState(id);\n            state.setStatus(ItemState.STATUS_EXISTING);\n            state.setContainer(this);\n"
            },
            {
              "step": 17,
              "variableName": "ItemId id",
              "startLine": 1873,
              "startColumn": 37,
              "endLine": 1873,
              "endColumn": 46,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "     * @param id item id\n     * @return item state\n     */\n    private ItemState loadItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n\n        ItemState state;"
            },
            {
              "step": 18,
              "variableName": "(NodeId) id",
              "startLine": 1878,
              "startColumn": 37,
              "endLine": 1878,
              "endColumn": 48,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "\n        ItemState state;\n        if (id.denotesNode()) {\n            state = persistMgr.load((NodeId) id);\n        } else {\n            state = persistMgr.load((PropertyId) id);\n        }"
            },
            {
              "step": 19,
              "variableName": "NodeId id",
              "startLine": 489,
              "startColumn": 27,
              "endLine": 489,
              "endColumn": 36,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/bundle/AbstractBundlePersistenceManager.java",
              "type": "NodeId",
              "code": "     *\n     * Loads the state via the appropriate NodePropBundle.\n     */\n    public NodeState load(NodeId id) throws NoSuchItemStateException, ItemStateException {\n        NodePropBundle bundle = getBundle(id);\n        if (bundle == null) {\n            throw new NoSuchItemStateException(id.toString());"
            },
            {
              "step": 20,
              "variableName": "id",
              "startLine": 490,
              "startColumn": 43,
              "endLine": 490,
              "endColumn": 45,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/bundle/AbstractBundlePersistenceManager.java",
              "type": "NodeId",
              "code": "     * Loads the state via the appropriate NodePropBundle.\n     */\n    public NodeState load(NodeId id) throws NoSuchItemStateException, ItemStateException {\n        NodePropBundle bundle = getBundle(id);\n        if (bundle == null) {\n            throw new NoSuchItemStateException(id.toString());\n        }"
            },
            {
              "step": 21,
              "variableName": "NodeId id",
              "startLine": 740,
              "startColumn": 38,
              "endLine": 740,
              "endColumn": 47,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/bundle/AbstractBundlePersistenceManager.java",
              "type": "NodeId",
              "code": "     *\n     * @throws ItemStateException if an error occurs.\n     */\n    private NodePropBundle getBundle(NodeId id) throws ItemStateException {\n        NodePropBundle bundle = bundles.get(id);\n        readCounter.incrementAndGet();\n        if (bundle == MISSING) {"
            },
            {
              "step": 22,
              "variableName": "id",
              "startLine": 750,
              "startColumn": 35,
              "endLine": 750,
              "endColumn": 37,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/bundle/AbstractBundlePersistenceManager.java",
              "type": "NodeId",
              "code": "            return bundle;\n        }\n        // cache miss\n        return getBundleCacheMiss(id);\n    }\n\n    /**"
            },
            {
              "step": 23,
              "variableName": "NodeId id",
              "startLine": 763,
              "startColumn": 47,
              "endLine": 763,
              "endColumn": 56,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/bundle/AbstractBundlePersistenceManager.java",
              "type": "NodeId",
              "code": "     * @return\n     * @throws ItemStateException\n     */\n    private NodePropBundle getBundleCacheMiss(NodeId id)\n            throws ItemStateException {\n        long time = System.nanoTime();\n        NodePropBundle bundle = loadBundle(id);"
            },
            {
              "step": 24,
              "variableName": "id",
              "startLine": 766,
              "startColumn": 44,
              "endLine": 766,
              "endColumn": 46,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/bundle/AbstractBundlePersistenceManager.java",
              "type": "NodeId",
              "code": "    private NodePropBundle getBundleCacheMiss(NodeId id)\n            throws ItemStateException {\n        long time = System.nanoTime();\n        NodePropBundle bundle = loadBundle(id);\n        time = System.nanoTime() - time;\n        cacheMissDuration.addAndGet(time);\n        final long timeMs = time / 1000000;"
            },
            {
              "step": 25,
              "variableName": "NodeId id",
              "startLine": 885,
              "startColumn": 41,
              "endLine": 885,
              "endColumn": 50,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/pool/BundleDbPersistenceManager.java",
              "type": "NodeId",
              "code": "     * {@inheritDoc}\n     */\n    @Override\n    protected NodePropBundle loadBundle(NodeId id) throws ItemStateException {\n        try {\n            ResultSet rs =\n                conHelper.exec(bundleSelectSQL, getKey(id), false, 0);"
            },
            {
              "step": 26,
              "variableName": "\"failed to read bundle: \" + id",
              "startLine": 903,
              "startColumn": 23,
              "endLine": 903,
              "endColumn": 53,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/pool/BundleDbPersistenceManager.java",
              "type": "",
              "code": "        } catch (SQLException e) {\n        \tString msg = \"failed to read bundle (stacktrace on DEBUG log level): \" + id + \": \" + e; \n            log.error(msg);\n            log.debug(\"failed to read bundle: \" + id, e);\n            throw new ItemStateException(msg, e);\n        }\n    }"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "lockToken",
              "startLine": 1279,
              "startColumn": 19,
              "endLine": 1279,
              "endColumn": 28,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "NodeId",
              "code": "         */\n        public InternalLockInfo(NodeId lockToken, boolean sessionScoped,\n                                boolean deep, String lockOwner, long timeoutHint) {\n            super(lockToken, sessionScoped, deep, lockOwner, timeoutHint);\n        }\n\n        /**"
            },
            {
              "step": 1,
              "variableName": "super(lockToken, sessionScoped, deep, lockOwner, timeoutHint);",
              "startLine": 1279,
              "startColumn": 13,
              "endLine": 1279,
              "endColumn": 75,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "         */\n        public InternalLockInfo(NodeId lockToken, boolean sessionScoped,\n                                boolean deep, String lockOwner, long timeoutHint) {\n            super(lockToken, sessionScoped, deep, lockOwner, timeoutHint);\n        }\n\n        /**"
            },
            {
              "step": 2,
              "variableName": "new InternalLockInfo(",
              "startLine": 340,
              "startColumn": 33,
              "endLine": 341,
              "endColumn": 83,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "\n        SessionImpl session = (SessionImpl) node.getSession();\n        String lockOwner = (ownerInfo != null) ? ownerInfo : session.getUserID();\n        InternalLockInfo info = new InternalLockInfo(\n                node.getNodeId(), isSessionScoped, isDeep, lockOwner, timeoutHint);\n\n        ClusterOperation operation = null;"
            },
            {
              "step": 3,
              "variableName": "info",
              "startLine": 370,
              "startColumn": 17,
              "endLine": 370,
              "endColumn": 21,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "            }\n            if (info.isDeep() && element.hasPath(path)\n                    && element.getChildrenCount() > 0) {\n                info.throwLockException(\"Some child node is locked\", session);\n            }\n\n            // create lock token"
            },
            {
              "step": 4,
              "variableName": "throwLockException",
              "startLine": 259,
              "startColumn": 17,
              "endLine": 259,
              "endColumn": 35,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockInfo.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "     * @throws LockException always thrown, unless another error occurs\n     * @throws RepositoryException if the path of this lock can not be resolved\n     */\n    public void throwLockException(String message, SessionImpl session)\n            throws LockException, RepositoryException {\n        String path;\n        try {"
            },
            {
              "step": 5,
              "variableName": "id",
              "startLine": 264,
              "startColumn": 59,
              "endLine": 264,
              "endColumn": 61,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockInfo.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "        String path;\n        try {\n            path = session.getJCRPath(\n                    session.getHierarchyManager().getPath(id));\n        } catch (RepositoryException ignored) {\n            path = null;\n        }"
            },
            {
              "step": 6,
              "variableName": "id",
              "startLine": 264,
              "startColumn": 59,
              "endLine": 264,
              "endColumn": 61,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockInfo.java",
              "type": "NodeId",
              "code": "        String path;\n        try {\n            path = session.getJCRPath(\n                    session.getHierarchyManager().getPath(id));\n        } catch (RepositoryException ignored) {\n            path = null;\n        }"
            },
            {
              "step": 7,
              "variableName": "ItemId id",
              "startLine": 252,
              "startColumn": 25,
              "endLine": 252,
              "endColumn": 34,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/CachingHierarchyManager.java",
              "type": "NodeId",
              "code": "     * Overridden method simply checks whether we have an item matching the id\n     * and returns its path, otherwise calls base implementation.\n     */\n    public Path getPath(ItemId id)\n            throws ItemNotFoundException, RepositoryException {\n\n        if (id.denotesNode()) {"
            },
            {
              "step": 8,
              "variableName": "id",
              "startLine": 267,
              "startColumn": 30,
              "endLine": 267,
              "endColumn": 32,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/CachingHierarchyManager.java",
              "type": "NodeId",
              "code": "                }\n            }\n        }\n        return super.getPath(id);\n    }\n\n    /**"
            },
            {
              "step": 9,
              "variableName": "ItemId id",
              "startLine": 392,
              "startColumn": 25,
              "endLine": 392,
              "endColumn": 34,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "    /**\n     * {@inheritDoc}\n     */\n    public Path getPath(ItemId id)\n            throws ItemNotFoundException, RepositoryException {\n        // shortcut\n        if (id.equals(rootNodeId)) {"
            },
            {
              "step": 10,
              "variableName": "id",
              "startLine": 402,
              "startColumn": 45,
              "endLine": 402,
              "endColumn": 47,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "        PathBuilder builder = new PathBuilder();\n\n        try {\n            buildPath(builder, getItemState(id), new CycleDetector());\n            return builder.getPath();\n        } catch (NoSuchItemStateException nsise) {\n            String msg = \"failed to build path of \" + id;"
            },
            {
              "step": 11,
              "variableName": "ItemId id",
              "startLine": 152,
              "startColumn": 38,
              "endLine": 152,
              "endColumn": 47,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "     * @throws ItemStateException       if an error occurs\n     * @see ZombieHierarchyManager#getItemState(ItemId)\n     */\n    protected ItemState getItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n        return provider.getItemState(id);\n    }"
            },
            {
              "step": 12,
              "variableName": "id",
              "startLine": 154,
              "startColumn": 38,
              "endLine": 154,
              "endColumn": 40,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "     */\n    protected ItemState getItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n        return provider.getItemState(id);\n    }\n\n    /**"
            },
            {
              "step": 13,
              "variableName": "ItemId id",
              "startLine": 239,
              "startColumn": 35,
              "endLine": 239,
              "endColumn": 44,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/XAItemStateManager.java",
              "type": "NodeId",
              "code": "     * the transactional change log. Fallback is always the call to the base\n     * class.\n     */\n    public ItemState getItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n\n        if (virtualProvider != null && virtualProvider.hasItemState(id)) {"
            },
            {
              "step": 14,
              "variableName": "id",
              "startLine": 242,
              "startColumn": 69,
              "endLine": 242,
              "endColumn": 71,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/XAItemStateManager.java",
              "type": "NodeId",
              "code": "    public ItemState getItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n\n        if (virtualProvider != null && virtualProvider.hasItemState(id)) {\n            return virtualProvider.getItemState(id);\n        }\n        // 1) check local changes"
            },
            {
              "step": 15,
              "variableName": "ItemId id",
              "startLine": 140,
              "startColumn": 33,
              "endLine": 140,
              "endColumn": 42,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/VersionItemStateProvider.java",
              "type": "NodeId",
              "code": "    /**\n     * @inheritDoc\n     */\n    public boolean hasItemState(ItemId id) {\n        return items.get(id) != null || stateMgr.hasItemState(id);\n    }\n"
            },
            {
              "step": 16,
              "variableName": "id",
              "startLine": 141,
              "startColumn": 63,
              "endLine": 141,
              "endColumn": 65,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/VersionItemStateProvider.java",
              "type": "NodeId",
              "code": "     * @inheritDoc\n     */\n    public boolean hasItemState(ItemId id) {\n        return items.get(id) != null || stateMgr.hasItemState(id);\n    }\n\n    /**"
            },
            {
              "step": 17,
              "variableName": "ItemId id",
              "startLine": 296,
              "startColumn": 33,
              "endLine": 296,
              "endColumn": 42,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "    /**\n     * {@inheritDoc}\n     */\n    public boolean hasItemState(ItemId id) {\n        // check the virtual root ids (needed for overlay)\n        for (VirtualItemStateProvider virtualProvider : virtualProviders) {\n            if (virtualProvider.isVirtualRoot(id)) {"
            },
            {
              "step": 18,
              "variableName": "id",
              "startLine": 317,
              "startColumn": 40,
              "endLine": 317,
              "endColumn": 42,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "            }\n\n            // check if this manager has the item state\n            if (hasNonVirtualItemState(id)) {\n                return true;\n            }\n        } finally {"
            },
            {
              "step": 19,
              "variableName": "ItemId id",
              "startLine": 1820,
              "startColumn": 46,
              "endLine": 1820,
              "endColumn": 55,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "     * Checks if this item state manager has the given item state without\n     * considering the virtual item state managers.\n     */\n    protected boolean hasNonVirtualItemState(ItemId id) {\n        if (cache.isCached(id)) {\n            return true;\n        }"
            },
            {
              "step": 20,
              "variableName": "(NodeId) id",
              "startLine": 1827,
              "startColumn": 42,
              "endLine": 1827,
              "endColumn": 53,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "\n        try {\n            if (id.denotesNode()) {\n                return persistMgr.exists((NodeId) id);\n            } else {\n                return persistMgr.exists((PropertyId) id);\n            }"
            },
            {
              "step": 21,
              "variableName": "NodeId id",
              "startLine": 561,
              "startColumn": 27,
              "endLine": 561,
              "endColumn": 36,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/bundle/AbstractBundlePersistenceManager.java",
              "type": "NodeId",
              "code": "     *\n     * Checks the existence via the appropriate NodePropBundle.\n     */\n    public boolean exists(NodeId id) throws ItemStateException {\n        // anticipating a load followed by a exists\n        return getBundle(id) != null;\n    }"
            },
            {
              "step": 22,
              "variableName": "id",
              "startLine": 563,
              "startColumn": 26,
              "endLine": 563,
              "endColumn": 28,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/bundle/AbstractBundlePersistenceManager.java",
              "type": "NodeId",
              "code": "     */\n    public boolean exists(NodeId id) throws ItemStateException {\n        // anticipating a load followed by a exists\n        return getBundle(id) != null;\n    }\n\n    /**"
            },
            {
              "step": 23,
              "variableName": "NodeId id",
              "startLine": 740,
              "startColumn": 38,
              "endLine": 740,
              "endColumn": 47,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/bundle/AbstractBundlePersistenceManager.java",
              "type": "NodeId",
              "code": "     *\n     * @throws ItemStateException if an error occurs.\n     */\n    private NodePropBundle getBundle(NodeId id) throws ItemStateException {\n        NodePropBundle bundle = bundles.get(id);\n        readCounter.incrementAndGet();\n        if (bundle == MISSING) {"
            },
            {
              "step": 24,
              "variableName": "id",
              "startLine": 750,
              "startColumn": 35,
              "endLine": 750,
              "endColumn": 37,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/bundle/AbstractBundlePersistenceManager.java",
              "type": "NodeId",
              "code": "            return bundle;\n        }\n        // cache miss\n        return getBundleCacheMiss(id);\n    }\n\n    /**"
            },
            {
              "step": 25,
              "variableName": "NodeId id",
              "startLine": 763,
              "startColumn": 47,
              "endLine": 763,
              "endColumn": 56,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/bundle/AbstractBundlePersistenceManager.java",
              "type": "NodeId",
              "code": "     * @return\n     * @throws ItemStateException\n     */\n    private NodePropBundle getBundleCacheMiss(NodeId id)\n            throws ItemStateException {\n        long time = System.nanoTime();\n        NodePropBundle bundle = loadBundle(id);"
            },
            {
              "step": 26,
              "variableName": "id",
              "startLine": 766,
              "startColumn": 44,
              "endLine": 766,
              "endColumn": 46,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/bundle/AbstractBundlePersistenceManager.java",
              "type": "NodeId",
              "code": "    private NodePropBundle getBundleCacheMiss(NodeId id)\n            throws ItemStateException {\n        long time = System.nanoTime();\n        NodePropBundle bundle = loadBundle(id);\n        time = System.nanoTime() - time;\n        cacheMissDuration.addAndGet(time);\n        final long timeMs = time / 1000000;"
            },
            {
              "step": 27,
              "variableName": "NodeId id",
              "startLine": 885,
              "startColumn": 41,
              "endLine": 885,
              "endColumn": 50,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/pool/BundleDbPersistenceManager.java",
              "type": "NodeId",
              "code": "     * {@inheritDoc}\n     */\n    @Override\n    protected NodePropBundle loadBundle(NodeId id) throws ItemStateException {\n        try {\n            ResultSet rs =\n                conHelper.exec(bundleSelectSQL, getKey(id), false, 0);"
            },
            {
              "step": 28,
              "variableName": "\"failed to read bundle: \" + id",
              "startLine": 903,
              "startColumn": 23,
              "endLine": 903,
              "endColumn": 53,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/pool/BundleDbPersistenceManager.java",
              "type": "",
              "code": "        } catch (SQLException e) {\n        \tString msg = \"failed to read bundle (stacktrace on DEBUG log level): \" + id + \": \" + e; \n            log.error(msg);\n            log.debug(\"failed to read bundle: \" + id, e);\n            throw new ItemStateException(msg, e);\n        }\n    }"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "lockToken",
              "startLine": 1279,
              "startColumn": 19,
              "endLine": 1279,
              "endColumn": 28,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "NodeId",
              "code": "         */\n        public InternalLockInfo(NodeId lockToken, boolean sessionScoped,\n                                boolean deep, String lockOwner, long timeoutHint) {\n            super(lockToken, sessionScoped, deep, lockOwner, timeoutHint);\n        }\n\n        /**"
            },
            {
              "step": 1,
              "variableName": "super(lockToken, sessionScoped, deep, lockOwner, timeoutHint);",
              "startLine": 1279,
              "startColumn": 13,
              "endLine": 1279,
              "endColumn": 75,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "         */\n        public InternalLockInfo(NodeId lockToken, boolean sessionScoped,\n                                boolean deep, String lockOwner, long timeoutHint) {\n            super(lockToken, sessionScoped, deep, lockOwner, timeoutHint);\n        }\n\n        /**"
            },
            {
              "step": 2,
              "variableName": "new InternalLockInfo(",
              "startLine": 340,
              "startColumn": 33,
              "endLine": 341,
              "endColumn": 83,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "\n        SessionImpl session = (SessionImpl) node.getSession();\n        String lockOwner = (ownerInfo != null) ? ownerInfo : session.getUserID();\n        InternalLockInfo info = new InternalLockInfo(\n                node.getNodeId(), isSessionScoped, isDeep, lockOwner, timeoutHint);\n\n        ClusterOperation operation = null;"
            },
            {
              "step": 3,
              "variableName": "info",
              "startLine": 370,
              "startColumn": 17,
              "endLine": 370,
              "endColumn": 21,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "            }\n            if (info.isDeep() && element.hasPath(path)\n                    && element.getChildrenCount() > 0) {\n                info.throwLockException(\"Some child node is locked\", session);\n            }\n\n            // create lock token"
            },
            {
              "step": 4,
              "variableName": "throwLockException",
              "startLine": 259,
              "startColumn": 17,
              "endLine": 259,
              "endColumn": 35,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockInfo.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "     * @throws LockException always thrown, unless another error occurs\n     * @throws RepositoryException if the path of this lock can not be resolved\n     */\n    public void throwLockException(String message, SessionImpl session)\n            throws LockException, RepositoryException {\n        String path;\n        try {"
            },
            {
              "step": 5,
              "variableName": "id",
              "startLine": 264,
              "startColumn": 59,
              "endLine": 264,
              "endColumn": 61,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockInfo.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "        String path;\n        try {\n            path = session.getJCRPath(\n                    session.getHierarchyManager().getPath(id));\n        } catch (RepositoryException ignored) {\n            path = null;\n        }"
            },
            {
              "step": 6,
              "variableName": "id",
              "startLine": 264,
              "startColumn": 59,
              "endLine": 264,
              "endColumn": 61,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockInfo.java",
              "type": "NodeId",
              "code": "        String path;\n        try {\n            path = session.getJCRPath(\n                    session.getHierarchyManager().getPath(id));\n        } catch (RepositoryException ignored) {\n            path = null;\n        }"
            },
            {
              "step": 7,
              "variableName": "ItemId id",
              "startLine": 252,
              "startColumn": 25,
              "endLine": 252,
              "endColumn": 34,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/CachingHierarchyManager.java",
              "type": "NodeId",
              "code": "     * Overridden method simply checks whether we have an item matching the id\n     * and returns its path, otherwise calls base implementation.\n     */\n    public Path getPath(ItemId id)\n            throws ItemNotFoundException, RepositoryException {\n\n        if (id.denotesNode()) {"
            },
            {
              "step": 8,
              "variableName": "id",
              "startLine": 267,
              "startColumn": 30,
              "endLine": 267,
              "endColumn": 32,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/CachingHierarchyManager.java",
              "type": "NodeId",
              "code": "                }\n            }\n        }\n        return super.getPath(id);\n    }\n\n    /**"
            },
            {
              "step": 9,
              "variableName": "ItemId id",
              "startLine": 392,
              "startColumn": 25,
              "endLine": 392,
              "endColumn": 34,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "    /**\n     * {@inheritDoc}\n     */\n    public Path getPath(ItemId id)\n            throws ItemNotFoundException, RepositoryException {\n        // shortcut\n        if (id.equals(rootNodeId)) {"
            },
            {
              "step": 10,
              "variableName": "id",
              "startLine": 402,
              "startColumn": 45,
              "endLine": 402,
              "endColumn": 47,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "        PathBuilder builder = new PathBuilder();\n\n        try {\n            buildPath(builder, getItemState(id), new CycleDetector());\n            return builder.getPath();\n        } catch (NoSuchItemStateException nsise) {\n            String msg = \"failed to build path of \" + id;"
            },
            {
              "step": 11,
              "variableName": "ItemId id",
              "startLine": 152,
              "startColumn": 38,
              "endLine": 152,
              "endColumn": 47,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "     * @throws ItemStateException       if an error occurs\n     * @see ZombieHierarchyManager#getItemState(ItemId)\n     */\n    protected ItemState getItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n        return provider.getItemState(id);\n    }"
            },
            {
              "step": 12,
              "variableName": "id",
              "startLine": 154,
              "startColumn": 38,
              "endLine": 154,
              "endColumn": 40,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "     */\n    protected ItemState getItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n        return provider.getItemState(id);\n    }\n\n    /**"
            },
            {
              "step": 13,
              "variableName": "ItemId id",
              "startLine": 160,
              "startColumn": 35,
              "endLine": 160,
              "endColumn": 44,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/LocalItemStateManager.java",
              "type": "NodeId",
              "code": "    /**\n     * {@inheritDoc}\n     */\n    public ItemState getItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n\n        // check change log"
            },
            {
              "step": 14,
              "variableName": "(NodeId) id",
              "startLine": 175,
              "startColumn": 42,
              "endLine": 175,
              "endColumn": 53,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/LocalItemStateManager.java",
              "type": "NodeId",
              "code": "            if (state == null) {\n                // regular behaviour\n                if (id.denotesNode()) {\n                    state = getNodeState((NodeId) id);\n                } else {\n                    state = getPropertyState((PropertyId) id);\n                }"
            },
            {
              "step": 15,
              "variableName": "NodeId id",
              "startLine": 106,
              "startColumn": 38,
              "endLine": 106,
              "endColumn": 47,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/LocalItemStateManager.java",
              "type": "NodeId",
              "code": "     * @throws NoSuchItemStateException\n     * @throws ItemStateException\n     */\n    protected NodeState getNodeState(NodeId id)\n            throws NoSuchItemStateException, ItemStateException {\n\n        // load from parent manager and wrap"
            },
            {
              "step": 16,
              "variableName": "id",
              "startLine": 110,
              "startColumn": 67,
              "endLine": 110,
              "endColumn": 69,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/LocalItemStateManager.java",
              "type": "NodeId",
              "code": "            throws NoSuchItemStateException, ItemStateException {\n\n        // load from parent manager and wrap\n        NodeState state = (NodeState) sharedStateMgr.getItemState(id);\n        state = new NodeState(state, state.getStatus(), false);\n\n        // put it in cache"
            },
            {
              "step": 17,
              "variableName": "ItemId id",
              "startLine": 258,
              "startColumn": 35,
              "endLine": 258,
              "endColumn": 44,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "    /**\n     * {@inheritDoc}\n     */\n    public ItemState getItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n        // check the virtual root ids (needed for overlay)\n        for (VirtualItemStateProvider virtualProvider : virtualProviders) {"
            },
            {
              "step": 18,
              "variableName": "id",
              "startLine": 271,
              "startColumn": 43,
              "endLine": 271,
              "endColumn": 45,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "        ISMLocking.ReadLock readLock = acquireReadLock(id);\n        try {\n            // check internal first\n            return getNonVirtualItemState(id);\n        } catch (NoSuchItemStateException e) {\n            // Fall through to virtual state providers. We can afford the\n            // exception-for-control-flow performance hit here, as almost"
            },
            {
              "step": 19,
              "variableName": "ItemId id",
              "startLine": 1767,
              "startColumn": 46,
              "endLine": 1767,
              "endColumn": 55,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "     * Returns the item state for the given id without considering virtual\n     * item state providers.\n     */\n    private ItemState getNonVirtualItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n        // First check if the item state is already in the cache\n        ItemState state = cache.retrieve(id);"
            },
            {
              "step": 20,
              "variableName": "id",
              "startLine": 1798,
              "startColumn": 35,
              "endLine": 1798,
              "endColumn": 37,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "        try {\n            // Load the item state from persistent storage\n            // NOTE: This needs to happen outside a synchronized block!\n            state = loadItemState(id);\n            state.setStatus(ItemState.STATUS_EXISTING);\n            state.setContainer(this);\n"
            },
            {
              "step": 21,
              "variableName": "ItemId id",
              "startLine": 1873,
              "startColumn": 37,
              "endLine": 1873,
              "endColumn": 46,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "     * @param id item id\n     * @return item state\n     */\n    private ItemState loadItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n\n        ItemState state;"
            },
            {
              "step": 22,
              "variableName": "(NodeId) id",
              "startLine": 1878,
              "startColumn": 37,
              "endLine": 1878,
              "endColumn": 48,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "\n        ItemState state;\n        if (id.denotesNode()) {\n            state = persistMgr.load((NodeId) id);\n        } else {\n            state = persistMgr.load((PropertyId) id);\n        }"
            },
            {
              "step": 23,
              "variableName": "NodeId id",
              "startLine": 489,
              "startColumn": 27,
              "endLine": 489,
              "endColumn": 36,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/bundle/AbstractBundlePersistenceManager.java",
              "type": "NodeId",
              "code": "     *\n     * Loads the state via the appropriate NodePropBundle.\n     */\n    public NodeState load(NodeId id) throws NoSuchItemStateException, ItemStateException {\n        NodePropBundle bundle = getBundle(id);\n        if (bundle == null) {\n            throw new NoSuchItemStateException(id.toString());"
            },
            {
              "step": 24,
              "variableName": "id",
              "startLine": 490,
              "startColumn": 43,
              "endLine": 490,
              "endColumn": 45,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/bundle/AbstractBundlePersistenceManager.java",
              "type": "NodeId",
              "code": "     * Loads the state via the appropriate NodePropBundle.\n     */\n    public NodeState load(NodeId id) throws NoSuchItemStateException, ItemStateException {\n        NodePropBundle bundle = getBundle(id);\n        if (bundle == null) {\n            throw new NoSuchItemStateException(id.toString());\n        }"
            },
            {
              "step": 25,
              "variableName": "NodeId id",
              "startLine": 740,
              "startColumn": 38,
              "endLine": 740,
              "endColumn": 47,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/bundle/AbstractBundlePersistenceManager.java",
              "type": "NodeId",
              "code": "     *\n     * @throws ItemStateException if an error occurs.\n     */\n    private NodePropBundle getBundle(NodeId id) throws ItemStateException {\n        NodePropBundle bundle = bundles.get(id);\n        readCounter.incrementAndGet();\n        if (bundle == MISSING) {"
            },
            {
              "step": 26,
              "variableName": "id",
              "startLine": 750,
              "startColumn": 35,
              "endLine": 750,
              "endColumn": 37,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/bundle/AbstractBundlePersistenceManager.java",
              "type": "NodeId",
              "code": "            return bundle;\n        }\n        // cache miss\n        return getBundleCacheMiss(id);\n    }\n\n    /**"
            },
            {
              "step": 27,
              "variableName": "NodeId id",
              "startLine": 763,
              "startColumn": 47,
              "endLine": 763,
              "endColumn": 56,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/bundle/AbstractBundlePersistenceManager.java",
              "type": "NodeId",
              "code": "     * @return\n     * @throws ItemStateException\n     */\n    private NodePropBundle getBundleCacheMiss(NodeId id)\n            throws ItemStateException {\n        long time = System.nanoTime();\n        NodePropBundle bundle = loadBundle(id);"
            },
            {
              "step": 28,
              "variableName": "id",
              "startLine": 766,
              "startColumn": 44,
              "endLine": 766,
              "endColumn": 46,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/bundle/AbstractBundlePersistenceManager.java",
              "type": "NodeId",
              "code": "    private NodePropBundle getBundleCacheMiss(NodeId id)\n            throws ItemStateException {\n        long time = System.nanoTime();\n        NodePropBundle bundle = loadBundle(id);\n        time = System.nanoTime() - time;\n        cacheMissDuration.addAndGet(time);\n        final long timeMs = time / 1000000;"
            },
            {
              "step": 29,
              "variableName": "NodeId id",
              "startLine": 885,
              "startColumn": 41,
              "endLine": 885,
              "endColumn": 50,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/pool/BundleDbPersistenceManager.java",
              "type": "NodeId",
              "code": "     * {@inheritDoc}\n     */\n    @Override\n    protected NodePropBundle loadBundle(NodeId id) throws ItemStateException {\n        try {\n            ResultSet rs =\n                conHelper.exec(bundleSelectSQL, getKey(id), false, 0);"
            },
            {
              "step": 30,
              "variableName": "\"failed to read bundle: \" + id",
              "startLine": 903,
              "startColumn": 23,
              "endLine": 903,
              "endColumn": 53,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/pool/BundleDbPersistenceManager.java",
              "type": "",
              "code": "        } catch (SQLException e) {\n        \tString msg = \"failed to read bundle (stacktrace on DEBUG log level): \" + id + \": \" + e; \n            log.error(msg);\n            log.debug(\"failed to read bundle: \" + id, e);\n            throw new ItemStateException(msg, e);\n        }\n    }"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "lockToken",
              "startLine": 1279,
              "startColumn": 19,
              "endLine": 1279,
              "endColumn": 28,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "NodeId",
              "code": "         */\n        public InternalLockInfo(NodeId lockToken, boolean sessionScoped,\n                                boolean deep, String lockOwner, long timeoutHint) {\n            super(lockToken, sessionScoped, deep, lockOwner, timeoutHint);\n        }\n\n        /**"
            },
            {
              "step": 1,
              "variableName": "super(lockToken, sessionScoped, deep, lockOwner, timeoutHint);",
              "startLine": 1279,
              "startColumn": 13,
              "endLine": 1279,
              "endColumn": 75,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "         */\n        public InternalLockInfo(NodeId lockToken, boolean sessionScoped,\n                                boolean deep, String lockOwner, long timeoutHint) {\n            super(lockToken, sessionScoped, deep, lockOwner, timeoutHint);\n        }\n\n        /**"
            },
            {
              "step": 2,
              "variableName": "new InternalLockInfo(",
              "startLine": 340,
              "startColumn": 33,
              "endLine": 341,
              "endColumn": 83,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "\n        SessionImpl session = (SessionImpl) node.getSession();\n        String lockOwner = (ownerInfo != null) ? ownerInfo : session.getUserID();\n        InternalLockInfo info = new InternalLockInfo(\n                node.getNodeId(), isSessionScoped, isDeep, lockOwner, timeoutHint);\n\n        ClusterOperation operation = null;"
            },
            {
              "step": 3,
              "variableName": "info",
              "startLine": 370,
              "startColumn": 17,
              "endLine": 370,
              "endColumn": 21,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "            }\n            if (info.isDeep() && element.hasPath(path)\n                    && element.getChildrenCount() > 0) {\n                info.throwLockException(\"Some child node is locked\", session);\n            }\n\n            // create lock token"
            },
            {
              "step": 4,
              "variableName": "throwLockException",
              "startLine": 259,
              "startColumn": 17,
              "endLine": 259,
              "endColumn": 35,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockInfo.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "     * @throws LockException always thrown, unless another error occurs\n     * @throws RepositoryException if the path of this lock can not be resolved\n     */\n    public void throwLockException(String message, SessionImpl session)\n            throws LockException, RepositoryException {\n        String path;\n        try {"
            },
            {
              "step": 5,
              "variableName": "id",
              "startLine": 264,
              "startColumn": 59,
              "endLine": 264,
              "endColumn": 61,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockInfo.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "        String path;\n        try {\n            path = session.getJCRPath(\n                    session.getHierarchyManager().getPath(id));\n        } catch (RepositoryException ignored) {\n            path = null;\n        }"
            },
            {
              "step": 6,
              "variableName": "id",
              "startLine": 264,
              "startColumn": 59,
              "endLine": 264,
              "endColumn": 61,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockInfo.java",
              "type": "NodeId",
              "code": "        String path;\n        try {\n            path = session.getJCRPath(\n                    session.getHierarchyManager().getPath(id));\n        } catch (RepositoryException ignored) {\n            path = null;\n        }"
            },
            {
              "step": 7,
              "variableName": "ItemId id",
              "startLine": 252,
              "startColumn": 25,
              "endLine": 252,
              "endColumn": 34,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/CachingHierarchyManager.java",
              "type": "NodeId",
              "code": "     * Overridden method simply checks whether we have an item matching the id\n     * and returns its path, otherwise calls base implementation.\n     */\n    public Path getPath(ItemId id)\n            throws ItemNotFoundException, RepositoryException {\n\n        if (id.denotesNode()) {"
            },
            {
              "step": 8,
              "variableName": "id",
              "startLine": 267,
              "startColumn": 30,
              "endLine": 267,
              "endColumn": 32,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/CachingHierarchyManager.java",
              "type": "NodeId",
              "code": "                }\n            }\n        }\n        return super.getPath(id);\n    }\n\n    /**"
            },
            {
              "step": 9,
              "variableName": "ItemId id",
              "startLine": 392,
              "startColumn": 25,
              "endLine": 392,
              "endColumn": 34,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "    /**\n     * {@inheritDoc}\n     */\n    public Path getPath(ItemId id)\n            throws ItemNotFoundException, RepositoryException {\n        // shortcut\n        if (id.equals(rootNodeId)) {"
            },
            {
              "step": 10,
              "variableName": "id",
              "startLine": 402,
              "startColumn": 45,
              "endLine": 402,
              "endColumn": 47,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "        PathBuilder builder = new PathBuilder();\n\n        try {\n            buildPath(builder, getItemState(id), new CycleDetector());\n            return builder.getPath();\n        } catch (NoSuchItemStateException nsise) {\n            String msg = \"failed to build path of \" + id;"
            },
            {
              "step": 11,
              "variableName": "ItemId id",
              "startLine": 152,
              "startColumn": 38,
              "endLine": 152,
              "endColumn": 47,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "     * @throws ItemStateException       if an error occurs\n     * @see ZombieHierarchyManager#getItemState(ItemId)\n     */\n    protected ItemState getItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n        return provider.getItemState(id);\n    }"
            },
            {
              "step": 12,
              "variableName": "id",
              "startLine": 154,
              "startColumn": 38,
              "endLine": 154,
              "endColumn": 40,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "     */\n    protected ItemState getItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n        return provider.getItemState(id);\n    }\n\n    /**"
            },
            {
              "step": 13,
              "variableName": "ItemId id",
              "startLine": 132,
              "startColumn": 39,
              "endLine": 132,
              "endColumn": 48,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/observation/ChangeLogBasedHierarchyMgr.java",
              "type": "NodeId",
              "code": "         * <code>id</code>.\n         * @throws ItemStateException if any other error occurs.\n         */\n        public ItemState getItemState(ItemId id) throws NoSuchItemStateException, ItemStateException {\n            // check ChangeLog first\n            try {\n                ItemState state = changes.get(id);"
            },
            {
              "step": 14,
              "variableName": "id",
              "startLine": 142,
              "startColumn": 38,
              "endLine": 142,
              "endColumn": 40,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/observation/ChangeLogBasedHierarchyMgr.java",
              "type": "NodeId",
              "code": "            } catch (NoSuchItemStateException e) {\n                // item has been deleted, but we still return it by asking base\n            }\n            return base.getItemState(id);\n        }\n\n        /**"
            },
            {
              "step": 15,
              "variableName": "ItemId id",
              "startLine": 258,
              "startColumn": 35,
              "endLine": 258,
              "endColumn": 44,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "    /**\n     * {@inheritDoc}\n     */\n    public ItemState getItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n        // check the virtual root ids (needed for overlay)\n        for (VirtualItemStateProvider virtualProvider : virtualProviders) {"
            },
            {
              "step": 16,
              "variableName": "id",
              "startLine": 271,
              "startColumn": 43,
              "endLine": 271,
              "endColumn": 45,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "        ISMLocking.ReadLock readLock = acquireReadLock(id);\n        try {\n            // check internal first\n            return getNonVirtualItemState(id);\n        } catch (NoSuchItemStateException e) {\n            // Fall through to virtual state providers. We can afford the\n            // exception-for-control-flow performance hit here, as almost"
            },
            {
              "step": 17,
              "variableName": "ItemId id",
              "startLine": 1767,
              "startColumn": 46,
              "endLine": 1767,
              "endColumn": 55,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "     * Returns the item state for the given id without considering virtual\n     * item state providers.\n     */\n    private ItemState getNonVirtualItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n        // First check if the item state is already in the cache\n        ItemState state = cache.retrieve(id);"
            },
            {
              "step": 18,
              "variableName": "id",
              "startLine": 1798,
              "startColumn": 35,
              "endLine": 1798,
              "endColumn": 37,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "        try {\n            // Load the item state from persistent storage\n            // NOTE: This needs to happen outside a synchronized block!\n            state = loadItemState(id);\n            state.setStatus(ItemState.STATUS_EXISTING);\n            state.setContainer(this);\n"
            },
            {
              "step": 19,
              "variableName": "ItemId id",
              "startLine": 1873,
              "startColumn": 37,
              "endLine": 1873,
              "endColumn": 46,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "     * @param id item id\n     * @return item state\n     */\n    private ItemState loadItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n\n        ItemState state;"
            },
            {
              "step": 20,
              "variableName": "(NodeId) id",
              "startLine": 1878,
              "startColumn": 37,
              "endLine": 1878,
              "endColumn": 48,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "\n        ItemState state;\n        if (id.denotesNode()) {\n            state = persistMgr.load((NodeId) id);\n        } else {\n            state = persistMgr.load((PropertyId) id);\n        }"
            },
            {
              "step": 21,
              "variableName": "NodeId id",
              "startLine": 489,
              "startColumn": 27,
              "endLine": 489,
              "endColumn": 36,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/bundle/AbstractBundlePersistenceManager.java",
              "type": "NodeId",
              "code": "     *\n     * Loads the state via the appropriate NodePropBundle.\n     */\n    public NodeState load(NodeId id) throws NoSuchItemStateException, ItemStateException {\n        NodePropBundle bundle = getBundle(id);\n        if (bundle == null) {\n            throw new NoSuchItemStateException(id.toString());"
            },
            {
              "step": 22,
              "variableName": "id",
              "startLine": 490,
              "startColumn": 43,
              "endLine": 490,
              "endColumn": 45,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/bundle/AbstractBundlePersistenceManager.java",
              "type": "NodeId",
              "code": "     * Loads the state via the appropriate NodePropBundle.\n     */\n    public NodeState load(NodeId id) throws NoSuchItemStateException, ItemStateException {\n        NodePropBundle bundle = getBundle(id);\n        if (bundle == null) {\n            throw new NoSuchItemStateException(id.toString());\n        }"
            },
            {
              "step": 23,
              "variableName": "NodeId id",
              "startLine": 740,
              "startColumn": 38,
              "endLine": 740,
              "endColumn": 47,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/bundle/AbstractBundlePersistenceManager.java",
              "type": "NodeId",
              "code": "     *\n     * @throws ItemStateException if an error occurs.\n     */\n    private NodePropBundle getBundle(NodeId id) throws ItemStateException {\n        NodePropBundle bundle = bundles.get(id);\n        readCounter.incrementAndGet();\n        if (bundle == MISSING) {"
            },
            {
              "step": 24,
              "variableName": "id",
              "startLine": 750,
              "startColumn": 35,
              "endLine": 750,
              "endColumn": 37,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/bundle/AbstractBundlePersistenceManager.java",
              "type": "NodeId",
              "code": "            return bundle;\n        }\n        // cache miss\n        return getBundleCacheMiss(id);\n    }\n\n    /**"
            },
            {
              "step": 25,
              "variableName": "NodeId id",
              "startLine": 763,
              "startColumn": 47,
              "endLine": 763,
              "endColumn": 56,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/bundle/AbstractBundlePersistenceManager.java",
              "type": "NodeId",
              "code": "     * @return\n     * @throws ItemStateException\n     */\n    private NodePropBundle getBundleCacheMiss(NodeId id)\n            throws ItemStateException {\n        long time = System.nanoTime();\n        NodePropBundle bundle = loadBundle(id);"
            },
            {
              "step": 26,
              "variableName": "id",
              "startLine": 766,
              "startColumn": 44,
              "endLine": 766,
              "endColumn": 46,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/bundle/AbstractBundlePersistenceManager.java",
              "type": "NodeId",
              "code": "    private NodePropBundle getBundleCacheMiss(NodeId id)\n            throws ItemStateException {\n        long time = System.nanoTime();\n        NodePropBundle bundle = loadBundle(id);\n        time = System.nanoTime() - time;\n        cacheMissDuration.addAndGet(time);\n        final long timeMs = time / 1000000;"
            },
            {
              "step": 27,
              "variableName": "NodeId id",
              "startLine": 885,
              "startColumn": 41,
              "endLine": 885,
              "endColumn": 50,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/pool/BundleDbPersistenceManager.java",
              "type": "NodeId",
              "code": "     * {@inheritDoc}\n     */\n    @Override\n    protected NodePropBundle loadBundle(NodeId id) throws ItemStateException {\n        try {\n            ResultSet rs =\n                conHelper.exec(bundleSelectSQL, getKey(id), false, 0);"
            },
            {
              "step": 28,
              "variableName": "\"failed to read bundle: \" + id",
              "startLine": 903,
              "startColumn": 23,
              "endLine": 903,
              "endColumn": 53,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/pool/BundleDbPersistenceManager.java",
              "type": "",
              "code": "        } catch (SQLException e) {\n        \tString msg = \"failed to read bundle (stacktrace on DEBUG log level): \" + id + \": \" + e; \n            log.error(msg);\n            log.debug(\"failed to read bundle: \" + id, e);\n            throw new ItemStateException(msg, e);\n        }\n    }"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 21,
      "fileName": "XMLPersistenceManager.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "lockToken",
              "startLine": 1279,
              "startColumn": 19,
              "endLine": 1279,
              "endColumn": 28,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "NodeId",
              "code": "         */\n        public InternalLockInfo(NodeId lockToken, boolean sessionScoped,\n                                boolean deep, String lockOwner, long timeoutHint) {\n            super(lockToken, sessionScoped, deep, lockOwner, timeoutHint);\n        }\n\n        /**"
            },
            {
              "step": 1,
              "variableName": "super(lockToken, sessionScoped, deep, lockOwner, timeoutHint);",
              "startLine": 1279,
              "startColumn": 13,
              "endLine": 1279,
              "endColumn": 75,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "         */\n        public InternalLockInfo(NodeId lockToken, boolean sessionScoped,\n                                boolean deep, String lockOwner, long timeoutHint) {\n            super(lockToken, sessionScoped, deep, lockOwner, timeoutHint);\n        }\n\n        /**"
            },
            {
              "step": 2,
              "variableName": "new InternalLockInfo(",
              "startLine": 340,
              "startColumn": 33,
              "endLine": 341,
              "endColumn": 83,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "\n        SessionImpl session = (SessionImpl) node.getSession();\n        String lockOwner = (ownerInfo != null) ? ownerInfo : session.getUserID();\n        InternalLockInfo info = new InternalLockInfo(\n                node.getNodeId(), isSessionScoped, isDeep, lockOwner, timeoutHint);\n\n        ClusterOperation operation = null;"
            },
            {
              "step": 3,
              "variableName": "info",
              "startLine": 370,
              "startColumn": 17,
              "endLine": 370,
              "endColumn": 21,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "            }\n            if (info.isDeep() && element.hasPath(path)\n                    && element.getChildrenCount() > 0) {\n                info.throwLockException(\"Some child node is locked\", session);\n            }\n\n            // create lock token"
            },
            {
              "step": 4,
              "variableName": "throwLockException",
              "startLine": 259,
              "startColumn": 17,
              "endLine": 259,
              "endColumn": 35,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockInfo.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "     * @throws LockException always thrown, unless another error occurs\n     * @throws RepositoryException if the path of this lock can not be resolved\n     */\n    public void throwLockException(String message, SessionImpl session)\n            throws LockException, RepositoryException {\n        String path;\n        try {"
            },
            {
              "step": 5,
              "variableName": "id",
              "startLine": 264,
              "startColumn": 59,
              "endLine": 264,
              "endColumn": 61,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockInfo.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "        String path;\n        try {\n            path = session.getJCRPath(\n                    session.getHierarchyManager().getPath(id));\n        } catch (RepositoryException ignored) {\n            path = null;\n        }"
            },
            {
              "step": 6,
              "variableName": "id",
              "startLine": 264,
              "startColumn": 59,
              "endLine": 264,
              "endColumn": 61,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockInfo.java",
              "type": "NodeId",
              "code": "        String path;\n        try {\n            path = session.getJCRPath(\n                    session.getHierarchyManager().getPath(id));\n        } catch (RepositoryException ignored) {\n            path = null;\n        }"
            },
            {
              "step": 7,
              "variableName": "ItemId id",
              "startLine": 252,
              "startColumn": 25,
              "endLine": 252,
              "endColumn": 34,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/CachingHierarchyManager.java",
              "type": "NodeId",
              "code": "     * Overridden method simply checks whether we have an item matching the id\n     * and returns its path, otherwise calls base implementation.\n     */\n    public Path getPath(ItemId id)\n            throws ItemNotFoundException, RepositoryException {\n\n        if (id.denotesNode()) {"
            },
            {
              "step": 8,
              "variableName": "id",
              "startLine": 267,
              "startColumn": 30,
              "endLine": 267,
              "endColumn": 32,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/CachingHierarchyManager.java",
              "type": "NodeId",
              "code": "                }\n            }\n        }\n        return super.getPath(id);\n    }\n\n    /**"
            },
            {
              "step": 9,
              "variableName": "ItemId id",
              "startLine": 392,
              "startColumn": 25,
              "endLine": 392,
              "endColumn": 34,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "    /**\n     * {@inheritDoc}\n     */\n    public Path getPath(ItemId id)\n            throws ItemNotFoundException, RepositoryException {\n        // shortcut\n        if (id.equals(rootNodeId)) {"
            },
            {
              "step": 10,
              "variableName": "id",
              "startLine": 402,
              "startColumn": 45,
              "endLine": 402,
              "endColumn": 47,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "        PathBuilder builder = new PathBuilder();\n\n        try {\n            buildPath(builder, getItemState(id), new CycleDetector());\n            return builder.getPath();\n        } catch (NoSuchItemStateException nsise) {\n            String msg = \"failed to build path of \" + id;"
            },
            {
              "step": 11,
              "variableName": "ItemId id",
              "startLine": 152,
              "startColumn": 38,
              "endLine": 152,
              "endColumn": 47,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "     * @throws ItemStateException       if an error occurs\n     * @see ZombieHierarchyManager#getItemState(ItemId)\n     */\n    protected ItemState getItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n        return provider.getItemState(id);\n    }"
            },
            {
              "step": 12,
              "variableName": "id",
              "startLine": 154,
              "startColumn": 38,
              "endLine": 154,
              "endColumn": 40,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "     */\n    protected ItemState getItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n        return provider.getItemState(id);\n    }\n\n    /**"
            },
            {
              "step": 13,
              "variableName": "ItemId id",
              "startLine": 258,
              "startColumn": 35,
              "endLine": 258,
              "endColumn": 44,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "    /**\n     * {@inheritDoc}\n     */\n    public ItemState getItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n        // check the virtual root ids (needed for overlay)\n        for (VirtualItemStateProvider virtualProvider : virtualProviders) {"
            },
            {
              "step": 14,
              "variableName": "id",
              "startLine": 271,
              "startColumn": 43,
              "endLine": 271,
              "endColumn": 45,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "        ISMLocking.ReadLock readLock = acquireReadLock(id);\n        try {\n            // check internal first\n            return getNonVirtualItemState(id);\n        } catch (NoSuchItemStateException e) {\n            // Fall through to virtual state providers. We can afford the\n            // exception-for-control-flow performance hit here, as almost"
            },
            {
              "step": 15,
              "variableName": "ItemId id",
              "startLine": 1767,
              "startColumn": 46,
              "endLine": 1767,
              "endColumn": 55,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "     * Returns the item state for the given id without considering virtual\n     * item state providers.\n     */\n    private ItemState getNonVirtualItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n        // First check if the item state is already in the cache\n        ItemState state = cache.retrieve(id);"
            },
            {
              "step": 16,
              "variableName": "id",
              "startLine": 1798,
              "startColumn": 35,
              "endLine": 1798,
              "endColumn": 37,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "        try {\n            // Load the item state from persistent storage\n            // NOTE: This needs to happen outside a synchronized block!\n            state = loadItemState(id);\n            state.setStatus(ItemState.STATUS_EXISTING);\n            state.setContainer(this);\n"
            },
            {
              "step": 17,
              "variableName": "ItemId id",
              "startLine": 1873,
              "startColumn": 37,
              "endLine": 1873,
              "endColumn": 46,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "     * @param id item id\n     * @return item state\n     */\n    private ItemState loadItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n\n        ItemState state;"
            },
            {
              "step": 18,
              "variableName": "(NodeId) id",
              "startLine": 1878,
              "startColumn": 37,
              "endLine": 1878,
              "endColumn": 48,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "\n        ItemState state;\n        if (id.denotesNode()) {\n            state = persistMgr.load((NodeId) id);\n        } else {\n            state = persistMgr.load((PropertyId) id);\n        }"
            },
            {
              "step": 19,
              "variableName": "NodeId id",
              "startLine": 456,
              "startColumn": 40,
              "endLine": 456,
              "endColumn": 49,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/xml/XMLPersistenceManager.java",
              "type": "NodeId",
              "code": "    /**\n     * {@inheritDoc}\n     */\n    public synchronized NodeState load(NodeId id)\n            throws NoSuchItemStateException, ItemStateException {\n\n        if (!initialized) {"
            },
            {
              "step": 20,
              "variableName": "msg",
              "startLine": 491,
              "startColumn": 19,
              "endLine": 491,
              "endColumn": 22,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/xml/XMLPersistenceManager.java",
              "type": "",
              "code": "            // fall through\n        }\n        String msg = \"failed to read node state: \" + id;\n        log.debug(msg);\n        throw new ItemStateException(msg, e);\n    }\n"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "lockToken",
              "startLine": 1279,
              "startColumn": 19,
              "endLine": 1279,
              "endColumn": 28,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "NodeId",
              "code": "         */\n        public InternalLockInfo(NodeId lockToken, boolean sessionScoped,\n                                boolean deep, String lockOwner, long timeoutHint) {\n            super(lockToken, sessionScoped, deep, lockOwner, timeoutHint);\n        }\n\n        /**"
            },
            {
              "step": 1,
              "variableName": "super(lockToken, sessionScoped, deep, lockOwner, timeoutHint);",
              "startLine": 1279,
              "startColumn": 13,
              "endLine": 1279,
              "endColumn": 75,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "         */\n        public InternalLockInfo(NodeId lockToken, boolean sessionScoped,\n                                boolean deep, String lockOwner, long timeoutHint) {\n            super(lockToken, sessionScoped, deep, lockOwner, timeoutHint);\n        }\n\n        /**"
            },
            {
              "step": 2,
              "variableName": "new InternalLockInfo(",
              "startLine": 340,
              "startColumn": 33,
              "endLine": 341,
              "endColumn": 83,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "\n        SessionImpl session = (SessionImpl) node.getSession();\n        String lockOwner = (ownerInfo != null) ? ownerInfo : session.getUserID();\n        InternalLockInfo info = new InternalLockInfo(\n                node.getNodeId(), isSessionScoped, isDeep, lockOwner, timeoutHint);\n\n        ClusterOperation operation = null;"
            },
            {
              "step": 3,
              "variableName": "info",
              "startLine": 370,
              "startColumn": 17,
              "endLine": 370,
              "endColumn": 21,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "            }\n            if (info.isDeep() && element.hasPath(path)\n                    && element.getChildrenCount() > 0) {\n                info.throwLockException(\"Some child node is locked\", session);\n            }\n\n            // create lock token"
            },
            {
              "step": 4,
              "variableName": "throwLockException",
              "startLine": 259,
              "startColumn": 17,
              "endLine": 259,
              "endColumn": 35,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockInfo.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "     * @throws LockException always thrown, unless another error occurs\n     * @throws RepositoryException if the path of this lock can not be resolved\n     */\n    public void throwLockException(String message, SessionImpl session)\n            throws LockException, RepositoryException {\n        String path;\n        try {"
            },
            {
              "step": 5,
              "variableName": "id",
              "startLine": 264,
              "startColumn": 59,
              "endLine": 264,
              "endColumn": 61,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockInfo.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "        String path;\n        try {\n            path = session.getJCRPath(\n                    session.getHierarchyManager().getPath(id));\n        } catch (RepositoryException ignored) {\n            path = null;\n        }"
            },
            {
              "step": 6,
              "variableName": "id",
              "startLine": 264,
              "startColumn": 59,
              "endLine": 264,
              "endColumn": 61,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockInfo.java",
              "type": "NodeId",
              "code": "        String path;\n        try {\n            path = session.getJCRPath(\n                    session.getHierarchyManager().getPath(id));\n        } catch (RepositoryException ignored) {\n            path = null;\n        }"
            },
            {
              "step": 7,
              "variableName": "ItemId id",
              "startLine": 252,
              "startColumn": 25,
              "endLine": 252,
              "endColumn": 34,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/CachingHierarchyManager.java",
              "type": "NodeId",
              "code": "     * Overridden method simply checks whether we have an item matching the id\n     * and returns its path, otherwise calls base implementation.\n     */\n    public Path getPath(ItemId id)\n            throws ItemNotFoundException, RepositoryException {\n\n        if (id.denotesNode()) {"
            },
            {
              "step": 8,
              "variableName": "id",
              "startLine": 267,
              "startColumn": 30,
              "endLine": 267,
              "endColumn": 32,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/CachingHierarchyManager.java",
              "type": "NodeId",
              "code": "                }\n            }\n        }\n        return super.getPath(id);\n    }\n\n    /**"
            },
            {
              "step": 9,
              "variableName": "ItemId id",
              "startLine": 392,
              "startColumn": 25,
              "endLine": 392,
              "endColumn": 34,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "    /**\n     * {@inheritDoc}\n     */\n    public Path getPath(ItemId id)\n            throws ItemNotFoundException, RepositoryException {\n        // shortcut\n        if (id.equals(rootNodeId)) {"
            },
            {
              "step": 10,
              "variableName": "id",
              "startLine": 402,
              "startColumn": 45,
              "endLine": 402,
              "endColumn": 47,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "        PathBuilder builder = new PathBuilder();\n\n        try {\n            buildPath(builder, getItemState(id), new CycleDetector());\n            return builder.getPath();\n        } catch (NoSuchItemStateException nsise) {\n            String msg = \"failed to build path of \" + id;"
            },
            {
              "step": 11,
              "variableName": "ItemId id",
              "startLine": 152,
              "startColumn": 38,
              "endLine": 152,
              "endColumn": 47,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "     * @throws ItemStateException       if an error occurs\n     * @see ZombieHierarchyManager#getItemState(ItemId)\n     */\n    protected ItemState getItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n        return provider.getItemState(id);\n    }"
            },
            {
              "step": 12,
              "variableName": "id",
              "startLine": 154,
              "startColumn": 38,
              "endLine": 154,
              "endColumn": 40,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "     */\n    protected ItemState getItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n        return provider.getItemState(id);\n    }\n\n    /**"
            },
            {
              "step": 13,
              "variableName": "ItemId id",
              "startLine": 160,
              "startColumn": 35,
              "endLine": 160,
              "endColumn": 44,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/LocalItemStateManager.java",
              "type": "NodeId",
              "code": "    /**\n     * {@inheritDoc}\n     */\n    public ItemState getItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n\n        // check change log"
            },
            {
              "step": 14,
              "variableName": "(NodeId) id",
              "startLine": 175,
              "startColumn": 42,
              "endLine": 175,
              "endColumn": 53,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/LocalItemStateManager.java",
              "type": "NodeId",
              "code": "            if (state == null) {\n                // regular behaviour\n                if (id.denotesNode()) {\n                    state = getNodeState((NodeId) id);\n                } else {\n                    state = getPropertyState((PropertyId) id);\n                }"
            },
            {
              "step": 15,
              "variableName": "NodeId id",
              "startLine": 106,
              "startColumn": 38,
              "endLine": 106,
              "endColumn": 47,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/LocalItemStateManager.java",
              "type": "NodeId",
              "code": "     * @throws NoSuchItemStateException\n     * @throws ItemStateException\n     */\n    protected NodeState getNodeState(NodeId id)\n            throws NoSuchItemStateException, ItemStateException {\n\n        // load from parent manager and wrap"
            },
            {
              "step": 16,
              "variableName": "id",
              "startLine": 110,
              "startColumn": 67,
              "endLine": 110,
              "endColumn": 69,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/LocalItemStateManager.java",
              "type": "NodeId",
              "code": "            throws NoSuchItemStateException, ItemStateException {\n\n        // load from parent manager and wrap\n        NodeState state = (NodeState) sharedStateMgr.getItemState(id);\n        state = new NodeState(state, state.getStatus(), false);\n\n        // put it in cache"
            },
            {
              "step": 17,
              "variableName": "ItemId id",
              "startLine": 258,
              "startColumn": 35,
              "endLine": 258,
              "endColumn": 44,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "    /**\n     * {@inheritDoc}\n     */\n    public ItemState getItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n        // check the virtual root ids (needed for overlay)\n        for (VirtualItemStateProvider virtualProvider : virtualProviders) {"
            },
            {
              "step": 18,
              "variableName": "id",
              "startLine": 271,
              "startColumn": 43,
              "endLine": 271,
              "endColumn": 45,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "        ISMLocking.ReadLock readLock = acquireReadLock(id);\n        try {\n            // check internal first\n            return getNonVirtualItemState(id);\n        } catch (NoSuchItemStateException e) {\n            // Fall through to virtual state providers. We can afford the\n            // exception-for-control-flow performance hit here, as almost"
            },
            {
              "step": 19,
              "variableName": "ItemId id",
              "startLine": 1767,
              "startColumn": 46,
              "endLine": 1767,
              "endColumn": 55,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "     * Returns the item state for the given id without considering virtual\n     * item state providers.\n     */\n    private ItemState getNonVirtualItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n        // First check if the item state is already in the cache\n        ItemState state = cache.retrieve(id);"
            },
            {
              "step": 20,
              "variableName": "id",
              "startLine": 1798,
              "startColumn": 35,
              "endLine": 1798,
              "endColumn": 37,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "        try {\n            // Load the item state from persistent storage\n            // NOTE: This needs to happen outside a synchronized block!\n            state = loadItemState(id);\n            state.setStatus(ItemState.STATUS_EXISTING);\n            state.setContainer(this);\n"
            },
            {
              "step": 21,
              "variableName": "ItemId id",
              "startLine": 1873,
              "startColumn": 37,
              "endLine": 1873,
              "endColumn": 46,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "     * @param id item id\n     * @return item state\n     */\n    private ItemState loadItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n\n        ItemState state;"
            },
            {
              "step": 22,
              "variableName": "(NodeId) id",
              "startLine": 1878,
              "startColumn": 37,
              "endLine": 1878,
              "endColumn": 48,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "\n        ItemState state;\n        if (id.denotesNode()) {\n            state = persistMgr.load((NodeId) id);\n        } else {\n            state = persistMgr.load((PropertyId) id);\n        }"
            },
            {
              "step": 23,
              "variableName": "NodeId id",
              "startLine": 456,
              "startColumn": 40,
              "endLine": 456,
              "endColumn": 49,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/xml/XMLPersistenceManager.java",
              "type": "NodeId",
              "code": "    /**\n     * {@inheritDoc}\n     */\n    public synchronized NodeState load(NodeId id)\n            throws NoSuchItemStateException, ItemStateException {\n\n        if (!initialized) {"
            },
            {
              "step": 24,
              "variableName": "msg",
              "startLine": 491,
              "startColumn": 19,
              "endLine": 491,
              "endColumn": 22,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/xml/XMLPersistenceManager.java",
              "type": "",
              "code": "            // fall through\n        }\n        String msg = \"failed to read node state: \" + id;\n        log.debug(msg);\n        throw new ItemStateException(msg, e);\n    }\n"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "lockToken",
              "startLine": 1279,
              "startColumn": 19,
              "endLine": 1279,
              "endColumn": 28,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "NodeId",
              "code": "         */\n        public InternalLockInfo(NodeId lockToken, boolean sessionScoped,\n                                boolean deep, String lockOwner, long timeoutHint) {\n            super(lockToken, sessionScoped, deep, lockOwner, timeoutHint);\n        }\n\n        /**"
            },
            {
              "step": 1,
              "variableName": "super(lockToken, sessionScoped, deep, lockOwner, timeoutHint);",
              "startLine": 1279,
              "startColumn": 13,
              "endLine": 1279,
              "endColumn": 75,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "         */\n        public InternalLockInfo(NodeId lockToken, boolean sessionScoped,\n                                boolean deep, String lockOwner, long timeoutHint) {\n            super(lockToken, sessionScoped, deep, lockOwner, timeoutHint);\n        }\n\n        /**"
            },
            {
              "step": 2,
              "variableName": "new InternalLockInfo(",
              "startLine": 340,
              "startColumn": 33,
              "endLine": 341,
              "endColumn": 83,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "\n        SessionImpl session = (SessionImpl) node.getSession();\n        String lockOwner = (ownerInfo != null) ? ownerInfo : session.getUserID();\n        InternalLockInfo info = new InternalLockInfo(\n                node.getNodeId(), isSessionScoped, isDeep, lockOwner, timeoutHint);\n\n        ClusterOperation operation = null;"
            },
            {
              "step": 3,
              "variableName": "info",
              "startLine": 370,
              "startColumn": 17,
              "endLine": 370,
              "endColumn": 21,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "            }\n            if (info.isDeep() && element.hasPath(path)\n                    && element.getChildrenCount() > 0) {\n                info.throwLockException(\"Some child node is locked\", session);\n            }\n\n            // create lock token"
            },
            {
              "step": 4,
              "variableName": "throwLockException",
              "startLine": 259,
              "startColumn": 17,
              "endLine": 259,
              "endColumn": 35,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockInfo.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "     * @throws LockException always thrown, unless another error occurs\n     * @throws RepositoryException if the path of this lock can not be resolved\n     */\n    public void throwLockException(String message, SessionImpl session)\n            throws LockException, RepositoryException {\n        String path;\n        try {"
            },
            {
              "step": 5,
              "variableName": "id",
              "startLine": 264,
              "startColumn": 59,
              "endLine": 264,
              "endColumn": 61,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockInfo.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "        String path;\n        try {\n            path = session.getJCRPath(\n                    session.getHierarchyManager().getPath(id));\n        } catch (RepositoryException ignored) {\n            path = null;\n        }"
            },
            {
              "step": 6,
              "variableName": "id",
              "startLine": 264,
              "startColumn": 59,
              "endLine": 264,
              "endColumn": 61,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockInfo.java",
              "type": "NodeId",
              "code": "        String path;\n        try {\n            path = session.getJCRPath(\n                    session.getHierarchyManager().getPath(id));\n        } catch (RepositoryException ignored) {\n            path = null;\n        }"
            },
            {
              "step": 7,
              "variableName": "ItemId id",
              "startLine": 252,
              "startColumn": 25,
              "endLine": 252,
              "endColumn": 34,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/CachingHierarchyManager.java",
              "type": "NodeId",
              "code": "     * Overridden method simply checks whether we have an item matching the id\n     * and returns its path, otherwise calls base implementation.\n     */\n    public Path getPath(ItemId id)\n            throws ItemNotFoundException, RepositoryException {\n\n        if (id.denotesNode()) {"
            },
            {
              "step": 8,
              "variableName": "id",
              "startLine": 267,
              "startColumn": 30,
              "endLine": 267,
              "endColumn": 32,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/CachingHierarchyManager.java",
              "type": "NodeId",
              "code": "                }\n            }\n        }\n        return super.getPath(id);\n    }\n\n    /**"
            },
            {
              "step": 9,
              "variableName": "ItemId id",
              "startLine": 392,
              "startColumn": 25,
              "endLine": 392,
              "endColumn": 34,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "    /**\n     * {@inheritDoc}\n     */\n    public Path getPath(ItemId id)\n            throws ItemNotFoundException, RepositoryException {\n        // shortcut\n        if (id.equals(rootNodeId)) {"
            },
            {
              "step": 10,
              "variableName": "id",
              "startLine": 402,
              "startColumn": 45,
              "endLine": 402,
              "endColumn": 47,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "        PathBuilder builder = new PathBuilder();\n\n        try {\n            buildPath(builder, getItemState(id), new CycleDetector());\n            return builder.getPath();\n        } catch (NoSuchItemStateException nsise) {\n            String msg = \"failed to build path of \" + id;"
            },
            {
              "step": 11,
              "variableName": "ItemId id",
              "startLine": 152,
              "startColumn": 38,
              "endLine": 152,
              "endColumn": 47,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "     * @throws ItemStateException       if an error occurs\n     * @see ZombieHierarchyManager#getItemState(ItemId)\n     */\n    protected ItemState getItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n        return provider.getItemState(id);\n    }"
            },
            {
              "step": 12,
              "variableName": "id",
              "startLine": 154,
              "startColumn": 38,
              "endLine": 154,
              "endColumn": 40,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "     */\n    protected ItemState getItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n        return provider.getItemState(id);\n    }\n\n    /**"
            },
            {
              "step": 13,
              "variableName": "ItemId id",
              "startLine": 132,
              "startColumn": 39,
              "endLine": 132,
              "endColumn": 48,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/observation/ChangeLogBasedHierarchyMgr.java",
              "type": "NodeId",
              "code": "         * <code>id</code>.\n         * @throws ItemStateException if any other error occurs.\n         */\n        public ItemState getItemState(ItemId id) throws NoSuchItemStateException, ItemStateException {\n            // check ChangeLog first\n            try {\n                ItemState state = changes.get(id);"
            },
            {
              "step": 14,
              "variableName": "id",
              "startLine": 142,
              "startColumn": 38,
              "endLine": 142,
              "endColumn": 40,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/observation/ChangeLogBasedHierarchyMgr.java",
              "type": "NodeId",
              "code": "            } catch (NoSuchItemStateException e) {\n                // item has been deleted, but we still return it by asking base\n            }\n            return base.getItemState(id);\n        }\n\n        /**"
            },
            {
              "step": 15,
              "variableName": "ItemId id",
              "startLine": 258,
              "startColumn": 35,
              "endLine": 258,
              "endColumn": 44,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "    /**\n     * {@inheritDoc}\n     */\n    public ItemState getItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n        // check the virtual root ids (needed for overlay)\n        for (VirtualItemStateProvider virtualProvider : virtualProviders) {"
            },
            {
              "step": 16,
              "variableName": "id",
              "startLine": 271,
              "startColumn": 43,
              "endLine": 271,
              "endColumn": 45,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "        ISMLocking.ReadLock readLock = acquireReadLock(id);\n        try {\n            // check internal first\n            return getNonVirtualItemState(id);\n        } catch (NoSuchItemStateException e) {\n            // Fall through to virtual state providers. We can afford the\n            // exception-for-control-flow performance hit here, as almost"
            },
            {
              "step": 17,
              "variableName": "ItemId id",
              "startLine": 1767,
              "startColumn": 46,
              "endLine": 1767,
              "endColumn": 55,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "     * Returns the item state for the given id without considering virtual\n     * item state providers.\n     */\n    private ItemState getNonVirtualItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n        // First check if the item state is already in the cache\n        ItemState state = cache.retrieve(id);"
            },
            {
              "step": 18,
              "variableName": "id",
              "startLine": 1798,
              "startColumn": 35,
              "endLine": 1798,
              "endColumn": 37,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "        try {\n            // Load the item state from persistent storage\n            // NOTE: This needs to happen outside a synchronized block!\n            state = loadItemState(id);\n            state.setStatus(ItemState.STATUS_EXISTING);\n            state.setContainer(this);\n"
            },
            {
              "step": 19,
              "variableName": "ItemId id",
              "startLine": 1873,
              "startColumn": 37,
              "endLine": 1873,
              "endColumn": 46,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "     * @param id item id\n     * @return item state\n     */\n    private ItemState loadItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n\n        ItemState state;"
            },
            {
              "step": 20,
              "variableName": "(NodeId) id",
              "startLine": 1878,
              "startColumn": 37,
              "endLine": 1878,
              "endColumn": 48,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "\n        ItemState state;\n        if (id.denotesNode()) {\n            state = persistMgr.load((NodeId) id);\n        } else {\n            state = persistMgr.load((PropertyId) id);\n        }"
            },
            {
              "step": 21,
              "variableName": "NodeId id",
              "startLine": 456,
              "startColumn": 40,
              "endLine": 456,
              "endColumn": 49,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/xml/XMLPersistenceManager.java",
              "type": "NodeId",
              "code": "    /**\n     * {@inheritDoc}\n     */\n    public synchronized NodeState load(NodeId id)\n            throws NoSuchItemStateException, ItemStateException {\n\n        if (!initialized) {"
            },
            {
              "step": 22,
              "variableName": "msg",
              "startLine": 491,
              "startColumn": 19,
              "endLine": 491,
              "endColumn": 22,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/xml/XMLPersistenceManager.java",
              "type": "",
              "code": "            // fall through\n        }\n        String msg = \"failed to read node state: \" + id;\n        log.debug(msg);\n        throw new ItemStateException(msg, e);\n    }\n"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "lockToken",
              "startLine": 1279,
              "startColumn": 19,
              "endLine": 1279,
              "endColumn": 28,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "NodeId",
              "code": "         */\n        public InternalLockInfo(NodeId lockToken, boolean sessionScoped,\n                                boolean deep, String lockOwner, long timeoutHint) {\n            super(lockToken, sessionScoped, deep, lockOwner, timeoutHint);\n        }\n\n        /**"
            },
            {
              "step": 1,
              "variableName": "super(lockToken, sessionScoped, deep, lockOwner, timeoutHint);",
              "startLine": 1279,
              "startColumn": 13,
              "endLine": 1279,
              "endColumn": 75,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "         */\n        public InternalLockInfo(NodeId lockToken, boolean sessionScoped,\n                                boolean deep, String lockOwner, long timeoutHint) {\n            super(lockToken, sessionScoped, deep, lockOwner, timeoutHint);\n        }\n\n        /**"
            },
            {
              "step": 2,
              "variableName": "new InternalLockInfo(",
              "startLine": 340,
              "startColumn": 33,
              "endLine": 341,
              "endColumn": 83,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "\n        SessionImpl session = (SessionImpl) node.getSession();\n        String lockOwner = (ownerInfo != null) ? ownerInfo : session.getUserID();\n        InternalLockInfo info = new InternalLockInfo(\n                node.getNodeId(), isSessionScoped, isDeep, lockOwner, timeoutHint);\n\n        ClusterOperation operation = null;"
            },
            {
              "step": 3,
              "variableName": "info",
              "startLine": 370,
              "startColumn": 17,
              "endLine": 370,
              "endColumn": 21,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "            }\n            if (info.isDeep() && element.hasPath(path)\n                    && element.getChildrenCount() > 0) {\n                info.throwLockException(\"Some child node is locked\", session);\n            }\n\n            // create lock token"
            },
            {
              "step": 4,
              "variableName": "throwLockException",
              "startLine": 259,
              "startColumn": 17,
              "endLine": 259,
              "endColumn": 35,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockInfo.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "     * @throws LockException always thrown, unless another error occurs\n     * @throws RepositoryException if the path of this lock can not be resolved\n     */\n    public void throwLockException(String message, SessionImpl session)\n            throws LockException, RepositoryException {\n        String path;\n        try {"
            },
            {
              "step": 5,
              "variableName": "id",
              "startLine": 264,
              "startColumn": 59,
              "endLine": 264,
              "endColumn": 61,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockInfo.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "        String path;\n        try {\n            path = session.getJCRPath(\n                    session.getHierarchyManager().getPath(id));\n        } catch (RepositoryException ignored) {\n            path = null;\n        }"
            },
            {
              "step": 6,
              "variableName": "id",
              "startLine": 264,
              "startColumn": 59,
              "endLine": 264,
              "endColumn": 61,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockInfo.java",
              "type": "NodeId",
              "code": "        String path;\n        try {\n            path = session.getJCRPath(\n                    session.getHierarchyManager().getPath(id));\n        } catch (RepositoryException ignored) {\n            path = null;\n        }"
            },
            {
              "step": 7,
              "variableName": "ItemId id",
              "startLine": 252,
              "startColumn": 25,
              "endLine": 252,
              "endColumn": 34,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/CachingHierarchyManager.java",
              "type": "NodeId",
              "code": "     * Overridden method simply checks whether we have an item matching the id\n     * and returns its path, otherwise calls base implementation.\n     */\n    public Path getPath(ItemId id)\n            throws ItemNotFoundException, RepositoryException {\n\n        if (id.denotesNode()) {"
            },
            {
              "step": 8,
              "variableName": "id",
              "startLine": 267,
              "startColumn": 30,
              "endLine": 267,
              "endColumn": 32,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/CachingHierarchyManager.java",
              "type": "NodeId",
              "code": "                }\n            }\n        }\n        return super.getPath(id);\n    }\n\n    /**"
            },
            {
              "step": 9,
              "variableName": "ItemId id",
              "startLine": 392,
              "startColumn": 25,
              "endLine": 392,
              "endColumn": 34,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "    /**\n     * {@inheritDoc}\n     */\n    public Path getPath(ItemId id)\n            throws ItemNotFoundException, RepositoryException {\n        // shortcut\n        if (id.equals(rootNodeId)) {"
            },
            {
              "step": 10,
              "variableName": "id",
              "startLine": 402,
              "startColumn": 45,
              "endLine": 402,
              "endColumn": 47,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "        PathBuilder builder = new PathBuilder();\n\n        try {\n            buildPath(builder, getItemState(id), new CycleDetector());\n            return builder.getPath();\n        } catch (NoSuchItemStateException nsise) {\n            String msg = \"failed to build path of \" + id;"
            },
            {
              "step": 11,
              "variableName": "ItemId id",
              "startLine": 152,
              "startColumn": 38,
              "endLine": 152,
              "endColumn": 47,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "     * @throws ItemStateException       if an error occurs\n     * @see ZombieHierarchyManager#getItemState(ItemId)\n     */\n    protected ItemState getItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n        return provider.getItemState(id);\n    }"
            },
            {
              "step": 12,
              "variableName": "id",
              "startLine": 154,
              "startColumn": 38,
              "endLine": 154,
              "endColumn": 40,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "     */\n    protected ItemState getItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n        return provider.getItemState(id);\n    }\n\n    /**"
            },
            {
              "step": 13,
              "variableName": "ItemId id",
              "startLine": 120,
              "startColumn": 48,
              "endLine": 120,
              "endColumn": 57,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/VersionItemStateProvider.java",
              "type": "NodeId",
              "code": "    /**\n     * @inheritDoc\n     */\n    public synchronized ItemState getItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n        ItemState item = items.get(id);\n        if (item == null) {"
            },
            {
              "step": 14,
              "variableName": "id",
              "startLine": 124,
              "startColumn": 42,
              "endLine": 124,
              "endColumn": 44,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/VersionItemStateProvider.java",
              "type": "NodeId",
              "code": "            throws NoSuchItemStateException, ItemStateException {\n        ItemState item = items.get(id);\n        if (item == null) {\n            item = stateMgr.getItemState(id);\n            items.put(id, item);\n        }\n        return item;"
            },
            {
              "step": 15,
              "variableName": "ItemId id",
              "startLine": 258,
              "startColumn": 35,
              "endLine": 258,
              "endColumn": 44,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "    /**\n     * {@inheritDoc}\n     */\n    public ItemState getItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n        // check the virtual root ids (needed for overlay)\n        for (VirtualItemStateProvider virtualProvider : virtualProviders) {"
            },
            {
              "step": 16,
              "variableName": "id",
              "startLine": 271,
              "startColumn": 43,
              "endLine": 271,
              "endColumn": 45,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "        ISMLocking.ReadLock readLock = acquireReadLock(id);\n        try {\n            // check internal first\n            return getNonVirtualItemState(id);\n        } catch (NoSuchItemStateException e) {\n            // Fall through to virtual state providers. We can afford the\n            // exception-for-control-flow performance hit here, as almost"
            },
            {
              "step": 17,
              "variableName": "ItemId id",
              "startLine": 1767,
              "startColumn": 46,
              "endLine": 1767,
              "endColumn": 55,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "     * Returns the item state for the given id without considering virtual\n     * item state providers.\n     */\n    private ItemState getNonVirtualItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n        // First check if the item state is already in the cache\n        ItemState state = cache.retrieve(id);"
            },
            {
              "step": 18,
              "variableName": "id",
              "startLine": 1798,
              "startColumn": 35,
              "endLine": 1798,
              "endColumn": 37,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "        try {\n            // Load the item state from persistent storage\n            // NOTE: This needs to happen outside a synchronized block!\n            state = loadItemState(id);\n            state.setStatus(ItemState.STATUS_EXISTING);\n            state.setContainer(this);\n"
            },
            {
              "step": 19,
              "variableName": "ItemId id",
              "startLine": 1873,
              "startColumn": 37,
              "endLine": 1873,
              "endColumn": 46,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "     * @param id item id\n     * @return item state\n     */\n    private ItemState loadItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n\n        ItemState state;"
            },
            {
              "step": 20,
              "variableName": "(NodeId) id",
              "startLine": 1878,
              "startColumn": 37,
              "endLine": 1878,
              "endColumn": 48,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "\n        ItemState state;\n        if (id.denotesNode()) {\n            state = persistMgr.load((NodeId) id);\n        } else {\n            state = persistMgr.load((PropertyId) id);\n        }"
            },
            {
              "step": 21,
              "variableName": "NodeId id",
              "startLine": 456,
              "startColumn": 40,
              "endLine": 456,
              "endColumn": 49,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/xml/XMLPersistenceManager.java",
              "type": "NodeId",
              "code": "    /**\n     * {@inheritDoc}\n     */\n    public synchronized NodeState load(NodeId id)\n            throws NoSuchItemStateException, ItemStateException {\n\n        if (!initialized) {"
            },
            {
              "step": 22,
              "variableName": "msg",
              "startLine": 491,
              "startColumn": 19,
              "endLine": 491,
              "endColumn": 22,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/xml/XMLPersistenceManager.java",
              "type": "",
              "code": "            // fall through\n        }\n        String msg = \"failed to read node state: \" + id;\n        log.debug(msg);\n        throw new ItemStateException(msg, e);\n    }\n"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 22,
      "fileName": "XMLPersistenceManager.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "lockToken",
              "startLine": 1279,
              "startColumn": 19,
              "endLine": 1279,
              "endColumn": 28,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "NodeId",
              "code": "         */\n        public InternalLockInfo(NodeId lockToken, boolean sessionScoped,\n                                boolean deep, String lockOwner, long timeoutHint) {\n            super(lockToken, sessionScoped, deep, lockOwner, timeoutHint);\n        }\n\n        /**"
            },
            {
              "step": 1,
              "variableName": "super(lockToken, sessionScoped, deep, lockOwner, timeoutHint);",
              "startLine": 1279,
              "startColumn": 13,
              "endLine": 1279,
              "endColumn": 75,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "         */\n        public InternalLockInfo(NodeId lockToken, boolean sessionScoped,\n                                boolean deep, String lockOwner, long timeoutHint) {\n            super(lockToken, sessionScoped, deep, lockOwner, timeoutHint);\n        }\n\n        /**"
            },
            {
              "step": 2,
              "variableName": "new InternalLockInfo(",
              "startLine": 340,
              "startColumn": 33,
              "endLine": 341,
              "endColumn": 83,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "\n        SessionImpl session = (SessionImpl) node.getSession();\n        String lockOwner = (ownerInfo != null) ? ownerInfo : session.getUserID();\n        InternalLockInfo info = new InternalLockInfo(\n                node.getNodeId(), isSessionScoped, isDeep, lockOwner, timeoutHint);\n\n        ClusterOperation operation = null;"
            },
            {
              "step": 3,
              "variableName": "info",
              "startLine": 370,
              "startColumn": 17,
              "endLine": 370,
              "endColumn": 21,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "            }\n            if (info.isDeep() && element.hasPath(path)\n                    && element.getChildrenCount() > 0) {\n                info.throwLockException(\"Some child node is locked\", session);\n            }\n\n            // create lock token"
            },
            {
              "step": 4,
              "variableName": "throwLockException",
              "startLine": 259,
              "startColumn": 17,
              "endLine": 259,
              "endColumn": 35,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockInfo.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "     * @throws LockException always thrown, unless another error occurs\n     * @throws RepositoryException if the path of this lock can not be resolved\n     */\n    public void throwLockException(String message, SessionImpl session)\n            throws LockException, RepositoryException {\n        String path;\n        try {"
            },
            {
              "step": 5,
              "variableName": "id",
              "startLine": 264,
              "startColumn": 59,
              "endLine": 264,
              "endColumn": 61,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockInfo.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "        String path;\n        try {\n            path = session.getJCRPath(\n                    session.getHierarchyManager().getPath(id));\n        } catch (RepositoryException ignored) {\n            path = null;\n        }"
            },
            {
              "step": 6,
              "variableName": "id",
              "startLine": 264,
              "startColumn": 59,
              "endLine": 264,
              "endColumn": 61,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockInfo.java",
              "type": "NodeId",
              "code": "        String path;\n        try {\n            path = session.getJCRPath(\n                    session.getHierarchyManager().getPath(id));\n        } catch (RepositoryException ignored) {\n            path = null;\n        }"
            },
            {
              "step": 7,
              "variableName": "ItemId id",
              "startLine": 252,
              "startColumn": 25,
              "endLine": 252,
              "endColumn": 34,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/CachingHierarchyManager.java",
              "type": "NodeId",
              "code": "     * Overridden method simply checks whether we have an item matching the id\n     * and returns its path, otherwise calls base implementation.\n     */\n    public Path getPath(ItemId id)\n            throws ItemNotFoundException, RepositoryException {\n\n        if (id.denotesNode()) {"
            },
            {
              "step": 8,
              "variableName": "id",
              "startLine": 267,
              "startColumn": 30,
              "endLine": 267,
              "endColumn": 32,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/CachingHierarchyManager.java",
              "type": "NodeId",
              "code": "                }\n            }\n        }\n        return super.getPath(id);\n    }\n\n    /**"
            },
            {
              "step": 9,
              "variableName": "ItemId id",
              "startLine": 392,
              "startColumn": 25,
              "endLine": 392,
              "endColumn": 34,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "    /**\n     * {@inheritDoc}\n     */\n    public Path getPath(ItemId id)\n            throws ItemNotFoundException, RepositoryException {\n        // shortcut\n        if (id.equals(rootNodeId)) {"
            },
            {
              "step": 10,
              "variableName": "id",
              "startLine": 402,
              "startColumn": 45,
              "endLine": 402,
              "endColumn": 47,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "        PathBuilder builder = new PathBuilder();\n\n        try {\n            buildPath(builder, getItemState(id), new CycleDetector());\n            return builder.getPath();\n        } catch (NoSuchItemStateException nsise) {\n            String msg = \"failed to build path of \" + id;"
            },
            {
              "step": 11,
              "variableName": "ItemId id",
              "startLine": 152,
              "startColumn": 38,
              "endLine": 152,
              "endColumn": 47,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "     * @throws ItemStateException       if an error occurs\n     * @see ZombieHierarchyManager#getItemState(ItemId)\n     */\n    protected ItemState getItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n        return provider.getItemState(id);\n    }"
            },
            {
              "step": 12,
              "variableName": "id",
              "startLine": 154,
              "startColumn": 38,
              "endLine": 154,
              "endColumn": 40,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "     */\n    protected ItemState getItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n        return provider.getItemState(id);\n    }\n\n    /**"
            },
            {
              "step": 13,
              "variableName": "ItemId id",
              "startLine": 258,
              "startColumn": 35,
              "endLine": 258,
              "endColumn": 44,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "    /**\n     * {@inheritDoc}\n     */\n    public ItemState getItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n        // check the virtual root ids (needed for overlay)\n        for (VirtualItemStateProvider virtualProvider : virtualProviders) {"
            },
            {
              "step": 14,
              "variableName": "id",
              "startLine": 284,
              "startColumn": 46,
              "endLine": 284,
              "endColumn": 48,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "\n        // check if there is a virtual state for the specified item\n        for (VirtualItemStateProvider virtualProvider : virtualProviders) {\n            if (virtualProvider.hasItemState(id)) {\n                return virtualProvider.getItemState(id);\n            }\n        }"
            },
            {
              "step": 15,
              "variableName": "ItemId id",
              "startLine": 140,
              "startColumn": 33,
              "endLine": 140,
              "endColumn": 42,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/VersionItemStateProvider.java",
              "type": "NodeId",
              "code": "    /**\n     * @inheritDoc\n     */\n    public boolean hasItemState(ItemId id) {\n        return items.get(id) != null || stateMgr.hasItemState(id);\n    }\n"
            },
            {
              "step": 16,
              "variableName": "id",
              "startLine": 141,
              "startColumn": 63,
              "endLine": 141,
              "endColumn": 65,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/VersionItemStateProvider.java",
              "type": "NodeId",
              "code": "     * @inheritDoc\n     */\n    public boolean hasItemState(ItemId id) {\n        return items.get(id) != null || stateMgr.hasItemState(id);\n    }\n\n    /**"
            },
            {
              "step": 17,
              "variableName": "ItemId id",
              "startLine": 296,
              "startColumn": 33,
              "endLine": 296,
              "endColumn": 42,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "    /**\n     * {@inheritDoc}\n     */\n    public boolean hasItemState(ItemId id) {\n        // check the virtual root ids (needed for overlay)\n        for (VirtualItemStateProvider virtualProvider : virtualProviders) {\n            if (virtualProvider.isVirtualRoot(id)) {"
            },
            {
              "step": 18,
              "variableName": "id",
              "startLine": 317,
              "startColumn": 40,
              "endLine": 317,
              "endColumn": 42,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "            }\n\n            // check if this manager has the item state\n            if (hasNonVirtualItemState(id)) {\n                return true;\n            }\n        } finally {"
            },
            {
              "step": 19,
              "variableName": "ItemId id",
              "startLine": 1820,
              "startColumn": 46,
              "endLine": 1820,
              "endColumn": 55,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "     * Checks if this item state manager has the given item state without\n     * considering the virtual item state managers.\n     */\n    protected boolean hasNonVirtualItemState(ItemId id) {\n        if (cache.isCached(id)) {\n            return true;\n        }"
            },
            {
              "step": 20,
              "variableName": "(NodeId) id",
              "startLine": 1827,
              "startColumn": 42,
              "endLine": 1827,
              "endColumn": 53,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "\n        try {\n            if (id.denotesNode()) {\n                return persistMgr.exists((NodeId) id);\n            } else {\n                return persistMgr.exists((PropertyId) id);\n            }"
            },
            {
              "step": 21,
              "variableName": "NodeId id",
              "startLine": 850,
              "startColumn": 40,
              "endLine": 850,
              "endColumn": 49,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/xml/XMLPersistenceManager.java",
              "type": "NodeId",
              "code": "    /**\n     * {@inheritDoc}\n     */\n    public synchronized boolean exists(NodeId id) throws ItemStateException {\n        if (!initialized) {\n            throw new IllegalStateException(\"not initialized\");\n        }"
            },
            {
              "step": 22,
              "variableName": "msg",
              "startLine": 861,
              "startColumn": 23,
              "endLine": 861,
              "endColumn": 26,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/xml/XMLPersistenceManager.java",
              "type": "",
              "code": "            return nodeFile.exists();\n        } catch (FileSystemException fse) {\n            String msg = \"failed to check existence of item state: \" + id;\n            log.debug(msg);\n            throw new ItemStateException(msg, fse);\n        }\n    }"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "lockToken",
              "startLine": 1279,
              "startColumn": 19,
              "endLine": 1279,
              "endColumn": 28,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "NodeId",
              "code": "         */\n        public InternalLockInfo(NodeId lockToken, boolean sessionScoped,\n                                boolean deep, String lockOwner, long timeoutHint) {\n            super(lockToken, sessionScoped, deep, lockOwner, timeoutHint);\n        }\n\n        /**"
            },
            {
              "step": 1,
              "variableName": "super(lockToken, sessionScoped, deep, lockOwner, timeoutHint);",
              "startLine": 1279,
              "startColumn": 13,
              "endLine": 1279,
              "endColumn": 75,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "         */\n        public InternalLockInfo(NodeId lockToken, boolean sessionScoped,\n                                boolean deep, String lockOwner, long timeoutHint) {\n            super(lockToken, sessionScoped, deep, lockOwner, timeoutHint);\n        }\n\n        /**"
            },
            {
              "step": 2,
              "variableName": "new InternalLockInfo(",
              "startLine": 340,
              "startColumn": 33,
              "endLine": 341,
              "endColumn": 83,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "\n        SessionImpl session = (SessionImpl) node.getSession();\n        String lockOwner = (ownerInfo != null) ? ownerInfo : session.getUserID();\n        InternalLockInfo info = new InternalLockInfo(\n                node.getNodeId(), isSessionScoped, isDeep, lockOwner, timeoutHint);\n\n        ClusterOperation operation = null;"
            },
            {
              "step": 3,
              "variableName": "info",
              "startLine": 370,
              "startColumn": 17,
              "endLine": 370,
              "endColumn": 21,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "            }\n            if (info.isDeep() && element.hasPath(path)\n                    && element.getChildrenCount() > 0) {\n                info.throwLockException(\"Some child node is locked\", session);\n            }\n\n            // create lock token"
            },
            {
              "step": 4,
              "variableName": "throwLockException",
              "startLine": 259,
              "startColumn": 17,
              "endLine": 259,
              "endColumn": 35,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockInfo.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "     * @throws LockException always thrown, unless another error occurs\n     * @throws RepositoryException if the path of this lock can not be resolved\n     */\n    public void throwLockException(String message, SessionImpl session)\n            throws LockException, RepositoryException {\n        String path;\n        try {"
            },
            {
              "step": 5,
              "variableName": "id",
              "startLine": 264,
              "startColumn": 59,
              "endLine": 264,
              "endColumn": 61,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockInfo.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "        String path;\n        try {\n            path = session.getJCRPath(\n                    session.getHierarchyManager().getPath(id));\n        } catch (RepositoryException ignored) {\n            path = null;\n        }"
            },
            {
              "step": 6,
              "variableName": "id",
              "startLine": 264,
              "startColumn": 59,
              "endLine": 264,
              "endColumn": 61,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockInfo.java",
              "type": "NodeId",
              "code": "        String path;\n        try {\n            path = session.getJCRPath(\n                    session.getHierarchyManager().getPath(id));\n        } catch (RepositoryException ignored) {\n            path = null;\n        }"
            },
            {
              "step": 7,
              "variableName": "ItemId id",
              "startLine": 252,
              "startColumn": 25,
              "endLine": 252,
              "endColumn": 34,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/CachingHierarchyManager.java",
              "type": "NodeId",
              "code": "     * Overridden method simply checks whether we have an item matching the id\n     * and returns its path, otherwise calls base implementation.\n     */\n    public Path getPath(ItemId id)\n            throws ItemNotFoundException, RepositoryException {\n\n        if (id.denotesNode()) {"
            },
            {
              "step": 8,
              "variableName": "id",
              "startLine": 267,
              "startColumn": 30,
              "endLine": 267,
              "endColumn": 32,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/CachingHierarchyManager.java",
              "type": "NodeId",
              "code": "                }\n            }\n        }\n        return super.getPath(id);\n    }\n\n    /**"
            },
            {
              "step": 9,
              "variableName": "ItemId id",
              "startLine": 392,
              "startColumn": 25,
              "endLine": 392,
              "endColumn": 34,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "    /**\n     * {@inheritDoc}\n     */\n    public Path getPath(ItemId id)\n            throws ItemNotFoundException, RepositoryException {\n        // shortcut\n        if (id.equals(rootNodeId)) {"
            },
            {
              "step": 10,
              "variableName": "id",
              "startLine": 402,
              "startColumn": 45,
              "endLine": 402,
              "endColumn": 47,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "        PathBuilder builder = new PathBuilder();\n\n        try {\n            buildPath(builder, getItemState(id), new CycleDetector());\n            return builder.getPath();\n        } catch (NoSuchItemStateException nsise) {\n            String msg = \"failed to build path of \" + id;"
            },
            {
              "step": 11,
              "variableName": "ItemId id",
              "startLine": 152,
              "startColumn": 38,
              "endLine": 152,
              "endColumn": 47,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "     * @throws ItemStateException       if an error occurs\n     * @see ZombieHierarchyManager#getItemState(ItemId)\n     */\n    protected ItemState getItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n        return provider.getItemState(id);\n    }"
            },
            {
              "step": 12,
              "variableName": "id",
              "startLine": 154,
              "startColumn": 38,
              "endLine": 154,
              "endColumn": 40,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "     */\n    protected ItemState getItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n        return provider.getItemState(id);\n    }\n\n    /**"
            },
            {
              "step": 13,
              "variableName": "ItemId id",
              "startLine": 239,
              "startColumn": 35,
              "endLine": 239,
              "endColumn": 44,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/XAItemStateManager.java",
              "type": "NodeId",
              "code": "     * the transactional change log. Fallback is always the call to the base\n     * class.\n     */\n    public ItemState getItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n\n        if (virtualProvider != null && virtualProvider.hasItemState(id)) {"
            },
            {
              "step": 14,
              "variableName": "id",
              "startLine": 242,
              "startColumn": 69,
              "endLine": 242,
              "endColumn": 71,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/XAItemStateManager.java",
              "type": "NodeId",
              "code": "    public ItemState getItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n\n        if (virtualProvider != null && virtualProvider.hasItemState(id)) {\n            return virtualProvider.getItemState(id);\n        }\n        // 1) check local changes"
            },
            {
              "step": 15,
              "variableName": "ItemId id",
              "startLine": 140,
              "startColumn": 33,
              "endLine": 140,
              "endColumn": 42,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/VersionItemStateProvider.java",
              "type": "NodeId",
              "code": "    /**\n     * @inheritDoc\n     */\n    public boolean hasItemState(ItemId id) {\n        return items.get(id) != null || stateMgr.hasItemState(id);\n    }\n"
            },
            {
              "step": 16,
              "variableName": "id",
              "startLine": 141,
              "startColumn": 63,
              "endLine": 141,
              "endColumn": 65,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/VersionItemStateProvider.java",
              "type": "NodeId",
              "code": "     * @inheritDoc\n     */\n    public boolean hasItemState(ItemId id) {\n        return items.get(id) != null || stateMgr.hasItemState(id);\n    }\n\n    /**"
            },
            {
              "step": 17,
              "variableName": "ItemId id",
              "startLine": 296,
              "startColumn": 33,
              "endLine": 296,
              "endColumn": 42,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "    /**\n     * {@inheritDoc}\n     */\n    public boolean hasItemState(ItemId id) {\n        // check the virtual root ids (needed for overlay)\n        for (VirtualItemStateProvider virtualProvider : virtualProviders) {\n            if (virtualProvider.isVirtualRoot(id)) {"
            },
            {
              "step": 18,
              "variableName": "id",
              "startLine": 317,
              "startColumn": 40,
              "endLine": 317,
              "endColumn": 42,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "            }\n\n            // check if this manager has the item state\n            if (hasNonVirtualItemState(id)) {\n                return true;\n            }\n        } finally {"
            },
            {
              "step": 19,
              "variableName": "ItemId id",
              "startLine": 1820,
              "startColumn": 46,
              "endLine": 1820,
              "endColumn": 55,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "     * Checks if this item state manager has the given item state without\n     * considering the virtual item state managers.\n     */\n    protected boolean hasNonVirtualItemState(ItemId id) {\n        if (cache.isCached(id)) {\n            return true;\n        }"
            },
            {
              "step": 20,
              "variableName": "(NodeId) id",
              "startLine": 1827,
              "startColumn": 42,
              "endLine": 1827,
              "endColumn": 53,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "\n        try {\n            if (id.denotesNode()) {\n                return persistMgr.exists((NodeId) id);\n            } else {\n                return persistMgr.exists((PropertyId) id);\n            }"
            },
            {
              "step": 21,
              "variableName": "NodeId id",
              "startLine": 850,
              "startColumn": 40,
              "endLine": 850,
              "endColumn": 49,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/xml/XMLPersistenceManager.java",
              "type": "NodeId",
              "code": "    /**\n     * {@inheritDoc}\n     */\n    public synchronized boolean exists(NodeId id) throws ItemStateException {\n        if (!initialized) {\n            throw new IllegalStateException(\"not initialized\");\n        }"
            },
            {
              "step": 22,
              "variableName": "msg",
              "startLine": 861,
              "startColumn": 23,
              "endLine": 861,
              "endColumn": 26,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/xml/XMLPersistenceManager.java",
              "type": "",
              "code": "            return nodeFile.exists();\n        } catch (FileSystemException fse) {\n            String msg = \"failed to check existence of item state: \" + id;\n            log.debug(msg);\n            throw new ItemStateException(msg, fse);\n        }\n    }"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "lockToken",
              "startLine": 1279,
              "startColumn": 19,
              "endLine": 1279,
              "endColumn": 28,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "NodeId",
              "code": "         */\n        public InternalLockInfo(NodeId lockToken, boolean sessionScoped,\n                                boolean deep, String lockOwner, long timeoutHint) {\n            super(lockToken, sessionScoped, deep, lockOwner, timeoutHint);\n        }\n\n        /**"
            },
            {
              "step": 1,
              "variableName": "super(lockToken, sessionScoped, deep, lockOwner, timeoutHint);",
              "startLine": 1279,
              "startColumn": 13,
              "endLine": 1279,
              "endColumn": 75,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "         */\n        public InternalLockInfo(NodeId lockToken, boolean sessionScoped,\n                                boolean deep, String lockOwner, long timeoutHint) {\n            super(lockToken, sessionScoped, deep, lockOwner, timeoutHint);\n        }\n\n        /**"
            },
            {
              "step": 2,
              "variableName": "new InternalLockInfo(",
              "startLine": 340,
              "startColumn": 33,
              "endLine": 341,
              "endColumn": 83,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "\n        SessionImpl session = (SessionImpl) node.getSession();\n        String lockOwner = (ownerInfo != null) ? ownerInfo : session.getUserID();\n        InternalLockInfo info = new InternalLockInfo(\n                node.getNodeId(), isSessionScoped, isDeep, lockOwner, timeoutHint);\n\n        ClusterOperation operation = null;"
            },
            {
              "step": 3,
              "variableName": "info",
              "startLine": 370,
              "startColumn": 17,
              "endLine": 370,
              "endColumn": 21,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "            }\n            if (info.isDeep() && element.hasPath(path)\n                    && element.getChildrenCount() > 0) {\n                info.throwLockException(\"Some child node is locked\", session);\n            }\n\n            // create lock token"
            },
            {
              "step": 4,
              "variableName": "throwLockException",
              "startLine": 259,
              "startColumn": 17,
              "endLine": 259,
              "endColumn": 35,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockInfo.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "     * @throws LockException always thrown, unless another error occurs\n     * @throws RepositoryException if the path of this lock can not be resolved\n     */\n    public void throwLockException(String message, SessionImpl session)\n            throws LockException, RepositoryException {\n        String path;\n        try {"
            },
            {
              "step": 5,
              "variableName": "id",
              "startLine": 264,
              "startColumn": 59,
              "endLine": 264,
              "endColumn": 61,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockInfo.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "        String path;\n        try {\n            path = session.getJCRPath(\n                    session.getHierarchyManager().getPath(id));\n        } catch (RepositoryException ignored) {\n            path = null;\n        }"
            },
            {
              "step": 6,
              "variableName": "id",
              "startLine": 264,
              "startColumn": 59,
              "endLine": 264,
              "endColumn": 61,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockInfo.java",
              "type": "NodeId",
              "code": "        String path;\n        try {\n            path = session.getJCRPath(\n                    session.getHierarchyManager().getPath(id));\n        } catch (RepositoryException ignored) {\n            path = null;\n        }"
            },
            {
              "step": 7,
              "variableName": "ItemId id",
              "startLine": 252,
              "startColumn": 25,
              "endLine": 252,
              "endColumn": 34,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/CachingHierarchyManager.java",
              "type": "NodeId",
              "code": "     * Overridden method simply checks whether we have an item matching the id\n     * and returns its path, otherwise calls base implementation.\n     */\n    public Path getPath(ItemId id)\n            throws ItemNotFoundException, RepositoryException {\n\n        if (id.denotesNode()) {"
            },
            {
              "step": 8,
              "variableName": "id",
              "startLine": 267,
              "startColumn": 30,
              "endLine": 267,
              "endColumn": 32,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/CachingHierarchyManager.java",
              "type": "NodeId",
              "code": "                }\n            }\n        }\n        return super.getPath(id);\n    }\n\n    /**"
            },
            {
              "step": 9,
              "variableName": "ItemId id",
              "startLine": 392,
              "startColumn": 25,
              "endLine": 392,
              "endColumn": 34,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "    /**\n     * {@inheritDoc}\n     */\n    public Path getPath(ItemId id)\n            throws ItemNotFoundException, RepositoryException {\n        // shortcut\n        if (id.equals(rootNodeId)) {"
            },
            {
              "step": 10,
              "variableName": "id",
              "startLine": 402,
              "startColumn": 45,
              "endLine": 402,
              "endColumn": 47,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "        PathBuilder builder = new PathBuilder();\n\n        try {\n            buildPath(builder, getItemState(id), new CycleDetector());\n            return builder.getPath();\n        } catch (NoSuchItemStateException nsise) {\n            String msg = \"failed to build path of \" + id;"
            },
            {
              "step": 11,
              "variableName": "ItemId id",
              "startLine": 152,
              "startColumn": 38,
              "endLine": 152,
              "endColumn": 47,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "     * @throws ItemStateException       if an error occurs\n     * @see ZombieHierarchyManager#getItemState(ItemId)\n     */\n    protected ItemState getItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n        return provider.getItemState(id);\n    }"
            },
            {
              "step": 12,
              "variableName": "id",
              "startLine": 154,
              "startColumn": 38,
              "endLine": 154,
              "endColumn": 40,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "     */\n    protected ItemState getItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n        return provider.getItemState(id);\n    }\n\n    /**"
            },
            {
              "step": 13,
              "variableName": "ItemId id",
              "startLine": 160,
              "startColumn": 35,
              "endLine": 160,
              "endColumn": 44,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/LocalItemStateManager.java",
              "type": "NodeId",
              "code": "    /**\n     * {@inheritDoc}\n     */\n    public ItemState getItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n\n        // check change log"
            },
            {
              "step": 14,
              "variableName": "(NodeId) id",
              "startLine": 175,
              "startColumn": 42,
              "endLine": 175,
              "endColumn": 53,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/LocalItemStateManager.java",
              "type": "NodeId",
              "code": "            if (state == null) {\n                // regular behaviour\n                if (id.denotesNode()) {\n                    state = getNodeState((NodeId) id);\n                } else {\n                    state = getPropertyState((PropertyId) id);\n                }"
            },
            {
              "step": 15,
              "variableName": "NodeId id",
              "startLine": 106,
              "startColumn": 38,
              "endLine": 106,
              "endColumn": 47,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/LocalItemStateManager.java",
              "type": "NodeId",
              "code": "     * @throws NoSuchItemStateException\n     * @throws ItemStateException\n     */\n    protected NodeState getNodeState(NodeId id)\n            throws NoSuchItemStateException, ItemStateException {\n\n        // load from parent manager and wrap"
            },
            {
              "step": 16,
              "variableName": "id",
              "startLine": 110,
              "startColumn": 67,
              "endLine": 110,
              "endColumn": 69,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/LocalItemStateManager.java",
              "type": "NodeId",
              "code": "            throws NoSuchItemStateException, ItemStateException {\n\n        // load from parent manager and wrap\n        NodeState state = (NodeState) sharedStateMgr.getItemState(id);\n        state = new NodeState(state, state.getStatus(), false);\n\n        // put it in cache"
            },
            {
              "step": 17,
              "variableName": "ItemId id",
              "startLine": 258,
              "startColumn": 35,
              "endLine": 258,
              "endColumn": 44,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "    /**\n     * {@inheritDoc}\n     */\n    public ItemState getItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n        // check the virtual root ids (needed for overlay)\n        for (VirtualItemStateProvider virtualProvider : virtualProviders) {"
            },
            {
              "step": 18,
              "variableName": "id",
              "startLine": 284,
              "startColumn": 46,
              "endLine": 284,
              "endColumn": 48,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "\n        // check if there is a virtual state for the specified item\n        for (VirtualItemStateProvider virtualProvider : virtualProviders) {\n            if (virtualProvider.hasItemState(id)) {\n                return virtualProvider.getItemState(id);\n            }\n        }"
            },
            {
              "step": 19,
              "variableName": "ItemId id",
              "startLine": 140,
              "startColumn": 33,
              "endLine": 140,
              "endColumn": 42,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/VersionItemStateProvider.java",
              "type": "NodeId",
              "code": "    /**\n     * @inheritDoc\n     */\n    public boolean hasItemState(ItemId id) {\n        return items.get(id) != null || stateMgr.hasItemState(id);\n    }\n"
            },
            {
              "step": 20,
              "variableName": "id",
              "startLine": 141,
              "startColumn": 63,
              "endLine": 141,
              "endColumn": 65,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/VersionItemStateProvider.java",
              "type": "NodeId",
              "code": "     * @inheritDoc\n     */\n    public boolean hasItemState(ItemId id) {\n        return items.get(id) != null || stateMgr.hasItemState(id);\n    }\n\n    /**"
            },
            {
              "step": 21,
              "variableName": "ItemId id",
              "startLine": 296,
              "startColumn": 33,
              "endLine": 296,
              "endColumn": 42,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "    /**\n     * {@inheritDoc}\n     */\n    public boolean hasItemState(ItemId id) {\n        // check the virtual root ids (needed for overlay)\n        for (VirtualItemStateProvider virtualProvider : virtualProviders) {\n            if (virtualProvider.isVirtualRoot(id)) {"
            },
            {
              "step": 22,
              "variableName": "id",
              "startLine": 317,
              "startColumn": 40,
              "endLine": 317,
              "endColumn": 42,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "            }\n\n            // check if this manager has the item state\n            if (hasNonVirtualItemState(id)) {\n                return true;\n            }\n        } finally {"
            },
            {
              "step": 23,
              "variableName": "ItemId id",
              "startLine": 1820,
              "startColumn": 46,
              "endLine": 1820,
              "endColumn": 55,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "     * Checks if this item state manager has the given item state without\n     * considering the virtual item state managers.\n     */\n    protected boolean hasNonVirtualItemState(ItemId id) {\n        if (cache.isCached(id)) {\n            return true;\n        }"
            },
            {
              "step": 24,
              "variableName": "(NodeId) id",
              "startLine": 1827,
              "startColumn": 42,
              "endLine": 1827,
              "endColumn": 53,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "\n        try {\n            if (id.denotesNode()) {\n                return persistMgr.exists((NodeId) id);\n            } else {\n                return persistMgr.exists((PropertyId) id);\n            }"
            },
            {
              "step": 25,
              "variableName": "NodeId id",
              "startLine": 850,
              "startColumn": 40,
              "endLine": 850,
              "endColumn": 49,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/xml/XMLPersistenceManager.java",
              "type": "NodeId",
              "code": "    /**\n     * {@inheritDoc}\n     */\n    public synchronized boolean exists(NodeId id) throws ItemStateException {\n        if (!initialized) {\n            throw new IllegalStateException(\"not initialized\");\n        }"
            },
            {
              "step": 26,
              "variableName": "msg",
              "startLine": 861,
              "startColumn": 23,
              "endLine": 861,
              "endColumn": 26,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/xml/XMLPersistenceManager.java",
              "type": "",
              "code": "            return nodeFile.exists();\n        } catch (FileSystemException fse) {\n            String msg = \"failed to check existence of item state: \" + id;\n            log.debug(msg);\n            throw new ItemStateException(msg, fse);\n        }\n    }"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "lockToken",
              "startLine": 1279,
              "startColumn": 19,
              "endLine": 1279,
              "endColumn": 28,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "NodeId",
              "code": "         */\n        public InternalLockInfo(NodeId lockToken, boolean sessionScoped,\n                                boolean deep, String lockOwner, long timeoutHint) {\n            super(lockToken, sessionScoped, deep, lockOwner, timeoutHint);\n        }\n\n        /**"
            },
            {
              "step": 1,
              "variableName": "super(lockToken, sessionScoped, deep, lockOwner, timeoutHint);",
              "startLine": 1279,
              "startColumn": 13,
              "endLine": 1279,
              "endColumn": 75,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "         */\n        public InternalLockInfo(NodeId lockToken, boolean sessionScoped,\n                                boolean deep, String lockOwner, long timeoutHint) {\n            super(lockToken, sessionScoped, deep, lockOwner, timeoutHint);\n        }\n\n        /**"
            },
            {
              "step": 2,
              "variableName": "new InternalLockInfo(",
              "startLine": 340,
              "startColumn": 33,
              "endLine": 341,
              "endColumn": 83,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "\n        SessionImpl session = (SessionImpl) node.getSession();\n        String lockOwner = (ownerInfo != null) ? ownerInfo : session.getUserID();\n        InternalLockInfo info = new InternalLockInfo(\n                node.getNodeId(), isSessionScoped, isDeep, lockOwner, timeoutHint);\n\n        ClusterOperation operation = null;"
            },
            {
              "step": 3,
              "variableName": "info",
              "startLine": 370,
              "startColumn": 17,
              "endLine": 370,
              "endColumn": 21,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "            }\n            if (info.isDeep() && element.hasPath(path)\n                    && element.getChildrenCount() > 0) {\n                info.throwLockException(\"Some child node is locked\", session);\n            }\n\n            // create lock token"
            },
            {
              "step": 4,
              "variableName": "throwLockException",
              "startLine": 259,
              "startColumn": 17,
              "endLine": 259,
              "endColumn": 35,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockInfo.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "     * @throws LockException always thrown, unless another error occurs\n     * @throws RepositoryException if the path of this lock can not be resolved\n     */\n    public void throwLockException(String message, SessionImpl session)\n            throws LockException, RepositoryException {\n        String path;\n        try {"
            },
            {
              "step": 5,
              "variableName": "id",
              "startLine": 264,
              "startColumn": 59,
              "endLine": 264,
              "endColumn": 61,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockInfo.java",
              "type": "InternalLockInfo [id] : NodeId",
              "code": "        String path;\n        try {\n            path = session.getJCRPath(\n                    session.getHierarchyManager().getPath(id));\n        } catch (RepositoryException ignored) {\n            path = null;\n        }"
            },
            {
              "step": 6,
              "variableName": "id",
              "startLine": 264,
              "startColumn": 59,
              "endLine": 264,
              "endColumn": 61,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockInfo.java",
              "type": "NodeId",
              "code": "        String path;\n        try {\n            path = session.getJCRPath(\n                    session.getHierarchyManager().getPath(id));\n        } catch (RepositoryException ignored) {\n            path = null;\n        }"
            },
            {
              "step": 7,
              "variableName": "ItemId id",
              "startLine": 252,
              "startColumn": 25,
              "endLine": 252,
              "endColumn": 34,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/CachingHierarchyManager.java",
              "type": "NodeId",
              "code": "     * Overridden method simply checks whether we have an item matching the id\n     * and returns its path, otherwise calls base implementation.\n     */\n    public Path getPath(ItemId id)\n            throws ItemNotFoundException, RepositoryException {\n\n        if (id.denotesNode()) {"
            },
            {
              "step": 8,
              "variableName": "id",
              "startLine": 267,
              "startColumn": 30,
              "endLine": 267,
              "endColumn": 32,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/CachingHierarchyManager.java",
              "type": "NodeId",
              "code": "                }\n            }\n        }\n        return super.getPath(id);\n    }\n\n    /**"
            },
            {
              "step": 9,
              "variableName": "ItemId id",
              "startLine": 392,
              "startColumn": 25,
              "endLine": 392,
              "endColumn": 34,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "    /**\n     * {@inheritDoc}\n     */\n    public Path getPath(ItemId id)\n            throws ItemNotFoundException, RepositoryException {\n        // shortcut\n        if (id.equals(rootNodeId)) {"
            },
            {
              "step": 10,
              "variableName": "id",
              "startLine": 402,
              "startColumn": 45,
              "endLine": 402,
              "endColumn": 47,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "        PathBuilder builder = new PathBuilder();\n\n        try {\n            buildPath(builder, getItemState(id), new CycleDetector());\n            return builder.getPath();\n        } catch (NoSuchItemStateException nsise) {\n            String msg = \"failed to build path of \" + id;"
            },
            {
              "step": 11,
              "variableName": "ItemId id",
              "startLine": 152,
              "startColumn": 38,
              "endLine": 152,
              "endColumn": 47,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "     * @throws ItemStateException       if an error occurs\n     * @see ZombieHierarchyManager#getItemState(ItemId)\n     */\n    protected ItemState getItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n        return provider.getItemState(id);\n    }"
            },
            {
              "step": 12,
              "variableName": "id",
              "startLine": 154,
              "startColumn": 38,
              "endLine": 154,
              "endColumn": 40,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/HierarchyManagerImpl.java",
              "type": "NodeId",
              "code": "     */\n    protected ItemState getItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n        return provider.getItemState(id);\n    }\n\n    /**"
            },
            {
              "step": 13,
              "variableName": "ItemId id",
              "startLine": 132,
              "startColumn": 39,
              "endLine": 132,
              "endColumn": 48,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/observation/ChangeLogBasedHierarchyMgr.java",
              "type": "NodeId",
              "code": "         * <code>id</code>.\n         * @throws ItemStateException if any other error occurs.\n         */\n        public ItemState getItemState(ItemId id) throws NoSuchItemStateException, ItemStateException {\n            // check ChangeLog first\n            try {\n                ItemState state = changes.get(id);"
            },
            {
              "step": 14,
              "variableName": "id",
              "startLine": 142,
              "startColumn": 38,
              "endLine": 142,
              "endColumn": 40,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/observation/ChangeLogBasedHierarchyMgr.java",
              "type": "NodeId",
              "code": "            } catch (NoSuchItemStateException e) {\n                // item has been deleted, but we still return it by asking base\n            }\n            return base.getItemState(id);\n        }\n\n        /**"
            },
            {
              "step": 15,
              "variableName": "ItemId id",
              "startLine": 258,
              "startColumn": 35,
              "endLine": 258,
              "endColumn": 44,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "    /**\n     * {@inheritDoc}\n     */\n    public ItemState getItemState(ItemId id)\n            throws NoSuchItemStateException, ItemStateException {\n        // check the virtual root ids (needed for overlay)\n        for (VirtualItemStateProvider virtualProvider : virtualProviders) {"
            },
            {
              "step": 16,
              "variableName": "id",
              "startLine": 284,
              "startColumn": 46,
              "endLine": 284,
              "endColumn": 48,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "\n        // check if there is a virtual state for the specified item\n        for (VirtualItemStateProvider virtualProvider : virtualProviders) {\n            if (virtualProvider.hasItemState(id)) {\n                return virtualProvider.getItemState(id);\n            }\n        }"
            },
            {
              "step": 17,
              "variableName": "ItemId id",
              "startLine": 140,
              "startColumn": 33,
              "endLine": 140,
              "endColumn": 42,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/VersionItemStateProvider.java",
              "type": "NodeId",
              "code": "    /**\n     * @inheritDoc\n     */\n    public boolean hasItemState(ItemId id) {\n        return items.get(id) != null || stateMgr.hasItemState(id);\n    }\n"
            },
            {
              "step": 18,
              "variableName": "id",
              "startLine": 141,
              "startColumn": 63,
              "endLine": 141,
              "endColumn": 65,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/VersionItemStateProvider.java",
              "type": "NodeId",
              "code": "     * @inheritDoc\n     */\n    public boolean hasItemState(ItemId id) {\n        return items.get(id) != null || stateMgr.hasItemState(id);\n    }\n\n    /**"
            },
            {
              "step": 19,
              "variableName": "ItemId id",
              "startLine": 296,
              "startColumn": 33,
              "endLine": 296,
              "endColumn": 42,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "    /**\n     * {@inheritDoc}\n     */\n    public boolean hasItemState(ItemId id) {\n        // check the virtual root ids (needed for overlay)\n        for (VirtualItemStateProvider virtualProvider : virtualProviders) {\n            if (virtualProvider.isVirtualRoot(id)) {"
            },
            {
              "step": 20,
              "variableName": "id",
              "startLine": 317,
              "startColumn": 40,
              "endLine": 317,
              "endColumn": 42,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "            }\n\n            // check if this manager has the item state\n            if (hasNonVirtualItemState(id)) {\n                return true;\n            }\n        } finally {"
            },
            {
              "step": 21,
              "variableName": "ItemId id",
              "startLine": 1820,
              "startColumn": 46,
              "endLine": 1820,
              "endColumn": 55,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "     * Checks if this item state manager has the given item state without\n     * considering the virtual item state managers.\n     */\n    protected boolean hasNonVirtualItemState(ItemId id) {\n        if (cache.isCached(id)) {\n            return true;\n        }"
            },
            {
              "step": 22,
              "variableName": "(NodeId) id",
              "startLine": 1827,
              "startColumn": 42,
              "endLine": 1827,
              "endColumn": 53,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java",
              "type": "NodeId",
              "code": "\n        try {\n            if (id.denotesNode()) {\n                return persistMgr.exists((NodeId) id);\n            } else {\n                return persistMgr.exists((PropertyId) id);\n            }"
            },
            {
              "step": 23,
              "variableName": "NodeId id",
              "startLine": 850,
              "startColumn": 40,
              "endLine": 850,
              "endColumn": 49,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/xml/XMLPersistenceManager.java",
              "type": "NodeId",
              "code": "    /**\n     * {@inheritDoc}\n     */\n    public synchronized boolean exists(NodeId id) throws ItemStateException {\n        if (!initialized) {\n            throw new IllegalStateException(\"not initialized\");\n        }"
            },
            {
              "step": 24,
              "variableName": "msg",
              "startLine": 861,
              "startColumn": 23,
              "endLine": 861,
              "endColumn": 26,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/xml/XMLPersistenceManager.java",
              "type": "",
              "code": "            return nodeFile.exists();\n        } catch (FileSystemException fse) {\n            String msg = \"failed to check existence of item state: \" + id;\n            log.debug(msg);\n            throw new ItemStateException(msg, fse);\n        }\n    }"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 23,
      "fileName": "PasswordUtility.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "hashedPwd",
              "startLine": 148,
              "startColumn": 36,
              "endLine": 148,
              "endColumn": 45,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/user/PasswordUtility.java",
              "type": "String",
              "code": "        if (hashedPwd != null && hashedPwd.length() > 0) {\n            int end = hashedPwd.indexOf('}');\n            if (hashedPwd.charAt(0) == '{' && end > 0 && end < hashedPwd.length()-1) {\n                String algorithm = hashedPwd.substring(1, end);\n                try {\n                    MessageDigest.getInstance(algorithm);\n                    return algorithm;"
            },
            {
              "step": 1,
              "variableName": "hashedPwd.substring(1, end)",
              "startLine": 148,
              "startColumn": 36,
              "endLine": 148,
              "endColumn": 63,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/user/PasswordUtility.java",
              "type": "String",
              "code": "        if (hashedPwd != null && hashedPwd.length() > 0) {\n            int end = hashedPwd.indexOf('}');\n            if (hashedPwd.charAt(0) == '{' && end > 0 && end < hashedPwd.length()-1) {\n                String algorithm = hashedPwd.substring(1, end);\n                try {\n                    MessageDigest.getInstance(algorithm);\n                    return algorithm;"
            },
            {
              "step": 2,
              "variableName": "\"Invalid algorithm detected \" + algorithm",
              "startLine": 153,
              "startColumn": 31,
              "endLine": 153,
              "endColumn": 72,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/user/PasswordUtility.java",
              "type": "",
              "code": "                    MessageDigest.getInstance(algorithm);\n                    return algorithm;\n                } catch (NoSuchAlgorithmException e) {\n                    log.debug(\"Invalid algorithm detected \" + algorithm);\n                }\n            }\n        }"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 24,
      "fileName": "PasswordUtility.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "hashedPwd",
              "startLine": 225,
              "startColumn": 26,
              "endLine": 225,
              "endColumn": 35,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/user/PasswordUtility.java",
              "type": "String",
              "code": "    private static int extractIterations(String hashedPwd, int start) {\n        int end = hashedPwd.indexOf(DELIMITER, start);\n        if (end > -1) {\n            String str = hashedPwd.substring(start, end);\n            try {\n                return Integer.parseInt(str);\n            } catch (NumberFormatException e) {"
            },
            {
              "step": 1,
              "variableName": "hashedPwd.substring(start, end)",
              "startLine": 225,
              "startColumn": 26,
              "endLine": 225,
              "endColumn": 57,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/user/PasswordUtility.java",
              "type": "String",
              "code": "    private static int extractIterations(String hashedPwd, int start) {\n        int end = hashedPwd.indexOf(DELIMITER, start);\n        if (end > -1) {\n            String str = hashedPwd.substring(start, end);\n            try {\n                return Integer.parseInt(str);\n            } catch (NumberFormatException e) {"
            },
            {
              "step": 2,
              "variableName": "\"Expected number of iterations. Found: \" + str",
              "startLine": 229,
              "startColumn": 27,
              "endLine": 229,
              "endColumn": 73,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/user/PasswordUtility.java",
              "type": "",
              "code": "            try {\n                return Integer.parseInt(str);\n            } catch (NumberFormatException e) {\n                log.debug(\"Expected number of iterations. Found: \" + str);\n            }\n        }\n"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 25,
      "fileName": "JcrDavSession.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "ifHeaderToken",
              "startLine": 158,
              "startColumn": 38,
              "endLine": 158,
              "endColumn": 51,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-webdav/src/main/java/org/apache/jackrabbit/webdav/WebdavRequestImpl.java",
              "type": "String",
              "code": "            Iterator<String> it = ifHeader.getAllTokens();\n            while (it.hasNext()) {\n                String ifHeaderToken = it.next();\n                session.addLockToken(ifHeaderToken);\n            }\n        }\n    }"
            },
            {
              "step": 1,
              "variableName": "String token",
              "startLine": 101,
              "startColumn": 30,
              "endLine": 101,
              "endColumn": 42,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-jcr-server/src/main/java/org/apache/jackrabbit/webdav/jcr/JcrDavSession.java",
              "type": "String",
              "code": "     * @see DavSession#addLockToken(String)\n     */\n    @Override\n    public void addLockToken(String token) {\n        if (!LockTokenMapper.isForSessionScopedLock(token)) {\n            try {\n                session.getWorkspace().getLockManager().addLockToken(LockTokenMapper.getJcrLockToken(token));"
            },
            {
              "step": 2,
              "variableName": "\"trying to add lock token \" + token + \" to session\"",
              "startLine": 107,
              "startColumn": 27,
              "endLine": 107,
              "endColumn": 78,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-jcr-server/src/main/java/org/apache/jackrabbit/webdav/jcr/JcrDavSession.java",
              "type": "",
              "code": "                session.getWorkspace().getLockManager().addLockToken(LockTokenMapper.getJcrLockToken(token));\n            }\n            catch (RepositoryException ex) {\n                log.debug(\"trying to add lock token \" + token + \" to session\", ex);\n            }\n        }\n        lockTokens.add(token);"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "ifHeaderToken",
              "startLine": 158,
              "startColumn": 38,
              "endLine": 158,
              "endColumn": 51,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-webdav/src/main/java/org/apache/jackrabbit/webdav/WebdavRequestImpl.java",
              "type": "String",
              "code": "            Iterator<String> it = ifHeader.getAllTokens();\n            while (it.hasNext()) {\n                String ifHeaderToken = it.next();\n                session.addLockToken(ifHeaderToken);\n            }\n        }\n    }"
            },
            {
              "step": 1,
              "variableName": "String token",
              "startLine": 60,
              "startColumn": 30,
              "endLine": 60,
              "endColumn": 42,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-jcr-server/src/main/java/org/apache/jackrabbit/webdav/simple/DavSessionImpl.java",
              "type": "String",
              "code": "     * @see DavSession#addLockToken(String)\n     */\n    @Override\n    public void addLockToken(String token) {\n        super.addLockToken(token);\n        lockTokens.add(token);\n    }"
            },
            {
              "step": 2,
              "variableName": "token",
              "startLine": 61,
              "startColumn": 28,
              "endLine": 61,
              "endColumn": 33,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-jcr-server/src/main/java/org/apache/jackrabbit/webdav/simple/DavSessionImpl.java",
              "type": "String",
              "code": "     */\n    @Override\n    public void addLockToken(String token) {\n        super.addLockToken(token);\n        lockTokens.add(token);\n    }\n"
            },
            {
              "step": 3,
              "variableName": "String token",
              "startLine": 101,
              "startColumn": 30,
              "endLine": 101,
              "endColumn": 42,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-jcr-server/src/main/java/org/apache/jackrabbit/webdav/jcr/JcrDavSession.java",
              "type": "String",
              "code": "     * @see DavSession#addLockToken(String)\n     */\n    @Override\n    public void addLockToken(String token) {\n        if (!LockTokenMapper.isForSessionScopedLock(token)) {\n            try {\n                session.getWorkspace().getLockManager().addLockToken(LockTokenMapper.getJcrLockToken(token));"
            },
            {
              "step": 4,
              "variableName": "\"trying to add lock token \" + token + \" to session\"",
              "startLine": 107,
              "startColumn": 27,
              "endLine": 107,
              "endColumn": 78,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-jcr-server/src/main/java/org/apache/jackrabbit/webdav/jcr/JcrDavSession.java",
              "type": "",
              "code": "                session.getWorkspace().getLockManager().addLockToken(LockTokenMapper.getJcrLockToken(token));\n            }\n            catch (RepositoryException ex) {\n                log.debug(\"trying to add lock token \" + token + \" to session\", ex);\n            }\n        }\n        lockTokens.add(token);"
            }
          ],
          "label": "Yes"
        }
      ]
    },
    {
      "resultIndex": 26,
      "fileName": "SessionImpl.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "lockToken",
              "startLine": 120,
              "startColumn": 44,
              "endLine": 120,
              "endColumn": 53,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-jcr-server/src/main/java/org/apache/jackrabbit/webdav/simple/DavSessionProviderImpl.java",
              "type": "String",
              "code": "        if (ds != null && ds instanceof DavSessionImpl) {\n            Session repSession = ((DavSessionImpl)ds).getRepositorySession();\n            for (String lockToken : repSession.getLockTokens()) {\n                repSession.removeLockToken(lockToken);\n            }\n            sesProvider.releaseSession(repSession);\n            log.debug(\"Releasing session '\"+ ds + \"' from request '\" + request + \"'\");"
            },
            {
              "step": 1,
              "variableName": "String lt",
              "startLine": 493,
              "startColumn": 33,
              "endLine": 493,
              "endColumn": 42,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-jcr2spi/src/main/java/org/apache/jackrabbit/jcr2spi/SessionImpl.java",
              "type": "String",
              "code": "    /**\n     * @see javax.jcr.Session#removeLockToken(String)\n     */\n    public void removeLockToken(String lt) {\n        try {\n            getLockStateManager().removeLockToken(lt);\n        } catch (RepositoryException e) {"
            },
            {
              "step": 2,
              "variableName": "\"Unable to remove lock token '\" +lt+ \"' from this session. (\" + e.getMessage() + \")\"",
              "startLine": 497,
              "startColumn": 22,
              "endLine": 497,
              "endColumn": 106,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-jcr2spi/src/main/java/org/apache/jackrabbit/jcr2spi/SessionImpl.java",
              "type": "",
              "code": "        try {\n            getLockStateManager().removeLockToken(lt);\n        } catch (RepositoryException e) {\n            log.warn(\"Unable to remove lock token '\" +lt+ \"' from this session. (\" + e.getMessage() + \")\");\n        }\n    }\n"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "lockToken",
              "startLine": 120,
              "startColumn": 44,
              "endLine": 120,
              "endColumn": 53,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-jcr-server/src/main/java/org/apache/jackrabbit/webdav/simple/DavSessionProviderImpl.java",
              "type": "String",
              "code": "        if (ds != null && ds instanceof DavSessionImpl) {\n            Session repSession = ((DavSessionImpl)ds).getRepositorySession();\n            for (String lockToken : repSession.getLockTokens()) {\n                repSession.removeLockToken(lockToken);\n            }\n            sesProvider.releaseSession(repSession);\n            log.debug(\"Releasing session '\"+ ds + \"' from request '\" + request + \"'\");"
            },
            {
              "step": 1,
              "variableName": "String arg0",
              "startLine": 337,
              "startColumn": 33,
              "endLine": 337,
              "endColumn": 44,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-jca/src/main/java/org/apache/jackrabbit/jca/JCASessionHandle.java",
              "type": "String",
              "code": "     * Remove lock token.\n     */\n    @SuppressWarnings(\"deprecation\")\n    public void removeLockToken(String arg0) {\n        getSession().removeLockToken(arg0);\n    }\n"
            },
            {
              "step": 2,
              "variableName": "arg0",
              "startLine": 338,
              "startColumn": 38,
              "endLine": 338,
              "endColumn": 42,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-jca/src/main/java/org/apache/jackrabbit/jca/JCASessionHandle.java",
              "type": "String",
              "code": "     */\n    @SuppressWarnings(\"deprecation\")\n    public void removeLockToken(String arg0) {\n        getSession().removeLockToken(arg0);\n    }\n\n    public AccessControlManager getAccessControlManager()"
            },
            {
              "step": 3,
              "variableName": "String lt",
              "startLine": 493,
              "startColumn": 33,
              "endLine": 493,
              "endColumn": 42,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-jcr2spi/src/main/java/org/apache/jackrabbit/jcr2spi/SessionImpl.java",
              "type": "String",
              "code": "    /**\n     * @see javax.jcr.Session#removeLockToken(String)\n     */\n    public void removeLockToken(String lt) {\n        try {\n            getLockStateManager().removeLockToken(lt);\n        } catch (RepositoryException e) {"
            },
            {
              "step": 4,
              "variableName": "\"Unable to remove lock token '\" +lt+ \"' from this session. (\" + e.getMessage() + \")\"",
              "startLine": 497,
              "startColumn": 22,
              "endLine": 497,
              "endColumn": 106,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-jcr2spi/src/main/java/org/apache/jackrabbit/jcr2spi/SessionImpl.java",
              "type": "",
              "code": "        try {\n            getLockStateManager().removeLockToken(lt);\n        } catch (RepositoryException e) {\n            log.warn(\"Unable to remove lock token '\" +lt+ \"' from this session. (\" + e.getMessage() + \")\");\n        }\n    }\n"
            }
          ],
          "label": "Yes"
        }
      ]
    },
    {
      "resultIndex": 27,
      "fileName": "Slf4jLogWriter.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "currentToken",
              "startLine": 233,
              "startColumn": 25,
              "endLine": 233,
              "endColumn": 37,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-jcr-commons/src/main/java/org/apache/jackrabbit/commons/cnd/CompactNodeTypeDefReader.java",
              "type": "String",
              "code": "            return false;\n        }\n        nextToken();\n        String prefix = currentToken;\n        nextToken();\n        if (!currentTokenEquals('=')) {\n            lexer.fail(\"Missing = in namespace decl.\");"
            },
            {
              "step": 1,
              "variableName": "prefix",
              "startLine": 245,
              "startColumn": 34,
              "endLine": 245,
              "endColumn": 40,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-jcr-commons/src/main/java/org/apache/jackrabbit/commons/cnd/CompactNodeTypeDefReader.java",
              "type": "String",
              "code": "            lexer.fail(\"Missing > in namespace decl.\");\n        }\n        try {\n            factory.setNamespace(prefix, uri);\n        } catch (RepositoryException e) {\n            lexer.fail(\"Error setting namespace mapping \" + currentToken, e);\n        }"
            },
            {
              "step": 2,
              "variableName": "String prefix",
              "startLine": 90,
              "startColumn": 30,
              "endLine": 90,
              "endColumn": 43,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-jcr-commons/src/main/java/org/apache/jackrabbit/commons/cnd/TemplateBuilderFactory.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public void setNamespace(String prefix, String uri) {\n        try {\n            namespaceRegistry.registerNamespace(prefix, uri);\n        }"
            },
            {
              "step": 3,
              "variableName": "prefix",
              "startLine": 92,
              "startColumn": 49,
              "endLine": 92,
              "endColumn": 55,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-jcr-commons/src/main/java/org/apache/jackrabbit/commons/cnd/TemplateBuilderFactory.java",
              "type": "String",
              "code": "    @Override\n    public void setNamespace(String prefix, String uri) {\n        try {\n            namespaceRegistry.registerNamespace(prefix, uri);\n        }\n        catch (RepositoryException e) {\n            // ignore"
            },
            {
              "step": 4,
              "variableName": "String prefix",
              "startLine": 53,
              "startColumn": 35,
              "endLine": 53,
              "endColumn": 48,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-jcr2spi/src/main/java/org/apache/jackrabbit/jcr2spi/NamespaceRegistryImpl.java",
              "type": "String",
              "code": "    /**\n     * @see NamespaceRegistry#registerNamespace(String, String)\n     */\n    public void registerNamespace(String prefix, String uri) throws NamespaceException, UnsupportedRepositoryOperationException, RepositoryException {\n        storage.registerNamespace(prefix, uri);\n    }\n"
            },
            {
              "step": 5,
              "variableName": "prefix",
              "startLine": 54,
              "startColumn": 35,
              "endLine": 54,
              "endColumn": 41,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-jcr2spi/src/main/java/org/apache/jackrabbit/jcr2spi/NamespaceRegistryImpl.java",
              "type": "String",
              "code": "     * @see NamespaceRegistry#registerNamespace(String, String)\n     */\n    public void registerNamespace(String prefix, String uri) throws NamespaceException, UnsupportedRepositoryOperationException, RepositoryException {\n        storage.registerNamespace(prefix, uri);\n    }\n\n    /**"
            },
            {
              "step": 6,
              "variableName": "String prefix",
              "startLine": 755,
              "startColumn": 35,
              "endLine": 755,
              "endColumn": 48,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-jcr2spi/src/main/java/org/apache/jackrabbit/jcr2spi/WorkspaceManager.java",
              "type": "String",
              "code": "        return service.getNamespaceURI(sessionInfo, prefix);\n    }\n\n    public void registerNamespace(String prefix, String uri) throws NamespaceException, UnsupportedRepositoryOperationException, AccessDeniedException, RepositoryException {\n        service.registerNamespace(sessionInfo, prefix, uri);\n    }\n"
            },
            {
              "step": 7,
              "variableName": "prefix",
              "startLine": 756,
              "startColumn": 48,
              "endLine": 756,
              "endColumn": 54,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-jcr2spi/src/main/java/org/apache/jackrabbit/jcr2spi/WorkspaceManager.java",
              "type": "String",
              "code": "    }\n\n    public void registerNamespace(String prefix, String uri) throws NamespaceException, UnsupportedRepositoryOperationException, AccessDeniedException, RepositoryException {\n        service.registerNamespace(sessionInfo, prefix, uri);\n    }\n\n    public void unregisterNamespace(String uri) throws NamespaceException, UnsupportedRepositoryOperationException, AccessDeniedException, RepositoryException {"
            },
            {
              "step": 8,
              "variableName": "final String prefix",
              "startLine": 741,
              "startColumn": 66,
              "endLine": 741,
              "endColumn": 85,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/RepositoryServiceLogger.java",
              "type": "String",
              "code": "        }, \"getNamespacePrefix(SessionInfo, String)\", new Object[]{unwrap(sessionInfo), uri});\n    }\n\n    public void registerNamespace(final SessionInfo sessionInfo, final String prefix, final String uri)\n            throws RepositoryException {\n\n        execute(new Callable() {"
            },
            {
              "step": 9,
              "variableName": "prefix",
              "startLine": 749,
              "startColumn": 96,
              "endLine": 749,
              "endColumn": 102,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/RepositoryServiceLogger.java",
              "type": "String",
              "code": "                service.registerNamespace(unwrap(sessionInfo), prefix, uri);\n                return null;\n            }\n        }, \"registerNamespace(SessionInfo, String, String)\", new Object[]{unwrap(sessionInfo), prefix, uri});\n    }\n\n    public void unregisterNamespace(final SessionInfo sessionInfo, final String uri)"
            },
            {
              "step": 10,
              "variableName": "new Object[]{unwrap(sessionInfo), prefix, uri}",
              "startLine": 749,
              "startColumn": 62,
              "endLine": 749,
              "endColumn": 108,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/RepositoryServiceLogger.java",
              "type": "Object[] [[]] : String",
              "code": "                service.registerNamespace(unwrap(sessionInfo), prefix, uri);\n                return null;\n            }\n        }, \"registerNamespace(SessionInfo, String, String)\", new Object[]{unwrap(sessionInfo), prefix, uri});\n    }\n\n    public void unregisterNamespace(final SessionInfo sessionInfo, final String uri)"
            },
            {
              "step": 11,
              "variableName": "new Object[]{unwrap(sessionInfo), prefix, uri}",
              "startLine": 749,
              "startColumn": 62,
              "endLine": 749,
              "endColumn": 108,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/RepositoryServiceLogger.java",
              "type": "Object[] [[]] : String",
              "code": "                service.registerNamespace(unwrap(sessionInfo), prefix, uri);\n                return null;\n            }\n        }, \"registerNamespace(SessionInfo, String, String)\", new Object[]{unwrap(sessionInfo), prefix, uri});\n    }\n\n    public void unregisterNamespace(final SessionInfo sessionInfo, final String uri)"
            },
            {
              "step": 12,
              "variableName": "Object[] args",
              "startLine": 52,
              "startColumn": 65,
              "endLine": 52,
              "endColumn": 78,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/AbstractLogger.java",
              "type": "Object[] [[]] : String",
              "code": "     * @throws RepositoryException  if executing the <code>thunk</code> throws an Exception the\n     *   exception is re-thrown.\n     */\n    protected Object execute(Callable thunk, String methodName, Object[] args) throws RepositoryException {\n        writer.enter(methodName, args);\n        Object result = null;\n        try {"
            },
            {
              "step": 13,
              "variableName": "args",
              "startLine": 53,
              "startColumn": 34,
              "endLine": 53,
              "endColumn": 38,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/AbstractLogger.java",
              "type": "Object[] [[]] : String",
              "code": "     *   exception is re-thrown.\n     */\n    protected Object execute(Callable thunk, String methodName, Object[] args) throws RepositoryException {\n        writer.enter(methodName, args);\n        Object result = null;\n        try {\n            result = thunk.call();"
            },
            {
              "step": 14,
              "variableName": "final Object[] args",
              "startLine": 55,
              "startColumn": 48,
              "endLine": 55,
              "endColumn": 67,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "Object[] [[]] : String",
              "code": "     * Logs the call at debug level is debug level is enabled.\n     * {@inheritDoc}\n     */\n    public void enter(final String methodName, final Object[] args) {\n        if (log.isDebugEnabled()) {\n            log.debug(\"ENTER(\" + systemTime() + \") | \" + methodName + \"(\" + formatArgs(args) + \")\");\n        }"
            },
            {
              "step": 15,
              "variableName": "args",
              "startLine": 57,
              "startColumn": 88,
              "endLine": 57,
              "endColumn": 92,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "Object[] [[]] : String",
              "code": "     */\n    public void enter(final String methodName, final Object[] args) {\n        if (log.isDebugEnabled()) {\n            log.debug(\"ENTER(\" + systemTime() + \") | \" + methodName + \"(\" + formatArgs(args) + \")\");\n        }\n    }\n"
            },
            {
              "step": 16,
              "variableName": "Object[] args",
              "startLine": 85,
              "startColumn": 31,
              "endLine": 85,
              "endColumn": 44,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "Object[] [[]] : String",
              "code": "\n    // -----------------------------------------------------< private >---\n\n    private String formatArgs(Object[] args) {\n        StringBuffer b = new StringBuffer();\n        formatArgs(args, b);\n        return b.toString();"
            },
            {
              "step": 17,
              "variableName": "args",
              "startLine": 87,
              "startColumn": 20,
              "endLine": 87,
              "endColumn": 24,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "Object[] [[]] : String",
              "code": "\n    private String formatArgs(Object[] args) {\n        StringBuffer b = new StringBuffer();\n        formatArgs(args, b);\n        return b.toString();\n    }\n"
            },
            {
              "step": 18,
              "variableName": "Object[] args",
              "startLine": 103,
              "startColumn": 29,
              "endLine": 103,
              "endColumn": 42,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "Object[] [[]] : String",
              "code": "        return sw.toString();\n    }\n\n    private void formatArgs(Object[] args, StringBuffer b) {\n        String separator = \"\";\n        for (int k = 0; k < args.length; k++) {\n            b.append(separator);"
            },
            {
              "step": 19,
              "variableName": "args",
              "startLine": 107,
              "startColumn": 23,
              "endLine": 107,
              "endColumn": 27,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "Object[] [[]] : String",
              "code": "        String separator = \"\";\n        for (int k = 0; k < args.length; k++) {\n            b.append(separator);\n            formatArg(args[k], b);\n            separator = \", \";\n        }\n    }"
            },
            {
              "step": 20,
              "variableName": "args[k]",
              "startLine": 107,
              "startColumn": 23,
              "endLine": 107,
              "endColumn": 30,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "String",
              "code": "        String separator = \"\";\n        for (int k = 0; k < args.length; k++) {\n            b.append(separator);\n            formatArg(args[k], b);\n            separator = \", \";\n        }\n    }"
            },
            {
              "step": 21,
              "variableName": "Object arg",
              "startLine": 112,
              "startColumn": 28,
              "endLine": 112,
              "endColumn": 38,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "String",
              "code": "        }\n    }\n\n    private void formatArg(Object arg, StringBuffer b) {\n        if (arg instanceof Object[]) {\n            b.append('[');\n            formatArgs((Object[]) arg, b);"
            },
            {
              "step": 22,
              "variableName": "arg",
              "startLine": 119,
              "startColumn": 22,
              "endLine": 119,
              "endColumn": 25,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "String",
              "code": "            b.append(']');\n        }\n        else {\n            b.append(arg);\n        }\n    }\n"
            },
            {
              "step": 23,
              "variableName": "b",
              "startLine": 119,
              "startColumn": 13,
              "endLine": 119,
              "endColumn": 14,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "StringBuffer",
              "code": "            b.append(']');\n        }\n        else {\n            b.append(arg);\n        }\n    }\n"
            },
            {
              "step": 24,
              "variableName": "b",
              "startLine": 107,
              "startColumn": 32,
              "endLine": 107,
              "endColumn": 33,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "StringBuffer",
              "code": "        String separator = \"\";\n        for (int k = 0; k < args.length; k++) {\n            b.append(separator);\n            formatArg(args[k], b);\n            separator = \", \";\n        }\n    }"
            },
            {
              "step": 25,
              "variableName": "b",
              "startLine": 87,
              "startColumn": 26,
              "endLine": 87,
              "endColumn": 27,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "StringBuffer",
              "code": "\n    private String formatArgs(Object[] args) {\n        StringBuffer b = new StringBuffer();\n        formatArgs(args, b);\n        return b.toString();\n    }\n"
            },
            {
              "step": 26,
              "variableName": "b",
              "startLine": 88,
              "startColumn": 16,
              "endLine": 88,
              "endColumn": 17,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "StringBuffer",
              "code": "    private String formatArgs(Object[] args) {\n        StringBuffer b = new StringBuffer();\n        formatArgs(args, b);\n        return b.toString();\n    }\n\n    private String formatResult(Object result) {"
            },
            {
              "step": 27,
              "variableName": "b.toString()",
              "startLine": 88,
              "startColumn": 16,
              "endLine": 88,
              "endColumn": 28,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "String",
              "code": "    private String formatArgs(Object[] args) {\n        StringBuffer b = new StringBuffer();\n        formatArgs(args, b);\n        return b.toString();\n    }\n\n    private String formatResult(Object result) {"
            },
            {
              "step": 28,
              "variableName": "formatArgs(args)",
              "startLine": 57,
              "startColumn": 77,
              "endLine": 57,
              "endColumn": 93,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "String",
              "code": "     */\n    public void enter(final String methodName, final Object[] args) {\n        if (log.isDebugEnabled()) {\n            log.debug(\"ENTER(\" + systemTime() + \") | \" + methodName + \"(\" + formatArgs(args) + \")\");\n        }\n    }\n"
            },
            {
              "step": 29,
              "variableName": "\"ENTER(\" + systemTime() + \") | \" + methodName + \"(\" + formatArgs(args) + \")\"",
              "startLine": 57,
              "startColumn": 23,
              "endLine": 57,
              "endColumn": 99,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "",
              "code": "     */\n    public void enter(final String methodName, final Object[] args) {\n        if (log.isDebugEnabled()) {\n            log.debug(\"ENTER(\" + systemTime() + \") | \" + methodName + \"(\" + formatArgs(args) + \")\");\n        }\n    }\n"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "currentToken",
              "startLine": 239,
              "startColumn": 22,
              "endLine": 239,
              "endColumn": 34,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-jcr-commons/src/main/java/org/apache/jackrabbit/commons/cnd/CompactNodeTypeDefReader.java",
              "type": "String",
              "code": "            lexer.fail(\"Missing = in namespace decl.\");\n        }\n        nextToken();\n        String uri = currentToken;\n        nextToken();\n        if (!currentTokenEquals('>')) {\n            lexer.fail(\"Missing > in namespace decl.\");"
            },
            {
              "step": 1,
              "variableName": "uri",
              "startLine": 245,
              "startColumn": 42,
              "endLine": 245,
              "endColumn": 45,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-jcr-commons/src/main/java/org/apache/jackrabbit/commons/cnd/CompactNodeTypeDefReader.java",
              "type": "String",
              "code": "            lexer.fail(\"Missing > in namespace decl.\");\n        }\n        try {\n            factory.setNamespace(prefix, uri);\n        } catch (RepositoryException e) {\n            lexer.fail(\"Error setting namespace mapping \" + currentToken, e);\n        }"
            },
            {
              "step": 2,
              "variableName": "String uri",
              "startLine": 90,
              "startColumn": 45,
              "endLine": 90,
              "endColumn": 55,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-jcr-commons/src/main/java/org/apache/jackrabbit/commons/cnd/TemplateBuilderFactory.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public void setNamespace(String prefix, String uri) {\n        try {\n            namespaceRegistry.registerNamespace(prefix, uri);\n        }"
            },
            {
              "step": 3,
              "variableName": "uri",
              "startLine": 92,
              "startColumn": 57,
              "endLine": 92,
              "endColumn": 60,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-jcr-commons/src/main/java/org/apache/jackrabbit/commons/cnd/TemplateBuilderFactory.java",
              "type": "String",
              "code": "    @Override\n    public void setNamespace(String prefix, String uri) {\n        try {\n            namespaceRegistry.registerNamespace(prefix, uri);\n        }\n        catch (RepositoryException e) {\n            // ignore"
            },
            {
              "step": 4,
              "variableName": "String uri",
              "startLine": 53,
              "startColumn": 50,
              "endLine": 53,
              "endColumn": 60,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-jcr2spi/src/main/java/org/apache/jackrabbit/jcr2spi/NamespaceRegistryImpl.java",
              "type": "String",
              "code": "    /**\n     * @see NamespaceRegistry#registerNamespace(String, String)\n     */\n    public void registerNamespace(String prefix, String uri) throws NamespaceException, UnsupportedRepositoryOperationException, RepositoryException {\n        storage.registerNamespace(prefix, uri);\n    }\n"
            },
            {
              "step": 5,
              "variableName": "uri",
              "startLine": 54,
              "startColumn": 43,
              "endLine": 54,
              "endColumn": 46,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-jcr2spi/src/main/java/org/apache/jackrabbit/jcr2spi/NamespaceRegistryImpl.java",
              "type": "String",
              "code": "     * @see NamespaceRegistry#registerNamespace(String, String)\n     */\n    public void registerNamespace(String prefix, String uri) throws NamespaceException, UnsupportedRepositoryOperationException, RepositoryException {\n        storage.registerNamespace(prefix, uri);\n    }\n\n    /**"
            },
            {
              "step": 6,
              "variableName": "String uri",
              "startLine": 755,
              "startColumn": 50,
              "endLine": 755,
              "endColumn": 60,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-jcr2spi/src/main/java/org/apache/jackrabbit/jcr2spi/WorkspaceManager.java",
              "type": "String",
              "code": "        return service.getNamespaceURI(sessionInfo, prefix);\n    }\n\n    public void registerNamespace(String prefix, String uri) throws NamespaceException, UnsupportedRepositoryOperationException, AccessDeniedException, RepositoryException {\n        service.registerNamespace(sessionInfo, prefix, uri);\n    }\n"
            },
            {
              "step": 7,
              "variableName": "uri",
              "startLine": 756,
              "startColumn": 56,
              "endLine": 756,
              "endColumn": 59,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-jcr2spi/src/main/java/org/apache/jackrabbit/jcr2spi/WorkspaceManager.java",
              "type": "String",
              "code": "    }\n\n    public void registerNamespace(String prefix, String uri) throws NamespaceException, UnsupportedRepositoryOperationException, AccessDeniedException, RepositoryException {\n        service.registerNamespace(sessionInfo, prefix, uri);\n    }\n\n    public void unregisterNamespace(String uri) throws NamespaceException, UnsupportedRepositoryOperationException, AccessDeniedException, RepositoryException {"
            },
            {
              "step": 8,
              "variableName": "final String uri",
              "startLine": 741,
              "startColumn": 87,
              "endLine": 741,
              "endColumn": 103,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/RepositoryServiceLogger.java",
              "type": "String",
              "code": "        }, \"getNamespacePrefix(SessionInfo, String)\", new Object[]{unwrap(sessionInfo), uri});\n    }\n\n    public void registerNamespace(final SessionInfo sessionInfo, final String prefix, final String uri)\n            throws RepositoryException {\n\n        execute(new Callable() {"
            },
            {
              "step": 9,
              "variableName": "uri",
              "startLine": 749,
              "startColumn": 104,
              "endLine": 749,
              "endColumn": 107,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/RepositoryServiceLogger.java",
              "type": "String",
              "code": "                service.registerNamespace(unwrap(sessionInfo), prefix, uri);\n                return null;\n            }\n        }, \"registerNamespace(SessionInfo, String, String)\", new Object[]{unwrap(sessionInfo), prefix, uri});\n    }\n\n    public void unregisterNamespace(final SessionInfo sessionInfo, final String uri)"
            },
            {
              "step": 10,
              "variableName": "new Object[]{unwrap(sessionInfo), prefix, uri}",
              "startLine": 749,
              "startColumn": 62,
              "endLine": 749,
              "endColumn": 108,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/RepositoryServiceLogger.java",
              "type": "Object[] [[]] : String",
              "code": "                service.registerNamespace(unwrap(sessionInfo), prefix, uri);\n                return null;\n            }\n        }, \"registerNamespace(SessionInfo, String, String)\", new Object[]{unwrap(sessionInfo), prefix, uri});\n    }\n\n    public void unregisterNamespace(final SessionInfo sessionInfo, final String uri)"
            },
            {
              "step": 11,
              "variableName": "new Object[]{unwrap(sessionInfo), prefix, uri}",
              "startLine": 749,
              "startColumn": 62,
              "endLine": 749,
              "endColumn": 108,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/RepositoryServiceLogger.java",
              "type": "Object[] [[]] : String",
              "code": "                service.registerNamespace(unwrap(sessionInfo), prefix, uri);\n                return null;\n            }\n        }, \"registerNamespace(SessionInfo, String, String)\", new Object[]{unwrap(sessionInfo), prefix, uri});\n    }\n\n    public void unregisterNamespace(final SessionInfo sessionInfo, final String uri)"
            },
            {
              "step": 12,
              "variableName": "Object[] args",
              "startLine": 52,
              "startColumn": 65,
              "endLine": 52,
              "endColumn": 78,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/AbstractLogger.java",
              "type": "Object[] [[]] : String",
              "code": "     * @throws RepositoryException  if executing the <code>thunk</code> throws an Exception the\n     *   exception is re-thrown.\n     */\n    protected Object execute(Callable thunk, String methodName, Object[] args) throws RepositoryException {\n        writer.enter(methodName, args);\n        Object result = null;\n        try {"
            },
            {
              "step": 13,
              "variableName": "args",
              "startLine": 53,
              "startColumn": 34,
              "endLine": 53,
              "endColumn": 38,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/AbstractLogger.java",
              "type": "Object[] [[]] : String",
              "code": "     *   exception is re-thrown.\n     */\n    protected Object execute(Callable thunk, String methodName, Object[] args) throws RepositoryException {\n        writer.enter(methodName, args);\n        Object result = null;\n        try {\n            result = thunk.call();"
            },
            {
              "step": 14,
              "variableName": "final Object[] args",
              "startLine": 55,
              "startColumn": 48,
              "endLine": 55,
              "endColumn": 67,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "Object[] [[]] : String",
              "code": "     * Logs the call at debug level is debug level is enabled.\n     * {@inheritDoc}\n     */\n    public void enter(final String methodName, final Object[] args) {\n        if (log.isDebugEnabled()) {\n            log.debug(\"ENTER(\" + systemTime() + \") | \" + methodName + \"(\" + formatArgs(args) + \")\");\n        }"
            },
            {
              "step": 15,
              "variableName": "args",
              "startLine": 57,
              "startColumn": 88,
              "endLine": 57,
              "endColumn": 92,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "Object[] [[]] : String",
              "code": "     */\n    public void enter(final String methodName, final Object[] args) {\n        if (log.isDebugEnabled()) {\n            log.debug(\"ENTER(\" + systemTime() + \") | \" + methodName + \"(\" + formatArgs(args) + \")\");\n        }\n    }\n"
            },
            {
              "step": 16,
              "variableName": "Object[] args",
              "startLine": 85,
              "startColumn": 31,
              "endLine": 85,
              "endColumn": 44,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "Object[] [[]] : String",
              "code": "\n    // -----------------------------------------------------< private >---\n\n    private String formatArgs(Object[] args) {\n        StringBuffer b = new StringBuffer();\n        formatArgs(args, b);\n        return b.toString();"
            },
            {
              "step": 17,
              "variableName": "args",
              "startLine": 87,
              "startColumn": 20,
              "endLine": 87,
              "endColumn": 24,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "Object[] [[]] : String",
              "code": "\n    private String formatArgs(Object[] args) {\n        StringBuffer b = new StringBuffer();\n        formatArgs(args, b);\n        return b.toString();\n    }\n"
            },
            {
              "step": 18,
              "variableName": "Object[] args",
              "startLine": 103,
              "startColumn": 29,
              "endLine": 103,
              "endColumn": 42,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "Object[] [[]] : String",
              "code": "        return sw.toString();\n    }\n\n    private void formatArgs(Object[] args, StringBuffer b) {\n        String separator = \"\";\n        for (int k = 0; k < args.length; k++) {\n            b.append(separator);"
            },
            {
              "step": 19,
              "variableName": "args",
              "startLine": 107,
              "startColumn": 23,
              "endLine": 107,
              "endColumn": 27,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "Object[] [[]] : String",
              "code": "        String separator = \"\";\n        for (int k = 0; k < args.length; k++) {\n            b.append(separator);\n            formatArg(args[k], b);\n            separator = \", \";\n        }\n    }"
            },
            {
              "step": 20,
              "variableName": "args[k]",
              "startLine": 107,
              "startColumn": 23,
              "endLine": 107,
              "endColumn": 30,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "String",
              "code": "        String separator = \"\";\n        for (int k = 0; k < args.length; k++) {\n            b.append(separator);\n            formatArg(args[k], b);\n            separator = \", \";\n        }\n    }"
            },
            {
              "step": 21,
              "variableName": "Object arg",
              "startLine": 112,
              "startColumn": 28,
              "endLine": 112,
              "endColumn": 38,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "String",
              "code": "        }\n    }\n\n    private void formatArg(Object arg, StringBuffer b) {\n        if (arg instanceof Object[]) {\n            b.append('[');\n            formatArgs((Object[]) arg, b);"
            },
            {
              "step": 22,
              "variableName": "arg",
              "startLine": 119,
              "startColumn": 22,
              "endLine": 119,
              "endColumn": 25,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "String",
              "code": "            b.append(']');\n        }\n        else {\n            b.append(arg);\n        }\n    }\n"
            },
            {
              "step": 23,
              "variableName": "b",
              "startLine": 119,
              "startColumn": 13,
              "endLine": 119,
              "endColumn": 14,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "StringBuffer",
              "code": "            b.append(']');\n        }\n        else {\n            b.append(arg);\n        }\n    }\n"
            },
            {
              "step": 24,
              "variableName": "b",
              "startLine": 107,
              "startColumn": 32,
              "endLine": 107,
              "endColumn": 33,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "StringBuffer",
              "code": "        String separator = \"\";\n        for (int k = 0; k < args.length; k++) {\n            b.append(separator);\n            formatArg(args[k], b);\n            separator = \", \";\n        }\n    }"
            },
            {
              "step": 25,
              "variableName": "b",
              "startLine": 87,
              "startColumn": 26,
              "endLine": 87,
              "endColumn": 27,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "StringBuffer",
              "code": "\n    private String formatArgs(Object[] args) {\n        StringBuffer b = new StringBuffer();\n        formatArgs(args, b);\n        return b.toString();\n    }\n"
            },
            {
              "step": 26,
              "variableName": "b",
              "startLine": 88,
              "startColumn": 16,
              "endLine": 88,
              "endColumn": 17,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "StringBuffer",
              "code": "    private String formatArgs(Object[] args) {\n        StringBuffer b = new StringBuffer();\n        formatArgs(args, b);\n        return b.toString();\n    }\n\n    private String formatResult(Object result) {"
            },
            {
              "step": 27,
              "variableName": "b.toString()",
              "startLine": 88,
              "startColumn": 16,
              "endLine": 88,
              "endColumn": 28,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "String",
              "code": "    private String formatArgs(Object[] args) {\n        StringBuffer b = new StringBuffer();\n        formatArgs(args, b);\n        return b.toString();\n    }\n\n    private String formatResult(Object result) {"
            },
            {
              "step": 28,
              "variableName": "formatArgs(args)",
              "startLine": 57,
              "startColumn": 77,
              "endLine": 57,
              "endColumn": 93,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "String",
              "code": "     */\n    public void enter(final String methodName, final Object[] args) {\n        if (log.isDebugEnabled()) {\n            log.debug(\"ENTER(\" + systemTime() + \") | \" + methodName + \"(\" + formatArgs(args) + \")\");\n        }\n    }\n"
            },
            {
              "step": 29,
              "variableName": "\"ENTER(\" + systemTime() + \") | \" + methodName + \"(\" + formatArgs(args) + \")\"",
              "startLine": 57,
              "startColumn": 23,
              "endLine": 57,
              "endColumn": 99,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "",
              "code": "     */\n    public void enter(final String methodName, final Object[] args) {\n        if (log.isDebugEnabled()) {\n            log.debug(\"ENTER(\" + systemTime() + \") | \" + methodName + \"(\" + formatArgs(args) + \")\");\n        }\n    }\n"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "currentToken",
              "startLine": 265,
              "startColumn": 25,
              "endLine": 265,
              "endColumn": 37,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-jcr-commons/src/main/java/org/apache/jackrabbit/commons/cnd/CompactNodeTypeDefReader.java",
              "type": "String",
              "code": "        }\n        nextToken();\n        try {\n            ntd.setName(currentToken);\n        } catch (RepositoryException e) {\n            lexer.fail(\"Error setting node type name \" + currentToken, e);\n        }"
            },
            {
              "step": 1,
              "variableName": "String name",
              "startLine": 133,
              "startColumn": 29,
              "endLine": 133,
              "endColumn": 40,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-jcr-commons/src/main/java/org/apache/jackrabbit/commons/cnd/TemplateBuilderFactory.java",
              "type": "String",
              "code": "        }\n\n        @Override\n        public void setName(String name) throws RepositoryException {\n            super.setName(name);\n            template.setName(name);\n        }"
            },
            {
              "step": 2,
              "variableName": "name",
              "startLine": 135,
              "startColumn": 30,
              "endLine": 135,
              "endColumn": 34,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-jcr-commons/src/main/java/org/apache/jackrabbit/commons/cnd/TemplateBuilderFactory.java",
              "type": "String",
              "code": "        @Override\n        public void setName(String name) throws RepositoryException {\n            super.setName(name);\n            template.setName(name);\n        }\n\n        @Override"
            },
            {
              "step": 3,
              "variableName": "String name",
              "startLine": 115,
              "startColumn": 25,
              "endLine": 115,
              "endColumn": 36,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/NodeTypeTemplateImpl.java",
              "type": "String",
              "code": "    /**\n     * {@inheritDoc}\n     */\n    public void setName(String name) throws ConstraintViolationException {\n        try {\n            this.name = resolver.getQName(name);\n        } catch (RepositoryException e) {"
            },
            {
              "step": 4,
              "variableName": "name",
              "startLine": 117,
              "startColumn": 43,
              "endLine": 117,
              "endColumn": 47,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/NodeTypeTemplateImpl.java",
              "type": "String",
              "code": "     */\n    public void setName(String name) throws ConstraintViolationException {\n        try {\n            this.name = resolver.getQName(name);\n        } catch (RepositoryException e) {\n            throw new ConstraintViolationException(e);\n        }"
            },
            {
              "step": 5,
              "variableName": "String name",
              "startLine": 73,
              "startColumn": 26,
              "endLine": 73,
              "endColumn": 37,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/conversion/DefaultNamePathResolver.java",
              "type": "String",
              "code": "        this.pResolver = pResolver;\n    }\n\n    public Name getQName(String name) throws IllegalNameException, NamespaceException {\n        return nResolver.getQName(name);\n    }\n"
            },
            {
              "step": 6,
              "variableName": "name",
              "startLine": 74,
              "startColumn": 35,
              "endLine": 74,
              "endColumn": 39,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/conversion/DefaultNamePathResolver.java",
              "type": "String",
              "code": "    }\n\n    public Name getQName(String name) throws IllegalNameException, NamespaceException {\n        return nResolver.getQName(name);\n    }\n\n    public String getJCRName(Name name) throws NamespaceException {"
            },
            {
              "step": 7,
              "variableName": "String jcrName",
              "startLine": 63,
              "startColumn": 26,
              "endLine": 63,
              "endColumn": 40,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/conversion/ParsingNameResolver.java",
              "type": "String",
              "code": "     * @throws NamespaceException if the namespace prefix can not be resolved.\n     * @see NameResolver#getQName(String)\n     */\n    public Name getQName(String jcrName) throws IllegalNameException, NamespaceException {\n        return NameParser.parse(jcrName, resolver, nameFactory);\n    }\n"
            },
            {
              "step": 8,
              "variableName": "jcrName",
              "startLine": 64,
              "startColumn": 33,
              "endLine": 64,
              "endColumn": 40,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/conversion/ParsingNameResolver.java",
              "type": "String",
              "code": "     * @see NameResolver#getQName(String)\n     */\n    public Name getQName(String jcrName) throws IllegalNameException, NamespaceException {\n        return NameParser.parse(jcrName, resolver, nameFactory);\n    }\n\n    /**"
            },
            {
              "step": 9,
              "variableName": "String jcrName",
              "startLine": 53,
              "startColumn": 30,
              "endLine": 53,
              "endColumn": 44,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/conversion/NameParser.java",
              "type": "String",
              "code": "     * JCR-style name.\n     * @throws NamespaceException If the jcr name contains an unknown prefix.\n     */\n    public static Name parse(String jcrName, NamespaceResolver resolver, NameFactory factory)\n            throws IllegalNameException, NamespaceException {\n\n        if (jcrName == null) {"
            },
            {
              "step": 10,
              "variableName": "localName",
              "startLine": 195,
              "startColumn": 36,
              "endLine": 195,
              "endColumn": 45,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/conversion/NameParser.java",
              "type": "String",
              "code": "        }\n\n        String localName = (nameStart == 0 ? jcrName : jcrName.substring(nameStart, len));\n        return factory.create(uri, localName);\n    }\n\n    private static String asDisplayableString(char c) {"
            },
            {
              "step": 11,
              "variableName": "final String localName",
              "startLine": 46,
              "startColumn": 51,
              "endLine": 46,
              "endColumn": 73,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/NameFactoryLogger.java",
              "type": "String",
              "code": "        return nameFactory;\n    }\n\n    public Name create(final String namespaceURI, final String localName) {\n        return (Name) execute(new SafeCallable() {\n            public Object call() {\n                return nameFactory.create(namespaceURI, localName);"
            },
            {
              "step": 12,
              "variableName": "localName",
              "startLine": 50,
              "startColumn": 70,
              "endLine": 50,
              "endColumn": 79,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/NameFactoryLogger.java",
              "type": "String",
              "code": "        return (Name) execute(new SafeCallable() {\n            public Object call() {\n                return nameFactory.create(namespaceURI, localName);\n            }}, \"create(String, String)\", new Object[]{namespaceURI, localName});\n    }\n\n    public Name create(final String nameString) {"
            },
            {
              "step": 13,
              "variableName": "new Object[]{namespaceURI, localName}",
              "startLine": 50,
              "startColumn": 43,
              "endLine": 50,
              "endColumn": 80,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/NameFactoryLogger.java",
              "type": "Object[] [[]] : String",
              "code": "        return (Name) execute(new SafeCallable() {\n            public Object call() {\n                return nameFactory.create(namespaceURI, localName);\n            }}, \"create(String, String)\", new Object[]{namespaceURI, localName});\n    }\n\n    public Name create(final String nameString) {"
            },
            {
              "step": 14,
              "variableName": "new Object[]{namespaceURI, localName}",
              "startLine": 50,
              "startColumn": 43,
              "endLine": 50,
              "endColumn": 80,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/NameFactoryLogger.java",
              "type": "Object[] [[]] : String",
              "code": "        return (Name) execute(new SafeCallable() {\n            public Object call() {\n                return nameFactory.create(namespaceURI, localName);\n            }}, \"create(String, String)\", new Object[]{namespaceURI, localName});\n    }\n\n    public Name create(final String nameString) {"
            },
            {
              "step": 15,
              "variableName": "Object[] args",
              "startLine": 78,
              "startColumn": 69,
              "endLine": 78,
              "endColumn": 82,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/AbstractLogger.java",
              "type": "Object[] [[]] : String",
              "code": "     * @param args  the arguments passed to the method\n     * @return  the value returned from executing the <code>thunk</code>\n     */\n    protected Object execute(SafeCallable thunk, String methodName, Object[] args)  {\n        writer.enter(methodName, args);\n        Object result;\n        try {"
            },
            {
              "step": 16,
              "variableName": "args",
              "startLine": 79,
              "startColumn": 34,
              "endLine": 79,
              "endColumn": 38,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/AbstractLogger.java",
              "type": "Object[] [[]] : String",
              "code": "     * @return  the value returned from executing the <code>thunk</code>\n     */\n    protected Object execute(SafeCallable thunk, String methodName, Object[] args)  {\n        writer.enter(methodName, args);\n        Object result;\n        try {\n            result = thunk.call();"
            },
            {
              "step": 17,
              "variableName": "final Object[] args",
              "startLine": 55,
              "startColumn": 48,
              "endLine": 55,
              "endColumn": 67,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "Object[] [[]] : String",
              "code": "     * Logs the call at debug level is debug level is enabled.\n     * {@inheritDoc}\n     */\n    public void enter(final String methodName, final Object[] args) {\n        if (log.isDebugEnabled()) {\n            log.debug(\"ENTER(\" + systemTime() + \") | \" + methodName + \"(\" + formatArgs(args) + \")\");\n        }"
            },
            {
              "step": 18,
              "variableName": "args",
              "startLine": 57,
              "startColumn": 88,
              "endLine": 57,
              "endColumn": 92,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "Object[] [[]] : String",
              "code": "     */\n    public void enter(final String methodName, final Object[] args) {\n        if (log.isDebugEnabled()) {\n            log.debug(\"ENTER(\" + systemTime() + \") | \" + methodName + \"(\" + formatArgs(args) + \")\");\n        }\n    }\n"
            },
            {
              "step": 19,
              "variableName": "Object[] args",
              "startLine": 85,
              "startColumn": 31,
              "endLine": 85,
              "endColumn": 44,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "Object[] [[]] : String",
              "code": "\n    // -----------------------------------------------------< private >---\n\n    private String formatArgs(Object[] args) {\n        StringBuffer b = new StringBuffer();\n        formatArgs(args, b);\n        return b.toString();"
            },
            {
              "step": 20,
              "variableName": "args",
              "startLine": 87,
              "startColumn": 20,
              "endLine": 87,
              "endColumn": 24,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "Object[] [[]] : String",
              "code": "\n    private String formatArgs(Object[] args) {\n        StringBuffer b = new StringBuffer();\n        formatArgs(args, b);\n        return b.toString();\n    }\n"
            },
            {
              "step": 21,
              "variableName": "Object[] args",
              "startLine": 103,
              "startColumn": 29,
              "endLine": 103,
              "endColumn": 42,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "Object[] [[]] : String",
              "code": "        return sw.toString();\n    }\n\n    private void formatArgs(Object[] args, StringBuffer b) {\n        String separator = \"\";\n        for (int k = 0; k < args.length; k++) {\n            b.append(separator);"
            },
            {
              "step": 22,
              "variableName": "args",
              "startLine": 107,
              "startColumn": 23,
              "endLine": 107,
              "endColumn": 27,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "Object[] [[]] : String",
              "code": "        String separator = \"\";\n        for (int k = 0; k < args.length; k++) {\n            b.append(separator);\n            formatArg(args[k], b);\n            separator = \", \";\n        }\n    }"
            },
            {
              "step": 23,
              "variableName": "args[k]",
              "startLine": 107,
              "startColumn": 23,
              "endLine": 107,
              "endColumn": 30,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "String",
              "code": "        String separator = \"\";\n        for (int k = 0; k < args.length; k++) {\n            b.append(separator);\n            formatArg(args[k], b);\n            separator = \", \";\n        }\n    }"
            },
            {
              "step": 24,
              "variableName": "Object arg",
              "startLine": 112,
              "startColumn": 28,
              "endLine": 112,
              "endColumn": 38,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "String",
              "code": "        }\n    }\n\n    private void formatArg(Object arg, StringBuffer b) {\n        if (arg instanceof Object[]) {\n            b.append('[');\n            formatArgs((Object[]) arg, b);"
            },
            {
              "step": 25,
              "variableName": "arg",
              "startLine": 119,
              "startColumn": 22,
              "endLine": 119,
              "endColumn": 25,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "String",
              "code": "            b.append(']');\n        }\n        else {\n            b.append(arg);\n        }\n    }\n"
            },
            {
              "step": 26,
              "variableName": "b",
              "startLine": 119,
              "startColumn": 13,
              "endLine": 119,
              "endColumn": 14,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "StringBuffer",
              "code": "            b.append(']');\n        }\n        else {\n            b.append(arg);\n        }\n    }\n"
            },
            {
              "step": 27,
              "variableName": "b",
              "startLine": 107,
              "startColumn": 32,
              "endLine": 107,
              "endColumn": 33,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "StringBuffer",
              "code": "        String separator = \"\";\n        for (int k = 0; k < args.length; k++) {\n            b.append(separator);\n            formatArg(args[k], b);\n            separator = \", \";\n        }\n    }"
            },
            {
              "step": 28,
              "variableName": "b",
              "startLine": 87,
              "startColumn": 26,
              "endLine": 87,
              "endColumn": 27,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "StringBuffer",
              "code": "\n    private String formatArgs(Object[] args) {\n        StringBuffer b = new StringBuffer();\n        formatArgs(args, b);\n        return b.toString();\n    }\n"
            },
            {
              "step": 29,
              "variableName": "b",
              "startLine": 88,
              "startColumn": 16,
              "endLine": 88,
              "endColumn": 17,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "StringBuffer",
              "code": "    private String formatArgs(Object[] args) {\n        StringBuffer b = new StringBuffer();\n        formatArgs(args, b);\n        return b.toString();\n    }\n\n    private String formatResult(Object result) {"
            },
            {
              "step": 30,
              "variableName": "b.toString()",
              "startLine": 88,
              "startColumn": 16,
              "endLine": 88,
              "endColumn": 28,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "String",
              "code": "    private String formatArgs(Object[] args) {\n        StringBuffer b = new StringBuffer();\n        formatArgs(args, b);\n        return b.toString();\n    }\n\n    private String formatResult(Object result) {"
            },
            {
              "step": 31,
              "variableName": "formatArgs(args)",
              "startLine": 57,
              "startColumn": 77,
              "endLine": 57,
              "endColumn": 93,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "String",
              "code": "     */\n    public void enter(final String methodName, final Object[] args) {\n        if (log.isDebugEnabled()) {\n            log.debug(\"ENTER(\" + systemTime() + \") | \" + methodName + \"(\" + formatArgs(args) + \")\");\n        }\n    }\n"
            },
            {
              "step": 32,
              "variableName": "\"ENTER(\" + systemTime() + \") | \" + methodName + \"(\" + formatArgs(args) + \")\"",
              "startLine": 57,
              "startColumn": 23,
              "endLine": 57,
              "endColumn": 99,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "",
              "code": "     */\n    public void enter(final String methodName, final Object[] args) {\n        if (log.isDebugEnabled()) {\n            log.debug(\"ENTER(\" + systemTime() + \") | \" + methodName + \"(\" + formatArgs(args) + \")\");\n        }\n    }\n"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "currentToken",
              "startLine": 289,
              "startColumn": 38,
              "endLine": 289,
              "endColumn": 50,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-jcr-commons/src/main/java/org/apache/jackrabbit/commons/cnd/CompactNodeTypeDefReader.java",
              "type": "String",
              "code": "            do {\n                nextToken();\n                try {\n                    ntd.addSupertype(currentToken);\n                } catch (RepositoryException e) {\n                    lexer.fail(\"Error setting super type of \" + ntd.getName() + \" to \" + currentToken, e);\n                }"
            },
            {
              "step": 1,
              "variableName": "String name",
              "startLine": 147,
              "startColumn": 34,
              "endLine": 147,
              "endColumn": 45,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/QDefinitionBuilderFactory.java",
              "type": "String",
              "code": "        }\n\n        @Override\n        public void addSupertype(String name) throws IllegalNameException, NamespaceException {\n            supertypes.add(toName(name));\n        }\n"
            },
            {
              "step": 2,
              "variableName": "name",
              "startLine": 148,
              "startColumn": 35,
              "endLine": 148,
              "endColumn": 39,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/QDefinitionBuilderFactory.java",
              "type": "String",
              "code": "\n        @Override\n        public void addSupertype(String name) throws IllegalNameException, NamespaceException {\n            supertypes.add(toName(name));\n        }\n\n        @Override"
            },
            {
              "step": 3,
              "variableName": "String name",
              "startLine": 339,
              "startColumn": 25,
              "endLine": 339,
              "endColumn": 36,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/QDefinitionBuilderFactory.java",
              "type": "String",
              "code": "    }\n\n\n    private Name toName(String name) throws IllegalNameException, NamespaceException {\n        Name n = resolver.getQName(name);\n        String decodedLocalName = ISO9075.decode(n.getLocalName());\n        return NAME_FACTORY.create(n.getNamespaceURI(), decodedLocalName);"
            },
            {
              "step": 4,
              "variableName": "name",
              "startLine": 340,
              "startColumn": 36,
              "endLine": 340,
              "endColumn": 40,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/QDefinitionBuilderFactory.java",
              "type": "String",
              "code": "\n\n    private Name toName(String name) throws IllegalNameException, NamespaceException {\n        Name n = resolver.getQName(name);\n        String decodedLocalName = ISO9075.decode(n.getLocalName());\n        return NAME_FACTORY.create(n.getNamespaceURI(), decodedLocalName);\n    }"
            },
            {
              "step": 5,
              "variableName": "String name",
              "startLine": 73,
              "startColumn": 26,
              "endLine": 73,
              "endColumn": 37,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/conversion/DefaultNamePathResolver.java",
              "type": "String",
              "code": "        this.pResolver = pResolver;\n    }\n\n    public Name getQName(String name) throws IllegalNameException, NamespaceException {\n        return nResolver.getQName(name);\n    }\n"
            },
            {
              "step": 6,
              "variableName": "name",
              "startLine": 74,
              "startColumn": 35,
              "endLine": 74,
              "endColumn": 39,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/conversion/DefaultNamePathResolver.java",
              "type": "String",
              "code": "    }\n\n    public Name getQName(String name) throws IllegalNameException, NamespaceException {\n        return nResolver.getQName(name);\n    }\n\n    public String getJCRName(Name name) throws NamespaceException {"
            },
            {
              "step": 7,
              "variableName": "String jcrName",
              "startLine": 63,
              "startColumn": 26,
              "endLine": 63,
              "endColumn": 40,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/conversion/ParsingNameResolver.java",
              "type": "String",
              "code": "     * @throws NamespaceException if the namespace prefix can not be resolved.\n     * @see NameResolver#getQName(String)\n     */\n    public Name getQName(String jcrName) throws IllegalNameException, NamespaceException {\n        return NameParser.parse(jcrName, resolver, nameFactory);\n    }\n"
            },
            {
              "step": 8,
              "variableName": "jcrName",
              "startLine": 64,
              "startColumn": 33,
              "endLine": 64,
              "endColumn": 40,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/conversion/ParsingNameResolver.java",
              "type": "String",
              "code": "     * @see NameResolver#getQName(String)\n     */\n    public Name getQName(String jcrName) throws IllegalNameException, NamespaceException {\n        return NameParser.parse(jcrName, resolver, nameFactory);\n    }\n\n    /**"
            },
            {
              "step": 9,
              "variableName": "String jcrName",
              "startLine": 53,
              "startColumn": 30,
              "endLine": 53,
              "endColumn": 44,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/conversion/NameParser.java",
              "type": "String",
              "code": "     * JCR-style name.\n     * @throws NamespaceException If the jcr name contains an unknown prefix.\n     */\n    public static Name parse(String jcrName, NamespaceResolver resolver, NameFactory factory)\n            throws IllegalNameException, NamespaceException {\n\n        if (jcrName == null) {"
            },
            {
              "step": 10,
              "variableName": "localName",
              "startLine": 195,
              "startColumn": 36,
              "endLine": 195,
              "endColumn": 45,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/conversion/NameParser.java",
              "type": "String",
              "code": "        }\n\n        String localName = (nameStart == 0 ? jcrName : jcrName.substring(nameStart, len));\n        return factory.create(uri, localName);\n    }\n\n    private static String asDisplayableString(char c) {"
            },
            {
              "step": 11,
              "variableName": "final String localName",
              "startLine": 46,
              "startColumn": 51,
              "endLine": 46,
              "endColumn": 73,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/NameFactoryLogger.java",
              "type": "String",
              "code": "        return nameFactory;\n    }\n\n    public Name create(final String namespaceURI, final String localName) {\n        return (Name) execute(new SafeCallable() {\n            public Object call() {\n                return nameFactory.create(namespaceURI, localName);"
            },
            {
              "step": 12,
              "variableName": "localName",
              "startLine": 50,
              "startColumn": 70,
              "endLine": 50,
              "endColumn": 79,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/NameFactoryLogger.java",
              "type": "String",
              "code": "        return (Name) execute(new SafeCallable() {\n            public Object call() {\n                return nameFactory.create(namespaceURI, localName);\n            }}, \"create(String, String)\", new Object[]{namespaceURI, localName});\n    }\n\n    public Name create(final String nameString) {"
            },
            {
              "step": 13,
              "variableName": "new Object[]{namespaceURI, localName}",
              "startLine": 50,
              "startColumn": 43,
              "endLine": 50,
              "endColumn": 80,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/NameFactoryLogger.java",
              "type": "Object[] [[]] : String",
              "code": "        return (Name) execute(new SafeCallable() {\n            public Object call() {\n                return nameFactory.create(namespaceURI, localName);\n            }}, \"create(String, String)\", new Object[]{namespaceURI, localName});\n    }\n\n    public Name create(final String nameString) {"
            },
            {
              "step": 14,
              "variableName": "new Object[]{namespaceURI, localName}",
              "startLine": 50,
              "startColumn": 43,
              "endLine": 50,
              "endColumn": 80,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/NameFactoryLogger.java",
              "type": "Object[] [[]] : String",
              "code": "        return (Name) execute(new SafeCallable() {\n            public Object call() {\n                return nameFactory.create(namespaceURI, localName);\n            }}, \"create(String, String)\", new Object[]{namespaceURI, localName});\n    }\n\n    public Name create(final String nameString) {"
            },
            {
              "step": 15,
              "variableName": "Object[] args",
              "startLine": 78,
              "startColumn": 69,
              "endLine": 78,
              "endColumn": 82,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/AbstractLogger.java",
              "type": "Object[] [[]] : String",
              "code": "     * @param args  the arguments passed to the method\n     * @return  the value returned from executing the <code>thunk</code>\n     */\n    protected Object execute(SafeCallable thunk, String methodName, Object[] args)  {\n        writer.enter(methodName, args);\n        Object result;\n        try {"
            },
            {
              "step": 16,
              "variableName": "args",
              "startLine": 79,
              "startColumn": 34,
              "endLine": 79,
              "endColumn": 38,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/AbstractLogger.java",
              "type": "Object[] [[]] : String",
              "code": "     * @return  the value returned from executing the <code>thunk</code>\n     */\n    protected Object execute(SafeCallable thunk, String methodName, Object[] args)  {\n        writer.enter(methodName, args);\n        Object result;\n        try {\n            result = thunk.call();"
            },
            {
              "step": 17,
              "variableName": "final Object[] args",
              "startLine": 55,
              "startColumn": 48,
              "endLine": 55,
              "endColumn": 67,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "Object[] [[]] : String",
              "code": "     * Logs the call at debug level is debug level is enabled.\n     * {@inheritDoc}\n     */\n    public void enter(final String methodName, final Object[] args) {\n        if (log.isDebugEnabled()) {\n            log.debug(\"ENTER(\" + systemTime() + \") | \" + methodName + \"(\" + formatArgs(args) + \")\");\n        }"
            },
            {
              "step": 18,
              "variableName": "args",
              "startLine": 57,
              "startColumn": 88,
              "endLine": 57,
              "endColumn": 92,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "Object[] [[]] : String",
              "code": "     */\n    public void enter(final String methodName, final Object[] args) {\n        if (log.isDebugEnabled()) {\n            log.debug(\"ENTER(\" + systemTime() + \") | \" + methodName + \"(\" + formatArgs(args) + \")\");\n        }\n    }\n"
            },
            {
              "step": 19,
              "variableName": "Object[] args",
              "startLine": 85,
              "startColumn": 31,
              "endLine": 85,
              "endColumn": 44,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "Object[] [[]] : String",
              "code": "\n    // -----------------------------------------------------< private >---\n\n    private String formatArgs(Object[] args) {\n        StringBuffer b = new StringBuffer();\n        formatArgs(args, b);\n        return b.toString();"
            },
            {
              "step": 20,
              "variableName": "args",
              "startLine": 87,
              "startColumn": 20,
              "endLine": 87,
              "endColumn": 24,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "Object[] [[]] : String",
              "code": "\n    private String formatArgs(Object[] args) {\n        StringBuffer b = new StringBuffer();\n        formatArgs(args, b);\n        return b.toString();\n    }\n"
            },
            {
              "step": 21,
              "variableName": "Object[] args",
              "startLine": 103,
              "startColumn": 29,
              "endLine": 103,
              "endColumn": 42,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "Object[] [[]] : String",
              "code": "        return sw.toString();\n    }\n\n    private void formatArgs(Object[] args, StringBuffer b) {\n        String separator = \"\";\n        for (int k = 0; k < args.length; k++) {\n            b.append(separator);"
            },
            {
              "step": 22,
              "variableName": "args",
              "startLine": 107,
              "startColumn": 23,
              "endLine": 107,
              "endColumn": 27,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "Object[] [[]] : String",
              "code": "        String separator = \"\";\n        for (int k = 0; k < args.length; k++) {\n            b.append(separator);\n            formatArg(args[k], b);\n            separator = \", \";\n        }\n    }"
            },
            {
              "step": 23,
              "variableName": "args[k]",
              "startLine": 107,
              "startColumn": 23,
              "endLine": 107,
              "endColumn": 30,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "String",
              "code": "        String separator = \"\";\n        for (int k = 0; k < args.length; k++) {\n            b.append(separator);\n            formatArg(args[k], b);\n            separator = \", \";\n        }\n    }"
            },
            {
              "step": 24,
              "variableName": "Object arg",
              "startLine": 112,
              "startColumn": 28,
              "endLine": 112,
              "endColumn": 38,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "String",
              "code": "        }\n    }\n\n    private void formatArg(Object arg, StringBuffer b) {\n        if (arg instanceof Object[]) {\n            b.append('[');\n            formatArgs((Object[]) arg, b);"
            },
            {
              "step": 25,
              "variableName": "arg",
              "startLine": 119,
              "startColumn": 22,
              "endLine": 119,
              "endColumn": 25,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "String",
              "code": "            b.append(']');\n        }\n        else {\n            b.append(arg);\n        }\n    }\n"
            },
            {
              "step": 26,
              "variableName": "b",
              "startLine": 119,
              "startColumn": 13,
              "endLine": 119,
              "endColumn": 14,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "StringBuffer",
              "code": "            b.append(']');\n        }\n        else {\n            b.append(arg);\n        }\n    }\n"
            },
            {
              "step": 27,
              "variableName": "b",
              "startLine": 107,
              "startColumn": 32,
              "endLine": 107,
              "endColumn": 33,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "StringBuffer",
              "code": "        String separator = \"\";\n        for (int k = 0; k < args.length; k++) {\n            b.append(separator);\n            formatArg(args[k], b);\n            separator = \", \";\n        }\n    }"
            },
            {
              "step": 28,
              "variableName": "b",
              "startLine": 87,
              "startColumn": 26,
              "endLine": 87,
              "endColumn": 27,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "StringBuffer",
              "code": "\n    private String formatArgs(Object[] args) {\n        StringBuffer b = new StringBuffer();\n        formatArgs(args, b);\n        return b.toString();\n    }\n"
            },
            {
              "step": 29,
              "variableName": "b",
              "startLine": 88,
              "startColumn": 16,
              "endLine": 88,
              "endColumn": 17,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "StringBuffer",
              "code": "    private String formatArgs(Object[] args) {\n        StringBuffer b = new StringBuffer();\n        formatArgs(args, b);\n        return b.toString();\n    }\n\n    private String formatResult(Object result) {"
            },
            {
              "step": 30,
              "variableName": "b.toString()",
              "startLine": 88,
              "startColumn": 16,
              "endLine": 88,
              "endColumn": 28,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "String",
              "code": "    private String formatArgs(Object[] args) {\n        StringBuffer b = new StringBuffer();\n        formatArgs(args, b);\n        return b.toString();\n    }\n\n    private String formatResult(Object result) {"
            },
            {
              "step": 31,
              "variableName": "formatArgs(args)",
              "startLine": 57,
              "startColumn": 77,
              "endLine": 57,
              "endColumn": 93,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "String",
              "code": "     */\n    public void enter(final String methodName, final Object[] args) {\n        if (log.isDebugEnabled()) {\n            log.debug(\"ENTER(\" + systemTime() + \") | \" + methodName + \"(\" + formatArgs(args) + \")\");\n        }\n    }\n"
            },
            {
              "step": 32,
              "variableName": "\"ENTER(\" + systemTime() + \") | \" + methodName + \"(\" + formatArgs(args) + \")\"",
              "startLine": 57,
              "startColumn": 23,
              "endLine": 57,
              "endColumn": 99,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "",
              "code": "     */\n    public void enter(final String methodName, final Object[] args) {\n        if (log.isDebugEnabled()) {\n            log.debug(\"ENTER(\" + systemTime() + \") | \" + methodName + \"(\" + formatArgs(args) + \")\");\n        }\n    }\n"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 28,
      "fileName": "Slf4jLogWriter.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "currentToken",
              "startLine": 233,
              "startColumn": 25,
              "endLine": 233,
              "endColumn": 37,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-jcr-commons/src/main/java/org/apache/jackrabbit/commons/cnd/CompactNodeTypeDefReader.java",
              "type": "String",
              "code": "            return false;\n        }\n        nextToken();\n        String prefix = currentToken;\n        nextToken();\n        if (!currentTokenEquals('=')) {\n            lexer.fail(\"Missing = in namespace decl.\");"
            },
            {
              "step": 1,
              "variableName": "prefix",
              "startLine": 245,
              "startColumn": 34,
              "endLine": 245,
              "endColumn": 40,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-jcr-commons/src/main/java/org/apache/jackrabbit/commons/cnd/CompactNodeTypeDefReader.java",
              "type": "String",
              "code": "            lexer.fail(\"Missing > in namespace decl.\");\n        }\n        try {\n            factory.setNamespace(prefix, uri);\n        } catch (RepositoryException e) {\n            lexer.fail(\"Error setting namespace mapping \" + currentToken, e);\n        }"
            },
            {
              "step": 2,
              "variableName": "String prefix",
              "startLine": 90,
              "startColumn": 30,
              "endLine": 90,
              "endColumn": 43,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-jcr-commons/src/main/java/org/apache/jackrabbit/commons/cnd/TemplateBuilderFactory.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public void setNamespace(String prefix, String uri) {\n        try {\n            namespaceRegistry.registerNamespace(prefix, uri);\n        }"
            },
            {
              "step": 3,
              "variableName": "prefix",
              "startLine": 92,
              "startColumn": 49,
              "endLine": 92,
              "endColumn": 55,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-jcr-commons/src/main/java/org/apache/jackrabbit/commons/cnd/TemplateBuilderFactory.java",
              "type": "String",
              "code": "    @Override\n    public void setNamespace(String prefix, String uri) {\n        try {\n            namespaceRegistry.registerNamespace(prefix, uri);\n        }\n        catch (RepositoryException e) {\n            // ignore"
            },
            {
              "step": 4,
              "variableName": "String prefix",
              "startLine": 53,
              "startColumn": 35,
              "endLine": 53,
              "endColumn": 48,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-jcr2spi/src/main/java/org/apache/jackrabbit/jcr2spi/NamespaceRegistryImpl.java",
              "type": "String",
              "code": "    /**\n     * @see NamespaceRegistry#registerNamespace(String, String)\n     */\n    public void registerNamespace(String prefix, String uri) throws NamespaceException, UnsupportedRepositoryOperationException, RepositoryException {\n        storage.registerNamespace(prefix, uri);\n    }\n"
            },
            {
              "step": 5,
              "variableName": "prefix",
              "startLine": 54,
              "startColumn": 35,
              "endLine": 54,
              "endColumn": 41,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-jcr2spi/src/main/java/org/apache/jackrabbit/jcr2spi/NamespaceRegistryImpl.java",
              "type": "String",
              "code": "     * @see NamespaceRegistry#registerNamespace(String, String)\n     */\n    public void registerNamespace(String prefix, String uri) throws NamespaceException, UnsupportedRepositoryOperationException, RepositoryException {\n        storage.registerNamespace(prefix, uri);\n    }\n\n    /**"
            },
            {
              "step": 6,
              "variableName": "String prefix",
              "startLine": 755,
              "startColumn": 35,
              "endLine": 755,
              "endColumn": 48,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-jcr2spi/src/main/java/org/apache/jackrabbit/jcr2spi/WorkspaceManager.java",
              "type": "String",
              "code": "        return service.getNamespaceURI(sessionInfo, prefix);\n    }\n\n    public void registerNamespace(String prefix, String uri) throws NamespaceException, UnsupportedRepositoryOperationException, AccessDeniedException, RepositoryException {\n        service.registerNamespace(sessionInfo, prefix, uri);\n    }\n"
            },
            {
              "step": 7,
              "variableName": "prefix",
              "startLine": 756,
              "startColumn": 48,
              "endLine": 756,
              "endColumn": 54,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-jcr2spi/src/main/java/org/apache/jackrabbit/jcr2spi/WorkspaceManager.java",
              "type": "String",
              "code": "    }\n\n    public void registerNamespace(String prefix, String uri) throws NamespaceException, UnsupportedRepositoryOperationException, AccessDeniedException, RepositoryException {\n        service.registerNamespace(sessionInfo, prefix, uri);\n    }\n\n    public void unregisterNamespace(String uri) throws NamespaceException, UnsupportedRepositoryOperationException, AccessDeniedException, RepositoryException {"
            },
            {
              "step": 8,
              "variableName": "final String prefix",
              "startLine": 741,
              "startColumn": 66,
              "endLine": 741,
              "endColumn": 85,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/RepositoryServiceLogger.java",
              "type": "String",
              "code": "        }, \"getNamespacePrefix(SessionInfo, String)\", new Object[]{unwrap(sessionInfo), uri});\n    }\n\n    public void registerNamespace(final SessionInfo sessionInfo, final String prefix, final String uri)\n            throws RepositoryException {\n\n        execute(new Callable() {"
            },
            {
              "step": 9,
              "variableName": "prefix",
              "startLine": 749,
              "startColumn": 96,
              "endLine": 749,
              "endColumn": 102,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/RepositoryServiceLogger.java",
              "type": "String",
              "code": "                service.registerNamespace(unwrap(sessionInfo), prefix, uri);\n                return null;\n            }\n        }, \"registerNamespace(SessionInfo, String, String)\", new Object[]{unwrap(sessionInfo), prefix, uri});\n    }\n\n    public void unregisterNamespace(final SessionInfo sessionInfo, final String uri)"
            },
            {
              "step": 10,
              "variableName": "new Object[]{unwrap(sessionInfo), prefix, uri}",
              "startLine": 749,
              "startColumn": 62,
              "endLine": 749,
              "endColumn": 108,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/RepositoryServiceLogger.java",
              "type": "Object[] [[]] : String",
              "code": "                service.registerNamespace(unwrap(sessionInfo), prefix, uri);\n                return null;\n            }\n        }, \"registerNamespace(SessionInfo, String, String)\", new Object[]{unwrap(sessionInfo), prefix, uri});\n    }\n\n    public void unregisterNamespace(final SessionInfo sessionInfo, final String uri)"
            },
            {
              "step": 11,
              "variableName": "new Object[]{unwrap(sessionInfo), prefix, uri}",
              "startLine": 749,
              "startColumn": 62,
              "endLine": 749,
              "endColumn": 108,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/RepositoryServiceLogger.java",
              "type": "Object[] [[]] : String",
              "code": "                service.registerNamespace(unwrap(sessionInfo), prefix, uri);\n                return null;\n            }\n        }, \"registerNamespace(SessionInfo, String, String)\", new Object[]{unwrap(sessionInfo), prefix, uri});\n    }\n\n    public void unregisterNamespace(final SessionInfo sessionInfo, final String uri)"
            },
            {
              "step": 12,
              "variableName": "Object[] args",
              "startLine": 52,
              "startColumn": 65,
              "endLine": 52,
              "endColumn": 78,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/AbstractLogger.java",
              "type": "Object[] [[]] : String",
              "code": "     * @throws RepositoryException  if executing the <code>thunk</code> throws an Exception the\n     *   exception is re-thrown.\n     */\n    protected Object execute(Callable thunk, String methodName, Object[] args) throws RepositoryException {\n        writer.enter(methodName, args);\n        Object result = null;\n        try {"
            },
            {
              "step": 13,
              "variableName": "args",
              "startLine": 57,
              "startColumn": 38,
              "endLine": 57,
              "endColumn": 42,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/AbstractLogger.java",
              "type": "Object[] [[]] : String",
              "code": "        Object result = null;\n        try {\n            result = thunk.call();\n            writer.leave(methodName, args, result);\n            return result;\n        }\n        catch (RepositoryException e) {"
            },
            {
              "step": 14,
              "variableName": "final Object[] args",
              "startLine": 65,
              "startColumn": 48,
              "endLine": 65,
              "endColumn": 67,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "Object[] [[]] : String",
              "code": "     * Logs the call at debug level is debug level is enabled.\n     * {@inheritDoc}\n     */\n    public void leave(final String methodName, final Object[] args, final Object result) {\n        if (log.isDebugEnabled()) {\n            log.debug(\"LEAVE(\" + systemTime() + \") | \" + methodName + \"(\" + formatArgs(args) + \") = \"\n                    + formatResult(result));"
            },
            {
              "step": 15,
              "variableName": "args",
              "startLine": 67,
              "startColumn": 88,
              "endLine": 67,
              "endColumn": 92,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "Object[] [[]] : String",
              "code": "     */\n    public void leave(final String methodName, final Object[] args, final Object result) {\n        if (log.isDebugEnabled()) {\n            log.debug(\"LEAVE(\" + systemTime() + \") | \" + methodName + \"(\" + formatArgs(args) + \") = \"\n                    + formatResult(result));\n        }\n    }"
            },
            {
              "step": 16,
              "variableName": "Object[] args",
              "startLine": 85,
              "startColumn": 31,
              "endLine": 85,
              "endColumn": 44,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "Object[] [[]] : String",
              "code": "\n    // -----------------------------------------------------< private >---\n\n    private String formatArgs(Object[] args) {\n        StringBuffer b = new StringBuffer();\n        formatArgs(args, b);\n        return b.toString();"
            },
            {
              "step": 17,
              "variableName": "args",
              "startLine": 87,
              "startColumn": 20,
              "endLine": 87,
              "endColumn": 24,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "Object[] [[]] : String",
              "code": "\n    private String formatArgs(Object[] args) {\n        StringBuffer b = new StringBuffer();\n        formatArgs(args, b);\n        return b.toString();\n    }\n"
            },
            {
              "step": 18,
              "variableName": "Object[] args",
              "startLine": 103,
              "startColumn": 29,
              "endLine": 103,
              "endColumn": 42,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "Object[] [[]] : String",
              "code": "        return sw.toString();\n    }\n\n    private void formatArgs(Object[] args, StringBuffer b) {\n        String separator = \"\";\n        for (int k = 0; k < args.length; k++) {\n            b.append(separator);"
            },
            {
              "step": 19,
              "variableName": "args",
              "startLine": 107,
              "startColumn": 23,
              "endLine": 107,
              "endColumn": 27,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "Object[] [[]] : String",
              "code": "        String separator = \"\";\n        for (int k = 0; k < args.length; k++) {\n            b.append(separator);\n            formatArg(args[k], b);\n            separator = \", \";\n        }\n    }"
            },
            {
              "step": 20,
              "variableName": "args[k]",
              "startLine": 107,
              "startColumn": 23,
              "endLine": 107,
              "endColumn": 30,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "String",
              "code": "        String separator = \"\";\n        for (int k = 0; k < args.length; k++) {\n            b.append(separator);\n            formatArg(args[k], b);\n            separator = \", \";\n        }\n    }"
            },
            {
              "step": 21,
              "variableName": "Object arg",
              "startLine": 112,
              "startColumn": 28,
              "endLine": 112,
              "endColumn": 38,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "String",
              "code": "        }\n    }\n\n    private void formatArg(Object arg, StringBuffer b) {\n        if (arg instanceof Object[]) {\n            b.append('[');\n            formatArgs((Object[]) arg, b);"
            },
            {
              "step": 22,
              "variableName": "arg",
              "startLine": 119,
              "startColumn": 22,
              "endLine": 119,
              "endColumn": 25,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "String",
              "code": "            b.append(']');\n        }\n        else {\n            b.append(arg);\n        }\n    }\n"
            },
            {
              "step": 23,
              "variableName": "b",
              "startLine": 119,
              "startColumn": 13,
              "endLine": 119,
              "endColumn": 14,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "StringBuffer",
              "code": "            b.append(']');\n        }\n        else {\n            b.append(arg);\n        }\n    }\n"
            },
            {
              "step": 24,
              "variableName": "b",
              "startLine": 107,
              "startColumn": 32,
              "endLine": 107,
              "endColumn": 33,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "StringBuffer",
              "code": "        String separator = \"\";\n        for (int k = 0; k < args.length; k++) {\n            b.append(separator);\n            formatArg(args[k], b);\n            separator = \", \";\n        }\n    }"
            },
            {
              "step": 25,
              "variableName": "b",
              "startLine": 87,
              "startColumn": 26,
              "endLine": 87,
              "endColumn": 27,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "StringBuffer",
              "code": "\n    private String formatArgs(Object[] args) {\n        StringBuffer b = new StringBuffer();\n        formatArgs(args, b);\n        return b.toString();\n    }\n"
            },
            {
              "step": 26,
              "variableName": "b",
              "startLine": 88,
              "startColumn": 16,
              "endLine": 88,
              "endColumn": 17,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "StringBuffer",
              "code": "    private String formatArgs(Object[] args) {\n        StringBuffer b = new StringBuffer();\n        formatArgs(args, b);\n        return b.toString();\n    }\n\n    private String formatResult(Object result) {"
            },
            {
              "step": 27,
              "variableName": "b.toString()",
              "startLine": 88,
              "startColumn": 16,
              "endLine": 88,
              "endColumn": 28,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "String",
              "code": "    private String formatArgs(Object[] args) {\n        StringBuffer b = new StringBuffer();\n        formatArgs(args, b);\n        return b.toString();\n    }\n\n    private String formatResult(Object result) {"
            },
            {
              "step": 28,
              "variableName": "formatArgs(args)",
              "startLine": 67,
              "startColumn": 77,
              "endLine": 67,
              "endColumn": 93,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "String",
              "code": "     */\n    public void leave(final String methodName, final Object[] args, final Object result) {\n        if (log.isDebugEnabled()) {\n            log.debug(\"LEAVE(\" + systemTime() + \") | \" + methodName + \"(\" + formatArgs(args) + \") = \"\n                    + formatResult(result));\n        }\n    }"
            },
            {
              "step": 29,
              "variableName": "\"LEAVE(\" + systemTim",
              "startLine": 67,
              "startColumn": 23,
              "endLine": 68,
              "endColumn": 43,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "",
              "code": "     */\n    public void leave(final String methodName, final Object[] args, final Object result) {\n        if (log.isDebugEnabled()) {\n            log.debug(\"LEAVE(\" + systemTime() + \") | \" + methodName + \"(\" + formatArgs(args) + \") = \"\n                    + formatResult(result));\n        }\n    }"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "currentToken",
              "startLine": 239,
              "startColumn": 22,
              "endLine": 239,
              "endColumn": 34,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-jcr-commons/src/main/java/org/apache/jackrabbit/commons/cnd/CompactNodeTypeDefReader.java",
              "type": "String",
              "code": "            lexer.fail(\"Missing = in namespace decl.\");\n        }\n        nextToken();\n        String uri = currentToken;\n        nextToken();\n        if (!currentTokenEquals('>')) {\n            lexer.fail(\"Missing > in namespace decl.\");"
            },
            {
              "step": 1,
              "variableName": "uri",
              "startLine": 245,
              "startColumn": 42,
              "endLine": 245,
              "endColumn": 45,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-jcr-commons/src/main/java/org/apache/jackrabbit/commons/cnd/CompactNodeTypeDefReader.java",
              "type": "String",
              "code": "            lexer.fail(\"Missing > in namespace decl.\");\n        }\n        try {\n            factory.setNamespace(prefix, uri);\n        } catch (RepositoryException e) {\n            lexer.fail(\"Error setting namespace mapping \" + currentToken, e);\n        }"
            },
            {
              "step": 2,
              "variableName": "String uri",
              "startLine": 90,
              "startColumn": 45,
              "endLine": 90,
              "endColumn": 55,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-jcr-commons/src/main/java/org/apache/jackrabbit/commons/cnd/TemplateBuilderFactory.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public void setNamespace(String prefix, String uri) {\n        try {\n            namespaceRegistry.registerNamespace(prefix, uri);\n        }"
            },
            {
              "step": 3,
              "variableName": "uri",
              "startLine": 92,
              "startColumn": 57,
              "endLine": 92,
              "endColumn": 60,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-jcr-commons/src/main/java/org/apache/jackrabbit/commons/cnd/TemplateBuilderFactory.java",
              "type": "String",
              "code": "    @Override\n    public void setNamespace(String prefix, String uri) {\n        try {\n            namespaceRegistry.registerNamespace(prefix, uri);\n        }\n        catch (RepositoryException e) {\n            // ignore"
            },
            {
              "step": 4,
              "variableName": "String uri",
              "startLine": 53,
              "startColumn": 50,
              "endLine": 53,
              "endColumn": 60,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-jcr2spi/src/main/java/org/apache/jackrabbit/jcr2spi/NamespaceRegistryImpl.java",
              "type": "String",
              "code": "    /**\n     * @see NamespaceRegistry#registerNamespace(String, String)\n     */\n    public void registerNamespace(String prefix, String uri) throws NamespaceException, UnsupportedRepositoryOperationException, RepositoryException {\n        storage.registerNamespace(prefix, uri);\n    }\n"
            },
            {
              "step": 5,
              "variableName": "uri",
              "startLine": 54,
              "startColumn": 43,
              "endLine": 54,
              "endColumn": 46,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-jcr2spi/src/main/java/org/apache/jackrabbit/jcr2spi/NamespaceRegistryImpl.java",
              "type": "String",
              "code": "     * @see NamespaceRegistry#registerNamespace(String, String)\n     */\n    public void registerNamespace(String prefix, String uri) throws NamespaceException, UnsupportedRepositoryOperationException, RepositoryException {\n        storage.registerNamespace(prefix, uri);\n    }\n\n    /**"
            },
            {
              "step": 6,
              "variableName": "String uri",
              "startLine": 755,
              "startColumn": 50,
              "endLine": 755,
              "endColumn": 60,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-jcr2spi/src/main/java/org/apache/jackrabbit/jcr2spi/WorkspaceManager.java",
              "type": "String",
              "code": "        return service.getNamespaceURI(sessionInfo, prefix);\n    }\n\n    public void registerNamespace(String prefix, String uri) throws NamespaceException, UnsupportedRepositoryOperationException, AccessDeniedException, RepositoryException {\n        service.registerNamespace(sessionInfo, prefix, uri);\n    }\n"
            },
            {
              "step": 7,
              "variableName": "uri",
              "startLine": 756,
              "startColumn": 56,
              "endLine": 756,
              "endColumn": 59,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-jcr2spi/src/main/java/org/apache/jackrabbit/jcr2spi/WorkspaceManager.java",
              "type": "String",
              "code": "    }\n\n    public void registerNamespace(String prefix, String uri) throws NamespaceException, UnsupportedRepositoryOperationException, AccessDeniedException, RepositoryException {\n        service.registerNamespace(sessionInfo, prefix, uri);\n    }\n\n    public void unregisterNamespace(String uri) throws NamespaceException, UnsupportedRepositoryOperationException, AccessDeniedException, RepositoryException {"
            },
            {
              "step": 8,
              "variableName": "final String uri",
              "startLine": 741,
              "startColumn": 87,
              "endLine": 741,
              "endColumn": 103,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/RepositoryServiceLogger.java",
              "type": "String",
              "code": "        }, \"getNamespacePrefix(SessionInfo, String)\", new Object[]{unwrap(sessionInfo), uri});\n    }\n\n    public void registerNamespace(final SessionInfo sessionInfo, final String prefix, final String uri)\n            throws RepositoryException {\n\n        execute(new Callable() {"
            },
            {
              "step": 9,
              "variableName": "uri",
              "startLine": 749,
              "startColumn": 104,
              "endLine": 749,
              "endColumn": 107,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/RepositoryServiceLogger.java",
              "type": "String",
              "code": "                service.registerNamespace(unwrap(sessionInfo), prefix, uri);\n                return null;\n            }\n        }, \"registerNamespace(SessionInfo, String, String)\", new Object[]{unwrap(sessionInfo), prefix, uri});\n    }\n\n    public void unregisterNamespace(final SessionInfo sessionInfo, final String uri)"
            },
            {
              "step": 10,
              "variableName": "new Object[]{unwrap(sessionInfo), prefix, uri}",
              "startLine": 749,
              "startColumn": 62,
              "endLine": 749,
              "endColumn": 108,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/RepositoryServiceLogger.java",
              "type": "Object[] [[]] : String",
              "code": "                service.registerNamespace(unwrap(sessionInfo), prefix, uri);\n                return null;\n            }\n        }, \"registerNamespace(SessionInfo, String, String)\", new Object[]{unwrap(sessionInfo), prefix, uri});\n    }\n\n    public void unregisterNamespace(final SessionInfo sessionInfo, final String uri)"
            },
            {
              "step": 11,
              "variableName": "new Object[]{unwrap(sessionInfo), prefix, uri}",
              "startLine": 749,
              "startColumn": 62,
              "endLine": 749,
              "endColumn": 108,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/RepositoryServiceLogger.java",
              "type": "Object[] [[]] : String",
              "code": "                service.registerNamespace(unwrap(sessionInfo), prefix, uri);\n                return null;\n            }\n        }, \"registerNamespace(SessionInfo, String, String)\", new Object[]{unwrap(sessionInfo), prefix, uri});\n    }\n\n    public void unregisterNamespace(final SessionInfo sessionInfo, final String uri)"
            },
            {
              "step": 12,
              "variableName": "Object[] args",
              "startLine": 52,
              "startColumn": 65,
              "endLine": 52,
              "endColumn": 78,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/AbstractLogger.java",
              "type": "Object[] [[]] : String",
              "code": "     * @throws RepositoryException  if executing the <code>thunk</code> throws an Exception the\n     *   exception is re-thrown.\n     */\n    protected Object execute(Callable thunk, String methodName, Object[] args) throws RepositoryException {\n        writer.enter(methodName, args);\n        Object result = null;\n        try {"
            },
            {
              "step": 13,
              "variableName": "args",
              "startLine": 57,
              "startColumn": 38,
              "endLine": 57,
              "endColumn": 42,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/AbstractLogger.java",
              "type": "Object[] [[]] : String",
              "code": "        Object result = null;\n        try {\n            result = thunk.call();\n            writer.leave(methodName, args, result);\n            return result;\n        }\n        catch (RepositoryException e) {"
            },
            {
              "step": 14,
              "variableName": "final Object[] args",
              "startLine": 65,
              "startColumn": 48,
              "endLine": 65,
              "endColumn": 67,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "Object[] [[]] : String",
              "code": "     * Logs the call at debug level is debug level is enabled.\n     * {@inheritDoc}\n     */\n    public void leave(final String methodName, final Object[] args, final Object result) {\n        if (log.isDebugEnabled()) {\n            log.debug(\"LEAVE(\" + systemTime() + \") | \" + methodName + \"(\" + formatArgs(args) + \") = \"\n                    + formatResult(result));"
            },
            {
              "step": 15,
              "variableName": "args",
              "startLine": 67,
              "startColumn": 88,
              "endLine": 67,
              "endColumn": 92,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "Object[] [[]] : String",
              "code": "     */\n    public void leave(final String methodName, final Object[] args, final Object result) {\n        if (log.isDebugEnabled()) {\n            log.debug(\"LEAVE(\" + systemTime() + \") | \" + methodName + \"(\" + formatArgs(args) + \") = \"\n                    + formatResult(result));\n        }\n    }"
            },
            {
              "step": 16,
              "variableName": "Object[] args",
              "startLine": 85,
              "startColumn": 31,
              "endLine": 85,
              "endColumn": 44,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "Object[] [[]] : String",
              "code": "\n    // -----------------------------------------------------< private >---\n\n    private String formatArgs(Object[] args) {\n        StringBuffer b = new StringBuffer();\n        formatArgs(args, b);\n        return b.toString();"
            },
            {
              "step": 17,
              "variableName": "args",
              "startLine": 87,
              "startColumn": 20,
              "endLine": 87,
              "endColumn": 24,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "Object[] [[]] : String",
              "code": "\n    private String formatArgs(Object[] args) {\n        StringBuffer b = new StringBuffer();\n        formatArgs(args, b);\n        return b.toString();\n    }\n"
            },
            {
              "step": 18,
              "variableName": "Object[] args",
              "startLine": 103,
              "startColumn": 29,
              "endLine": 103,
              "endColumn": 42,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "Object[] [[]] : String",
              "code": "        return sw.toString();\n    }\n\n    private void formatArgs(Object[] args, StringBuffer b) {\n        String separator = \"\";\n        for (int k = 0; k < args.length; k++) {\n            b.append(separator);"
            },
            {
              "step": 19,
              "variableName": "args",
              "startLine": 107,
              "startColumn": 23,
              "endLine": 107,
              "endColumn": 27,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "Object[] [[]] : String",
              "code": "        String separator = \"\";\n        for (int k = 0; k < args.length; k++) {\n            b.append(separator);\n            formatArg(args[k], b);\n            separator = \", \";\n        }\n    }"
            },
            {
              "step": 20,
              "variableName": "args[k]",
              "startLine": 107,
              "startColumn": 23,
              "endLine": 107,
              "endColumn": 30,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "String",
              "code": "        String separator = \"\";\n        for (int k = 0; k < args.length; k++) {\n            b.append(separator);\n            formatArg(args[k], b);\n            separator = \", \";\n        }\n    }"
            },
            {
              "step": 21,
              "variableName": "Object arg",
              "startLine": 112,
              "startColumn": 28,
              "endLine": 112,
              "endColumn": 38,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "String",
              "code": "        }\n    }\n\n    private void formatArg(Object arg, StringBuffer b) {\n        if (arg instanceof Object[]) {\n            b.append('[');\n            formatArgs((Object[]) arg, b);"
            },
            {
              "step": 22,
              "variableName": "arg",
              "startLine": 119,
              "startColumn": 22,
              "endLine": 119,
              "endColumn": 25,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "String",
              "code": "            b.append(']');\n        }\n        else {\n            b.append(arg);\n        }\n    }\n"
            },
            {
              "step": 23,
              "variableName": "b",
              "startLine": 119,
              "startColumn": 13,
              "endLine": 119,
              "endColumn": 14,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "StringBuffer",
              "code": "            b.append(']');\n        }\n        else {\n            b.append(arg);\n        }\n    }\n"
            },
            {
              "step": 24,
              "variableName": "b",
              "startLine": 107,
              "startColumn": 32,
              "endLine": 107,
              "endColumn": 33,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "StringBuffer",
              "code": "        String separator = \"\";\n        for (int k = 0; k < args.length; k++) {\n            b.append(separator);\n            formatArg(args[k], b);\n            separator = \", \";\n        }\n    }"
            },
            {
              "step": 25,
              "variableName": "b",
              "startLine": 87,
              "startColumn": 26,
              "endLine": 87,
              "endColumn": 27,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "StringBuffer",
              "code": "\n    private String formatArgs(Object[] args) {\n        StringBuffer b = new StringBuffer();\n        formatArgs(args, b);\n        return b.toString();\n    }\n"
            },
            {
              "step": 26,
              "variableName": "b",
              "startLine": 88,
              "startColumn": 16,
              "endLine": 88,
              "endColumn": 17,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "StringBuffer",
              "code": "    private String formatArgs(Object[] args) {\n        StringBuffer b = new StringBuffer();\n        formatArgs(args, b);\n        return b.toString();\n    }\n\n    private String formatResult(Object result) {"
            },
            {
              "step": 27,
              "variableName": "b.toString()",
              "startLine": 88,
              "startColumn": 16,
              "endLine": 88,
              "endColumn": 28,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "String",
              "code": "    private String formatArgs(Object[] args) {\n        StringBuffer b = new StringBuffer();\n        formatArgs(args, b);\n        return b.toString();\n    }\n\n    private String formatResult(Object result) {"
            },
            {
              "step": 28,
              "variableName": "formatArgs(args)",
              "startLine": 67,
              "startColumn": 77,
              "endLine": 67,
              "endColumn": 93,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "String",
              "code": "     */\n    public void leave(final String methodName, final Object[] args, final Object result) {\n        if (log.isDebugEnabled()) {\n            log.debug(\"LEAVE(\" + systemTime() + \") | \" + methodName + \"(\" + formatArgs(args) + \") = \"\n                    + formatResult(result));\n        }\n    }"
            },
            {
              "step": 29,
              "variableName": "\"LEAVE(\" + systemTim",
              "startLine": 67,
              "startColumn": 23,
              "endLine": 68,
              "endColumn": 43,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "",
              "code": "     */\n    public void leave(final String methodName, final Object[] args, final Object result) {\n        if (log.isDebugEnabled()) {\n            log.debug(\"LEAVE(\" + systemTime() + \") | \" + methodName + \"(\" + formatArgs(args) + \") = \"\n                    + formatResult(result));\n        }\n    }"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "currentToken",
              "startLine": 265,
              "startColumn": 25,
              "endLine": 265,
              "endColumn": 37,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-jcr-commons/src/main/java/org/apache/jackrabbit/commons/cnd/CompactNodeTypeDefReader.java",
              "type": "String",
              "code": "        }\n        nextToken();\n        try {\n            ntd.setName(currentToken);\n        } catch (RepositoryException e) {\n            lexer.fail(\"Error setting node type name \" + currentToken, e);\n        }"
            },
            {
              "step": 1,
              "variableName": "String name",
              "startLine": 133,
              "startColumn": 29,
              "endLine": 133,
              "endColumn": 40,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-jcr-commons/src/main/java/org/apache/jackrabbit/commons/cnd/TemplateBuilderFactory.java",
              "type": "String",
              "code": "        }\n\n        @Override\n        public void setName(String name) throws RepositoryException {\n            super.setName(name);\n            template.setName(name);\n        }"
            },
            {
              "step": 2,
              "variableName": "name",
              "startLine": 135,
              "startColumn": 30,
              "endLine": 135,
              "endColumn": 34,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-jcr-commons/src/main/java/org/apache/jackrabbit/commons/cnd/TemplateBuilderFactory.java",
              "type": "String",
              "code": "        @Override\n        public void setName(String name) throws RepositoryException {\n            super.setName(name);\n            template.setName(name);\n        }\n\n        @Override"
            },
            {
              "step": 3,
              "variableName": "String name",
              "startLine": 115,
              "startColumn": 25,
              "endLine": 115,
              "endColumn": 36,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/NodeTypeTemplateImpl.java",
              "type": "String",
              "code": "    /**\n     * {@inheritDoc}\n     */\n    public void setName(String name) throws ConstraintViolationException {\n        try {\n            this.name = resolver.getQName(name);\n        } catch (RepositoryException e) {"
            },
            {
              "step": 4,
              "variableName": "name",
              "startLine": 117,
              "startColumn": 43,
              "endLine": 117,
              "endColumn": 47,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/NodeTypeTemplateImpl.java",
              "type": "String",
              "code": "     */\n    public void setName(String name) throws ConstraintViolationException {\n        try {\n            this.name = resolver.getQName(name);\n        } catch (RepositoryException e) {\n            throw new ConstraintViolationException(e);\n        }"
            },
            {
              "step": 5,
              "variableName": "String name",
              "startLine": 73,
              "startColumn": 26,
              "endLine": 73,
              "endColumn": 37,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/conversion/DefaultNamePathResolver.java",
              "type": "String",
              "code": "        this.pResolver = pResolver;\n    }\n\n    public Name getQName(String name) throws IllegalNameException, NamespaceException {\n        return nResolver.getQName(name);\n    }\n"
            },
            {
              "step": 6,
              "variableName": "name",
              "startLine": 74,
              "startColumn": 35,
              "endLine": 74,
              "endColumn": 39,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/conversion/DefaultNamePathResolver.java",
              "type": "String",
              "code": "    }\n\n    public Name getQName(String name) throws IllegalNameException, NamespaceException {\n        return nResolver.getQName(name);\n    }\n\n    public String getJCRName(Name name) throws NamespaceException {"
            },
            {
              "step": 7,
              "variableName": "String jcrName",
              "startLine": 63,
              "startColumn": 26,
              "endLine": 63,
              "endColumn": 40,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/conversion/ParsingNameResolver.java",
              "type": "String",
              "code": "     * @throws NamespaceException if the namespace prefix can not be resolved.\n     * @see NameResolver#getQName(String)\n     */\n    public Name getQName(String jcrName) throws IllegalNameException, NamespaceException {\n        return NameParser.parse(jcrName, resolver, nameFactory);\n    }\n"
            },
            {
              "step": 8,
              "variableName": "jcrName",
              "startLine": 64,
              "startColumn": 33,
              "endLine": 64,
              "endColumn": 40,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/conversion/ParsingNameResolver.java",
              "type": "String",
              "code": "     * @see NameResolver#getQName(String)\n     */\n    public Name getQName(String jcrName) throws IllegalNameException, NamespaceException {\n        return NameParser.parse(jcrName, resolver, nameFactory);\n    }\n\n    /**"
            },
            {
              "step": 9,
              "variableName": "String jcrName",
              "startLine": 53,
              "startColumn": 30,
              "endLine": 53,
              "endColumn": 44,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/conversion/NameParser.java",
              "type": "String",
              "code": "     * JCR-style name.\n     * @throws NamespaceException If the jcr name contains an unknown prefix.\n     */\n    public static Name parse(String jcrName, NamespaceResolver resolver, NameFactory factory)\n            throws IllegalNameException, NamespaceException {\n\n        if (jcrName == null) {"
            },
            {
              "step": 10,
              "variableName": "localName",
              "startLine": 195,
              "startColumn": 36,
              "endLine": 195,
              "endColumn": 45,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/conversion/NameParser.java",
              "type": "String",
              "code": "        }\n\n        String localName = (nameStart == 0 ? jcrName : jcrName.substring(nameStart, len));\n        return factory.create(uri, localName);\n    }\n\n    private static String asDisplayableString(char c) {"
            },
            {
              "step": 11,
              "variableName": "final String localName",
              "startLine": 46,
              "startColumn": 51,
              "endLine": 46,
              "endColumn": 73,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/NameFactoryLogger.java",
              "type": "String",
              "code": "        return nameFactory;\n    }\n\n    public Name create(final String namespaceURI, final String localName) {\n        return (Name) execute(new SafeCallable() {\n            public Object call() {\n                return nameFactory.create(namespaceURI, localName);"
            },
            {
              "step": 12,
              "variableName": "localName",
              "startLine": 50,
              "startColumn": 70,
              "endLine": 50,
              "endColumn": 79,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/NameFactoryLogger.java",
              "type": "String",
              "code": "        return (Name) execute(new SafeCallable() {\n            public Object call() {\n                return nameFactory.create(namespaceURI, localName);\n            }}, \"create(String, String)\", new Object[]{namespaceURI, localName});\n    }\n\n    public Name create(final String nameString) {"
            },
            {
              "step": 13,
              "variableName": "new Object[]{namespaceURI, localName}",
              "startLine": 50,
              "startColumn": 43,
              "endLine": 50,
              "endColumn": 80,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/NameFactoryLogger.java",
              "type": "Object[] [[]] : String",
              "code": "        return (Name) execute(new SafeCallable() {\n            public Object call() {\n                return nameFactory.create(namespaceURI, localName);\n            }}, \"create(String, String)\", new Object[]{namespaceURI, localName});\n    }\n\n    public Name create(final String nameString) {"
            },
            {
              "step": 14,
              "variableName": "new Object[]{namespaceURI, localName}",
              "startLine": 50,
              "startColumn": 43,
              "endLine": 50,
              "endColumn": 80,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/NameFactoryLogger.java",
              "type": "Object[] [[]] : String",
              "code": "        return (Name) execute(new SafeCallable() {\n            public Object call() {\n                return nameFactory.create(namespaceURI, localName);\n            }}, \"create(String, String)\", new Object[]{namespaceURI, localName});\n    }\n\n    public Name create(final String nameString) {"
            },
            {
              "step": 15,
              "variableName": "Object[] args",
              "startLine": 78,
              "startColumn": 69,
              "endLine": 78,
              "endColumn": 82,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/AbstractLogger.java",
              "type": "Object[] [[]] : String",
              "code": "     * @param args  the arguments passed to the method\n     * @return  the value returned from executing the <code>thunk</code>\n     */\n    protected Object execute(SafeCallable thunk, String methodName, Object[] args)  {\n        writer.enter(methodName, args);\n        Object result;\n        try {"
            },
            {
              "step": 16,
              "variableName": "args",
              "startLine": 83,
              "startColumn": 38,
              "endLine": 83,
              "endColumn": 42,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/AbstractLogger.java",
              "type": "Object[] [[]] : String",
              "code": "        Object result;\n        try {\n            result = thunk.call();\n            writer.leave(methodName, args, result);\n            return result;\n        }\n        catch (RuntimeException e) {"
            },
            {
              "step": 17,
              "variableName": "final Object[] args",
              "startLine": 65,
              "startColumn": 48,
              "endLine": 65,
              "endColumn": 67,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "Object[] [[]] : String",
              "code": "     * Logs the call at debug level is debug level is enabled.\n     * {@inheritDoc}\n     */\n    public void leave(final String methodName, final Object[] args, final Object result) {\n        if (log.isDebugEnabled()) {\n            log.debug(\"LEAVE(\" + systemTime() + \") | \" + methodName + \"(\" + formatArgs(args) + \") = \"\n                    + formatResult(result));"
            },
            {
              "step": 18,
              "variableName": "args",
              "startLine": 67,
              "startColumn": 88,
              "endLine": 67,
              "endColumn": 92,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "Object[] [[]] : String",
              "code": "     */\n    public void leave(final String methodName, final Object[] args, final Object result) {\n        if (log.isDebugEnabled()) {\n            log.debug(\"LEAVE(\" + systemTime() + \") | \" + methodName + \"(\" + formatArgs(args) + \") = \"\n                    + formatResult(result));\n        }\n    }"
            },
            {
              "step": 19,
              "variableName": "Object[] args",
              "startLine": 85,
              "startColumn": 31,
              "endLine": 85,
              "endColumn": 44,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "Object[] [[]] : String",
              "code": "\n    // -----------------------------------------------------< private >---\n\n    private String formatArgs(Object[] args) {\n        StringBuffer b = new StringBuffer();\n        formatArgs(args, b);\n        return b.toString();"
            },
            {
              "step": 20,
              "variableName": "args",
              "startLine": 87,
              "startColumn": 20,
              "endLine": 87,
              "endColumn": 24,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "Object[] [[]] : String",
              "code": "\n    private String formatArgs(Object[] args) {\n        StringBuffer b = new StringBuffer();\n        formatArgs(args, b);\n        return b.toString();\n    }\n"
            },
            {
              "step": 21,
              "variableName": "Object[] args",
              "startLine": 103,
              "startColumn": 29,
              "endLine": 103,
              "endColumn": 42,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "Object[] [[]] : String",
              "code": "        return sw.toString();\n    }\n\n    private void formatArgs(Object[] args, StringBuffer b) {\n        String separator = \"\";\n        for (int k = 0; k < args.length; k++) {\n            b.append(separator);"
            },
            {
              "step": 22,
              "variableName": "args",
              "startLine": 107,
              "startColumn": 23,
              "endLine": 107,
              "endColumn": 27,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "Object[] [[]] : String",
              "code": "        String separator = \"\";\n        for (int k = 0; k < args.length; k++) {\n            b.append(separator);\n            formatArg(args[k], b);\n            separator = \", \";\n        }\n    }"
            },
            {
              "step": 23,
              "variableName": "args[k]",
              "startLine": 107,
              "startColumn": 23,
              "endLine": 107,
              "endColumn": 30,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "String",
              "code": "        String separator = \"\";\n        for (int k = 0; k < args.length; k++) {\n            b.append(separator);\n            formatArg(args[k], b);\n            separator = \", \";\n        }\n    }"
            },
            {
              "step": 24,
              "variableName": "Object arg",
              "startLine": 112,
              "startColumn": 28,
              "endLine": 112,
              "endColumn": 38,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "String",
              "code": "        }\n    }\n\n    private void formatArg(Object arg, StringBuffer b) {\n        if (arg instanceof Object[]) {\n            b.append('[');\n            formatArgs((Object[]) arg, b);"
            },
            {
              "step": 25,
              "variableName": "arg",
              "startLine": 119,
              "startColumn": 22,
              "endLine": 119,
              "endColumn": 25,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "String",
              "code": "            b.append(']');\n        }\n        else {\n            b.append(arg);\n        }\n    }\n"
            },
            {
              "step": 26,
              "variableName": "b",
              "startLine": 119,
              "startColumn": 13,
              "endLine": 119,
              "endColumn": 14,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "StringBuffer",
              "code": "            b.append(']');\n        }\n        else {\n            b.append(arg);\n        }\n    }\n"
            },
            {
              "step": 27,
              "variableName": "b",
              "startLine": 107,
              "startColumn": 32,
              "endLine": 107,
              "endColumn": 33,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "StringBuffer",
              "code": "        String separator = \"\";\n        for (int k = 0; k < args.length; k++) {\n            b.append(separator);\n            formatArg(args[k], b);\n            separator = \", \";\n        }\n    }"
            },
            {
              "step": 28,
              "variableName": "b",
              "startLine": 87,
              "startColumn": 26,
              "endLine": 87,
              "endColumn": 27,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "StringBuffer",
              "code": "\n    private String formatArgs(Object[] args) {\n        StringBuffer b = new StringBuffer();\n        formatArgs(args, b);\n        return b.toString();\n    }\n"
            },
            {
              "step": 29,
              "variableName": "b",
              "startLine": 88,
              "startColumn": 16,
              "endLine": 88,
              "endColumn": 17,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "StringBuffer",
              "code": "    private String formatArgs(Object[] args) {\n        StringBuffer b = new StringBuffer();\n        formatArgs(args, b);\n        return b.toString();\n    }\n\n    private String formatResult(Object result) {"
            },
            {
              "step": 30,
              "variableName": "b.toString()",
              "startLine": 88,
              "startColumn": 16,
              "endLine": 88,
              "endColumn": 28,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "String",
              "code": "    private String formatArgs(Object[] args) {\n        StringBuffer b = new StringBuffer();\n        formatArgs(args, b);\n        return b.toString();\n    }\n\n    private String formatResult(Object result) {"
            },
            {
              "step": 31,
              "variableName": "formatArgs(args)",
              "startLine": 67,
              "startColumn": 77,
              "endLine": 67,
              "endColumn": 93,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "String",
              "code": "     */\n    public void leave(final String methodName, final Object[] args, final Object result) {\n        if (log.isDebugEnabled()) {\n            log.debug(\"LEAVE(\" + systemTime() + \") | \" + methodName + \"(\" + formatArgs(args) + \") = \"\n                    + formatResult(result));\n        }\n    }"
            },
            {
              "step": 32,
              "variableName": "\"LEAVE(\" + systemTim",
              "startLine": 67,
              "startColumn": 23,
              "endLine": 68,
              "endColumn": 43,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "",
              "code": "     */\n    public void leave(final String methodName, final Object[] args, final Object result) {\n        if (log.isDebugEnabled()) {\n            log.debug(\"LEAVE(\" + systemTime() + \") | \" + methodName + \"(\" + formatArgs(args) + \") = \"\n                    + formatResult(result));\n        }\n    }"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "currentToken",
              "startLine": 289,
              "startColumn": 38,
              "endLine": 289,
              "endColumn": 50,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-jcr-commons/src/main/java/org/apache/jackrabbit/commons/cnd/CompactNodeTypeDefReader.java",
              "type": "String",
              "code": "            do {\n                nextToken();\n                try {\n                    ntd.addSupertype(currentToken);\n                } catch (RepositoryException e) {\n                    lexer.fail(\"Error setting super type of \" + ntd.getName() + \" to \" + currentToken, e);\n                }"
            },
            {
              "step": 1,
              "variableName": "String name",
              "startLine": 147,
              "startColumn": 34,
              "endLine": 147,
              "endColumn": 45,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/QDefinitionBuilderFactory.java",
              "type": "String",
              "code": "        }\n\n        @Override\n        public void addSupertype(String name) throws IllegalNameException, NamespaceException {\n            supertypes.add(toName(name));\n        }\n"
            },
            {
              "step": 2,
              "variableName": "name",
              "startLine": 148,
              "startColumn": 35,
              "endLine": 148,
              "endColumn": 39,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/QDefinitionBuilderFactory.java",
              "type": "String",
              "code": "\n        @Override\n        public void addSupertype(String name) throws IllegalNameException, NamespaceException {\n            supertypes.add(toName(name));\n        }\n\n        @Override"
            },
            {
              "step": 3,
              "variableName": "String name",
              "startLine": 339,
              "startColumn": 25,
              "endLine": 339,
              "endColumn": 36,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/QDefinitionBuilderFactory.java",
              "type": "String",
              "code": "    }\n\n\n    private Name toName(String name) throws IllegalNameException, NamespaceException {\n        Name n = resolver.getQName(name);\n        String decodedLocalName = ISO9075.decode(n.getLocalName());\n        return NAME_FACTORY.create(n.getNamespaceURI(), decodedLocalName);"
            },
            {
              "step": 4,
              "variableName": "name",
              "startLine": 340,
              "startColumn": 36,
              "endLine": 340,
              "endColumn": 40,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/QDefinitionBuilderFactory.java",
              "type": "String",
              "code": "\n\n    private Name toName(String name) throws IllegalNameException, NamespaceException {\n        Name n = resolver.getQName(name);\n        String decodedLocalName = ISO9075.decode(n.getLocalName());\n        return NAME_FACTORY.create(n.getNamespaceURI(), decodedLocalName);\n    }"
            },
            {
              "step": 5,
              "variableName": "String name",
              "startLine": 73,
              "startColumn": 26,
              "endLine": 73,
              "endColumn": 37,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/conversion/DefaultNamePathResolver.java",
              "type": "String",
              "code": "        this.pResolver = pResolver;\n    }\n\n    public Name getQName(String name) throws IllegalNameException, NamespaceException {\n        return nResolver.getQName(name);\n    }\n"
            },
            {
              "step": 6,
              "variableName": "name",
              "startLine": 74,
              "startColumn": 35,
              "endLine": 74,
              "endColumn": 39,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/conversion/DefaultNamePathResolver.java",
              "type": "String",
              "code": "    }\n\n    public Name getQName(String name) throws IllegalNameException, NamespaceException {\n        return nResolver.getQName(name);\n    }\n\n    public String getJCRName(Name name) throws NamespaceException {"
            },
            {
              "step": 7,
              "variableName": "String jcrName",
              "startLine": 63,
              "startColumn": 26,
              "endLine": 63,
              "endColumn": 40,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/conversion/ParsingNameResolver.java",
              "type": "String",
              "code": "     * @throws NamespaceException if the namespace prefix can not be resolved.\n     * @see NameResolver#getQName(String)\n     */\n    public Name getQName(String jcrName) throws IllegalNameException, NamespaceException {\n        return NameParser.parse(jcrName, resolver, nameFactory);\n    }\n"
            },
            {
              "step": 8,
              "variableName": "jcrName",
              "startLine": 64,
              "startColumn": 33,
              "endLine": 64,
              "endColumn": 40,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/conversion/ParsingNameResolver.java",
              "type": "String",
              "code": "     * @see NameResolver#getQName(String)\n     */\n    public Name getQName(String jcrName) throws IllegalNameException, NamespaceException {\n        return NameParser.parse(jcrName, resolver, nameFactory);\n    }\n\n    /**"
            },
            {
              "step": 9,
              "variableName": "String jcrName",
              "startLine": 53,
              "startColumn": 30,
              "endLine": 53,
              "endColumn": 44,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/conversion/NameParser.java",
              "type": "String",
              "code": "     * JCR-style name.\n     * @throws NamespaceException If the jcr name contains an unknown prefix.\n     */\n    public static Name parse(String jcrName, NamespaceResolver resolver, NameFactory factory)\n            throws IllegalNameException, NamespaceException {\n\n        if (jcrName == null) {"
            },
            {
              "step": 10,
              "variableName": "localName",
              "startLine": 195,
              "startColumn": 36,
              "endLine": 195,
              "endColumn": 45,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/conversion/NameParser.java",
              "type": "String",
              "code": "        }\n\n        String localName = (nameStart == 0 ? jcrName : jcrName.substring(nameStart, len));\n        return factory.create(uri, localName);\n    }\n\n    private static String asDisplayableString(char c) {"
            },
            {
              "step": 11,
              "variableName": "final String localName",
              "startLine": 46,
              "startColumn": 51,
              "endLine": 46,
              "endColumn": 73,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/NameFactoryLogger.java",
              "type": "String",
              "code": "        return nameFactory;\n    }\n\n    public Name create(final String namespaceURI, final String localName) {\n        return (Name) execute(new SafeCallable() {\n            public Object call() {\n                return nameFactory.create(namespaceURI, localName);"
            },
            {
              "step": 12,
              "variableName": "localName",
              "startLine": 50,
              "startColumn": 70,
              "endLine": 50,
              "endColumn": 79,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/NameFactoryLogger.java",
              "type": "String",
              "code": "        return (Name) execute(new SafeCallable() {\n            public Object call() {\n                return nameFactory.create(namespaceURI, localName);\n            }}, \"create(String, String)\", new Object[]{namespaceURI, localName});\n    }\n\n    public Name create(final String nameString) {"
            },
            {
              "step": 13,
              "variableName": "new Object[]{namespaceURI, localName}",
              "startLine": 50,
              "startColumn": 43,
              "endLine": 50,
              "endColumn": 80,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/NameFactoryLogger.java",
              "type": "Object[] [[]] : String",
              "code": "        return (Name) execute(new SafeCallable() {\n            public Object call() {\n                return nameFactory.create(namespaceURI, localName);\n            }}, \"create(String, String)\", new Object[]{namespaceURI, localName});\n    }\n\n    public Name create(final String nameString) {"
            },
            {
              "step": 14,
              "variableName": "new Object[]{namespaceURI, localName}",
              "startLine": 50,
              "startColumn": 43,
              "endLine": 50,
              "endColumn": 80,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/NameFactoryLogger.java",
              "type": "Object[] [[]] : String",
              "code": "        return (Name) execute(new SafeCallable() {\n            public Object call() {\n                return nameFactory.create(namespaceURI, localName);\n            }}, \"create(String, String)\", new Object[]{namespaceURI, localName});\n    }\n\n    public Name create(final String nameString) {"
            },
            {
              "step": 15,
              "variableName": "Object[] args",
              "startLine": 78,
              "startColumn": 69,
              "endLine": 78,
              "endColumn": 82,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/AbstractLogger.java",
              "type": "Object[] [[]] : String",
              "code": "     * @param args  the arguments passed to the method\n     * @return  the value returned from executing the <code>thunk</code>\n     */\n    protected Object execute(SafeCallable thunk, String methodName, Object[] args)  {\n        writer.enter(methodName, args);\n        Object result;\n        try {"
            },
            {
              "step": 16,
              "variableName": "args",
              "startLine": 83,
              "startColumn": 38,
              "endLine": 83,
              "endColumn": 42,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/AbstractLogger.java",
              "type": "Object[] [[]] : String",
              "code": "        Object result;\n        try {\n            result = thunk.call();\n            writer.leave(methodName, args, result);\n            return result;\n        }\n        catch (RuntimeException e) {"
            },
            {
              "step": 17,
              "variableName": "final Object[] args",
              "startLine": 65,
              "startColumn": 48,
              "endLine": 65,
              "endColumn": 67,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "Object[] [[]] : String",
              "code": "     * Logs the call at debug level is debug level is enabled.\n     * {@inheritDoc}\n     */\n    public void leave(final String methodName, final Object[] args, final Object result) {\n        if (log.isDebugEnabled()) {\n            log.debug(\"LEAVE(\" + systemTime() + \") | \" + methodName + \"(\" + formatArgs(args) + \") = \"\n                    + formatResult(result));"
            },
            {
              "step": 18,
              "variableName": "args",
              "startLine": 67,
              "startColumn": 88,
              "endLine": 67,
              "endColumn": 92,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "Object[] [[]] : String",
              "code": "     */\n    public void leave(final String methodName, final Object[] args, final Object result) {\n        if (log.isDebugEnabled()) {\n            log.debug(\"LEAVE(\" + systemTime() + \") | \" + methodName + \"(\" + formatArgs(args) + \") = \"\n                    + formatResult(result));\n        }\n    }"
            },
            {
              "step": 19,
              "variableName": "Object[] args",
              "startLine": 85,
              "startColumn": 31,
              "endLine": 85,
              "endColumn": 44,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "Object[] [[]] : String",
              "code": "\n    // -----------------------------------------------------< private >---\n\n    private String formatArgs(Object[] args) {\n        StringBuffer b = new StringBuffer();\n        formatArgs(args, b);\n        return b.toString();"
            },
            {
              "step": 20,
              "variableName": "args",
              "startLine": 87,
              "startColumn": 20,
              "endLine": 87,
              "endColumn": 24,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "Object[] [[]] : String",
              "code": "\n    private String formatArgs(Object[] args) {\n        StringBuffer b = new StringBuffer();\n        formatArgs(args, b);\n        return b.toString();\n    }\n"
            },
            {
              "step": 21,
              "variableName": "Object[] args",
              "startLine": 103,
              "startColumn": 29,
              "endLine": 103,
              "endColumn": 42,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "Object[] [[]] : String",
              "code": "        return sw.toString();\n    }\n\n    private void formatArgs(Object[] args, StringBuffer b) {\n        String separator = \"\";\n        for (int k = 0; k < args.length; k++) {\n            b.append(separator);"
            },
            {
              "step": 22,
              "variableName": "args",
              "startLine": 107,
              "startColumn": 23,
              "endLine": 107,
              "endColumn": 27,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "Object[] [[]] : String",
              "code": "        String separator = \"\";\n        for (int k = 0; k < args.length; k++) {\n            b.append(separator);\n            formatArg(args[k], b);\n            separator = \", \";\n        }\n    }"
            },
            {
              "step": 23,
              "variableName": "args[k]",
              "startLine": 107,
              "startColumn": 23,
              "endLine": 107,
              "endColumn": 30,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "String",
              "code": "        String separator = \"\";\n        for (int k = 0; k < args.length; k++) {\n            b.append(separator);\n            formatArg(args[k], b);\n            separator = \", \";\n        }\n    }"
            },
            {
              "step": 24,
              "variableName": "Object arg",
              "startLine": 112,
              "startColumn": 28,
              "endLine": 112,
              "endColumn": 38,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "String",
              "code": "        }\n    }\n\n    private void formatArg(Object arg, StringBuffer b) {\n        if (arg instanceof Object[]) {\n            b.append('[');\n            formatArgs((Object[]) arg, b);"
            },
            {
              "step": 25,
              "variableName": "arg",
              "startLine": 119,
              "startColumn": 22,
              "endLine": 119,
              "endColumn": 25,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "String",
              "code": "            b.append(']');\n        }\n        else {\n            b.append(arg);\n        }\n    }\n"
            },
            {
              "step": 26,
              "variableName": "b",
              "startLine": 119,
              "startColumn": 13,
              "endLine": 119,
              "endColumn": 14,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "StringBuffer",
              "code": "            b.append(']');\n        }\n        else {\n            b.append(arg);\n        }\n    }\n"
            },
            {
              "step": 27,
              "variableName": "b",
              "startLine": 107,
              "startColumn": 32,
              "endLine": 107,
              "endColumn": 33,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "StringBuffer",
              "code": "        String separator = \"\";\n        for (int k = 0; k < args.length; k++) {\n            b.append(separator);\n            formatArg(args[k], b);\n            separator = \", \";\n        }\n    }"
            },
            {
              "step": 28,
              "variableName": "b",
              "startLine": 87,
              "startColumn": 26,
              "endLine": 87,
              "endColumn": 27,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "StringBuffer",
              "code": "\n    private String formatArgs(Object[] args) {\n        StringBuffer b = new StringBuffer();\n        formatArgs(args, b);\n        return b.toString();\n    }\n"
            },
            {
              "step": 29,
              "variableName": "b",
              "startLine": 88,
              "startColumn": 16,
              "endLine": 88,
              "endColumn": 17,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "StringBuffer",
              "code": "    private String formatArgs(Object[] args) {\n        StringBuffer b = new StringBuffer();\n        formatArgs(args, b);\n        return b.toString();\n    }\n\n    private String formatResult(Object result) {"
            },
            {
              "step": 30,
              "variableName": "b.toString()",
              "startLine": 88,
              "startColumn": 16,
              "endLine": 88,
              "endColumn": 28,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "String",
              "code": "    private String formatArgs(Object[] args) {\n        StringBuffer b = new StringBuffer();\n        formatArgs(args, b);\n        return b.toString();\n    }\n\n    private String formatResult(Object result) {"
            },
            {
              "step": 31,
              "variableName": "formatArgs(args)",
              "startLine": 67,
              "startColumn": 77,
              "endLine": 67,
              "endColumn": 93,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "String",
              "code": "     */\n    public void leave(final String methodName, final Object[] args, final Object result) {\n        if (log.isDebugEnabled()) {\n            log.debug(\"LEAVE(\" + systemTime() + \") | \" + methodName + \"(\" + formatArgs(args) + \") = \"\n                    + formatResult(result));\n        }\n    }"
            },
            {
              "step": 32,
              "variableName": "\"LEAVE(\" + systemTim",
              "startLine": 67,
              "startColumn": 23,
              "endLine": 68,
              "endColumn": 43,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "",
              "code": "     */\n    public void leave(final String methodName, final Object[] args, final Object result) {\n        if (log.isDebugEnabled()) {\n            log.debug(\"LEAVE(\" + systemTime() + \") | \" + methodName + \"(\" + formatArgs(args) + \") = \"\n                    + formatResult(result));\n        }\n    }"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 29,
      "fileName": "Slf4jLogWriter.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "currentToken",
              "startLine": 233,
              "startColumn": 25,
              "endLine": 233,
              "endColumn": 37,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-jcr-commons/src/main/java/org/apache/jackrabbit/commons/cnd/CompactNodeTypeDefReader.java",
              "type": "String",
              "code": "            return false;\n        }\n        nextToken();\n        String prefix = currentToken;\n        nextToken();\n        if (!currentTokenEquals('=')) {\n            lexer.fail(\"Missing = in namespace decl.\");"
            },
            {
              "step": 1,
              "variableName": "prefix",
              "startLine": 245,
              "startColumn": 34,
              "endLine": 245,
              "endColumn": 40,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-jcr-commons/src/main/java/org/apache/jackrabbit/commons/cnd/CompactNodeTypeDefReader.java",
              "type": "String",
              "code": "            lexer.fail(\"Missing > in namespace decl.\");\n        }\n        try {\n            factory.setNamespace(prefix, uri);\n        } catch (RepositoryException e) {\n            lexer.fail(\"Error setting namespace mapping \" + currentToken, e);\n        }"
            },
            {
              "step": 2,
              "variableName": "String prefix",
              "startLine": 90,
              "startColumn": 30,
              "endLine": 90,
              "endColumn": 43,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-jcr-commons/src/main/java/org/apache/jackrabbit/commons/cnd/TemplateBuilderFactory.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public void setNamespace(String prefix, String uri) {\n        try {\n            namespaceRegistry.registerNamespace(prefix, uri);\n        }"
            },
            {
              "step": 3,
              "variableName": "prefix",
              "startLine": 92,
              "startColumn": 49,
              "endLine": 92,
              "endColumn": 55,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-jcr-commons/src/main/java/org/apache/jackrabbit/commons/cnd/TemplateBuilderFactory.java",
              "type": "String",
              "code": "    @Override\n    public void setNamespace(String prefix, String uri) {\n        try {\n            namespaceRegistry.registerNamespace(prefix, uri);\n        }\n        catch (RepositoryException e) {\n            // ignore"
            },
            {
              "step": 4,
              "variableName": "String prefix",
              "startLine": 53,
              "startColumn": 35,
              "endLine": 53,
              "endColumn": 48,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-jcr2spi/src/main/java/org/apache/jackrabbit/jcr2spi/NamespaceRegistryImpl.java",
              "type": "String",
              "code": "    /**\n     * @see NamespaceRegistry#registerNamespace(String, String)\n     */\n    public void registerNamespace(String prefix, String uri) throws NamespaceException, UnsupportedRepositoryOperationException, RepositoryException {\n        storage.registerNamespace(prefix, uri);\n    }\n"
            },
            {
              "step": 5,
              "variableName": "prefix",
              "startLine": 54,
              "startColumn": 35,
              "endLine": 54,
              "endColumn": 41,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-jcr2spi/src/main/java/org/apache/jackrabbit/jcr2spi/NamespaceRegistryImpl.java",
              "type": "String",
              "code": "     * @see NamespaceRegistry#registerNamespace(String, String)\n     */\n    public void registerNamespace(String prefix, String uri) throws NamespaceException, UnsupportedRepositoryOperationException, RepositoryException {\n        storage.registerNamespace(prefix, uri);\n    }\n\n    /**"
            },
            {
              "step": 6,
              "variableName": "String prefix",
              "startLine": 755,
              "startColumn": 35,
              "endLine": 755,
              "endColumn": 48,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-jcr2spi/src/main/java/org/apache/jackrabbit/jcr2spi/WorkspaceManager.java",
              "type": "String",
              "code": "        return service.getNamespaceURI(sessionInfo, prefix);\n    }\n\n    public void registerNamespace(String prefix, String uri) throws NamespaceException, UnsupportedRepositoryOperationException, AccessDeniedException, RepositoryException {\n        service.registerNamespace(sessionInfo, prefix, uri);\n    }\n"
            },
            {
              "step": 7,
              "variableName": "prefix",
              "startLine": 756,
              "startColumn": 48,
              "endLine": 756,
              "endColumn": 54,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-jcr2spi/src/main/java/org/apache/jackrabbit/jcr2spi/WorkspaceManager.java",
              "type": "String",
              "code": "    }\n\n    public void registerNamespace(String prefix, String uri) throws NamespaceException, UnsupportedRepositoryOperationException, AccessDeniedException, RepositoryException {\n        service.registerNamespace(sessionInfo, prefix, uri);\n    }\n\n    public void unregisterNamespace(String uri) throws NamespaceException, UnsupportedRepositoryOperationException, AccessDeniedException, RepositoryException {"
            },
            {
              "step": 8,
              "variableName": "final String prefix",
              "startLine": 741,
              "startColumn": 66,
              "endLine": 741,
              "endColumn": 85,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/RepositoryServiceLogger.java",
              "type": "String",
              "code": "        }, \"getNamespacePrefix(SessionInfo, String)\", new Object[]{unwrap(sessionInfo), uri});\n    }\n\n    public void registerNamespace(final SessionInfo sessionInfo, final String prefix, final String uri)\n            throws RepositoryException {\n\n        execute(new Callable() {"
            },
            {
              "step": 9,
              "variableName": "prefix",
              "startLine": 749,
              "startColumn": 96,
              "endLine": 749,
              "endColumn": 102,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/RepositoryServiceLogger.java",
              "type": "String",
              "code": "                service.registerNamespace(unwrap(sessionInfo), prefix, uri);\n                return null;\n            }\n        }, \"registerNamespace(SessionInfo, String, String)\", new Object[]{unwrap(sessionInfo), prefix, uri});\n    }\n\n    public void unregisterNamespace(final SessionInfo sessionInfo, final String uri)"
            },
            {
              "step": 10,
              "variableName": "new Object[]{unwrap(sessionInfo), prefix, uri}",
              "startLine": 749,
              "startColumn": 62,
              "endLine": 749,
              "endColumn": 108,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/RepositoryServiceLogger.java",
              "type": "Object[] [[]] : String",
              "code": "                service.registerNamespace(unwrap(sessionInfo), prefix, uri);\n                return null;\n            }\n        }, \"registerNamespace(SessionInfo, String, String)\", new Object[]{unwrap(sessionInfo), prefix, uri});\n    }\n\n    public void unregisterNamespace(final SessionInfo sessionInfo, final String uri)"
            },
            {
              "step": 11,
              "variableName": "new Object[]{unwrap(sessionInfo), prefix, uri}",
              "startLine": 749,
              "startColumn": 62,
              "endLine": 749,
              "endColumn": 108,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/RepositoryServiceLogger.java",
              "type": "Object[] [[]] : String",
              "code": "                service.registerNamespace(unwrap(sessionInfo), prefix, uri);\n                return null;\n            }\n        }, \"registerNamespace(SessionInfo, String, String)\", new Object[]{unwrap(sessionInfo), prefix, uri});\n    }\n\n    public void unregisterNamespace(final SessionInfo sessionInfo, final String uri)"
            },
            {
              "step": 12,
              "variableName": "Object[] args",
              "startLine": 52,
              "startColumn": 65,
              "endLine": 52,
              "endColumn": 78,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/AbstractLogger.java",
              "type": "Object[] [[]] : String",
              "code": "     * @throws RepositoryException  if executing the <code>thunk</code> throws an Exception the\n     *   exception is re-thrown.\n     */\n    protected Object execute(Callable thunk, String methodName, Object[] args) throws RepositoryException {\n        writer.enter(methodName, args);\n        Object result = null;\n        try {"
            },
            {
              "step": 13,
              "variableName": "args",
              "startLine": 61,
              "startColumn": 38,
              "endLine": 61,
              "endColumn": 42,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/AbstractLogger.java",
              "type": "Object[] [[]] : String",
              "code": "            return result;\n        }\n        catch (RepositoryException e) {\n            writer.error(methodName, args, e);\n            throw e;\n        }\n        catch (RuntimeException e) {"
            },
            {
              "step": 14,
              "variableName": "final Object[] args",
              "startLine": 76,
              "startColumn": 48,
              "endLine": 76,
              "endColumn": 67,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "Object[] [[]] : String",
              "code": "     * Logs the exception including a stack trace at debug level is debug level is enabled.\n     * {@inheritDoc}\n     */\n    public void error(final String methodName, final Object[] args, final Exception e) {\n        if (log.isDebugEnabled()) {\n            log.debug(\"ERROR(\" + systemTime() + \") | \" + methodName + \"(\" + formatArgs(args) + \") | \"\n                    + formatException(e));"
            },
            {
              "step": 15,
              "variableName": "args",
              "startLine": 78,
              "startColumn": 88,
              "endLine": 78,
              "endColumn": 92,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "Object[] [[]] : String",
              "code": "     */\n    public void error(final String methodName, final Object[] args, final Exception e) {\n        if (log.isDebugEnabled()) {\n            log.debug(\"ERROR(\" + systemTime() + \") | \" + methodName + \"(\" + formatArgs(args) + \") | \"\n                    + formatException(e));\n        }\n    }"
            },
            {
              "step": 16,
              "variableName": "Object[] args",
              "startLine": 85,
              "startColumn": 31,
              "endLine": 85,
              "endColumn": 44,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "Object[] [[]] : String",
              "code": "\n    // -----------------------------------------------------< private >---\n\n    private String formatArgs(Object[] args) {\n        StringBuffer b = new StringBuffer();\n        formatArgs(args, b);\n        return b.toString();"
            },
            {
              "step": 17,
              "variableName": "args",
              "startLine": 87,
              "startColumn": 20,
              "endLine": 87,
              "endColumn": 24,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "Object[] [[]] : String",
              "code": "\n    private String formatArgs(Object[] args) {\n        StringBuffer b = new StringBuffer();\n        formatArgs(args, b);\n        return b.toString();\n    }\n"
            },
            {
              "step": 18,
              "variableName": "Object[] args",
              "startLine": 103,
              "startColumn": 29,
              "endLine": 103,
              "endColumn": 42,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "Object[] [[]] : String",
              "code": "        return sw.toString();\n    }\n\n    private void formatArgs(Object[] args, StringBuffer b) {\n        String separator = \"\";\n        for (int k = 0; k < args.length; k++) {\n            b.append(separator);"
            },
            {
              "step": 19,
              "variableName": "args",
              "startLine": 107,
              "startColumn": 23,
              "endLine": 107,
              "endColumn": 27,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "Object[] [[]] : String",
              "code": "        String separator = \"\";\n        for (int k = 0; k < args.length; k++) {\n            b.append(separator);\n            formatArg(args[k], b);\n            separator = \", \";\n        }\n    }"
            },
            {
              "step": 20,
              "variableName": "args[k]",
              "startLine": 107,
              "startColumn": 23,
              "endLine": 107,
              "endColumn": 30,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "String",
              "code": "        String separator = \"\";\n        for (int k = 0; k < args.length; k++) {\n            b.append(separator);\n            formatArg(args[k], b);\n            separator = \", \";\n        }\n    }"
            },
            {
              "step": 21,
              "variableName": "Object arg",
              "startLine": 112,
              "startColumn": 28,
              "endLine": 112,
              "endColumn": 38,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "String",
              "code": "        }\n    }\n\n    private void formatArg(Object arg, StringBuffer b) {\n        if (arg instanceof Object[]) {\n            b.append('[');\n            formatArgs((Object[]) arg, b);"
            },
            {
              "step": 22,
              "variableName": "arg",
              "startLine": 119,
              "startColumn": 22,
              "endLine": 119,
              "endColumn": 25,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "String",
              "code": "            b.append(']');\n        }\n        else {\n            b.append(arg);\n        }\n    }\n"
            },
            {
              "step": 23,
              "variableName": "b",
              "startLine": 119,
              "startColumn": 13,
              "endLine": 119,
              "endColumn": 14,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "StringBuffer",
              "code": "            b.append(']');\n        }\n        else {\n            b.append(arg);\n        }\n    }\n"
            },
            {
              "step": 24,
              "variableName": "b",
              "startLine": 107,
              "startColumn": 32,
              "endLine": 107,
              "endColumn": 33,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "StringBuffer",
              "code": "        String separator = \"\";\n        for (int k = 0; k < args.length; k++) {\n            b.append(separator);\n            formatArg(args[k], b);\n            separator = \", \";\n        }\n    }"
            },
            {
              "step": 25,
              "variableName": "b",
              "startLine": 87,
              "startColumn": 26,
              "endLine": 87,
              "endColumn": 27,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "StringBuffer",
              "code": "\n    private String formatArgs(Object[] args) {\n        StringBuffer b = new StringBuffer();\n        formatArgs(args, b);\n        return b.toString();\n    }\n"
            },
            {
              "step": 26,
              "variableName": "b",
              "startLine": 88,
              "startColumn": 16,
              "endLine": 88,
              "endColumn": 17,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "StringBuffer",
              "code": "    private String formatArgs(Object[] args) {\n        StringBuffer b = new StringBuffer();\n        formatArgs(args, b);\n        return b.toString();\n    }\n\n    private String formatResult(Object result) {"
            },
            {
              "step": 27,
              "variableName": "b.toString()",
              "startLine": 88,
              "startColumn": 16,
              "endLine": 88,
              "endColumn": 28,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "String",
              "code": "    private String formatArgs(Object[] args) {\n        StringBuffer b = new StringBuffer();\n        formatArgs(args, b);\n        return b.toString();\n    }\n\n    private String formatResult(Object result) {"
            },
            {
              "step": 28,
              "variableName": "formatArgs(args)",
              "startLine": 78,
              "startColumn": 77,
              "endLine": 78,
              "endColumn": 93,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "String",
              "code": "     */\n    public void error(final String methodName, final Object[] args, final Exception e) {\n        if (log.isDebugEnabled()) {\n            log.debug(\"ERROR(\" + systemTime() + \") | \" + methodName + \"(\" + formatArgs(args) + \") | \"\n                    + formatException(e));\n        }\n    }"
            },
            {
              "step": 29,
              "variableName": "\"ERROR(\" + systemT",
              "startLine": 78,
              "startColumn": 23,
              "endLine": 79,
              "endColumn": 41,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "",
              "code": "     */\n    public void error(final String methodName, final Object[] args, final Exception e) {\n        if (log.isDebugEnabled()) {\n            log.debug(\"ERROR(\" + systemTime() + \") | \" + methodName + \"(\" + formatArgs(args) + \") | \"\n                    + formatException(e));\n        }\n    }"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "currentToken",
              "startLine": 239,
              "startColumn": 22,
              "endLine": 239,
              "endColumn": 34,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-jcr-commons/src/main/java/org/apache/jackrabbit/commons/cnd/CompactNodeTypeDefReader.java",
              "type": "String",
              "code": "            lexer.fail(\"Missing = in namespace decl.\");\n        }\n        nextToken();\n        String uri = currentToken;\n        nextToken();\n        if (!currentTokenEquals('>')) {\n            lexer.fail(\"Missing > in namespace decl.\");"
            },
            {
              "step": 1,
              "variableName": "uri",
              "startLine": 245,
              "startColumn": 42,
              "endLine": 245,
              "endColumn": 45,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-jcr-commons/src/main/java/org/apache/jackrabbit/commons/cnd/CompactNodeTypeDefReader.java",
              "type": "String",
              "code": "            lexer.fail(\"Missing > in namespace decl.\");\n        }\n        try {\n            factory.setNamespace(prefix, uri);\n        } catch (RepositoryException e) {\n            lexer.fail(\"Error setting namespace mapping \" + currentToken, e);\n        }"
            },
            {
              "step": 2,
              "variableName": "String uri",
              "startLine": 90,
              "startColumn": 45,
              "endLine": 90,
              "endColumn": 55,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-jcr-commons/src/main/java/org/apache/jackrabbit/commons/cnd/TemplateBuilderFactory.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public void setNamespace(String prefix, String uri) {\n        try {\n            namespaceRegistry.registerNamespace(prefix, uri);\n        }"
            },
            {
              "step": 3,
              "variableName": "uri",
              "startLine": 92,
              "startColumn": 57,
              "endLine": 92,
              "endColumn": 60,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-jcr-commons/src/main/java/org/apache/jackrabbit/commons/cnd/TemplateBuilderFactory.java",
              "type": "String",
              "code": "    @Override\n    public void setNamespace(String prefix, String uri) {\n        try {\n            namespaceRegistry.registerNamespace(prefix, uri);\n        }\n        catch (RepositoryException e) {\n            // ignore"
            },
            {
              "step": 4,
              "variableName": "String uri",
              "startLine": 53,
              "startColumn": 50,
              "endLine": 53,
              "endColumn": 60,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-jcr2spi/src/main/java/org/apache/jackrabbit/jcr2spi/NamespaceRegistryImpl.java",
              "type": "String",
              "code": "    /**\n     * @see NamespaceRegistry#registerNamespace(String, String)\n     */\n    public void registerNamespace(String prefix, String uri) throws NamespaceException, UnsupportedRepositoryOperationException, RepositoryException {\n        storage.registerNamespace(prefix, uri);\n    }\n"
            },
            {
              "step": 5,
              "variableName": "uri",
              "startLine": 54,
              "startColumn": 43,
              "endLine": 54,
              "endColumn": 46,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-jcr2spi/src/main/java/org/apache/jackrabbit/jcr2spi/NamespaceRegistryImpl.java",
              "type": "String",
              "code": "     * @see NamespaceRegistry#registerNamespace(String, String)\n     */\n    public void registerNamespace(String prefix, String uri) throws NamespaceException, UnsupportedRepositoryOperationException, RepositoryException {\n        storage.registerNamespace(prefix, uri);\n    }\n\n    /**"
            },
            {
              "step": 6,
              "variableName": "String uri",
              "startLine": 755,
              "startColumn": 50,
              "endLine": 755,
              "endColumn": 60,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-jcr2spi/src/main/java/org/apache/jackrabbit/jcr2spi/WorkspaceManager.java",
              "type": "String",
              "code": "        return service.getNamespaceURI(sessionInfo, prefix);\n    }\n\n    public void registerNamespace(String prefix, String uri) throws NamespaceException, UnsupportedRepositoryOperationException, AccessDeniedException, RepositoryException {\n        service.registerNamespace(sessionInfo, prefix, uri);\n    }\n"
            },
            {
              "step": 7,
              "variableName": "uri",
              "startLine": 756,
              "startColumn": 56,
              "endLine": 756,
              "endColumn": 59,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-jcr2spi/src/main/java/org/apache/jackrabbit/jcr2spi/WorkspaceManager.java",
              "type": "String",
              "code": "    }\n\n    public void registerNamespace(String prefix, String uri) throws NamespaceException, UnsupportedRepositoryOperationException, AccessDeniedException, RepositoryException {\n        service.registerNamespace(sessionInfo, prefix, uri);\n    }\n\n    public void unregisterNamespace(String uri) throws NamespaceException, UnsupportedRepositoryOperationException, AccessDeniedException, RepositoryException {"
            },
            {
              "step": 8,
              "variableName": "final String uri",
              "startLine": 741,
              "startColumn": 87,
              "endLine": 741,
              "endColumn": 103,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/RepositoryServiceLogger.java",
              "type": "String",
              "code": "        }, \"getNamespacePrefix(SessionInfo, String)\", new Object[]{unwrap(sessionInfo), uri});\n    }\n\n    public void registerNamespace(final SessionInfo sessionInfo, final String prefix, final String uri)\n            throws RepositoryException {\n\n        execute(new Callable() {"
            },
            {
              "step": 9,
              "variableName": "uri",
              "startLine": 749,
              "startColumn": 104,
              "endLine": 749,
              "endColumn": 107,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/RepositoryServiceLogger.java",
              "type": "String",
              "code": "                service.registerNamespace(unwrap(sessionInfo), prefix, uri);\n                return null;\n            }\n        }, \"registerNamespace(SessionInfo, String, String)\", new Object[]{unwrap(sessionInfo), prefix, uri});\n    }\n\n    public void unregisterNamespace(final SessionInfo sessionInfo, final String uri)"
            },
            {
              "step": 10,
              "variableName": "new Object[]{unwrap(sessionInfo), prefix, uri}",
              "startLine": 749,
              "startColumn": 62,
              "endLine": 749,
              "endColumn": 108,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/RepositoryServiceLogger.java",
              "type": "Object[] [[]] : String",
              "code": "                service.registerNamespace(unwrap(sessionInfo), prefix, uri);\n                return null;\n            }\n        }, \"registerNamespace(SessionInfo, String, String)\", new Object[]{unwrap(sessionInfo), prefix, uri});\n    }\n\n    public void unregisterNamespace(final SessionInfo sessionInfo, final String uri)"
            },
            {
              "step": 11,
              "variableName": "new Object[]{unwrap(sessionInfo), prefix, uri}",
              "startLine": 749,
              "startColumn": 62,
              "endLine": 749,
              "endColumn": 108,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/RepositoryServiceLogger.java",
              "type": "Object[] [[]] : String",
              "code": "                service.registerNamespace(unwrap(sessionInfo), prefix, uri);\n                return null;\n            }\n        }, \"registerNamespace(SessionInfo, String, String)\", new Object[]{unwrap(sessionInfo), prefix, uri});\n    }\n\n    public void unregisterNamespace(final SessionInfo sessionInfo, final String uri)"
            },
            {
              "step": 12,
              "variableName": "Object[] args",
              "startLine": 52,
              "startColumn": 65,
              "endLine": 52,
              "endColumn": 78,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/AbstractLogger.java",
              "type": "Object[] [[]] : String",
              "code": "     * @throws RepositoryException  if executing the <code>thunk</code> throws an Exception the\n     *   exception is re-thrown.\n     */\n    protected Object execute(Callable thunk, String methodName, Object[] args) throws RepositoryException {\n        writer.enter(methodName, args);\n        Object result = null;\n        try {"
            },
            {
              "step": 13,
              "variableName": "args",
              "startLine": 61,
              "startColumn": 38,
              "endLine": 61,
              "endColumn": 42,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/AbstractLogger.java",
              "type": "Object[] [[]] : String",
              "code": "            return result;\n        }\n        catch (RepositoryException e) {\n            writer.error(methodName, args, e);\n            throw e;\n        }\n        catch (RuntimeException e) {"
            },
            {
              "step": 14,
              "variableName": "final Object[] args",
              "startLine": 76,
              "startColumn": 48,
              "endLine": 76,
              "endColumn": 67,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "Object[] [[]] : String",
              "code": "     * Logs the exception including a stack trace at debug level is debug level is enabled.\n     * {@inheritDoc}\n     */\n    public void error(final String methodName, final Object[] args, final Exception e) {\n        if (log.isDebugEnabled()) {\n            log.debug(\"ERROR(\" + systemTime() + \") | \" + methodName + \"(\" + formatArgs(args) + \") | \"\n                    + formatException(e));"
            },
            {
              "step": 15,
              "variableName": "args",
              "startLine": 78,
              "startColumn": 88,
              "endLine": 78,
              "endColumn": 92,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "Object[] [[]] : String",
              "code": "     */\n    public void error(final String methodName, final Object[] args, final Exception e) {\n        if (log.isDebugEnabled()) {\n            log.debug(\"ERROR(\" + systemTime() + \") | \" + methodName + \"(\" + formatArgs(args) + \") | \"\n                    + formatException(e));\n        }\n    }"
            },
            {
              "step": 16,
              "variableName": "Object[] args",
              "startLine": 85,
              "startColumn": 31,
              "endLine": 85,
              "endColumn": 44,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "Object[] [[]] : String",
              "code": "\n    // -----------------------------------------------------< private >---\n\n    private String formatArgs(Object[] args) {\n        StringBuffer b = new StringBuffer();\n        formatArgs(args, b);\n        return b.toString();"
            },
            {
              "step": 17,
              "variableName": "args",
              "startLine": 87,
              "startColumn": 20,
              "endLine": 87,
              "endColumn": 24,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "Object[] [[]] : String",
              "code": "\n    private String formatArgs(Object[] args) {\n        StringBuffer b = new StringBuffer();\n        formatArgs(args, b);\n        return b.toString();\n    }\n"
            },
            {
              "step": 18,
              "variableName": "Object[] args",
              "startLine": 103,
              "startColumn": 29,
              "endLine": 103,
              "endColumn": 42,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "Object[] [[]] : String",
              "code": "        return sw.toString();\n    }\n\n    private void formatArgs(Object[] args, StringBuffer b) {\n        String separator = \"\";\n        for (int k = 0; k < args.length; k++) {\n            b.append(separator);"
            },
            {
              "step": 19,
              "variableName": "args",
              "startLine": 107,
              "startColumn": 23,
              "endLine": 107,
              "endColumn": 27,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "Object[] [[]] : String",
              "code": "        String separator = \"\";\n        for (int k = 0; k < args.length; k++) {\n            b.append(separator);\n            formatArg(args[k], b);\n            separator = \", \";\n        }\n    }"
            },
            {
              "step": 20,
              "variableName": "args[k]",
              "startLine": 107,
              "startColumn": 23,
              "endLine": 107,
              "endColumn": 30,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "String",
              "code": "        String separator = \"\";\n        for (int k = 0; k < args.length; k++) {\n            b.append(separator);\n            formatArg(args[k], b);\n            separator = \", \";\n        }\n    }"
            },
            {
              "step": 21,
              "variableName": "Object arg",
              "startLine": 112,
              "startColumn": 28,
              "endLine": 112,
              "endColumn": 38,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "String",
              "code": "        }\n    }\n\n    private void formatArg(Object arg, StringBuffer b) {\n        if (arg instanceof Object[]) {\n            b.append('[');\n            formatArgs((Object[]) arg, b);"
            },
            {
              "step": 22,
              "variableName": "arg",
              "startLine": 119,
              "startColumn": 22,
              "endLine": 119,
              "endColumn": 25,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "String",
              "code": "            b.append(']');\n        }\n        else {\n            b.append(arg);\n        }\n    }\n"
            },
            {
              "step": 23,
              "variableName": "b",
              "startLine": 119,
              "startColumn": 13,
              "endLine": 119,
              "endColumn": 14,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "StringBuffer",
              "code": "            b.append(']');\n        }\n        else {\n            b.append(arg);\n        }\n    }\n"
            },
            {
              "step": 24,
              "variableName": "b",
              "startLine": 107,
              "startColumn": 32,
              "endLine": 107,
              "endColumn": 33,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "StringBuffer",
              "code": "        String separator = \"\";\n        for (int k = 0; k < args.length; k++) {\n            b.append(separator);\n            formatArg(args[k], b);\n            separator = \", \";\n        }\n    }"
            },
            {
              "step": 25,
              "variableName": "b",
              "startLine": 87,
              "startColumn": 26,
              "endLine": 87,
              "endColumn": 27,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "StringBuffer",
              "code": "\n    private String formatArgs(Object[] args) {\n        StringBuffer b = new StringBuffer();\n        formatArgs(args, b);\n        return b.toString();\n    }\n"
            },
            {
              "step": 26,
              "variableName": "b",
              "startLine": 88,
              "startColumn": 16,
              "endLine": 88,
              "endColumn": 17,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "StringBuffer",
              "code": "    private String formatArgs(Object[] args) {\n        StringBuffer b = new StringBuffer();\n        formatArgs(args, b);\n        return b.toString();\n    }\n\n    private String formatResult(Object result) {"
            },
            {
              "step": 27,
              "variableName": "b.toString()",
              "startLine": 88,
              "startColumn": 16,
              "endLine": 88,
              "endColumn": 28,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "String",
              "code": "    private String formatArgs(Object[] args) {\n        StringBuffer b = new StringBuffer();\n        formatArgs(args, b);\n        return b.toString();\n    }\n\n    private String formatResult(Object result) {"
            },
            {
              "step": 28,
              "variableName": "formatArgs(args)",
              "startLine": 78,
              "startColumn": 77,
              "endLine": 78,
              "endColumn": 93,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "String",
              "code": "     */\n    public void error(final String methodName, final Object[] args, final Exception e) {\n        if (log.isDebugEnabled()) {\n            log.debug(\"ERROR(\" + systemTime() + \") | \" + methodName + \"(\" + formatArgs(args) + \") | \"\n                    + formatException(e));\n        }\n    }"
            },
            {
              "step": 29,
              "variableName": "\"ERROR(\" + systemT",
              "startLine": 78,
              "startColumn": 23,
              "endLine": 79,
              "endColumn": 41,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "",
              "code": "     */\n    public void error(final String methodName, final Object[] args, final Exception e) {\n        if (log.isDebugEnabled()) {\n            log.debug(\"ERROR(\" + systemTime() + \") | \" + methodName + \"(\" + formatArgs(args) + \") | \"\n                    + formatException(e));\n        }\n    }"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "currentToken",
              "startLine": 265,
              "startColumn": 25,
              "endLine": 265,
              "endColumn": 37,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-jcr-commons/src/main/java/org/apache/jackrabbit/commons/cnd/CompactNodeTypeDefReader.java",
              "type": "String",
              "code": "        }\n        nextToken();\n        try {\n            ntd.setName(currentToken);\n        } catch (RepositoryException e) {\n            lexer.fail(\"Error setting node type name \" + currentToken, e);\n        }"
            },
            {
              "step": 1,
              "variableName": "String name",
              "startLine": 133,
              "startColumn": 29,
              "endLine": 133,
              "endColumn": 40,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-jcr-commons/src/main/java/org/apache/jackrabbit/commons/cnd/TemplateBuilderFactory.java",
              "type": "String",
              "code": "        }\n\n        @Override\n        public void setName(String name) throws RepositoryException {\n            super.setName(name);\n            template.setName(name);\n        }"
            },
            {
              "step": 2,
              "variableName": "name",
              "startLine": 135,
              "startColumn": 30,
              "endLine": 135,
              "endColumn": 34,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-jcr-commons/src/main/java/org/apache/jackrabbit/commons/cnd/TemplateBuilderFactory.java",
              "type": "String",
              "code": "        @Override\n        public void setName(String name) throws RepositoryException {\n            super.setName(name);\n            template.setName(name);\n        }\n\n        @Override"
            },
            {
              "step": 3,
              "variableName": "String name",
              "startLine": 115,
              "startColumn": 25,
              "endLine": 115,
              "endColumn": 36,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/NodeTypeTemplateImpl.java",
              "type": "String",
              "code": "    /**\n     * {@inheritDoc}\n     */\n    public void setName(String name) throws ConstraintViolationException {\n        try {\n            this.name = resolver.getQName(name);\n        } catch (RepositoryException e) {"
            },
            {
              "step": 4,
              "variableName": "name",
              "startLine": 117,
              "startColumn": 43,
              "endLine": 117,
              "endColumn": 47,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/NodeTypeTemplateImpl.java",
              "type": "String",
              "code": "     */\n    public void setName(String name) throws ConstraintViolationException {\n        try {\n            this.name = resolver.getQName(name);\n        } catch (RepositoryException e) {\n            throw new ConstraintViolationException(e);\n        }"
            },
            {
              "step": 5,
              "variableName": "String name",
              "startLine": 73,
              "startColumn": 26,
              "endLine": 73,
              "endColumn": 37,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/conversion/DefaultNamePathResolver.java",
              "type": "String",
              "code": "        this.pResolver = pResolver;\n    }\n\n    public Name getQName(String name) throws IllegalNameException, NamespaceException {\n        return nResolver.getQName(name);\n    }\n"
            },
            {
              "step": 6,
              "variableName": "name",
              "startLine": 74,
              "startColumn": 35,
              "endLine": 74,
              "endColumn": 39,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/conversion/DefaultNamePathResolver.java",
              "type": "String",
              "code": "    }\n\n    public Name getQName(String name) throws IllegalNameException, NamespaceException {\n        return nResolver.getQName(name);\n    }\n\n    public String getJCRName(Name name) throws NamespaceException {"
            },
            {
              "step": 7,
              "variableName": "String jcrName",
              "startLine": 63,
              "startColumn": 26,
              "endLine": 63,
              "endColumn": 40,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/conversion/ParsingNameResolver.java",
              "type": "String",
              "code": "     * @throws NamespaceException if the namespace prefix can not be resolved.\n     * @see NameResolver#getQName(String)\n     */\n    public Name getQName(String jcrName) throws IllegalNameException, NamespaceException {\n        return NameParser.parse(jcrName, resolver, nameFactory);\n    }\n"
            },
            {
              "step": 8,
              "variableName": "jcrName",
              "startLine": 64,
              "startColumn": 33,
              "endLine": 64,
              "endColumn": 40,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/conversion/ParsingNameResolver.java",
              "type": "String",
              "code": "     * @see NameResolver#getQName(String)\n     */\n    public Name getQName(String jcrName) throws IllegalNameException, NamespaceException {\n        return NameParser.parse(jcrName, resolver, nameFactory);\n    }\n\n    /**"
            },
            {
              "step": 9,
              "variableName": "String jcrName",
              "startLine": 53,
              "startColumn": 30,
              "endLine": 53,
              "endColumn": 44,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/conversion/NameParser.java",
              "type": "String",
              "code": "     * JCR-style name.\n     * @throws NamespaceException If the jcr name contains an unknown prefix.\n     */\n    public static Name parse(String jcrName, NamespaceResolver resolver, NameFactory factory)\n            throws IllegalNameException, NamespaceException {\n\n        if (jcrName == null) {"
            },
            {
              "step": 10,
              "variableName": "localName",
              "startLine": 195,
              "startColumn": 36,
              "endLine": 195,
              "endColumn": 45,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/conversion/NameParser.java",
              "type": "String",
              "code": "        }\n\n        String localName = (nameStart == 0 ? jcrName : jcrName.substring(nameStart, len));\n        return factory.create(uri, localName);\n    }\n\n    private static String asDisplayableString(char c) {"
            },
            {
              "step": 11,
              "variableName": "final String localName",
              "startLine": 46,
              "startColumn": 51,
              "endLine": 46,
              "endColumn": 73,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/NameFactoryLogger.java",
              "type": "String",
              "code": "        return nameFactory;\n    }\n\n    public Name create(final String namespaceURI, final String localName) {\n        return (Name) execute(new SafeCallable() {\n            public Object call() {\n                return nameFactory.create(namespaceURI, localName);"
            },
            {
              "step": 12,
              "variableName": "localName",
              "startLine": 50,
              "startColumn": 70,
              "endLine": 50,
              "endColumn": 79,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/NameFactoryLogger.java",
              "type": "String",
              "code": "        return (Name) execute(new SafeCallable() {\n            public Object call() {\n                return nameFactory.create(namespaceURI, localName);\n            }}, \"create(String, String)\", new Object[]{namespaceURI, localName});\n    }\n\n    public Name create(final String nameString) {"
            },
            {
              "step": 13,
              "variableName": "new Object[]{namespaceURI, localName}",
              "startLine": 50,
              "startColumn": 43,
              "endLine": 50,
              "endColumn": 80,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/NameFactoryLogger.java",
              "type": "Object[] [[]] : String",
              "code": "        return (Name) execute(new SafeCallable() {\n            public Object call() {\n                return nameFactory.create(namespaceURI, localName);\n            }}, \"create(String, String)\", new Object[]{namespaceURI, localName});\n    }\n\n    public Name create(final String nameString) {"
            },
            {
              "step": 14,
              "variableName": "new Object[]{namespaceURI, localName}",
              "startLine": 50,
              "startColumn": 43,
              "endLine": 50,
              "endColumn": 80,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/NameFactoryLogger.java",
              "type": "Object[] [[]] : String",
              "code": "        return (Name) execute(new SafeCallable() {\n            public Object call() {\n                return nameFactory.create(namespaceURI, localName);\n            }}, \"create(String, String)\", new Object[]{namespaceURI, localName});\n    }\n\n    public Name create(final String nameString) {"
            },
            {
              "step": 15,
              "variableName": "Object[] args",
              "startLine": 78,
              "startColumn": 69,
              "endLine": 78,
              "endColumn": 82,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/AbstractLogger.java",
              "type": "Object[] [[]] : String",
              "code": "     * @param args  the arguments passed to the method\n     * @return  the value returned from executing the <code>thunk</code>\n     */\n    protected Object execute(SafeCallable thunk, String methodName, Object[] args)  {\n        writer.enter(methodName, args);\n        Object result;\n        try {"
            },
            {
              "step": 16,
              "variableName": "args",
              "startLine": 87,
              "startColumn": 38,
              "endLine": 87,
              "endColumn": 42,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/AbstractLogger.java",
              "type": "Object[] [[]] : String",
              "code": "            return result;\n        }\n        catch (RuntimeException e) {\n            writer.error(methodName, args, e);\n            throw e;\n        }\n    }"
            },
            {
              "step": 17,
              "variableName": "final Object[] args",
              "startLine": 76,
              "startColumn": 48,
              "endLine": 76,
              "endColumn": 67,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "Object[] [[]] : String",
              "code": "     * Logs the exception including a stack trace at debug level is debug level is enabled.\n     * {@inheritDoc}\n     */\n    public void error(final String methodName, final Object[] args, final Exception e) {\n        if (log.isDebugEnabled()) {\n            log.debug(\"ERROR(\" + systemTime() + \") | \" + methodName + \"(\" + formatArgs(args) + \") | \"\n                    + formatException(e));"
            },
            {
              "step": 18,
              "variableName": "args",
              "startLine": 78,
              "startColumn": 88,
              "endLine": 78,
              "endColumn": 92,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "Object[] [[]] : String",
              "code": "     */\n    public void error(final String methodName, final Object[] args, final Exception e) {\n        if (log.isDebugEnabled()) {\n            log.debug(\"ERROR(\" + systemTime() + \") | \" + methodName + \"(\" + formatArgs(args) + \") | \"\n                    + formatException(e));\n        }\n    }"
            },
            {
              "step": 19,
              "variableName": "Object[] args",
              "startLine": 85,
              "startColumn": 31,
              "endLine": 85,
              "endColumn": 44,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "Object[] [[]] : String",
              "code": "\n    // -----------------------------------------------------< private >---\n\n    private String formatArgs(Object[] args) {\n        StringBuffer b = new StringBuffer();\n        formatArgs(args, b);\n        return b.toString();"
            },
            {
              "step": 20,
              "variableName": "args",
              "startLine": 87,
              "startColumn": 20,
              "endLine": 87,
              "endColumn": 24,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "Object[] [[]] : String",
              "code": "\n    private String formatArgs(Object[] args) {\n        StringBuffer b = new StringBuffer();\n        formatArgs(args, b);\n        return b.toString();\n    }\n"
            },
            {
              "step": 21,
              "variableName": "Object[] args",
              "startLine": 103,
              "startColumn": 29,
              "endLine": 103,
              "endColumn": 42,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "Object[] [[]] : String",
              "code": "        return sw.toString();\n    }\n\n    private void formatArgs(Object[] args, StringBuffer b) {\n        String separator = \"\";\n        for (int k = 0; k < args.length; k++) {\n            b.append(separator);"
            },
            {
              "step": 22,
              "variableName": "args",
              "startLine": 107,
              "startColumn": 23,
              "endLine": 107,
              "endColumn": 27,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "Object[] [[]] : String",
              "code": "        String separator = \"\";\n        for (int k = 0; k < args.length; k++) {\n            b.append(separator);\n            formatArg(args[k], b);\n            separator = \", \";\n        }\n    }"
            },
            {
              "step": 23,
              "variableName": "args[k]",
              "startLine": 107,
              "startColumn": 23,
              "endLine": 107,
              "endColumn": 30,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "String",
              "code": "        String separator = \"\";\n        for (int k = 0; k < args.length; k++) {\n            b.append(separator);\n            formatArg(args[k], b);\n            separator = \", \";\n        }\n    }"
            },
            {
              "step": 24,
              "variableName": "Object arg",
              "startLine": 112,
              "startColumn": 28,
              "endLine": 112,
              "endColumn": 38,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "String",
              "code": "        }\n    }\n\n    private void formatArg(Object arg, StringBuffer b) {\n        if (arg instanceof Object[]) {\n            b.append('[');\n            formatArgs((Object[]) arg, b);"
            },
            {
              "step": 25,
              "variableName": "arg",
              "startLine": 119,
              "startColumn": 22,
              "endLine": 119,
              "endColumn": 25,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "String",
              "code": "            b.append(']');\n        }\n        else {\n            b.append(arg);\n        }\n    }\n"
            },
            {
              "step": 26,
              "variableName": "b",
              "startLine": 119,
              "startColumn": 13,
              "endLine": 119,
              "endColumn": 14,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "StringBuffer",
              "code": "            b.append(']');\n        }\n        else {\n            b.append(arg);\n        }\n    }\n"
            },
            {
              "step": 27,
              "variableName": "b",
              "startLine": 107,
              "startColumn": 32,
              "endLine": 107,
              "endColumn": 33,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "StringBuffer",
              "code": "        String separator = \"\";\n        for (int k = 0; k < args.length; k++) {\n            b.append(separator);\n            formatArg(args[k], b);\n            separator = \", \";\n        }\n    }"
            },
            {
              "step": 28,
              "variableName": "b",
              "startLine": 87,
              "startColumn": 26,
              "endLine": 87,
              "endColumn": 27,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "StringBuffer",
              "code": "\n    private String formatArgs(Object[] args) {\n        StringBuffer b = new StringBuffer();\n        formatArgs(args, b);\n        return b.toString();\n    }\n"
            },
            {
              "step": 29,
              "variableName": "b",
              "startLine": 88,
              "startColumn": 16,
              "endLine": 88,
              "endColumn": 17,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "StringBuffer",
              "code": "    private String formatArgs(Object[] args) {\n        StringBuffer b = new StringBuffer();\n        formatArgs(args, b);\n        return b.toString();\n    }\n\n    private String formatResult(Object result) {"
            },
            {
              "step": 30,
              "variableName": "b.toString()",
              "startLine": 88,
              "startColumn": 16,
              "endLine": 88,
              "endColumn": 28,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "String",
              "code": "    private String formatArgs(Object[] args) {\n        StringBuffer b = new StringBuffer();\n        formatArgs(args, b);\n        return b.toString();\n    }\n\n    private String formatResult(Object result) {"
            },
            {
              "step": 31,
              "variableName": "formatArgs(args)",
              "startLine": 78,
              "startColumn": 77,
              "endLine": 78,
              "endColumn": 93,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "String",
              "code": "     */\n    public void error(final String methodName, final Object[] args, final Exception e) {\n        if (log.isDebugEnabled()) {\n            log.debug(\"ERROR(\" + systemTime() + \") | \" + methodName + \"(\" + formatArgs(args) + \") | \"\n                    + formatException(e));\n        }\n    }"
            },
            {
              "step": 32,
              "variableName": "\"ERROR(\" + systemT",
              "startLine": 78,
              "startColumn": 23,
              "endLine": 79,
              "endColumn": 41,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "",
              "code": "     */\n    public void error(final String methodName, final Object[] args, final Exception e) {\n        if (log.isDebugEnabled()) {\n            log.debug(\"ERROR(\" + systemTime() + \") | \" + methodName + \"(\" + formatArgs(args) + \") | \"\n                    + formatException(e));\n        }\n    }"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "currentToken",
              "startLine": 289,
              "startColumn": 38,
              "endLine": 289,
              "endColumn": 50,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-jcr-commons/src/main/java/org/apache/jackrabbit/commons/cnd/CompactNodeTypeDefReader.java",
              "type": "String",
              "code": "            do {\n                nextToken();\n                try {\n                    ntd.addSupertype(currentToken);\n                } catch (RepositoryException e) {\n                    lexer.fail(\"Error setting super type of \" + ntd.getName() + \" to \" + currentToken, e);\n                }"
            },
            {
              "step": 1,
              "variableName": "String name",
              "startLine": 147,
              "startColumn": 34,
              "endLine": 147,
              "endColumn": 45,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/QDefinitionBuilderFactory.java",
              "type": "String",
              "code": "        }\n\n        @Override\n        public void addSupertype(String name) throws IllegalNameException, NamespaceException {\n            supertypes.add(toName(name));\n        }\n"
            },
            {
              "step": 2,
              "variableName": "name",
              "startLine": 148,
              "startColumn": 35,
              "endLine": 148,
              "endColumn": 39,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/QDefinitionBuilderFactory.java",
              "type": "String",
              "code": "\n        @Override\n        public void addSupertype(String name) throws IllegalNameException, NamespaceException {\n            supertypes.add(toName(name));\n        }\n\n        @Override"
            },
            {
              "step": 3,
              "variableName": "String name",
              "startLine": 339,
              "startColumn": 25,
              "endLine": 339,
              "endColumn": 36,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/QDefinitionBuilderFactory.java",
              "type": "String",
              "code": "    }\n\n\n    private Name toName(String name) throws IllegalNameException, NamespaceException {\n        Name n = resolver.getQName(name);\n        String decodedLocalName = ISO9075.decode(n.getLocalName());\n        return NAME_FACTORY.create(n.getNamespaceURI(), decodedLocalName);"
            },
            {
              "step": 4,
              "variableName": "name",
              "startLine": 340,
              "startColumn": 36,
              "endLine": 340,
              "endColumn": 40,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/QDefinitionBuilderFactory.java",
              "type": "String",
              "code": "\n\n    private Name toName(String name) throws IllegalNameException, NamespaceException {\n        Name n = resolver.getQName(name);\n        String decodedLocalName = ISO9075.decode(n.getLocalName());\n        return NAME_FACTORY.create(n.getNamespaceURI(), decodedLocalName);\n    }"
            },
            {
              "step": 5,
              "variableName": "String name",
              "startLine": 73,
              "startColumn": 26,
              "endLine": 73,
              "endColumn": 37,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/conversion/DefaultNamePathResolver.java",
              "type": "String",
              "code": "        this.pResolver = pResolver;\n    }\n\n    public Name getQName(String name) throws IllegalNameException, NamespaceException {\n        return nResolver.getQName(name);\n    }\n"
            },
            {
              "step": 6,
              "variableName": "name",
              "startLine": 74,
              "startColumn": 35,
              "endLine": 74,
              "endColumn": 39,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/conversion/DefaultNamePathResolver.java",
              "type": "String",
              "code": "    }\n\n    public Name getQName(String name) throws IllegalNameException, NamespaceException {\n        return nResolver.getQName(name);\n    }\n\n    public String getJCRName(Name name) throws NamespaceException {"
            },
            {
              "step": 7,
              "variableName": "String jcrName",
              "startLine": 63,
              "startColumn": 26,
              "endLine": 63,
              "endColumn": 40,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/conversion/ParsingNameResolver.java",
              "type": "String",
              "code": "     * @throws NamespaceException if the namespace prefix can not be resolved.\n     * @see NameResolver#getQName(String)\n     */\n    public Name getQName(String jcrName) throws IllegalNameException, NamespaceException {\n        return NameParser.parse(jcrName, resolver, nameFactory);\n    }\n"
            },
            {
              "step": 8,
              "variableName": "jcrName",
              "startLine": 64,
              "startColumn": 33,
              "endLine": 64,
              "endColumn": 40,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/conversion/ParsingNameResolver.java",
              "type": "String",
              "code": "     * @see NameResolver#getQName(String)\n     */\n    public Name getQName(String jcrName) throws IllegalNameException, NamespaceException {\n        return NameParser.parse(jcrName, resolver, nameFactory);\n    }\n\n    /**"
            },
            {
              "step": 9,
              "variableName": "String jcrName",
              "startLine": 53,
              "startColumn": 30,
              "endLine": 53,
              "endColumn": 44,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/conversion/NameParser.java",
              "type": "String",
              "code": "     * JCR-style name.\n     * @throws NamespaceException If the jcr name contains an unknown prefix.\n     */\n    public static Name parse(String jcrName, NamespaceResolver resolver, NameFactory factory)\n            throws IllegalNameException, NamespaceException {\n\n        if (jcrName == null) {"
            },
            {
              "step": 10,
              "variableName": "localName",
              "startLine": 195,
              "startColumn": 36,
              "endLine": 195,
              "endColumn": 45,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/conversion/NameParser.java",
              "type": "String",
              "code": "        }\n\n        String localName = (nameStart == 0 ? jcrName : jcrName.substring(nameStart, len));\n        return factory.create(uri, localName);\n    }\n\n    private static String asDisplayableString(char c) {"
            },
            {
              "step": 11,
              "variableName": "final String localName",
              "startLine": 46,
              "startColumn": 51,
              "endLine": 46,
              "endColumn": 73,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/NameFactoryLogger.java",
              "type": "String",
              "code": "        return nameFactory;\n    }\n\n    public Name create(final String namespaceURI, final String localName) {\n        return (Name) execute(new SafeCallable() {\n            public Object call() {\n                return nameFactory.create(namespaceURI, localName);"
            },
            {
              "step": 12,
              "variableName": "localName",
              "startLine": 50,
              "startColumn": 70,
              "endLine": 50,
              "endColumn": 79,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/NameFactoryLogger.java",
              "type": "String",
              "code": "        return (Name) execute(new SafeCallable() {\n            public Object call() {\n                return nameFactory.create(namespaceURI, localName);\n            }}, \"create(String, String)\", new Object[]{namespaceURI, localName});\n    }\n\n    public Name create(final String nameString) {"
            },
            {
              "step": 13,
              "variableName": "new Object[]{namespaceURI, localName}",
              "startLine": 50,
              "startColumn": 43,
              "endLine": 50,
              "endColumn": 80,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/NameFactoryLogger.java",
              "type": "Object[] [[]] : String",
              "code": "        return (Name) execute(new SafeCallable() {\n            public Object call() {\n                return nameFactory.create(namespaceURI, localName);\n            }}, \"create(String, String)\", new Object[]{namespaceURI, localName});\n    }\n\n    public Name create(final String nameString) {"
            },
            {
              "step": 14,
              "variableName": "new Object[]{namespaceURI, localName}",
              "startLine": 50,
              "startColumn": 43,
              "endLine": 50,
              "endColumn": 80,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/NameFactoryLogger.java",
              "type": "Object[] [[]] : String",
              "code": "        return (Name) execute(new SafeCallable() {\n            public Object call() {\n                return nameFactory.create(namespaceURI, localName);\n            }}, \"create(String, String)\", new Object[]{namespaceURI, localName});\n    }\n\n    public Name create(final String nameString) {"
            },
            {
              "step": 15,
              "variableName": "Object[] args",
              "startLine": 78,
              "startColumn": 69,
              "endLine": 78,
              "endColumn": 82,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/AbstractLogger.java",
              "type": "Object[] [[]] : String",
              "code": "     * @param args  the arguments passed to the method\n     * @return  the value returned from executing the <code>thunk</code>\n     */\n    protected Object execute(SafeCallable thunk, String methodName, Object[] args)  {\n        writer.enter(methodName, args);\n        Object result;\n        try {"
            },
            {
              "step": 16,
              "variableName": "args",
              "startLine": 87,
              "startColumn": 38,
              "endLine": 87,
              "endColumn": 42,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/AbstractLogger.java",
              "type": "Object[] [[]] : String",
              "code": "            return result;\n        }\n        catch (RuntimeException e) {\n            writer.error(methodName, args, e);\n            throw e;\n        }\n    }"
            },
            {
              "step": 17,
              "variableName": "final Object[] args",
              "startLine": 76,
              "startColumn": 48,
              "endLine": 76,
              "endColumn": 67,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "Object[] [[]] : String",
              "code": "     * Logs the exception including a stack trace at debug level is debug level is enabled.\n     * {@inheritDoc}\n     */\n    public void error(final String methodName, final Object[] args, final Exception e) {\n        if (log.isDebugEnabled()) {\n            log.debug(\"ERROR(\" + systemTime() + \") | \" + methodName + \"(\" + formatArgs(args) + \") | \"\n                    + formatException(e));"
            },
            {
              "step": 18,
              "variableName": "args",
              "startLine": 78,
              "startColumn": 88,
              "endLine": 78,
              "endColumn": 92,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "Object[] [[]] : String",
              "code": "     */\n    public void error(final String methodName, final Object[] args, final Exception e) {\n        if (log.isDebugEnabled()) {\n            log.debug(\"ERROR(\" + systemTime() + \") | \" + methodName + \"(\" + formatArgs(args) + \") | \"\n                    + formatException(e));\n        }\n    }"
            },
            {
              "step": 19,
              "variableName": "Object[] args",
              "startLine": 85,
              "startColumn": 31,
              "endLine": 85,
              "endColumn": 44,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "Object[] [[]] : String",
              "code": "\n    // -----------------------------------------------------< private >---\n\n    private String formatArgs(Object[] args) {\n        StringBuffer b = new StringBuffer();\n        formatArgs(args, b);\n        return b.toString();"
            },
            {
              "step": 20,
              "variableName": "args",
              "startLine": 87,
              "startColumn": 20,
              "endLine": 87,
              "endColumn": 24,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "Object[] [[]] : String",
              "code": "\n    private String formatArgs(Object[] args) {\n        StringBuffer b = new StringBuffer();\n        formatArgs(args, b);\n        return b.toString();\n    }\n"
            },
            {
              "step": 21,
              "variableName": "Object[] args",
              "startLine": 103,
              "startColumn": 29,
              "endLine": 103,
              "endColumn": 42,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "Object[] [[]] : String",
              "code": "        return sw.toString();\n    }\n\n    private void formatArgs(Object[] args, StringBuffer b) {\n        String separator = \"\";\n        for (int k = 0; k < args.length; k++) {\n            b.append(separator);"
            },
            {
              "step": 22,
              "variableName": "args",
              "startLine": 107,
              "startColumn": 23,
              "endLine": 107,
              "endColumn": 27,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "Object[] [[]] : String",
              "code": "        String separator = \"\";\n        for (int k = 0; k < args.length; k++) {\n            b.append(separator);\n            formatArg(args[k], b);\n            separator = \", \";\n        }\n    }"
            },
            {
              "step": 23,
              "variableName": "args[k]",
              "startLine": 107,
              "startColumn": 23,
              "endLine": 107,
              "endColumn": 30,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "String",
              "code": "        String separator = \"\";\n        for (int k = 0; k < args.length; k++) {\n            b.append(separator);\n            formatArg(args[k], b);\n            separator = \", \";\n        }\n    }"
            },
            {
              "step": 24,
              "variableName": "Object arg",
              "startLine": 112,
              "startColumn": 28,
              "endLine": 112,
              "endColumn": 38,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "String",
              "code": "        }\n    }\n\n    private void formatArg(Object arg, StringBuffer b) {\n        if (arg instanceof Object[]) {\n            b.append('[');\n            formatArgs((Object[]) arg, b);"
            },
            {
              "step": 25,
              "variableName": "arg",
              "startLine": 119,
              "startColumn": 22,
              "endLine": 119,
              "endColumn": 25,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "String",
              "code": "            b.append(']');\n        }\n        else {\n            b.append(arg);\n        }\n    }\n"
            },
            {
              "step": 26,
              "variableName": "b",
              "startLine": 119,
              "startColumn": 13,
              "endLine": 119,
              "endColumn": 14,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "StringBuffer",
              "code": "            b.append(']');\n        }\n        else {\n            b.append(arg);\n        }\n    }\n"
            },
            {
              "step": 27,
              "variableName": "b",
              "startLine": 107,
              "startColumn": 32,
              "endLine": 107,
              "endColumn": 33,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "StringBuffer",
              "code": "        String separator = \"\";\n        for (int k = 0; k < args.length; k++) {\n            b.append(separator);\n            formatArg(args[k], b);\n            separator = \", \";\n        }\n    }"
            },
            {
              "step": 28,
              "variableName": "b",
              "startLine": 87,
              "startColumn": 26,
              "endLine": 87,
              "endColumn": 27,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "StringBuffer",
              "code": "\n    private String formatArgs(Object[] args) {\n        StringBuffer b = new StringBuffer();\n        formatArgs(args, b);\n        return b.toString();\n    }\n"
            },
            {
              "step": 29,
              "variableName": "b",
              "startLine": 88,
              "startColumn": 16,
              "endLine": 88,
              "endColumn": 17,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "StringBuffer",
              "code": "    private String formatArgs(Object[] args) {\n        StringBuffer b = new StringBuffer();\n        formatArgs(args, b);\n        return b.toString();\n    }\n\n    private String formatResult(Object result) {"
            },
            {
              "step": 30,
              "variableName": "b.toString()",
              "startLine": 88,
              "startColumn": 16,
              "endLine": 88,
              "endColumn": 28,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "String",
              "code": "    private String formatArgs(Object[] args) {\n        StringBuffer b = new StringBuffer();\n        formatArgs(args, b);\n        return b.toString();\n    }\n\n    private String formatResult(Object result) {"
            },
            {
              "step": 31,
              "variableName": "formatArgs(args)",
              "startLine": 78,
              "startColumn": 77,
              "endLine": 78,
              "endColumn": 93,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "String",
              "code": "     */\n    public void error(final String methodName, final Object[] args, final Exception e) {\n        if (log.isDebugEnabled()) {\n            log.debug(\"ERROR(\" + systemTime() + \") | \" + methodName + \"(\" + formatArgs(args) + \") | \"\n                    + formatException(e));\n        }\n    }"
            },
            {
              "step": 32,
              "variableName": "\"ERROR(\" + systemT",
              "startLine": 78,
              "startColumn": 23,
              "endLine": 79,
              "endColumn": 41,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java",
              "type": "",
              "code": "     */\n    public void error(final String methodName, final Object[] args, final Exception e) {\n        if (log.isDebugEnabled()) {\n            log.debug(\"ERROR(\" + systemTime() + \") | \" + methodName + \"(\" + formatArgs(args) + \") | \"\n                    + formatException(e));\n        }\n    }"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 30,
      "fileName": "BooleanConstraint.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "currentToken",
              "startLine": 595,
              "startColumn": 39,
              "endLine": 595,
              "endColumn": 51,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-jcr-commons/src/main/java/org/apache/jackrabbit/commons/cnd/CompactNodeTypeDefReader.java",
              "type": "String",
              "code": "        do {\n            nextToken();\n            try {\n                pd.addValueConstraint(currentToken);\n            } catch (RepositoryException e) {\n                lexer.fail(\"Error adding value constraint for \" + pd.getName() + \" to \" + currentToken, e);\n            }"
            },
            {
              "step": 1,
              "variableName": "String constraint",
              "startLine": 246,
              "startColumn": 40,
              "endLine": 246,
              "endColumn": 57,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/QDefinitionBuilderFactory.java",
              "type": "String",
              "code": "        }\n\n        @Override\n        public void addValueConstraint(String constraint) throws InvalidConstraintException {\n            builder.addValueConstraint(ValueConstraint.create(getRequiredType(), constraint, resolver));\n        }\n"
            },
            {
              "step": 2,
              "variableName": "constraint",
              "startLine": 247,
              "startColumn": 82,
              "endLine": 247,
              "endColumn": 92,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/QDefinitionBuilderFactory.java",
              "type": "String",
              "code": "\n        @Override\n        public void addValueConstraint(String constraint) throws InvalidConstraintException {\n            builder.addValueConstraint(ValueConstraint.create(getRequiredType(), constraint, resolver));\n        }\n\n        @Override"
            },
            {
              "step": 3,
              "variableName": "String jcrDefinition",
              "startLine": 231,
              "startColumn": 52,
              "endLine": 231,
              "endColumn": 72,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/constraint/ValueConstraint.java",
              "type": "String",
              "code": "     * @return a new value constraint\n     * @throws InvalidConstraintException if the constraint is invalid\n     */\n    public static ValueConstraint create(int type, String jcrDefinition,\n                                         NamePathResolver resolver)\n            throws InvalidConstraintException {\n        if (jcrDefinition == null) {"
            },
            {
              "step": 4,
              "variableName": "jcrDefinition",
              "startLine": 243,
              "startColumn": 46,
              "endLine": 243,
              "endColumn": 59,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/constraint/ValueConstraint.java",
              "type": "String",
              "code": "                return new StringConstraint(jcrDefinition);\n\n            case PropertyType.BOOLEAN:\n                return new BooleanConstraint(jcrDefinition);\n\n            case PropertyType.BINARY:\n                return new NumericConstraint(jcrDefinition);"
            },
            {
              "step": 5,
              "variableName": "String definition",
              "startLine": 33,
              "startColumn": 30,
              "endLine": 33,
              "endColumn": 47,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/constraint/BooleanConstraint.java",
              "type": "String",
              "code": "\n    private final boolean reqBool;\n\n    public BooleanConstraint(String definition) throws InvalidConstraintException {\n        super(definition);\n\n        // constraint format: 'true' or 'false'"
            },
            {
              "step": 6,
              "variableName": "msg",
              "startLine": 44,
              "startColumn": 23,
              "endLine": 44,
              "endColumn": 26,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/constraint/BooleanConstraint.java",
              "type": "",
              "code": "        } else {\n            String msg = \"'\" + definition\n                    + \"' is not a valid value constraint format for BOOLEAN values\";\n            log.debug(msg);\n            throw new InvalidConstraintException(msg);\n        }\n    }"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 31,
      "fileName": "DateConstraint.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "currentToken",
              "startLine": 595,
              "startColumn": 39,
              "endLine": 595,
              "endColumn": 51,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-jcr-commons/src/main/java/org/apache/jackrabbit/commons/cnd/CompactNodeTypeDefReader.java",
              "type": "String",
              "code": "        do {\n            nextToken();\n            try {\n                pd.addValueConstraint(currentToken);\n            } catch (RepositoryException e) {\n                lexer.fail(\"Error adding value constraint for \" + pd.getName() + \" to \" + currentToken, e);\n            }"
            },
            {
              "step": 1,
              "variableName": "String constraint",
              "startLine": 246,
              "startColumn": 40,
              "endLine": 246,
              "endColumn": 57,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/QDefinitionBuilderFactory.java",
              "type": "String",
              "code": "        }\n\n        @Override\n        public void addValueConstraint(String constraint) throws InvalidConstraintException {\n            builder.addValueConstraint(ValueConstraint.create(getRequiredType(), constraint, resolver));\n        }\n"
            },
            {
              "step": 2,
              "variableName": "constraint",
              "startLine": 247,
              "startColumn": 82,
              "endLine": 247,
              "endColumn": 92,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/QDefinitionBuilderFactory.java",
              "type": "String",
              "code": "\n        @Override\n        public void addValueConstraint(String constraint) throws InvalidConstraintException {\n            builder.addValueConstraint(ValueConstraint.create(getRequiredType(), constraint, resolver));\n        }\n\n        @Override"
            },
            {
              "step": 3,
              "variableName": "String jcrDefinition",
              "startLine": 231,
              "startColumn": 52,
              "endLine": 231,
              "endColumn": 72,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/constraint/ValueConstraint.java",
              "type": "String",
              "code": "     * @return a new value constraint\n     * @throws InvalidConstraintException if the constraint is invalid\n     */\n    public static ValueConstraint create(int type, String jcrDefinition,\n                                         NamePathResolver resolver)\n            throws InvalidConstraintException {\n        if (jcrDefinition == null) {"
            },
            {
              "step": 4,
              "variableName": "jcrDefinition",
              "startLine": 249,
              "startColumn": 43,
              "endLine": 249,
              "endColumn": 56,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/constraint/ValueConstraint.java",
              "type": "String",
              "code": "                return new NumericConstraint(jcrDefinition);\n\n            case PropertyType.DATE:\n                return new DateConstraint(jcrDefinition);\n\n            case PropertyType.LONG:\n            case PropertyType.DOUBLE:"
            },
            {
              "step": 5,
              "variableName": "String definition",
              "startLine": 45,
              "startColumn": 27,
              "endLine": 45,
              "endColumn": 44,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/constraint/DateConstraint.java",
              "type": "String",
              "code": "\n    private final Calendar upperLimit;\n\n    public DateConstraint(String definition) throws InvalidConstraintException {\n        super(definition);\n\n        // format: '(<fromDate>, <toDate>)', '[<fromDate>, <toDate>]', '[, <toDate>]' etc."
            },
            {
              "step": 6,
              "variableName": "msg",
              "startLine": 77,
              "startColumn": 31,
              "endLine": 77,
              "endColumn": 34,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/constraint/DateConstraint.java",
              "type": "",
              "code": "                if (lowerLimit == null && upperLimit == null) {\n                    String msg = \"'\" + definition\n                            + \"' is not a valid value constraint format for dates: neither min- nor max-date specified\";\n                    log.debug(msg);\n                    throw new InvalidConstraintException(msg);\n                }\n                if (lowerLimit != null && upperLimit != null) {"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 32,
      "fileName": "DateConstraint.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "currentToken",
              "startLine": 595,
              "startColumn": 39,
              "endLine": 595,
              "endColumn": 51,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-jcr-commons/src/main/java/org/apache/jackrabbit/commons/cnd/CompactNodeTypeDefReader.java",
              "type": "String",
              "code": "        do {\n            nextToken();\n            try {\n                pd.addValueConstraint(currentToken);\n            } catch (RepositoryException e) {\n                lexer.fail(\"Error adding value constraint for \" + pd.getName() + \" to \" + currentToken, e);\n            }"
            },
            {
              "step": 1,
              "variableName": "String constraint",
              "startLine": 246,
              "startColumn": 40,
              "endLine": 246,
              "endColumn": 57,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/QDefinitionBuilderFactory.java",
              "type": "String",
              "code": "        }\n\n        @Override\n        public void addValueConstraint(String constraint) throws InvalidConstraintException {\n            builder.addValueConstraint(ValueConstraint.create(getRequiredType(), constraint, resolver));\n        }\n"
            },
            {
              "step": 2,
              "variableName": "constraint",
              "startLine": 247,
              "startColumn": 82,
              "endLine": 247,
              "endColumn": 92,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/QDefinitionBuilderFactory.java",
              "type": "String",
              "code": "\n        @Override\n        public void addValueConstraint(String constraint) throws InvalidConstraintException {\n            builder.addValueConstraint(ValueConstraint.create(getRequiredType(), constraint, resolver));\n        }\n\n        @Override"
            },
            {
              "step": 3,
              "variableName": "String jcrDefinition",
              "startLine": 231,
              "startColumn": 52,
              "endLine": 231,
              "endColumn": 72,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/constraint/ValueConstraint.java",
              "type": "String",
              "code": "     * @return a new value constraint\n     * @throws InvalidConstraintException if the constraint is invalid\n     */\n    public static ValueConstraint create(int type, String jcrDefinition,\n                                         NamePathResolver resolver)\n            throws InvalidConstraintException {\n        if (jcrDefinition == null) {"
            },
            {
              "step": 4,
              "variableName": "jcrDefinition",
              "startLine": 249,
              "startColumn": 43,
              "endLine": 249,
              "endColumn": 56,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/constraint/ValueConstraint.java",
              "type": "String",
              "code": "                return new NumericConstraint(jcrDefinition);\n\n            case PropertyType.DATE:\n                return new DateConstraint(jcrDefinition);\n\n            case PropertyType.LONG:\n            case PropertyType.DOUBLE:"
            },
            {
              "step": 5,
              "variableName": "String definition",
              "startLine": 45,
              "startColumn": 27,
              "endLine": 45,
              "endColumn": 44,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/constraint/DateConstraint.java",
              "type": "String",
              "code": "\n    private final Calendar upperLimit;\n\n    public DateConstraint(String definition) throws InvalidConstraintException {\n        super(definition);\n\n        // format: '(<fromDate>, <toDate>)', '[<fromDate>, <toDate>]', '[, <toDate>]' etc."
            },
            {
              "step": 6,
              "variableName": "msg",
              "startLine": 84,
              "startColumn": 35,
              "endLine": 84,
              "endColumn": 38,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/constraint/DateConstraint.java",
              "type": "",
              "code": "                    if (lowerLimit.after(upperLimit)) {\n                        String msg = \"'\" + definition\n                                + \"' is not a valid value constraint format for dates: min-date > max-date\";\n                        log.debug(msg);\n                        throw new InvalidConstraintException(msg);\n                    }\n                }"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 33,
      "fileName": "DateConstraint.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "currentToken",
              "startLine": 595,
              "startColumn": 39,
              "endLine": 595,
              "endColumn": 51,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-jcr-commons/src/main/java/org/apache/jackrabbit/commons/cnd/CompactNodeTypeDefReader.java",
              "type": "String",
              "code": "        do {\n            nextToken();\n            try {\n                pd.addValueConstraint(currentToken);\n            } catch (RepositoryException e) {\n                lexer.fail(\"Error adding value constraint for \" + pd.getName() + \" to \" + currentToken, e);\n            }"
            },
            {
              "step": 1,
              "variableName": "String constraint",
              "startLine": 246,
              "startColumn": 40,
              "endLine": 246,
              "endColumn": 57,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/QDefinitionBuilderFactory.java",
              "type": "String",
              "code": "        }\n\n        @Override\n        public void addValueConstraint(String constraint) throws InvalidConstraintException {\n            builder.addValueConstraint(ValueConstraint.create(getRequiredType(), constraint, resolver));\n        }\n"
            },
            {
              "step": 2,
              "variableName": "constraint",
              "startLine": 247,
              "startColumn": 82,
              "endLine": 247,
              "endColumn": 92,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/QDefinitionBuilderFactory.java",
              "type": "String",
              "code": "\n        @Override\n        public void addValueConstraint(String constraint) throws InvalidConstraintException {\n            builder.addValueConstraint(ValueConstraint.create(getRequiredType(), constraint, resolver));\n        }\n\n        @Override"
            },
            {
              "step": 3,
              "variableName": "String jcrDefinition",
              "startLine": 231,
              "startColumn": 52,
              "endLine": 231,
              "endColumn": 72,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/constraint/ValueConstraint.java",
              "type": "String",
              "code": "     * @return a new value constraint\n     * @throws InvalidConstraintException if the constraint is invalid\n     */\n    public static ValueConstraint create(int type, String jcrDefinition,\n                                         NamePathResolver resolver)\n            throws InvalidConstraintException {\n        if (jcrDefinition == null) {"
            },
            {
              "step": 4,
              "variableName": "jcrDefinition",
              "startLine": 249,
              "startColumn": 43,
              "endLine": 249,
              "endColumn": 56,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/constraint/ValueConstraint.java",
              "type": "String",
              "code": "                return new NumericConstraint(jcrDefinition);\n\n            case PropertyType.DATE:\n                return new DateConstraint(jcrDefinition);\n\n            case PropertyType.LONG:\n            case PropertyType.DOUBLE:"
            },
            {
              "step": 5,
              "variableName": "String definition",
              "startLine": 45,
              "startColumn": 27,
              "endLine": 45,
              "endColumn": 44,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/constraint/DateConstraint.java",
              "type": "String",
              "code": "\n    private final Calendar upperLimit;\n\n    public DateConstraint(String definition) throws InvalidConstraintException {\n        super(definition);\n\n        // format: '(<fromDate>, <toDate>)', '[<fromDate>, <toDate>]', '[, <toDate>]' etc."
            },
            {
              "step": 6,
              "variableName": "msg",
              "startLine": 91,
              "startColumn": 27,
              "endLine": 91,
              "endColumn": 30,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/constraint/DateConstraint.java",
              "type": "",
              "code": "            } catch (ValueFormatException vfe) {\n                String msg = \"'\" + definition\n                        + \"' is not a valid value constraint format for dates\";\n                log.debug(msg);\n                throw new InvalidConstraintException(msg, vfe);\n            } catch (RepositoryException re) {\n                String msg = \"'\" + definition"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 34,
      "fileName": "DateConstraint.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "currentToken",
              "startLine": 595,
              "startColumn": 39,
              "endLine": 595,
              "endColumn": 51,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-jcr-commons/src/main/java/org/apache/jackrabbit/commons/cnd/CompactNodeTypeDefReader.java",
              "type": "String",
              "code": "        do {\n            nextToken();\n            try {\n                pd.addValueConstraint(currentToken);\n            } catch (RepositoryException e) {\n                lexer.fail(\"Error adding value constraint for \" + pd.getName() + \" to \" + currentToken, e);\n            }"
            },
            {
              "step": 1,
              "variableName": "String constraint",
              "startLine": 246,
              "startColumn": 40,
              "endLine": 246,
              "endColumn": 57,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/QDefinitionBuilderFactory.java",
              "type": "String",
              "code": "        }\n\n        @Override\n        public void addValueConstraint(String constraint) throws InvalidConstraintException {\n            builder.addValueConstraint(ValueConstraint.create(getRequiredType(), constraint, resolver));\n        }\n"
            },
            {
              "step": 2,
              "variableName": "constraint",
              "startLine": 247,
              "startColumn": 82,
              "endLine": 247,
              "endColumn": 92,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/QDefinitionBuilderFactory.java",
              "type": "String",
              "code": "\n        @Override\n        public void addValueConstraint(String constraint) throws InvalidConstraintException {\n            builder.addValueConstraint(ValueConstraint.create(getRequiredType(), constraint, resolver));\n        }\n\n        @Override"
            },
            {
              "step": 3,
              "variableName": "String jcrDefinition",
              "startLine": 231,
              "startColumn": 52,
              "endLine": 231,
              "endColumn": 72,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/constraint/ValueConstraint.java",
              "type": "String",
              "code": "     * @return a new value constraint\n     * @throws InvalidConstraintException if the constraint is invalid\n     */\n    public static ValueConstraint create(int type, String jcrDefinition,\n                                         NamePathResolver resolver)\n            throws InvalidConstraintException {\n        if (jcrDefinition == null) {"
            },
            {
              "step": 4,
              "variableName": "jcrDefinition",
              "startLine": 249,
              "startColumn": 43,
              "endLine": 249,
              "endColumn": 56,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/constraint/ValueConstraint.java",
              "type": "String",
              "code": "                return new NumericConstraint(jcrDefinition);\n\n            case PropertyType.DATE:\n                return new DateConstraint(jcrDefinition);\n\n            case PropertyType.LONG:\n            case PropertyType.DOUBLE:"
            },
            {
              "step": 5,
              "variableName": "String definition",
              "startLine": 45,
              "startColumn": 27,
              "endLine": 45,
              "endColumn": 44,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/constraint/DateConstraint.java",
              "type": "String",
              "code": "\n    private final Calendar upperLimit;\n\n    public DateConstraint(String definition) throws InvalidConstraintException {\n        super(definition);\n\n        // format: '(<fromDate>, <toDate>)', '[<fromDate>, <toDate>]', '[, <toDate>]' etc."
            },
            {
              "step": 6,
              "variableName": "msg",
              "startLine": 96,
              "startColumn": 27,
              "endLine": 96,
              "endColumn": 30,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/constraint/DateConstraint.java",
              "type": "",
              "code": "            } catch (RepositoryException re) {\n                String msg = \"'\" + definition\n                        + \"' is not a valid value constraint format for dates\";\n                log.debug(msg);\n                throw new InvalidConstraintException(msg, re);\n            }\n        } else {"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 35,
      "fileName": "DateConstraint.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "currentToken",
              "startLine": 595,
              "startColumn": 39,
              "endLine": 595,
              "endColumn": 51,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-jcr-commons/src/main/java/org/apache/jackrabbit/commons/cnd/CompactNodeTypeDefReader.java",
              "type": "String",
              "code": "        do {\n            nextToken();\n            try {\n                pd.addValueConstraint(currentToken);\n            } catch (RepositoryException e) {\n                lexer.fail(\"Error adding value constraint for \" + pd.getName() + \" to \" + currentToken, e);\n            }"
            },
            {
              "step": 1,
              "variableName": "String constraint",
              "startLine": 246,
              "startColumn": 40,
              "endLine": 246,
              "endColumn": 57,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/QDefinitionBuilderFactory.java",
              "type": "String",
              "code": "        }\n\n        @Override\n        public void addValueConstraint(String constraint) throws InvalidConstraintException {\n            builder.addValueConstraint(ValueConstraint.create(getRequiredType(), constraint, resolver));\n        }\n"
            },
            {
              "step": 2,
              "variableName": "constraint",
              "startLine": 247,
              "startColumn": 82,
              "endLine": 247,
              "endColumn": 92,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/QDefinitionBuilderFactory.java",
              "type": "String",
              "code": "\n        @Override\n        public void addValueConstraint(String constraint) throws InvalidConstraintException {\n            builder.addValueConstraint(ValueConstraint.create(getRequiredType(), constraint, resolver));\n        }\n\n        @Override"
            },
            {
              "step": 3,
              "variableName": "String jcrDefinition",
              "startLine": 231,
              "startColumn": 52,
              "endLine": 231,
              "endColumn": 72,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/constraint/ValueConstraint.java",
              "type": "String",
              "code": "     * @return a new value constraint\n     * @throws InvalidConstraintException if the constraint is invalid\n     */\n    public static ValueConstraint create(int type, String jcrDefinition,\n                                         NamePathResolver resolver)\n            throws InvalidConstraintException {\n        if (jcrDefinition == null) {"
            },
            {
              "step": 4,
              "variableName": "jcrDefinition",
              "startLine": 249,
              "startColumn": 43,
              "endLine": 249,
              "endColumn": 56,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/constraint/ValueConstraint.java",
              "type": "String",
              "code": "                return new NumericConstraint(jcrDefinition);\n\n            case PropertyType.DATE:\n                return new DateConstraint(jcrDefinition);\n\n            case PropertyType.LONG:\n            case PropertyType.DOUBLE:"
            },
            {
              "step": 5,
              "variableName": "String definition",
              "startLine": 45,
              "startColumn": 27,
              "endLine": 45,
              "endColumn": 44,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/constraint/DateConstraint.java",
              "type": "String",
              "code": "\n    private final Calendar upperLimit;\n\n    public DateConstraint(String definition) throws InvalidConstraintException {\n        super(definition);\n\n        // format: '(<fromDate>, <toDate>)', '[<fromDate>, <toDate>]', '[, <toDate>]' etc."
            },
            {
              "step": 6,
              "variableName": "msg",
              "startLine": 102,
              "startColumn": 23,
              "endLine": 102,
              "endColumn": 26,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/constraint/DateConstraint.java",
              "type": "",
              "code": "        } else {\n            String msg = \"'\" + definition\n                    + \"' is not a valid value constraint format for dates\";\n            log.debug(msg);\n            throw new InvalidConstraintException(msg);\n        }\n    }"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 36,
      "fileName": "NameConstraint.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "currentToken",
              "startLine": 595,
              "startColumn": 39,
              "endLine": 595,
              "endColumn": 51,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-jcr-commons/src/main/java/org/apache/jackrabbit/commons/cnd/CompactNodeTypeDefReader.java",
              "type": "String",
              "code": "        do {\n            nextToken();\n            try {\n                pd.addValueConstraint(currentToken);\n            } catch (RepositoryException e) {\n                lexer.fail(\"Error adding value constraint for \" + pd.getName() + \" to \" + currentToken, e);\n            }"
            },
            {
              "step": 1,
              "variableName": "String constraint",
              "startLine": 246,
              "startColumn": 40,
              "endLine": 246,
              "endColumn": 57,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/QDefinitionBuilderFactory.java",
              "type": "String",
              "code": "        }\n\n        @Override\n        public void addValueConstraint(String constraint) throws InvalidConstraintException {\n            builder.addValueConstraint(ValueConstraint.create(getRequiredType(), constraint, resolver));\n        }\n"
            },
            {
              "step": 2,
              "variableName": "constraint",
              "startLine": 247,
              "startColumn": 82,
              "endLine": 247,
              "endColumn": 92,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/QDefinitionBuilderFactory.java",
              "type": "String",
              "code": "\n        @Override\n        public void addValueConstraint(String constraint) throws InvalidConstraintException {\n            builder.addValueConstraint(ValueConstraint.create(getRequiredType(), constraint, resolver));\n        }\n\n        @Override"
            },
            {
              "step": 3,
              "variableName": "String jcrDefinition",
              "startLine": 231,
              "startColumn": 52,
              "endLine": 231,
              "endColumn": 72,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/constraint/ValueConstraint.java",
              "type": "String",
              "code": "     * @return a new value constraint\n     * @throws InvalidConstraintException if the constraint is invalid\n     */\n    public static ValueConstraint create(int type, String jcrDefinition,\n                                         NamePathResolver resolver)\n            throws InvalidConstraintException {\n        if (jcrDefinition == null) {"
            },
            {
              "step": 4,
              "variableName": "jcrDefinition",
              "startLine": 257,
              "startColumn": 46,
              "endLine": 257,
              "endColumn": 59,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/constraint/ValueConstraint.java",
              "type": "String",
              "code": "                return new NumericConstraint(jcrDefinition);\n\n            case PropertyType.NAME:\n                return NameConstraint.create(jcrDefinition, resolver);\n\n            case PropertyType.PATH:\n                return PathConstraint.create(jcrDefinition, resolver);"
            },
            {
              "step": 5,
              "variableName": "String jcrName",
              "startLine": 43,
              "startColumn": 34,
              "endLine": 43,
              "endColumn": 48,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/constraint/NameConstraint.java",
              "type": "String",
              "code": "        return new NameConstraint(nameString, NAME_FACTORY.create(nameString));\n    }\n\n    static NameConstraint create(String jcrName, NameResolver resolver)\n            throws InvalidConstraintException {\n        // constraint format: A JCR name string.\n        try {"
            },
            {
              "step": 6,
              "variableName": "msg",
              "startLine": 51,
              "startColumn": 23,
              "endLine": 51,
              "endColumn": 26,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/constraint/NameConstraint.java",
              "type": "",
              "code": "            return new NameConstraint(name.toString(), name);\n        } catch (NameException e) {\n            String msg = \"Invalid name constraint: \" + jcrName;\n            log.debug(msg);\n            throw new InvalidConstraintException(msg, e);\n        } catch (NamespaceException e) {\n            String msg = \"Invalid name constraint: \" + jcrName;"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 37,
      "fileName": "NameConstraint.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "currentToken",
              "startLine": 595,
              "startColumn": 39,
              "endLine": 595,
              "endColumn": 51,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-jcr-commons/src/main/java/org/apache/jackrabbit/commons/cnd/CompactNodeTypeDefReader.java",
              "type": "String",
              "code": "        do {\n            nextToken();\n            try {\n                pd.addValueConstraint(currentToken);\n            } catch (RepositoryException e) {\n                lexer.fail(\"Error adding value constraint for \" + pd.getName() + \" to \" + currentToken, e);\n            }"
            },
            {
              "step": 1,
              "variableName": "String constraint",
              "startLine": 246,
              "startColumn": 40,
              "endLine": 246,
              "endColumn": 57,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/QDefinitionBuilderFactory.java",
              "type": "String",
              "code": "        }\n\n        @Override\n        public void addValueConstraint(String constraint) throws InvalidConstraintException {\n            builder.addValueConstraint(ValueConstraint.create(getRequiredType(), constraint, resolver));\n        }\n"
            },
            {
              "step": 2,
              "variableName": "constraint",
              "startLine": 247,
              "startColumn": 82,
              "endLine": 247,
              "endColumn": 92,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/QDefinitionBuilderFactory.java",
              "type": "String",
              "code": "\n        @Override\n        public void addValueConstraint(String constraint) throws InvalidConstraintException {\n            builder.addValueConstraint(ValueConstraint.create(getRequiredType(), constraint, resolver));\n        }\n\n        @Override"
            },
            {
              "step": 3,
              "variableName": "String jcrDefinition",
              "startLine": 231,
              "startColumn": 52,
              "endLine": 231,
              "endColumn": 72,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/constraint/ValueConstraint.java",
              "type": "String",
              "code": "     * @return a new value constraint\n     * @throws InvalidConstraintException if the constraint is invalid\n     */\n    public static ValueConstraint create(int type, String jcrDefinition,\n                                         NamePathResolver resolver)\n            throws InvalidConstraintException {\n        if (jcrDefinition == null) {"
            },
            {
              "step": 4,
              "variableName": "jcrDefinition",
              "startLine": 257,
              "startColumn": 46,
              "endLine": 257,
              "endColumn": 59,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/constraint/ValueConstraint.java",
              "type": "String",
              "code": "                return new NumericConstraint(jcrDefinition);\n\n            case PropertyType.NAME:\n                return NameConstraint.create(jcrDefinition, resolver);\n\n            case PropertyType.PATH:\n                return PathConstraint.create(jcrDefinition, resolver);"
            },
            {
              "step": 5,
              "variableName": "String jcrName",
              "startLine": 43,
              "startColumn": 34,
              "endLine": 43,
              "endColumn": 48,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/constraint/NameConstraint.java",
              "type": "String",
              "code": "        return new NameConstraint(nameString, NAME_FACTORY.create(nameString));\n    }\n\n    static NameConstraint create(String jcrName, NameResolver resolver)\n            throws InvalidConstraintException {\n        // constraint format: A JCR name string.\n        try {"
            },
            {
              "step": 6,
              "variableName": "msg",
              "startLine": 55,
              "startColumn": 23,
              "endLine": 55,
              "endColumn": 26,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/constraint/NameConstraint.java",
              "type": "",
              "code": "            throw new InvalidConstraintException(msg, e);\n        } catch (NamespaceException e) {\n            String msg = \"Invalid name constraint: \" + jcrName;\n            log.debug(msg);\n            throw new InvalidConstraintException(msg, e);\n        }\n    }"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 38,
      "fileName": "NumericConstraint.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "currentToken",
              "startLine": 595,
              "startColumn": 39,
              "endLine": 595,
              "endColumn": 51,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-jcr-commons/src/main/java/org/apache/jackrabbit/commons/cnd/CompactNodeTypeDefReader.java",
              "type": "String",
              "code": "        do {\n            nextToken();\n            try {\n                pd.addValueConstraint(currentToken);\n            } catch (RepositoryException e) {\n                lexer.fail(\"Error adding value constraint for \" + pd.getName() + \" to \" + currentToken, e);\n            }"
            },
            {
              "step": 1,
              "variableName": "String constraint",
              "startLine": 246,
              "startColumn": 40,
              "endLine": 246,
              "endColumn": 57,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/QDefinitionBuilderFactory.java",
              "type": "String",
              "code": "        }\n\n        @Override\n        public void addValueConstraint(String constraint) throws InvalidConstraintException {\n            builder.addValueConstraint(ValueConstraint.create(getRequiredType(), constraint, resolver));\n        }\n"
            },
            {
              "step": 2,
              "variableName": "constraint",
              "startLine": 247,
              "startColumn": 82,
              "endLine": 247,
              "endColumn": 92,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/QDefinitionBuilderFactory.java",
              "type": "String",
              "code": "\n        @Override\n        public void addValueConstraint(String constraint) throws InvalidConstraintException {\n            builder.addValueConstraint(ValueConstraint.create(getRequiredType(), constraint, resolver));\n        }\n\n        @Override"
            },
            {
              "step": 3,
              "variableName": "String jcrDefinition",
              "startLine": 231,
              "startColumn": 52,
              "endLine": 231,
              "endColumn": 72,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/constraint/ValueConstraint.java",
              "type": "String",
              "code": "     * @return a new value constraint\n     * @throws InvalidConstraintException if the constraint is invalid\n     */\n    public static ValueConstraint create(int type, String jcrDefinition,\n                                         NamePathResolver resolver)\n            throws InvalidConstraintException {\n        if (jcrDefinition == null) {"
            },
            {
              "step": 4,
              "variableName": "jcrDefinition",
              "startLine": 246,
              "startColumn": 46,
              "endLine": 246,
              "endColumn": 59,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/constraint/ValueConstraint.java",
              "type": "String",
              "code": "                return new BooleanConstraint(jcrDefinition);\n\n            case PropertyType.BINARY:\n                return new NumericConstraint(jcrDefinition);\n\n            case PropertyType.DATE:\n                return new DateConstraint(jcrDefinition);"
            },
            {
              "step": 5,
              "variableName": "String definition",
              "startLine": 42,
              "startColumn": 30,
              "endLine": 42,
              "endColumn": 47,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/constraint/NumericConstraint.java",
              "type": "String",
              "code": "\n    private final Double upperLimit;\n\n    public NumericConstraint(String definition) throws InvalidConstraintException {\n        super(definition);\n\n        // format: '(<min>, <max>)',  '[<min>, <max>]', '(, <max>)' etc."
            },
            {
              "step": 6,
              "variableName": "msg",
              "startLine": 73,
              "startColumn": 31,
              "endLine": 73,
              "endColumn": 34,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/constraint/NumericConstraint.java",
              "type": "",
              "code": "                if (lowerLimit == null && upperLimit == null) {\n                    String msg = \"'\" + definition + \"' is not a valid value constraint\"\n                            + \" format for numeric types: neither lower- nor upper-limit specified\";\n                    log.debug(msg);\n                    throw new InvalidConstraintException(msg);\n                }\n                if (lowerLimit != null && upperLimit != null) {"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "currentToken",
              "startLine": 595,
              "startColumn": 39,
              "endLine": 595,
              "endColumn": 51,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-jcr-commons/src/main/java/org/apache/jackrabbit/commons/cnd/CompactNodeTypeDefReader.java",
              "type": "String",
              "code": "        do {\n            nextToken();\n            try {\n                pd.addValueConstraint(currentToken);\n            } catch (RepositoryException e) {\n                lexer.fail(\"Error adding value constraint for \" + pd.getName() + \" to \" + currentToken, e);\n            }"
            },
            {
              "step": 1,
              "variableName": "String constraint",
              "startLine": 246,
              "startColumn": 40,
              "endLine": 246,
              "endColumn": 57,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/QDefinitionBuilderFactory.java",
              "type": "String",
              "code": "        }\n\n        @Override\n        public void addValueConstraint(String constraint) throws InvalidConstraintException {\n            builder.addValueConstraint(ValueConstraint.create(getRequiredType(), constraint, resolver));\n        }\n"
            },
            {
              "step": 2,
              "variableName": "constraint",
              "startLine": 247,
              "startColumn": 82,
              "endLine": 247,
              "endColumn": 92,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/QDefinitionBuilderFactory.java",
              "type": "String",
              "code": "\n        @Override\n        public void addValueConstraint(String constraint) throws InvalidConstraintException {\n            builder.addValueConstraint(ValueConstraint.create(getRequiredType(), constraint, resolver));\n        }\n\n        @Override"
            },
            {
              "step": 3,
              "variableName": "String jcrDefinition",
              "startLine": 231,
              "startColumn": 52,
              "endLine": 231,
              "endColumn": 72,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/constraint/ValueConstraint.java",
              "type": "String",
              "code": "     * @return a new value constraint\n     * @throws InvalidConstraintException if the constraint is invalid\n     */\n    public static ValueConstraint create(int type, String jcrDefinition,\n                                         NamePathResolver resolver)\n            throws InvalidConstraintException {\n        if (jcrDefinition == null) {"
            },
            {
              "step": 4,
              "variableName": "jcrDefinition",
              "startLine": 254,
              "startColumn": 46,
              "endLine": 254,
              "endColumn": 59,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/constraint/ValueConstraint.java",
              "type": "String",
              "code": "            case PropertyType.LONG:\n            case PropertyType.DOUBLE:\n            case PropertyType.DECIMAL:\n                return new NumericConstraint(jcrDefinition);\n\n            case PropertyType.NAME:\n                return NameConstraint.create(jcrDefinition, resolver);"
            },
            {
              "step": 5,
              "variableName": "String definition",
              "startLine": 42,
              "startColumn": 30,
              "endLine": 42,
              "endColumn": 47,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/constraint/NumericConstraint.java",
              "type": "String",
              "code": "\n    private final Double upperLimit;\n\n    public NumericConstraint(String definition) throws InvalidConstraintException {\n        super(definition);\n\n        // format: '(<min>, <max>)',  '[<min>, <max>]', '(, <max>)' etc."
            },
            {
              "step": 6,
              "variableName": "msg",
              "startLine": 73,
              "startColumn": 31,
              "endLine": 73,
              "endColumn": 34,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/constraint/NumericConstraint.java",
              "type": "",
              "code": "                if (lowerLimit == null && upperLimit == null) {\n                    String msg = \"'\" + definition + \"' is not a valid value constraint\"\n                            + \" format for numeric types: neither lower- nor upper-limit specified\";\n                    log.debug(msg);\n                    throw new InvalidConstraintException(msg);\n                }\n                if (lowerLimit != null && upperLimit != null) {"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 39,
      "fileName": "NumericConstraint.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "currentToken",
              "startLine": 595,
              "startColumn": 39,
              "endLine": 595,
              "endColumn": 51,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-jcr-commons/src/main/java/org/apache/jackrabbit/commons/cnd/CompactNodeTypeDefReader.java",
              "type": "String",
              "code": "        do {\n            nextToken();\n            try {\n                pd.addValueConstraint(currentToken);\n            } catch (RepositoryException e) {\n                lexer.fail(\"Error adding value constraint for \" + pd.getName() + \" to \" + currentToken, e);\n            }"
            },
            {
              "step": 1,
              "variableName": "String constraint",
              "startLine": 246,
              "startColumn": 40,
              "endLine": 246,
              "endColumn": 57,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/QDefinitionBuilderFactory.java",
              "type": "String",
              "code": "        }\n\n        @Override\n        public void addValueConstraint(String constraint) throws InvalidConstraintException {\n            builder.addValueConstraint(ValueConstraint.create(getRequiredType(), constraint, resolver));\n        }\n"
            },
            {
              "step": 2,
              "variableName": "constraint",
              "startLine": 247,
              "startColumn": 82,
              "endLine": 247,
              "endColumn": 92,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/QDefinitionBuilderFactory.java",
              "type": "String",
              "code": "\n        @Override\n        public void addValueConstraint(String constraint) throws InvalidConstraintException {\n            builder.addValueConstraint(ValueConstraint.create(getRequiredType(), constraint, resolver));\n        }\n\n        @Override"
            },
            {
              "step": 3,
              "variableName": "String jcrDefinition",
              "startLine": 231,
              "startColumn": 52,
              "endLine": 231,
              "endColumn": 72,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/constraint/ValueConstraint.java",
              "type": "String",
              "code": "     * @return a new value constraint\n     * @throws InvalidConstraintException if the constraint is invalid\n     */\n    public static ValueConstraint create(int type, String jcrDefinition,\n                                         NamePathResolver resolver)\n            throws InvalidConstraintException {\n        if (jcrDefinition == null) {"
            },
            {
              "step": 4,
              "variableName": "jcrDefinition",
              "startLine": 246,
              "startColumn": 46,
              "endLine": 246,
              "endColumn": 59,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/constraint/ValueConstraint.java",
              "type": "String",
              "code": "                return new BooleanConstraint(jcrDefinition);\n\n            case PropertyType.BINARY:\n                return new NumericConstraint(jcrDefinition);\n\n            case PropertyType.DATE:\n                return new DateConstraint(jcrDefinition);"
            },
            {
              "step": 5,
              "variableName": "String definition",
              "startLine": 42,
              "startColumn": 30,
              "endLine": 42,
              "endColumn": 47,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/constraint/NumericConstraint.java",
              "type": "String",
              "code": "\n    private final Double upperLimit;\n\n    public NumericConstraint(String definition) throws InvalidConstraintException {\n        super(definition);\n\n        // format: '(<min>, <max>)',  '[<min>, <max>]', '(, <max>)' etc."
            },
            {
              "step": 6,
              "variableName": "msg",
              "startLine": 80,
              "startColumn": 35,
              "endLine": 80,
              "endColumn": 38,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/constraint/NumericConstraint.java",
              "type": "",
              "code": "                    if (lowerLimit > upperLimit) {\n                        String msg = \"'\" + definition\n                                + \"' is not a valid value constraint format for numeric types: lower-limit exceeds upper-limit\";\n                        log.debug(msg);\n                        throw new InvalidConstraintException(msg);\n                    }\n                }"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "currentToken",
              "startLine": 595,
              "startColumn": 39,
              "endLine": 595,
              "endColumn": 51,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-jcr-commons/src/main/java/org/apache/jackrabbit/commons/cnd/CompactNodeTypeDefReader.java",
              "type": "String",
              "code": "        do {\n            nextToken();\n            try {\n                pd.addValueConstraint(currentToken);\n            } catch (RepositoryException e) {\n                lexer.fail(\"Error adding value constraint for \" + pd.getName() + \" to \" + currentToken, e);\n            }"
            },
            {
              "step": 1,
              "variableName": "String constraint",
              "startLine": 246,
              "startColumn": 40,
              "endLine": 246,
              "endColumn": 57,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/QDefinitionBuilderFactory.java",
              "type": "String",
              "code": "        }\n\n        @Override\n        public void addValueConstraint(String constraint) throws InvalidConstraintException {\n            builder.addValueConstraint(ValueConstraint.create(getRequiredType(), constraint, resolver));\n        }\n"
            },
            {
              "step": 2,
              "variableName": "constraint",
              "startLine": 247,
              "startColumn": 82,
              "endLine": 247,
              "endColumn": 92,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/QDefinitionBuilderFactory.java",
              "type": "String",
              "code": "\n        @Override\n        public void addValueConstraint(String constraint) throws InvalidConstraintException {\n            builder.addValueConstraint(ValueConstraint.create(getRequiredType(), constraint, resolver));\n        }\n\n        @Override"
            },
            {
              "step": 3,
              "variableName": "String jcrDefinition",
              "startLine": 231,
              "startColumn": 52,
              "endLine": 231,
              "endColumn": 72,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/constraint/ValueConstraint.java",
              "type": "String",
              "code": "     * @return a new value constraint\n     * @throws InvalidConstraintException if the constraint is invalid\n     */\n    public static ValueConstraint create(int type, String jcrDefinition,\n                                         NamePathResolver resolver)\n            throws InvalidConstraintException {\n        if (jcrDefinition == null) {"
            },
            {
              "step": 4,
              "variableName": "jcrDefinition",
              "startLine": 254,
              "startColumn": 46,
              "endLine": 254,
              "endColumn": 59,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/constraint/ValueConstraint.java",
              "type": "String",
              "code": "            case PropertyType.LONG:\n            case PropertyType.DOUBLE:\n            case PropertyType.DECIMAL:\n                return new NumericConstraint(jcrDefinition);\n\n            case PropertyType.NAME:\n                return NameConstraint.create(jcrDefinition, resolver);"
            },
            {
              "step": 5,
              "variableName": "String definition",
              "startLine": 42,
              "startColumn": 30,
              "endLine": 42,
              "endColumn": 47,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/constraint/NumericConstraint.java",
              "type": "String",
              "code": "\n    private final Double upperLimit;\n\n    public NumericConstraint(String definition) throws InvalidConstraintException {\n        super(definition);\n\n        // format: '(<min>, <max>)',  '[<min>, <max>]', '(, <max>)' etc."
            },
            {
              "step": 6,
              "variableName": "msg",
              "startLine": 80,
              "startColumn": 35,
              "endLine": 80,
              "endColumn": 38,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/constraint/NumericConstraint.java",
              "type": "",
              "code": "                    if (lowerLimit > upperLimit) {\n                        String msg = \"'\" + definition\n                                + \"' is not a valid value constraint format for numeric types: lower-limit exceeds upper-limit\";\n                        log.debug(msg);\n                        throw new InvalidConstraintException(msg);\n                    }\n                }"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 40,
      "fileName": "NumericConstraint.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "currentToken",
              "startLine": 595,
              "startColumn": 39,
              "endLine": 595,
              "endColumn": 51,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-jcr-commons/src/main/java/org/apache/jackrabbit/commons/cnd/CompactNodeTypeDefReader.java",
              "type": "String",
              "code": "        do {\n            nextToken();\n            try {\n                pd.addValueConstraint(currentToken);\n            } catch (RepositoryException e) {\n                lexer.fail(\"Error adding value constraint for \" + pd.getName() + \" to \" + currentToken, e);\n            }"
            },
            {
              "step": 1,
              "variableName": "String constraint",
              "startLine": 246,
              "startColumn": 40,
              "endLine": 246,
              "endColumn": 57,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/QDefinitionBuilderFactory.java",
              "type": "String",
              "code": "        }\n\n        @Override\n        public void addValueConstraint(String constraint) throws InvalidConstraintException {\n            builder.addValueConstraint(ValueConstraint.create(getRequiredType(), constraint, resolver));\n        }\n"
            },
            {
              "step": 2,
              "variableName": "constraint",
              "startLine": 247,
              "startColumn": 82,
              "endLine": 247,
              "endColumn": 92,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/QDefinitionBuilderFactory.java",
              "type": "String",
              "code": "\n        @Override\n        public void addValueConstraint(String constraint) throws InvalidConstraintException {\n            builder.addValueConstraint(ValueConstraint.create(getRequiredType(), constraint, resolver));\n        }\n\n        @Override"
            },
            {
              "step": 3,
              "variableName": "String jcrDefinition",
              "startLine": 231,
              "startColumn": 52,
              "endLine": 231,
              "endColumn": 72,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/constraint/ValueConstraint.java",
              "type": "String",
              "code": "     * @return a new value constraint\n     * @throws InvalidConstraintException if the constraint is invalid\n     */\n    public static ValueConstraint create(int type, String jcrDefinition,\n                                         NamePathResolver resolver)\n            throws InvalidConstraintException {\n        if (jcrDefinition == null) {"
            },
            {
              "step": 4,
              "variableName": "jcrDefinition",
              "startLine": 246,
              "startColumn": 46,
              "endLine": 246,
              "endColumn": 59,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/constraint/ValueConstraint.java",
              "type": "String",
              "code": "                return new BooleanConstraint(jcrDefinition);\n\n            case PropertyType.BINARY:\n                return new NumericConstraint(jcrDefinition);\n\n            case PropertyType.DATE:\n                return new DateConstraint(jcrDefinition);"
            },
            {
              "step": 5,
              "variableName": "String definition",
              "startLine": 42,
              "startColumn": 30,
              "endLine": 42,
              "endColumn": 47,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/constraint/NumericConstraint.java",
              "type": "String",
              "code": "\n    private final Double upperLimit;\n\n    public NumericConstraint(String definition) throws InvalidConstraintException {\n        super(definition);\n\n        // format: '(<min>, <max>)',  '[<min>, <max>]', '(, <max>)' etc."
            },
            {
              "step": 6,
              "variableName": "msg",
              "startLine": 87,
              "startColumn": 27,
              "endLine": 87,
              "endColumn": 30,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/constraint/NumericConstraint.java",
              "type": "",
              "code": "            } catch (NumberFormatException nfe) {\n                String msg = \"'\" + definition\n                        + \"' is not a valid value constraint format for numeric types\";\n                log.debug(msg);\n                throw new InvalidConstraintException(msg, nfe);\n            }\n        } else {"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "currentToken",
              "startLine": 595,
              "startColumn": 39,
              "endLine": 595,
              "endColumn": 51,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-jcr-commons/src/main/java/org/apache/jackrabbit/commons/cnd/CompactNodeTypeDefReader.java",
              "type": "String",
              "code": "        do {\n            nextToken();\n            try {\n                pd.addValueConstraint(currentToken);\n            } catch (RepositoryException e) {\n                lexer.fail(\"Error adding value constraint for \" + pd.getName() + \" to \" + currentToken, e);\n            }"
            },
            {
              "step": 1,
              "variableName": "String constraint",
              "startLine": 246,
              "startColumn": 40,
              "endLine": 246,
              "endColumn": 57,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/QDefinitionBuilderFactory.java",
              "type": "String",
              "code": "        }\n\n        @Override\n        public void addValueConstraint(String constraint) throws InvalidConstraintException {\n            builder.addValueConstraint(ValueConstraint.create(getRequiredType(), constraint, resolver));\n        }\n"
            },
            {
              "step": 2,
              "variableName": "constraint",
              "startLine": 247,
              "startColumn": 82,
              "endLine": 247,
              "endColumn": 92,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/QDefinitionBuilderFactory.java",
              "type": "String",
              "code": "\n        @Override\n        public void addValueConstraint(String constraint) throws InvalidConstraintException {\n            builder.addValueConstraint(ValueConstraint.create(getRequiredType(), constraint, resolver));\n        }\n\n        @Override"
            },
            {
              "step": 3,
              "variableName": "String jcrDefinition",
              "startLine": 231,
              "startColumn": 52,
              "endLine": 231,
              "endColumn": 72,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/constraint/ValueConstraint.java",
              "type": "String",
              "code": "     * @return a new value constraint\n     * @throws InvalidConstraintException if the constraint is invalid\n     */\n    public static ValueConstraint create(int type, String jcrDefinition,\n                                         NamePathResolver resolver)\n            throws InvalidConstraintException {\n        if (jcrDefinition == null) {"
            },
            {
              "step": 4,
              "variableName": "jcrDefinition",
              "startLine": 254,
              "startColumn": 46,
              "endLine": 254,
              "endColumn": 59,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/constraint/ValueConstraint.java",
              "type": "String",
              "code": "            case PropertyType.LONG:\n            case PropertyType.DOUBLE:\n            case PropertyType.DECIMAL:\n                return new NumericConstraint(jcrDefinition);\n\n            case PropertyType.NAME:\n                return NameConstraint.create(jcrDefinition, resolver);"
            },
            {
              "step": 5,
              "variableName": "String definition",
              "startLine": 42,
              "startColumn": 30,
              "endLine": 42,
              "endColumn": 47,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/constraint/NumericConstraint.java",
              "type": "String",
              "code": "\n    private final Double upperLimit;\n\n    public NumericConstraint(String definition) throws InvalidConstraintException {\n        super(definition);\n\n        // format: '(<min>, <max>)',  '[<min>, <max>]', '(, <max>)' etc."
            },
            {
              "step": 6,
              "variableName": "msg",
              "startLine": 87,
              "startColumn": 27,
              "endLine": 87,
              "endColumn": 30,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/constraint/NumericConstraint.java",
              "type": "",
              "code": "            } catch (NumberFormatException nfe) {\n                String msg = \"'\" + definition\n                        + \"' is not a valid value constraint format for numeric types\";\n                log.debug(msg);\n                throw new InvalidConstraintException(msg, nfe);\n            }\n        } else {"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 41,
      "fileName": "NumericConstraint.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "currentToken",
              "startLine": 595,
              "startColumn": 39,
              "endLine": 595,
              "endColumn": 51,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-jcr-commons/src/main/java/org/apache/jackrabbit/commons/cnd/CompactNodeTypeDefReader.java",
              "type": "String",
              "code": "        do {\n            nextToken();\n            try {\n                pd.addValueConstraint(currentToken);\n            } catch (RepositoryException e) {\n                lexer.fail(\"Error adding value constraint for \" + pd.getName() + \" to \" + currentToken, e);\n            }"
            },
            {
              "step": 1,
              "variableName": "String constraint",
              "startLine": 246,
              "startColumn": 40,
              "endLine": 246,
              "endColumn": 57,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/QDefinitionBuilderFactory.java",
              "type": "String",
              "code": "        }\n\n        @Override\n        public void addValueConstraint(String constraint) throws InvalidConstraintException {\n            builder.addValueConstraint(ValueConstraint.create(getRequiredType(), constraint, resolver));\n        }\n"
            },
            {
              "step": 2,
              "variableName": "constraint",
              "startLine": 247,
              "startColumn": 82,
              "endLine": 247,
              "endColumn": 92,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/QDefinitionBuilderFactory.java",
              "type": "String",
              "code": "\n        @Override\n        public void addValueConstraint(String constraint) throws InvalidConstraintException {\n            builder.addValueConstraint(ValueConstraint.create(getRequiredType(), constraint, resolver));\n        }\n\n        @Override"
            },
            {
              "step": 3,
              "variableName": "String jcrDefinition",
              "startLine": 231,
              "startColumn": 52,
              "endLine": 231,
              "endColumn": 72,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/constraint/ValueConstraint.java",
              "type": "String",
              "code": "     * @return a new value constraint\n     * @throws InvalidConstraintException if the constraint is invalid\n     */\n    public static ValueConstraint create(int type, String jcrDefinition,\n                                         NamePathResolver resolver)\n            throws InvalidConstraintException {\n        if (jcrDefinition == null) {"
            },
            {
              "step": 4,
              "variableName": "jcrDefinition",
              "startLine": 246,
              "startColumn": 46,
              "endLine": 246,
              "endColumn": 59,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/constraint/ValueConstraint.java",
              "type": "String",
              "code": "                return new BooleanConstraint(jcrDefinition);\n\n            case PropertyType.BINARY:\n                return new NumericConstraint(jcrDefinition);\n\n            case PropertyType.DATE:\n                return new DateConstraint(jcrDefinition);"
            },
            {
              "step": 5,
              "variableName": "String definition",
              "startLine": 42,
              "startColumn": 30,
              "endLine": 42,
              "endColumn": 47,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/constraint/NumericConstraint.java",
              "type": "String",
              "code": "\n    private final Double upperLimit;\n\n    public NumericConstraint(String definition) throws InvalidConstraintException {\n        super(definition);\n\n        // format: '(<min>, <max>)',  '[<min>, <max>]', '(, <max>)' etc."
            },
            {
              "step": 6,
              "variableName": "msg",
              "startLine": 93,
              "startColumn": 23,
              "endLine": 93,
              "endColumn": 26,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/constraint/NumericConstraint.java",
              "type": "",
              "code": "        } else {\n            String msg = \"'\" + definition\n                    + \"' is not a valid value constraint format for numeric values\";\n            log.debug(msg);\n            throw new InvalidConstraintException(msg);\n        }\n    }"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "currentToken",
              "startLine": 595,
              "startColumn": 39,
              "endLine": 595,
              "endColumn": 51,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-jcr-commons/src/main/java/org/apache/jackrabbit/commons/cnd/CompactNodeTypeDefReader.java",
              "type": "String",
              "code": "        do {\n            nextToken();\n            try {\n                pd.addValueConstraint(currentToken);\n            } catch (RepositoryException e) {\n                lexer.fail(\"Error adding value constraint for \" + pd.getName() + \" to \" + currentToken, e);\n            }"
            },
            {
              "step": 1,
              "variableName": "String constraint",
              "startLine": 246,
              "startColumn": 40,
              "endLine": 246,
              "endColumn": 57,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/QDefinitionBuilderFactory.java",
              "type": "String",
              "code": "        }\n\n        @Override\n        public void addValueConstraint(String constraint) throws InvalidConstraintException {\n            builder.addValueConstraint(ValueConstraint.create(getRequiredType(), constraint, resolver));\n        }\n"
            },
            {
              "step": 2,
              "variableName": "constraint",
              "startLine": 247,
              "startColumn": 82,
              "endLine": 247,
              "endColumn": 92,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/QDefinitionBuilderFactory.java",
              "type": "String",
              "code": "\n        @Override\n        public void addValueConstraint(String constraint) throws InvalidConstraintException {\n            builder.addValueConstraint(ValueConstraint.create(getRequiredType(), constraint, resolver));\n        }\n\n        @Override"
            },
            {
              "step": 3,
              "variableName": "String jcrDefinition",
              "startLine": 231,
              "startColumn": 52,
              "endLine": 231,
              "endColumn": 72,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/constraint/ValueConstraint.java",
              "type": "String",
              "code": "     * @return a new value constraint\n     * @throws InvalidConstraintException if the constraint is invalid\n     */\n    public static ValueConstraint create(int type, String jcrDefinition,\n                                         NamePathResolver resolver)\n            throws InvalidConstraintException {\n        if (jcrDefinition == null) {"
            },
            {
              "step": 4,
              "variableName": "jcrDefinition",
              "startLine": 254,
              "startColumn": 46,
              "endLine": 254,
              "endColumn": 59,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/constraint/ValueConstraint.java",
              "type": "String",
              "code": "            case PropertyType.LONG:\n            case PropertyType.DOUBLE:\n            case PropertyType.DECIMAL:\n                return new NumericConstraint(jcrDefinition);\n\n            case PropertyType.NAME:\n                return NameConstraint.create(jcrDefinition, resolver);"
            },
            {
              "step": 5,
              "variableName": "String definition",
              "startLine": 42,
              "startColumn": 30,
              "endLine": 42,
              "endColumn": 47,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/constraint/NumericConstraint.java",
              "type": "String",
              "code": "\n    private final Double upperLimit;\n\n    public NumericConstraint(String definition) throws InvalidConstraintException {\n        super(definition);\n\n        // format: '(<min>, <max>)',  '[<min>, <max>]', '(, <max>)' etc."
            },
            {
              "step": 6,
              "variableName": "msg",
              "startLine": 93,
              "startColumn": 23,
              "endLine": 93,
              "endColumn": 26,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/constraint/NumericConstraint.java",
              "type": "",
              "code": "        } else {\n            String msg = \"'\" + definition\n                    + \"' is not a valid value constraint format for numeric values\";\n            log.debug(msg);\n            throw new InvalidConstraintException(msg);\n        }\n    }"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 42,
      "fileName": "PathConstraint.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "currentToken",
              "startLine": 595,
              "startColumn": 39,
              "endLine": 595,
              "endColumn": 51,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-jcr-commons/src/main/java/org/apache/jackrabbit/commons/cnd/CompactNodeTypeDefReader.java",
              "type": "String",
              "code": "        do {\n            nextToken();\n            try {\n                pd.addValueConstraint(currentToken);\n            } catch (RepositoryException e) {\n                lexer.fail(\"Error adding value constraint for \" + pd.getName() + \" to \" + currentToken, e);\n            }"
            },
            {
              "step": 1,
              "variableName": "String constraint",
              "startLine": 246,
              "startColumn": 40,
              "endLine": 246,
              "endColumn": 57,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/QDefinitionBuilderFactory.java",
              "type": "String",
              "code": "        }\n\n        @Override\n        public void addValueConstraint(String constraint) throws InvalidConstraintException {\n            builder.addValueConstraint(ValueConstraint.create(getRequiredType(), constraint, resolver));\n        }\n"
            },
            {
              "step": 2,
              "variableName": "constraint",
              "startLine": 247,
              "startColumn": 82,
              "endLine": 247,
              "endColumn": 92,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/QDefinitionBuilderFactory.java",
              "type": "String",
              "code": "\n        @Override\n        public void addValueConstraint(String constraint) throws InvalidConstraintException {\n            builder.addValueConstraint(ValueConstraint.create(getRequiredType(), constraint, resolver));\n        }\n\n        @Override"
            },
            {
              "step": 3,
              "variableName": "String jcrDefinition",
              "startLine": 231,
              "startColumn": 52,
              "endLine": 231,
              "endColumn": 72,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/constraint/ValueConstraint.java",
              "type": "String",
              "code": "     * @return a new value constraint\n     * @throws InvalidConstraintException if the constraint is invalid\n     */\n    public static ValueConstraint create(int type, String jcrDefinition,\n                                         NamePathResolver resolver)\n            throws InvalidConstraintException {\n        if (jcrDefinition == null) {"
            },
            {
              "step": 4,
              "variableName": "jcrDefinition",
              "startLine": 260,
              "startColumn": 46,
              "endLine": 260,
              "endColumn": 59,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/constraint/ValueConstraint.java",
              "type": "String",
              "code": "                return NameConstraint.create(jcrDefinition, resolver);\n\n            case PropertyType.PATH:\n                return PathConstraint.create(jcrDefinition, resolver);\n\n            case PropertyType.REFERENCE:\n            case PropertyType.WEAKREFERENCE:"
            },
            {
              "step": 5,
              "variableName": "String jcrPath",
              "startLine": 64,
              "startColumn": 34,
              "endLine": 64,
              "endColumn": 48,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/constraint/PathConstraint.java",
              "type": "String",
              "code": "        }\n    }\n\n    static PathConstraint create(String jcrPath, PathResolver resolver)\n            throws InvalidConstraintException {\n        try {\n            // constraint format: absolute or relative path with optional"
            },
            {
              "step": 6,
              "variableName": "msg",
              "startLine": 87,
              "startColumn": 23,
              "endLine": 87,
              "endColumn": 26,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/constraint/PathConstraint.java",
              "type": "",
              "code": "            return new PathConstraint(definition.toString(), path, deep);\n        } catch (NameException e) {\n            String msg = \"Invalid path expression specified as value constraint: \" + jcrPath;\n            log.debug(msg);\n            throw new InvalidConstraintException(msg, e);\n        } catch (NamespaceException e) {\n            String msg = \"Invalid path expression specified as value constraint: \" + jcrPath;"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "currentToken",
              "startLine": 595,
              "startColumn": 39,
              "endLine": 595,
              "endColumn": 51,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-jcr-commons/src/main/java/org/apache/jackrabbit/commons/cnd/CompactNodeTypeDefReader.java",
              "type": "String",
              "code": "        do {\n            nextToken();\n            try {\n                pd.addValueConstraint(currentToken);\n            } catch (RepositoryException e) {\n                lexer.fail(\"Error adding value constraint for \" + pd.getName() + \" to \" + currentToken, e);\n            }"
            },
            {
              "step": 1,
              "variableName": "String constraint",
              "startLine": 246,
              "startColumn": 40,
              "endLine": 246,
              "endColumn": 57,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/QDefinitionBuilderFactory.java",
              "type": "String",
              "code": "        }\n\n        @Override\n        public void addValueConstraint(String constraint) throws InvalidConstraintException {\n            builder.addValueConstraint(ValueConstraint.create(getRequiredType(), constraint, resolver));\n        }\n"
            },
            {
              "step": 2,
              "variableName": "constraint",
              "startLine": 247,
              "startColumn": 82,
              "endLine": 247,
              "endColumn": 92,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/QDefinitionBuilderFactory.java",
              "type": "String",
              "code": "\n        @Override\n        public void addValueConstraint(String constraint) throws InvalidConstraintException {\n            builder.addValueConstraint(ValueConstraint.create(getRequiredType(), constraint, resolver));\n        }\n\n        @Override"
            },
            {
              "step": 3,
              "variableName": "String jcrDefinition",
              "startLine": 231,
              "startColumn": 52,
              "endLine": 231,
              "endColumn": 72,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/constraint/ValueConstraint.java",
              "type": "String",
              "code": "     * @return a new value constraint\n     * @throws InvalidConstraintException if the constraint is invalid\n     */\n    public static ValueConstraint create(int type, String jcrDefinition,\n                                         NamePathResolver resolver)\n            throws InvalidConstraintException {\n        if (jcrDefinition == null) {"
            },
            {
              "step": 4,
              "variableName": "jcrDefinition",
              "startLine": 260,
              "startColumn": 46,
              "endLine": 260,
              "endColumn": 59,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/constraint/ValueConstraint.java",
              "type": "String",
              "code": "                return NameConstraint.create(jcrDefinition, resolver);\n\n            case PropertyType.PATH:\n                return PathConstraint.create(jcrDefinition, resolver);\n\n            case PropertyType.REFERENCE:\n            case PropertyType.WEAKREFERENCE:"
            },
            {
              "step": 5,
              "variableName": "String jcrPath",
              "startLine": 64,
              "startColumn": 34,
              "endLine": 64,
              "endColumn": 48,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/constraint/PathConstraint.java",
              "type": "String",
              "code": "        }\n    }\n\n    static PathConstraint create(String jcrPath, PathResolver resolver)\n            throws InvalidConstraintException {\n        try {\n            // constraint format: absolute or relative path with optional"
            },
            {
              "step": 6,
              "variableName": "jcrPath",
              "startLine": 76,
              "startColumn": 31,
              "endLine": 76,
              "endColumn": 38,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/constraint/PathConstraint.java",
              "type": "String",
              "code": "            } else {\n                if (deep) {\n                    // trim trailing wild card before building path\n                    jcrPath = jcrPath.substring(0, jcrPath.length() - JCR_WILDCARD.length());\n                }\n                path = resolver.getQPath(jcrPath);\n            }"
            },
            {
              "step": 7,
              "variableName": "jcrPath.substring(0, jcrPath.length() - JCR_WILDCARD.length())",
              "startLine": 76,
              "startColumn": 31,
              "endLine": 76,
              "endColumn": 93,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/constraint/PathConstraint.java",
              "type": "String",
              "code": "            } else {\n                if (deep) {\n                    // trim trailing wild card before building path\n                    jcrPath = jcrPath.substring(0, jcrPath.length() - JCR_WILDCARD.length());\n                }\n                path = resolver.getQPath(jcrPath);\n            }"
            },
            {
              "step": 8,
              "variableName": "msg",
              "startLine": 87,
              "startColumn": 23,
              "endLine": 87,
              "endColumn": 26,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/constraint/PathConstraint.java",
              "type": "",
              "code": "            return new PathConstraint(definition.toString(), path, deep);\n        } catch (NameException e) {\n            String msg = \"Invalid path expression specified as value constraint: \" + jcrPath;\n            log.debug(msg);\n            throw new InvalidConstraintException(msg, e);\n        } catch (NamespaceException e) {\n            String msg = \"Invalid path expression specified as value constraint: \" + jcrPath;"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 43,
      "fileName": "PathConstraint.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "currentToken",
              "startLine": 595,
              "startColumn": 39,
              "endLine": 595,
              "endColumn": 51,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-jcr-commons/src/main/java/org/apache/jackrabbit/commons/cnd/CompactNodeTypeDefReader.java",
              "type": "String",
              "code": "        do {\n            nextToken();\n            try {\n                pd.addValueConstraint(currentToken);\n            } catch (RepositoryException e) {\n                lexer.fail(\"Error adding value constraint for \" + pd.getName() + \" to \" + currentToken, e);\n            }"
            },
            {
              "step": 1,
              "variableName": "String constraint",
              "startLine": 246,
              "startColumn": 40,
              "endLine": 246,
              "endColumn": 57,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/QDefinitionBuilderFactory.java",
              "type": "String",
              "code": "        }\n\n        @Override\n        public void addValueConstraint(String constraint) throws InvalidConstraintException {\n            builder.addValueConstraint(ValueConstraint.create(getRequiredType(), constraint, resolver));\n        }\n"
            },
            {
              "step": 2,
              "variableName": "constraint",
              "startLine": 247,
              "startColumn": 82,
              "endLine": 247,
              "endColumn": 92,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/QDefinitionBuilderFactory.java",
              "type": "String",
              "code": "\n        @Override\n        public void addValueConstraint(String constraint) throws InvalidConstraintException {\n            builder.addValueConstraint(ValueConstraint.create(getRequiredType(), constraint, resolver));\n        }\n\n        @Override"
            },
            {
              "step": 3,
              "variableName": "String jcrDefinition",
              "startLine": 231,
              "startColumn": 52,
              "endLine": 231,
              "endColumn": 72,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/constraint/ValueConstraint.java",
              "type": "String",
              "code": "     * @return a new value constraint\n     * @throws InvalidConstraintException if the constraint is invalid\n     */\n    public static ValueConstraint create(int type, String jcrDefinition,\n                                         NamePathResolver resolver)\n            throws InvalidConstraintException {\n        if (jcrDefinition == null) {"
            },
            {
              "step": 4,
              "variableName": "jcrDefinition",
              "startLine": 260,
              "startColumn": 46,
              "endLine": 260,
              "endColumn": 59,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/constraint/ValueConstraint.java",
              "type": "String",
              "code": "                return NameConstraint.create(jcrDefinition, resolver);\n\n            case PropertyType.PATH:\n                return PathConstraint.create(jcrDefinition, resolver);\n\n            case PropertyType.REFERENCE:\n            case PropertyType.WEAKREFERENCE:"
            },
            {
              "step": 5,
              "variableName": "String jcrPath",
              "startLine": 64,
              "startColumn": 34,
              "endLine": 64,
              "endColumn": 48,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/constraint/PathConstraint.java",
              "type": "String",
              "code": "        }\n    }\n\n    static PathConstraint create(String jcrPath, PathResolver resolver)\n            throws InvalidConstraintException {\n        try {\n            // constraint format: absolute or relative path with optional"
            },
            {
              "step": 6,
              "variableName": "msg",
              "startLine": 91,
              "startColumn": 23,
              "endLine": 91,
              "endColumn": 26,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/constraint/PathConstraint.java",
              "type": "",
              "code": "            throw new InvalidConstraintException(msg, e);\n        } catch (NamespaceException e) {\n            String msg = \"Invalid path expression specified as value constraint: \" + jcrPath;\n            log.debug(msg);\n            throw new InvalidConstraintException(msg, e);\n        }\n    }"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "currentToken",
              "startLine": 595,
              "startColumn": 39,
              "endLine": 595,
              "endColumn": 51,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-jcr-commons/src/main/java/org/apache/jackrabbit/commons/cnd/CompactNodeTypeDefReader.java",
              "type": "String",
              "code": "        do {\n            nextToken();\n            try {\n                pd.addValueConstraint(currentToken);\n            } catch (RepositoryException e) {\n                lexer.fail(\"Error adding value constraint for \" + pd.getName() + \" to \" + currentToken, e);\n            }"
            },
            {
              "step": 1,
              "variableName": "String constraint",
              "startLine": 246,
              "startColumn": 40,
              "endLine": 246,
              "endColumn": 57,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/QDefinitionBuilderFactory.java",
              "type": "String",
              "code": "        }\n\n        @Override\n        public void addValueConstraint(String constraint) throws InvalidConstraintException {\n            builder.addValueConstraint(ValueConstraint.create(getRequiredType(), constraint, resolver));\n        }\n"
            },
            {
              "step": 2,
              "variableName": "constraint",
              "startLine": 247,
              "startColumn": 82,
              "endLine": 247,
              "endColumn": 92,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/QDefinitionBuilderFactory.java",
              "type": "String",
              "code": "\n        @Override\n        public void addValueConstraint(String constraint) throws InvalidConstraintException {\n            builder.addValueConstraint(ValueConstraint.create(getRequiredType(), constraint, resolver));\n        }\n\n        @Override"
            },
            {
              "step": 3,
              "variableName": "String jcrDefinition",
              "startLine": 231,
              "startColumn": 52,
              "endLine": 231,
              "endColumn": 72,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/constraint/ValueConstraint.java",
              "type": "String",
              "code": "     * @return a new value constraint\n     * @throws InvalidConstraintException if the constraint is invalid\n     */\n    public static ValueConstraint create(int type, String jcrDefinition,\n                                         NamePathResolver resolver)\n            throws InvalidConstraintException {\n        if (jcrDefinition == null) {"
            },
            {
              "step": 4,
              "variableName": "jcrDefinition",
              "startLine": 260,
              "startColumn": 46,
              "endLine": 260,
              "endColumn": 59,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/constraint/ValueConstraint.java",
              "type": "String",
              "code": "                return NameConstraint.create(jcrDefinition, resolver);\n\n            case PropertyType.PATH:\n                return PathConstraint.create(jcrDefinition, resolver);\n\n            case PropertyType.REFERENCE:\n            case PropertyType.WEAKREFERENCE:"
            },
            {
              "step": 5,
              "variableName": "String jcrPath",
              "startLine": 64,
              "startColumn": 34,
              "endLine": 64,
              "endColumn": 48,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/constraint/PathConstraint.java",
              "type": "String",
              "code": "        }\n    }\n\n    static PathConstraint create(String jcrPath, PathResolver resolver)\n            throws InvalidConstraintException {\n        try {\n            // constraint format: absolute or relative path with optional"
            },
            {
              "step": 6,
              "variableName": "jcrPath",
              "startLine": 76,
              "startColumn": 31,
              "endLine": 76,
              "endColumn": 38,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/constraint/PathConstraint.java",
              "type": "String",
              "code": "            } else {\n                if (deep) {\n                    // trim trailing wild card before building path\n                    jcrPath = jcrPath.substring(0, jcrPath.length() - JCR_WILDCARD.length());\n                }\n                path = resolver.getQPath(jcrPath);\n            }"
            },
            {
              "step": 7,
              "variableName": "jcrPath.substring(0, jcrPath.length() - JCR_WILDCARD.length())",
              "startLine": 76,
              "startColumn": 31,
              "endLine": 76,
              "endColumn": 93,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/constraint/PathConstraint.java",
              "type": "String",
              "code": "            } else {\n                if (deep) {\n                    // trim trailing wild card before building path\n                    jcrPath = jcrPath.substring(0, jcrPath.length() - JCR_WILDCARD.length());\n                }\n                path = resolver.getQPath(jcrPath);\n            }"
            },
            {
              "step": 8,
              "variableName": "msg",
              "startLine": 91,
              "startColumn": 23,
              "endLine": 91,
              "endColumn": 26,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/constraint/PathConstraint.java",
              "type": "",
              "code": "            throw new InvalidConstraintException(msg, e);\n        } catch (NamespaceException e) {\n            String msg = \"Invalid path expression specified as value constraint: \" + jcrPath;\n            log.debug(msg);\n            throw new InvalidConstraintException(msg, e);\n        }\n    }"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 44,
      "fileName": "ReferenceConstraint.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "currentToken",
              "startLine": 595,
              "startColumn": 39,
              "endLine": 595,
              "endColumn": 51,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-jcr-commons/src/main/java/org/apache/jackrabbit/commons/cnd/CompactNodeTypeDefReader.java",
              "type": "String",
              "code": "        do {\n            nextToken();\n            try {\n                pd.addValueConstraint(currentToken);\n            } catch (RepositoryException e) {\n                lexer.fail(\"Error adding value constraint for \" + pd.getName() + \" to \" + currentToken, e);\n            }"
            },
            {
              "step": 1,
              "variableName": "String constraint",
              "startLine": 246,
              "startColumn": 40,
              "endLine": 246,
              "endColumn": 57,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/QDefinitionBuilderFactory.java",
              "type": "String",
              "code": "        }\n\n        @Override\n        public void addValueConstraint(String constraint) throws InvalidConstraintException {\n            builder.addValueConstraint(ValueConstraint.create(getRequiredType(), constraint, resolver));\n        }\n"
            },
            {
              "step": 2,
              "variableName": "constraint",
              "startLine": 247,
              "startColumn": 82,
              "endLine": 247,
              "endColumn": 92,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/QDefinitionBuilderFactory.java",
              "type": "String",
              "code": "\n        @Override\n        public void addValueConstraint(String constraint) throws InvalidConstraintException {\n            builder.addValueConstraint(ValueConstraint.create(getRequiredType(), constraint, resolver));\n        }\n\n        @Override"
            },
            {
              "step": 3,
              "variableName": "String jcrDefinition",
              "startLine": 231,
              "startColumn": 52,
              "endLine": 231,
              "endColumn": 72,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/constraint/ValueConstraint.java",
              "type": "String",
              "code": "     * @return a new value constraint\n     * @throws InvalidConstraintException if the constraint is invalid\n     */\n    public static ValueConstraint create(int type, String jcrDefinition,\n                                         NamePathResolver resolver)\n            throws InvalidConstraintException {\n        if (jcrDefinition == null) {"
            },
            {
              "step": 4,
              "variableName": "jcrDefinition",
              "startLine": 264,
              "startColumn": 51,
              "endLine": 264,
              "endColumn": 64,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/constraint/ValueConstraint.java",
              "type": "String",
              "code": "\n            case PropertyType.REFERENCE:\n            case PropertyType.WEAKREFERENCE:\n                return ReferenceConstraint.create(jcrDefinition, resolver);\n\n            default:\n                throw new IllegalArgumentException(\"Unknown/unsupported target type for constraint: \" + PropertyType.nameFromValue(type));"
            },
            {
              "step": 5,
              "variableName": "String jcrName",
              "startLine": 43,
              "startColumn": 39,
              "endLine": 43,
              "endColumn": 53,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/constraint/ReferenceConstraint.java",
              "type": "String",
              "code": "        return new ReferenceConstraint(nameString, NAME_FACTORY.create(nameString));\n    }\n\n    static ReferenceConstraint create(String jcrName, NameResolver resolver)\n            throws InvalidConstraintException {\n        // constraint format: JCR name in prefix form\n        try {"
            },
            {
              "step": 6,
              "variableName": "msg",
              "startLine": 51,
              "startColumn": 23,
              "endLine": 51,
              "endColumn": 26,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/constraint/ReferenceConstraint.java",
              "type": "",
              "code": "            return new ReferenceConstraint(name.toString(), name);\n        } catch (NameException e) {\n            String msg = \"Invalid name constraint: \" + jcrName;\n            log.debug(msg);\n            throw new InvalidConstraintException(msg, e);\n        } catch (NamespaceException e) {\n            String msg = \"Invalid name constraint: \" + jcrName;"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 45,
      "fileName": "ReferenceConstraint.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "currentToken",
              "startLine": 595,
              "startColumn": 39,
              "endLine": 595,
              "endColumn": 51,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-jcr-commons/src/main/java/org/apache/jackrabbit/commons/cnd/CompactNodeTypeDefReader.java",
              "type": "String",
              "code": "        do {\n            nextToken();\n            try {\n                pd.addValueConstraint(currentToken);\n            } catch (RepositoryException e) {\n                lexer.fail(\"Error adding value constraint for \" + pd.getName() + \" to \" + currentToken, e);\n            }"
            },
            {
              "step": 1,
              "variableName": "String constraint",
              "startLine": 246,
              "startColumn": 40,
              "endLine": 246,
              "endColumn": 57,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/QDefinitionBuilderFactory.java",
              "type": "String",
              "code": "        }\n\n        @Override\n        public void addValueConstraint(String constraint) throws InvalidConstraintException {\n            builder.addValueConstraint(ValueConstraint.create(getRequiredType(), constraint, resolver));\n        }\n"
            },
            {
              "step": 2,
              "variableName": "constraint",
              "startLine": 247,
              "startColumn": 82,
              "endLine": 247,
              "endColumn": 92,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/QDefinitionBuilderFactory.java",
              "type": "String",
              "code": "\n        @Override\n        public void addValueConstraint(String constraint) throws InvalidConstraintException {\n            builder.addValueConstraint(ValueConstraint.create(getRequiredType(), constraint, resolver));\n        }\n\n        @Override"
            },
            {
              "step": 3,
              "variableName": "String jcrDefinition",
              "startLine": 231,
              "startColumn": 52,
              "endLine": 231,
              "endColumn": 72,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/constraint/ValueConstraint.java",
              "type": "String",
              "code": "     * @return a new value constraint\n     * @throws InvalidConstraintException if the constraint is invalid\n     */\n    public static ValueConstraint create(int type, String jcrDefinition,\n                                         NamePathResolver resolver)\n            throws InvalidConstraintException {\n        if (jcrDefinition == null) {"
            },
            {
              "step": 4,
              "variableName": "jcrDefinition",
              "startLine": 264,
              "startColumn": 51,
              "endLine": 264,
              "endColumn": 64,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/constraint/ValueConstraint.java",
              "type": "String",
              "code": "\n            case PropertyType.REFERENCE:\n            case PropertyType.WEAKREFERENCE:\n                return ReferenceConstraint.create(jcrDefinition, resolver);\n\n            default:\n                throw new IllegalArgumentException(\"Unknown/unsupported target type for constraint: \" + PropertyType.nameFromValue(type));"
            },
            {
              "step": 5,
              "variableName": "String jcrName",
              "startLine": 43,
              "startColumn": 39,
              "endLine": 43,
              "endColumn": 53,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/constraint/ReferenceConstraint.java",
              "type": "String",
              "code": "        return new ReferenceConstraint(nameString, NAME_FACTORY.create(nameString));\n    }\n\n    static ReferenceConstraint create(String jcrName, NameResolver resolver)\n            throws InvalidConstraintException {\n        // constraint format: JCR name in prefix form\n        try {"
            },
            {
              "step": 6,
              "variableName": "msg",
              "startLine": 55,
              "startColumn": 23,
              "endLine": 55,
              "endColumn": 26,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/constraint/ReferenceConstraint.java",
              "type": "",
              "code": "            throw new InvalidConstraintException(msg, e);\n        } catch (NamespaceException e) {\n            String msg = \"Invalid name constraint: \" + jcrName;\n            log.debug(msg);\n            throw new InvalidConstraintException(msg, e);\n        }\n    }"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 46,
      "fileName": "StringConstraint.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "currentToken",
              "startLine": 595,
              "startColumn": 39,
              "endLine": 595,
              "endColumn": 51,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-jcr-commons/src/main/java/org/apache/jackrabbit/commons/cnd/CompactNodeTypeDefReader.java",
              "type": "String",
              "code": "        do {\n            nextToken();\n            try {\n                pd.addValueConstraint(currentToken);\n            } catch (RepositoryException e) {\n                lexer.fail(\"Error adding value constraint for \" + pd.getName() + \" to \" + currentToken, e);\n            }"
            },
            {
              "step": 1,
              "variableName": "String constraint",
              "startLine": 246,
              "startColumn": 40,
              "endLine": 246,
              "endColumn": 57,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/QDefinitionBuilderFactory.java",
              "type": "String",
              "code": "        }\n\n        @Override\n        public void addValueConstraint(String constraint) throws InvalidConstraintException {\n            builder.addValueConstraint(ValueConstraint.create(getRequiredType(), constraint, resolver));\n        }\n"
            },
            {
              "step": 2,
              "variableName": "constraint",
              "startLine": 247,
              "startColumn": 82,
              "endLine": 247,
              "endColumn": 92,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/QDefinitionBuilderFactory.java",
              "type": "String",
              "code": "\n        @Override\n        public void addValueConstraint(String constraint) throws InvalidConstraintException {\n            builder.addValueConstraint(ValueConstraint.create(getRequiredType(), constraint, resolver));\n        }\n\n        @Override"
            },
            {
              "step": 3,
              "variableName": "String jcrDefinition",
              "startLine": 231,
              "startColumn": 52,
              "endLine": 231,
              "endColumn": 72,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/constraint/ValueConstraint.java",
              "type": "String",
              "code": "     * @return a new value constraint\n     * @throws InvalidConstraintException if the constraint is invalid\n     */\n    public static ValueConstraint create(int type, String jcrDefinition,\n                                         NamePathResolver resolver)\n            throws InvalidConstraintException {\n        if (jcrDefinition == null) {"
            },
            {
              "step": 4,
              "variableName": "jcrDefinition",
              "startLine": 240,
              "startColumn": 45,
              "endLine": 240,
              "endColumn": 58,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/constraint/ValueConstraint.java",
              "type": "String",
              "code": "        switch (type) {\n            case PropertyType.STRING:\n            case PropertyType.URI:\n                return new StringConstraint(jcrDefinition);\n\n            case PropertyType.BOOLEAN:\n                return new BooleanConstraint(jcrDefinition);"
            },
            {
              "step": 5,
              "variableName": "String definition",
              "startLine": 37,
              "startColumn": 29,
              "endLine": 37,
              "endColumn": 46,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/constraint/StringConstraint.java",
              "type": "String",
              "code": "\n    private final Pattern pattern;\n\n    public StringConstraint(String definition) throws InvalidConstraintException {\n        super(definition);\n\n        // constraint format: regexp"
            },
            {
              "step": 6,
              "variableName": "msg",
              "startLine": 45,
              "startColumn": 23,
              "endLine": 45,
              "endColumn": 26,
              "uri": "jackrabbit-jackrabbit-2.23.1-beta/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/constraint/StringConstraint.java",
              "type": "",
              "code": "            pattern = Pattern.compile(definition);\n        } catch (PatternSyntaxException pse) {\n            String msg = \"'\" + definition + \"' is not valid regular expression syntax\";\n            log.debug(msg);\n            throw new InvalidConstraintException(msg, pse);\n        }\n    }"
            }
          ],
          "label": "No"
        }
      ]
    }
  ]
}