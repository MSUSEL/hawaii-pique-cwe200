# Use the official Node.js image as the base
FROM node:20.11.1-bullseye-slim

ARG JAVA_VERSION=11
ARG MAVEN_VERSION=3.9.5

ENV JAVA_HOME=/usr/local/java
ENV MAVEN_HOME=/usr/local/maven
ENV PATH=$JAVA_HOME/bin:$MAVEN_HOME/bin:$PATH

# Install core dependencies
RUN apt-get update && apt-get install -y \
    build-essential \
    wget \
    curl \
    gnupg2 \
    ca-certificates \
    git \
    libssl-dev \
    zlib1g-dev \
    libbz2-dev \
    libreadline-dev \
    libsqlite3-dev \
    libffi-dev \
    liblzma-dev \
    tk-dev \
    unzip \
    && rm -rf /var/lib/apt/lists/*

# ? Install CUDA 12.0 Runtime via NVIDIA official repo
RUN wget https://developer.download.nvidia.com/compute/cuda/repos/debian11/x86_64/cuda-keyring_1.1-1_all.deb && \
    dpkg -i cuda-keyring_1.1-1_all.deb && \
    apt-get update && \
    apt-get install -y cuda-cudart-12-0 && \
    ln -s /usr/local/cuda-12.0 /usr/local/cuda && \
    rm -f cuda-keyring_1.1-1_all.deb && \
    rm -rf /var/lib/apt/lists/*

# Install Python 3.12.2 from source
ENV PYTHON_VERSION=3.12.2
RUN wget https://www.python.org/ftp/python/$PYTHON_VERSION/Python-$PYTHON_VERSION.tgz \
    && tar xzf Python-$PYTHON_VERSION.tgz \
    && cd Python-$PYTHON_VERSION \
    && ./configure --enable-optimizations \
    && make altinstall \
    && cd .. \
    && rm -rf Python-$PYTHON_VERSION.tgz Python-$PYTHON_VERSION \
    && ln -s /usr/local/bin/python3.12 /usr/local/bin/python

# Install pip for Python 3.12
RUN wget https://bootstrap.pypa.io/get-pip.py && python3.12 get-pip.py && rm get-pip.py

# Copy requirements.txt and install dependencies
COPY requirements.txt ./
RUN python3.12 -m pip install --no-cache-dir -r requirements.txt

# ? Override PyTorch to install CUDA-enabled build (compatible with CUDA 12.0)
RUN python3.12 -m pip install --no-cache-dir torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu121

# Install 'concurrently' globally
RUN npm install -g concurrently

# Create a common directory for Java installations
RUN mkdir -p /usr/local/java

# Install OpenJDK 8
RUN mkdir -p /usr/local/java/jdk8 && \
    wget -O /tmp/openjdk8.tar.gz https://github.com/adoptium/temurin8-binaries/releases/download/jdk8u372-b07/OpenJDK8U-jdk_x64_linux_hotspot_8u372b07.tar.gz && \
    tar -xzf /tmp/openjdk8.tar.gz -C /usr/local/java/jdk8 --strip-components=1 && \
    rm /tmp/openjdk8.tar.gz

# Install OpenJDK 11
RUN mkdir -p /usr/local/java/jdk11 && \
    wget -O /tmp/openjdk11.tar.gz https://github.com/adoptium/temurin11-binaries/releases/download/jdk-11.0.20+8/OpenJDK11U-jdk_x64_linux_hotspot_11.0.20_8.tar.gz && \
    tar -xzf /tmp/openjdk11.tar.gz -C /usr/local/java/jdk11 --strip-components=1 && \
    rm /tmp/openjdk11.tar.gz

# Install OpenJDK 17
RUN mkdir -p /usr/local/java/jdk17 && \
    wget -O /tmp/openjdk17.tar.gz https://github.com/adoptium/temurin17-binaries/releases/download/jdk-17.0.8+7/OpenJDK17U-jdk_x64_linux_hotspot_17.0.8_7.tar.gz && \
    tar -xzf /tmp/openjdk17.tar.gz -C /usr/local/java/jdk17 --strip-components=1 && \
    rm /tmp/openjdk17.tar.gz

# Install OpenJDK 21 (Temurin 21.0.6+7)
RUN mkdir -p /usr/local/java/jdk21 && \
    wget -O /tmp/openjdk21.tar.gz https://github.com/adoptium/temurin21-binaries/releases/download/jdk-21.0.6+7/OpenJDK21U-jdk_x64_linux_hotspot_21.0.6_7.tar.gz && \
    tar -xzf /tmp/openjdk21.tar.gz -C /usr/local/java/jdk21 --strip-components=1 && \
    rm /tmp/openjdk21.tar.gz

# Set default Java to JDK 11
ENV JAVA_HOME=/usr/local/java/jdk11
ENV PATH=$JAVA_HOME/bin:$MAVEN_HOME/bin:$PATH


# Install Maven
RUN wget -O /tmp/maven.tar.gz https://downloads.apache.org/maven/maven-3/$MAVEN_VERSION/binaries/apache-maven-$MAVEN_VERSION-bin.tar.gz \
    && mkdir -p $MAVEN_HOME \
    && tar -xzf /tmp/maven.tar.gz -C $MAVEN_HOME --strip-components=1 \
    && rm /tmp/maven.tar.gz

# Install Gradle
ENV GRADLE_VERSION=8.6
ENV GRADLE_HOME=/usr/local/gradle

RUN mkdir -p $GRADLE_HOME \
    && wget -O /tmp/gradle.zip https://services.gradle.org/distributions/gradle-${GRADLE_VERSION}-bin.zip \
    && unzip /tmp/gradle.zip -d /opt/gradle-tmp \
    && mv /opt/gradle-tmp/gradle-*/* $GRADLE_HOME \
    && rm -rf /tmp/gradle.zip /opt/gradle-tmp


# Install CodeQL CLI
ENV CODEQL_VERSION=2.20.3
RUN wget -O /tmp/codeql.zip https://github.com/github/codeql-cli-binaries/releases/download/v$CODEQL_VERSION/codeql-linux64.zip \
    && unzip /tmp/codeql.zip -d /opt \
    && rm /tmp/codeql.zip \
    && ln -s /opt/codeql/codeql /usr/local/bin/codeql

# Set working directory
WORKDIR /app

# Copy package files
COPY package*.json ./
COPY backend/package*.json ./backend/
COPY frontend/package*.json ./frontend/

# Copy full source
COPY . .

# Build and setup CodeQL
RUN npm run build
RUN npm run codeql-setup

# Expose frontend and backend ports
EXPOSE 4200 5400

# Start everything
CMD ["npm", "start"]
