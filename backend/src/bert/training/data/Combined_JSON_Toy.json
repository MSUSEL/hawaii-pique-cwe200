[
    {
        "fileName": "BAD_CryptoSeedExposure.java",
        "variables": [
            {
                "name": "cryptoConfig",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "userId",
                        "type": "String",
                        "context": "    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException {\r\n        String userId = request.getParameter(\"userId\");\r\n        CryptoConfig cryptoConfig = getCryptoConfig(userId);\r\n        \r\n        response.setHeader(\"X-Crypto-Seed\", cryptoConfig.getSeedData());\r\n |     protected void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException {\r\n        String userId = request.getParameter(\"userId\");\r\n        CryptoConfig cryptoConfig = getCryptoConfig(userId);\r\n        \r\n        response.setHeader(\"X-Crypto-Seed\", cryptoConfig.getSeedData());\r\n",
                        "nextNode": "getCryptoConfig(userId)"
                    },
                    {
                        "name": "getCryptoConfig(userId)",
                        "type": "CryptoConfig",
                        "context": "    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException {\r\n        String userId = request.getParameter(\"userId\");\r\n        CryptoConfig cryptoConfig = getCryptoConfig(userId);\r\n        \r\n        response.setHeader(\"X-Crypto-Seed\", cryptoConfig.getSeedData());\r\n |     protected void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException {\r\n        String userId = request.getParameter(\"userId\");\r\n        CryptoConfig cryptoConfig = getCryptoConfig(userId);\r\n        \r\n        response.setHeader(\"X-Crypto-Seed\", cryptoConfig.getSeedData());\r\n",
                        "nextNode": "cryptoConfig"
                    },
                    {
                        "name": "cryptoConfig",
                        "type": "Dataflow from `userId` to `cryptoConfig`\nDataflow from `getParameter(...)` to `cryptoConfig`\nDataflow from `getCryptoConfig(...)` to `cryptoConfig`\nDataflow from `new CryptoConfig(...)` to `cryptoConfig`\nDataflow from `\"secureRandomSeed12345\"` to `cryptoConfig`\nDataflow from `\"userId\"` to `cryptoConfig`",
                        "context": "        CryptoConfig cryptoConfig = getCryptoConfig(userId);\r\n        \r\n        response.setHeader(\"X-Crypto-Seed\", cryptoConfig.getSeedData());\r\n        response.setContentType(\"application/json\");\r\n        response.getWriter().write(encryptData(\"{\\\"success\\\": true, \\\"content\\\": \\\"Your data has been securely stored.\\\"}\", cryptoConfig));\r\n |         CryptoConfig cryptoConfig = getCryptoConfig(userId);\r\n        \r\n        response.setHeader(\"X-Crypto-Seed\", cryptoConfig.getSeedData());\r\n        response.setContentType(\"application/json\");\r\n        response.getWriter().write(encryptData(\"{\\\"success\\\": true, \\\"content\\\": \\\"Your data has been securely stored.\\\"}\", cryptoConfig));\r\n |         response.setHeader(\"X-Crypto-Seed\", cryptoConfig.getSeedData());\r\n        response.setContentType(\"application/json\");\r\n        response.getWriter().write(encryptData(\"{\\\"success\\\": true, \\\"content\\\": \\\"Your data has been securely stored.\\\"}\", cryptoConfig));\r\n        response.getWriter().close();\r\n    }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "request",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "data",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "\"{\\\"success\\\": true, \\\"content\\\": \\\"Your data has been securely stored.\\\"}\"",
                        "type": "String",
                        "context": "        response.setHeader(\"X-Crypto-Seed\", cryptoConfig.getSeedData());\r\n        response.setContentType(\"application/json\");\r\n        response.getWriter().write(encryptData(\"{\\\"success\\\": true, \\\"content\\\": \\\"Your data has been securely stored.\\\"}\", cryptoConfig));\r\n        response.getWriter().close();\r\n    }\r\n",
                        "nextNode": "String data"
                    },
                    {
                        "name": "String data",
                        "type": "String",
                        "context": "    }\r\n\r\n    private String encryptData(String data, CryptoConfig cryptoConfig) {\r\n        // Simulate encryption (for demonstration purposes, actual encryption details omitted)\r\n        return \"EncryptedData{\" + data + \"}\";\r\n",
                        "nextNode": "data"
                    },
                    {
                        "name": "data",
                        "type": "Dataflow from `\"{{\\\"success\\\": true, \\\"content\\\": \\\"Your data has been securely stored.\\\"}}\"` to `data`",
                        "context": "    private String encryptData(String data, CryptoConfig cryptoConfig) {\r\n        // Simulate encryption (for demonstration purposes, actual encryption details omitted)\r\n        return \"EncryptedData{\" + data + \"}\";\r\n    }\r\n\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "response",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "seedData",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "\"secureRandomSeed12345\"",
                        "type": "String",
                        "context": "    private CryptoConfig getCryptoConfig(String userId) {\r\n        // Simulate fetching cryptographic configuration for the user\r\n        return new CryptoConfig(\"secureRandomSeed12345\");\r\n    }\r\n\r\n |     private CryptoConfig getCryptoConfig(String userId) {\r\n        // Simulate fetching cryptographic configuration for the user\r\n        return new CryptoConfig(\"secureRandomSeed12345\");\r\n    }\r\n\r\n",
                        "nextNode": "String seedData"
                    },
                    {
                        "name": "String seedData",
                        "type": "String",
                        "context": "        private String seedData;\r\n\r\n        public CryptoConfig(String seedData) {\r\n            this.seedData = seedData;\r\n        }\r\n |         private String seedData;\r\n\r\n        public CryptoConfig(String seedData) {\r\n            this.seedData = seedData;\r\n        }\r\n",
                        "nextNode": "seedData"
                    },
                    {
                        "name": "getSeedData()",
                        "type": "String",
                        "context": "        }\r\n\r\n        public String getSeedData() {\r\n            return seedData;\r\n        }\r\n",
                        "nextNode": "seedData"
                    },
                    {
                        "name": "seedData",
                        "type": "Dataflow from `\"secureRandomSeed12345\"` to `seedData`",
                        "context": "\r\n        public CryptoConfig(String seedData) {\r\n            this.seedData = seedData;\r\n        }\r\n\r\n | \r\n        public CryptoConfig(String seedData) {\r\n            this.seedData = seedData;\r\n        }\r\n\r\n | \r\n        public String getSeedData() {\r\n            return seedData;\r\n        }\r\n    }\r\n | \r\n        public String getSeedData() {\r\n            return seedData;\r\n        }\r\n    }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "userId",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "request.getParameter(\"userId\")",
                        "type": "String",
                        "context": "\r\n    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException {\r\n        String userId = request.getParameter(\"userId\");\r\n        CryptoConfig cryptoConfig = getCryptoConfig(userId);\r\n        \r\n",
                        "nextNode": "userId"
                    },
                    {
                        "name": "userId",
                        "type": "Dataflow from `getParameter(...)` to `userId`\nDataflow from `\"userId\"` to `userId`",
                        "context": "    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException {\r\n        String userId = request.getParameter(\"userId\");\r\n        CryptoConfig cryptoConfig = getCryptoConfig(userId);\r\n        \r\n        response.setHeader(\"X-Crypto-Seed\", cryptoConfig.getSeedData());\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "application/json",
                "isSensitive": "no"
            },
            {
                "name": "{\"success\": true, \"content\": \"Your data has been securely stored.\"}",
                "isSensitive": "no"
            },
            {
                "name": "X-Crypto-Seed",
                "isSensitive": "no"
            },
            {
                "name": "secureRandomSeed12345",
                "isSensitive": "yes"
            },
            {
                "name": "EncryptedData{",
                "isSensitive": "no"
            },
            {
                "name": "userId",
                "isSensitive": "no"
            },
            {
                "name": "}",
                "isSensitive": "no"
            }
        ],
        "comments": [
            {
                "name": "Simulate encryption (for demonstration purposes, actual encryption details omitted)",
                "isSensitive": "no"
            },
            {
                "name": "Simulate fetching cryptographic configuration for the user",
                "isSensitive": "no"
            }
        ],
        "sinks": [
            {
                "name": "getSeedData",
                "isSink": "no"
            },
            {
                "name": "encryptData",
                "isSink": "no"
            },
            {
                "name": "getWriter",
                "isSink": "no"
            },
            {
                "name": "setContentType",
                "isSink": "no"
            },
            {
                "name": "getCryptoConfig",
                "isSink": "no"
            },
            {
                "name": "write",
                "isSink": "yes"
            },
            {
                "name": "close",
                "isSink": "yes"
            },
            {
                "name": "setHeader",
                "isSink": "no"
            },
            {
                "name": "getParameter",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "BAD_EmailHeaderExposure.java",
        "variables": [
            {
                "name": "e",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "session",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "properties",
                        "type": "Properties",
                        "context": "        Properties properties = System.getProperties();\r\n        properties.setProperty(\"mail.smtp.host\", \"smtp.internal.books.com\");\r\n        Session session = Session.getDefaultInstance(properties, null);\r\n\r\n        try {\r\n",
                        "nextNode": "Session.getDefaultInstance(properties, null)"
                    },
                    {
                        "name": "Session.getDefaultInstance(properties, null)",
                        "type": "Session",
                        "context": "        Properties properties = System.getProperties();\r\n        properties.setProperty(\"mail.smtp.host\", \"smtp.internal.books.com\");\r\n        Session session = Session.getDefaultInstance(properties, null);\r\n\r\n        try {\r\n",
                        "nextNode": "session"
                    },
                    {
                        "name": "session",
                        "type": "Dataflow from `properties` to `session`\nDataflow from `properties` to `session`\nDataflow from `getProperties(...)` to `session`\nDataflow from `getDefaultInstance(...)` to `session`\nDataflow from `\"smtp.internal.books.com\"` to `session`\nDataflow from `null` to `session`",
                        "context": "\r\n        try {\r\n            MimeMessage message = new MimeMessage(session);\r\n            message.setRecipient(Message.RecipientType.TO, new InternetAddress(recipient));\r\n            message.setSubject(\"Here is your session Info\");\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "recipient",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "sessionToken",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "message",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "properties",
                        "type": "Properties",
                        "context": "        Properties properties = System.getProperties();\r\n        properties.setProperty(\"mail.smtp.host\", \"smtp.internal.books.com\");\r\n        Session session = Session.getDefaultInstance(properties, null);\r\n\r\n        try {\r\n |         Properties properties = System.getProperties();\r\n        properties.setProperty(\"mail.smtp.host\", \"smtp.internal.books.com\");\r\n        Session session = Session.getDefaultInstance(properties, null);\r\n\r\n        try {\r\n |         Properties properties = System.getProperties();\r\n        properties.setProperty(\"mail.smtp.host\", \"smtp.internal.books.com\");\r\n        Session session = Session.getDefaultInstance(properties, null);\r\n\r\n        try {\r\n |         Properties properties = System.getProperties();\r\n        properties.setProperty(\"mail.smtp.host\", \"smtp.internal.books.com\");\r\n        Session session = Session.getDefaultInstance(properties, null);\r\n\r\n        try {\r\n",
                        "nextNode": "Session.getDefaultInstance(properties, null)"
                    },
                    {
                        "name": "Session.getDefaultInstance(properties, null)",
                        "type": "Session",
                        "context": "        Properties properties = System.getProperties();\r\n        properties.setProperty(\"mail.smtp.host\", \"smtp.internal.books.com\");\r\n        Session session = Session.getDefaultInstance(properties, null);\r\n\r\n        try {\r\n |         Properties properties = System.getProperties();\r\n        properties.setProperty(\"mail.smtp.host\", \"smtp.internal.books.com\");\r\n        Session session = Session.getDefaultInstance(properties, null);\r\n\r\n        try {\r\n |         Properties properties = System.getProperties();\r\n        properties.setProperty(\"mail.smtp.host\", \"smtp.internal.books.com\");\r\n        Session session = Session.getDefaultInstance(properties, null);\r\n\r\n        try {\r\n |         Properties properties = System.getProperties();\r\n        properties.setProperty(\"mail.smtp.host\", \"smtp.internal.books.com\");\r\n        Session session = Session.getDefaultInstance(properties, null);\r\n\r\n        try {\r\n",
                        "nextNode": "session"
                    },
                    {
                        "name": "session",
                        "type": "Session",
                        "context": "\r\n        try {\r\n            MimeMessage message = new MimeMessage(session);\r\n            message.setRecipient(Message.RecipientType.TO, new InternetAddress(recipient));\r\n            message.setSubject(\"Here is your session Info\");\r\n | \r\n        try {\r\n            MimeMessage message = new MimeMessage(session);\r\n            message.setRecipient(Message.RecipientType.TO, new InternetAddress(recipient));\r\n            message.setSubject(\"Here is your session Info\");\r\n | \r\n        try {\r\n            MimeMessage message = new MimeMessage(session);\r\n            message.setRecipient(Message.RecipientType.TO, new InternetAddress(recipient));\r\n            message.setSubject(\"Here is your session Info\");\r\n | \r\n        try {\r\n            MimeMessage message = new MimeMessage(session);\r\n            message.setRecipient(Message.RecipientType.TO, new InternetAddress(recipient));\r\n            message.setSubject(\"Here is your session Info\");\r\n",
                        "nextNode": "new MimeMessage(session)"
                    },
                    {
                        "name": "new MimeMessage(session)",
                        "type": "MimeMessage",
                        "context": "\r\n        try {\r\n            MimeMessage message = new MimeMessage(session);\r\n            message.setRecipient(Message.RecipientType.TO, new InternetAddress(recipient));\r\n            message.setSubject(\"Here is your session Info\");\r\n | \r\n        try {\r\n            MimeMessage message = new MimeMessage(session);\r\n            message.setRecipient(Message.RecipientType.TO, new InternetAddress(recipient));\r\n            message.setSubject(\"Here is your session Info\");\r\n | \r\n        try {\r\n            MimeMessage message = new MimeMessage(session);\r\n            message.setRecipient(Message.RecipientType.TO, new InternetAddress(recipient));\r\n            message.setSubject(\"Here is your session Info\");\r\n | \r\n        try {\r\n            MimeMessage message = new MimeMessage(session);\r\n            message.setRecipient(Message.RecipientType.TO, new InternetAddress(recipient));\r\n            message.setSubject(\"Here is your session Info\");\r\n",
                        "nextNode": "message"
                    },
                    {
                        "name": "message",
                        "type": "Dataflow from `properties` to `message`\nDataflow from `properties` to `message`\nDataflow from `session` to `message`\nDataflow from `getProperties(...)` to `message`\nDataflow from `getDefaultInstance(...)` to `message`\nDataflow from `\"smtp.internal.books.com\"` to `message`\nDataflow from `new MimeMessage(...)` to `message`\nDataflow from `null` to `message`",
                        "context": "        try {\r\n            MimeMessage message = new MimeMessage(session);\r\n            message.setRecipient(Message.RecipientType.TO, new InternetAddress(recipient));\r\n            message.setSubject(\"Here is your session Info\");\r\n            message.addHeader(\"X-Session-Token\", sessionToken);\r\n |         try {\r\n            MimeMessage message = new MimeMessage(session);\r\n            message.setRecipient(Message.RecipientType.TO, new InternetAddress(recipient));\r\n            message.setSubject(\"Here is your session Info\");\r\n            message.addHeader(\"X-Session-Token\", sessionToken);\r\n |             MimeMessage message = new MimeMessage(session);\r\n            message.setRecipient(Message.RecipientType.TO, new InternetAddress(recipient));\r\n            message.setSubject(\"Here is your session Info\");\r\n            message.addHeader(\"X-Session-Token\", sessionToken);\r\n            Transport.send(message);\r\n |         try {\r\n            MimeMessage message = new MimeMessage(session);\r\n            message.setRecipient(Message.RecipientType.TO, new InternetAddress(recipient));\r\n            message.setSubject(\"Here is your session Info\");\r\n            message.addHeader(\"X-Session-Token\", sessionToken);\r\n |             MimeMessage message = new MimeMessage(session);\r\n            message.setRecipient(Message.RecipientType.TO, new InternetAddress(recipient));\r\n            message.setSubject(\"Here is your session Info\");\r\n            message.addHeader(\"X-Session-Token\", sessionToken);\r\n            Transport.send(message);\r\n |             message.setRecipient(Message.RecipientType.TO, new InternetAddress(recipient));\r\n            message.setSubject(\"Here is your session Info\");\r\n            message.addHeader(\"X-Session-Token\", sessionToken);\r\n            Transport.send(message);\r\n        } catch (MessagingException e) {\r\n |         try {\r\n            MimeMessage message = new MimeMessage(session);\r\n            message.setRecipient(Message.RecipientType.TO, new InternetAddress(recipient));\r\n            message.setSubject(\"Here is your session Info\");\r\n            message.addHeader(\"X-Session-Token\", sessionToken);\r\n |             MimeMessage message = new MimeMessage(session);\r\n            message.setRecipient(Message.RecipientType.TO, new InternetAddress(recipient));\r\n            message.setSubject(\"Here is your session Info\");\r\n            message.addHeader(\"X-Session-Token\", sessionToken);\r\n            Transport.send(message);\r\n |             message.setRecipient(Message.RecipientType.TO, new InternetAddress(recipient));\r\n            message.setSubject(\"Here is your session Info\");\r\n            message.addHeader(\"X-Session-Token\", sessionToken);\r\n            Transport.send(message);\r\n        } catch (MessagingException e) {\r\n |             message.setSubject(\"Here is your session Info\");\r\n            message.addHeader(\"X-Session-Token\", sessionToken);\r\n            Transport.send(message);\r\n        } catch (MessagingException e) {\r\n            System.out.println(\"Failed to send email: \" + e.getMessage());\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "properties",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "System.getProperties()",
                        "type": "Properties",
                        "context": "public class BAD_EmailHeaderExposure {\r\n    public void sendEmailWithSensitiveHeader(String recipient, String sessionToken) {\r\n        Properties properties = System.getProperties();\r\n        properties.setProperty(\"mail.smtp.host\", \"smtp.internal.books.com\");\r\n        Session session = Session.getDefaultInstance(properties, null);\r\n | public class BAD_EmailHeaderExposure {\r\n    public void sendEmailWithSensitiveHeader(String recipient, String sessionToken) {\r\n        Properties properties = System.getProperties();\r\n        properties.setProperty(\"mail.smtp.host\", \"smtp.internal.books.com\");\r\n        Session session = Session.getDefaultInstance(properties, null);\r\n",
                        "nextNode": "properties"
                    },
                    {
                        "name": "properties",
                        "type": "Properties",
                        "context": "    public void sendEmailWithSensitiveHeader(String recipient, String sessionToken) {\r\n        Properties properties = System.getProperties();\r\n        properties.setProperty(\"mail.smtp.host\", \"smtp.internal.books.com\");\r\n        Session session = Session.getDefaultInstance(properties, null);\r\n\r\n |         Properties properties = System.getProperties();\r\n        properties.setProperty(\"mail.smtp.host\", \"smtp.internal.books.com\");\r\n        Session session = Session.getDefaultInstance(properties, null);\r\n\r\n        try {\r\n |     public void sendEmailWithSensitiveHeader(String recipient, String sessionToken) {\r\n        Properties properties = System.getProperties();\r\n        properties.setProperty(\"mail.smtp.host\", \"smtp.internal.books.com\");\r\n        Session session = Session.getDefaultInstance(properties, null);\r\n\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "Failed to send email:",
                "isSensitive": "no"
            },
            {
                "name": "smtp.internal.books.com",
                "isSensitive": "yes"
            },
            {
                "name": "Here is your session Info",
                "isSensitive": "no"
            },
            {
                "name": "mail.smtp.host",
                "isSensitive": "no"
            },
            {
                "name": "X-Session-Token",
                "isSensitive": "no"
            }
        ],
        "comments": [],
        "sinks": [
            {
                "name": "getDefaultInstance",
                "isSink": "no"
            },
            {
                "name": "println",
                "isSink": "yes"
            },
            {
                "name": "setSubject",
                "isSink": "no"
            },
            {
                "name": "addHeader",
                "isSink": "no"
            },
            {
                "name": "setRecipient",
                "isSink": "no"
            },
            {
                "name": "getProperties",
                "isSink": "no"
            },
            {
                "name": "setProperty",
                "isSink": "no"
            },
            {
                "name": "getMessage",
                "isSink": "no"
            },
            {
                "name": "send",
                "isSink": "yes"
            }
        ]
    },
    {
        "fileName": "BAD_ExposeErrorSensitiveDetailsInServletResponse.java",
        "variables": [
            {
                "name": "request",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "e",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "response",
                "isSensitive": "yes",
                "graph": []
            }
        ],
        "strings": [
            {
                "name": "Invalid request parameters",
                "isSensitive": "no"
            },
            {
                "name": "Failed to process request:",
                "isSensitive": "no"
            }
        ],
        "comments": [],
        "sinks": [
            {
                "name": "println",
                "isSink": "yes"
            },
            {
                "name": "getWriter",
                "isSink": "no"
            },
            {
                "name": "getMessage",
                "isSink": "no"
            },
            {
                "name": "processRequest",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "BAD_ExposeSensitiveInfoInEmail.java",
        "variables": [
            {
                "name": "mex",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "session",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "properties",
                        "type": "Properties",
                        "context": "        Properties properties = System.getProperties();\r\n        properties.setProperty(\"mail.smtp.host\", \"walmart.internal.com\");\r\n        Session session = Session.getDefaultInstance(properties);\r\n\r\n        try {\r\n",
                        "nextNode": "Session.getDefaultInstance(properties)"
                    },
                    {
                        "name": "Session.getDefaultInstance(properties)",
                        "type": "Session",
                        "context": "        Properties properties = System.getProperties();\r\n        properties.setProperty(\"mail.smtp.host\", \"walmart.internal.com\");\r\n        Session session = Session.getDefaultInstance(properties);\r\n\r\n        try {\r\n",
                        "nextNode": "session"
                    },
                    {
                        "name": "session",
                        "type": "Dataflow from `properties` to `session`\nDataflow from `properties` to `session`\nDataflow from `getProperties(...)` to `session`\nDataflow from `getDefaultInstance(...)` to `session`\nDataflow from `\"walmart.internal.com\"` to `session`",
                        "context": "\r\n        try {\r\n            MimeMessage message = new MimeMessage(session);\r\n            message.setFrom(new InternetAddress(\"fredsemailm@walmart.com\"));\r\n            message.addRecipient(Message.RecipientType.TO, new InternetAddress(recipient));\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "creditCardNumber",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "recipient",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "message",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "properties",
                        "type": "Properties",
                        "context": "        Properties properties = System.getProperties();\r\n        properties.setProperty(\"mail.smtp.host\", \"walmart.internal.com\");\r\n        Session session = Session.getDefaultInstance(properties);\r\n\r\n        try {\r\n |         Properties properties = System.getProperties();\r\n        properties.setProperty(\"mail.smtp.host\", \"walmart.internal.com\");\r\n        Session session = Session.getDefaultInstance(properties);\r\n\r\n        try {\r\n |         Properties properties = System.getProperties();\r\n        properties.setProperty(\"mail.smtp.host\", \"walmart.internal.com\");\r\n        Session session = Session.getDefaultInstance(properties);\r\n\r\n        try {\r\n |         Properties properties = System.getProperties();\r\n        properties.setProperty(\"mail.smtp.host\", \"walmart.internal.com\");\r\n        Session session = Session.getDefaultInstance(properties);\r\n\r\n        try {\r\n |         Properties properties = System.getProperties();\r\n        properties.setProperty(\"mail.smtp.host\", \"walmart.internal.com\");\r\n        Session session = Session.getDefaultInstance(properties);\r\n\r\n        try {\r\n",
                        "nextNode": "Session.getDefaultInstance(properties)"
                    },
                    {
                        "name": "Session.getDefaultInstance(properties)",
                        "type": "Session",
                        "context": "        Properties properties = System.getProperties();\r\n        properties.setProperty(\"mail.smtp.host\", \"walmart.internal.com\");\r\n        Session session = Session.getDefaultInstance(properties);\r\n\r\n        try {\r\n |         Properties properties = System.getProperties();\r\n        properties.setProperty(\"mail.smtp.host\", \"walmart.internal.com\");\r\n        Session session = Session.getDefaultInstance(properties);\r\n\r\n        try {\r\n |         Properties properties = System.getProperties();\r\n        properties.setProperty(\"mail.smtp.host\", \"walmart.internal.com\");\r\n        Session session = Session.getDefaultInstance(properties);\r\n\r\n        try {\r\n |         Properties properties = System.getProperties();\r\n        properties.setProperty(\"mail.smtp.host\", \"walmart.internal.com\");\r\n        Session session = Session.getDefaultInstance(properties);\r\n\r\n        try {\r\n |         Properties properties = System.getProperties();\r\n        properties.setProperty(\"mail.smtp.host\", \"walmart.internal.com\");\r\n        Session session = Session.getDefaultInstance(properties);\r\n\r\n        try {\r\n",
                        "nextNode": "session"
                    },
                    {
                        "name": "session",
                        "type": "Session",
                        "context": "\r\n        try {\r\n            MimeMessage message = new MimeMessage(session);\r\n            message.setFrom(new InternetAddress(\"fredsemailm@walmart.com\"));\r\n            message.addRecipient(Message.RecipientType.TO, new InternetAddress(recipient));\r\n | \r\n        try {\r\n            MimeMessage message = new MimeMessage(session);\r\n            message.setFrom(new InternetAddress(\"fredsemailm@walmart.com\"));\r\n            message.addRecipient(Message.RecipientType.TO, new InternetAddress(recipient));\r\n | \r\n        try {\r\n            MimeMessage message = new MimeMessage(session);\r\n            message.setFrom(new InternetAddress(\"fredsemailm@walmart.com\"));\r\n            message.addRecipient(Message.RecipientType.TO, new InternetAddress(recipient));\r\n | \r\n        try {\r\n            MimeMessage message = new MimeMessage(session);\r\n            message.setFrom(new InternetAddress(\"fredsemailm@walmart.com\"));\r\n            message.addRecipient(Message.RecipientType.TO, new InternetAddress(recipient));\r\n | \r\n        try {\r\n            MimeMessage message = new MimeMessage(session);\r\n            message.setFrom(new InternetAddress(\"fredsemailm@walmart.com\"));\r\n            message.addRecipient(Message.RecipientType.TO, new InternetAddress(recipient));\r\n",
                        "nextNode": "new MimeMessage(session)"
                    },
                    {
                        "name": "new MimeMessage(session)",
                        "type": "MimeMessage",
                        "context": "\r\n        try {\r\n            MimeMessage message = new MimeMessage(session);\r\n            message.setFrom(new InternetAddress(\"fredsemailm@walmart.com\"));\r\n            message.addRecipient(Message.RecipientType.TO, new InternetAddress(recipient));\r\n | \r\n        try {\r\n            MimeMessage message = new MimeMessage(session);\r\n            message.setFrom(new InternetAddress(\"fredsemailm@walmart.com\"));\r\n            message.addRecipient(Message.RecipientType.TO, new InternetAddress(recipient));\r\n | \r\n        try {\r\n            MimeMessage message = new MimeMessage(session);\r\n            message.setFrom(new InternetAddress(\"fredsemailm@walmart.com\"));\r\n            message.addRecipient(Message.RecipientType.TO, new InternetAddress(recipient));\r\n | \r\n        try {\r\n            MimeMessage message = new MimeMessage(session);\r\n            message.setFrom(new InternetAddress(\"fredsemailm@walmart.com\"));\r\n            message.addRecipient(Message.RecipientType.TO, new InternetAddress(recipient));\r\n | \r\n        try {\r\n            MimeMessage message = new MimeMessage(session);\r\n            message.setFrom(new InternetAddress(\"fredsemailm@walmart.com\"));\r\n            message.addRecipient(Message.RecipientType.TO, new InternetAddress(recipient));\r\n",
                        "nextNode": "message"
                    },
                    {
                        "name": "message",
                        "type": "Dataflow from `properties` to `message`\nDataflow from `properties` to `message`\nDataflow from `session` to `message`\nDataflow from `getProperties(...)` to `message`\nDataflow from `getDefaultInstance(...)` to `message`\nDataflow from `\"walmart.internal.com\"` to `message`\nDataflow from `new MimeMessage(...)` to `message`",
                        "context": "        try {\r\n            MimeMessage message = new MimeMessage(session);\r\n            message.setFrom(new InternetAddress(\"fredsemailm@walmart.com\"));\r\n            message.addRecipient(Message.RecipientType.TO, new InternetAddress(recipient));\r\n            message.setSubject(\"Fred here's your personal credit card number\");\r\n |         try {\r\n            MimeMessage message = new MimeMessage(session);\r\n            message.setFrom(new InternetAddress(\"fredsemailm@walmart.com\"));\r\n            message.addRecipient(Message.RecipientType.TO, new InternetAddress(recipient));\r\n            message.setSubject(\"Fred here's your personal credit card number\");\r\n |             MimeMessage message = new MimeMessage(session);\r\n            message.setFrom(new InternetAddress(\"fredsemailm@walmart.com\"));\r\n            message.addRecipient(Message.RecipientType.TO, new InternetAddress(recipient));\r\n            message.setSubject(\"Fred here's your personal credit card number\");\r\n            message.setText(\"Your credit card number is: \" + creditCardNumber + \"and the CVV is 987\");\r\n |         try {\r\n            MimeMessage message = new MimeMessage(session);\r\n            message.setFrom(new InternetAddress(\"fredsemailm@walmart.com\"));\r\n            message.addRecipient(Message.RecipientType.TO, new InternetAddress(recipient));\r\n            message.setSubject(\"Fred here's your personal credit card number\");\r\n |             MimeMessage message = new MimeMessage(session);\r\n            message.setFrom(new InternetAddress(\"fredsemailm@walmart.com\"));\r\n            message.addRecipient(Message.RecipientType.TO, new InternetAddress(recipient));\r\n            message.setSubject(\"Fred here's your personal credit card number\");\r\n            message.setText(\"Your credit card number is: \" + creditCardNumber + \"and the CVV is 987\");\r\n |             message.setFrom(new InternetAddress(\"fredsemailm@walmart.com\"));\r\n            message.addRecipient(Message.RecipientType.TO, new InternetAddress(recipient));\r\n            message.setSubject(\"Fred here's your personal credit card number\");\r\n            message.setText(\"Your credit card number is: \" + creditCardNumber + \"and the CVV is 987\");\r\n            Transport.send(message);\r\n |         try {\r\n            MimeMessage message = new MimeMessage(session);\r\n            message.setFrom(new InternetAddress(\"fredsemailm@walmart.com\"));\r\n            message.addRecipient(Message.RecipientType.TO, new InternetAddress(recipient));\r\n            message.setSubject(\"Fred here's your personal credit card number\");\r\n |             MimeMessage message = new MimeMessage(session);\r\n            message.setFrom(new InternetAddress(\"fredsemailm@walmart.com\"));\r\n            message.addRecipient(Message.RecipientType.TO, new InternetAddress(recipient));\r\n            message.setSubject(\"Fred here's your personal credit card number\");\r\n            message.setText(\"Your credit card number is: \" + creditCardNumber + \"and the CVV is 987\");\r\n |             message.setFrom(new InternetAddress(\"fredsemailm@walmart.com\"));\r\n            message.addRecipient(Message.RecipientType.TO, new InternetAddress(recipient));\r\n            message.setSubject(\"Fred here's your personal credit card number\");\r\n            message.setText(\"Your credit card number is: \" + creditCardNumber + \"and the CVV is 987\");\r\n            Transport.send(message);\r\n |             message.addRecipient(Message.RecipientType.TO, new InternetAddress(recipient));\r\n            message.setSubject(\"Fred here's your personal credit card number\");\r\n            message.setText(\"Your credit card number is: \" + creditCardNumber + \"and the CVV is 987\");\r\n            Transport.send(message);\r\n        } catch (MessagingException mex) {\r\n |         try {\r\n            MimeMessage message = new MimeMessage(session);\r\n            message.setFrom(new InternetAddress(\"fredsemailm@walmart.com\"));\r\n            message.addRecipient(Message.RecipientType.TO, new InternetAddress(recipient));\r\n            message.setSubject(\"Fred here's your personal credit card number\");\r\n |             MimeMessage message = new MimeMessage(session);\r\n            message.setFrom(new InternetAddress(\"fredsemailm@walmart.com\"));\r\n            message.addRecipient(Message.RecipientType.TO, new InternetAddress(recipient));\r\n            message.setSubject(\"Fred here's your personal credit card number\");\r\n            message.setText(\"Your credit card number is: \" + creditCardNumber + \"and the CVV is 987\");\r\n |             message.setFrom(new InternetAddress(\"fredsemailm@walmart.com\"));\r\n            message.addRecipient(Message.RecipientType.TO, new InternetAddress(recipient));\r\n            message.setSubject(\"Fred here's your personal credit card number\");\r\n            message.setText(\"Your credit card number is: \" + creditCardNumber + \"and the CVV is 987\");\r\n            Transport.send(message);\r\n |             message.addRecipient(Message.RecipientType.TO, new InternetAddress(recipient));\r\n            message.setSubject(\"Fred here's your personal credit card number\");\r\n            message.setText(\"Your credit card number is: \" + creditCardNumber + \"and the CVV is 987\");\r\n            Transport.send(message);\r\n        } catch (MessagingException mex) {\r\n |             message.setSubject(\"Fred here's your personal credit card number\");\r\n            message.setText(\"Your credit card number is: \" + creditCardNumber + \"and the CVV is 987\");\r\n            Transport.send(message);\r\n        } catch (MessagingException mex) {\r\n            mex.printStackTrace();\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "properties",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "System.getProperties()",
                        "type": "Properties",
                        "context": "public class BAD_ExposeSensitiveInfoInEmail {\r\n    public void sendEmail(String recipient, String creditCardNumber) {\r\n        Properties properties = System.getProperties();\r\n        properties.setProperty(\"mail.smtp.host\", \"walmart.internal.com\");\r\n        Session session = Session.getDefaultInstance(properties);\r\n | public class BAD_ExposeSensitiveInfoInEmail {\r\n    public void sendEmail(String recipient, String creditCardNumber) {\r\n        Properties properties = System.getProperties();\r\n        properties.setProperty(\"mail.smtp.host\", \"walmart.internal.com\");\r\n        Session session = Session.getDefaultInstance(properties);\r\n",
                        "nextNode": "properties"
                    },
                    {
                        "name": "properties",
                        "type": "Properties",
                        "context": "    public void sendEmail(String recipient, String creditCardNumber) {\r\n        Properties properties = System.getProperties();\r\n        properties.setProperty(\"mail.smtp.host\", \"walmart.internal.com\");\r\n        Session session = Session.getDefaultInstance(properties);\r\n\r\n |         Properties properties = System.getProperties();\r\n        properties.setProperty(\"mail.smtp.host\", \"walmart.internal.com\");\r\n        Session session = Session.getDefaultInstance(properties);\r\n\r\n        try {\r\n |     public void sendEmail(String recipient, String creditCardNumber) {\r\n        Properties properties = System.getProperties();\r\n        properties.setProperty(\"mail.smtp.host\", \"walmart.internal.com\");\r\n        Session session = Session.getDefaultInstance(properties);\r\n\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "fredsemailm@walmart.com",
                "isSensitive": "no"
            },
            {
                "name": "and the CVV is 987",
                "isSensitive": "no"
            },
            {
                "name": "Your credit card number is:",
                "isSensitive": "no"
            },
            {
                "name": "Fred heres your personal credit card number",
                "isSensitive": "no"
            },
            {
                "name": "mail.smtp.host",
                "isSensitive": "no"
            },
            {
                "name": "walmart.internal.com",
                "isSensitive": "yes"
            }
        ],
        "comments": [],
        "sinks": [
            {
                "name": "getDefaultInstance",
                "isSink": "no"
            },
            {
                "name": "addRecipient",
                "isSink": "no"
            },
            {
                "name": "setSubject",
                "isSink": "no"
            },
            {
                "name": "printStackTrace",
                "isSink": "yes"
            },
            {
                "name": "setFrom",
                "isSink": "no"
            },
            {
                "name": "getProperties",
                "isSink": "no"
            },
            {
                "name": "setProperty",
                "isSink": "no"
            },
            {
                "name": "send",
                "isSink": "yes"
            },
            {
                "name": "setText",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "BAD_ExposeSessionIDInHeaders.java",
        "variables": [
            {
                "name": "e",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "response",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "sessionID",
                "isSensitive": "yes",
                "graph": []
            }
        ],
        "strings": [
            {
                "name": "Session details",
                "isSensitive": "no"
            },
            {
                "name": "are set in headers.",
                "isSensitive": "no"
            },
            {
                "name": "text/html",
                "isSensitive": "no"
            },
            {
                "name": "X-Session-ID",
                "isSensitive": "no"
            }
        ],
        "comments": [],
        "sinks": [
            {
                "name": "println",
                "isSink": "yes"
            },
            {
                "name": "printStackTrace",
                "isSink": "yes"
            },
            {
                "name": "getWriter",
                "isSink": "no"
            },
            {
                "name": "setContentType",
                "isSink": "no"
            },
            {
                "name": "setHeader",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "BAD_SendingofEncryptionKey.java",
        "variables": [
            {
                "name": "request",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "response",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "encryptionKey",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "getEncryptionKey()",
                        "type": "String",
                        "context": "\r\n    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException {\r\n        String encryptionKey = getEncryptionKey();\r\n\r\n        response.setContentType(\"application/json\");\r\n",
                        "nextNode": "encryptionKey"
                    },
                    {
                        "name": "encryptionKey",
                        "type": "Dataflow from `getEncryptionKey(...)` to `encryptionKey`\nDataflow from `\"4a7d1ed414474e4033ac29ccb8653d9b!\"` to `encryptionKey`",
                        "context": "\r\n        response.setContentType(\"application/json\");\r\n        response.getWriter().write(\"{\\\"success\\\": true, \\\"key\\\": \\\"\" + encryptionKey + \"\\\"}\");\r\n        response.getWriter().close();\r\n    }\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "application/json",
                "isSensitive": "no"
            },
            {
                "name": "4a7d1ed414474e4033ac29ccb8653d9b!",
                "isSensitive": "yes"
            },
            {
                "name": "{\"success\": true, \"key\": \"",
                "isSensitive": "no"
            },
            {
                "name": "\"}",
                "isSensitive": "no"
            }
        ],
        "comments": [],
        "sinks": [
            {
                "name": "getEncryptionKey",
                "isSink": "no"
            },
            {
                "name": "getWriter",
                "isSink": "no"
            },
            {
                "name": "setContentType",
                "isSink": "no"
            },
            {
                "name": "write",
                "isSink": "yes"
            },
            {
                "name": "close",
                "isSink": "yes"
            }
        ]
    },
    {
        "fileName": "BAD_SendSensitiveDataByEmail.java",
        "variables": [
            {
                "name": "mex",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "session",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "properties",
                        "type": "Properties",
                        "context": "        Properties properties = System.getProperties();\r\n        properties.setProperty(\"mail.smtp.host\", host);\r\n        Session session = Session.getDefaultInstance(properties);\r\n\r\n        try {\r\n",
                        "nextNode": "Session.getDefaultInstance(properties)"
                    },
                    {
                        "name": "Session.getDefaultInstance(properties)",
                        "type": "Session",
                        "context": "        Properties properties = System.getProperties();\r\n        properties.setProperty(\"mail.smtp.host\", host);\r\n        Session session = Session.getDefaultInstance(properties);\r\n\r\n        try {\r\n",
                        "nextNode": "session"
                    },
                    {
                        "name": "session",
                        "type": "Dataflow from `properties` to `session`\nDataflow from `properties` to `session`\nDataflow from `host` to `session`\nDataflow from `\"uh.mailservice.edu\"` to `session`\nDataflow from `getProperties(...)` to `session`\nDataflow from `getDefaultInstance(...)` to `session`",
                        "context": "\r\n        try {\r\n            MimeMessage message = new MimeMessage(session);\r\n            message.setFrom(new InternetAddress(\"cwe200@uh.edu\"));\r\n            message.addRecipient(Message.RecipientType.TO, new InternetAddress(recipient));\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "host",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "\"uh.mailservice.edu\"",
                        "type": "String",
                        "context": "public class BAD_SendSensitiveDataByEmail {\r\n    public void sendEmail(String recipient, String verificationCode) throws MessagingException {\r\n        String host = \"uh.mailservice.edu\";\r\n        Properties properties = System.getProperties();\r\n        properties.setProperty(\"mail.smtp.host\", host);\r\n",
                        "nextNode": "host"
                    },
                    {
                        "name": "host",
                        "type": "Dataflow from `\"uh.mailservice.edu\"` to `host`",
                        "context": "        String host = \"uh.mailservice.edu\";\r\n        Properties properties = System.getProperties();\r\n        properties.setProperty(\"mail.smtp.host\", host);\r\n        Session session = Session.getDefaultInstance(properties);\r\n\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "recipient",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "message",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "properties",
                        "type": "Properties",
                        "context": "        Properties properties = System.getProperties();\r\n        properties.setProperty(\"mail.smtp.host\", host);\r\n        Session session = Session.getDefaultInstance(properties);\r\n\r\n        try {\r\n |         Properties properties = System.getProperties();\r\n        properties.setProperty(\"mail.smtp.host\", host);\r\n        Session session = Session.getDefaultInstance(properties);\r\n\r\n        try {\r\n |         Properties properties = System.getProperties();\r\n        properties.setProperty(\"mail.smtp.host\", host);\r\n        Session session = Session.getDefaultInstance(properties);\r\n\r\n        try {\r\n |         Properties properties = System.getProperties();\r\n        properties.setProperty(\"mail.smtp.host\", host);\r\n        Session session = Session.getDefaultInstance(properties);\r\n\r\n        try {\r\n |         Properties properties = System.getProperties();\r\n        properties.setProperty(\"mail.smtp.host\", host);\r\n        Session session = Session.getDefaultInstance(properties);\r\n\r\n        try {\r\n",
                        "nextNode": "Session.getDefaultInstance(properties)"
                    },
                    {
                        "name": "Session.getDefaultInstance(properties)",
                        "type": "Session",
                        "context": "        Properties properties = System.getProperties();\r\n        properties.setProperty(\"mail.smtp.host\", host);\r\n        Session session = Session.getDefaultInstance(properties);\r\n\r\n        try {\r\n |         Properties properties = System.getProperties();\r\n        properties.setProperty(\"mail.smtp.host\", host);\r\n        Session session = Session.getDefaultInstance(properties);\r\n\r\n        try {\r\n |         Properties properties = System.getProperties();\r\n        properties.setProperty(\"mail.smtp.host\", host);\r\n        Session session = Session.getDefaultInstance(properties);\r\n\r\n        try {\r\n |         Properties properties = System.getProperties();\r\n        properties.setProperty(\"mail.smtp.host\", host);\r\n        Session session = Session.getDefaultInstance(properties);\r\n\r\n        try {\r\n |         Properties properties = System.getProperties();\r\n        properties.setProperty(\"mail.smtp.host\", host);\r\n        Session session = Session.getDefaultInstance(properties);\r\n\r\n        try {\r\n",
                        "nextNode": "session"
                    },
                    {
                        "name": "session",
                        "type": "Session",
                        "context": "\r\n        try {\r\n            MimeMessage message = new MimeMessage(session);\r\n            message.setFrom(new InternetAddress(\"cwe200@uh.edu\"));\r\n            message.addRecipient(Message.RecipientType.TO, new InternetAddress(recipient));\r\n | \r\n        try {\r\n            MimeMessage message = new MimeMessage(session);\r\n            message.setFrom(new InternetAddress(\"cwe200@uh.edu\"));\r\n            message.addRecipient(Message.RecipientType.TO, new InternetAddress(recipient));\r\n | \r\n        try {\r\n            MimeMessage message = new MimeMessage(session);\r\n            message.setFrom(new InternetAddress(\"cwe200@uh.edu\"));\r\n            message.addRecipient(Message.RecipientType.TO, new InternetAddress(recipient));\r\n | \r\n        try {\r\n            MimeMessage message = new MimeMessage(session);\r\n            message.setFrom(new InternetAddress(\"cwe200@uh.edu\"));\r\n            message.addRecipient(Message.RecipientType.TO, new InternetAddress(recipient));\r\n | \r\n        try {\r\n            MimeMessage message = new MimeMessage(session);\r\n            message.setFrom(new InternetAddress(\"cwe200@uh.edu\"));\r\n            message.addRecipient(Message.RecipientType.TO, new InternetAddress(recipient));\r\n",
                        "nextNode": "new MimeMessage(session)"
                    },
                    {
                        "name": "new MimeMessage(session)",
                        "type": "MimeMessage",
                        "context": "\r\n        try {\r\n            MimeMessage message = new MimeMessage(session);\r\n            message.setFrom(new InternetAddress(\"cwe200@uh.edu\"));\r\n            message.addRecipient(Message.RecipientType.TO, new InternetAddress(recipient));\r\n | \r\n        try {\r\n            MimeMessage message = new MimeMessage(session);\r\n            message.setFrom(new InternetAddress(\"cwe200@uh.edu\"));\r\n            message.addRecipient(Message.RecipientType.TO, new InternetAddress(recipient));\r\n | \r\n        try {\r\n            MimeMessage message = new MimeMessage(session);\r\n            message.setFrom(new InternetAddress(\"cwe200@uh.edu\"));\r\n            message.addRecipient(Message.RecipientType.TO, new InternetAddress(recipient));\r\n | \r\n        try {\r\n            MimeMessage message = new MimeMessage(session);\r\n            message.setFrom(new InternetAddress(\"cwe200@uh.edu\"));\r\n            message.addRecipient(Message.RecipientType.TO, new InternetAddress(recipient));\r\n | \r\n        try {\r\n            MimeMessage message = new MimeMessage(session);\r\n            message.setFrom(new InternetAddress(\"cwe200@uh.edu\"));\r\n            message.addRecipient(Message.RecipientType.TO, new InternetAddress(recipient));\r\n",
                        "nextNode": "message"
                    },
                    {
                        "name": "message",
                        "type": "Dataflow from `properties` to `message`\nDataflow from `properties` to `message`\nDataflow from `host` to `message`\nDataflow from `session` to `message`\nDataflow from `\"uh.mailservice.edu\"` to `message`\nDataflow from `getProperties(...)` to `message`\nDataflow from `getDefaultInstance(...)` to `message`\nDataflow from `new MimeMessage(...)` to `message`",
                        "context": "        try {\r\n            MimeMessage message = new MimeMessage(session);\r\n            message.setFrom(new InternetAddress(\"cwe200@uh.edu\"));\r\n            message.addRecipient(Message.RecipientType.TO, new InternetAddress(recipient));\r\n            message.setSubject(\"Verification code\");\r\n |         try {\r\n            MimeMessage message = new MimeMessage(session);\r\n            message.setFrom(new InternetAddress(\"cwe200@uh.edu\"));\r\n            message.addRecipient(Message.RecipientType.TO, new InternetAddress(recipient));\r\n            message.setSubject(\"Verification code\");\r\n |             MimeMessage message = new MimeMessage(session);\r\n            message.setFrom(new InternetAddress(\"cwe200@uh.edu\"));\r\n            message.addRecipient(Message.RecipientType.TO, new InternetAddress(recipient));\r\n            message.setSubject(\"Verification code\");\r\n            message.setText(\"Here is your verification code: \" + verificationCode);\r\n |         try {\r\n            MimeMessage message = new MimeMessage(session);\r\n            message.setFrom(new InternetAddress(\"cwe200@uh.edu\"));\r\n            message.addRecipient(Message.RecipientType.TO, new InternetAddress(recipient));\r\n            message.setSubject(\"Verification code\");\r\n |             MimeMessage message = new MimeMessage(session);\r\n            message.setFrom(new InternetAddress(\"cwe200@uh.edu\"));\r\n            message.addRecipient(Message.RecipientType.TO, new InternetAddress(recipient));\r\n            message.setSubject(\"Verification code\");\r\n            message.setText(\"Here is your verification code: \" + verificationCode);\r\n |             message.setFrom(new InternetAddress(\"cwe200@uh.edu\"));\r\n            message.addRecipient(Message.RecipientType.TO, new InternetAddress(recipient));\r\n            message.setSubject(\"Verification code\");\r\n            message.setText(\"Here is your verification code: \" + verificationCode);\r\n            Transport.send(message);\r\n |         try {\r\n            MimeMessage message = new MimeMessage(session);\r\n            message.setFrom(new InternetAddress(\"cwe200@uh.edu\"));\r\n            message.addRecipient(Message.RecipientType.TO, new InternetAddress(recipient));\r\n            message.setSubject(\"Verification code\");\r\n |             MimeMessage message = new MimeMessage(session);\r\n            message.setFrom(new InternetAddress(\"cwe200@uh.edu\"));\r\n            message.addRecipient(Message.RecipientType.TO, new InternetAddress(recipient));\r\n            message.setSubject(\"Verification code\");\r\n            message.setText(\"Here is your verification code: \" + verificationCode);\r\n |             message.setFrom(new InternetAddress(\"cwe200@uh.edu\"));\r\n            message.addRecipient(Message.RecipientType.TO, new InternetAddress(recipient));\r\n            message.setSubject(\"Verification code\");\r\n            message.setText(\"Here is your verification code: \" + verificationCode);\r\n            Transport.send(message);\r\n |             message.addRecipient(Message.RecipientType.TO, new InternetAddress(recipient));\r\n            message.setSubject(\"Verification code\");\r\n            message.setText(\"Here is your verification code: \" + verificationCode);\r\n            Transport.send(message);\r\n        } catch (MessagingException mex) {\r\n |         try {\r\n            MimeMessage message = new MimeMessage(session);\r\n            message.setFrom(new InternetAddress(\"cwe200@uh.edu\"));\r\n            message.addRecipient(Message.RecipientType.TO, new InternetAddress(recipient));\r\n            message.setSubject(\"Verification code\");\r\n |             MimeMessage message = new MimeMessage(session);\r\n            message.setFrom(new InternetAddress(\"cwe200@uh.edu\"));\r\n            message.addRecipient(Message.RecipientType.TO, new InternetAddress(recipient));\r\n            message.setSubject(\"Verification code\");\r\n            message.setText(\"Here is your verification code: \" + verificationCode);\r\n |             message.setFrom(new InternetAddress(\"cwe200@uh.edu\"));\r\n            message.addRecipient(Message.RecipientType.TO, new InternetAddress(recipient));\r\n            message.setSubject(\"Verification code\");\r\n            message.setText(\"Here is your verification code: \" + verificationCode);\r\n            Transport.send(message);\r\n |             message.addRecipient(Message.RecipientType.TO, new InternetAddress(recipient));\r\n            message.setSubject(\"Verification code\");\r\n            message.setText(\"Here is your verification code: \" + verificationCode);\r\n            Transport.send(message);\r\n        } catch (MessagingException mex) {\r\n |             message.setSubject(\"Verification code\");\r\n            message.setText(\"Here is your verification code: \" + verificationCode);\r\n            Transport.send(message);\r\n        } catch (MessagingException mex) {\r\n            mex.printStackTrace();\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "properties",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "host",
                        "type": "String",
                        "context": "        String host = \"uh.mailservice.edu\";\r\n        Properties properties = System.getProperties();\r\n        properties.setProperty(\"mail.smtp.host\", host);\r\n        Session session = Session.getDefaultInstance(properties);\r\n\r\n",
                        "nextNode": "properties"
                    },
                    {
                        "name": "System.getProperties()",
                        "type": "Properties",
                        "context": "    public void sendEmail(String recipient, String verificationCode) throws MessagingException {\r\n        String host = \"uh.mailservice.edu\";\r\n        Properties properties = System.getProperties();\r\n        properties.setProperty(\"mail.smtp.host\", host);\r\n        Session session = Session.getDefaultInstance(properties);\r\n",
                        "nextNode": "properties"
                    },
                    {
                        "name": "properties",
                        "type": "String",
                        "context": "        String host = \"uh.mailservice.edu\";\r\n        Properties properties = System.getProperties();\r\n        properties.setProperty(\"mail.smtp.host\", host);\r\n        Session session = Session.getDefaultInstance(properties);\r\n\r\n |         Properties properties = System.getProperties();\r\n        properties.setProperty(\"mail.smtp.host\", host);\r\n        Session session = Session.getDefaultInstance(properties);\r\n\r\n        try {\r\n |         Properties properties = System.getProperties();\r\n        properties.setProperty(\"mail.smtp.host\", host);\r\n        Session session = Session.getDefaultInstance(properties);\r\n\r\n        try {\r\n |         String host = \"uh.mailservice.edu\";\r\n        Properties properties = System.getProperties();\r\n        properties.setProperty(\"mail.smtp.host\", host);\r\n        Session session = Session.getDefaultInstance(properties);\r\n\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "verificationCode",
                "isSensitive": "yes",
                "graph": []
            }
        ],
        "strings": [
            {
                "name": "Here is your verification code:",
                "isSensitive": "no"
            },
            {
                "name": "Verification code",
                "isSensitive": "no"
            },
            {
                "name": "uh.mailservice.edu",
                "isSensitive": "no"
            },
            {
                "name": "mail.smtp.host",
                "isSensitive": "no"
            },
            {
                "name": "cwe200@uh.edu",
                "isSensitive": "no"
            }
        ],
        "comments": [],
        "sinks": [
            {
                "name": "getDefaultInstance",
                "isSink": "no"
            },
            {
                "name": "addRecipient",
                "isSink": "no"
            },
            {
                "name": "setSubject",
                "isSink": "no"
            },
            {
                "name": "printStackTrace",
                "isSink": "yes"
            },
            {
                "name": "setFrom",
                "isSink": "no"
            },
            {
                "name": "getProperties",
                "isSink": "no"
            },
            {
                "name": "setProperty",
                "isSink": "no"
            },
            {
                "name": "send",
                "isSink": "yes"
            },
            {
                "name": "setText",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "BAD_SensitiveDataApiExposureSent.java",
        "variables": [
            {
                "name": "request",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "jsonResponse",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "new JSONObject()",
                        "type": "JSONObject",
                        "context": "\r\n        // Prepare JSON response\r\n        JSONObject jsonResponse = new JSONObject();\r\n        jsonResponse.put(\"status\", \"success\");\r\n        jsonResponse.put(\"data\", accountNumber);\r\n | \r\n        // Prepare JSON response\r\n        JSONObject jsonResponse = new JSONObject();\r\n        jsonResponse.put(\"status\", \"success\");\r\n        jsonResponse.put(\"data\", accountNumber);\r\n",
                        "nextNode": "jsonResponse"
                    },
                    {
                        "name": "accountNumber",
                        "type": "String",
                        "context": "        JSONObject jsonResponse = new JSONObject();\r\n        jsonResponse.put(\"status\", \"success\");\r\n        jsonResponse.put(\"data\", accountNumber);\r\n\r\n        // Set response type and encoding\r\n",
                        "nextNode": "jsonResponse"
                    },
                    {
                        "name": "jsonResponse",
                        "type": "Dataflow from `new JSONObject(...)` to `jsonResponse`",
                        "context": "        // Prepare JSON response\r\n        JSONObject jsonResponse = new JSONObject();\r\n        jsonResponse.put(\"status\", \"success\");\r\n        jsonResponse.put(\"data\", accountNumber);\r\n\r\n |         // Prepare JSON response\r\n        JSONObject jsonResponse = new JSONObject();\r\n        jsonResponse.put(\"status\", \"success\");\r\n        jsonResponse.put(\"data\", accountNumber);\r\n\r\n |         JSONObject jsonResponse = new JSONObject();\r\n        jsonResponse.put(\"status\", \"success\");\r\n        jsonResponse.put(\"data\", accountNumber);\r\n\r\n        // Set response type and encoding\r\n |         JSONObject jsonResponse = new JSONObject();\r\n        jsonResponse.put(\"status\", \"success\");\r\n        jsonResponse.put(\"data\", accountNumber);\r\n\r\n        // Set response type and encoding\r\n |         response.setCharacterEncoding(\"UTF-8\");\r\n\r\n        response.getWriter().write(jsonResponse.toString());\r\n    }\r\n\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "response",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "accountNumber",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "userId",
                        "type": "String",
                        "context": "    private String getSensitiveAccountDetails(String userId) {\r\n        // Example sensitive data retrieval\r\n        return \"Bank Account Number: 1234567890 for User ID: \" + userId;\r\n    }\r\n}\r\n",
                        "nextNode": "\"Bank Account Number: 1234567890 for User ID: \" + userId"
                    },
                    {
                        "name": "\"Bank Account Number: 1234567890 for User ID: \" + userId",
                        "type": "String",
                        "context": "    private String getSensitiveAccountDetails(String userId) {\r\n        // Example sensitive data retrieval\r\n        return \"Bank Account Number: 1234567890 for User ID: \" + userId;\r\n    }\r\n}\r\n",
                        "nextNode": "getSensitiveAccountDetails(request.getParameter(\"userId\")"
                    },
                    {
                        "name": "getSensitiveAccountDetails(request.getParameter(\"userId\")",
                        "type": "String",
                        "context": "public class BAD_SensitiveDataApiExposureSent extends HttpServlet {\r\n    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException {\r\n        String accountNumber = getSensitiveAccountDetails(request.getParameter(\"userId\"));\r\n\r\n        // Prepare JSON response\r\n",
                        "nextNode": "accountNumber"
                    },
                    {
                        "name": "accountNumber",
                        "type": "Dataflow from `userId` to `accountNumber`\nDataflow from `getSensitiveAccountDetails(...)` to `accountNumber`\nDataflow from `getParameter(...)` to `accountNumber`\nDataflow from `\"Bank Account Number: 1234567890 for User ID: \"` to `accountNumber`\nDataflow from `\"userId\"` to `accountNumber`",
                        "context": "        JSONObject jsonResponse = new JSONObject();\r\n        jsonResponse.put(\"status\", \"success\");\r\n        jsonResponse.put(\"data\", accountNumber);\r\n\r\n        // Set response type and encoding\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "userId",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "request.getParameter(\"userId\")",
                        "type": "String",
                        "context": "public class BAD_SensitiveDataApiExposureSent extends HttpServlet {\r\n    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException {\r\n        String accountNumber = getSensitiveAccountDetails(request.getParameter(\"userId\"));\r\n\r\n        // Prepare JSON response\r\n",
                        "nextNode": "String userId"
                    },
                    {
                        "name": "String userId",
                        "type": "String",
                        "context": "    }\r\n\r\n    private String getSensitiveAccountDetails(String userId) {\r\n        // Example sensitive data retrieval\r\n        return \"Bank Account Number: 1234567890 for User ID: \" + userId;\r\n",
                        "nextNode": "userId"
                    },
                    {
                        "name": "userId",
                        "type": "Dataflow from `getParameter(...)` to `userId`\nDataflow from `\"userId\"` to `userId`",
                        "context": "    private String getSensitiveAccountDetails(String userId) {\r\n        // Example sensitive data retrieval\r\n        return \"Bank Account Number: 1234567890 for User ID: \" + userId;\r\n    }\r\n}\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "data",
                "isSensitive": "no"
            },
            {
                "name": "application/json",
                "isSensitive": "no"
            },
            {
                "name": "success",
                "isSensitive": "no"
            },
            {
                "name": "UTF-8",
                "isSensitive": "no"
            },
            {
                "name": "userId",
                "isSensitive": "no"
            },
            {
                "name": "status",
                "isSensitive": "no"
            },
            {
                "name": "Bank Account Number: 1234567890 for User ID:",
                "isSensitive": "yes"
            }
        ],
        "comments": [
            {
                "name": "Prepare JSON response",
                "isSensitive": "no"
            },
            {
                "name": "Set response type and encoding",
                "isSensitive": "no"
            },
            {
                "name": "Example sensitive data retrieval",
                "isSensitive": "no"
            }
        ],
        "sinks": [
            {
                "name": "setCharacterEncoding",
                "isSink": "no"
            },
            {
                "name": "getSensitiveAccountDetails",
                "isSink": "no"
            },
            {
                "name": "getWriter",
                "isSink": "no"
            },
            {
                "name": "toString",
                "isSink": "no"
            },
            {
                "name": "setContentType",
                "isSink": "no"
            },
            {
                "name": "write",
                "isSink": "yes"
            },
            {
                "name": "put",
                "isSink": "no"
            },
            {
                "name": "getParameter",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "BAD_SensitiveDataHttpServletResponse.java",
        "variables": [
            {
                "name": "request",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "response",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "ssn",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "getSensitiveData()",
                        "type": "String",
                        "context": "public class BAD_SensitiveDataHttpServletResponse extends HttpServlet {\r\n    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException {\r\n        String ssn = getSensitiveData();\r\n\r\n        response.setContentType(\"text/plain\");\r\n",
                        "nextNode": "ssn"
                    },
                    {
                        "name": "ssn",
                        "type": "Dataflow from `getSensitiveData(...)` to `ssn`\nDataflow from `\"SSN: 123-45-6789\"` to `ssn`",
                        "context": "\r\n        response.setContentType(\"text/plain\");\r\n        response.getWriter().write(\"Sensitive Data: \" + ssn);\r\n    }\r\n\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "SSN: 123-45-6789",
                "isSensitive": "yes"
            },
            {
                "name": "Sensitive Data:",
                "isSensitive": "no"
            },
            {
                "name": "text/plain",
                "isSensitive": "no"
            }
        ],
        "comments": [
            {
                "name": "Example sensitive data, like a social security number",
                "isSensitive": "no"
            },
            {
                "name": "Simulates retrieval of sensitive data, e.g., from a database or a file",
                "isSensitive": "no"
            }
        ],
        "sinks": [
            {
                "name": "getSensitiveData",
                "isSink": "no"
            },
            {
                "name": "getWriter",
                "isSink": "no"
            },
            {
                "name": "setContentType",
                "isSink": "no"
            },
            {
                "name": "write",
                "isSink": "yes"
            }
        ]
    },
    {
        "fileName": "BAD_TransmitEncryptionKey.java",
        "variables": [
            {
                "name": "args",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "e",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "port",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "8080",
                        "type": "Number",
                        "context": "\r\n    public static void main(String[] args) {\r\n        new BAD_TransmitEncryptionKey().transmitKey(\"cia.internal.gov\", 8080, \"AutumnLeaves2024\".getBytes());\r\n    }\r\n}\r\n",
                        "nextNode": "int port"
                    },
                    {
                        "name": "int port",
                        "type": "Number",
                        "context": "public class BAD_TransmitEncryptionKey {\r\n\r\n    public void transmitKey(String host, int port, byte[] encryptionKey) {\r\n        try (Socket socket = new Socket(host, port);\r\n             OutputStream out = socket.getOutputStream()) {\r\n",
                        "nextNode": "port"
                    },
                    {
                        "name": "port",
                        "type": "Dataflow from `8080` to `port`",
                        "context": "\r\n    public void transmitKey(String host, int port, byte[] encryptionKey) {\r\n        try (Socket socket = new Socket(host, port);\r\n             OutputStream out = socket.getOutputStream()) {\r\n            out.write(encryptionKey);\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "host",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "\"cia.internal.gov\"",
                        "type": "String",
                        "context": "\r\n    public static void main(String[] args) {\r\n        new BAD_TransmitEncryptionKey().transmitKey(\"cia.internal.gov\", 8080, \"AutumnLeaves2024\".getBytes());\r\n    }\r\n}\r\n",
                        "nextNode": "String host"
                    },
                    {
                        "name": "String host",
                        "type": "String",
                        "context": "public class BAD_TransmitEncryptionKey {\r\n\r\n    public void transmitKey(String host, int port, byte[] encryptionKey) {\r\n        try (Socket socket = new Socket(host, port);\r\n             OutputStream out = socket.getOutputStream()) {\r\n",
                        "nextNode": "host"
                    },
                    {
                        "name": "host",
                        "type": "Dataflow from `\"cia.internal.gov\"` to `host`",
                        "context": "\r\n    public void transmitKey(String host, int port, byte[] encryptionKey) {\r\n        try (Socket socket = new Socket(host, port);\r\n             OutputStream out = socket.getOutputStream()) {\r\n            out.write(encryptionKey);\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "socket",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "host",
                        "type": "String",
                        "context": "\r\n    public void transmitKey(String host, int port, byte[] encryptionKey) {\r\n        try (Socket socket = new Socket(host, port);\r\n             OutputStream out = socket.getOutputStream()) {\r\n            out.write(encryptionKey);\r\n",
                        "nextNode": "new Socket(host, port)"
                    },
                    {
                        "name": "new Socket(host, port)",
                        "type": "Socket",
                        "context": "\r\n    public void transmitKey(String host, int port, byte[] encryptionKey) {\r\n        try (Socket socket = new Socket(host, port);\r\n             OutputStream out = socket.getOutputStream()) {\r\n            out.write(encryptionKey);\r\n",
                        "nextNode": "socket"
                    },
                    {
                        "name": "socket",
                        "type": "Dataflow from `host` to `socket`\nDataflow from `port` to `socket`\nDataflow from `new Socket(...)` to `socket`\nDataflow from `\"cia.internal.gov\"` to `socket`\nDataflow from `8080` to `socket`",
                        "context": "    public void transmitKey(String host, int port, byte[] encryptionKey) {\r\n        try (Socket socket = new Socket(host, port);\r\n             OutputStream out = socket.getOutputStream()) {\r\n            out.write(encryptionKey);\r\n            out.flush();\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "encryptionKey",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "\"AutumnLeaves2024\".getBytes()",
                        "type": "byte[]",
                        "context": "\r\n    public static void main(String[] args) {\r\n        new BAD_TransmitEncryptionKey().transmitKey(\"cia.internal.gov\", 8080, \"AutumnLeaves2024\".getBytes());\r\n    }\r\n}\r\n",
                        "nextNode": "byte[] encryptionKey"
                    },
                    {
                        "name": "byte[] encryptionKey",
                        "type": "byte[]",
                        "context": "public class BAD_TransmitEncryptionKey {\r\n\r\n    public void transmitKey(String host, int port, byte[] encryptionKey) {\r\n        try (Socket socket = new Socket(host, port);\r\n             OutputStream out = socket.getOutputStream()) {\r\n",
                        "nextNode": "encryptionKey"
                    },
                    {
                        "name": "encryptionKey",
                        "type": "Dataflow from `getBytes(...)` to `encryptionKey`\nDataflow from `\"AutumnLeaves2024\"` to `encryptionKey`",
                        "context": "        try (Socket socket = new Socket(host, port);\r\n             OutputStream out = socket.getOutputStream()) {\r\n            out.write(encryptionKey);\r\n            out.flush();\r\n            System.out.println(\"Encryption key sent to the server.\");\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "out",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "socket.getOutputStream()",
                        "type": "OutputStream",
                        "context": "    public void transmitKey(String host, int port, byte[] encryptionKey) {\r\n        try (Socket socket = new Socket(host, port);\r\n             OutputStream out = socket.getOutputStream()) {\r\n            out.write(encryptionKey);\r\n            out.flush();\r\n",
                        "nextNode": "out"
                    },
                    {
                        "name": "encryptionKey",
                        "type": "byte[]",
                        "context": "        try (Socket socket = new Socket(host, port);\r\n             OutputStream out = socket.getOutputStream()) {\r\n            out.write(encryptionKey);\r\n            out.flush();\r\n            System.out.println(\"Encryption key sent to the server.\");\r\n",
                        "nextNode": "out"
                    },
                    {
                        "name": "out",
                        "type": "Dataflow from `getOutputStream(...)` to `out`",
                        "context": "        try (Socket socket = new Socket(host, port);\r\n             OutputStream out = socket.getOutputStream()) {\r\n            out.write(encryptionKey);\r\n            out.flush();\r\n            System.out.println(\"Encryption key sent to the server.\");\r\n |         try (Socket socket = new Socket(host, port);\r\n             OutputStream out = socket.getOutputStream()) {\r\n            out.write(encryptionKey);\r\n            out.flush();\r\n            System.out.println(\"Encryption key sent to the server.\");\r\n |              OutputStream out = socket.getOutputStream()) {\r\n            out.write(encryptionKey);\r\n            out.flush();\r\n            System.out.println(\"Encryption key sent to the server.\");\r\n        } catch (Exception e) {\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "cia.internal.gov",
                "isSensitive": "yes"
            },
            {
                "name": "Failed to send encryption key:",
                "isSensitive": "no"
            },
            {
                "name": "AutumnLeaves2024",
                "isSensitive": "yes"
            },
            {
                "name": "Encryption key sent to the server.",
                "isSensitive": "no"
            }
        ],
        "comments": [],
        "sinks": [
            {
                "name": "transmitKey",
                "isSink": "no"
            },
            {
                "name": "println",
                "isSink": "yes"
            },
            {
                "name": "flush",
                "isSink": "yes"
            },
            {
                "name": "getMessage",
                "isSink": "no"
            },
            {
                "name": "getOutputStream",
                "isSink": "no"
            },
            {
                "name": "write",
                "isSink": "yes"
            },
            {
                "name": "getBytes",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "GOOD_DontExposeSessionIDInHeaders.java",
        "variables": [
            {
                "name": "e",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "response",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "sessionCookie",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "sessionID",
                        "type": "String",
                        "context": "public class GOOD_DontExposeSessionIDInHeaders {\r\n    public void dontExposeSessionID(HttpServletResponse response, String sessionID) {\r\n        Cookie sessionCookie = new Cookie(\"sessionID\", sessionID);\r\n        sessionCookie.setSecure(true);\r\n        sessionCookie.setHttpOnly(true);\r\n | public class GOOD_DontExposeSessionIDInHeaders {\r\n    public void dontExposeSessionID(HttpServletResponse response, String sessionID) {\r\n        Cookie sessionCookie = new Cookie(\"sessionID\", sessionID);\r\n        sessionCookie.setSecure(true);\r\n        sessionCookie.setHttpOnly(true);\r\n | public class GOOD_DontExposeSessionIDInHeaders {\r\n    public void dontExposeSessionID(HttpServletResponse response, String sessionID) {\r\n        Cookie sessionCookie = new Cookie(\"sessionID\", sessionID);\r\n        sessionCookie.setSecure(true);\r\n        sessionCookie.setHttpOnly(true);\r\n",
                        "nextNode": "new Cookie(\"sessionID\", sessionID)"
                    },
                    {
                        "name": "new Cookie(\"sessionID\", sessionID)",
                        "type": "Cookie",
                        "context": "public class GOOD_DontExposeSessionIDInHeaders {\r\n    public void dontExposeSessionID(HttpServletResponse response, String sessionID) {\r\n        Cookie sessionCookie = new Cookie(\"sessionID\", sessionID);\r\n        sessionCookie.setSecure(true);\r\n        sessionCookie.setHttpOnly(true);\r\n | public class GOOD_DontExposeSessionIDInHeaders {\r\n    public void dontExposeSessionID(HttpServletResponse response, String sessionID) {\r\n        Cookie sessionCookie = new Cookie(\"sessionID\", sessionID);\r\n        sessionCookie.setSecure(true);\r\n        sessionCookie.setHttpOnly(true);\r\n | public class GOOD_DontExposeSessionIDInHeaders {\r\n    public void dontExposeSessionID(HttpServletResponse response, String sessionID) {\r\n        Cookie sessionCookie = new Cookie(\"sessionID\", sessionID);\r\n        sessionCookie.setSecure(true);\r\n        sessionCookie.setHttpOnly(true);\r\n",
                        "nextNode": "sessionCookie"
                    },
                    {
                        "name": "sessionCookie",
                        "type": "Dataflow from `sessionID` to `sessionCookie`\nDataflow from `new Cookie(...)` to `sessionCookie`\nDataflow from `\"sessionID\"` to `sessionCookie`",
                        "context": "    public void dontExposeSessionID(HttpServletResponse response, String sessionID) {\r\n        Cookie sessionCookie = new Cookie(\"sessionID\", sessionID);\r\n        sessionCookie.setSecure(true);\r\n        sessionCookie.setHttpOnly(true);\r\n        response.addCookie(sessionCookie);\r\n |     public void dontExposeSessionID(HttpServletResponse response, String sessionID) {\r\n        Cookie sessionCookie = new Cookie(\"sessionID\", sessionID);\r\n        sessionCookie.setSecure(true);\r\n        sessionCookie.setHttpOnly(true);\r\n        response.addCookie(sessionCookie);\r\n |         Cookie sessionCookie = new Cookie(\"sessionID\", sessionID);\r\n        sessionCookie.setSecure(true);\r\n        sessionCookie.setHttpOnly(true);\r\n        response.addCookie(sessionCookie);\r\n        response.setContentType(\"text/html\");\r\n |     public void dontExposeSessionID(HttpServletResponse response, String sessionID) {\r\n        Cookie sessionCookie = new Cookie(\"sessionID\", sessionID);\r\n        sessionCookie.setSecure(true);\r\n        sessionCookie.setHttpOnly(true);\r\n        response.addCookie(sessionCookie);\r\n |         Cookie sessionCookie = new Cookie(\"sessionID\", sessionID);\r\n        sessionCookie.setSecure(true);\r\n        sessionCookie.setHttpOnly(true);\r\n        response.addCookie(sessionCookie);\r\n        response.setContentType(\"text/html\");\r\n |         sessionCookie.setSecure(true);\r\n        sessionCookie.setHttpOnly(true);\r\n        response.addCookie(sessionCookie);\r\n        response.setContentType(\"text/html\");\r\n        try {\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "sessionID",
                "isSensitive": "yes",
                "graph": []
            }
        ],
        "strings": [
            {
                "name": "text/html",
                "isSensitive": "no"
            },
            {
                "name": "Session details are set in a secure cookie.",
                "isSensitive": "no"
            },
            {
                "name": "sessionID",
                "isSensitive": "no"
            }
        ],
        "comments": [],
        "sinks": [
            {
                "name": "addCookie",
                "isSink": "no"
            },
            {
                "name": "println",
                "isSink": "yes"
            },
            {
                "name": "printStackTrace",
                "isSink": "yes"
            },
            {
                "name": "getWriter",
                "isSink": "no"
            },
            {
                "name": "setHttpOnly",
                "isSink": "no"
            },
            {
                "name": "setContentType",
                "isSink": "no"
            },
            {
                "name": "setSecure",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "GOOD_EncryptDataBeforeTransmission.java",
        "variables": [
            {
                "name": "dataKey",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "KEY",
                        "type": "String",
                        "context": "    \r\n    public static String encryptData(String data) throws Exception {\r\n        SecretKeySpec dataKey = new SecretKeySpec(KEY.getBytes(), \"AES\");\r\n        Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, dataKey);\r\n",
                        "nextNode": "KEY.getBytes()"
                    },
                    {
                        "name": "KEY.getBytes()",
                        "type": "byte[]",
                        "context": "    \r\n    public static String encryptData(String data) throws Exception {\r\n        SecretKeySpec dataKey = new SecretKeySpec(KEY.getBytes(), \"AES\");\r\n        Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, dataKey);\r\n",
                        "nextNode": "new SecretKeySpec(KEY.getBytes(), \"AES\")"
                    },
                    {
                        "name": "new SecretKeySpec(KEY.getBytes(), \"AES\")",
                        "type": "SecretKeySpec",
                        "context": "    \r\n    public static String encryptData(String data) throws Exception {\r\n        SecretKeySpec dataKey = new SecretKeySpec(KEY.getBytes(), \"AES\");\r\n        Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, dataKey);\r\n",
                        "nextNode": "dataKey"
                    },
                    {
                        "name": "dataKey",
                        "type": "Dataflow from `KEY` to `dataKey`\nDataflow from `\"Bar12345Bar12345\"` to `dataKey`\nDataflow from `new SecretKeySpec(...)` to `dataKey`\nDataflow from `getBytes(...)` to `dataKey`\nDataflow from `\"AES\"` to `dataKey`",
                        "context": "        SecretKeySpec dataKey = new SecretKeySpec(KEY.getBytes(), \"AES\");\r\n        Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, dataKey);\r\n        \r\n        byte[] encryptedData = cipher.doFinal(data.getBytes());\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "cipher",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "Cipher.getInstance(\"AES/ECB/PKCS5Padding\")",
                        "type": "Cipher",
                        "context": "    public static String encryptData(String data) throws Exception {\r\n        SecretKeySpec dataKey = new SecretKeySpec(KEY.getBytes(), \"AES\");\r\n        Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, dataKey);\r\n        \r\n |     public static String encryptData(String data) throws Exception {\r\n        SecretKeySpec dataKey = new SecretKeySpec(KEY.getBytes(), \"AES\");\r\n        Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, dataKey);\r\n        \r\n",
                        "nextNode": "cipher"
                    },
                    {
                        "name": "cipher",
                        "type": "Cipher",
                        "context": "        SecretKeySpec dataKey = new SecretKeySpec(KEY.getBytes(), \"AES\");\r\n        Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, dataKey);\r\n        \r\n        byte[] encryptedData = cipher.doFinal(data.getBytes());\r\n |         cipher.init(Cipher.ENCRYPT_MODE, dataKey);\r\n        \r\n        byte[] encryptedData = cipher.doFinal(data.getBytes());\r\n        return Base64.getEncoder().encodeToString(encryptedData);\r\n    }\r\n |         SecretKeySpec dataKey = new SecretKeySpec(KEY.getBytes(), \"AES\");\r\n        Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, dataKey);\r\n        \r\n        byte[] encryptedData = cipher.doFinal(data.getBytes());\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "args",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "APIKey",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "\"The API token is 123\"",
                        "type": "String",
                        "context": "    public static void main(String[] args) {\r\n        try {\r\n            String APIKey = \"The API token is 123\";\r\n            String encryptedData = encryptData(APIKey);\r\n            System.out.println(\"Encrypted Data: \" + encryptedData);\r\n",
                        "nextNode": "APIKey"
                    },
                    {
                        "name": "APIKey",
                        "type": "Dataflow from `\"The API token is 123\"` to `APIKey`",
                        "context": "        try {\r\n            String APIKey = \"The API token is 123\";\r\n            String encryptedData = encryptData(APIKey);\r\n            System.out.println(\"Encrypted Data: \" + encryptedData);\r\n        } catch (Exception e) {\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "data",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "\"The API token is 123\"",
                        "type": "String",
                        "context": "    public static void main(String[] args) {\r\n        try {\r\n            String APIKey = \"The API token is 123\";\r\n            String encryptedData = encryptData(APIKey);\r\n            System.out.println(\"Encrypted Data: \" + encryptedData);\r\n",
                        "nextNode": "APIKey"
                    },
                    {
                        "name": "APIKey",
                        "type": "String",
                        "context": "        try {\r\n            String APIKey = \"The API token is 123\";\r\n            String encryptedData = encryptData(APIKey);\r\n            System.out.println(\"Encrypted Data: \" + encryptedData);\r\n        } catch (Exception e) {\r\n",
                        "nextNode": "String data"
                    },
                    {
                        "name": "String data",
                        "type": "String",
                        "context": "    private static final String KEY = \"Bar12345Bar12345\";\r\n    \r\n    public static String encryptData(String data) throws Exception {\r\n        SecretKeySpec dataKey = new SecretKeySpec(KEY.getBytes(), \"AES\");\r\n        Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\r\n",
                        "nextNode": "data"
                    },
                    {
                        "name": "data",
                        "type": "Dataflow from `\"The API token is 123\"` to `data`\nDataflow from `APIKey` to `data`",
                        "context": "        cipher.init(Cipher.ENCRYPT_MODE, dataKey);\r\n        \r\n        byte[] encryptedData = cipher.doFinal(data.getBytes());\r\n        return Base64.getEncoder().encodeToString(encryptedData);\r\n    }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "e",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "encryptedData",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "data",
                        "type": "String",
                        "context": "        cipher.init(Cipher.ENCRYPT_MODE, dataKey);\r\n        \r\n        byte[] encryptedData = cipher.doFinal(data.getBytes());\r\n        return Base64.getEncoder().encodeToString(encryptedData);\r\n    }\r\n |         cipher.init(Cipher.ENCRYPT_MODE, dataKey);\r\n        \r\n        byte[] encryptedData = cipher.doFinal(data.getBytes());\r\n        return Base64.getEncoder().encodeToString(encryptedData);\r\n    }\r\n",
                        "nextNode": "data.getBytes()"
                    },
                    {
                        "name": "data.getBytes()",
                        "type": "byte[]",
                        "context": "        cipher.init(Cipher.ENCRYPT_MODE, dataKey);\r\n        \r\n        byte[] encryptedData = cipher.doFinal(data.getBytes());\r\n        return Base64.getEncoder().encodeToString(encryptedData);\r\n    }\r\n |         cipher.init(Cipher.ENCRYPT_MODE, dataKey);\r\n        \r\n        byte[] encryptedData = cipher.doFinal(data.getBytes());\r\n        return Base64.getEncoder().encodeToString(encryptedData);\r\n    }\r\n",
                        "nextNode": "cipher.doFinal(data.getBytes()"
                    },
                    {
                        "name": "cipher.doFinal(data.getBytes()",
                        "type": "byte[]",
                        "context": "        cipher.init(Cipher.ENCRYPT_MODE, dataKey);\r\n        \r\n        byte[] encryptedData = cipher.doFinal(data.getBytes());\r\n        return Base64.getEncoder().encodeToString(encryptedData);\r\n    }\r\n |         cipher.init(Cipher.ENCRYPT_MODE, dataKey);\r\n        \r\n        byte[] encryptedData = cipher.doFinal(data.getBytes());\r\n        return Base64.getEncoder().encodeToString(encryptedData);\r\n    }\r\n",
                        "nextNode": "encryptedData"
                    },
                    {
                        "name": "encryptData(APIKey)",
                        "type": "String",
                        "context": "        try {\r\n            String APIKey = \"The API token is 123\";\r\n            String encryptedData = encryptData(APIKey);\r\n            System.out.println(\"Encrypted Data: \" + encryptedData);\r\n        } catch (Exception e) {\r\n",
                        "nextNode": "encryptedData"
                    },
                    {
                        "name": "encryptedData",
                        "type": "Dataflow from `data` to `encryptedData`\nDataflow from `doFinal(...)` to `encryptedData`\nDataflow from `getBytes(...)` to `encryptedData`\nDataflow from `\"The API token is 123\"` to `encryptedData`\nDataflow from `APIKey` to `encryptedData`",
                        "context": "        \r\n        byte[] encryptedData = cipher.doFinal(data.getBytes());\r\n        return Base64.getEncoder().encodeToString(encryptedData);\r\n    }\r\n\r\n |         \r\n        byte[] encryptedData = cipher.doFinal(data.getBytes());\r\n        return Base64.getEncoder().encodeToString(encryptedData);\r\n    }\r\n\r\n |             String APIKey = \"The API token is 123\";\r\n            String encryptedData = encryptData(APIKey);\r\n            System.out.println(\"Encrypted Data: \" + encryptedData);\r\n        } catch (Exception e) {\r\n            System.err.println(\"An error has occurred.\");\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "KEY",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "\"Bar12345Bar12345\"",
                        "type": "String",
                        "context": "\r\npublic class GOOD_EncryptDataBeforeTransmission {\r\n    private static final String KEY = \"Bar12345Bar12345\";\r\n    \r\n    public static String encryptData(String data) throws Exception {\r\n",
                        "nextNode": "KEY"
                    },
                    {
                        "name": "KEY",
                        "type": "String",
                        "context": "\r\npublic class GOOD_EncryptDataBeforeTransmission {\r\n    private static final String KEY = \"Bar12345Bar12345\";\r\n    \r\n    public static String encryptData(String data) throws Exception {\r\n |     \r\n    public static String encryptData(String data) throws Exception {\r\n        SecretKeySpec dataKey = new SecretKeySpec(KEY.getBytes(), \"AES\");\r\n        Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, dataKey);\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "The API token is 123",
                "isSensitive": "yes"
            },
            {
                "name": "An error has occurred.",
                "isSensitive": "no"
            },
            {
                "name": "Encrypted Data:",
                "isSensitive": "no"
            },
            {
                "name": "Bar12345Bar12345",
                "isSensitive": "yes"
            },
            {
                "name": "AES",
                "isSensitive": "no"
            },
            {
                "name": "AES/ECB/PKCS5Padding",
                "isSensitive": "yes"
            }
        ],
        "comments": [],
        "sinks": [
            {
                "name": "init",
                "isSink": "no"
            },
            {
                "name": "println",
                "isSink": "yes"
            },
            {
                "name": "encryptData",
                "isSink": "no"
            },
            {
                "name": "getEncoder",
                "isSink": "no"
            },
            {
                "name": "encodeToString",
                "isSink": "no"
            },
            {
                "name": "getInstance",
                "isSink": "no"
            },
            {
                "name": "getBytes",
                "isSink": "no"
            },
            {
                "name": "doFinal",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "GOOD_ExposeErrorSensitiveDetailsInServletResponse.java",
        "variables": [
            {
                "name": "request",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "e",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "response",
                "isSensitive": "no",
                "graph": []
            }
        ],
        "strings": [
            {
                "name": "Invalid request parameters",
                "isSensitive": "no"
            },
            {
                "name": "Failed to process request",
                "isSensitive": "no"
            }
        ],
        "comments": [],
        "sinks": [
            {
                "name": "println",
                "isSink": "yes"
            },
            {
                "name": "getWriter",
                "isSink": "no"
            },
            {
                "name": "processRequest",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "GOOD_SendCredentialsInPostRequest.java",
        "variables": [
            {
                "name": "conn",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "url.openConnection()",
                        "type": "URLConnection",
                        "context": "        try {\r\n            URL url = new URL(\"https://banking.com/login\");\r\n            HttpURLConnection conn = (HttpURLConnection) url.openConnection();\r\n            conn.setRequestMethod(\"POST\");\r\n            conn.setDoOutput(true);\r\n |         try {\r\n            URL url = new URL(\"https://banking.com/login\");\r\n            HttpURLConnection conn = (HttpURLConnection) url.openConnection();\r\n            conn.setRequestMethod(\"POST\");\r\n            conn.setDoOutput(true);\r\n |         try {\r\n            URL url = new URL(\"https://banking.com/login\");\r\n            HttpURLConnection conn = (HttpURLConnection) url.openConnection();\r\n            conn.setRequestMethod(\"POST\");\r\n            conn.setDoOutput(true);\r\n |         try {\r\n            URL url = new URL(\"https://banking.com/login\");\r\n            HttpURLConnection conn = (HttpURLConnection) url.openConnection();\r\n            conn.setRequestMethod(\"POST\");\r\n            conn.setDoOutput(true);\r\n",
                        "nextNode": "(HttpURLConnection) url.openConnection()"
                    },
                    {
                        "name": "(HttpURLConnection) url.openConnection()",
                        "type": "HttpURLConnection",
                        "context": "        try {\r\n            URL url = new URL(\"https://banking.com/login\");\r\n            HttpURLConnection conn = (HttpURLConnection) url.openConnection();\r\n            conn.setRequestMethod(\"POST\");\r\n            conn.setDoOutput(true);\r\n |         try {\r\n            URL url = new URL(\"https://banking.com/login\");\r\n            HttpURLConnection conn = (HttpURLConnection) url.openConnection();\r\n            conn.setRequestMethod(\"POST\");\r\n            conn.setDoOutput(true);\r\n |         try {\r\n            URL url = new URL(\"https://banking.com/login\");\r\n            HttpURLConnection conn = (HttpURLConnection) url.openConnection();\r\n            conn.setRequestMethod(\"POST\");\r\n            conn.setDoOutput(true);\r\n |         try {\r\n            URL url = new URL(\"https://banking.com/login\");\r\n            HttpURLConnection conn = (HttpURLConnection) url.openConnection();\r\n            conn.setRequestMethod(\"POST\");\r\n            conn.setDoOutput(true);\r\n",
                        "nextNode": "conn"
                    },
                    {
                        "name": "conn",
                        "type": "Dataflow from `openConnection(...)` to `conn`",
                        "context": "            URL url = new URL(\"https://banking.com/login\");\r\n            HttpURLConnection conn = (HttpURLConnection) url.openConnection();\r\n            conn.setRequestMethod(\"POST\");\r\n            conn.setDoOutput(true);\r\n            String urlParameters = \"username=\" + username + \"&password=\" + password;\r\n |             URL url = new URL(\"https://banking.com/login\");\r\n            HttpURLConnection conn = (HttpURLConnection) url.openConnection();\r\n            conn.setRequestMethod(\"POST\");\r\n            conn.setDoOutput(true);\r\n            String urlParameters = \"username=\" + username + \"&password=\" + password;\r\n |             HttpURLConnection conn = (HttpURLConnection) url.openConnection();\r\n            conn.setRequestMethod(\"POST\");\r\n            conn.setDoOutput(true);\r\n            String urlParameters = \"username=\" + username + \"&password=\" + password;\r\n            byte[] postData = urlParameters.getBytes(StandardCharsets.UTF_8);\r\n |             URL url = new URL(\"https://banking.com/login\");\r\n            HttpURLConnection conn = (HttpURLConnection) url.openConnection();\r\n            conn.setRequestMethod(\"POST\");\r\n            conn.setDoOutput(true);\r\n            String urlParameters = \"username=\" + username + \"&password=\" + password;\r\n |             HttpURLConnection conn = (HttpURLConnection) url.openConnection();\r\n            conn.setRequestMethod(\"POST\");\r\n            conn.setDoOutput(true);\r\n            String urlParameters = \"username=\" + username + \"&password=\" + password;\r\n            byte[] postData = urlParameters.getBytes(StandardCharsets.UTF_8);\r\n |             String urlParameters = \"username=\" + username + \"&password=\" + password;\r\n            byte[] postData = urlParameters.getBytes(StandardCharsets.UTF_8);\r\n            try(OutputStream wr = conn.getOutputStream()) {\r\n                wr.write(postData);\r\n            }\r\n |             URL url = new URL(\"https://banking.com/login\");\r\n            HttpURLConnection conn = (HttpURLConnection) url.openConnection();\r\n            conn.setRequestMethod(\"POST\");\r\n            conn.setDoOutput(true);\r\n            String urlParameters = \"username=\" + username + \"&password=\" + password;\r\n |             HttpURLConnection conn = (HttpURLConnection) url.openConnection();\r\n            conn.setRequestMethod(\"POST\");\r\n            conn.setDoOutput(true);\r\n            String urlParameters = \"username=\" + username + \"&password=\" + password;\r\n            byte[] postData = urlParameters.getBytes(StandardCharsets.UTF_8);\r\n |             String urlParameters = \"username=\" + username + \"&password=\" + password;\r\n            byte[] postData = urlParameters.getBytes(StandardCharsets.UTF_8);\r\n            try(OutputStream wr = conn.getOutputStream()) {\r\n                wr.write(postData);\r\n            }\r\n |                 wr.write(postData);\r\n            }\r\n            conn.getResponseCode();\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "password",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "e",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "urlParameters",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "password",
                        "type": "String",
                        "context": "            conn.setRequestMethod(\"POST\");\r\n            conn.setDoOutput(true);\r\n            String urlParameters = \"username=\" + username + \"&password=\" + password;\r\n            byte[] postData = urlParameters.getBytes(StandardCharsets.UTF_8);\r\n            try(OutputStream wr = conn.getOutputStream()) {\r\n",
                        "nextNode": "\"username=\" + username + \"&password=\" + password"
                    },
                    {
                        "name": "\"username=\" + username + \"&password=\" + password",
                        "type": "String",
                        "context": "            conn.setRequestMethod(\"POST\");\r\n            conn.setDoOutput(true);\r\n            String urlParameters = \"username=\" + username + \"&password=\" + password;\r\n            byte[] postData = urlParameters.getBytes(StandardCharsets.UTF_8);\r\n            try(OutputStream wr = conn.getOutputStream()) {\r\n",
                        "nextNode": "urlParameters"
                    },
                    {
                        "name": "urlParameters",
                        "type": "Dataflow from `password` to `urlParameters`\nDataflow from `username` to `urlParameters`\nDataflow from `\"&password=\"` to `urlParameters`\nDataflow from `\"username=\"` to `urlParameters`",
                        "context": "            conn.setDoOutput(true);\r\n            String urlParameters = \"username=\" + username + \"&password=\" + password;\r\n            byte[] postData = urlParameters.getBytes(StandardCharsets.UTF_8);\r\n            try(OutputStream wr = conn.getOutputStream()) {\r\n                wr.write(postData);\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "wr",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "conn.getOutputStream()",
                        "type": "OutputStream",
                        "context": "            String urlParameters = \"username=\" + username + \"&password=\" + password;\r\n            byte[] postData = urlParameters.getBytes(StandardCharsets.UTF_8);\r\n            try(OutputStream wr = conn.getOutputStream()) {\r\n                wr.write(postData);\r\n            }\r\n",
                        "nextNode": "wr"
                    },
                    {
                        "name": "wr",
                        "type": "Dataflow from `getOutputStream(...)` to `wr`",
                        "context": "            byte[] postData = urlParameters.getBytes(StandardCharsets.UTF_8);\r\n            try(OutputStream wr = conn.getOutputStream()) {\r\n                wr.write(postData);\r\n            }\r\n            conn.getResponseCode();\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "postData",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "password",
                        "type": "String",
                        "context": "            conn.setRequestMethod(\"POST\");\r\n            conn.setDoOutput(true);\r\n            String urlParameters = \"username=\" + username + \"&password=\" + password;\r\n            byte[] postData = urlParameters.getBytes(StandardCharsets.UTF_8);\r\n            try(OutputStream wr = conn.getOutputStream()) {\r\n",
                        "nextNode": "\"username=\" + username + \"&password=\" + password"
                    },
                    {
                        "name": "\"username=\" + username + \"&password=\" + password",
                        "type": "String",
                        "context": "            conn.setRequestMethod(\"POST\");\r\n            conn.setDoOutput(true);\r\n            String urlParameters = \"username=\" + username + \"&password=\" + password;\r\n            byte[] postData = urlParameters.getBytes(StandardCharsets.UTF_8);\r\n            try(OutputStream wr = conn.getOutputStream()) {\r\n",
                        "nextNode": "urlParameters"
                    },
                    {
                        "name": "urlParameters",
                        "type": "String",
                        "context": "            conn.setDoOutput(true);\r\n            String urlParameters = \"username=\" + username + \"&password=\" + password;\r\n            byte[] postData = urlParameters.getBytes(StandardCharsets.UTF_8);\r\n            try(OutputStream wr = conn.getOutputStream()) {\r\n                wr.write(postData);\r\n",
                        "nextNode": "urlParameters.getBytes(StandardCharsets.UTF_8)"
                    },
                    {
                        "name": "urlParameters.getBytes(StandardCharsets.UTF_8)",
                        "type": "byte[]",
                        "context": "            conn.setDoOutput(true);\r\n            String urlParameters = \"username=\" + username + \"&password=\" + password;\r\n            byte[] postData = urlParameters.getBytes(StandardCharsets.UTF_8);\r\n            try(OutputStream wr = conn.getOutputStream()) {\r\n                wr.write(postData);\r\n",
                        "nextNode": "postData"
                    },
                    {
                        "name": "postData",
                        "type": "Dataflow from `password` to `postData`\nDataflow from `username` to `postData`\nDataflow from `urlParameters` to `postData`\nDataflow from `StandardCharsets.UTF_8` to `postData`\nDataflow from `getBytes(...)` to `postData`\nDataflow from `\"&password=\"` to `postData`\nDataflow from `\"username=\"` to `postData`",
                        "context": "            byte[] postData = urlParameters.getBytes(StandardCharsets.UTF_8);\r\n            try(OutputStream wr = conn.getOutputStream()) {\r\n                wr.write(postData);\r\n            }\r\n            conn.getResponseCode();\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "url",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "new URL(\"https://banking.com/login\")",
                        "type": "URL",
                        "context": "    public void authenticateUser(String username, String password) {\r\n        try {\r\n            URL url = new URL(\"https://banking.com/login\");\r\n            HttpURLConnection conn = (HttpURLConnection) url.openConnection();\r\n            conn.setRequestMethod(\"POST\");\r\n",
                        "nextNode": "url"
                    },
                    {
                        "name": "url",
                        "type": "Dataflow from `new URL(...)` to `url`\nDataflow from `\"https://banking.com/login\"` to `url`",
                        "context": "        try {\r\n            URL url = new URL(\"https://banking.com/login\");\r\n            HttpURLConnection conn = (HttpURLConnection) url.openConnection();\r\n            conn.setRequestMethod(\"POST\");\r\n            conn.setDoOutput(true);\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "username",
                "isSensitive": "yes",
                "graph": []
            }
        ],
        "strings": [
            {
                "name": "username=",
                "isSensitive": "no"
            },
            {
                "name": "POST",
                "isSensitive": "no"
            },
            {
                "name": "&password=",
                "isSensitive": "no"
            },
            {
                "name": "https://banking.com/login",
                "isSensitive": "yes"
            }
        ],
        "comments": [],
        "sinks": [
            {
                "name": "setRequestMethod",
                "isSink": "yes"
            },
            {
                "name": "printStackTrace",
                "isSink": "no"
            },
            {
                "name": "openConnection",
                "isSink": "yes"
            },
            {
                "name": "getResponseCode",
                "isSink": "yes"
            },
            {
                "name": "getOutputStream",
                "isSink": "yes"
            },
            {
                "name": "write",
                "isSink": "yes"
            },
            {
                "name": "getBytes",
                "isSink": "no"
            },
            {
                "name": "setDoOutput",
                "isSink": "yes"
            }
        ]
    },
    {
        "fileName": "GOOD_SensitiveDataApiExposureSent.java",
        "variables": [
            {
                "name": "request",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "jsonResponse",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "new JSONObject()",
                        "type": "JSONObject",
                        "context": "\r\n        // Prepare JSON response\r\n        JSONObject jsonResponse = new JSONObject();\r\n        jsonResponse.put(\"status\", \"success\");\r\n\r\n | \r\n        // Prepare JSON response\r\n        JSONObject jsonResponse = new JSONObject();\r\n        jsonResponse.put(\"status\", \"success\");\r\n\r\n",
                        "nextNode": "jsonResponse"
                    },
                    {
                        "name": "jsonResponse",
                        "type": "Dataflow from `new JSONObject(...)` to `jsonResponse`",
                        "context": "        // Prepare JSON response\r\n        JSONObject jsonResponse = new JSONObject();\r\n        jsonResponse.put(\"status\", \"success\");\r\n\r\n        // Set response type and encoding\r\n |         // Prepare JSON response\r\n        JSONObject jsonResponse = new JSONObject();\r\n        jsonResponse.put(\"status\", \"success\");\r\n\r\n        // Set response type and encoding\r\n |         response.setCharacterEncoding(\"UTF-8\");\r\n\r\n        response.getWriter().write(jsonResponse.toString());\r\n    }\r\n\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "response",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "accountNumber",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "userId",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "request.getParameter(\"userId\")",
                        "type": "String",
                        "context": "public class GOOD_SensitiveDataApiExposureSent extends HttpServlet {\r\n    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException {\r\n        String accountNumber = getSensitiveAccountDetails(request.getParameter(\"userId\"));\r\n\r\n        // Prepare JSON response\r\n",
                        "nextNode": "String userId"
                    },
                    {
                        "name": "String userId",
                        "type": "String",
                        "context": "    }\r\n\r\n    private String getSensitiveAccountDetails(String userId) {\r\n        // Example sensitive data retrieval\r\n        return \"Bank Account Number: 1234567890 for User ID: \" + userId;\r\n",
                        "nextNode": "userId"
                    },
                    {
                        "name": "userId",
                        "type": "Dataflow from `getParameter(...)` to `userId`\nDataflow from `\"userId\"` to `userId`",
                        "context": "    private String getSensitiveAccountDetails(String userId) {\r\n        // Example sensitive data retrieval\r\n        return \"Bank Account Number: 1234567890 for User ID: \" + userId;\r\n    }\r\n}\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "application/json",
                "isSensitive": "no"
            },
            {
                "name": "success",
                "isSensitive": "no"
            },
            {
                "name": "UTF-8",
                "isSensitive": "no"
            },
            {
                "name": "userId",
                "isSensitive": "no"
            },
            {
                "name": "status",
                "isSensitive": "no"
            },
            {
                "name": "Bank Account Number: 1234567890 for User ID:",
                "isSensitive": "yes"
            }
        ],
        "comments": [
            {
                "name": "Prepare JSON response",
                "isSensitive": "no"
            },
            {
                "name": "Set response type and encoding",
                "isSensitive": "no"
            },
            {
                "name": "Example sensitive data retrieval",
                "isSensitive": "no"
            }
        ],
        "sinks": [
            {
                "name": "setCharacterEncoding",
                "isSink": "no"
            },
            {
                "name": "getSensitiveAccountDetails",
                "isSink": "no"
            },
            {
                "name": "getWriter",
                "isSink": "no"
            },
            {
                "name": "toString",
                "isSink": "no"
            },
            {
                "name": "setContentType",
                "isSink": "no"
            },
            {
                "name": "write",
                "isSink": "yes"
            },
            {
                "name": "put",
                "isSink": "no"
            },
            {
                "name": "getParameter",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "GOOD_SensitiveInfoInEmail.java",
        "variables": [
            {
                "name": "mex",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "session",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "properties",
                        "type": "Properties",
                        "context": "        Properties properties = System.getProperties();\r\n        properties.setProperty(\"mail.smtp.host\", \"localhost\");\r\n        Session session = Session.getDefaultInstance(properties);\r\n\r\n        try {\r\n",
                        "nextNode": "Session.getDefaultInstance(properties)"
                    },
                    {
                        "name": "Session.getDefaultInstance(properties)",
                        "type": "Session",
                        "context": "        Properties properties = System.getProperties();\r\n        properties.setProperty(\"mail.smtp.host\", \"localhost\");\r\n        Session session = Session.getDefaultInstance(properties);\r\n\r\n        try {\r\n",
                        "nextNode": "session"
                    },
                    {
                        "name": "session",
                        "type": "Dataflow from `properties` to `session`\nDataflow from `properties` to `session`\nDataflow from `getProperties(...)` to `session`\nDataflow from `getDefaultInstance(...)` to `session`\nDataflow from `\"localhost\"` to `session`",
                        "context": "\r\n        try {\r\n            MimeMessage message = new MimeMessage(session);\r\n            message.setFrom(new InternetAddress(\"noreply@example.com\"));\r\n            message.addRecipient(Message.RecipientType.TO, new InternetAddress(recipient));\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "recipient",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "message",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "properties",
                        "type": "Properties",
                        "context": "        Properties properties = System.getProperties();\r\n        properties.setProperty(\"mail.smtp.host\", \"localhost\");\r\n        Session session = Session.getDefaultInstance(properties);\r\n\r\n        try {\r\n |         Properties properties = System.getProperties();\r\n        properties.setProperty(\"mail.smtp.host\", \"localhost\");\r\n        Session session = Session.getDefaultInstance(properties);\r\n\r\n        try {\r\n |         Properties properties = System.getProperties();\r\n        properties.setProperty(\"mail.smtp.host\", \"localhost\");\r\n        Session session = Session.getDefaultInstance(properties);\r\n\r\n        try {\r\n |         Properties properties = System.getProperties();\r\n        properties.setProperty(\"mail.smtp.host\", \"localhost\");\r\n        Session session = Session.getDefaultInstance(properties);\r\n\r\n        try {\r\n |         Properties properties = System.getProperties();\r\n        properties.setProperty(\"mail.smtp.host\", \"localhost\");\r\n        Session session = Session.getDefaultInstance(properties);\r\n\r\n        try {\r\n",
                        "nextNode": "Session.getDefaultInstance(properties)"
                    },
                    {
                        "name": "Session.getDefaultInstance(properties)",
                        "type": "Session",
                        "context": "        Properties properties = System.getProperties();\r\n        properties.setProperty(\"mail.smtp.host\", \"localhost\");\r\n        Session session = Session.getDefaultInstance(properties);\r\n\r\n        try {\r\n |         Properties properties = System.getProperties();\r\n        properties.setProperty(\"mail.smtp.host\", \"localhost\");\r\n        Session session = Session.getDefaultInstance(properties);\r\n\r\n        try {\r\n |         Properties properties = System.getProperties();\r\n        properties.setProperty(\"mail.smtp.host\", \"localhost\");\r\n        Session session = Session.getDefaultInstance(properties);\r\n\r\n        try {\r\n |         Properties properties = System.getProperties();\r\n        properties.setProperty(\"mail.smtp.host\", \"localhost\");\r\n        Session session = Session.getDefaultInstance(properties);\r\n\r\n        try {\r\n |         Properties properties = System.getProperties();\r\n        properties.setProperty(\"mail.smtp.host\", \"localhost\");\r\n        Session session = Session.getDefaultInstance(properties);\r\n\r\n        try {\r\n",
                        "nextNode": "session"
                    },
                    {
                        "name": "session",
                        "type": "Session",
                        "context": "\r\n        try {\r\n            MimeMessage message = new MimeMessage(session);\r\n            message.setFrom(new InternetAddress(\"noreply@example.com\"));\r\n            message.addRecipient(Message.RecipientType.TO, new InternetAddress(recipient));\r\n | \r\n        try {\r\n            MimeMessage message = new MimeMessage(session);\r\n            message.setFrom(new InternetAddress(\"noreply@example.com\"));\r\n            message.addRecipient(Message.RecipientType.TO, new InternetAddress(recipient));\r\n | \r\n        try {\r\n            MimeMessage message = new MimeMessage(session);\r\n            message.setFrom(new InternetAddress(\"noreply@example.com\"));\r\n            message.addRecipient(Message.RecipientType.TO, new InternetAddress(recipient));\r\n | \r\n        try {\r\n            MimeMessage message = new MimeMessage(session);\r\n            message.setFrom(new InternetAddress(\"noreply@example.com\"));\r\n            message.addRecipient(Message.RecipientType.TO, new InternetAddress(recipient));\r\n | \r\n        try {\r\n            MimeMessage message = new MimeMessage(session);\r\n            message.setFrom(new InternetAddress(\"noreply@example.com\"));\r\n            message.addRecipient(Message.RecipientType.TO, new InternetAddress(recipient));\r\n",
                        "nextNode": "new MimeMessage(session)"
                    },
                    {
                        "name": "new MimeMessage(session)",
                        "type": "MimeMessage",
                        "context": "\r\n        try {\r\n            MimeMessage message = new MimeMessage(session);\r\n            message.setFrom(new InternetAddress(\"noreply@example.com\"));\r\n            message.addRecipient(Message.RecipientType.TO, new InternetAddress(recipient));\r\n | \r\n        try {\r\n            MimeMessage message = new MimeMessage(session);\r\n            message.setFrom(new InternetAddress(\"noreply@example.com\"));\r\n            message.addRecipient(Message.RecipientType.TO, new InternetAddress(recipient));\r\n | \r\n        try {\r\n            MimeMessage message = new MimeMessage(session);\r\n            message.setFrom(new InternetAddress(\"noreply@example.com\"));\r\n            message.addRecipient(Message.RecipientType.TO, new InternetAddress(recipient));\r\n | \r\n        try {\r\n            MimeMessage message = new MimeMessage(session);\r\n            message.setFrom(new InternetAddress(\"noreply@example.com\"));\r\n            message.addRecipient(Message.RecipientType.TO, new InternetAddress(recipient));\r\n | \r\n        try {\r\n            MimeMessage message = new MimeMessage(session);\r\n            message.setFrom(new InternetAddress(\"noreply@example.com\"));\r\n            message.addRecipient(Message.RecipientType.TO, new InternetAddress(recipient));\r\n",
                        "nextNode": "message"
                    },
                    {
                        "name": "message",
                        "type": "Dataflow from `properties` to `message`\nDataflow from `properties` to `message`\nDataflow from `session` to `message`\nDataflow from `getProperties(...)` to `message`\nDataflow from `getDefaultInstance(...)` to `message`\nDataflow from `\"localhost\"` to `message`\nDataflow from `new MimeMessage(...)` to `message`",
                        "context": "        try {\r\n            MimeMessage message = new MimeMessage(session);\r\n            message.setFrom(new InternetAddress(\"noreply@example.com\"));\r\n            message.addRecipient(Message.RecipientType.TO, new InternetAddress(recipient));\r\n            message.setSubject(\"Sensitive Information Exposure\");\r\n |         try {\r\n            MimeMessage message = new MimeMessage(session);\r\n            message.setFrom(new InternetAddress(\"noreply@example.com\"));\r\n            message.addRecipient(Message.RecipientType.TO, new InternetAddress(recipient));\r\n            message.setSubject(\"Sensitive Information Exposure\");\r\n |             MimeMessage message = new MimeMessage(session);\r\n            message.setFrom(new InternetAddress(\"noreply@example.com\"));\r\n            message.addRecipient(Message.RecipientType.TO, new InternetAddress(recipient));\r\n            message.setSubject(\"Sensitive Information Exposure\");\r\n            message.setText(\"Please log in to your account to view sensitive information.\");\r\n |         try {\r\n            MimeMessage message = new MimeMessage(session);\r\n            message.setFrom(new InternetAddress(\"noreply@example.com\"));\r\n            message.addRecipient(Message.RecipientType.TO, new InternetAddress(recipient));\r\n            message.setSubject(\"Sensitive Information Exposure\");\r\n |             MimeMessage message = new MimeMessage(session);\r\n            message.setFrom(new InternetAddress(\"noreply@example.com\"));\r\n            message.addRecipient(Message.RecipientType.TO, new InternetAddress(recipient));\r\n            message.setSubject(\"Sensitive Information Exposure\");\r\n            message.setText(\"Please log in to your account to view sensitive information.\");\r\n |             message.setFrom(new InternetAddress(\"noreply@example.com\"));\r\n            message.addRecipient(Message.RecipientType.TO, new InternetAddress(recipient));\r\n            message.setSubject(\"Sensitive Information Exposure\");\r\n            message.setText(\"Please log in to your account to view sensitive information.\");\r\n            Transport.send(message);\r\n |         try {\r\n            MimeMessage message = new MimeMessage(session);\r\n            message.setFrom(new InternetAddress(\"noreply@example.com\"));\r\n            message.addRecipient(Message.RecipientType.TO, new InternetAddress(recipient));\r\n            message.setSubject(\"Sensitive Information Exposure\");\r\n |             MimeMessage message = new MimeMessage(session);\r\n            message.setFrom(new InternetAddress(\"noreply@example.com\"));\r\n            message.addRecipient(Message.RecipientType.TO, new InternetAddress(recipient));\r\n            message.setSubject(\"Sensitive Information Exposure\");\r\n            message.setText(\"Please log in to your account to view sensitive information.\");\r\n |             message.setFrom(new InternetAddress(\"noreply@example.com\"));\r\n            message.addRecipient(Message.RecipientType.TO, new InternetAddress(recipient));\r\n            message.setSubject(\"Sensitive Information Exposure\");\r\n            message.setText(\"Please log in to your account to view sensitive information.\");\r\n            Transport.send(message);\r\n |             message.addRecipient(Message.RecipientType.TO, new InternetAddress(recipient));\r\n            message.setSubject(\"Sensitive Information Exposure\");\r\n            message.setText(\"Please log in to your account to view sensitive information.\");\r\n            Transport.send(message);\r\n        } catch (MessagingException mex) {\r\n |         try {\r\n            MimeMessage message = new MimeMessage(session);\r\n            message.setFrom(new InternetAddress(\"noreply@example.com\"));\r\n            message.addRecipient(Message.RecipientType.TO, new InternetAddress(recipient));\r\n            message.setSubject(\"Sensitive Information Exposure\");\r\n |             MimeMessage message = new MimeMessage(session);\r\n            message.setFrom(new InternetAddress(\"noreply@example.com\"));\r\n            message.addRecipient(Message.RecipientType.TO, new InternetAddress(recipient));\r\n            message.setSubject(\"Sensitive Information Exposure\");\r\n            message.setText(\"Please log in to your account to view sensitive information.\");\r\n |             message.setFrom(new InternetAddress(\"noreply@example.com\"));\r\n            message.addRecipient(Message.RecipientType.TO, new InternetAddress(recipient));\r\n            message.setSubject(\"Sensitive Information Exposure\");\r\n            message.setText(\"Please log in to your account to view sensitive information.\");\r\n            Transport.send(message);\r\n |             message.addRecipient(Message.RecipientType.TO, new InternetAddress(recipient));\r\n            message.setSubject(\"Sensitive Information Exposure\");\r\n            message.setText(\"Please log in to your account to view sensitive information.\");\r\n            Transport.send(message);\r\n        } catch (MessagingException mex) {\r\n |             message.setSubject(\"Sensitive Information Exposure\");\r\n            message.setText(\"Please log in to your account to view sensitive information.\");\r\n            Transport.send(message);\r\n        } catch (MessagingException mex) {\r\n            mex.printStackTrace();\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "properties",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "System.getProperties()",
                        "type": "Properties",
                        "context": "public class GOOD_SensitiveInfoInEmail {\r\n    public void sendEmail(String recipient) {\r\n        Properties properties = System.getProperties();\r\n        properties.setProperty(\"mail.smtp.host\", \"localhost\");\r\n        Session session = Session.getDefaultInstance(properties);\r\n | public class GOOD_SensitiveInfoInEmail {\r\n    public void sendEmail(String recipient) {\r\n        Properties properties = System.getProperties();\r\n        properties.setProperty(\"mail.smtp.host\", \"localhost\");\r\n        Session session = Session.getDefaultInstance(properties);\r\n",
                        "nextNode": "properties"
                    },
                    {
                        "name": "properties",
                        "type": "Properties",
                        "context": "    public void sendEmail(String recipient) {\r\n        Properties properties = System.getProperties();\r\n        properties.setProperty(\"mail.smtp.host\", \"localhost\");\r\n        Session session = Session.getDefaultInstance(properties);\r\n\r\n |         Properties properties = System.getProperties();\r\n        properties.setProperty(\"mail.smtp.host\", \"localhost\");\r\n        Session session = Session.getDefaultInstance(properties);\r\n\r\n        try {\r\n |     public void sendEmail(String recipient) {\r\n        Properties properties = System.getProperties();\r\n        properties.setProperty(\"mail.smtp.host\", \"localhost\");\r\n        Session session = Session.getDefaultInstance(properties);\r\n\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "localhost",
                "isSensitive": "no"
            },
            {
                "name": "Sensitive Information Exposure",
                "isSensitive": "no"
            },
            {
                "name": "Please log in to your account to view sensitive information.",
                "isSensitive": "no"
            },
            {
                "name": "noreply@example.com",
                "isSensitive": "no"
            },
            {
                "name": "mail.smtp.host",
                "isSensitive": "no"
            }
        ],
        "comments": [],
        "sinks": [
            {
                "name": "getDefaultInstance",
                "isSink": "no"
            },
            {
                "name": "addRecipient",
                "isSink": "no"
            },
            {
                "name": "setSubject",
                "isSink": "no"
            },
            {
                "name": "printStackTrace",
                "isSink": "yes"
            },
            {
                "name": "setFrom",
                "isSink": "no"
            },
            {
                "name": "getProperties",
                "isSink": "no"
            },
            {
                "name": "setProperty",
                "isSink": "no"
            },
            {
                "name": "send",
                "isSink": "yes"
            },
            {
                "name": "setText",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "GOOD_UseHttpsForSensitiveData.java",
        "variables": [
            {
                "name": "args",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "data",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "sensitiveData",
                        "type": "String",
                        "context": "    public static void main(String[] args) {\r\n        String sensitiveData = \"{\\\"message\\\": \\\"My SSN is 1234566\\\"}\";\r\n        transmitDataSecurely(sensitiveData);\r\n    }\r\n}\r\n",
                        "nextNode": "String data"
                    },
                    {
                        "name": "String data",
                        "type": "String",
                        "context": "\r\npublic class GOOD_UseHttpsForSensitiveData {\r\n    public static void transmitDataSecurely(String data) {\r\n        try {\r\n            URL url = new URL(\"https://internalapi.com/secure-api\");\r\n",
                        "nextNode": "data"
                    },
                    {
                        "name": "data",
                        "type": "Dataflow from `sensitiveData` to `data`\nDataflow from `\"{{\\\"message\\\": \\\"My SSN is 1234566\\\"}}\"` to `data`",
                        "context": "            connection.setRequestProperty(\"Content-Type\", \"application/json\");\r\n            \r\n            connection.getOutputStream().write(data.getBytes());\r\n            System.out.println(\"Securely transmitted data. Response Code: \" + connection.getResponseCode());\r\n        } catch (Exception e) {\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "e",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "sensitiveData",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "\"{\\\"message\\\": \\\"My SSN is 1234566\\\"}\"",
                        "type": "String",
                        "context": "\r\n    public static void main(String[] args) {\r\n        String sensitiveData = \"{\\\"message\\\": \\\"My SSN is 1234566\\\"}\";\r\n        transmitDataSecurely(sensitiveData);\r\n    }\r\n",
                        "nextNode": "sensitiveData"
                    },
                    {
                        "name": "sensitiveData",
                        "type": "Dataflow from `\"{{\\\"message\\\": \\\"My SSN is 1234566\\\"}}\"` to `sensitiveData`",
                        "context": "    public static void main(String[] args) {\r\n        String sensitiveData = \"{\\\"message\\\": \\\"My SSN is 1234566\\\"}\";\r\n        transmitDataSecurely(sensitiveData);\r\n    }\r\n}\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "connection",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "url.openConnection()",
                        "type": "URLConnection",
                        "context": "        try {\r\n            URL url = new URL(\"https://internalapi.com/secure-api\");\r\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n            connection.setRequestMethod(\"POST\");\r\n            connection.setDoOutput(true);\r\n |         try {\r\n            URL url = new URL(\"https://internalapi.com/secure-api\");\r\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n            connection.setRequestMethod(\"POST\");\r\n            connection.setDoOutput(true);\r\n |         try {\r\n            URL url = new URL(\"https://internalapi.com/secure-api\");\r\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n            connection.setRequestMethod(\"POST\");\r\n            connection.setDoOutput(true);\r\n |         try {\r\n            URL url = new URL(\"https://internalapi.com/secure-api\");\r\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n            connection.setRequestMethod(\"POST\");\r\n            connection.setDoOutput(true);\r\n |         try {\r\n            URL url = new URL(\"https://internalapi.com/secure-api\");\r\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n            connection.setRequestMethod(\"POST\");\r\n            connection.setDoOutput(true);\r\n",
                        "nextNode": "(HttpURLConnection) url.openConnection()"
                    },
                    {
                        "name": "(HttpURLConnection) url.openConnection()",
                        "type": "HttpURLConnection",
                        "context": "        try {\r\n            URL url = new URL(\"https://internalapi.com/secure-api\");\r\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n            connection.setRequestMethod(\"POST\");\r\n            connection.setDoOutput(true);\r\n |         try {\r\n            URL url = new URL(\"https://internalapi.com/secure-api\");\r\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n            connection.setRequestMethod(\"POST\");\r\n            connection.setDoOutput(true);\r\n |         try {\r\n            URL url = new URL(\"https://internalapi.com/secure-api\");\r\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n            connection.setRequestMethod(\"POST\");\r\n            connection.setDoOutput(true);\r\n |         try {\r\n            URL url = new URL(\"https://internalapi.com/secure-api\");\r\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n            connection.setRequestMethod(\"POST\");\r\n            connection.setDoOutput(true);\r\n |         try {\r\n            URL url = new URL(\"https://internalapi.com/secure-api\");\r\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n            connection.setRequestMethod(\"POST\");\r\n            connection.setDoOutput(true);\r\n",
                        "nextNode": "connection"
                    },
                    {
                        "name": "connection",
                        "type": "Dataflow from `openConnection(...)` to `connection`",
                        "context": "            URL url = new URL(\"https://internalapi.com/secure-api\");\r\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n            connection.setRequestMethod(\"POST\");\r\n            connection.setDoOutput(true);\r\n            connection.setRequestProperty(\"Content-Type\", \"application/json\");\r\n |             URL url = new URL(\"https://internalapi.com/secure-api\");\r\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n            connection.setRequestMethod(\"POST\");\r\n            connection.setDoOutput(true);\r\n            connection.setRequestProperty(\"Content-Type\", \"application/json\");\r\n |             HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n            connection.setRequestMethod(\"POST\");\r\n            connection.setDoOutput(true);\r\n            connection.setRequestProperty(\"Content-Type\", \"application/json\");\r\n            \r\n |             URL url = new URL(\"https://internalapi.com/secure-api\");\r\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n            connection.setRequestMethod(\"POST\");\r\n            connection.setDoOutput(true);\r\n            connection.setRequestProperty(\"Content-Type\", \"application/json\");\r\n |             HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n            connection.setRequestMethod(\"POST\");\r\n            connection.setDoOutput(true);\r\n            connection.setRequestProperty(\"Content-Type\", \"application/json\");\r\n            \r\n |             connection.setRequestMethod(\"POST\");\r\n            connection.setDoOutput(true);\r\n            connection.setRequestProperty(\"Content-Type\", \"application/json\");\r\n            \r\n            connection.getOutputStream().write(data.getBytes());\r\n |             URL url = new URL(\"https://internalapi.com/secure-api\");\r\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n            connection.setRequestMethod(\"POST\");\r\n            connection.setDoOutput(true);\r\n            connection.setRequestProperty(\"Content-Type\", \"application/json\");\r\n |             HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n            connection.setRequestMethod(\"POST\");\r\n            connection.setDoOutput(true);\r\n            connection.setRequestProperty(\"Content-Type\", \"application/json\");\r\n            \r\n |             connection.setRequestMethod(\"POST\");\r\n            connection.setDoOutput(true);\r\n            connection.setRequestProperty(\"Content-Type\", \"application/json\");\r\n            \r\n            connection.getOutputStream().write(data.getBytes());\r\n |             connection.setRequestProperty(\"Content-Type\", \"application/json\");\r\n            \r\n            connection.getOutputStream().write(data.getBytes());\r\n            System.out.println(\"Securely transmitted data. Response Code: \" + connection.getResponseCode());\r\n        } catch (Exception e) {\r\n |             URL url = new URL(\"https://internalapi.com/secure-api\");\r\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n            connection.setRequestMethod(\"POST\");\r\n            connection.setDoOutput(true);\r\n            connection.setRequestProperty(\"Content-Type\", \"application/json\");\r\n |             HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n            connection.setRequestMethod(\"POST\");\r\n            connection.setDoOutput(true);\r\n            connection.setRequestProperty(\"Content-Type\", \"application/json\");\r\n            \r\n |             connection.setRequestMethod(\"POST\");\r\n            connection.setDoOutput(true);\r\n            connection.setRequestProperty(\"Content-Type\", \"application/json\");\r\n            \r\n            connection.getOutputStream().write(data.getBytes());\r\n |             connection.setRequestProperty(\"Content-Type\", \"application/json\");\r\n            \r\n            connection.getOutputStream().write(data.getBytes());\r\n            System.out.println(\"Securely transmitted data. Response Code: \" + connection.getResponseCode());\r\n        } catch (Exception e) {\r\n |             \r\n            connection.getOutputStream().write(data.getBytes());\r\n            System.out.println(\"Securely transmitted data. Response Code: \" + connection.getResponseCode());\r\n        } catch (Exception e) {\r\n            System.err.println(\"An error has occurred.\");\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "url",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "new URL(\"https://internalapi.com/secure-api\")",
                        "type": "URL",
                        "context": "    public static void transmitDataSecurely(String data) {\r\n        try {\r\n            URL url = new URL(\"https://internalapi.com/secure-api\");\r\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n            connection.setRequestMethod(\"POST\");\r\n",
                        "nextNode": "url"
                    },
                    {
                        "name": "url",
                        "type": "Dataflow from `new URL(...)` to `url`\nDataflow from `\"https://internalapi.com/secure-api\"` to `url`",
                        "context": "        try {\r\n            URL url = new URL(\"https://internalapi.com/secure-api\");\r\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n            connection.setRequestMethod(\"POST\");\r\n            connection.setDoOutput(true);\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "An error has occurred.",
                "isSensitive": "no"
            },
            {
                "name": "application/json",
                "isSensitive": "no"
            },
            {
                "name": "POST",
                "isSensitive": "no"
            },
            {
                "name": "Securely transmitted data. Response Code:",
                "isSensitive": "no"
            },
            {
                "name": "https://internalapi.com/secure-api",
                "isSensitive": "yes"
            },
            {
                "name": "{\"message\": \"My SSN is 1234566\"}",
                "isSensitive": "yes"
            },
            {
                "name": "Content-Type",
                "isSensitive": "no"
            }
        ],
        "comments": [],
        "sinks": [
            {
                "name": "println",
                "isSink": "yes"
            },
            {
                "name": "transmitDataSecurely",
                "isSink": "no"
            },
            {
                "name": "setRequestMethod",
                "isSink": "yes"
            },
            {
                "name": "setRequestProperty",
                "isSink": "yes"
            },
            {
                "name": "openConnection",
                "isSink": "yes"
            },
            {
                "name": "getResponseCode",
                "isSink": "yes"
            },
            {
                "name": "getOutputStream",
                "isSink": "no"
            },
            {
                "name": "write",
                "isSink": "yes"
            },
            {
                "name": "getBytes",
                "isSink": "no"
            },
            {
                "name": "setDoOutput",
                "isSink": "yes"
            }
        ]
    },
    {
        "fileName": "BAD_AccessControlBasedOnTime.java",
        "variables": [
            {
                "name": "hour",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "userRole",
                "isSensitive": "yes",
                "graph": []
            }
        ],
        "strings": [
            {
                "name": "Access Granted",
                "isSensitive": "no"
            },
            {
                "name": "Access Denied: Outside working hours",
                "isSensitive": "no"
            },
            {
                "name": "admin",
                "isSensitive": "yes"
            },
            {
                "name": "Access Denied for non-admin users",
                "isSensitive": "no"
            },
            {
                "name": "Access Denied",
                "isSensitive": "no"
            }
        ],
        "comments": [],
        "sinks": [
            {
                "name": "println",
                "isSink": "yes"
            },
            {
                "name": "equals",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "BAD_ComplexNestedConditions.java",
        "variables": [
            {
                "name": "password",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "username",
                "isSensitive": "yes",
                "graph": []
            }
        ],
        "strings": [
            {
                "name": "user1",
                "isSensitive": "yes"
            },
            {
                "name": "Incorrect password",
                "isSensitive": "no"
            },
            {
                "name": "User not found",
                "isSensitive": "no"
            },
            {
                "name": "pass1",
                "isSensitive": "yes"
            },
            {
                "name": "Password cannot be empty",
                "isSensitive": "no"
            },
            {
                "name": "Login Successful",
                "isSensitive": "no"
            },
            {
                "name": "Username cannot be empty",
                "isSensitive": "no"
            }
        ],
        "comments": [],
        "sinks": [
            {
                "name": "println",
                "isSink": "yes"
            },
            {
                "name": "equals",
                "isSink": "no"
            },
            {
                "name": "isEmpty",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "BAD_DetailedErrorHandlingConditional.java",
        "variables": [
            {
                "name": "userInput",
                "isSensitive": "yes",
                "graph": []
            }
        ],
        "strings": [
            {
                "name": "Error: Input cannot be null",
                "isSensitive": "no"
            },
            {
                "name": "Error: Input cannot be empty",
                "isSensitive": "no"
            },
            {
                "name": "Error: admin is a reserved keyword",
                "isSensitive": "no"
            },
            {
                "name": "admin",
                "isSensitive": "yes"
            },
            {
                "name": "Processing input:",
                "isSensitive": "no"
            }
        ],
        "comments": [],
        "sinks": [
            {
                "name": "println",
                "isSink": "yes"
            },
            {
                "name": "equals",
                "isSink": "no"
            },
            {
                "name": "isEmpty",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "BAD_DifferentErrorCodesrentErrorCodes.java",
        "variables": [
            {
                "name": "statusCode",
                "isSensitive": "no",
                "graph": []
            }
        ],
        "strings": [
            {
                "name": "200",
                "isSensitive": "no"
            },
            {
                "name": "500",
                "isSensitive": "no"
            },
            {
                "name": "Error: Unknown Status Code",
                "isSensitive": "no"
            },
            {
                "name": "404",
                "isSensitive": "no"
            },
            {
                "name": "Error",
                "isSensitive": "no"
            },
            {
                "name": "Error: Not Found",
                "isSensitive": "no"
            },
            {
                "name": "OK",
                "isSensitive": "no"
            },
            {
                "name": "Error: Internal Server Error",
                "isSensitive": "no"
            }
        ],
        "comments": [],
        "sinks": [
            {
                "name": "println",
                "isSink": "yes"
            },
            {
                "name": "equals",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "BAD_EmailVerificationCondition.java",
        "variables": [
            {
                "name": "email",
                "isSensitive": "yes",
                "graph": []
            }
        ],
        "strings": [
            {
                "name": "Verification Failed: Email not registered",
                "isSensitive": "no"
            },
            {
                "name": "Verification Failed: Email cannot be null",
                "isSensitive": "no"
            },
            {
                "name": "test@example.com",
                "isSensitive": "yes"
            },
            {
                "name": "Verification Successful: Email found in system",
                "isSensitive": "no"
            }
        ],
        "comments": [],
        "sinks": [
            {
                "name": "println",
                "isSink": "yes"
            },
            {
                "name": "equals",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "BAD_FileAccessControlConditional.java",
        "variables": [
            {
                "name": "filePath",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "userRole",
                "isSensitive": "yes",
                "graph": []
            }
        ],
        "strings": [
            {
                "name": "Access Denied: Unknown role",
                "isSensitive": "no"
            },
            {
                "name": "Access Denied: User cannot access private files",
                "isSensitive": "no"
            },
            {
                "name": "/public/",
                "isSensitive": "no"
            },
            {
                "name": "admin",
                "isSensitive": "yes"
            },
            {
                "name": "Access Granted: Admin has full access",
                "isSensitive": "no"
            },
            {
                "name": "user",
                "isSensitive": "yes"
            },
            {
                "name": "Access Granted: User can access public files",
                "isSensitive": "no"
            }
        ],
        "comments": [],
        "sinks": [
            {
                "name": "println",
                "isSink": "yes"
            },
            {
                "name": "equals",
                "isSink": "no"
            },
            {
                "name": "startsWith",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "BAD_FileDownloadAuthorization.java",
        "variables": [
            {
                "name": "userRole",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "fileType",
                "isSensitive": "no",
                "graph": []
            }
        ],
        "strings": [
            {
                "name": "Download Authorized",
                "isSensitive": "no"
            },
            {
                "name": "Download Denied: Insufficient privileges",
                "isSensitive": "no"
            },
            {
                "name": "admin",
                "isSensitive": "no"
            },
            {
                "name": "confidential",
                "isSensitive": "no"
            }
        ],
        "comments": [],
        "sinks": [
            {
                "name": "println",
                "isSink": "yes"
            },
            {
                "name": "equals",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "BAD_NetworkAuthenticationConditional.java",
        "variables": [
            {
                "name": "password",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "username",
                "isSensitive": "yes",
                "graph": []
            }
        ],
        "strings": [
            {
                "name": "Authentication Failed: Missing username or password.",
                "isSensitive": "no"
            },
            {
                "name": "Authentication Failed: Incorrect username.",
                "isSensitive": "no"
            },
            {
                "name": "Authentication Failed: Invalid credentials.",
                "isSensitive": "no"
            },
            {
                "name": "Authentication Failed: Incorrect admin password.",
                "isSensitive": "no"
            },
            {
                "name": "userPass",
                "isSensitive": "yes"
            },
            {
                "name": "admin",
                "isSensitive": "yes"
            },
            {
                "name": "adminPass",
                "isSensitive": "yes"
            },
            {
                "name": "Authentication Successful: Admin access granted.",
                "isSensitive": "no"
            }
        ],
        "comments": [],
        "sinks": [
            {
                "name": "println",
                "isSink": "yes"
            },
            {
                "name": "equals",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "BAD_SimpleLoginDiscrepancy.java",
        "variables": [
            {
                "name": "password",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "username",
                "isSensitive": "yes",
                "graph": []
            }
        ],
        "strings": [
            {
                "name": "Invalid password",
                "isSensitive": "no"
            },
            {
                "name": "Invalid username",
                "isSensitive": "no"
            },
            {
                "name": "admin",
                "isSensitive": "yes"
            },
            {
                "name": "Login Successful",
                "isSensitive": "no"
            }
        ],
        "comments": [],
        "sinks": [
            {
                "name": "println",
                "isSink": "yes"
            },
            {
                "name": "equals",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "BAD_TwoFactorAuthentication.java",
        "variables": [
            {
                "name": "code",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "username",
                "isSensitive": "yes",
                "graph": []
            }
        ],
        "strings": [
            {
                "name": "Authentication Successful",
                "isSensitive": "no"
            },
            {
                "name": "123456",
                "isSensitive": "yes"
            },
            {
                "name": "Authentication Failed: Unknown username",
                "isSensitive": "no"
            },
            {
                "name": "admin",
                "isSensitive": "yes"
            },
            {
                "name": "Authentication Failed: Invalid code for admin",
                "isSensitive": "no"
            }
        ],
        "comments": [],
        "sinks": [
            {
                "name": "println",
                "isSink": "yes"
            },
            {
                "name": "equals",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "BAD_UserRoleHandlerSwitch.java",
        "variables": [
            {
                "name": "role",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "response",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "action",
                        "type": "String",
                        "context": "        switch (role) {\r\n            case ADMIN:\r\n                response = performAdminAction(action);\r\n                break;\r\n            case USER:\r\n |     private String performAdminAction(String action) {\r\n        // Admin-specific operations\r\n        return \"Admin action performed: \" + action;\r\n    }\r\n\r\n",
                        "nextNode": "\"Admin action performed: \" + action"
                    },
                    {
                        "name": "String action",
                        "type": "String",
                        "context": "    }\r\n\r\n    private String performAdminAction(String action) {\r\n        // Admin-specific operations\r\n        return \"Admin action performed: \" + action;\r\n",
                        "nextNode": "action"
                    },
                    {
                        "name": "\"Admin action performed: \" + action",
                        "type": "String",
                        "context": "    private String performAdminAction(String action) {\r\n        // Admin-specific operations\r\n        return \"Admin action performed: \" + action;\r\n    }\r\n\r\n",
                        "nextNode": "performAdminAction(action)"
                    },
                    {
                        "name": "performAdminAction(action)",
                        "type": "String",
                        "context": "        switch (role) {\r\n            case ADMIN:\r\n                response = performAdminAction(action);\r\n                break;\r\n            case USER:\r\n",
                        "nextNode": "response"
                    },
                    {
                        "name": "response",
                        "type": "Dataflow from `action` to `response`\nDataflow from `action` to `response`\nDataflow from `action` to `response`\nDataflow from `action` to `response`\nDataflow from `performAdminAction(...)` to `response`\nDataflow from `performUserAction(...)` to `response`\nDataflow from `\"Access denied\"` to `response`\nDataflow from `\"Admin action performed: \"` to `response`\nDataflow from `\"User action performed: \"` to `response`",
                        "context": "                break;\r\n        }\r\n        return response;\r\n    }\r\n\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "action",
                "isSensitive": "no",
                "graph": []
            }
        ],
        "strings": [
            {
                "name": "Admin action performed:",
                "isSensitive": "no"
            },
            {
                "name": "Access denied",
                "isSensitive": "no"
            },
            {
                "name": "User action performed:",
                "isSensitive": "no"
            }
        ],
        "comments": [
            {
                "name": "User-specific operations",
                "isSensitive": "no"
            },
            {
                "name": "Admin-specific operations",
                "isSensitive": "no"
            }
        ],
        "sinks": [
            {
                "name": "performAdminAction",
                "isSink": "no"
            },
            {
                "name": "performUserAction",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "GOOD_AccessControlBasedOnTime.java",
        "variables": [
            {
                "name": "hour",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "userRole",
                "isSensitive": "yes",
                "graph": []
            }
        ],
        "strings": [
            {
                "name": "Access Granted",
                "isSensitive": "no"
            },
            {
                "name": "admin",
                "isSensitive": "no"
            },
            {
                "name": "Access Denied",
                "isSensitive": "no"
            }
        ],
        "comments": [],
        "sinks": [
            {
                "name": "println",
                "isSink": "yes"
            },
            {
                "name": "equals",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "GOOD_ComplexNestedConditions.java",
        "variables": [
            {
                "name": "password",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "username",
                "isSensitive": "yes",
                "graph": []
            }
        ],
        "strings": [
            {
                "name": "user1",
                "isSensitive": "yes"
            },
            {
                "name": "pass1",
                "isSensitive": "yes"
            },
            {
                "name": "Error",
                "isSensitive": "no"
            },
            {
                "name": "Login Successful",
                "isSensitive": "no"
            }
        ],
        "comments": [],
        "sinks": [
            {
                "name": "println",
                "isSink": "yes"
            },
            {
                "name": "equals",
                "isSink": "no"
            },
            {
                "name": "isEmpty",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "GOOD_ConsistentAuthenticationTiming.java",
        "variables": [
            {
                "name": "args",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "validUser",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "VALID_USERNAME",
                        "type": "String",
                        "context": "\r\n    public static boolean consistentAuthenticate(String attemptUsername, String attemptPassword) {\r\n        boolean validUser = attemptUsername.equals(VALID_USERNAME);\r\n        boolean correctPassword = attemptPassword.equals(VALID_PASSWORD);\r\n\r\n",
                        "nextNode": "attemptUsername.equals(VALID_USERNAME)"
                    },
                    {
                        "name": "attemptUsername.equals(VALID_USERNAME)",
                        "type": "Boolean",
                        "context": "\r\n    public static boolean consistentAuthenticate(String attemptUsername, String attemptPassword) {\r\n        boolean validUser = attemptUsername.equals(VALID_USERNAME);\r\n        boolean correctPassword = attemptPassword.equals(VALID_PASSWORD);\r\n\r\n",
                        "nextNode": "validUser"
                    },
                    {
                        "name": "validUser",
                        "type": "Dataflow from `VALID_USERNAME` to `validUser`\nDataflow from `getenv(...)` to `validUser`\nDataflow from `equals(...)` to `validUser`\nDataflow from `\"VALID_USERNAME\"` to `validUser`",
                        "context": "        }\r\n\r\n        return validUser && correctPassword;\r\n    }\r\n\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "correctPassword",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "VALID_PASSWORD",
                        "type": "String",
                        "context": "    public static boolean consistentAuthenticate(String attemptUsername, String attemptPassword) {\r\n        boolean validUser = attemptUsername.equals(VALID_USERNAME);\r\n        boolean correctPassword = attemptPassword.equals(VALID_PASSWORD);\r\n\r\n        try {\r\n",
                        "nextNode": "attemptPassword.equals(VALID_PASSWORD)"
                    },
                    {
                        "name": "attemptPassword.equals(VALID_PASSWORD)",
                        "type": "Boolean",
                        "context": "    public static boolean consistentAuthenticate(String attemptUsername, String attemptPassword) {\r\n        boolean validUser = attemptUsername.equals(VALID_USERNAME);\r\n        boolean correctPassword = attemptPassword.equals(VALID_PASSWORD);\r\n\r\n        try {\r\n",
                        "nextNode": "correctPassword"
                    },
                    {
                        "name": "correctPassword",
                        "type": "Dataflow from `VALID_PASSWORD` to `correctPassword`\nDataflow from `getenv(...)` to `correctPassword`\nDataflow from `equals(...)` to `correctPassword`\nDataflow from `\"VALID_PASSWORD\"` to `correctPassword`",
                        "context": "        }\r\n\r\n        return validUser && correctPassword;\r\n    }\r\n\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "e",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "attemptPassword",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "System.getenv(\"ATTEMPT_PASSWORD\")",
                        "type": "String",
                        "context": "\r\n    public static void main(String[] args) {\r\n        consistentAuthenticate(System.getenv(\"ATTEMPT_USERNAME\"), System.getenv(\"ATTEMPT_PASSWORD\"));\r\n    }\r\n}\r\n",
                        "nextNode": "String attemptPassword"
                    },
                    {
                        "name": "String attemptPassword",
                        "type": "String",
                        "context": "    private static final String VALID_PASSWORD = System.getenv(\"VALID_PASSWORD\");\r\n\r\n    public static boolean consistentAuthenticate(String attemptUsername, String attemptPassword) {\r\n        boolean validUser = attemptUsername.equals(VALID_USERNAME);\r\n        boolean correctPassword = attemptPassword.equals(VALID_PASSWORD);\r\n",
                        "nextNode": "attemptPassword"
                    },
                    {
                        "name": "attemptPassword",
                        "type": "Dataflow from `getenv(...)` to `attemptPassword`\nDataflow from `\"ATTEMPT_PASSWORD\"` to `attemptPassword`",
                        "context": "    public static boolean consistentAuthenticate(String attemptUsername, String attemptPassword) {\r\n        boolean validUser = attemptUsername.equals(VALID_USERNAME);\r\n        boolean correctPassword = attemptPassword.equals(VALID_PASSWORD);\r\n\r\n        try {\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "VALID_USERNAME",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "System.getenv(\"VALID_USERNAME\")",
                        "type": "String",
                        "context": "public class GOOD_ConsistentAuthenticationTiming {\r\n    \r\n    private static final String VALID_USERNAME = System.getenv(\"VALID_USERNAME\");\r\n    private static final String VALID_PASSWORD = System.getenv(\"VALID_PASSWORD\");\r\n\r\n",
                        "nextNode": "VALID_USERNAME"
                    },
                    {
                        "name": "VALID_USERNAME",
                        "type": "String",
                        "context": "public class GOOD_ConsistentAuthenticationTiming {\r\n    \r\n    private static final String VALID_USERNAME = System.getenv(\"VALID_USERNAME\");\r\n    private static final String VALID_PASSWORD = System.getenv(\"VALID_PASSWORD\");\r\n\r\n | \r\n    public static boolean consistentAuthenticate(String attemptUsername, String attemptPassword) {\r\n        boolean validUser = attemptUsername.equals(VALID_USERNAME);\r\n        boolean correctPassword = attemptPassword.equals(VALID_PASSWORD);\r\n\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "attemptUsername",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "System.getenv(\"ATTEMPT_USERNAME\")",
                        "type": "String",
                        "context": "\r\n    public static void main(String[] args) {\r\n        consistentAuthenticate(System.getenv(\"ATTEMPT_USERNAME\"), System.getenv(\"ATTEMPT_PASSWORD\"));\r\n    }\r\n}\r\n",
                        "nextNode": "String attemptUsername"
                    },
                    {
                        "name": "String attemptUsername",
                        "type": "String",
                        "context": "    private static final String VALID_PASSWORD = System.getenv(\"VALID_PASSWORD\");\r\n\r\n    public static boolean consistentAuthenticate(String attemptUsername, String attemptPassword) {\r\n        boolean validUser = attemptUsername.equals(VALID_USERNAME);\r\n        boolean correctPassword = attemptPassword.equals(VALID_PASSWORD);\r\n",
                        "nextNode": "attemptUsername"
                    },
                    {
                        "name": "attemptUsername",
                        "type": "Dataflow from `getenv(...)` to `attemptUsername`\nDataflow from `\"ATTEMPT_USERNAME\"` to `attemptUsername`",
                        "context": "\r\n    public static boolean consistentAuthenticate(String attemptUsername, String attemptPassword) {\r\n        boolean validUser = attemptUsername.equals(VALID_USERNAME);\r\n        boolean correctPassword = attemptPassword.equals(VALID_PASSWORD);\r\n\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "VALID_PASSWORD",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "System.getenv(\"VALID_PASSWORD\")",
                        "type": "String",
                        "context": "    \r\n    private static final String VALID_USERNAME = System.getenv(\"VALID_USERNAME\");\r\n    private static final String VALID_PASSWORD = System.getenv(\"VALID_PASSWORD\");\r\n\r\n    public static boolean consistentAuthenticate(String attemptUsername, String attemptPassword) {\r\n",
                        "nextNode": "VALID_PASSWORD"
                    },
                    {
                        "name": "VALID_PASSWORD",
                        "type": "String",
                        "context": "    \r\n    private static final String VALID_USERNAME = System.getenv(\"VALID_USERNAME\");\r\n    private static final String VALID_PASSWORD = System.getenv(\"VALID_PASSWORD\");\r\n\r\n    public static boolean consistentAuthenticate(String attemptUsername, String attemptPassword) {\r\n |     public static boolean consistentAuthenticate(String attemptUsername, String attemptPassword) {\r\n        boolean validUser = attemptUsername.equals(VALID_USERNAME);\r\n        boolean correctPassword = attemptPassword.equals(VALID_PASSWORD);\r\n\r\n        try {\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "VALID_USERNAME",
                "isSensitive": "no"
            },
            {
                "name": "ATTEMPT_USERNAME",
                "isSensitive": "no"
            },
            {
                "name": "ATTEMPT_PASSWORD",
                "isSensitive": "no"
            },
            {
                "name": "VALID_PASSWORD",
                "isSensitive": "no"
            }
        ],
        "comments": [],
        "sinks": [
            {
                "name": "sleep",
                "isSink": "no"
            },
            {
                "name": "currentThread",
                "isSink": "no"
            },
            {
                "name": "equals",
                "isSink": "no"
            },
            {
                "name": "interrupt",
                "isSink": "no"
            },
            {
                "name": "getenv",
                "isSink": "no"
            },
            {
                "name": "consistentAuthenticate",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "GOOD_DetailedErrorHandlingConditional.java",
        "variables": [
            {
                "name": "userInput",
                "isSensitive": "yes",
                "graph": []
            }
        ],
        "strings": [
            {
                "name": "Error",
                "isSensitive": "no"
            },
            {
                "name": "admin",
                "isSensitive": "no"
            },
            {
                "name": "Processing input:",
                "isSensitive": "no"
            }
        ],
        "comments": [],
        "sinks": [
            {
                "name": "println",
                "isSink": "yes"
            },
            {
                "name": "equals",
                "isSink": "no"
            },
            {
                "name": "isEmpty",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "GOOD_DifferentErrorCodes.java",
        "variables": [
            {
                "name": "statusCode",
                "isSensitive": "no",
                "graph": []
            }
        ],
        "strings": [
            {
                "name": "200",
                "isSensitive": "no"
            },
            {
                "name": "500",
                "isSensitive": "no"
            },
            {
                "name": "404",
                "isSensitive": "no"
            },
            {
                "name": "Error",
                "isSensitive": "no"
            },
            {
                "name": "OK",
                "isSensitive": "no"
            }
        ],
        "comments": [],
        "sinks": [
            {
                "name": "println",
                "isSink": "yes"
            },
            {
                "name": "equals",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "GOOD_EmailVerificationCondition.java",
        "variables": [
            {
                "name": "email",
                "isSensitive": "yes",
                "graph": []
            }
        ],
        "strings": [
            {
                "name": "Verification Failed",
                "isSensitive": "no"
            },
            {
                "name": "john@gmail.com",
                "isSensitive": "yes"
            },
            {
                "name": "Verification Successful: Email found in system",
                "isSensitive": "no"
            }
        ],
        "comments": [],
        "sinks": [
            {
                "name": "println",
                "isSink": "yes"
            },
            {
                "name": "equals",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "GOOD_FileAccessControlConditional.java",
        "variables": [
            {
                "name": "filePath",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "userRole",
                "isSensitive": "yes",
                "graph": []
            }
        ],
        "strings": [
            {
                "name": "/public/",
                "isSensitive": "no"
            },
            {
                "name": "admin",
                "isSensitive": "no"
            },
            {
                "name": "Access Granted: Admin has full access",
                "isSensitive": "no"
            },
            {
                "name": "Access Denied",
                "isSensitive": "no"
            },
            {
                "name": "user",
                "isSensitive": "no"
            },
            {
                "name": "Access Granted: User can access public files",
                "isSensitive": "no"
            }
        ],
        "comments": [],
        "sinks": [
            {
                "name": "println",
                "isSink": "yes"
            },
            {
                "name": "equals",
                "isSink": "no"
            },
            {
                "name": "startsWith",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "GOOD_FileDownloadAuthorization.java",
        "variables": [
            {
                "name": "userRole",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "fileType",
                "isSensitive": "no",
                "graph": []
            }
        ],
        "strings": [
            {
                "name": "Download Authorized",
                "isSensitive": "no"
            },
            {
                "name": "Download Denied",
                "isSensitive": "no"
            },
            {
                "name": "admin",
                "isSensitive": "yes"
            }
        ],
        "comments": [],
        "sinks": [
            {
                "name": "println",
                "isSink": "yes"
            },
            {
                "name": "equals",
                "isSink": "no"
            },
            {
                "name": "isEmpty",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "GOOD_NetworkAuthenticationConditional.java",
        "variables": [
            {
                "name": "password",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "username",
                "isSensitive": "yes",
                "graph": []
            }
        ],
        "strings": [
            {
                "name": "Authentication Failed",
                "isSensitive": "no"
            },
            {
                "name": "userPass",
                "isSensitive": "yes"
            },
            {
                "name": "admin",
                "isSensitive": "yes"
            },
            {
                "name": "adminPass",
                "isSensitive": "yes"
            },
            {
                "name": "Authentication Successful: Admin access granted.",
                "isSensitive": "no"
            }
        ],
        "comments": [],
        "sinks": [
            {
                "name": "println",
                "isSink": "yes"
            },
            {
                "name": "equals",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "GOOD_SimpleLoginDiscrepancy.java",
        "variables": [
            {
                "name": "password",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "username",
                "isSensitive": "yes",
                "graph": []
            }
        ],
        "strings": [
            {
                "name": "password",
                "isSensitive": "no"
            },
            {
                "name": "Login unsuccessful",
                "isSensitive": "no"
            },
            {
                "name": "admin",
                "isSensitive": "no"
            },
            {
                "name": "Login Successful",
                "isSensitive": "no"
            }
        ],
        "comments": [],
        "sinks": [
            {
                "name": "println",
                "isSink": "yes"
            },
            {
                "name": "equals",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "GOOD_UniformLoginResponse.java",
        "variables": [
            {
                "name": "password",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "req.getParameter(\"password\")",
                        "type": "String",
                        "context": "    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\r\n        String username = req.getParameter(\"username\");\r\n        String password = req.getParameter(\"password\");\r\n\r\n        if (authenticate(username, password)) {\r\n",
                        "nextNode": "password"
                    },
                    {
                        "name": "password",
                        "type": "Dataflow from `getParameter(...)` to `password`\nDataflow from `\"password\"` to `password`",
                        "context": "        String password = req.getParameter(\"password\");\r\n\r\n        if (authenticate(username, password)) {\r\n            resp.getWriter().write(\"Login successful\");\r\n        } else {\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "resp",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "username",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "req.getParameter(\"username\")",
                        "type": "String",
                        "context": "    @Override\r\n    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\r\n        String username = req.getParameter(\"username\");\r\n        String password = req.getParameter(\"password\");\r\n\r\n",
                        "nextNode": "username"
                    },
                    {
                        "name": "username",
                        "type": "Dataflow from `getParameter(...)` to `username`\nDataflow from `\"username\"` to `username`",
                        "context": "        String password = req.getParameter(\"password\");\r\n\r\n        if (authenticate(username, password)) {\r\n            resp.getWriter().write(\"Login successful\");\r\n        } else {\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "req",
                "isSensitive": "no",
                "graph": []
            }
        ],
        "strings": [
            {
                "name": "password",
                "isSensitive": "no"
            },
            {
                "name": "Login failed. Please check your username and password.",
                "isSensitive": "no"
            },
            {
                "name": "Login successful",
                "isSensitive": "no"
            },
            {
                "name": "/secure-login",
                "isSensitive": "no"
            },
            {
                "name": "username",
                "isSensitive": "no"
            }
        ],
        "comments": [],
        "sinks": [
            {
                "name": "authenticate",
                "isSink": "no"
            },
            {
                "name": "getWriter",
                "isSink": "no"
            },
            {
                "name": "write",
                "isSink": "yes"
            },
            {
                "name": "getParameter",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "BAD_AttackAgainstHeader_UnsafeComparison.java",
        "variables": [
            {
                "name": "request",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "Key",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "\"5d41402abc4b2a76b9719d911017c592\"",
                        "type": "String",
                        "context": "public class BAD_AttackAgainstHeader_UnsafeComparison {\r\n    public boolean UnsafeComparison(HttpServletRequest request) {\r\n        String Key = \"5d41402abc4b2a76b9719d911017c592\";\r\n        return Key.equals(request.getHeader(\"X-Auth-Token\"));\r\n    }\r\n",
                        "nextNode": "Key"
                    },
                    {
                        "name": "Key",
                        "type": "Dataflow from `\"5d41402abc4b2a76b9719d911017c592\"` to `Key`",
                        "context": "    public boolean UnsafeComparison(HttpServletRequest request) {\r\n        String Key = \"5d41402abc4b2a76b9719d911017c592\";\r\n        return Key.equals(request.getHeader(\"X-Auth-Token\"));\r\n    }\r\n}\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "X-Auth-Token",
                "isSensitive": "no"
            },
            {
                "name": "5d41402abc4b2a76b9719d911017c592",
                "isSensitive": "yes"
            }
        ],
        "comments": [],
        "sinks": [
            {
                "name": "equals",
                "isSink": "no"
            },
            {
                "name": "getHeader",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "GOOD_AttackAgainstHeader_safeComparison.java",
        "variables": [
            {
                "name": "request",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "Key",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "\"b1946ac92492d2347c6235b4d2611184\"",
                        "type": "String",
                        "context": "    public boolean safeComparison(HttpServletRequest request) {\r\n        String token = request.getHeader(\"X-Auth-Token\");\r\n        String Key = \"b1946ac92492d2347c6235b4d2611184\";\r\n        return MessageDigest.isEqual(Key.getBytes(StandardCharsets.UTF_8), token.getBytes(StandardCharsets.UTF_8));\r\n    }\r\n",
                        "nextNode": "Key"
                    },
                    {
                        "name": "Key",
                        "type": "Dataflow from `\"b1946ac92492d2347c6235b4d2611184\"` to `Key`",
                        "context": "        String token = request.getHeader(\"X-Auth-Token\");\r\n        String Key = \"b1946ac92492d2347c6235b4d2611184\";\r\n        return MessageDigest.isEqual(Key.getBytes(StandardCharsets.UTF_8), token.getBytes(StandardCharsets.UTF_8));\r\n    }\r\n}\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "token",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "request.getHeader(\"X-Auth-Token\")",
                        "type": "String",
                        "context": "public class GOOD_AttackAgainstHeader_safeComparison {\r\n    public boolean safeComparison(HttpServletRequest request) {\r\n        String token = request.getHeader(\"X-Auth-Token\");\r\n        String Key = \"b1946ac92492d2347c6235b4d2611184\";\r\n        return MessageDigest.isEqual(Key.getBytes(StandardCharsets.UTF_8), token.getBytes(StandardCharsets.UTF_8));\r\n",
                        "nextNode": "token"
                    },
                    {
                        "name": "token",
                        "type": "Dataflow from `getHeader(...)` to `token`\nDataflow from `\"X-Auth-Token\"` to `token`",
                        "context": "        String token = request.getHeader(\"X-Auth-Token\");\r\n        String Key = \"b1946ac92492d2347c6235b4d2611184\";\r\n        return MessageDigest.isEqual(Key.getBytes(StandardCharsets.UTF_8), token.getBytes(StandardCharsets.UTF_8));\r\n    }\r\n}\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "b1946ac92492d2347c6235b4d2611184",
                "isSensitive": "yes"
            },
            {
                "name": "X-Auth-Token",
                "isSensitive": "no"
            }
        ],
        "comments": [],
        "sinks": [
            {
                "name": "isEqual",
                "isSink": "no"
            },
            {
                "name": "getBytes",
                "isSink": "no"
            },
            {
                "name": "getHeader",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "BAD_AAS_CiphertextWithByteBufferEquals.java",
        "variables": [
            {
                "name": "cipher",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "Cipher.getInstance(\"AES/CBC/PKCS5Padding\")",
                        "type": "Cipher",
                        "context": "        try (InputStream is = socket.getInputStream()) {\r\n            byte[] plaintext = readBytes(is, 1024); // Assuming the data length to read\r\n            Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\r\n            cipher.init(Cipher.ENCRYPT_MODE, key);\r\n            ByteBuffer tag = ByteBuffer.allocate(1024);\r\n |         try (InputStream is = socket.getInputStream()) {\r\n            byte[] plaintext = readBytes(is, 1024); // Assuming the data length to read\r\n            Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\r\n            cipher.init(Cipher.ENCRYPT_MODE, key);\r\n            ByteBuffer tag = ByteBuffer.allocate(1024);\r\n",
                        "nextNode": "cipher"
                    },
                    {
                        "name": "cipher",
                        "type": "Dataflow from `getInstance(...)` to `cipher`\nDataflow from `\"AES/CBC/PKCS5Padding\"` to `cipher`",
                        "context": "            byte[] plaintext = readBytes(is, 1024); // Assuming the data length to read\r\n            Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\r\n            cipher.init(Cipher.ENCRYPT_MODE, key);\r\n            ByteBuffer tag = ByteBuffer.allocate(1024);\r\n            cipher.doFinal(ByteBuffer.wrap(plaintext), tag);\r\n |             byte[] plaintext = readBytes(is, 1024); // Assuming the data length to read\r\n            Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\r\n            cipher.init(Cipher.ENCRYPT_MODE, key);\r\n            ByteBuffer tag = ByteBuffer.allocate(1024);\r\n            cipher.doFinal(ByteBuffer.wrap(plaintext), tag);\r\n |             cipher.init(Cipher.ENCRYPT_MODE, key);\r\n            ByteBuffer tag = ByteBuffer.allocate(1024);\r\n            cipher.doFinal(ByteBuffer.wrap(plaintext), tag);\r\n            byte[] expected = readBytes(is, 32);\r\n            return ByteBuffer.wrap(expected).equals(tag);\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "numBytes",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "1024",
                        "type": "Number",
                        "context": "    public boolean unsafeCheckCiphertextWithByteBufferEquals(Socket socket, Key key) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            byte[] plaintext = readBytes(is, 1024); // Assuming the data length to read\r\n            Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\r\n            cipher.init(Cipher.ENCRYPT_MODE, key);\r\n |     public boolean unsafeCheckCiphertextWithByteBufferEquals(Socket socket, Key key) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            byte[] plaintext = readBytes(is, 1024); // Assuming the data length to read\r\n            Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\r\n            cipher.init(Cipher.ENCRYPT_MODE, key);\r\n |     public boolean unsafeCheckCiphertextWithByteBufferEquals(Socket socket, Key key) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            byte[] plaintext = readBytes(is, 1024); // Assuming the data length to read\r\n            Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\r\n            cipher.init(Cipher.ENCRYPT_MODE, key);\r\n |     public boolean unsafeCheckCiphertextWithByteBufferEquals(Socket socket, Key key) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            byte[] plaintext = readBytes(is, 1024); // Assuming the data length to read\r\n            Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\r\n            cipher.init(Cipher.ENCRYPT_MODE, key);\r\n",
                        "nextNode": "int numBytes"
                    },
                    {
                        "name": "int numBytes",
                        "type": "Number",
                        "context": "    }\r\n\r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n |     }\r\n\r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n |     }\r\n\r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n |     }\r\n\r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n",
                        "nextNode": "numBytes]"
                    },
                    {
                        "name": "numBytes]",
                        "type": "Dataflow from `1024` to `numBytes`\nDataflow from `32` to `numBytes`",
                        "context": "\r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n        int read;\r\n | \r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n        int read;\r\n | \r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n        int read;\r\n | \r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n        int read;\r\n",
                        "nextNode": "numBytes"
                    },
                    {
                        "name": "numBytes",
                        "type": "Dataflow from `1024` to `numBytes`\nDataflow from `32` to `numBytes`",
                        "context": "        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |             offset += read;\r\n        }\r\n        if (offset < numBytes) {\r\n            return Arrays.copyOf(bytes, offset);\r\n        }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "read",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "is",
                        "type": "InputStream",
                        "context": "    public boolean unsafeCheckCiphertextWithByteBufferEquals(Socket socket, Key key) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            byte[] plaintext = readBytes(is, 1024); // Assuming the data length to read\r\n            Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\r\n            cipher.init(Cipher.ENCRYPT_MODE, key);\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n",
                        "nextNode": "bytes"
                    },
                    {
                        "name": "InputStream is",
                        "type": "InputStream",
                        "context": "    }\r\n\r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n",
                        "nextNode": "is"
                    },
                    {
                        "name": "bytes",
                        "type": "byte[]",
                        "context": "        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n",
                        "nextNode": "is.read(bytes, offset, numBytes - offset)"
                    },
                    {
                        "name": "is.read(bytes, offset, numBytes - offset)",
                        "type": "Number",
                        "context": "        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n",
                        "nextNode": "read"
                    },
                    {
                        "name": "read",
                        "type": "Dataflow from `is` to `read`\nDataflow from `is` to `read`\nDataflow from `offset` to `read`\nDataflow from `is` to `read`\nDataflow from `bytes` to `read`\nDataflow from `offset` to `read`\nDataflow from `getInputStream(...)` to `read`\nDataflow from `0` to `read`\nDataflow from `read(...)` to `read`",
                        "context": "        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n        if (offset < numBytes) {\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "offset",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "0",
                        "type": "Number",
                        "context": "    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n |     private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n |     private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n |     private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n |     private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n |     private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n",
                        "nextNode": "offset"
                    },
                    {
                        "name": "offset",
                        "type": "Dataflow from `0` to `offset`",
                        "context": "        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n        if (offset < numBytes) {\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |             offset += read;\r\n        }\r\n        if (offset < numBytes) {\r\n            return Arrays.copyOf(bytes, offset);\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |             offset += read;\r\n        }\r\n        if (offset < numBytes) {\r\n            return Arrays.copyOf(bytes, offset);\r\n        }\r\n |         }\r\n        if (offset < numBytes) {\r\n            return Arrays.copyOf(bytes, offset);\r\n        }\r\n        return bytes;\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "bytes",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "is",
                        "type": "InputStream",
                        "context": "    public boolean unsafeCheckCiphertextWithByteBufferEquals(Socket socket, Key key) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            byte[] plaintext = readBytes(is, 1024); // Assuming the data length to read\r\n            Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\r\n            cipher.init(Cipher.ENCRYPT_MODE, key);\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |     public boolean unsafeCheckCiphertextWithByteBufferEquals(Socket socket, Key key) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            byte[] plaintext = readBytes(is, 1024); // Assuming the data length to read\r\n            Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\r\n            cipher.init(Cipher.ENCRYPT_MODE, key);\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |     public boolean unsafeCheckCiphertextWithByteBufferEquals(Socket socket, Key key) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            byte[] plaintext = readBytes(is, 1024); // Assuming the data length to read\r\n            Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\r\n            cipher.init(Cipher.ENCRYPT_MODE, key);\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n",
                        "nextNode": "bytes"
                    },
                    {
                        "name": "InputStream is",
                        "type": "InputStream",
                        "context": "    }\r\n\r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n |     }\r\n\r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n |     }\r\n\r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n",
                        "nextNode": "is"
                    },
                    {
                        "name": "bytes",
                        "type": "byte[]",
                        "context": "        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         }\r\n        if (offset < numBytes) {\r\n            return Arrays.copyOf(bytes, offset);\r\n        }\r\n        return bytes;\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |             return Arrays.copyOf(bytes, offset);\r\n        }\r\n        return bytes;\r\n    }\r\n}\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "expected",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "is",
                        "type": "InputStream",
                        "context": "    public boolean unsafeCheckCiphertextWithByteBufferEquals(Socket socket, Key key) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            byte[] plaintext = readBytes(is, 1024); // Assuming the data length to read\r\n            Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\r\n            cipher.init(Cipher.ENCRYPT_MODE, key);\r\n |             ByteBuffer tag = ByteBuffer.allocate(1024);\r\n            cipher.doFinal(ByteBuffer.wrap(plaintext), tag);\r\n            byte[] expected = readBytes(is, 32);\r\n            return ByteBuffer.wrap(expected).equals(tag);\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n",
                        "nextNode": "bytes"
                    },
                    {
                        "name": "InputStream is",
                        "type": "InputStream",
                        "context": "    }\r\n\r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n",
                        "nextNode": "is"
                    },
                    {
                        "name": "bytes",
                        "type": "byte[]",
                        "context": "        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |             return Arrays.copyOf(bytes, offset);\r\n        }\r\n        return bytes;\r\n    }\r\n}\r\n",
                        "nextNode": "readBytes(is, 32)"
                    },
                    {
                        "name": "readBytes(is, 32)",
                        "type": "byte[]",
                        "context": "            ByteBuffer tag = ByteBuffer.allocate(1024);\r\n            cipher.doFinal(ByteBuffer.wrap(plaintext), tag);\r\n            byte[] expected = readBytes(is, 32);\r\n            return ByteBuffer.wrap(expected).equals(tag);\r\n        }\r\n",
                        "nextNode": "expected"
                    },
                    {
                        "name": "expected",
                        "type": "Dataflow from `is` to `expected`\nDataflow from `is` to `expected`\nDataflow from `offset` to `expected`\nDataflow from `is` to `expected`\nDataflow from `bytes` to `expected`\nDataflow from `offset` to `expected`\nDataflow from `offset` to `expected`\nDataflow from `offset` to `expected`\nDataflow from `bytes` to `expected`\nDataflow from `offset` to `expected`\nDataflow from `bytes` to `expected`\nDataflow from `readBytes(...)` to `expected`\nDataflow from `getInputStream(...)` to `expected`\nDataflow from `32` to `expected`\nDataflow from `0` to `expected`\nDataflow from `copyOf(...)` to `expected`",
                        "context": "            cipher.doFinal(ByteBuffer.wrap(plaintext), tag);\r\n            byte[] expected = readBytes(is, 32);\r\n            return ByteBuffer.wrap(expected).equals(tag);\r\n        }\r\n    }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "is",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "socket.getInputStream()",
                        "type": "InputStream",
                        "context": "public class BAD_AAS_CiphertextWithByteBufferEquals {\r\n    public boolean unsafeCheckCiphertextWithByteBufferEquals(Socket socket, Key key) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            byte[] plaintext = readBytes(is, 1024); // Assuming the data length to read\r\n            Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\r\n | public class BAD_AAS_CiphertextWithByteBufferEquals {\r\n    public boolean unsafeCheckCiphertextWithByteBufferEquals(Socket socket, Key key) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            byte[] plaintext = readBytes(is, 1024); // Assuming the data length to read\r\n            Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\r\n | public class BAD_AAS_CiphertextWithByteBufferEquals {\r\n    public boolean unsafeCheckCiphertextWithByteBufferEquals(Socket socket, Key key) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            byte[] plaintext = readBytes(is, 1024); // Assuming the data length to read\r\n            Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\r\n",
                        "nextNode": "is"
                    },
                    {
                        "name": "InputStream is",
                        "type": "InputStream",
                        "context": "    }\r\n\r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n",
                        "nextNode": "is"
                    },
                    {
                        "name": "is",
                        "type": "Dataflow from `getInputStream(...)` to `is`",
                        "context": "    public boolean unsafeCheckCiphertextWithByteBufferEquals(Socket socket, Key key) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            byte[] plaintext = readBytes(is, 1024); // Assuming the data length to read\r\n            Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\r\n            cipher.init(Cipher.ENCRYPT_MODE, key);\r\n |     public boolean unsafeCheckCiphertextWithByteBufferEquals(Socket socket, Key key) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            byte[] plaintext = readBytes(is, 1024); // Assuming the data length to read\r\n            Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\r\n            cipher.init(Cipher.ENCRYPT_MODE, key);\r\n |             ByteBuffer tag = ByteBuffer.allocate(1024);\r\n            cipher.doFinal(ByteBuffer.wrap(plaintext), tag);\r\n            byte[] expected = readBytes(is, 32);\r\n            return ByteBuffer.wrap(expected).equals(tag);\r\n        }\r\n |     public boolean unsafeCheckCiphertextWithByteBufferEquals(Socket socket, Key key) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            byte[] plaintext = readBytes(is, 1024); // Assuming the data length to read\r\n            Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\r\n            cipher.init(Cipher.ENCRYPT_MODE, key);\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "plaintext",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "is",
                        "type": "InputStream",
                        "context": "    public boolean unsafeCheckCiphertextWithByteBufferEquals(Socket socket, Key key) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            byte[] plaintext = readBytes(is, 1024); // Assuming the data length to read\r\n            Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\r\n            cipher.init(Cipher.ENCRYPT_MODE, key);\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n",
                        "nextNode": "bytes"
                    },
                    {
                        "name": "InputStream is",
                        "type": "InputStream",
                        "context": "    }\r\n\r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n",
                        "nextNode": "is"
                    },
                    {
                        "name": "bytes",
                        "type": "byte[]",
                        "context": "        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |             return Arrays.copyOf(bytes, offset);\r\n        }\r\n        return bytes;\r\n    }\r\n}\r\n",
                        "nextNode": "readBytes(is, 1024)"
                    },
                    {
                        "name": "readBytes(is, 1024)",
                        "type": "byte[]",
                        "context": "    public boolean unsafeCheckCiphertextWithByteBufferEquals(Socket socket, Key key) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            byte[] plaintext = readBytes(is, 1024); // Assuming the data length to read\r\n            Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\r\n            cipher.init(Cipher.ENCRYPT_MODE, key);\r\n",
                        "nextNode": "plaintext"
                    },
                    {
                        "name": "plaintext",
                        "type": "Dataflow from `is` to `plaintext`\nDataflow from `offset` to `plaintext`\nDataflow from `is` to `plaintext`\nDataflow from `bytes` to `plaintext`\nDataflow from `offset` to `plaintext`\nDataflow from `offset` to `plaintext`\nDataflow from `offset` to `plaintext`\nDataflow from `bytes` to `plaintext`\nDataflow from `offset` to `plaintext`\nDataflow from `bytes` to `plaintext`\nDataflow from `readBytes(...)` to `plaintext`\nDataflow from `getInputStream(...)` to `plaintext`\nDataflow from `1024` to `plaintext`\nDataflow from `0` to `plaintext`\nDataflow from `copyOf(...)` to `plaintext`",
                        "context": "            cipher.init(Cipher.ENCRYPT_MODE, key);\r\n            ByteBuffer tag = ByteBuffer.allocate(1024);\r\n            cipher.doFinal(ByteBuffer.wrap(plaintext), tag);\r\n            byte[] expected = readBytes(is, 32);\r\n            return ByteBuffer.wrap(expected).equals(tag);\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "tag",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "ByteBuffer.allocate(1024)",
                        "type": "ByteBuffer",
                        "context": "            Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\r\n            cipher.init(Cipher.ENCRYPT_MODE, key);\r\n            ByteBuffer tag = ByteBuffer.allocate(1024);\r\n            cipher.doFinal(ByteBuffer.wrap(plaintext), tag);\r\n            byte[] expected = readBytes(is, 32);\r\n |             Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\r\n            cipher.init(Cipher.ENCRYPT_MODE, key);\r\n            ByteBuffer tag = ByteBuffer.allocate(1024);\r\n            cipher.doFinal(ByteBuffer.wrap(plaintext), tag);\r\n            byte[] expected = readBytes(is, 32);\r\n",
                        "nextNode": "tag"
                    },
                    {
                        "name": "tag",
                        "type": "Dataflow from `allocate(...)` to `tag`\nDataflow from `1024` to `tag`",
                        "context": "            cipher.init(Cipher.ENCRYPT_MODE, key);\r\n            ByteBuffer tag = ByteBuffer.allocate(1024);\r\n            cipher.doFinal(ByteBuffer.wrap(plaintext), tag);\r\n            byte[] expected = readBytes(is, 32);\r\n            return ByteBuffer.wrap(expected).equals(tag);\r\n |             cipher.init(Cipher.ENCRYPT_MODE, key);\r\n            ByteBuffer tag = ByteBuffer.allocate(1024);\r\n            cipher.doFinal(ByteBuffer.wrap(plaintext), tag);\r\n            byte[] expected = readBytes(is, 32);\r\n            return ByteBuffer.wrap(expected).equals(tag);\r\n |             cipher.doFinal(ByteBuffer.wrap(plaintext), tag);\r\n            byte[] expected = readBytes(is, 32);\r\n            return ByteBuffer.wrap(expected).equals(tag);\r\n        }\r\n    }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "socket",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "key",
                "isSensitive": "yes",
                "graph": []
            }
        ],
        "strings": [
            {
                "name": "AES/CBC/PKCS5Padding",
                "isSensitive": "yes"
            }
        ],
        "comments": [
            {
                "name": "Assuming the data length to read",
                "isSensitive": "no"
            }
        ],
        "sinks": [
            {
                "name": "init",
                "isSink": "no"
            },
            {
                "name": "read",
                "isSink": "no"
            },
            {
                "name": "allocate",
                "isSink": "no"
            },
            {
                "name": "equals",
                "isSink": "no"
            },
            {
                "name": "readBytes",
                "isSink": "no"
            },
            {
                "name": "getInstance",
                "isSink": "no"
            },
            {
                "name": "copyOf",
                "isSink": "no"
            },
            {
                "name": "getInputStream",
                "isSink": "no"
            },
            {
                "name": "wrap",
                "isSink": "no"
            },
            {
                "name": "doFinal",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "BAD_AAS_unsafeCheckCiphertext.java",
        "variables": [
            {
                "name": "cipher",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "Cipher.getInstance(\"AES/CBC/PKCS5Padding\")",
                        "type": "Cipher",
                        "context": "            byte[] plaintext = readBytes(is, 100);\r\n            byte[] hash = MessageDigest.getInstance(\"SHA-256\").digest(plaintext);\r\n            Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\r\n            cipher.init(Cipher.ENCRYPT_MODE, key);\r\n            byte[] tag = cipher.doFinal(hash);\r\n |             byte[] plaintext = readBytes(is, 100);\r\n            byte[] hash = MessageDigest.getInstance(\"SHA-256\").digest(plaintext);\r\n            Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\r\n            cipher.init(Cipher.ENCRYPT_MODE, key);\r\n            byte[] tag = cipher.doFinal(hash);\r\n",
                        "nextNode": "cipher"
                    },
                    {
                        "name": "cipher",
                        "type": "Cipher",
                        "context": "            byte[] hash = MessageDigest.getInstance(\"SHA-256\").digest(plaintext);\r\n            Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\r\n            cipher.init(Cipher.ENCRYPT_MODE, key);\r\n            byte[] tag = cipher.doFinal(hash);\r\n            byte[] expected = readBytes(is, tag.length); // Assume expected length is same as tag length\r\n |             Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\r\n            cipher.init(Cipher.ENCRYPT_MODE, key);\r\n            byte[] tag = cipher.doFinal(hash);\r\n            byte[] expected = readBytes(is, tag.length); // Assume expected length is same as tag length\r\n            return Objects.deepEquals(expected, tag);\r\n |             byte[] hash = MessageDigest.getInstance(\"SHA-256\").digest(plaintext);\r\n            Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\r\n            cipher.init(Cipher.ENCRYPT_MODE, key);\r\n            byte[] tag = cipher.doFinal(hash);\r\n            byte[] expected = readBytes(is, tag.length); // Assume expected length is same as tag length\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "numBytes",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "tag.length",
                        "type": "Number",
                        "context": "            cipher.init(Cipher.ENCRYPT_MODE, key);\r\n            byte[] tag = cipher.doFinal(hash);\r\n            byte[] expected = readBytes(is, tag.length); // Assume expected length is same as tag length\r\n            return Objects.deepEquals(expected, tag);\r\n        }\r\n |             cipher.init(Cipher.ENCRYPT_MODE, key);\r\n            byte[] tag = cipher.doFinal(hash);\r\n            byte[] expected = readBytes(is, tag.length); // Assume expected length is same as tag length\r\n            return Objects.deepEquals(expected, tag);\r\n        }\r\n |             cipher.init(Cipher.ENCRYPT_MODE, key);\r\n            byte[] tag = cipher.doFinal(hash);\r\n            byte[] expected = readBytes(is, tag.length); // Assume expected length is same as tag length\r\n            return Objects.deepEquals(expected, tag);\r\n        }\r\n |             cipher.init(Cipher.ENCRYPT_MODE, key);\r\n            byte[] tag = cipher.doFinal(hash);\r\n            byte[] expected = readBytes(is, tag.length); // Assume expected length is same as tag length\r\n            return Objects.deepEquals(expected, tag);\r\n        }\r\n",
                        "nextNode": "int numBytes"
                    },
                    {
                        "name": "int numBytes",
                        "type": "Number",
                        "context": "    }\r\n\r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n |     }\r\n\r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n |     }\r\n\r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n |     }\r\n\r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n",
                        "nextNode": "numBytes]"
                    },
                    {
                        "name": "numBytes]",
                        "type": "Dataflow from `tag.length` to `numBytes`\nDataflow from `100` to `numBytes`",
                        "context": "\r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n        int read;\r\n | \r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n        int read;\r\n | \r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n        int read;\r\n | \r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n        int read;\r\n",
                        "nextNode": "numBytes"
                    },
                    {
                        "name": "numBytes",
                        "type": "Dataflow from `tag.length` to `numBytes`\nDataflow from `100` to `numBytes`",
                        "context": "        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |             offset += read;\r\n        }\r\n        if (offset < numBytes) {\r\n            return Arrays.copyOf(bytes, offset);\r\n        }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "read",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "is",
                        "type": "InputStream",
                        "context": "    public boolean unsafeCheckCiphertext(Socket socket, Key key) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            byte[] plaintext = readBytes(is, 100);\r\n            byte[] hash = MessageDigest.getInstance(\"SHA-256\").digest(plaintext);\r\n            Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n",
                        "nextNode": "bytes"
                    },
                    {
                        "name": "InputStream is",
                        "type": "InputStream",
                        "context": "    }\r\n\r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n",
                        "nextNode": "is"
                    },
                    {
                        "name": "bytes",
                        "type": "byte[]",
                        "context": "        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n",
                        "nextNode": "is.read(bytes, offset, numBytes - offset)"
                    },
                    {
                        "name": "is.read(bytes, offset, numBytes - offset)",
                        "type": "Number",
                        "context": "        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n",
                        "nextNode": "read"
                    },
                    {
                        "name": "read",
                        "type": "Dataflow from `is` to `read`\nDataflow from `is` to `read`\nDataflow from `offset` to `read`\nDataflow from `is` to `read`\nDataflow from `bytes` to `read`\nDataflow from `offset` to `read`\nDataflow from `getInputStream(...)` to `read`\nDataflow from `0` to `read`\nDataflow from `read(...)` to `read`",
                        "context": "        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n        if (offset < numBytes) {\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "offset",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "0",
                        "type": "Number",
                        "context": "    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n |     private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n |     private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n |     private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n |     private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n |     private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n",
                        "nextNode": "offset"
                    },
                    {
                        "name": "offset",
                        "type": "Dataflow from `0` to `offset`",
                        "context": "        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n        if (offset < numBytes) {\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |             offset += read;\r\n        }\r\n        if (offset < numBytes) {\r\n            return Arrays.copyOf(bytes, offset);\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |             offset += read;\r\n        }\r\n        if (offset < numBytes) {\r\n            return Arrays.copyOf(bytes, offset);\r\n        }\r\n |         }\r\n        if (offset < numBytes) {\r\n            return Arrays.copyOf(bytes, offset);\r\n        }\r\n        return bytes;\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "bytes",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "is",
                        "type": "InputStream",
                        "context": "    public boolean unsafeCheckCiphertext(Socket socket, Key key) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            byte[] plaintext = readBytes(is, 100);\r\n            byte[] hash = MessageDigest.getInstance(\"SHA-256\").digest(plaintext);\r\n            Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |     public boolean unsafeCheckCiphertext(Socket socket, Key key) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            byte[] plaintext = readBytes(is, 100);\r\n            byte[] hash = MessageDigest.getInstance(\"SHA-256\").digest(plaintext);\r\n            Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |     public boolean unsafeCheckCiphertext(Socket socket, Key key) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            byte[] plaintext = readBytes(is, 100);\r\n            byte[] hash = MessageDigest.getInstance(\"SHA-256\").digest(plaintext);\r\n            Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n",
                        "nextNode": "bytes"
                    },
                    {
                        "name": "InputStream is",
                        "type": "InputStream",
                        "context": "    }\r\n\r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n |     }\r\n\r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n |     }\r\n\r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n",
                        "nextNode": "is"
                    },
                    {
                        "name": "bytes",
                        "type": "byte[]",
                        "context": "        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         }\r\n        if (offset < numBytes) {\r\n            return Arrays.copyOf(bytes, offset);\r\n        }\r\n        return bytes;\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |             return Arrays.copyOf(bytes, offset);\r\n        }\r\n        return bytes;\r\n    }\r\n}\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "expected",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "is",
                        "type": "InputStream",
                        "context": "    public boolean unsafeCheckCiphertext(Socket socket, Key key) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            byte[] plaintext = readBytes(is, 100);\r\n            byte[] hash = MessageDigest.getInstance(\"SHA-256\").digest(plaintext);\r\n            Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\r\n |             cipher.init(Cipher.ENCRYPT_MODE, key);\r\n            byte[] tag = cipher.doFinal(hash);\r\n            byte[] expected = readBytes(is, tag.length); // Assume expected length is same as tag length\r\n            return Objects.deepEquals(expected, tag);\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n",
                        "nextNode": "bytes"
                    },
                    {
                        "name": "InputStream is",
                        "type": "InputStream",
                        "context": "    }\r\n\r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n",
                        "nextNode": "is"
                    },
                    {
                        "name": "bytes",
                        "type": "byte[]",
                        "context": "        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |             return Arrays.copyOf(bytes, offset);\r\n        }\r\n        return bytes;\r\n    }\r\n}\r\n",
                        "nextNode": "readBytes(is, tag.length)"
                    },
                    {
                        "name": "readBytes(is, tag.length)",
                        "type": "byte[]",
                        "context": "            cipher.init(Cipher.ENCRYPT_MODE, key);\r\n            byte[] tag = cipher.doFinal(hash);\r\n            byte[] expected = readBytes(is, tag.length); // Assume expected length is same as tag length\r\n            return Objects.deepEquals(expected, tag);\r\n        }\r\n",
                        "nextNode": "expected"
                    },
                    {
                        "name": "expected",
                        "type": "Dataflow from `is` to `expected`\nDataflow from `is` to `expected`\nDataflow from `tag.length` to `expected`\nDataflow from `offset` to `expected`\nDataflow from `is` to `expected`\nDataflow from `bytes` to `expected`\nDataflow from `offset` to `expected`\nDataflow from `offset` to `expected`\nDataflow from `offset` to `expected`\nDataflow from `bytes` to `expected`\nDataflow from `offset` to `expected`\nDataflow from `bytes` to `expected`\nDataflow from `readBytes(...)` to `expected`\nDataflow from `getInputStream(...)` to `expected`\nDataflow from `0` to `expected`\nDataflow from `copyOf(...)` to `expected`",
                        "context": "            byte[] tag = cipher.doFinal(hash);\r\n            byte[] expected = readBytes(is, tag.length); // Assume expected length is same as tag length\r\n            return Objects.deepEquals(expected, tag);\r\n        }\r\n    }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "is",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "socket.getInputStream()",
                        "type": "InputStream",
                        "context": "public class BAD_AAS_unsafeCheckCiphertext {\r\n    public boolean unsafeCheckCiphertext(Socket socket, Key key) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            byte[] plaintext = readBytes(is, 100);\r\n            byte[] hash = MessageDigest.getInstance(\"SHA-256\").digest(plaintext);\r\n | public class BAD_AAS_unsafeCheckCiphertext {\r\n    public boolean unsafeCheckCiphertext(Socket socket, Key key) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            byte[] plaintext = readBytes(is, 100);\r\n            byte[] hash = MessageDigest.getInstance(\"SHA-256\").digest(plaintext);\r\n | public class BAD_AAS_unsafeCheckCiphertext {\r\n    public boolean unsafeCheckCiphertext(Socket socket, Key key) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            byte[] plaintext = readBytes(is, 100);\r\n            byte[] hash = MessageDigest.getInstance(\"SHA-256\").digest(plaintext);\r\n",
                        "nextNode": "is"
                    },
                    {
                        "name": "InputStream is",
                        "type": "InputStream",
                        "context": "    }\r\n\r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n",
                        "nextNode": "is"
                    },
                    {
                        "name": "is",
                        "type": "Dataflow from `getInputStream(...)` to `is`",
                        "context": "    public boolean unsafeCheckCiphertext(Socket socket, Key key) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            byte[] plaintext = readBytes(is, 100);\r\n            byte[] hash = MessageDigest.getInstance(\"SHA-256\").digest(plaintext);\r\n            Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\r\n |     public boolean unsafeCheckCiphertext(Socket socket, Key key) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            byte[] plaintext = readBytes(is, 100);\r\n            byte[] hash = MessageDigest.getInstance(\"SHA-256\").digest(plaintext);\r\n            Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\r\n |             cipher.init(Cipher.ENCRYPT_MODE, key);\r\n            byte[] tag = cipher.doFinal(hash);\r\n            byte[] expected = readBytes(is, tag.length); // Assume expected length is same as tag length\r\n            return Objects.deepEquals(expected, tag);\r\n        }\r\n |     public boolean unsafeCheckCiphertext(Socket socket, Key key) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            byte[] plaintext = readBytes(is, 100);\r\n            byte[] hash = MessageDigest.getInstance(\"SHA-256\").digest(plaintext);\r\n            Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "plaintext",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "is",
                        "type": "InputStream",
                        "context": "    public boolean unsafeCheckCiphertext(Socket socket, Key key) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            byte[] plaintext = readBytes(is, 100);\r\n            byte[] hash = MessageDigest.getInstance(\"SHA-256\").digest(plaintext);\r\n            Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n",
                        "nextNode": "bytes"
                    },
                    {
                        "name": "InputStream is",
                        "type": "InputStream",
                        "context": "    }\r\n\r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n",
                        "nextNode": "is"
                    },
                    {
                        "name": "bytes",
                        "type": "byte[]",
                        "context": "        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |             return Arrays.copyOf(bytes, offset);\r\n        }\r\n        return bytes;\r\n    }\r\n}\r\n",
                        "nextNode": "readBytes(is, 100)"
                    },
                    {
                        "name": "readBytes(is, 100)",
                        "type": "byte[]",
                        "context": "    public boolean unsafeCheckCiphertext(Socket socket, Key key) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            byte[] plaintext = readBytes(is, 100);\r\n            byte[] hash = MessageDigest.getInstance(\"SHA-256\").digest(plaintext);\r\n            Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\r\n",
                        "nextNode": "plaintext"
                    },
                    {
                        "name": "plaintext",
                        "type": "Dataflow from `is` to `plaintext`\nDataflow from `offset` to `plaintext`\nDataflow from `is` to `plaintext`\nDataflow from `bytes` to `plaintext`\nDataflow from `offset` to `plaintext`\nDataflow from `offset` to `plaintext`\nDataflow from `offset` to `plaintext`\nDataflow from `bytes` to `plaintext`\nDataflow from `offset` to `plaintext`\nDataflow from `bytes` to `plaintext`\nDataflow from `readBytes(...)` to `plaintext`\nDataflow from `getInputStream(...)` to `plaintext`\nDataflow from `100` to `plaintext`\nDataflow from `0` to `plaintext`\nDataflow from `copyOf(...)` to `plaintext`",
                        "context": "        try (InputStream is = socket.getInputStream()) {\r\n            byte[] plaintext = readBytes(is, 100);\r\n            byte[] hash = MessageDigest.getInstance(\"SHA-256\").digest(plaintext);\r\n            Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\r\n            cipher.init(Cipher.ENCRYPT_MODE, key);\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "tag",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "is",
                        "type": "InputStream",
                        "context": "    public boolean unsafeCheckCiphertext(Socket socket, Key key) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            byte[] plaintext = readBytes(is, 100);\r\n            byte[] hash = MessageDigest.getInstance(\"SHA-256\").digest(plaintext);\r\n            Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |     public boolean unsafeCheckCiphertext(Socket socket, Key key) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            byte[] plaintext = readBytes(is, 100);\r\n            byte[] hash = MessageDigest.getInstance(\"SHA-256\").digest(plaintext);\r\n            Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n",
                        "nextNode": "bytes"
                    },
                    {
                        "name": "InputStream is",
                        "type": "InputStream",
                        "context": "    }\r\n\r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n |     }\r\n\r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n",
                        "nextNode": "is"
                    },
                    {
                        "name": "bytes",
                        "type": "byte[]",
                        "context": "        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |             return Arrays.copyOf(bytes, offset);\r\n        }\r\n        return bytes;\r\n    }\r\n}\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |             return Arrays.copyOf(bytes, offset);\r\n        }\r\n        return bytes;\r\n    }\r\n}\r\n",
                        "nextNode": "readBytes(is, 100)"
                    },
                    {
                        "name": "readBytes(is, 100)",
                        "type": "byte[]",
                        "context": "    public boolean unsafeCheckCiphertext(Socket socket, Key key) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            byte[] plaintext = readBytes(is, 100);\r\n            byte[] hash = MessageDigest.getInstance(\"SHA-256\").digest(plaintext);\r\n            Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\r\n |     public boolean unsafeCheckCiphertext(Socket socket, Key key) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            byte[] plaintext = readBytes(is, 100);\r\n            byte[] hash = MessageDigest.getInstance(\"SHA-256\").digest(plaintext);\r\n            Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\r\n",
                        "nextNode": "plaintext"
                    },
                    {
                        "name": "plaintext",
                        "type": "byte[]",
                        "context": "        try (InputStream is = socket.getInputStream()) {\r\n            byte[] plaintext = readBytes(is, 100);\r\n            byte[] hash = MessageDigest.getInstance(\"SHA-256\").digest(plaintext);\r\n            Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\r\n            cipher.init(Cipher.ENCRYPT_MODE, key);\r\n |         try (InputStream is = socket.getInputStream()) {\r\n            byte[] plaintext = readBytes(is, 100);\r\n            byte[] hash = MessageDigest.getInstance(\"SHA-256\").digest(plaintext);\r\n            Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\r\n            cipher.init(Cipher.ENCRYPT_MODE, key);\r\n",
                        "nextNode": "MessageDigest.getInstance(\"SHA-256\").digest(plaintext)"
                    },
                    {
                        "name": "MessageDigest.getInstance(\"SHA-256\").digest(plaintext)",
                        "type": "byte[]",
                        "context": "        try (InputStream is = socket.getInputStream()) {\r\n            byte[] plaintext = readBytes(is, 100);\r\n            byte[] hash = MessageDigest.getInstance(\"SHA-256\").digest(plaintext);\r\n            Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\r\n            cipher.init(Cipher.ENCRYPT_MODE, key);\r\n |         try (InputStream is = socket.getInputStream()) {\r\n            byte[] plaintext = readBytes(is, 100);\r\n            byte[] hash = MessageDigest.getInstance(\"SHA-256\").digest(plaintext);\r\n            Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\r\n            cipher.init(Cipher.ENCRYPT_MODE, key);\r\n",
                        "nextNode": "hash"
                    },
                    {
                        "name": "hash",
                        "type": "byte[]",
                        "context": "            Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\r\n            cipher.init(Cipher.ENCRYPT_MODE, key);\r\n            byte[] tag = cipher.doFinal(hash);\r\n            byte[] expected = readBytes(is, tag.length); // Assume expected length is same as tag length\r\n            return Objects.deepEquals(expected, tag);\r\n |             Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\r\n            cipher.init(Cipher.ENCRYPT_MODE, key);\r\n            byte[] tag = cipher.doFinal(hash);\r\n            byte[] expected = readBytes(is, tag.length); // Assume expected length is same as tag length\r\n            return Objects.deepEquals(expected, tag);\r\n",
                        "nextNode": "cipher.doFinal(hash)"
                    },
                    {
                        "name": "cipher.doFinal(hash)",
                        "type": "byte[]",
                        "context": "            Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\r\n            cipher.init(Cipher.ENCRYPT_MODE, key);\r\n            byte[] tag = cipher.doFinal(hash);\r\n            byte[] expected = readBytes(is, tag.length); // Assume expected length is same as tag length\r\n            return Objects.deepEquals(expected, tag);\r\n |             Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\r\n            cipher.init(Cipher.ENCRYPT_MODE, key);\r\n            byte[] tag = cipher.doFinal(hash);\r\n            byte[] expected = readBytes(is, tag.length); // Assume expected length is same as tag length\r\n            return Objects.deepEquals(expected, tag);\r\n",
                        "nextNode": "tag"
                    },
                    {
                        "name": "tag",
                        "type": "Dataflow from `is` to `tag`\nDataflow from `plaintext` to `tag`\nDataflow from `hash` to `tag`\nDataflow from `offset` to `tag`\nDataflow from `is` to `tag`\nDataflow from `bytes` to `tag`\nDataflow from `offset` to `tag`\nDataflow from `offset` to `tag`\nDataflow from `offset` to `tag`\nDataflow from `bytes` to `tag`\nDataflow from `offset` to `tag`\nDataflow from `bytes` to `tag`\nDataflow from `readBytes(...)` to `tag`\nDataflow from `getInputStream(...)` to `tag`\nDataflow from `100` to `tag`\nDataflow from `digest(...)` to `tag`\nDataflow from `doFinal(...)` to `tag`\nDataflow from `0` to `tag`\nDataflow from `copyOf(...)` to `tag`",
                        "context": "            cipher.init(Cipher.ENCRYPT_MODE, key);\r\n            byte[] tag = cipher.doFinal(hash);\r\n            byte[] expected = readBytes(is, tag.length); // Assume expected length is same as tag length\r\n            return Objects.deepEquals(expected, tag);\r\n        }\r\n |             cipher.init(Cipher.ENCRYPT_MODE, key);\r\n            byte[] tag = cipher.doFinal(hash);\r\n            byte[] expected = readBytes(is, tag.length); // Assume expected length is same as tag length\r\n            return Objects.deepEquals(expected, tag);\r\n        }\r\n |             byte[] tag = cipher.doFinal(hash);\r\n            byte[] expected = readBytes(is, tag.length); // Assume expected length is same as tag length\r\n            return Objects.deepEquals(expected, tag);\r\n        }\r\n    }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "socket",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "hash",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "is",
                        "type": "InputStream",
                        "context": "    public boolean unsafeCheckCiphertext(Socket socket, Key key) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            byte[] plaintext = readBytes(is, 100);\r\n            byte[] hash = MessageDigest.getInstance(\"SHA-256\").digest(plaintext);\r\n            Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n",
                        "nextNode": "bytes"
                    },
                    {
                        "name": "InputStream is",
                        "type": "InputStream",
                        "context": "    }\r\n\r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n",
                        "nextNode": "is"
                    },
                    {
                        "name": "bytes",
                        "type": "byte[]",
                        "context": "        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |             return Arrays.copyOf(bytes, offset);\r\n        }\r\n        return bytes;\r\n    }\r\n}\r\n",
                        "nextNode": "readBytes(is, 100)"
                    },
                    {
                        "name": "readBytes(is, 100)",
                        "type": "byte[]",
                        "context": "    public boolean unsafeCheckCiphertext(Socket socket, Key key) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            byte[] plaintext = readBytes(is, 100);\r\n            byte[] hash = MessageDigest.getInstance(\"SHA-256\").digest(plaintext);\r\n            Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\r\n",
                        "nextNode": "plaintext"
                    },
                    {
                        "name": "plaintext",
                        "type": "byte[]",
                        "context": "        try (InputStream is = socket.getInputStream()) {\r\n            byte[] plaintext = readBytes(is, 100);\r\n            byte[] hash = MessageDigest.getInstance(\"SHA-256\").digest(plaintext);\r\n            Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\r\n            cipher.init(Cipher.ENCRYPT_MODE, key);\r\n",
                        "nextNode": "MessageDigest.getInstance(\"SHA-256\").digest(plaintext)"
                    },
                    {
                        "name": "MessageDigest.getInstance(\"SHA-256\").digest(plaintext)",
                        "type": "byte[]",
                        "context": "        try (InputStream is = socket.getInputStream()) {\r\n            byte[] plaintext = readBytes(is, 100);\r\n            byte[] hash = MessageDigest.getInstance(\"SHA-256\").digest(plaintext);\r\n            Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\r\n            cipher.init(Cipher.ENCRYPT_MODE, key);\r\n",
                        "nextNode": "hash"
                    },
                    {
                        "name": "hash",
                        "type": "Dataflow from `is` to `hash`\nDataflow from `plaintext` to `hash`\nDataflow from `offset` to `hash`\nDataflow from `is` to `hash`\nDataflow from `bytes` to `hash`\nDataflow from `offset` to `hash`\nDataflow from `offset` to `hash`\nDataflow from `offset` to `hash`\nDataflow from `bytes` to `hash`\nDataflow from `offset` to `hash`\nDataflow from `bytes` to `hash`\nDataflow from `readBytes(...)` to `hash`\nDataflow from `getInputStream(...)` to `hash`\nDataflow from `100` to `hash`\nDataflow from `digest(...)` to `hash`\nDataflow from `0` to `hash`\nDataflow from `copyOf(...)` to `hash`",
                        "context": "            Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\r\n            cipher.init(Cipher.ENCRYPT_MODE, key);\r\n            byte[] tag = cipher.doFinal(hash);\r\n            byte[] expected = readBytes(is, tag.length); // Assume expected length is same as tag length\r\n            return Objects.deepEquals(expected, tag);\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "key",
                "isSensitive": "yes",
                "graph": []
            }
        ],
        "strings": [
            {
                "name": "SHA-256",
                "isSensitive": "yes"
            },
            {
                "name": "AES/CBC/PKCS5Padding",
                "isSensitive": "yes"
            }
        ],
        "comments": [
            {
                "name": "Assume expected length is same as tag length",
                "isSensitive": "no"
            }
        ],
        "sinks": [
            {
                "name": "init",
                "isSink": "no"
            },
            {
                "name": "read",
                "isSink": "no"
            },
            {
                "name": "deepEquals",
                "isSink": "no"
            },
            {
                "name": "digest",
                "isSink": "no"
            },
            {
                "name": "readBytes",
                "isSink": "no"
            },
            {
                "name": "getInstance",
                "isSink": "no"
            },
            {
                "name": "copyOf",
                "isSink": "no"
            },
            {
                "name": "getInputStream",
                "isSink": "no"
            },
            {
                "name": "doFinal",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "BAD_AAS_unsafeCheckCiphertextWithByteBuffer.java",
        "variables": [
            {
                "name": "cipher",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "Cipher.getInstance(\"AES/CBC/PKCS5Padding\")",
                        "type": "Cipher",
                        "context": "            md.update(plaintext);\r\n           \r\n            Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\r\n            cipher.init(Cipher.ENCRYPT_MODE, key);\r\n            ByteBuffer tag = ByteBuffer.allocate(1024);\r\n |             md.update(plaintext);\r\n           \r\n            Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\r\n            cipher.init(Cipher.ENCRYPT_MODE, key);\r\n            ByteBuffer tag = ByteBuffer.allocate(1024);\r\n",
                        "nextNode": "cipher"
                    },
                    {
                        "name": "cipher",
                        "type": "Dataflow from `getInstance(...)` to `cipher`\nDataflow from `\"AES/CBC/PKCS5Padding\"` to `cipher`",
                        "context": "           \r\n            Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\r\n            cipher.init(Cipher.ENCRYPT_MODE, key);\r\n            ByteBuffer tag = ByteBuffer.allocate(1024);\r\n            cipher.doFinal(ByteBuffer.wrap(plaintext), tag);\r\n |            \r\n            Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\r\n            cipher.init(Cipher.ENCRYPT_MODE, key);\r\n            ByteBuffer tag = ByteBuffer.allocate(1024);\r\n            cipher.doFinal(ByteBuffer.wrap(plaintext), tag);\r\n |             cipher.init(Cipher.ENCRYPT_MODE, key);\r\n            ByteBuffer tag = ByteBuffer.allocate(1024);\r\n            cipher.doFinal(ByteBuffer.wrap(plaintext), tag);\r\n            byte[] expected = readBytes(is, 1024); // Adjust the size as needed\r\n            return Arrays.equals(expected, tag.array());\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "numBytes",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "300",
                        "type": "Number",
                        "context": "    public boolean unsafeCheckCiphertextWithByteBuffer(Socket socket, Key key) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            byte[] plaintext = readBytes(is, 300); // Adjust the size as needed\r\n            MessageDigest md = MessageDigest.getInstance(\"SHA-512\");\r\n            md.update(plaintext);\r\n |     public boolean unsafeCheckCiphertextWithByteBuffer(Socket socket, Key key) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            byte[] plaintext = readBytes(is, 300); // Adjust the size as needed\r\n            MessageDigest md = MessageDigest.getInstance(\"SHA-512\");\r\n            md.update(plaintext);\r\n |     public boolean unsafeCheckCiphertextWithByteBuffer(Socket socket, Key key) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            byte[] plaintext = readBytes(is, 300); // Adjust the size as needed\r\n            MessageDigest md = MessageDigest.getInstance(\"SHA-512\");\r\n            md.update(plaintext);\r\n |     public boolean unsafeCheckCiphertextWithByteBuffer(Socket socket, Key key) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            byte[] plaintext = readBytes(is, 300); // Adjust the size as needed\r\n            MessageDigest md = MessageDigest.getInstance(\"SHA-512\");\r\n            md.update(plaintext);\r\n",
                        "nextNode": "int numBytes"
                    },
                    {
                        "name": "int numBytes",
                        "type": "Number",
                        "context": "    }\r\n\r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n |     }\r\n\r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n |     }\r\n\r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n |     }\r\n\r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n",
                        "nextNode": "numBytes]"
                    },
                    {
                        "name": "numBytes]",
                        "type": "Dataflow from `300` to `numBytes`\nDataflow from `1024` to `numBytes`",
                        "context": "\r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n        int read;\r\n | \r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n        int read;\r\n | \r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n        int read;\r\n | \r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n        int read;\r\n",
                        "nextNode": "numBytes"
                    },
                    {
                        "name": "numBytes",
                        "type": "Dataflow from `300` to `numBytes`\nDataflow from `1024` to `numBytes`",
                        "context": "        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |             offset += read;\r\n        }\r\n        if (offset < numBytes) {\r\n            return Arrays.copyOf(bytes, offset);\r\n        }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "read",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "is",
                        "type": "InputStream",
                        "context": "    public boolean unsafeCheckCiphertextWithByteBuffer(Socket socket, Key key) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            byte[] plaintext = readBytes(is, 300); // Adjust the size as needed\r\n            MessageDigest md = MessageDigest.getInstance(\"SHA-512\");\r\n            md.update(plaintext);\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n",
                        "nextNode": "bytes"
                    },
                    {
                        "name": "InputStream is",
                        "type": "InputStream",
                        "context": "    }\r\n\r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n",
                        "nextNode": "is"
                    },
                    {
                        "name": "bytes",
                        "type": "byte[]",
                        "context": "        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n",
                        "nextNode": "is.read(bytes, offset, numBytes - offset)"
                    },
                    {
                        "name": "is.read(bytes, offset, numBytes - offset)",
                        "type": "Number",
                        "context": "        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n",
                        "nextNode": "read"
                    },
                    {
                        "name": "read",
                        "type": "Dataflow from `is` to `read`\nDataflow from `is` to `read`\nDataflow from `offset` to `read`\nDataflow from `is` to `read`\nDataflow from `bytes` to `read`\nDataflow from `offset` to `read`\nDataflow from `getInputStream(...)` to `read`\nDataflow from `0` to `read`\nDataflow from `read(...)` to `read`",
                        "context": "        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n        if (offset < numBytes) {\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "offset",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "0",
                        "type": "Number",
                        "context": "    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n |     private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n |     private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n |     private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n |     private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n |     private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n",
                        "nextNode": "offset"
                    },
                    {
                        "name": "offset",
                        "type": "Dataflow from `0` to `offset`",
                        "context": "        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n        if (offset < numBytes) {\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |             offset += read;\r\n        }\r\n        if (offset < numBytes) {\r\n            return Arrays.copyOf(bytes, offset);\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |             offset += read;\r\n        }\r\n        if (offset < numBytes) {\r\n            return Arrays.copyOf(bytes, offset);\r\n        }\r\n |         }\r\n        if (offset < numBytes) {\r\n            return Arrays.copyOf(bytes, offset);\r\n        }\r\n        return bytes;\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "bytes",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "is",
                        "type": "InputStream",
                        "context": "    public boolean unsafeCheckCiphertextWithByteBuffer(Socket socket, Key key) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            byte[] plaintext = readBytes(is, 300); // Adjust the size as needed\r\n            MessageDigest md = MessageDigest.getInstance(\"SHA-512\");\r\n            md.update(plaintext);\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |     public boolean unsafeCheckCiphertextWithByteBuffer(Socket socket, Key key) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            byte[] plaintext = readBytes(is, 300); // Adjust the size as needed\r\n            MessageDigest md = MessageDigest.getInstance(\"SHA-512\");\r\n            md.update(plaintext);\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |     public boolean unsafeCheckCiphertextWithByteBuffer(Socket socket, Key key) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            byte[] plaintext = readBytes(is, 300); // Adjust the size as needed\r\n            MessageDigest md = MessageDigest.getInstance(\"SHA-512\");\r\n            md.update(plaintext);\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n",
                        "nextNode": "bytes"
                    },
                    {
                        "name": "InputStream is",
                        "type": "InputStream",
                        "context": "    }\r\n\r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n |     }\r\n\r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n |     }\r\n\r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n",
                        "nextNode": "is"
                    },
                    {
                        "name": "bytes",
                        "type": "byte[]",
                        "context": "        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         }\r\n        if (offset < numBytes) {\r\n            return Arrays.copyOf(bytes, offset);\r\n        }\r\n        return bytes;\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |             return Arrays.copyOf(bytes, offset);\r\n        }\r\n        return bytes;\r\n    }\r\n}\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "md",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "MessageDigest.getInstance(\"SHA-512\")",
                        "type": "MessageDigest",
                        "context": "        try (InputStream is = socket.getInputStream()) {\r\n            byte[] plaintext = readBytes(is, 300); // Adjust the size as needed\r\n            MessageDigest md = MessageDigest.getInstance(\"SHA-512\");\r\n            md.update(plaintext);\r\n           \r\n",
                        "nextNode": "md"
                    },
                    {
                        "name": "md",
                        "type": "Dataflow from `getInstance(...)` to `md`\nDataflow from `\"SHA-512\"` to `md`",
                        "context": "            byte[] plaintext = readBytes(is, 300); // Adjust the size as needed\r\n            MessageDigest md = MessageDigest.getInstance(\"SHA-512\");\r\n            md.update(plaintext);\r\n           \r\n            Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "expected",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "is",
                        "type": "InputStream",
                        "context": "    public boolean unsafeCheckCiphertextWithByteBuffer(Socket socket, Key key) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            byte[] plaintext = readBytes(is, 300); // Adjust the size as needed\r\n            MessageDigest md = MessageDigest.getInstance(\"SHA-512\");\r\n            md.update(plaintext);\r\n |             ByteBuffer tag = ByteBuffer.allocate(1024);\r\n            cipher.doFinal(ByteBuffer.wrap(plaintext), tag);\r\n            byte[] expected = readBytes(is, 1024); // Adjust the size as needed\r\n            return Arrays.equals(expected, tag.array());\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n",
                        "nextNode": "bytes"
                    },
                    {
                        "name": "InputStream is",
                        "type": "InputStream",
                        "context": "    }\r\n\r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n",
                        "nextNode": "is"
                    },
                    {
                        "name": "bytes",
                        "type": "byte[]",
                        "context": "        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |             return Arrays.copyOf(bytes, offset);\r\n        }\r\n        return bytes;\r\n    }\r\n}\r\n",
                        "nextNode": "readBytes(is, 1024)"
                    },
                    {
                        "name": "readBytes(is, 1024)",
                        "type": "byte[]",
                        "context": "            ByteBuffer tag = ByteBuffer.allocate(1024);\r\n            cipher.doFinal(ByteBuffer.wrap(plaintext), tag);\r\n            byte[] expected = readBytes(is, 1024); // Adjust the size as needed\r\n            return Arrays.equals(expected, tag.array());\r\n        }\r\n",
                        "nextNode": "expected"
                    },
                    {
                        "name": "expected",
                        "type": "Dataflow from `is` to `expected`\nDataflow from `is` to `expected`\nDataflow from `offset` to `expected`\nDataflow from `is` to `expected`\nDataflow from `bytes` to `expected`\nDataflow from `offset` to `expected`\nDataflow from `offset` to `expected`\nDataflow from `offset` to `expected`\nDataflow from `bytes` to `expected`\nDataflow from `offset` to `expected`\nDataflow from `bytes` to `expected`\nDataflow from `readBytes(...)` to `expected`\nDataflow from `getInputStream(...)` to `expected`\nDataflow from `1024` to `expected`\nDataflow from `0` to `expected`\nDataflow from `copyOf(...)` to `expected`",
                        "context": "            cipher.doFinal(ByteBuffer.wrap(plaintext), tag);\r\n            byte[] expected = readBytes(is, 1024); // Adjust the size as needed\r\n            return Arrays.equals(expected, tag.array());\r\n        }\r\n    }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "is",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "socket.getInputStream()",
                        "type": "InputStream",
                        "context": "public class BAD_AAS_unsafeCheckCiphertextWithByteBuffer {\r\n    public boolean unsafeCheckCiphertextWithByteBuffer(Socket socket, Key key) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            byte[] plaintext = readBytes(is, 300); // Adjust the size as needed\r\n            MessageDigest md = MessageDigest.getInstance(\"SHA-512\");\r\n | public class BAD_AAS_unsafeCheckCiphertextWithByteBuffer {\r\n    public boolean unsafeCheckCiphertextWithByteBuffer(Socket socket, Key key) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            byte[] plaintext = readBytes(is, 300); // Adjust the size as needed\r\n            MessageDigest md = MessageDigest.getInstance(\"SHA-512\");\r\n | public class BAD_AAS_unsafeCheckCiphertextWithByteBuffer {\r\n    public boolean unsafeCheckCiphertextWithByteBuffer(Socket socket, Key key) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            byte[] plaintext = readBytes(is, 300); // Adjust the size as needed\r\n            MessageDigest md = MessageDigest.getInstance(\"SHA-512\");\r\n",
                        "nextNode": "is"
                    },
                    {
                        "name": "InputStream is",
                        "type": "InputStream",
                        "context": "    }\r\n\r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n",
                        "nextNode": "is"
                    },
                    {
                        "name": "is",
                        "type": "Dataflow from `getInputStream(...)` to `is`",
                        "context": "    public boolean unsafeCheckCiphertextWithByteBuffer(Socket socket, Key key) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            byte[] plaintext = readBytes(is, 300); // Adjust the size as needed\r\n            MessageDigest md = MessageDigest.getInstance(\"SHA-512\");\r\n            md.update(plaintext);\r\n |     public boolean unsafeCheckCiphertextWithByteBuffer(Socket socket, Key key) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            byte[] plaintext = readBytes(is, 300); // Adjust the size as needed\r\n            MessageDigest md = MessageDigest.getInstance(\"SHA-512\");\r\n            md.update(plaintext);\r\n |             ByteBuffer tag = ByteBuffer.allocate(1024);\r\n            cipher.doFinal(ByteBuffer.wrap(plaintext), tag);\r\n            byte[] expected = readBytes(is, 1024); // Adjust the size as needed\r\n            return Arrays.equals(expected, tag.array());\r\n        }\r\n |     public boolean unsafeCheckCiphertextWithByteBuffer(Socket socket, Key key) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            byte[] plaintext = readBytes(is, 300); // Adjust the size as needed\r\n            MessageDigest md = MessageDigest.getInstance(\"SHA-512\");\r\n            md.update(plaintext);\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "plaintext",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "is",
                        "type": "InputStream",
                        "context": "    public boolean unsafeCheckCiphertextWithByteBuffer(Socket socket, Key key) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            byte[] plaintext = readBytes(is, 300); // Adjust the size as needed\r\n            MessageDigest md = MessageDigest.getInstance(\"SHA-512\");\r\n            md.update(plaintext);\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |     public boolean unsafeCheckCiphertextWithByteBuffer(Socket socket, Key key) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            byte[] plaintext = readBytes(is, 300); // Adjust the size as needed\r\n            MessageDigest md = MessageDigest.getInstance(\"SHA-512\");\r\n            md.update(plaintext);\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n",
                        "nextNode": "bytes"
                    },
                    {
                        "name": "InputStream is",
                        "type": "InputStream",
                        "context": "    }\r\n\r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n |     }\r\n\r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n",
                        "nextNode": "is"
                    },
                    {
                        "name": "bytes",
                        "type": "byte[]",
                        "context": "        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |             return Arrays.copyOf(bytes, offset);\r\n        }\r\n        return bytes;\r\n    }\r\n}\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |             return Arrays.copyOf(bytes, offset);\r\n        }\r\n        return bytes;\r\n    }\r\n}\r\n",
                        "nextNode": "readBytes(is, 300)"
                    },
                    {
                        "name": "readBytes(is, 300)",
                        "type": "byte[]",
                        "context": "    public boolean unsafeCheckCiphertextWithByteBuffer(Socket socket, Key key) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            byte[] plaintext = readBytes(is, 300); // Adjust the size as needed\r\n            MessageDigest md = MessageDigest.getInstance(\"SHA-512\");\r\n            md.update(plaintext);\r\n |     public boolean unsafeCheckCiphertextWithByteBuffer(Socket socket, Key key) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            byte[] plaintext = readBytes(is, 300); // Adjust the size as needed\r\n            MessageDigest md = MessageDigest.getInstance(\"SHA-512\");\r\n            md.update(plaintext);\r\n",
                        "nextNode": "plaintext"
                    },
                    {
                        "name": "plaintext",
                        "type": "Dataflow from `is` to `plaintext`\nDataflow from `offset` to `plaintext`\nDataflow from `is` to `plaintext`\nDataflow from `bytes` to `plaintext`\nDataflow from `offset` to `plaintext`\nDataflow from `offset` to `plaintext`\nDataflow from `offset` to `plaintext`\nDataflow from `bytes` to `plaintext`\nDataflow from `offset` to `plaintext`\nDataflow from `bytes` to `plaintext`\nDataflow from `readBytes(...)` to `plaintext`\nDataflow from `getInputStream(...)` to `plaintext`\nDataflow from `300` to `plaintext`\nDataflow from `0` to `plaintext`\nDataflow from `copyOf(...)` to `plaintext`",
                        "context": "            byte[] plaintext = readBytes(is, 300); // Adjust the size as needed\r\n            MessageDigest md = MessageDigest.getInstance(\"SHA-512\");\r\n            md.update(plaintext);\r\n           \r\n            Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\r\n |             byte[] plaintext = readBytes(is, 300); // Adjust the size as needed\r\n            MessageDigest md = MessageDigest.getInstance(\"SHA-512\");\r\n            md.update(plaintext);\r\n           \r\n            Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\r\n |             cipher.init(Cipher.ENCRYPT_MODE, key);\r\n            ByteBuffer tag = ByteBuffer.allocate(1024);\r\n            cipher.doFinal(ByteBuffer.wrap(plaintext), tag);\r\n            byte[] expected = readBytes(is, 1024); // Adjust the size as needed\r\n            return Arrays.equals(expected, tag.array());\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "tag",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "ByteBuffer.allocate(1024)",
                        "type": "ByteBuffer",
                        "context": "            Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\r\n            cipher.init(Cipher.ENCRYPT_MODE, key);\r\n            ByteBuffer tag = ByteBuffer.allocate(1024);\r\n            cipher.doFinal(ByteBuffer.wrap(plaintext), tag);\r\n            byte[] expected = readBytes(is, 1024); // Adjust the size as needed\r\n |             Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\r\n            cipher.init(Cipher.ENCRYPT_MODE, key);\r\n            ByteBuffer tag = ByteBuffer.allocate(1024);\r\n            cipher.doFinal(ByteBuffer.wrap(plaintext), tag);\r\n            byte[] expected = readBytes(is, 1024); // Adjust the size as needed\r\n",
                        "nextNode": "tag"
                    },
                    {
                        "name": "tag",
                        "type": "Dataflow from `allocate(...)` to `tag`\nDataflow from `1024` to `tag`",
                        "context": "            cipher.init(Cipher.ENCRYPT_MODE, key);\r\n            ByteBuffer tag = ByteBuffer.allocate(1024);\r\n            cipher.doFinal(ByteBuffer.wrap(plaintext), tag);\r\n            byte[] expected = readBytes(is, 1024); // Adjust the size as needed\r\n            return Arrays.equals(expected, tag.array());\r\n |             cipher.init(Cipher.ENCRYPT_MODE, key);\r\n            ByteBuffer tag = ByteBuffer.allocate(1024);\r\n            cipher.doFinal(ByteBuffer.wrap(plaintext), tag);\r\n            byte[] expected = readBytes(is, 1024); // Adjust the size as needed\r\n            return Arrays.equals(expected, tag.array());\r\n |             cipher.doFinal(ByteBuffer.wrap(plaintext), tag);\r\n            byte[] expected = readBytes(is, 1024); // Adjust the size as needed\r\n            return Arrays.equals(expected, tag.array());\r\n        }\r\n    }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "socket",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "key",
                "isSensitive": "yes",
                "graph": []
            }
        ],
        "strings": [
            {
                "name": "SHA-512",
                "isSensitive": "yes"
            },
            {
                "name": "AES/CBC/PKCS5Padding",
                "isSensitive": "yes"
            }
        ],
        "comments": [
            {
                "name": "Adjust the size as needed",
                "isSensitive": "no"
            }
        ],
        "sinks": [
            {
                "name": "init",
                "isSink": "no"
            },
            {
                "name": "read",
                "isSink": "no"
            },
            {
                "name": "allocate",
                "isSink": "no"
            },
            {
                "name": "array",
                "isSink": "no"
            },
            {
                "name": "equals",
                "isSink": "no"
            },
            {
                "name": "readBytes",
                "isSink": "no"
            },
            {
                "name": "update",
                "isSink": "no"
            },
            {
                "name": "getInstance",
                "isSink": "no"
            },
            {
                "name": "copyOf",
                "isSink": "no"
            },
            {
                "name": "getInputStream",
                "isSink": "no"
            },
            {
                "name": "wrap",
                "isSink": "no"
            },
            {
                "name": "doFinal",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "BAD_AAS_unsafeCheckCiphertextWithOutputArray.java",
        "variables": [
            {
                "name": "cipher",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "Cipher.getInstance(\"AES/CBC/PKCS5Padding\")",
                        "type": "Cipher",
                        "context": "            MessageDigest md = MessageDigest.getInstance(\"SHA-512\");\r\n            md.update(plaintext);\r\n            Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\r\n            cipher.init(Cipher.ENCRYPT_MODE, key);\r\n            byte[] tag = new byte[1024];\r\n |             MessageDigest md = MessageDigest.getInstance(\"SHA-512\");\r\n            md.update(plaintext);\r\n            Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\r\n            cipher.init(Cipher.ENCRYPT_MODE, key);\r\n            byte[] tag = new byte[1024];\r\n",
                        "nextNode": "cipher"
                    },
                    {
                        "name": "cipher",
                        "type": "Dataflow from `getInstance(...)` to `cipher`\nDataflow from `\"AES/CBC/PKCS5Padding\"` to `cipher`",
                        "context": "            md.update(plaintext);\r\n            Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\r\n            cipher.init(Cipher.ENCRYPT_MODE, key);\r\n            byte[] tag = new byte[1024];\r\n            cipher.doFinal(tag, 0);\r\n |             md.update(plaintext);\r\n            Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\r\n            cipher.init(Cipher.ENCRYPT_MODE, key);\r\n            byte[] tag = new byte[1024];\r\n            cipher.doFinal(tag, 0);\r\n |             cipher.init(Cipher.ENCRYPT_MODE, key);\r\n            byte[] tag = new byte[1024];\r\n            cipher.doFinal(tag, 0);\r\n            byte[] expected = readBytes(is, 32);\r\n            return Arrays.equals(expected, tag);\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "numBytes",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "1024",
                        "type": "Number",
                        "context": "    public boolean unsafeCheckCiphertextWithOutputArray(Socket socket, Key key) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            byte[] plaintext = readBytes(is, 1024); // Assuming the data length to read\r\n            MessageDigest md = MessageDigest.getInstance(\"SHA-512\");\r\n            md.update(plaintext);\r\n |     public boolean unsafeCheckCiphertextWithOutputArray(Socket socket, Key key) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            byte[] plaintext = readBytes(is, 1024); // Assuming the data length to read\r\n            MessageDigest md = MessageDigest.getInstance(\"SHA-512\");\r\n            md.update(plaintext);\r\n |     public boolean unsafeCheckCiphertextWithOutputArray(Socket socket, Key key) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            byte[] plaintext = readBytes(is, 1024); // Assuming the data length to read\r\n            MessageDigest md = MessageDigest.getInstance(\"SHA-512\");\r\n            md.update(plaintext);\r\n |     public boolean unsafeCheckCiphertextWithOutputArray(Socket socket, Key key) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            byte[] plaintext = readBytes(is, 1024); // Assuming the data length to read\r\n            MessageDigest md = MessageDigest.getInstance(\"SHA-512\");\r\n            md.update(plaintext);\r\n",
                        "nextNode": "int numBytes"
                    },
                    {
                        "name": "int numBytes",
                        "type": "Number",
                        "context": "    }\r\n\r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n |     }\r\n\r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n |     }\r\n\r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n |     }\r\n\r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n",
                        "nextNode": "numBytes]"
                    },
                    {
                        "name": "numBytes]",
                        "type": "Dataflow from `1024` to `numBytes`\nDataflow from `32` to `numBytes`",
                        "context": "\r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n        int read;\r\n | \r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n        int read;\r\n | \r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n        int read;\r\n | \r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n        int read;\r\n",
                        "nextNode": "numBytes"
                    },
                    {
                        "name": "numBytes",
                        "type": "Dataflow from `1024` to `numBytes`\nDataflow from `32` to `numBytes`",
                        "context": "        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |             offset += read;\r\n        }\r\n        if (offset < numBytes) {\r\n            return Arrays.copyOf(bytes, offset);\r\n        }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "read",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "is",
                        "type": "InputStream",
                        "context": "    public boolean unsafeCheckCiphertextWithOutputArray(Socket socket, Key key) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            byte[] plaintext = readBytes(is, 1024); // Assuming the data length to read\r\n            MessageDigest md = MessageDigest.getInstance(\"SHA-512\");\r\n            md.update(plaintext);\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n",
                        "nextNode": "bytes"
                    },
                    {
                        "name": "InputStream is",
                        "type": "InputStream",
                        "context": "    }\r\n\r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n",
                        "nextNode": "is"
                    },
                    {
                        "name": "bytes",
                        "type": "byte[]",
                        "context": "        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n",
                        "nextNode": "is.read(bytes, offset, numBytes - offset)"
                    },
                    {
                        "name": "is.read(bytes, offset, numBytes - offset)",
                        "type": "Number",
                        "context": "        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n",
                        "nextNode": "read"
                    },
                    {
                        "name": "read",
                        "type": "Dataflow from `is` to `read`\nDataflow from `is` to `read`\nDataflow from `offset` to `read`\nDataflow from `is` to `read`\nDataflow from `bytes` to `read`\nDataflow from `offset` to `read`\nDataflow from `getInputStream(...)` to `read`\nDataflow from `0` to `read`\nDataflow from `read(...)` to `read`",
                        "context": "        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n        if (offset < numBytes) {\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "offset",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "0",
                        "type": "Number",
                        "context": "    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n |     private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n |     private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n |     private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n |     private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n |     private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n",
                        "nextNode": "offset"
                    },
                    {
                        "name": "offset",
                        "type": "Dataflow from `0` to `offset`",
                        "context": "        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n        if (offset < numBytes) {\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |             offset += read;\r\n        }\r\n        if (offset < numBytes) {\r\n            return Arrays.copyOf(bytes, offset);\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |             offset += read;\r\n        }\r\n        if (offset < numBytes) {\r\n            return Arrays.copyOf(bytes, offset);\r\n        }\r\n |         }\r\n        if (offset < numBytes) {\r\n            return Arrays.copyOf(bytes, offset);\r\n        }\r\n        return bytes;\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "bytes",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "is",
                        "type": "InputStream",
                        "context": "    public boolean unsafeCheckCiphertextWithOutputArray(Socket socket, Key key) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            byte[] plaintext = readBytes(is, 1024); // Assuming the data length to read\r\n            MessageDigest md = MessageDigest.getInstance(\"SHA-512\");\r\n            md.update(plaintext);\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |     public boolean unsafeCheckCiphertextWithOutputArray(Socket socket, Key key) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            byte[] plaintext = readBytes(is, 1024); // Assuming the data length to read\r\n            MessageDigest md = MessageDigest.getInstance(\"SHA-512\");\r\n            md.update(plaintext);\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |     public boolean unsafeCheckCiphertextWithOutputArray(Socket socket, Key key) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            byte[] plaintext = readBytes(is, 1024); // Assuming the data length to read\r\n            MessageDigest md = MessageDigest.getInstance(\"SHA-512\");\r\n            md.update(plaintext);\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n",
                        "nextNode": "bytes"
                    },
                    {
                        "name": "InputStream is",
                        "type": "InputStream",
                        "context": "    }\r\n\r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n |     }\r\n\r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n |     }\r\n\r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n",
                        "nextNode": "is"
                    },
                    {
                        "name": "bytes",
                        "type": "byte[]",
                        "context": "        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         }\r\n        if (offset < numBytes) {\r\n            return Arrays.copyOf(bytes, offset);\r\n        }\r\n        return bytes;\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |             return Arrays.copyOf(bytes, offset);\r\n        }\r\n        return bytes;\r\n    }\r\n}\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "md",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "MessageDigest.getInstance(\"SHA-512\")",
                        "type": "MessageDigest",
                        "context": "        try (InputStream is = socket.getInputStream()) {\r\n            byte[] plaintext = readBytes(is, 1024); // Assuming the data length to read\r\n            MessageDigest md = MessageDigest.getInstance(\"SHA-512\");\r\n            md.update(plaintext);\r\n            Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\r\n",
                        "nextNode": "md"
                    },
                    {
                        "name": "md",
                        "type": "Dataflow from `getInstance(...)` to `md`\nDataflow from `\"SHA-512\"` to `md`",
                        "context": "            byte[] plaintext = readBytes(is, 1024); // Assuming the data length to read\r\n            MessageDigest md = MessageDigest.getInstance(\"SHA-512\");\r\n            md.update(plaintext);\r\n            Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\r\n            cipher.init(Cipher.ENCRYPT_MODE, key);\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "expected",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "is",
                        "type": "InputStream",
                        "context": "    public boolean unsafeCheckCiphertextWithOutputArray(Socket socket, Key key) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            byte[] plaintext = readBytes(is, 1024); // Assuming the data length to read\r\n            MessageDigest md = MessageDigest.getInstance(\"SHA-512\");\r\n            md.update(plaintext);\r\n |             byte[] tag = new byte[1024];\r\n            cipher.doFinal(tag, 0);\r\n            byte[] expected = readBytes(is, 32);\r\n            return Arrays.equals(expected, tag);\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n",
                        "nextNode": "bytes"
                    },
                    {
                        "name": "InputStream is",
                        "type": "InputStream",
                        "context": "    }\r\n\r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n",
                        "nextNode": "is"
                    },
                    {
                        "name": "bytes",
                        "type": "byte[]",
                        "context": "        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |             return Arrays.copyOf(bytes, offset);\r\n        }\r\n        return bytes;\r\n    }\r\n}\r\n",
                        "nextNode": "readBytes(is, 32)"
                    },
                    {
                        "name": "readBytes(is, 32)",
                        "type": "byte[]",
                        "context": "            byte[] tag = new byte[1024];\r\n            cipher.doFinal(tag, 0);\r\n            byte[] expected = readBytes(is, 32);\r\n            return Arrays.equals(expected, tag);\r\n        }\r\n",
                        "nextNode": "expected"
                    },
                    {
                        "name": "expected",
                        "type": "Dataflow from `is` to `expected`\nDataflow from `is` to `expected`\nDataflow from `offset` to `expected`\nDataflow from `is` to `expected`\nDataflow from `bytes` to `expected`\nDataflow from `offset` to `expected`\nDataflow from `offset` to `expected`\nDataflow from `offset` to `expected`\nDataflow from `bytes` to `expected`\nDataflow from `offset` to `expected`\nDataflow from `bytes` to `expected`\nDataflow from `readBytes(...)` to `expected`\nDataflow from `getInputStream(...)` to `expected`\nDataflow from `32` to `expected`\nDataflow from `0` to `expected`\nDataflow from `copyOf(...)` to `expected`",
                        "context": "            cipher.doFinal(tag, 0);\r\n            byte[] expected = readBytes(is, 32);\r\n            return Arrays.equals(expected, tag);\r\n        }\r\n    }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "is",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "socket.getInputStream()",
                        "type": "InputStream",
                        "context": "public class BAD_AAS_unsafeCheckCiphertextWithOutputArray {\r\n    public boolean unsafeCheckCiphertextWithOutputArray(Socket socket, Key key) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            byte[] plaintext = readBytes(is, 1024); // Assuming the data length to read\r\n            MessageDigest md = MessageDigest.getInstance(\"SHA-512\");\r\n | public class BAD_AAS_unsafeCheckCiphertextWithOutputArray {\r\n    public boolean unsafeCheckCiphertextWithOutputArray(Socket socket, Key key) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            byte[] plaintext = readBytes(is, 1024); // Assuming the data length to read\r\n            MessageDigest md = MessageDigest.getInstance(\"SHA-512\");\r\n | public class BAD_AAS_unsafeCheckCiphertextWithOutputArray {\r\n    public boolean unsafeCheckCiphertextWithOutputArray(Socket socket, Key key) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            byte[] plaintext = readBytes(is, 1024); // Assuming the data length to read\r\n            MessageDigest md = MessageDigest.getInstance(\"SHA-512\");\r\n",
                        "nextNode": "is"
                    },
                    {
                        "name": "InputStream is",
                        "type": "InputStream",
                        "context": "    }\r\n\r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n",
                        "nextNode": "is"
                    },
                    {
                        "name": "is",
                        "type": "Dataflow from `getInputStream(...)` to `is`",
                        "context": "    public boolean unsafeCheckCiphertextWithOutputArray(Socket socket, Key key) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            byte[] plaintext = readBytes(is, 1024); // Assuming the data length to read\r\n            MessageDigest md = MessageDigest.getInstance(\"SHA-512\");\r\n            md.update(plaintext);\r\n |     public boolean unsafeCheckCiphertextWithOutputArray(Socket socket, Key key) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            byte[] plaintext = readBytes(is, 1024); // Assuming the data length to read\r\n            MessageDigest md = MessageDigest.getInstance(\"SHA-512\");\r\n            md.update(plaintext);\r\n |             byte[] tag = new byte[1024];\r\n            cipher.doFinal(tag, 0);\r\n            byte[] expected = readBytes(is, 32);\r\n            return Arrays.equals(expected, tag);\r\n        }\r\n |     public boolean unsafeCheckCiphertextWithOutputArray(Socket socket, Key key) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            byte[] plaintext = readBytes(is, 1024); // Assuming the data length to read\r\n            MessageDigest md = MessageDigest.getInstance(\"SHA-512\");\r\n            md.update(plaintext);\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "plaintext",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "is",
                        "type": "InputStream",
                        "context": "    public boolean unsafeCheckCiphertextWithOutputArray(Socket socket, Key key) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            byte[] plaintext = readBytes(is, 1024); // Assuming the data length to read\r\n            MessageDigest md = MessageDigest.getInstance(\"SHA-512\");\r\n            md.update(plaintext);\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n",
                        "nextNode": "bytes"
                    },
                    {
                        "name": "InputStream is",
                        "type": "InputStream",
                        "context": "    }\r\n\r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n",
                        "nextNode": "is"
                    },
                    {
                        "name": "bytes",
                        "type": "byte[]",
                        "context": "        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |             return Arrays.copyOf(bytes, offset);\r\n        }\r\n        return bytes;\r\n    }\r\n}\r\n",
                        "nextNode": "readBytes(is, 1024)"
                    },
                    {
                        "name": "readBytes(is, 1024)",
                        "type": "byte[]",
                        "context": "    public boolean unsafeCheckCiphertextWithOutputArray(Socket socket, Key key) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            byte[] plaintext = readBytes(is, 1024); // Assuming the data length to read\r\n            MessageDigest md = MessageDigest.getInstance(\"SHA-512\");\r\n            md.update(plaintext);\r\n",
                        "nextNode": "plaintext"
                    },
                    {
                        "name": "plaintext",
                        "type": "Dataflow from `is` to `plaintext`\nDataflow from `offset` to `plaintext`\nDataflow from `is` to `plaintext`\nDataflow from `bytes` to `plaintext`\nDataflow from `offset` to `plaintext`\nDataflow from `offset` to `plaintext`\nDataflow from `offset` to `plaintext`\nDataflow from `bytes` to `plaintext`\nDataflow from `offset` to `plaintext`\nDataflow from `bytes` to `plaintext`\nDataflow from `readBytes(...)` to `plaintext`\nDataflow from `getInputStream(...)` to `plaintext`\nDataflow from `1024` to `plaintext`\nDataflow from `0` to `plaintext`\nDataflow from `copyOf(...)` to `plaintext`",
                        "context": "            byte[] plaintext = readBytes(is, 1024); // Assuming the data length to read\r\n            MessageDigest md = MessageDigest.getInstance(\"SHA-512\");\r\n            md.update(plaintext);\r\n            Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\r\n            cipher.init(Cipher.ENCRYPT_MODE, key);\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "tag",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "socket",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "key",
                "isSensitive": "yes",
                "graph": []
            }
        ],
        "strings": [
            {
                "name": "SHA-512",
                "isSensitive": "yes"
            },
            {
                "name": "AES/CBC/PKCS5Padding",
                "isSensitive": "yes"
            }
        ],
        "comments": [
            {
                "name": "Assuming the data length to read",
                "isSensitive": "no"
            }
        ],
        "sinks": [
            {
                "name": "init",
                "isSink": "no"
            },
            {
                "name": "read",
                "isSink": "no"
            },
            {
                "name": "equals",
                "isSink": "no"
            },
            {
                "name": "readBytes",
                "isSink": "no"
            },
            {
                "name": "update",
                "isSink": "no"
            },
            {
                "name": "getInstance",
                "isSink": "no"
            },
            {
                "name": "copyOf",
                "isSink": "no"
            },
            {
                "name": "getInputStream",
                "isSink": "no"
            },
            {
                "name": "doFinal",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "BAD_AAS_unsafeCheckSignatures.java",
        "variables": [
            {
                "name": "numBytes",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "1024",
                        "type": "Number",
                        "context": "            Signature engine = Signature.getInstance(\"SHA256withRSA\");\r\n            engine.initSign(key);\r\n            byte[] data = readBytes(is, 1024); // Assuming data to read is 1024 bytes\r\n            engine.update(data);\r\n            byte[] signature = engine.sign();\r\n |             Signature engine = Signature.getInstance(\"SHA256withRSA\");\r\n            engine.initSign(key);\r\n            byte[] data = readBytes(is, 1024); // Assuming data to read is 1024 bytes\r\n            engine.update(data);\r\n            byte[] signature = engine.sign();\r\n |             Signature engine = Signature.getInstance(\"SHA256withRSA\");\r\n            engine.initSign(key);\r\n            byte[] data = readBytes(is, 1024); // Assuming data to read is 1024 bytes\r\n            engine.update(data);\r\n            byte[] signature = engine.sign();\r\n |             Signature engine = Signature.getInstance(\"SHA256withRSA\");\r\n            engine.initSign(key);\r\n            byte[] data = readBytes(is, 1024); // Assuming data to read is 1024 bytes\r\n            engine.update(data);\r\n            byte[] signature = engine.sign();\r\n",
                        "nextNode": "int numBytes"
                    },
                    {
                        "name": "int numBytes",
                        "type": "Number",
                        "context": "    }\r\n\r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n |     }\r\n\r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n |     }\r\n\r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n |     }\r\n\r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n",
                        "nextNode": "numBytes]"
                    },
                    {
                        "name": "numBytes]",
                        "type": "Dataflow from `1024` to `numBytes`\nDataflow from `256` to `numBytes`",
                        "context": "\r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n        int read;\r\n | \r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n        int read;\r\n | \r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n        int read;\r\n | \r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n        int read;\r\n",
                        "nextNode": "numBytes"
                    },
                    {
                        "name": "numBytes",
                        "type": "Dataflow from `1024` to `numBytes`\nDataflow from `256` to `numBytes`",
                        "context": "        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |             offset += read;\r\n        }\r\n        if (offset < numBytes) {\r\n            return Arrays.copyOf(bytes, offset);\r\n        }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "read",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "is",
                        "type": "InputStream",
                        "context": "            Signature engine = Signature.getInstance(\"SHA256withRSA\");\r\n            engine.initSign(key);\r\n            byte[] data = readBytes(is, 1024); // Assuming data to read is 1024 bytes\r\n            engine.update(data);\r\n            byte[] signature = engine.sign();\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n",
                        "nextNode": "bytes"
                    },
                    {
                        "name": "InputStream is",
                        "type": "InputStream",
                        "context": "    }\r\n\r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n",
                        "nextNode": "is"
                    },
                    {
                        "name": "bytes",
                        "type": "byte[]",
                        "context": "        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n",
                        "nextNode": "is.read(bytes, offset, numBytes - offset)"
                    },
                    {
                        "name": "is.read(bytes, offset, numBytes - offset)",
                        "type": "Number",
                        "context": "        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n",
                        "nextNode": "read"
                    },
                    {
                        "name": "read",
                        "type": "Dataflow from `is` to `read`\nDataflow from `is` to `read`\nDataflow from `offset` to `read`\nDataflow from `is` to `read`\nDataflow from `bytes` to `read`\nDataflow from `offset` to `read`\nDataflow from `getInputStream(...)` to `read`\nDataflow from `0` to `read`\nDataflow from `read(...)` to `read`",
                        "context": "        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n        if (offset < numBytes) {\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "data",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "is",
                        "type": "InputStream",
                        "context": "            Signature engine = Signature.getInstance(\"SHA256withRSA\");\r\n            engine.initSign(key);\r\n            byte[] data = readBytes(is, 1024); // Assuming data to read is 1024 bytes\r\n            engine.update(data);\r\n            byte[] signature = engine.sign();\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n",
                        "nextNode": "bytes"
                    },
                    {
                        "name": "InputStream is",
                        "type": "InputStream",
                        "context": "    }\r\n\r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n",
                        "nextNode": "is"
                    },
                    {
                        "name": "bytes",
                        "type": "byte[]",
                        "context": "        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |             return Arrays.copyOf(bytes, offset);\r\n        }\r\n        return bytes;\r\n    }\r\n}\r\n",
                        "nextNode": "readBytes(is, 1024)"
                    },
                    {
                        "name": "readBytes(is, 1024)",
                        "type": "byte[]",
                        "context": "            Signature engine = Signature.getInstance(\"SHA256withRSA\");\r\n            engine.initSign(key);\r\n            byte[] data = readBytes(is, 1024); // Assuming data to read is 1024 bytes\r\n            engine.update(data);\r\n            byte[] signature = engine.sign();\r\n",
                        "nextNode": "data"
                    },
                    {
                        "name": "data",
                        "type": "Dataflow from `is` to `data`\nDataflow from `offset` to `data`\nDataflow from `is` to `data`\nDataflow from `bytes` to `data`\nDataflow from `offset` to `data`\nDataflow from `offset` to `data`\nDataflow from `offset` to `data`\nDataflow from `bytes` to `data`\nDataflow from `offset` to `data`\nDataflow from `bytes` to `data`\nDataflow from `readBytes(...)` to `data`\nDataflow from `getInputStream(...)` to `data`\nDataflow from `1024` to `data`\nDataflow from `0` to `data`\nDataflow from `copyOf(...)` to `data`",
                        "context": "            engine.initSign(key);\r\n            byte[] data = readBytes(is, 1024); // Assuming data to read is 1024 bytes\r\n            engine.update(data);\r\n            byte[] signature = engine.sign();\r\n            byte[] expected = readBytes(is, 256);\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "offset",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "0",
                        "type": "Number",
                        "context": "    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n |     private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n |     private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n |     private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n |     private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n |     private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n",
                        "nextNode": "offset"
                    },
                    {
                        "name": "offset",
                        "type": "Dataflow from `0` to `offset`",
                        "context": "        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n        if (offset < numBytes) {\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |             offset += read;\r\n        }\r\n        if (offset < numBytes) {\r\n            return Arrays.copyOf(bytes, offset);\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |             offset += read;\r\n        }\r\n        if (offset < numBytes) {\r\n            return Arrays.copyOf(bytes, offset);\r\n        }\r\n |         }\r\n        if (offset < numBytes) {\r\n            return Arrays.copyOf(bytes, offset);\r\n        }\r\n        return bytes;\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "engine",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "Signature.getInstance(\"SHA256withRSA\")",
                        "type": "Signature",
                        "context": "    public boolean unsafeCheckSignatures(Socket socket, PrivateKey key) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            Signature engine = Signature.getInstance(\"SHA256withRSA\");\r\n            engine.initSign(key);\r\n            byte[] data = readBytes(is, 1024); // Assuming data to read is 1024 bytes\r\n |     public boolean unsafeCheckSignatures(Socket socket, PrivateKey key) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            Signature engine = Signature.getInstance(\"SHA256withRSA\");\r\n            engine.initSign(key);\r\n            byte[] data = readBytes(is, 1024); // Assuming data to read is 1024 bytes\r\n |     public boolean unsafeCheckSignatures(Socket socket, PrivateKey key) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            Signature engine = Signature.getInstance(\"SHA256withRSA\");\r\n            engine.initSign(key);\r\n            byte[] data = readBytes(is, 1024); // Assuming data to read is 1024 bytes\r\n",
                        "nextNode": "engine"
                    },
                    {
                        "name": "engine",
                        "type": "Signature",
                        "context": "        try (InputStream is = socket.getInputStream()) {\r\n            Signature engine = Signature.getInstance(\"SHA256withRSA\");\r\n            engine.initSign(key);\r\n            byte[] data = readBytes(is, 1024); // Assuming data to read is 1024 bytes\r\n            engine.update(data);\r\n |             engine.initSign(key);\r\n            byte[] data = readBytes(is, 1024); // Assuming data to read is 1024 bytes\r\n            engine.update(data);\r\n            byte[] signature = engine.sign();\r\n            byte[] expected = readBytes(is, 256);\r\n |             byte[] data = readBytes(is, 1024); // Assuming data to read is 1024 bytes\r\n            engine.update(data);\r\n            byte[] signature = engine.sign();\r\n            byte[] expected = readBytes(is, 256);\r\n            return Arrays.equals(expected, signature);\r\n |         try (InputStream is = socket.getInputStream()) {\r\n            Signature engine = Signature.getInstance(\"SHA256withRSA\");\r\n            engine.initSign(key);\r\n            byte[] data = readBytes(is, 1024); // Assuming data to read is 1024 bytes\r\n            engine.update(data);\r\n |         try (InputStream is = socket.getInputStream()) {\r\n            Signature engine = Signature.getInstance(\"SHA256withRSA\");\r\n            engine.initSign(key);\r\n            byte[] data = readBytes(is, 1024); // Assuming data to read is 1024 bytes\r\n            engine.update(data);\r\n |             engine.initSign(key);\r\n            byte[] data = readBytes(is, 1024); // Assuming data to read is 1024 bytes\r\n            engine.update(data);\r\n            byte[] signature = engine.sign();\r\n            byte[] expected = readBytes(is, 256);\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "signature",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "engine.sign()",
                        "type": "byte[]",
                        "context": "            byte[] data = readBytes(is, 1024); // Assuming data to read is 1024 bytes\r\n            engine.update(data);\r\n            byte[] signature = engine.sign();\r\n            byte[] expected = readBytes(is, 256);\r\n            return Arrays.equals(expected, signature);\r\n",
                        "nextNode": "signature"
                    },
                    {
                        "name": "signature",
                        "type": "Dataflow from `sign(...)` to `signature`",
                        "context": "            byte[] signature = engine.sign();\r\n            byte[] expected = readBytes(is, 256);\r\n            return Arrays.equals(expected, signature);\r\n        }\r\n    }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "bytes",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "is",
                        "type": "InputStream",
                        "context": "            Signature engine = Signature.getInstance(\"SHA256withRSA\");\r\n            engine.initSign(key);\r\n            byte[] data = readBytes(is, 1024); // Assuming data to read is 1024 bytes\r\n            engine.update(data);\r\n            byte[] signature = engine.sign();\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |             Signature engine = Signature.getInstance(\"SHA256withRSA\");\r\n            engine.initSign(key);\r\n            byte[] data = readBytes(is, 1024); // Assuming data to read is 1024 bytes\r\n            engine.update(data);\r\n            byte[] signature = engine.sign();\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |             Signature engine = Signature.getInstance(\"SHA256withRSA\");\r\n            engine.initSign(key);\r\n            byte[] data = readBytes(is, 1024); // Assuming data to read is 1024 bytes\r\n            engine.update(data);\r\n            byte[] signature = engine.sign();\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n",
                        "nextNode": "bytes"
                    },
                    {
                        "name": "InputStream is",
                        "type": "InputStream",
                        "context": "    }\r\n\r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n |     }\r\n\r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n |     }\r\n\r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n",
                        "nextNode": "is"
                    },
                    {
                        "name": "bytes",
                        "type": "byte[]",
                        "context": "        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         }\r\n        if (offset < numBytes) {\r\n            return Arrays.copyOf(bytes, offset);\r\n        }\r\n        return bytes;\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |             return Arrays.copyOf(bytes, offset);\r\n        }\r\n        return bytes;\r\n    }\r\n}\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "expected",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "is",
                        "type": "InputStream",
                        "context": "            Signature engine = Signature.getInstance(\"SHA256withRSA\");\r\n            engine.initSign(key);\r\n            byte[] data = readBytes(is, 1024); // Assuming data to read is 1024 bytes\r\n            engine.update(data);\r\n            byte[] signature = engine.sign();\r\n |             engine.update(data);\r\n            byte[] signature = engine.sign();\r\n            byte[] expected = readBytes(is, 256);\r\n            return Arrays.equals(expected, signature);\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n",
                        "nextNode": "bytes"
                    },
                    {
                        "name": "InputStream is",
                        "type": "InputStream",
                        "context": "    }\r\n\r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n",
                        "nextNode": "is"
                    },
                    {
                        "name": "bytes",
                        "type": "byte[]",
                        "context": "        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |             return Arrays.copyOf(bytes, offset);\r\n        }\r\n        return bytes;\r\n    }\r\n}\r\n",
                        "nextNode": "readBytes(is, 256)"
                    },
                    {
                        "name": "readBytes(is, 256)",
                        "type": "byte[]",
                        "context": "            engine.update(data);\r\n            byte[] signature = engine.sign();\r\n            byte[] expected = readBytes(is, 256);\r\n            return Arrays.equals(expected, signature);\r\n        }\r\n",
                        "nextNode": "expected"
                    },
                    {
                        "name": "expected",
                        "type": "Dataflow from `is` to `expected`\nDataflow from `is` to `expected`\nDataflow from `offset` to `expected`\nDataflow from `is` to `expected`\nDataflow from `bytes` to `expected`\nDataflow from `offset` to `expected`\nDataflow from `offset` to `expected`\nDataflow from `offset` to `expected`\nDataflow from `bytes` to `expected`\nDataflow from `offset` to `expected`\nDataflow from `bytes` to `expected`\nDataflow from `readBytes(...)` to `expected`\nDataflow from `getInputStream(...)` to `expected`\nDataflow from `256` to `expected`\nDataflow from `0` to `expected`\nDataflow from `copyOf(...)` to `expected`",
                        "context": "            byte[] signature = engine.sign();\r\n            byte[] expected = readBytes(is, 256);\r\n            return Arrays.equals(expected, signature);\r\n        }\r\n    }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "is",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "socket.getInputStream()",
                        "type": "InputStream",
                        "context": "public class BAD_AAS_unsafeCheckSignatures {\r\n    public boolean unsafeCheckSignatures(Socket socket, PrivateKey key) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            Signature engine = Signature.getInstance(\"SHA256withRSA\");\r\n            engine.initSign(key);\r\n | public class BAD_AAS_unsafeCheckSignatures {\r\n    public boolean unsafeCheckSignatures(Socket socket, PrivateKey key) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            Signature engine = Signature.getInstance(\"SHA256withRSA\");\r\n            engine.initSign(key);\r\n | public class BAD_AAS_unsafeCheckSignatures {\r\n    public boolean unsafeCheckSignatures(Socket socket, PrivateKey key) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            Signature engine = Signature.getInstance(\"SHA256withRSA\");\r\n            engine.initSign(key);\r\n",
                        "nextNode": "is"
                    },
                    {
                        "name": "InputStream is",
                        "type": "InputStream",
                        "context": "    }\r\n\r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n",
                        "nextNode": "is"
                    },
                    {
                        "name": "is",
                        "type": "Dataflow from `getInputStream(...)` to `is`",
                        "context": "            Signature engine = Signature.getInstance(\"SHA256withRSA\");\r\n            engine.initSign(key);\r\n            byte[] data = readBytes(is, 1024); // Assuming data to read is 1024 bytes\r\n            engine.update(data);\r\n            byte[] signature = engine.sign();\r\n |             Signature engine = Signature.getInstance(\"SHA256withRSA\");\r\n            engine.initSign(key);\r\n            byte[] data = readBytes(is, 1024); // Assuming data to read is 1024 bytes\r\n            engine.update(data);\r\n            byte[] signature = engine.sign();\r\n |             engine.update(data);\r\n            byte[] signature = engine.sign();\r\n            byte[] expected = readBytes(is, 256);\r\n            return Arrays.equals(expected, signature);\r\n        }\r\n |             Signature engine = Signature.getInstance(\"SHA256withRSA\");\r\n            engine.initSign(key);\r\n            byte[] data = readBytes(is, 1024); // Assuming data to read is 1024 bytes\r\n            engine.update(data);\r\n            byte[] signature = engine.sign();\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "socket",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "key",
                "isSensitive": "yes",
                "graph": []
            }
        ],
        "strings": [
            {
                "name": "SHA256withRSA",
                "isSensitive": "no"
            }
        ],
        "comments": [
            {
                "name": "Assuming data to read is 1024 bytes",
                "isSensitive": "no"
            }
        ],
        "sinks": [
            {
                "name": "initSign",
                "isSink": "no"
            },
            {
                "name": "read",
                "isSink": "no"
            },
            {
                "name": "equals",
                "isSink": "no"
            },
            {
                "name": "sign",
                "isSink": "no"
            },
            {
                "name": "readBytes",
                "isSink": "no"
            },
            {
                "name": "update",
                "isSink": "no"
            },
            {
                "name": "getInstance",
                "isSink": "no"
            },
            {
                "name": "copyOf",
                "isSink": "no"
            },
            {
                "name": "getInputStream",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "BAD_AAS_unsafeCheckSignaturesWithOutputArray.java",
        "variables": [
            {
                "name": "numBytes",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "1024",
                        "type": "Number",
                        "context": "            Signature engine = Signature.getInstance(\"SHA256withRSA\");\r\n            engine.initSign(key);\r\n            byte[] data = readBytes(is, 1024); // Assuming data to read is 1024 bytes\r\n            engine.update(data);\r\n            byte[] signature = new byte[1024];\r\n |             Signature engine = Signature.getInstance(\"SHA256withRSA\");\r\n            engine.initSign(key);\r\n            byte[] data = readBytes(is, 1024); // Assuming data to read is 1024 bytes\r\n            engine.update(data);\r\n            byte[] signature = new byte[1024];\r\n |             Signature engine = Signature.getInstance(\"SHA256withRSA\");\r\n            engine.initSign(key);\r\n            byte[] data = readBytes(is, 1024); // Assuming data to read is 1024 bytes\r\n            engine.update(data);\r\n            byte[] signature = new byte[1024];\r\n |             Signature engine = Signature.getInstance(\"SHA256withRSA\");\r\n            engine.initSign(key);\r\n            byte[] data = readBytes(is, 1024); // Assuming data to read is 1024 bytes\r\n            engine.update(data);\r\n            byte[] signature = new byte[1024];\r\n",
                        "nextNode": "int numBytes"
                    },
                    {
                        "name": "int numBytes",
                        "type": "Number",
                        "context": "    }\r\n\r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n |     }\r\n\r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n |     }\r\n\r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n |     }\r\n\r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n",
                        "nextNode": "numBytes]"
                    },
                    {
                        "name": "numBytes]",
                        "type": "Dataflow from `1024` to `numBytes`\nDataflow from `256` to `numBytes`",
                        "context": "\r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n        int read;\r\n | \r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n        int read;\r\n | \r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n        int read;\r\n | \r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n        int read;\r\n",
                        "nextNode": "numBytes"
                    },
                    {
                        "name": "numBytes",
                        "type": "Dataflow from `1024` to `numBytes`\nDataflow from `256` to `numBytes`",
                        "context": "        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |             offset += read;\r\n        }\r\n        if (offset < numBytes) {\r\n            return Arrays.copyOf(bytes, offset);\r\n        }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "read",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "is",
                        "type": "InputStream",
                        "context": "            Signature engine = Signature.getInstance(\"SHA256withRSA\");\r\n            engine.initSign(key);\r\n            byte[] data = readBytes(is, 1024); // Assuming data to read is 1024 bytes\r\n            engine.update(data);\r\n            byte[] signature = new byte[1024];\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n",
                        "nextNode": "bytes"
                    },
                    {
                        "name": "InputStream is",
                        "type": "InputStream",
                        "context": "    }\r\n\r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n",
                        "nextNode": "is"
                    },
                    {
                        "name": "bytes",
                        "type": "byte[]",
                        "context": "        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n",
                        "nextNode": "is.read(bytes, offset, numBytes - offset)"
                    },
                    {
                        "name": "is.read(bytes, offset, numBytes - offset)",
                        "type": "Number",
                        "context": "        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n",
                        "nextNode": "read"
                    },
                    {
                        "name": "read",
                        "type": "Dataflow from `is` to `read`\nDataflow from `is` to `read`\nDataflow from `offset` to `read`\nDataflow from `is` to `read`\nDataflow from `bytes` to `read`\nDataflow from `offset` to `read`\nDataflow from `getInputStream(...)` to `read`\nDataflow from `0` to `read`\nDataflow from `read(...)` to `read`",
                        "context": "        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n        if (offset < numBytes) {\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "data",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "is",
                        "type": "InputStream",
                        "context": "            Signature engine = Signature.getInstance(\"SHA256withRSA\");\r\n            engine.initSign(key);\r\n            byte[] data = readBytes(is, 1024); // Assuming data to read is 1024 bytes\r\n            engine.update(data);\r\n            byte[] signature = new byte[1024];\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n",
                        "nextNode": "bytes"
                    },
                    {
                        "name": "InputStream is",
                        "type": "InputStream",
                        "context": "    }\r\n\r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n",
                        "nextNode": "is"
                    },
                    {
                        "name": "bytes",
                        "type": "byte[]",
                        "context": "        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |             return Arrays.copyOf(bytes, offset);\r\n        }\r\n        return bytes;\r\n    }\r\n}\r\n",
                        "nextNode": "readBytes(is, 1024)"
                    },
                    {
                        "name": "readBytes(is, 1024)",
                        "type": "byte[]",
                        "context": "            Signature engine = Signature.getInstance(\"SHA256withRSA\");\r\n            engine.initSign(key);\r\n            byte[] data = readBytes(is, 1024); // Assuming data to read is 1024 bytes\r\n            engine.update(data);\r\n            byte[] signature = new byte[1024];\r\n",
                        "nextNode": "data"
                    },
                    {
                        "name": "data",
                        "type": "Dataflow from `is` to `data`\nDataflow from `offset` to `data`\nDataflow from `is` to `data`\nDataflow from `bytes` to `data`\nDataflow from `offset` to `data`\nDataflow from `offset` to `data`\nDataflow from `offset` to `data`\nDataflow from `bytes` to `data`\nDataflow from `offset` to `data`\nDataflow from `bytes` to `data`\nDataflow from `readBytes(...)` to `data`\nDataflow from `getInputStream(...)` to `data`\nDataflow from `1024` to `data`\nDataflow from `0` to `data`\nDataflow from `copyOf(...)` to `data`",
                        "context": "            engine.initSign(key);\r\n            byte[] data = readBytes(is, 1024); // Assuming data to read is 1024 bytes\r\n            engine.update(data);\r\n            byte[] signature = new byte[1024];\r\n            engine.sign(signature, 0, signature.length);\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "offset",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "0",
                        "type": "Number",
                        "context": "    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n |     private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n |     private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n |     private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n |     private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n |     private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n",
                        "nextNode": "offset"
                    },
                    {
                        "name": "offset",
                        "type": "Dataflow from `0` to `offset`",
                        "context": "        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n        if (offset < numBytes) {\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |             offset += read;\r\n        }\r\n        if (offset < numBytes) {\r\n            return Arrays.copyOf(bytes, offset);\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |             offset += read;\r\n        }\r\n        if (offset < numBytes) {\r\n            return Arrays.copyOf(bytes, offset);\r\n        }\r\n |         }\r\n        if (offset < numBytes) {\r\n            return Arrays.copyOf(bytes, offset);\r\n        }\r\n        return bytes;\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "engine",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "Signature.getInstance(\"SHA256withRSA\")",
                        "type": "Signature",
                        "context": "    public boolean unsafeCheckSignaturesWithOutputArray(Socket socket, PrivateKey key) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            Signature engine = Signature.getInstance(\"SHA256withRSA\");\r\n            engine.initSign(key);\r\n            byte[] data = readBytes(is, 1024); // Assuming data to read is 1024 bytes\r\n |     public boolean unsafeCheckSignaturesWithOutputArray(Socket socket, PrivateKey key) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            Signature engine = Signature.getInstance(\"SHA256withRSA\");\r\n            engine.initSign(key);\r\n            byte[] data = readBytes(is, 1024); // Assuming data to read is 1024 bytes\r\n |     public boolean unsafeCheckSignaturesWithOutputArray(Socket socket, PrivateKey key) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            Signature engine = Signature.getInstance(\"SHA256withRSA\");\r\n            engine.initSign(key);\r\n            byte[] data = readBytes(is, 1024); // Assuming data to read is 1024 bytes\r\n",
                        "nextNode": "engine"
                    },
                    {
                        "name": "engine",
                        "type": "Dataflow from `getInstance(...)` to `engine`\nDataflow from `\"SHA256withRSA\"` to `engine`",
                        "context": "        try (InputStream is = socket.getInputStream()) {\r\n            Signature engine = Signature.getInstance(\"SHA256withRSA\");\r\n            engine.initSign(key);\r\n            byte[] data = readBytes(is, 1024); // Assuming data to read is 1024 bytes\r\n            engine.update(data);\r\n |         try (InputStream is = socket.getInputStream()) {\r\n            Signature engine = Signature.getInstance(\"SHA256withRSA\");\r\n            engine.initSign(key);\r\n            byte[] data = readBytes(is, 1024); // Assuming data to read is 1024 bytes\r\n            engine.update(data);\r\n |             engine.initSign(key);\r\n            byte[] data = readBytes(is, 1024); // Assuming data to read is 1024 bytes\r\n            engine.update(data);\r\n            byte[] signature = new byte[1024];\r\n            engine.sign(signature, 0, signature.length);\r\n |         try (InputStream is = socket.getInputStream()) {\r\n            Signature engine = Signature.getInstance(\"SHA256withRSA\");\r\n            engine.initSign(key);\r\n            byte[] data = readBytes(is, 1024); // Assuming data to read is 1024 bytes\r\n            engine.update(data);\r\n |             engine.initSign(key);\r\n            byte[] data = readBytes(is, 1024); // Assuming data to read is 1024 bytes\r\n            engine.update(data);\r\n            byte[] signature = new byte[1024];\r\n            engine.sign(signature, 0, signature.length);\r\n |             engine.update(data);\r\n            byte[] signature = new byte[1024];\r\n            engine.sign(signature, 0, signature.length);\r\n            byte[] expected = readBytes(is, 256);\r\n            return Arrays.equals(expected, signature);\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "signature",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "bytes",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "is",
                        "type": "InputStream",
                        "context": "            Signature engine = Signature.getInstance(\"SHA256withRSA\");\r\n            engine.initSign(key);\r\n            byte[] data = readBytes(is, 1024); // Assuming data to read is 1024 bytes\r\n            engine.update(data);\r\n            byte[] signature = new byte[1024];\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |             Signature engine = Signature.getInstance(\"SHA256withRSA\");\r\n            engine.initSign(key);\r\n            byte[] data = readBytes(is, 1024); // Assuming data to read is 1024 bytes\r\n            engine.update(data);\r\n            byte[] signature = new byte[1024];\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |             Signature engine = Signature.getInstance(\"SHA256withRSA\");\r\n            engine.initSign(key);\r\n            byte[] data = readBytes(is, 1024); // Assuming data to read is 1024 bytes\r\n            engine.update(data);\r\n            byte[] signature = new byte[1024];\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n",
                        "nextNode": "bytes"
                    },
                    {
                        "name": "InputStream is",
                        "type": "InputStream",
                        "context": "    }\r\n\r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n |     }\r\n\r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n |     }\r\n\r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n",
                        "nextNode": "is"
                    },
                    {
                        "name": "bytes",
                        "type": "byte[]",
                        "context": "        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         }\r\n        if (offset < numBytes) {\r\n            return Arrays.copyOf(bytes, offset);\r\n        }\r\n        return bytes;\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |             return Arrays.copyOf(bytes, offset);\r\n        }\r\n        return bytes;\r\n    }\r\n}\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "expected",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "is",
                        "type": "InputStream",
                        "context": "            Signature engine = Signature.getInstance(\"SHA256withRSA\");\r\n            engine.initSign(key);\r\n            byte[] data = readBytes(is, 1024); // Assuming data to read is 1024 bytes\r\n            engine.update(data);\r\n            byte[] signature = new byte[1024];\r\n |             byte[] signature = new byte[1024];\r\n            engine.sign(signature, 0, signature.length);\r\n            byte[] expected = readBytes(is, 256);\r\n            return Arrays.equals(expected, signature);\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n",
                        "nextNode": "bytes"
                    },
                    {
                        "name": "InputStream is",
                        "type": "InputStream",
                        "context": "    }\r\n\r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n",
                        "nextNode": "is"
                    },
                    {
                        "name": "bytes",
                        "type": "byte[]",
                        "context": "        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |             return Arrays.copyOf(bytes, offset);\r\n        }\r\n        return bytes;\r\n    }\r\n}\r\n",
                        "nextNode": "readBytes(is, 256)"
                    },
                    {
                        "name": "readBytes(is, 256)",
                        "type": "byte[]",
                        "context": "            byte[] signature = new byte[1024];\r\n            engine.sign(signature, 0, signature.length);\r\n            byte[] expected = readBytes(is, 256);\r\n            return Arrays.equals(expected, signature);\r\n        }\r\n",
                        "nextNode": "expected"
                    },
                    {
                        "name": "expected",
                        "type": "Dataflow from `is` to `expected`\nDataflow from `is` to `expected`\nDataflow from `offset` to `expected`\nDataflow from `is` to `expected`\nDataflow from `bytes` to `expected`\nDataflow from `offset` to `expected`\nDataflow from `offset` to `expected`\nDataflow from `offset` to `expected`\nDataflow from `bytes` to `expected`\nDataflow from `offset` to `expected`\nDataflow from `bytes` to `expected`\nDataflow from `readBytes(...)` to `expected`\nDataflow from `getInputStream(...)` to `expected`\nDataflow from `256` to `expected`\nDataflow from `0` to `expected`\nDataflow from `copyOf(...)` to `expected`",
                        "context": "            engine.sign(signature, 0, signature.length);\r\n            byte[] expected = readBytes(is, 256);\r\n            return Arrays.equals(expected, signature);\r\n        }\r\n    }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "is",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "socket.getInputStream()",
                        "type": "InputStream",
                        "context": "public class BAD_AAS_unsafeCheckSignaturesWithOutputArray {\r\n    public boolean unsafeCheckSignaturesWithOutputArray(Socket socket, PrivateKey key) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            Signature engine = Signature.getInstance(\"SHA256withRSA\");\r\n            engine.initSign(key);\r\n | public class BAD_AAS_unsafeCheckSignaturesWithOutputArray {\r\n    public boolean unsafeCheckSignaturesWithOutputArray(Socket socket, PrivateKey key) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            Signature engine = Signature.getInstance(\"SHA256withRSA\");\r\n            engine.initSign(key);\r\n | public class BAD_AAS_unsafeCheckSignaturesWithOutputArray {\r\n    public boolean unsafeCheckSignaturesWithOutputArray(Socket socket, PrivateKey key) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            Signature engine = Signature.getInstance(\"SHA256withRSA\");\r\n            engine.initSign(key);\r\n",
                        "nextNode": "is"
                    },
                    {
                        "name": "InputStream is",
                        "type": "InputStream",
                        "context": "    }\r\n\r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n",
                        "nextNode": "is"
                    },
                    {
                        "name": "is",
                        "type": "Dataflow from `getInputStream(...)` to `is`",
                        "context": "            Signature engine = Signature.getInstance(\"SHA256withRSA\");\r\n            engine.initSign(key);\r\n            byte[] data = readBytes(is, 1024); // Assuming data to read is 1024 bytes\r\n            engine.update(data);\r\n            byte[] signature = new byte[1024];\r\n |             Signature engine = Signature.getInstance(\"SHA256withRSA\");\r\n            engine.initSign(key);\r\n            byte[] data = readBytes(is, 1024); // Assuming data to read is 1024 bytes\r\n            engine.update(data);\r\n            byte[] signature = new byte[1024];\r\n |             byte[] signature = new byte[1024];\r\n            engine.sign(signature, 0, signature.length);\r\n            byte[] expected = readBytes(is, 256);\r\n            return Arrays.equals(expected, signature);\r\n        }\r\n |             Signature engine = Signature.getInstance(\"SHA256withRSA\");\r\n            engine.initSign(key);\r\n            byte[] data = readBytes(is, 1024); // Assuming data to read is 1024 bytes\r\n            engine.update(data);\r\n            byte[] signature = new byte[1024];\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "socket",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "key",
                "isSensitive": "yes",
                "graph": []
            }
        ],
        "strings": [
            {
                "name": "SHA256withRSA",
                "isSensitive": "yes"
            }
        ],
        "comments": [
            {
                "name": "Assuming data to read is 1024 bytes",
                "isSensitive": "no"
            }
        ],
        "sinks": [
            {
                "name": "initSign",
                "isSink": "no"
            },
            {
                "name": "read",
                "isSink": "no"
            },
            {
                "name": "equals",
                "isSink": "no"
            },
            {
                "name": "sign",
                "isSink": "no"
            },
            {
                "name": "readBytes",
                "isSink": "no"
            },
            {
                "name": "update",
                "isSink": "no"
            },
            {
                "name": "getInstance",
                "isSink": "no"
            },
            {
                "name": "copyOf",
                "isSink": "no"
            },
            {
                "name": "getInputStream",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "BAD_AAS_unsafeMacCheckWithArrayEquals.java",
        "variables": [
            {
                "name": "expectedMac",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "is",
                        "type": "InputStream",
                        "context": "            byte[] actualMac = mac.doFinal(data);\r\n            byte[] expectedMac = new byte[32];\r\n            int expectedReadBytes = is.read(expectedMac);\r\n            if (expectedReadBytes < expectedMac.length) {\r\n                expectedMac = Arrays.copyOf(expectedMac, expectedReadBytes);\r\n |             byte[] actualMac = mac.doFinal(data);\r\n            byte[] expectedMac = new byte[32];\r\n            int expectedReadBytes = is.read(expectedMac);\r\n            if (expectedReadBytes < expectedMac.length) {\r\n                expectedMac = Arrays.copyOf(expectedMac, expectedReadBytes);\r\n |             byte[] actualMac = mac.doFinal(data);\r\n            byte[] expectedMac = new byte[32];\r\n            int expectedReadBytes = is.read(expectedMac);\r\n            if (expectedReadBytes < expectedMac.length) {\r\n                expectedMac = Arrays.copyOf(expectedMac, expectedReadBytes);\r\n",
                        "nextNode": "expectedMac"
                    },
                    {
                        "name": "expectedMac",
                        "type": "byte[]",
                        "context": "            byte[] actualMac = mac.doFinal(data);\r\n            byte[] expectedMac = new byte[32];\r\n            int expectedReadBytes = is.read(expectedMac);\r\n            if (expectedReadBytes < expectedMac.length) {\r\n                expectedMac = Arrays.copyOf(expectedMac, expectedReadBytes);\r\n |             byte[] expectedMac = new byte[32];\r\n            int expectedReadBytes = is.read(expectedMac);\r\n            if (expectedReadBytes < expectedMac.length) {\r\n                expectedMac = Arrays.copyOf(expectedMac, expectedReadBytes);\r\n            }\r\n |             byte[] actualMac = mac.doFinal(data);\r\n            byte[] expectedMac = new byte[32];\r\n            int expectedReadBytes = is.read(expectedMac);\r\n            if (expectedReadBytes < expectedMac.length) {\r\n                expectedMac = Arrays.copyOf(expectedMac, expectedReadBytes);\r\n |             byte[] expectedMac = new byte[32];\r\n            int expectedReadBytes = is.read(expectedMac);\r\n            if (expectedReadBytes < expectedMac.length) {\r\n                expectedMac = Arrays.copyOf(expectedMac, expectedReadBytes);\r\n            }\r\n |             int expectedReadBytes = is.read(expectedMac);\r\n            if (expectedReadBytes < expectedMac.length) {\r\n                expectedMac = Arrays.copyOf(expectedMac, expectedReadBytes);\r\n            }\r\n            return Arrays.equals(expectedMac, actualMac);\r\n |             byte[] actualMac = mac.doFinal(data);\r\n            byte[] expectedMac = new byte[32];\r\n            int expectedReadBytes = is.read(expectedMac);\r\n            if (expectedReadBytes < expectedMac.length) {\r\n                expectedMac = Arrays.copyOf(expectedMac, expectedReadBytes);\r\n |             byte[] expectedMac = new byte[32];\r\n            int expectedReadBytes = is.read(expectedMac);\r\n            if (expectedReadBytes < expectedMac.length) {\r\n                expectedMac = Arrays.copyOf(expectedMac, expectedReadBytes);\r\n            }\r\n |                 expectedMac = Arrays.copyOf(expectedMac, expectedReadBytes);\r\n            }\r\n            return Arrays.equals(expectedMac, actualMac);\r\n        }\r\n    }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "data",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "is",
                        "type": "InputStream",
                        "context": "            Mac mac = Mac.getInstance(\"HmacSHA256\");\r\n            byte[] data = new byte[1024];\r\n            is.read(data);\r\n            byte[] actualMac = mac.doFinal(data);\r\n            byte[] expectedMac = new byte[32];\r\n",
                        "nextNode": "data"
                    },
                    {
                        "name": "data",
                        "type": "byte[]",
                        "context": "            Mac mac = Mac.getInstance(\"HmacSHA256\");\r\n            byte[] data = new byte[1024];\r\n            is.read(data);\r\n            byte[] actualMac = mac.doFinal(data);\r\n            byte[] expectedMac = new byte[32];\r\n |             byte[] data = new byte[1024];\r\n            is.read(data);\r\n            byte[] actualMac = mac.doFinal(data);\r\n            byte[] expectedMac = new byte[32];\r\n            int expectedReadBytes = is.read(expectedMac);\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "actualMac",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "data",
                        "type": "byte[]",
                        "context": "            byte[] data = new byte[1024];\r\n            is.read(data);\r\n            byte[] actualMac = mac.doFinal(data);\r\n            byte[] expectedMac = new byte[32];\r\n            int expectedReadBytes = is.read(expectedMac);\r\n",
                        "nextNode": "mac.doFinal(data)"
                    },
                    {
                        "name": "mac.doFinal(data)",
                        "type": "byte[]",
                        "context": "            byte[] data = new byte[1024];\r\n            is.read(data);\r\n            byte[] actualMac = mac.doFinal(data);\r\n            byte[] expectedMac = new byte[32];\r\n            int expectedReadBytes = is.read(expectedMac);\r\n",
                        "nextNode": "actualMac"
                    },
                    {
                        "name": "actualMac",
                        "type": "Dataflow from `data` to `actualMac`\nDataflow from `is` to `actualMac`\nDataflow from `data` to `actualMac`\nDataflow from `getInputStream(...)` to `actualMac`\nDataflow from `doFinal(...)` to `actualMac`",
                        "context": "                expectedMac = Arrays.copyOf(expectedMac, expectedReadBytes);\r\n            }\r\n            return Arrays.equals(expectedMac, actualMac);\r\n        }\r\n    }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "is",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "socket.getInputStream()",
                        "type": "InputStream",
                        "context": "public class BAD_AAS_unsafeMacCheckWithArrayEquals {\r\n    public boolean unsafeMacCheckWithArrayEquals(Socket socket) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            Mac mac = Mac.getInstance(\"HmacSHA256\");\r\n            byte[] data = new byte[1024];\r\n | public class BAD_AAS_unsafeMacCheckWithArrayEquals {\r\n    public boolean unsafeMacCheckWithArrayEquals(Socket socket) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            Mac mac = Mac.getInstance(\"HmacSHA256\");\r\n            byte[] data = new byte[1024];\r\n",
                        "nextNode": "is"
                    },
                    {
                        "name": "is",
                        "type": "InputStream",
                        "context": "            Mac mac = Mac.getInstance(\"HmacSHA256\");\r\n            byte[] data = new byte[1024];\r\n            is.read(data);\r\n            byte[] actualMac = mac.doFinal(data);\r\n            byte[] expectedMac = new byte[32];\r\n |             byte[] actualMac = mac.doFinal(data);\r\n            byte[] expectedMac = new byte[32];\r\n            int expectedReadBytes = is.read(expectedMac);\r\n            if (expectedReadBytes < expectedMac.length) {\r\n                expectedMac = Arrays.copyOf(expectedMac, expectedReadBytes);\r\n |             Mac mac = Mac.getInstance(\"HmacSHA256\");\r\n            byte[] data = new byte[1024];\r\n            is.read(data);\r\n            byte[] actualMac = mac.doFinal(data);\r\n            byte[] expectedMac = new byte[32];\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "expectedReadBytes",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "expectedMac",
                        "type": "byte[]",
                        "context": "            byte[] actualMac = mac.doFinal(data);\r\n            byte[] expectedMac = new byte[32];\r\n            int expectedReadBytes = is.read(expectedMac);\r\n            if (expectedReadBytes < expectedMac.length) {\r\n                expectedMac = Arrays.copyOf(expectedMac, expectedReadBytes);\r\n |             byte[] actualMac = mac.doFinal(data);\r\n            byte[] expectedMac = new byte[32];\r\n            int expectedReadBytes = is.read(expectedMac);\r\n            if (expectedReadBytes < expectedMac.length) {\r\n                expectedMac = Arrays.copyOf(expectedMac, expectedReadBytes);\r\n",
                        "nextNode": "is.read(expectedMac)"
                    },
                    {
                        "name": "is.read(expectedMac)",
                        "type": "Number",
                        "context": "            byte[] actualMac = mac.doFinal(data);\r\n            byte[] expectedMac = new byte[32];\r\n            int expectedReadBytes = is.read(expectedMac);\r\n            if (expectedReadBytes < expectedMac.length) {\r\n                expectedMac = Arrays.copyOf(expectedMac, expectedReadBytes);\r\n |             byte[] actualMac = mac.doFinal(data);\r\n            byte[] expectedMac = new byte[32];\r\n            int expectedReadBytes = is.read(expectedMac);\r\n            if (expectedReadBytes < expectedMac.length) {\r\n                expectedMac = Arrays.copyOf(expectedMac, expectedReadBytes);\r\n",
                        "nextNode": "expectedReadBytes"
                    },
                    {
                        "name": "expectedReadBytes",
                        "type": "Dataflow from `expectedMac` to `expectedReadBytes`\nDataflow from `read(...)` to `expectedReadBytes`",
                        "context": "            byte[] expectedMac = new byte[32];\r\n            int expectedReadBytes = is.read(expectedMac);\r\n            if (expectedReadBytes < expectedMac.length) {\r\n                expectedMac = Arrays.copyOf(expectedMac, expectedReadBytes);\r\n            }\r\n |             byte[] expectedMac = new byte[32];\r\n            int expectedReadBytes = is.read(expectedMac);\r\n            if (expectedReadBytes < expectedMac.length) {\r\n                expectedMac = Arrays.copyOf(expectedMac, expectedReadBytes);\r\n            }\r\n |             int expectedReadBytes = is.read(expectedMac);\r\n            if (expectedReadBytes < expectedMac.length) {\r\n                expectedMac = Arrays.copyOf(expectedMac, expectedReadBytes);\r\n            }\r\n            return Arrays.equals(expectedMac, actualMac);\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "socket",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "mac",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "Mac.getInstance(\"HmacSHA256\")",
                        "type": "Mac",
                        "context": "    public boolean unsafeMacCheckWithArrayEquals(Socket socket) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            Mac mac = Mac.getInstance(\"HmacSHA256\");\r\n            byte[] data = new byte[1024];\r\n            is.read(data);\r\n",
                        "nextNode": "mac"
                    },
                    {
                        "name": "mac",
                        "type": "Dataflow from `getInstance(...)` to `mac`\nDataflow from `\"HmacSHA256\"` to `mac`",
                        "context": "            byte[] data = new byte[1024];\r\n            is.read(data);\r\n            byte[] actualMac = mac.doFinal(data);\r\n            byte[] expectedMac = new byte[32];\r\n            int expectedReadBytes = is.read(expectedMac);\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "HmacSHA256",
                "isSensitive": "yes"
            }
        ],
        "comments": [],
        "sinks": [
            {
                "name": "read",
                "isSink": "no"
            },
            {
                "name": "equals",
                "isSink": "no"
            },
            {
                "name": "getInstance",
                "isSink": "no"
            },
            {
                "name": "copyOf",
                "isSink": "no"
            },
            {
                "name": "getInputStream",
                "isSink": "no"
            },
            {
                "name": "doFinal",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "BAD_AAS_unsafeMacCheckWithDoFinalWithOutputArray.java",
        "variables": [
            {
                "name": "expectedMac",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "is",
                        "type": "InputStream",
                        "context": "    public boolean unsafeMacCheckWithDoFinalWithOutputArray(Socket socket) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            byte[] data = readBytes(is, 100);\r\n            Mac mac = Mac.getInstance(\"HmacSHA256\");\r\n            byte[] actualMac = new byte[256];\r\n |             mac.update(data);\r\n            mac.doFinal(actualMac, 0);\r\n            byte[] expectedMac = readBytes(is, 256);\r\n            return Arrays.equals(expectedMac, actualMac);\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n",
                        "nextNode": "bytes"
                    },
                    {
                        "name": "InputStream is",
                        "type": "InputStream",
                        "context": "    }\r\n\r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n",
                        "nextNode": "is"
                    },
                    {
                        "name": "bytes",
                        "type": "byte[]",
                        "context": "        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |             return Arrays.copyOf(bytes, offset);\r\n        }\r\n        return bytes;\r\n    }\r\n}\r\n",
                        "nextNode": "readBytes(is, 256)"
                    },
                    {
                        "name": "readBytes(is, 256)",
                        "type": "byte[]",
                        "context": "            mac.update(data);\r\n            mac.doFinal(actualMac, 0);\r\n            byte[] expectedMac = readBytes(is, 256);\r\n            return Arrays.equals(expectedMac, actualMac);\r\n        }\r\n",
                        "nextNode": "expectedMac"
                    },
                    {
                        "name": "expectedMac",
                        "type": "Dataflow from `is` to `expectedMac`\nDataflow from `is` to `expectedMac`\nDataflow from `offset` to `expectedMac`\nDataflow from `is` to `expectedMac`\nDataflow from `bytes` to `expectedMac`\nDataflow from `offset` to `expectedMac`\nDataflow from `offset` to `expectedMac`\nDataflow from `offset` to `expectedMac`\nDataflow from `bytes` to `expectedMac`\nDataflow from `offset` to `expectedMac`\nDataflow from `bytes` to `expectedMac`\nDataflow from `readBytes(...)` to `expectedMac`\nDataflow from `getInputStream(...)` to `expectedMac`\nDataflow from `256` to `expectedMac`\nDataflow from `0` to `expectedMac`\nDataflow from `copyOf(...)` to `expectedMac`",
                        "context": "            mac.doFinal(actualMac, 0);\r\n            byte[] expectedMac = readBytes(is, 256);\r\n            return Arrays.equals(expectedMac, actualMac);\r\n        }\r\n    }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "numBytes",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "100",
                        "type": "Number",
                        "context": "    public boolean unsafeMacCheckWithDoFinalWithOutputArray(Socket socket) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            byte[] data = readBytes(is, 100);\r\n            Mac mac = Mac.getInstance(\"HmacSHA256\");\r\n            byte[] actualMac = new byte[256];\r\n |     public boolean unsafeMacCheckWithDoFinalWithOutputArray(Socket socket) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            byte[] data = readBytes(is, 100);\r\n            Mac mac = Mac.getInstance(\"HmacSHA256\");\r\n            byte[] actualMac = new byte[256];\r\n |     public boolean unsafeMacCheckWithDoFinalWithOutputArray(Socket socket) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            byte[] data = readBytes(is, 100);\r\n            Mac mac = Mac.getInstance(\"HmacSHA256\");\r\n            byte[] actualMac = new byte[256];\r\n |     public boolean unsafeMacCheckWithDoFinalWithOutputArray(Socket socket) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            byte[] data = readBytes(is, 100);\r\n            Mac mac = Mac.getInstance(\"HmacSHA256\");\r\n            byte[] actualMac = new byte[256];\r\n",
                        "nextNode": "int numBytes"
                    },
                    {
                        "name": "int numBytes",
                        "type": "Number",
                        "context": "    }\r\n\r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n |     }\r\n\r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n |     }\r\n\r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n |     }\r\n\r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n",
                        "nextNode": "numBytes]"
                    },
                    {
                        "name": "numBytes]",
                        "type": "Dataflow from `100` to `numBytes`\nDataflow from `256` to `numBytes`",
                        "context": "\r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n        int read;\r\n | \r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n        int read;\r\n | \r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n        int read;\r\n | \r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n        int read;\r\n",
                        "nextNode": "numBytes"
                    },
                    {
                        "name": "numBytes",
                        "type": "Dataflow from `100` to `numBytes`\nDataflow from `256` to `numBytes`",
                        "context": "        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |             offset += read;\r\n        }\r\n        if (offset < numBytes) {\r\n            return Arrays.copyOf(bytes, offset);\r\n        }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "read",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "is",
                        "type": "InputStream",
                        "context": "    public boolean unsafeMacCheckWithDoFinalWithOutputArray(Socket socket) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            byte[] data = readBytes(is, 100);\r\n            Mac mac = Mac.getInstance(\"HmacSHA256\");\r\n            byte[] actualMac = new byte[256];\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n",
                        "nextNode": "bytes"
                    },
                    {
                        "name": "InputStream is",
                        "type": "InputStream",
                        "context": "    }\r\n\r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n",
                        "nextNode": "is"
                    },
                    {
                        "name": "bytes",
                        "type": "byte[]",
                        "context": "        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n",
                        "nextNode": "is.read(bytes, offset, numBytes - offset)"
                    },
                    {
                        "name": "is.read(bytes, offset, numBytes - offset)",
                        "type": "Number",
                        "context": "        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n",
                        "nextNode": "read"
                    },
                    {
                        "name": "read",
                        "type": "Dataflow from `is` to `read`\nDataflow from `is` to `read`\nDataflow from `offset` to `read`\nDataflow from `is` to `read`\nDataflow from `bytes` to `read`\nDataflow from `offset` to `read`\nDataflow from `getInputStream(...)` to `read`\nDataflow from `0` to `read`\nDataflow from `read(...)` to `read`",
                        "context": "        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n        if (offset < numBytes) {\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "data",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "is",
                        "type": "InputStream",
                        "context": "    public boolean unsafeMacCheckWithDoFinalWithOutputArray(Socket socket) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            byte[] data = readBytes(is, 100);\r\n            Mac mac = Mac.getInstance(\"HmacSHA256\");\r\n            byte[] actualMac = new byte[256];\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n",
                        "nextNode": "bytes"
                    },
                    {
                        "name": "InputStream is",
                        "type": "InputStream",
                        "context": "    }\r\n\r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n",
                        "nextNode": "is"
                    },
                    {
                        "name": "bytes",
                        "type": "byte[]",
                        "context": "        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |             return Arrays.copyOf(bytes, offset);\r\n        }\r\n        return bytes;\r\n    }\r\n}\r\n",
                        "nextNode": "readBytes(is, 100)"
                    },
                    {
                        "name": "readBytes(is, 100)",
                        "type": "byte[]",
                        "context": "    public boolean unsafeMacCheckWithDoFinalWithOutputArray(Socket socket) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            byte[] data = readBytes(is, 100);\r\n            Mac mac = Mac.getInstance(\"HmacSHA256\");\r\n            byte[] actualMac = new byte[256];\r\n",
                        "nextNode": "data"
                    },
                    {
                        "name": "data",
                        "type": "Dataflow from `is` to `data`\nDataflow from `offset` to `data`\nDataflow from `is` to `data`\nDataflow from `bytes` to `data`\nDataflow from `offset` to `data`\nDataflow from `offset` to `data`\nDataflow from `offset` to `data`\nDataflow from `bytes` to `data`\nDataflow from `offset` to `data`\nDataflow from `bytes` to `data`\nDataflow from `readBytes(...)` to `data`\nDataflow from `getInputStream(...)` to `data`\nDataflow from `100` to `data`\nDataflow from `0` to `data`\nDataflow from `copyOf(...)` to `data`",
                        "context": "            Mac mac = Mac.getInstance(\"HmacSHA256\");\r\n            byte[] actualMac = new byte[256];\r\n            mac.update(data);\r\n            mac.doFinal(actualMac, 0);\r\n            byte[] expectedMac = readBytes(is, 256);\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "actualMac",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "offset",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "0",
                        "type": "Number",
                        "context": "    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n |     private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n |     private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n |     private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n |     private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n |     private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n",
                        "nextNode": "offset"
                    },
                    {
                        "name": "offset",
                        "type": "Dataflow from `0` to `offset`",
                        "context": "        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n        if (offset < numBytes) {\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |             offset += read;\r\n        }\r\n        if (offset < numBytes) {\r\n            return Arrays.copyOf(bytes, offset);\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |             offset += read;\r\n        }\r\n        if (offset < numBytes) {\r\n            return Arrays.copyOf(bytes, offset);\r\n        }\r\n |         }\r\n        if (offset < numBytes) {\r\n            return Arrays.copyOf(bytes, offset);\r\n        }\r\n        return bytes;\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "bytes",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "is",
                        "type": "InputStream",
                        "context": "    public boolean unsafeMacCheckWithDoFinalWithOutputArray(Socket socket) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            byte[] data = readBytes(is, 100);\r\n            Mac mac = Mac.getInstance(\"HmacSHA256\");\r\n            byte[] actualMac = new byte[256];\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |     public boolean unsafeMacCheckWithDoFinalWithOutputArray(Socket socket) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            byte[] data = readBytes(is, 100);\r\n            Mac mac = Mac.getInstance(\"HmacSHA256\");\r\n            byte[] actualMac = new byte[256];\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |     public boolean unsafeMacCheckWithDoFinalWithOutputArray(Socket socket) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            byte[] data = readBytes(is, 100);\r\n            Mac mac = Mac.getInstance(\"HmacSHA256\");\r\n            byte[] actualMac = new byte[256];\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n",
                        "nextNode": "bytes"
                    },
                    {
                        "name": "InputStream is",
                        "type": "InputStream",
                        "context": "    }\r\n\r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n |     }\r\n\r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n |     }\r\n\r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n",
                        "nextNode": "is"
                    },
                    {
                        "name": "bytes",
                        "type": "byte[]",
                        "context": "        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         }\r\n        if (offset < numBytes) {\r\n            return Arrays.copyOf(bytes, offset);\r\n        }\r\n        return bytes;\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |             return Arrays.copyOf(bytes, offset);\r\n        }\r\n        return bytes;\r\n    }\r\n}\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "is",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "socket.getInputStream()",
                        "type": "InputStream",
                        "context": "public class BAD_AAS_unsafeMacCheckWithDoFinalWithOutputArray {\r\n    public boolean unsafeMacCheckWithDoFinalWithOutputArray(Socket socket) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            byte[] data = readBytes(is, 100);\r\n            Mac mac = Mac.getInstance(\"HmacSHA256\");\r\n | public class BAD_AAS_unsafeMacCheckWithDoFinalWithOutputArray {\r\n    public boolean unsafeMacCheckWithDoFinalWithOutputArray(Socket socket) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            byte[] data = readBytes(is, 100);\r\n            Mac mac = Mac.getInstance(\"HmacSHA256\");\r\n | public class BAD_AAS_unsafeMacCheckWithDoFinalWithOutputArray {\r\n    public boolean unsafeMacCheckWithDoFinalWithOutputArray(Socket socket) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            byte[] data = readBytes(is, 100);\r\n            Mac mac = Mac.getInstance(\"HmacSHA256\");\r\n",
                        "nextNode": "is"
                    },
                    {
                        "name": "InputStream is",
                        "type": "InputStream",
                        "context": "    }\r\n\r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n",
                        "nextNode": "is"
                    },
                    {
                        "name": "is",
                        "type": "Dataflow from `getInputStream(...)` to `is`",
                        "context": "    public boolean unsafeMacCheckWithDoFinalWithOutputArray(Socket socket) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            byte[] data = readBytes(is, 100);\r\n            Mac mac = Mac.getInstance(\"HmacSHA256\");\r\n            byte[] actualMac = new byte[256];\r\n |     public boolean unsafeMacCheckWithDoFinalWithOutputArray(Socket socket) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            byte[] data = readBytes(is, 100);\r\n            Mac mac = Mac.getInstance(\"HmacSHA256\");\r\n            byte[] actualMac = new byte[256];\r\n |             mac.update(data);\r\n            mac.doFinal(actualMac, 0);\r\n            byte[] expectedMac = readBytes(is, 256);\r\n            return Arrays.equals(expectedMac, actualMac);\r\n        }\r\n |     public boolean unsafeMacCheckWithDoFinalWithOutputArray(Socket socket) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            byte[] data = readBytes(is, 100);\r\n            Mac mac = Mac.getInstance(\"HmacSHA256\");\r\n            byte[] actualMac = new byte[256];\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "socket",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "mac",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "Mac.getInstance(\"HmacSHA256\")",
                        "type": "Mac",
                        "context": "        try (InputStream is = socket.getInputStream()) {\r\n            byte[] data = readBytes(is, 100);\r\n            Mac mac = Mac.getInstance(\"HmacSHA256\");\r\n            byte[] actualMac = new byte[256];\r\n            mac.update(data);\r\n |         try (InputStream is = socket.getInputStream()) {\r\n            byte[] data = readBytes(is, 100);\r\n            Mac mac = Mac.getInstance(\"HmacSHA256\");\r\n            byte[] actualMac = new byte[256];\r\n            mac.update(data);\r\n",
                        "nextNode": "mac"
                    },
                    {
                        "name": "mac",
                        "type": "Dataflow from `getInstance(...)` to `mac`\nDataflow from `\"HmacSHA256\"` to `mac`",
                        "context": "            Mac mac = Mac.getInstance(\"HmacSHA256\");\r\n            byte[] actualMac = new byte[256];\r\n            mac.update(data);\r\n            mac.doFinal(actualMac, 0);\r\n            byte[] expectedMac = readBytes(is, 256);\r\n |             Mac mac = Mac.getInstance(\"HmacSHA256\");\r\n            byte[] actualMac = new byte[256];\r\n            mac.update(data);\r\n            mac.doFinal(actualMac, 0);\r\n            byte[] expectedMac = readBytes(is, 256);\r\n |             byte[] actualMac = new byte[256];\r\n            mac.update(data);\r\n            mac.doFinal(actualMac, 0);\r\n            byte[] expectedMac = readBytes(is, 256);\r\n            return Arrays.equals(expectedMac, actualMac);\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "HmacSHA256",
                "isSensitive": "yes"
            }
        ],
        "comments": [],
        "sinks": [
            {
                "name": "read",
                "isSink": "no"
            },
            {
                "name": "equals",
                "isSink": "no"
            },
            {
                "name": "readBytes",
                "isSink": "no"
            },
            {
                "name": "update",
                "isSink": "no"
            },
            {
                "name": "getInstance",
                "isSink": "no"
            },
            {
                "name": "copyOf",
                "isSink": "no"
            },
            {
                "name": "getInputStream",
                "isSink": "no"
            },
            {
                "name": "doFinal",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "GOOD_AAS_compareMacWithConstant.java",
        "variables": [
            {
                "name": "numBytes",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "1024",
                        "type": "Number",
                        "context": "        try (InputStream is = socket.getInputStream()) {\r\n            Mac mac = Mac.getInstance(\"HmacSHA256\");\r\n            byte[] data = readBytes(is, 1024);\r\n            byte[] actualMac = mac.doFinal(data);\r\n            return \"constant\".equals(new String(actualMac));\r\n |         try (InputStream is = socket.getInputStream()) {\r\n            Mac mac = Mac.getInstance(\"HmacSHA256\");\r\n            byte[] data = readBytes(is, 1024);\r\n            byte[] actualMac = mac.doFinal(data);\r\n            return \"constant\".equals(new String(actualMac));\r\n |         try (InputStream is = socket.getInputStream()) {\r\n            Mac mac = Mac.getInstance(\"HmacSHA256\");\r\n            byte[] data = readBytes(is, 1024);\r\n            byte[] actualMac = mac.doFinal(data);\r\n            return \"constant\".equals(new String(actualMac));\r\n |         try (InputStream is = socket.getInputStream()) {\r\n            Mac mac = Mac.getInstance(\"HmacSHA256\");\r\n            byte[] data = readBytes(is, 1024);\r\n            byte[] actualMac = mac.doFinal(data);\r\n            return \"constant\".equals(new String(actualMac));\r\n",
                        "nextNode": "int numBytes"
                    },
                    {
                        "name": "int numBytes",
                        "type": "Number",
                        "context": "    }\r\n\r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n |     }\r\n\r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n |     }\r\n\r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n |     }\r\n\r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n",
                        "nextNode": "numBytes]"
                    },
                    {
                        "name": "numBytes]",
                        "type": "Dataflow from `1024` to `numBytes`",
                        "context": "\r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n        int read;\r\n | \r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n        int read;\r\n | \r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n        int read;\r\n | \r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n        int read;\r\n",
                        "nextNode": "numBytes"
                    },
                    {
                        "name": "numBytes",
                        "type": "Dataflow from `1024` to `numBytes`",
                        "context": "        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |             offset += read;\r\n        }\r\n        if (offset < numBytes) {\r\n            return Arrays.copyOf(bytes, offset);\r\n        }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "read",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "is",
                        "type": "InputStream",
                        "context": "        try (InputStream is = socket.getInputStream()) {\r\n            Mac mac = Mac.getInstance(\"HmacSHA256\");\r\n            byte[] data = readBytes(is, 1024);\r\n            byte[] actualMac = mac.doFinal(data);\r\n            return \"constant\".equals(new String(actualMac));\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n",
                        "nextNode": "bytes"
                    },
                    {
                        "name": "InputStream is",
                        "type": "InputStream",
                        "context": "    }\r\n\r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n",
                        "nextNode": "is"
                    },
                    {
                        "name": "bytes",
                        "type": "byte[]",
                        "context": "        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n",
                        "nextNode": "is.read(bytes, offset, numBytes - offset)"
                    },
                    {
                        "name": "is.read(bytes, offset, numBytes - offset)",
                        "type": "Number",
                        "context": "        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n",
                        "nextNode": "read"
                    },
                    {
                        "name": "read",
                        "type": "Dataflow from `is` to `read`\nDataflow from `offset` to `read`\nDataflow from `is` to `read`\nDataflow from `bytes` to `read`\nDataflow from `offset` to `read`\nDataflow from `getInputStream(...)` to `read`\nDataflow from `0` to `read`\nDataflow from `read(...)` to `read`",
                        "context": "        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n        if (offset < numBytes) {\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "data",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "is",
                        "type": "InputStream",
                        "context": "        try (InputStream is = socket.getInputStream()) {\r\n            Mac mac = Mac.getInstance(\"HmacSHA256\");\r\n            byte[] data = readBytes(is, 1024);\r\n            byte[] actualMac = mac.doFinal(data);\r\n            return \"constant\".equals(new String(actualMac));\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n",
                        "nextNode": "bytes"
                    },
                    {
                        "name": "InputStream is",
                        "type": "InputStream",
                        "context": "    }\r\n\r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n",
                        "nextNode": "is"
                    },
                    {
                        "name": "bytes",
                        "type": "byte[]",
                        "context": "        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |             return Arrays.copyOf(bytes, offset);\r\n        }\r\n        return bytes;\r\n    }\r\n}\r\n",
                        "nextNode": "readBytes(is, 1024)"
                    },
                    {
                        "name": "readBytes(is, 1024)",
                        "type": "byte[]",
                        "context": "        try (InputStream is = socket.getInputStream()) {\r\n            Mac mac = Mac.getInstance(\"HmacSHA256\");\r\n            byte[] data = readBytes(is, 1024);\r\n            byte[] actualMac = mac.doFinal(data);\r\n            return \"constant\".equals(new String(actualMac));\r\n",
                        "nextNode": "data"
                    },
                    {
                        "name": "data",
                        "type": "Dataflow from `is` to `data`\nDataflow from `offset` to `data`\nDataflow from `is` to `data`\nDataflow from `bytes` to `data`\nDataflow from `offset` to `data`\nDataflow from `offset` to `data`\nDataflow from `offset` to `data`\nDataflow from `bytes` to `data`\nDataflow from `offset` to `data`\nDataflow from `bytes` to `data`\nDataflow from `readBytes(...)` to `data`\nDataflow from `getInputStream(...)` to `data`\nDataflow from `1024` to `data`\nDataflow from `0` to `data`\nDataflow from `copyOf(...)` to `data`",
                        "context": "            Mac mac = Mac.getInstance(\"HmacSHA256\");\r\n            byte[] data = readBytes(is, 1024);\r\n            byte[] actualMac = mac.doFinal(data);\r\n            return \"constant\".equals(new String(actualMac));\r\n        }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "actualMac",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "is",
                        "type": "InputStream",
                        "context": "        try (InputStream is = socket.getInputStream()) {\r\n            Mac mac = Mac.getInstance(\"HmacSHA256\");\r\n            byte[] data = readBytes(is, 1024);\r\n            byte[] actualMac = mac.doFinal(data);\r\n            return \"constant\".equals(new String(actualMac));\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n",
                        "nextNode": "bytes"
                    },
                    {
                        "name": "InputStream is",
                        "type": "InputStream",
                        "context": "    }\r\n\r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n",
                        "nextNode": "is"
                    },
                    {
                        "name": "bytes",
                        "type": "byte[]",
                        "context": "        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |             return Arrays.copyOf(bytes, offset);\r\n        }\r\n        return bytes;\r\n    }\r\n}\r\n",
                        "nextNode": "readBytes(is, 1024)"
                    },
                    {
                        "name": "readBytes(is, 1024)",
                        "type": "byte[]",
                        "context": "        try (InputStream is = socket.getInputStream()) {\r\n            Mac mac = Mac.getInstance(\"HmacSHA256\");\r\n            byte[] data = readBytes(is, 1024);\r\n            byte[] actualMac = mac.doFinal(data);\r\n            return \"constant\".equals(new String(actualMac));\r\n",
                        "nextNode": "data"
                    },
                    {
                        "name": "data",
                        "type": "byte[]",
                        "context": "            Mac mac = Mac.getInstance(\"HmacSHA256\");\r\n            byte[] data = readBytes(is, 1024);\r\n            byte[] actualMac = mac.doFinal(data);\r\n            return \"constant\".equals(new String(actualMac));\r\n        }\r\n",
                        "nextNode": "mac.doFinal(data)"
                    },
                    {
                        "name": "mac.doFinal(data)",
                        "type": "byte[]",
                        "context": "            Mac mac = Mac.getInstance(\"HmacSHA256\");\r\n            byte[] data = readBytes(is, 1024);\r\n            byte[] actualMac = mac.doFinal(data);\r\n            return \"constant\".equals(new String(actualMac));\r\n        }\r\n",
                        "nextNode": "actualMac"
                    },
                    {
                        "name": "actualMac",
                        "type": "Dataflow from `is` to `actualMac`\nDataflow from `data` to `actualMac`\nDataflow from `offset` to `actualMac`\nDataflow from `is` to `actualMac`\nDataflow from `bytes` to `actualMac`\nDataflow from `offset` to `actualMac`\nDataflow from `offset` to `actualMac`\nDataflow from `offset` to `actualMac`\nDataflow from `bytes` to `actualMac`\nDataflow from `offset` to `actualMac`\nDataflow from `bytes` to `actualMac`\nDataflow from `readBytes(...)` to `actualMac`\nDataflow from `getInputStream(...)` to `actualMac`\nDataflow from `1024` to `actualMac`\nDataflow from `doFinal(...)` to `actualMac`\nDataflow from `0` to `actualMac`\nDataflow from `copyOf(...)` to `actualMac`",
                        "context": "            byte[] data = readBytes(is, 1024);\r\n            byte[] actualMac = mac.doFinal(data);\r\n            return \"constant\".equals(new String(actualMac));\r\n        }\r\n    }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "offset",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "0",
                        "type": "Number",
                        "context": "    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n |     private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n |     private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n |     private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n |     private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n |     private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n",
                        "nextNode": "offset"
                    },
                    {
                        "name": "offset",
                        "type": "Dataflow from `0` to `offset`",
                        "context": "        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n        if (offset < numBytes) {\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |             offset += read;\r\n        }\r\n        if (offset < numBytes) {\r\n            return Arrays.copyOf(bytes, offset);\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |             offset += read;\r\n        }\r\n        if (offset < numBytes) {\r\n            return Arrays.copyOf(bytes, offset);\r\n        }\r\n |         }\r\n        if (offset < numBytes) {\r\n            return Arrays.copyOf(bytes, offset);\r\n        }\r\n        return bytes;\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "bytes",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "is",
                        "type": "InputStream",
                        "context": "        try (InputStream is = socket.getInputStream()) {\r\n            Mac mac = Mac.getInstance(\"HmacSHA256\");\r\n            byte[] data = readBytes(is, 1024);\r\n            byte[] actualMac = mac.doFinal(data);\r\n            return \"constant\".equals(new String(actualMac));\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         try (InputStream is = socket.getInputStream()) {\r\n            Mac mac = Mac.getInstance(\"HmacSHA256\");\r\n            byte[] data = readBytes(is, 1024);\r\n            byte[] actualMac = mac.doFinal(data);\r\n            return \"constant\".equals(new String(actualMac));\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         try (InputStream is = socket.getInputStream()) {\r\n            Mac mac = Mac.getInstance(\"HmacSHA256\");\r\n            byte[] data = readBytes(is, 1024);\r\n            byte[] actualMac = mac.doFinal(data);\r\n            return \"constant\".equals(new String(actualMac));\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n",
                        "nextNode": "bytes"
                    },
                    {
                        "name": "InputStream is",
                        "type": "InputStream",
                        "context": "    }\r\n\r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n |     }\r\n\r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n |     }\r\n\r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n",
                        "nextNode": "is"
                    },
                    {
                        "name": "bytes",
                        "type": "byte[]",
                        "context": "        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         }\r\n        if (offset < numBytes) {\r\n            return Arrays.copyOf(bytes, offset);\r\n        }\r\n        return bytes;\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |             return Arrays.copyOf(bytes, offset);\r\n        }\r\n        return bytes;\r\n    }\r\n}\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "is",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "socket.getInputStream()",
                        "type": "InputStream",
                        "context": "public class GOOD_AAS_compareMacWithConstant {\r\n    public boolean compareMacWithConstant(Socket socket) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            Mac mac = Mac.getInstance(\"HmacSHA256\");\r\n            byte[] data = readBytes(is, 1024);\r\n | public class GOOD_AAS_compareMacWithConstant {\r\n    public boolean compareMacWithConstant(Socket socket) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            Mac mac = Mac.getInstance(\"HmacSHA256\");\r\n            byte[] data = readBytes(is, 1024);\r\n",
                        "nextNode": "is"
                    },
                    {
                        "name": "InputStream is",
                        "type": "InputStream",
                        "context": "    }\r\n\r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n",
                        "nextNode": "is"
                    },
                    {
                        "name": "is",
                        "type": "Dataflow from `getInputStream(...)` to `is`",
                        "context": "        try (InputStream is = socket.getInputStream()) {\r\n            Mac mac = Mac.getInstance(\"HmacSHA256\");\r\n            byte[] data = readBytes(is, 1024);\r\n            byte[] actualMac = mac.doFinal(data);\r\n            return \"constant\".equals(new String(actualMac));\r\n |         try (InputStream is = socket.getInputStream()) {\r\n            Mac mac = Mac.getInstance(\"HmacSHA256\");\r\n            byte[] data = readBytes(is, 1024);\r\n            byte[] actualMac = mac.doFinal(data);\r\n            return \"constant\".equals(new String(actualMac));\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "socket",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "mac",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "Mac.getInstance(\"HmacSHA256\")",
                        "type": "Mac",
                        "context": "    public boolean compareMacWithConstant(Socket socket) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            Mac mac = Mac.getInstance(\"HmacSHA256\");\r\n            byte[] data = readBytes(is, 1024);\r\n            byte[] actualMac = mac.doFinal(data);\r\n",
                        "nextNode": "mac"
                    },
                    {
                        "name": "mac",
                        "type": "Dataflow from `getInstance(...)` to `mac`\nDataflow from `\"HmacSHA256\"` to `mac`",
                        "context": "            Mac mac = Mac.getInstance(\"HmacSHA256\");\r\n            byte[] data = readBytes(is, 1024);\r\n            byte[] actualMac = mac.doFinal(data);\r\n            return \"constant\".equals(new String(actualMac));\r\n        }\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "HmacSHA256",
                "isSensitive": "yes"
            },
            {
                "name": "constant",
                "isSensitive": "yes"
            }
        ],
        "comments": [],
        "sinks": [
            {
                "name": "read",
                "isSink": "no"
            },
            {
                "name": "equals",
                "isSink": "no"
            },
            {
                "name": "readBytes",
                "isSink": "no"
            },
            {
                "name": "getInstance",
                "isSink": "no"
            },
            {
                "name": "copyOf",
                "isSink": "no"
            },
            {
                "name": "getInputStream",
                "isSink": "no"
            },
            {
                "name": "doFinal",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "GOOD_AAS_noUserInputWhenCheckingCiphertext.java",
        "variables": [
            {
                "name": "cipher",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "Cipher.getInstance(\"AES/CBC/PKCS5Padding\")",
                        "type": "Cipher",
                        "context": "        try (InputStream is = socket.getInputStream()) {\r\n            byte[] plaintext = readBytes(is, 100);\r\n            Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\r\n            cipher.init(Cipher.ENCRYPT_MODE, key);\r\n            byte[] tag = cipher.doFinal(plaintext);\r\n |         try (InputStream is = socket.getInputStream()) {\r\n            byte[] plaintext = readBytes(is, 100);\r\n            Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\r\n            cipher.init(Cipher.ENCRYPT_MODE, key);\r\n            byte[] tag = cipher.doFinal(plaintext);\r\n",
                        "nextNode": "cipher"
                    },
                    {
                        "name": "cipher",
                        "type": "Cipher",
                        "context": "            byte[] plaintext = readBytes(is, 100);\r\n            Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\r\n            cipher.init(Cipher.ENCRYPT_MODE, key);\r\n            byte[] tag = cipher.doFinal(plaintext);\r\n            byte[] expected = readBytes(is, 32);\r\n |             Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\r\n            cipher.init(Cipher.ENCRYPT_MODE, key);\r\n            byte[] tag = cipher.doFinal(plaintext);\r\n            byte[] expected = readBytes(is, 32);\r\n            return Arrays.equals(expected, tag);\r\n |             byte[] plaintext = readBytes(is, 100);\r\n            Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\r\n            cipher.init(Cipher.ENCRYPT_MODE, key);\r\n            byte[] tag = cipher.doFinal(plaintext);\r\n            byte[] expected = readBytes(is, 32);\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "numBytes",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "100",
                        "type": "Number",
                        "context": "    public boolean noUserInputWhenCheckingCiphertext(Socket socket, Key key) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            byte[] plaintext = readBytes(is, 100);\r\n            Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\r\n            cipher.init(Cipher.ENCRYPT_MODE, key);\r\n |     public boolean noUserInputWhenCheckingCiphertext(Socket socket, Key key) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            byte[] plaintext = readBytes(is, 100);\r\n            Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\r\n            cipher.init(Cipher.ENCRYPT_MODE, key);\r\n |     public boolean noUserInputWhenCheckingCiphertext(Socket socket, Key key) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            byte[] plaintext = readBytes(is, 100);\r\n            Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\r\n            cipher.init(Cipher.ENCRYPT_MODE, key);\r\n |     public boolean noUserInputWhenCheckingCiphertext(Socket socket, Key key) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            byte[] plaintext = readBytes(is, 100);\r\n            Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\r\n            cipher.init(Cipher.ENCRYPT_MODE, key);\r\n",
                        "nextNode": "int numBytes"
                    },
                    {
                        "name": "int numBytes",
                        "type": "Number",
                        "context": "    }\r\n\r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n |     }\r\n\r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n |     }\r\n\r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n |     }\r\n\r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n",
                        "nextNode": "numBytes]"
                    },
                    {
                        "name": "numBytes]",
                        "type": "Dataflow from `100` to `numBytes`\nDataflow from `32` to `numBytes`",
                        "context": "\r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n        int read;\r\n | \r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n        int read;\r\n | \r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n        int read;\r\n | \r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n        int read;\r\n",
                        "nextNode": "numBytes"
                    },
                    {
                        "name": "numBytes",
                        "type": "Dataflow from `100` to `numBytes`\nDataflow from `32` to `numBytes`",
                        "context": "        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |             offset += read;\r\n        }\r\n        if (offset < numBytes) {\r\n            return Arrays.copyOf(bytes, offset);\r\n        }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "read",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "is",
                        "type": "InputStream",
                        "context": "    public boolean noUserInputWhenCheckingCiphertext(Socket socket, Key key) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            byte[] plaintext = readBytes(is, 100);\r\n            Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\r\n            cipher.init(Cipher.ENCRYPT_MODE, key);\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n",
                        "nextNode": "bytes"
                    },
                    {
                        "name": "InputStream is",
                        "type": "InputStream",
                        "context": "    }\r\n\r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n",
                        "nextNode": "is"
                    },
                    {
                        "name": "bytes",
                        "type": "byte[]",
                        "context": "        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n",
                        "nextNode": "is.read(bytes, offset, numBytes - offset)"
                    },
                    {
                        "name": "is.read(bytes, offset, numBytes - offset)",
                        "type": "Number",
                        "context": "        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n",
                        "nextNode": "read"
                    },
                    {
                        "name": "read",
                        "type": "Dataflow from `is` to `read`\nDataflow from `is` to `read`\nDataflow from `offset` to `read`\nDataflow from `is` to `read`\nDataflow from `bytes` to `read`\nDataflow from `offset` to `read`\nDataflow from `getInputStream(...)` to `read`\nDataflow from `0` to `read`\nDataflow from `read(...)` to `read`",
                        "context": "        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n        if (offset < numBytes) {\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "offset",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "0",
                        "type": "Number",
                        "context": "    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n |     private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n |     private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n |     private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n |     private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n |     private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n",
                        "nextNode": "offset"
                    },
                    {
                        "name": "offset",
                        "type": "Dataflow from `0` to `offset`",
                        "context": "        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n        if (offset < numBytes) {\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |             offset += read;\r\n        }\r\n        if (offset < numBytes) {\r\n            return Arrays.copyOf(bytes, offset);\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |             offset += read;\r\n        }\r\n        if (offset < numBytes) {\r\n            return Arrays.copyOf(bytes, offset);\r\n        }\r\n |         }\r\n        if (offset < numBytes) {\r\n            return Arrays.copyOf(bytes, offset);\r\n        }\r\n        return bytes;\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "bytes",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "is",
                        "type": "InputStream",
                        "context": "    public boolean noUserInputWhenCheckingCiphertext(Socket socket, Key key) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            byte[] plaintext = readBytes(is, 100);\r\n            Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\r\n            cipher.init(Cipher.ENCRYPT_MODE, key);\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |     public boolean noUserInputWhenCheckingCiphertext(Socket socket, Key key) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            byte[] plaintext = readBytes(is, 100);\r\n            Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\r\n            cipher.init(Cipher.ENCRYPT_MODE, key);\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |     public boolean noUserInputWhenCheckingCiphertext(Socket socket, Key key) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            byte[] plaintext = readBytes(is, 100);\r\n            Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\r\n            cipher.init(Cipher.ENCRYPT_MODE, key);\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n",
                        "nextNode": "bytes"
                    },
                    {
                        "name": "InputStream is",
                        "type": "InputStream",
                        "context": "    }\r\n\r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n |     }\r\n\r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n |     }\r\n\r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n",
                        "nextNode": "is"
                    },
                    {
                        "name": "bytes",
                        "type": "byte[]",
                        "context": "        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         }\r\n        if (offset < numBytes) {\r\n            return Arrays.copyOf(bytes, offset);\r\n        }\r\n        return bytes;\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |             return Arrays.copyOf(bytes, offset);\r\n        }\r\n        return bytes;\r\n    }\r\n}",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "expected",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "is",
                        "type": "InputStream",
                        "context": "    public boolean noUserInputWhenCheckingCiphertext(Socket socket, Key key) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            byte[] plaintext = readBytes(is, 100);\r\n            Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\r\n            cipher.init(Cipher.ENCRYPT_MODE, key);\r\n |             cipher.init(Cipher.ENCRYPT_MODE, key);\r\n            byte[] tag = cipher.doFinal(plaintext);\r\n            byte[] expected = readBytes(is, 32);\r\n            return Arrays.equals(expected, tag);\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n",
                        "nextNode": "bytes"
                    },
                    {
                        "name": "InputStream is",
                        "type": "InputStream",
                        "context": "    }\r\n\r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n",
                        "nextNode": "is"
                    },
                    {
                        "name": "bytes",
                        "type": "byte[]",
                        "context": "        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |             return Arrays.copyOf(bytes, offset);\r\n        }\r\n        return bytes;\r\n    }\r\n}",
                        "nextNode": "readBytes(is, 32)"
                    },
                    {
                        "name": "readBytes(is, 32)",
                        "type": "byte[]",
                        "context": "            cipher.init(Cipher.ENCRYPT_MODE, key);\r\n            byte[] tag = cipher.doFinal(plaintext);\r\n            byte[] expected = readBytes(is, 32);\r\n            return Arrays.equals(expected, tag);\r\n        }\r\n",
                        "nextNode": "expected"
                    },
                    {
                        "name": "expected",
                        "type": "Dataflow from `is` to `expected`\nDataflow from `is` to `expected`\nDataflow from `offset` to `expected`\nDataflow from `is` to `expected`\nDataflow from `bytes` to `expected`\nDataflow from `offset` to `expected`\nDataflow from `offset` to `expected`\nDataflow from `offset` to `expected`\nDataflow from `bytes` to `expected`\nDataflow from `offset` to `expected`\nDataflow from `bytes` to `expected`\nDataflow from `readBytes(...)` to `expected`\nDataflow from `getInputStream(...)` to `expected`\nDataflow from `32` to `expected`\nDataflow from `0` to `expected`\nDataflow from `copyOf(...)` to `expected`",
                        "context": "            byte[] tag = cipher.doFinal(plaintext);\r\n            byte[] expected = readBytes(is, 32);\r\n            return Arrays.equals(expected, tag);\r\n        }\r\n    }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "is",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "socket.getInputStream()",
                        "type": "InputStream",
                        "context": "    // GOOD: compare ciphertexts using a constant-time method\r\n    public boolean noUserInputWhenCheckingCiphertext(Socket socket, Key key) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            byte[] plaintext = readBytes(is, 100);\r\n            Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\r\n |     // GOOD: compare ciphertexts using a constant-time method\r\n    public boolean noUserInputWhenCheckingCiphertext(Socket socket, Key key) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            byte[] plaintext = readBytes(is, 100);\r\n            Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\r\n |     // GOOD: compare ciphertexts using a constant-time method\r\n    public boolean noUserInputWhenCheckingCiphertext(Socket socket, Key key) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            byte[] plaintext = readBytes(is, 100);\r\n            Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\r\n",
                        "nextNode": "is"
                    },
                    {
                        "name": "InputStream is",
                        "type": "InputStream",
                        "context": "    }\r\n\r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n",
                        "nextNode": "is"
                    },
                    {
                        "name": "is",
                        "type": "Dataflow from `getInputStream(...)` to `is`",
                        "context": "    public boolean noUserInputWhenCheckingCiphertext(Socket socket, Key key) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            byte[] plaintext = readBytes(is, 100);\r\n            Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\r\n            cipher.init(Cipher.ENCRYPT_MODE, key);\r\n |     public boolean noUserInputWhenCheckingCiphertext(Socket socket, Key key) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            byte[] plaintext = readBytes(is, 100);\r\n            Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\r\n            cipher.init(Cipher.ENCRYPT_MODE, key);\r\n |             cipher.init(Cipher.ENCRYPT_MODE, key);\r\n            byte[] tag = cipher.doFinal(plaintext);\r\n            byte[] expected = readBytes(is, 32);\r\n            return Arrays.equals(expected, tag);\r\n        }\r\n |     public boolean noUserInputWhenCheckingCiphertext(Socket socket, Key key) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            byte[] plaintext = readBytes(is, 100);\r\n            Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\r\n            cipher.init(Cipher.ENCRYPT_MODE, key);\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "plaintext",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "is",
                        "type": "InputStream",
                        "context": "    public boolean noUserInputWhenCheckingCiphertext(Socket socket, Key key) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            byte[] plaintext = readBytes(is, 100);\r\n            Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\r\n            cipher.init(Cipher.ENCRYPT_MODE, key);\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n",
                        "nextNode": "bytes"
                    },
                    {
                        "name": "InputStream is",
                        "type": "InputStream",
                        "context": "    }\r\n\r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n",
                        "nextNode": "is"
                    },
                    {
                        "name": "bytes",
                        "type": "byte[]",
                        "context": "        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |             return Arrays.copyOf(bytes, offset);\r\n        }\r\n        return bytes;\r\n    }\r\n}",
                        "nextNode": "readBytes(is, 100)"
                    },
                    {
                        "name": "readBytes(is, 100)",
                        "type": "byte[]",
                        "context": "    public boolean noUserInputWhenCheckingCiphertext(Socket socket, Key key) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            byte[] plaintext = readBytes(is, 100);\r\n            Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\r\n            cipher.init(Cipher.ENCRYPT_MODE, key);\r\n",
                        "nextNode": "plaintext"
                    },
                    {
                        "name": "plaintext",
                        "type": "Dataflow from `is` to `plaintext`\nDataflow from `offset` to `plaintext`\nDataflow from `is` to `plaintext`\nDataflow from `bytes` to `plaintext`\nDataflow from `offset` to `plaintext`\nDataflow from `offset` to `plaintext`\nDataflow from `offset` to `plaintext`\nDataflow from `bytes` to `plaintext`\nDataflow from `offset` to `plaintext`\nDataflow from `bytes` to `plaintext`\nDataflow from `readBytes(...)` to `plaintext`\nDataflow from `getInputStream(...)` to `plaintext`\nDataflow from `100` to `plaintext`\nDataflow from `0` to `plaintext`\nDataflow from `copyOf(...)` to `plaintext`",
                        "context": "            Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\r\n            cipher.init(Cipher.ENCRYPT_MODE, key);\r\n            byte[] tag = cipher.doFinal(plaintext);\r\n            byte[] expected = readBytes(is, 32);\r\n            return Arrays.equals(expected, tag);\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "tag",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "is",
                        "type": "InputStream",
                        "context": "    public boolean noUserInputWhenCheckingCiphertext(Socket socket, Key key) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            byte[] plaintext = readBytes(is, 100);\r\n            Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\r\n            cipher.init(Cipher.ENCRYPT_MODE, key);\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n",
                        "nextNode": "bytes"
                    },
                    {
                        "name": "InputStream is",
                        "type": "InputStream",
                        "context": "    }\r\n\r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n",
                        "nextNode": "is"
                    },
                    {
                        "name": "bytes",
                        "type": "byte[]",
                        "context": "        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |             return Arrays.copyOf(bytes, offset);\r\n        }\r\n        return bytes;\r\n    }\r\n}",
                        "nextNode": "readBytes(is, 100)"
                    },
                    {
                        "name": "readBytes(is, 100)",
                        "type": "byte[]",
                        "context": "    public boolean noUserInputWhenCheckingCiphertext(Socket socket, Key key) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            byte[] plaintext = readBytes(is, 100);\r\n            Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\r\n            cipher.init(Cipher.ENCRYPT_MODE, key);\r\n",
                        "nextNode": "plaintext"
                    },
                    {
                        "name": "plaintext",
                        "type": "byte[]",
                        "context": "            Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\r\n            cipher.init(Cipher.ENCRYPT_MODE, key);\r\n            byte[] tag = cipher.doFinal(plaintext);\r\n            byte[] expected = readBytes(is, 32);\r\n            return Arrays.equals(expected, tag);\r\n",
                        "nextNode": "cipher.doFinal(plaintext)"
                    },
                    {
                        "name": "cipher.doFinal(plaintext)",
                        "type": "byte[]",
                        "context": "            Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\r\n            cipher.init(Cipher.ENCRYPT_MODE, key);\r\n            byte[] tag = cipher.doFinal(plaintext);\r\n            byte[] expected = readBytes(is, 32);\r\n            return Arrays.equals(expected, tag);\r\n",
                        "nextNode": "tag"
                    },
                    {
                        "name": "tag",
                        "type": "Dataflow from `is` to `tag`\nDataflow from `plaintext` to `tag`\nDataflow from `offset` to `tag`\nDataflow from `is` to `tag`\nDataflow from `bytes` to `tag`\nDataflow from `offset` to `tag`\nDataflow from `offset` to `tag`\nDataflow from `offset` to `tag`\nDataflow from `bytes` to `tag`\nDataflow from `offset` to `tag`\nDataflow from `bytes` to `tag`\nDataflow from `readBytes(...)` to `tag`\nDataflow from `getInputStream(...)` to `tag`\nDataflow from `100` to `tag`\nDataflow from `doFinal(...)` to `tag`\nDataflow from `0` to `tag`\nDataflow from `copyOf(...)` to `tag`",
                        "context": "            byte[] tag = cipher.doFinal(plaintext);\r\n            byte[] expected = readBytes(is, 32);\r\n            return Arrays.equals(expected, tag);\r\n        }\r\n    }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "socket",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "key",
                "isSensitive": "yes",
                "graph": []
            }
        ],
        "strings": [
            {
                "name": "AES/CBC/PKCS5Padding",
                "isSensitive": "yes"
            }
        ],
        "comments": [
            {
                "name": "GOOD: compare ciphertexts using a constant-time method",
                "isSensitive": "no"
            }
        ],
        "sinks": [
            {
                "name": "init",
                "isSink": "no"
            },
            {
                "name": "read",
                "isSink": "no"
            },
            {
                "name": "equals",
                "isSink": "no"
            },
            {
                "name": "readBytes",
                "isSink": "no"
            },
            {
                "name": "getInstance",
                "isSink": "no"
            },
            {
                "name": "copyOf",
                "isSink": "no"
            },
            {
                "name": "getInputStream",
                "isSink": "no"
            },
            {
                "name": "doFinal",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "GOOD_AAS_saferCheckCiphertext.java",
        "variables": [
            {
                "name": "cipher",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "Cipher.getInstance(\"AES/CBC/PKCS5Padding\")",
                        "type": "Cipher",
                        "context": "            md.update(plaintext);\r\n            byte[] hash = md.digest();\r\n            Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\r\n            cipher.init(Cipher.ENCRYPT_MODE, key);\r\n            byte[] tag = cipher.doFinal(hash);\r\n |             md.update(plaintext);\r\n            byte[] hash = md.digest();\r\n            Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\r\n            cipher.init(Cipher.ENCRYPT_MODE, key);\r\n            byte[] tag = cipher.doFinal(hash);\r\n",
                        "nextNode": "cipher"
                    },
                    {
                        "name": "cipher",
                        "type": "Cipher",
                        "context": "            byte[] hash = md.digest();\r\n            Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\r\n            cipher.init(Cipher.ENCRYPT_MODE, key);\r\n            byte[] tag = cipher.doFinal(hash);\r\n            byte[] expected = readBytes(is, tag.length);\r\n |             Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\r\n            cipher.init(Cipher.ENCRYPT_MODE, key);\r\n            byte[] tag = cipher.doFinal(hash);\r\n            byte[] expected = readBytes(is, tag.length);\r\n            return MessageDigest.isEqual(expected, tag);\r\n |             byte[] hash = md.digest();\r\n            Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\r\n            cipher.init(Cipher.ENCRYPT_MODE, key);\r\n            byte[] tag = cipher.doFinal(hash);\r\n            byte[] expected = readBytes(is, tag.length);\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "read",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "is",
                        "type": "InputStream",
                        "context": "    public boolean saferCheckCiphertext(Socket socket, Key key) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            byte[] plaintext = readBytes(is, 200); // Assuming 200 bytes to read\r\n            MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\r\n            md.update(plaintext);\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n",
                        "nextNode": "bytes"
                    },
                    {
                        "name": "InputStream is",
                        "type": "InputStream",
                        "context": "    }\r\n\r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n",
                        "nextNode": "is"
                    },
                    {
                        "name": "bytes",
                        "type": "byte[]",
                        "context": "        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n",
                        "nextNode": "is.read(bytes, offset, numBytes - offset)"
                    },
                    {
                        "name": "is.read(bytes, offset, numBytes - offset)",
                        "type": "Number",
                        "context": "        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n",
                        "nextNode": "read"
                    },
                    {
                        "name": "read",
                        "type": "Dataflow from `is` to `read`\nDataflow from `is` to `read`\nDataflow from `offset` to `read`\nDataflow from `is` to `read`\nDataflow from `bytes` to `read`\nDataflow from `offset` to `read`\nDataflow from `getInputStream(...)` to `read`\nDataflow from `0` to `read`\nDataflow from `read(...)` to `read`",
                        "context": "        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n        if (offset < numBytes) {\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "offset",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "0",
                        "type": "Number",
                        "context": "    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n |     private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n |     private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n |     private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n |     private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n |     private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n",
                        "nextNode": "offset"
                    },
                    {
                        "name": "offset",
                        "type": "Dataflow from `0` to `offset`",
                        "context": "        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n        if (offset < numBytes) {\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |             offset += read;\r\n        }\r\n        if (offset < numBytes) {\r\n            return Arrays.copyOf(bytes, offset);\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |             offset += read;\r\n        }\r\n        if (offset < numBytes) {\r\n            return Arrays.copyOf(bytes, offset);\r\n        }\r\n |         }\r\n        if (offset < numBytes) {\r\n            return Arrays.copyOf(bytes, offset);\r\n        }\r\n        return bytes;\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "expected",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "is",
                        "type": "InputStream",
                        "context": "    public boolean saferCheckCiphertext(Socket socket, Key key) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            byte[] plaintext = readBytes(is, 200); // Assuming 200 bytes to read\r\n            MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\r\n            md.update(plaintext);\r\n |             cipher.init(Cipher.ENCRYPT_MODE, key);\r\n            byte[] tag = cipher.doFinal(hash);\r\n            byte[] expected = readBytes(is, tag.length);\r\n            return MessageDigest.isEqual(expected, tag);\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n",
                        "nextNode": "bytes"
                    },
                    {
                        "name": "InputStream is",
                        "type": "InputStream",
                        "context": "    }\r\n\r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n",
                        "nextNode": "is"
                    },
                    {
                        "name": "bytes",
                        "type": "byte[]",
                        "context": "        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |             return Arrays.copyOf(bytes, offset);\r\n        }\r\n        return bytes;\r\n    }\r\n}\r\n",
                        "nextNode": "readBytes(is, tag.length)"
                    },
                    {
                        "name": "readBytes(is, tag.length)",
                        "type": "byte[]",
                        "context": "            cipher.init(Cipher.ENCRYPT_MODE, key);\r\n            byte[] tag = cipher.doFinal(hash);\r\n            byte[] expected = readBytes(is, tag.length);\r\n            return MessageDigest.isEqual(expected, tag);\r\n        }\r\n",
                        "nextNode": "expected"
                    },
                    {
                        "name": "expected",
                        "type": "Dataflow from `is` to `expected`\nDataflow from `is` to `expected`\nDataflow from `tag.length` to `expected`\nDataflow from `offset` to `expected`\nDataflow from `is` to `expected`\nDataflow from `bytes` to `expected`\nDataflow from `offset` to `expected`\nDataflow from `offset` to `expected`\nDataflow from `offset` to `expected`\nDataflow from `bytes` to `expected`\nDataflow from `offset` to `expected`\nDataflow from `bytes` to `expected`\nDataflow from `readBytes(...)` to `expected`\nDataflow from `getInputStream(...)` to `expected`\nDataflow from `0` to `expected`\nDataflow from `copyOf(...)` to `expected`",
                        "context": "            byte[] tag = cipher.doFinal(hash);\r\n            byte[] expected = readBytes(is, tag.length);\r\n            return MessageDigest.isEqual(expected, tag);\r\n        }\r\n    }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "is",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "socket.getInputStream()",
                        "type": "InputStream",
                        "context": "public class GOOD_AAS_saferCheckCiphertext {\r\n    public boolean saferCheckCiphertext(Socket socket, Key key) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            byte[] plaintext = readBytes(is, 200); // Assuming 200 bytes to read\r\n            MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\r\n | public class GOOD_AAS_saferCheckCiphertext {\r\n    public boolean saferCheckCiphertext(Socket socket, Key key) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            byte[] plaintext = readBytes(is, 200); // Assuming 200 bytes to read\r\n            MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\r\n | public class GOOD_AAS_saferCheckCiphertext {\r\n    public boolean saferCheckCiphertext(Socket socket, Key key) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            byte[] plaintext = readBytes(is, 200); // Assuming 200 bytes to read\r\n            MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\r\n",
                        "nextNode": "is"
                    },
                    {
                        "name": "InputStream is",
                        "type": "InputStream",
                        "context": "    }\r\n\r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n",
                        "nextNode": "is"
                    },
                    {
                        "name": "is",
                        "type": "Dataflow from `getInputStream(...)` to `is`",
                        "context": "    public boolean saferCheckCiphertext(Socket socket, Key key) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            byte[] plaintext = readBytes(is, 200); // Assuming 200 bytes to read\r\n            MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\r\n            md.update(plaintext);\r\n |     public boolean saferCheckCiphertext(Socket socket, Key key) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            byte[] plaintext = readBytes(is, 200); // Assuming 200 bytes to read\r\n            MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\r\n            md.update(plaintext);\r\n |             cipher.init(Cipher.ENCRYPT_MODE, key);\r\n            byte[] tag = cipher.doFinal(hash);\r\n            byte[] expected = readBytes(is, tag.length);\r\n            return MessageDigest.isEqual(expected, tag);\r\n        }\r\n |     public boolean saferCheckCiphertext(Socket socket, Key key) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            byte[] plaintext = readBytes(is, 200); // Assuming 200 bytes to read\r\n            MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\r\n            md.update(plaintext);\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "plaintext",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "is",
                        "type": "InputStream",
                        "context": "    public boolean saferCheckCiphertext(Socket socket, Key key) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            byte[] plaintext = readBytes(is, 200); // Assuming 200 bytes to read\r\n            MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\r\n            md.update(plaintext);\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n",
                        "nextNode": "bytes"
                    },
                    {
                        "name": "InputStream is",
                        "type": "InputStream",
                        "context": "    }\r\n\r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n",
                        "nextNode": "is"
                    },
                    {
                        "name": "bytes",
                        "type": "byte[]",
                        "context": "        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |             return Arrays.copyOf(bytes, offset);\r\n        }\r\n        return bytes;\r\n    }\r\n}\r\n",
                        "nextNode": "readBytes(is, 200)"
                    },
                    {
                        "name": "readBytes(is, 200)",
                        "type": "byte[]",
                        "context": "    public boolean saferCheckCiphertext(Socket socket, Key key) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            byte[] plaintext = readBytes(is, 200); // Assuming 200 bytes to read\r\n            MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\r\n            md.update(plaintext);\r\n",
                        "nextNode": "plaintext"
                    },
                    {
                        "name": "plaintext",
                        "type": "Dataflow from `is` to `plaintext`\nDataflow from `offset` to `plaintext`\nDataflow from `is` to `plaintext`\nDataflow from `bytes` to `plaintext`\nDataflow from `offset` to `plaintext`\nDataflow from `offset` to `plaintext`\nDataflow from `offset` to `plaintext`\nDataflow from `bytes` to `plaintext`\nDataflow from `offset` to `plaintext`\nDataflow from `bytes` to `plaintext`\nDataflow from `readBytes(...)` to `plaintext`\nDataflow from `getInputStream(...)` to `plaintext`\nDataflow from `200` to `plaintext`\nDataflow from `0` to `plaintext`\nDataflow from `copyOf(...)` to `plaintext`",
                        "context": "            byte[] plaintext = readBytes(is, 200); // Assuming 200 bytes to read\r\n            MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\r\n            md.update(plaintext);\r\n            byte[] hash = md.digest();\r\n            Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "numBytes",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "tag.length",
                        "type": "Number",
                        "context": "            cipher.init(Cipher.ENCRYPT_MODE, key);\r\n            byte[] tag = cipher.doFinal(hash);\r\n            byte[] expected = readBytes(is, tag.length);\r\n            return MessageDigest.isEqual(expected, tag);\r\n        }\r\n |             cipher.init(Cipher.ENCRYPT_MODE, key);\r\n            byte[] tag = cipher.doFinal(hash);\r\n            byte[] expected = readBytes(is, tag.length);\r\n            return MessageDigest.isEqual(expected, tag);\r\n        }\r\n |             cipher.init(Cipher.ENCRYPT_MODE, key);\r\n            byte[] tag = cipher.doFinal(hash);\r\n            byte[] expected = readBytes(is, tag.length);\r\n            return MessageDigest.isEqual(expected, tag);\r\n        }\r\n |             cipher.init(Cipher.ENCRYPT_MODE, key);\r\n            byte[] tag = cipher.doFinal(hash);\r\n            byte[] expected = readBytes(is, tag.length);\r\n            return MessageDigest.isEqual(expected, tag);\r\n        }\r\n",
                        "nextNode": "int numBytes"
                    },
                    {
                        "name": "int numBytes",
                        "type": "Number",
                        "context": "    }\r\n\r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n |     }\r\n\r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n |     }\r\n\r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n |     }\r\n\r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n",
                        "nextNode": "numBytes]"
                    },
                    {
                        "name": "numBytes]",
                        "type": "Dataflow from `tag.length` to `numBytes`\nDataflow from `200` to `numBytes`",
                        "context": "\r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n        int read;\r\n | \r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n        int read;\r\n | \r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n        int read;\r\n | \r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n        int read;\r\n",
                        "nextNode": "numBytes"
                    },
                    {
                        "name": "numBytes",
                        "type": "Dataflow from `tag.length` to `numBytes`\nDataflow from `200` to `numBytes`",
                        "context": "        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |             offset += read;\r\n        }\r\n        if (offset < numBytes) {\r\n            return Arrays.copyOf(bytes, offset);\r\n        }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "bytes",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "is",
                        "type": "InputStream",
                        "context": "    public boolean saferCheckCiphertext(Socket socket, Key key) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            byte[] plaintext = readBytes(is, 200); // Assuming 200 bytes to read\r\n            MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\r\n            md.update(plaintext);\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |     public boolean saferCheckCiphertext(Socket socket, Key key) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            byte[] plaintext = readBytes(is, 200); // Assuming 200 bytes to read\r\n            MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\r\n            md.update(plaintext);\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |     public boolean saferCheckCiphertext(Socket socket, Key key) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            byte[] plaintext = readBytes(is, 200); // Assuming 200 bytes to read\r\n            MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\r\n            md.update(plaintext);\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n",
                        "nextNode": "bytes"
                    },
                    {
                        "name": "InputStream is",
                        "type": "InputStream",
                        "context": "    }\r\n\r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n |     }\r\n\r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n |     }\r\n\r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n",
                        "nextNode": "is"
                    },
                    {
                        "name": "bytes",
                        "type": "byte[]",
                        "context": "        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         }\r\n        if (offset < numBytes) {\r\n            return Arrays.copyOf(bytes, offset);\r\n        }\r\n        return bytes;\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |             return Arrays.copyOf(bytes, offset);\r\n        }\r\n        return bytes;\r\n    }\r\n}\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "md",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "MessageDigest.getInstance(\"SHA-256\")",
                        "type": "MessageDigest",
                        "context": "        try (InputStream is = socket.getInputStream()) {\r\n            byte[] plaintext = readBytes(is, 200); // Assuming 200 bytes to read\r\n            MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\r\n            md.update(plaintext);\r\n            byte[] hash = md.digest();\r\n |         try (InputStream is = socket.getInputStream()) {\r\n            byte[] plaintext = readBytes(is, 200); // Assuming 200 bytes to read\r\n            MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\r\n            md.update(plaintext);\r\n            byte[] hash = md.digest();\r\n",
                        "nextNode": "md"
                    },
                    {
                        "name": "md",
                        "type": "MessageDigest",
                        "context": "            byte[] plaintext = readBytes(is, 200); // Assuming 200 bytes to read\r\n            MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\r\n            md.update(plaintext);\r\n            byte[] hash = md.digest();\r\n            Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\r\n |             MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\r\n            md.update(plaintext);\r\n            byte[] hash = md.digest();\r\n            Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\r\n            cipher.init(Cipher.ENCRYPT_MODE, key);\r\n |             byte[] plaintext = readBytes(is, 200); // Assuming 200 bytes to read\r\n            MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\r\n            md.update(plaintext);\r\n            byte[] hash = md.digest();\r\n            Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "tag",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "hash",
                        "type": "byte[]",
                        "context": "            Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\r\n            cipher.init(Cipher.ENCRYPT_MODE, key);\r\n            byte[] tag = cipher.doFinal(hash);\r\n            byte[] expected = readBytes(is, tag.length);\r\n            return MessageDigest.isEqual(expected, tag);\r\n |             Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\r\n            cipher.init(Cipher.ENCRYPT_MODE, key);\r\n            byte[] tag = cipher.doFinal(hash);\r\n            byte[] expected = readBytes(is, tag.length);\r\n            return MessageDigest.isEqual(expected, tag);\r\n",
                        "nextNode": "cipher.doFinal(hash)"
                    },
                    {
                        "name": "cipher.doFinal(hash)",
                        "type": "byte[]",
                        "context": "            Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\r\n            cipher.init(Cipher.ENCRYPT_MODE, key);\r\n            byte[] tag = cipher.doFinal(hash);\r\n            byte[] expected = readBytes(is, tag.length);\r\n            return MessageDigest.isEqual(expected, tag);\r\n |             Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\r\n            cipher.init(Cipher.ENCRYPT_MODE, key);\r\n            byte[] tag = cipher.doFinal(hash);\r\n            byte[] expected = readBytes(is, tag.length);\r\n            return MessageDigest.isEqual(expected, tag);\r\n",
                        "nextNode": "tag"
                    },
                    {
                        "name": "tag",
                        "type": "Dataflow from `hash` to `tag`\nDataflow from `digest(...)` to `tag`\nDataflow from `doFinal(...)` to `tag`",
                        "context": "            cipher.init(Cipher.ENCRYPT_MODE, key);\r\n            byte[] tag = cipher.doFinal(hash);\r\n            byte[] expected = readBytes(is, tag.length);\r\n            return MessageDigest.isEqual(expected, tag);\r\n        }\r\n |             cipher.init(Cipher.ENCRYPT_MODE, key);\r\n            byte[] tag = cipher.doFinal(hash);\r\n            byte[] expected = readBytes(is, tag.length);\r\n            return MessageDigest.isEqual(expected, tag);\r\n        }\r\n |             byte[] tag = cipher.doFinal(hash);\r\n            byte[] expected = readBytes(is, tag.length);\r\n            return MessageDigest.isEqual(expected, tag);\r\n        }\r\n    }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "socket",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "hash",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "md.digest()",
                        "type": "byte[]",
                        "context": "            MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\r\n            md.update(plaintext);\r\n            byte[] hash = md.digest();\r\n            Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\r\n            cipher.init(Cipher.ENCRYPT_MODE, key);\r\n",
                        "nextNode": "hash"
                    },
                    {
                        "name": "hash",
                        "type": "Dataflow from `digest(...)` to `hash`",
                        "context": "            Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\r\n            cipher.init(Cipher.ENCRYPT_MODE, key);\r\n            byte[] tag = cipher.doFinal(hash);\r\n            byte[] expected = readBytes(is, tag.length);\r\n            return MessageDigest.isEqual(expected, tag);\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "key",
                "isSensitive": "yes",
                "graph": []
            }
        ],
        "strings": [
            {
                "name": "SHA-256",
                "isSensitive": "yes"
            },
            {
                "name": "AES/CBC/PKCS5Padding",
                "isSensitive": "yes"
            }
        ],
        "comments": [
            {
                "name": "Assuming 200 bytes to read",
                "isSensitive": "no"
            }
        ],
        "sinks": [
            {
                "name": "init",
                "isSink": "no"
            },
            {
                "name": "read",
                "isSink": "yes"
            },
            {
                "name": "isEqual",
                "isSink": "no"
            },
            {
                "name": "digest",
                "isSink": "no"
            },
            {
                "name": "readBytes",
                "isSink": "no"
            },
            {
                "name": "update",
                "isSink": "no"
            },
            {
                "name": "getInstance",
                "isSink": "no"
            },
            {
                "name": "copyOf",
                "isSink": "no"
            },
            {
                "name": "getInputStream",
                "isSink": "yes"
            },
            {
                "name": "doFinal",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "GOOD_AAS_saferCheckSignatures.java",
        "variables": [
            {
                "name": "numBytes",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "1024",
                        "type": "Number",
                        "context": "            Signature engine = Signature.getInstance(\"SHA256withRSA\");\r\n            engine.initSign(key);\r\n            byte[] data = readBytes(is, 1024); // Assuming data to read is 1024 bytes\r\n            engine.update(data);\r\n            byte[] signature = engine.sign();\r\n |             Signature engine = Signature.getInstance(\"SHA256withRSA\");\r\n            engine.initSign(key);\r\n            byte[] data = readBytes(is, 1024); // Assuming data to read is 1024 bytes\r\n            engine.update(data);\r\n            byte[] signature = engine.sign();\r\n |             Signature engine = Signature.getInstance(\"SHA256withRSA\");\r\n            engine.initSign(key);\r\n            byte[] data = readBytes(is, 1024); // Assuming data to read is 1024 bytes\r\n            engine.update(data);\r\n            byte[] signature = engine.sign();\r\n |             Signature engine = Signature.getInstance(\"SHA256withRSA\");\r\n            engine.initSign(key);\r\n            byte[] data = readBytes(is, 1024); // Assuming data to read is 1024 bytes\r\n            engine.update(data);\r\n            byte[] signature = engine.sign();\r\n",
                        "nextNode": "int numBytes"
                    },
                    {
                        "name": "int numBytes",
                        "type": "Number",
                        "context": "    }\r\n\r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n |     }\r\n\r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n |     }\r\n\r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n |     }\r\n\r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n",
                        "nextNode": "numBytes]"
                    },
                    {
                        "name": "numBytes]",
                        "type": "Dataflow from `1024` to `numBytes`\nDataflow from `256` to `numBytes`",
                        "context": "\r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n        int read;\r\n | \r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n        int read;\r\n | \r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n        int read;\r\n | \r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n        int read;\r\n",
                        "nextNode": "numBytes"
                    },
                    {
                        "name": "numBytes",
                        "type": "Dataflow from `1024` to `numBytes`\nDataflow from `256` to `numBytes`",
                        "context": "        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |             offset += read;\r\n        }\r\n        if (offset < numBytes) {\r\n            return Arrays.copyOf(bytes, offset);\r\n        }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "read",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "is",
                        "type": "InputStream",
                        "context": "            Signature engine = Signature.getInstance(\"SHA256withRSA\");\r\n            engine.initSign(key);\r\n            byte[] data = readBytes(is, 1024); // Assuming data to read is 1024 bytes\r\n            engine.update(data);\r\n            byte[] signature = engine.sign();\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n",
                        "nextNode": "bytes"
                    },
                    {
                        "name": "InputStream is",
                        "type": "InputStream",
                        "context": "    }\r\n\r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n",
                        "nextNode": "is"
                    },
                    {
                        "name": "bytes",
                        "type": "byte[]",
                        "context": "        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n",
                        "nextNode": "is.read(bytes, offset, numBytes - offset)"
                    },
                    {
                        "name": "is.read(bytes, offset, numBytes - offset)",
                        "type": "Number",
                        "context": "        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n",
                        "nextNode": "read"
                    },
                    {
                        "name": "read",
                        "type": "Dataflow from `is` to `read`\nDataflow from `is` to `read`\nDataflow from `offset` to `read`\nDataflow from `is` to `read`\nDataflow from `bytes` to `read`\nDataflow from `offset` to `read`\nDataflow from `getInputStream(...)` to `read`\nDataflow from `0` to `read`\nDataflow from `read(...)` to `read`",
                        "context": "        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n        if (offset < numBytes) {\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "data",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "is",
                        "type": "InputStream",
                        "context": "            Signature engine = Signature.getInstance(\"SHA256withRSA\");\r\n            engine.initSign(key);\r\n            byte[] data = readBytes(is, 1024); // Assuming data to read is 1024 bytes\r\n            engine.update(data);\r\n            byte[] signature = engine.sign();\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n",
                        "nextNode": "bytes"
                    },
                    {
                        "name": "InputStream is",
                        "type": "InputStream",
                        "context": "    }\r\n\r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n",
                        "nextNode": "is"
                    },
                    {
                        "name": "bytes",
                        "type": "byte[]",
                        "context": "        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |             return Arrays.copyOf(bytes, offset);\r\n        }\r\n        return bytes;\r\n    }\r\n}\r\n",
                        "nextNode": "readBytes(is, 1024)"
                    },
                    {
                        "name": "readBytes(is, 1024)",
                        "type": "byte[]",
                        "context": "            Signature engine = Signature.getInstance(\"SHA256withRSA\");\r\n            engine.initSign(key);\r\n            byte[] data = readBytes(is, 1024); // Assuming data to read is 1024 bytes\r\n            engine.update(data);\r\n            byte[] signature = engine.sign();\r\n",
                        "nextNode": "data"
                    },
                    {
                        "name": "data",
                        "type": "Dataflow from `is` to `data`\nDataflow from `offset` to `data`\nDataflow from `is` to `data`\nDataflow from `bytes` to `data`\nDataflow from `offset` to `data`\nDataflow from `offset` to `data`\nDataflow from `offset` to `data`\nDataflow from `bytes` to `data`\nDataflow from `offset` to `data`\nDataflow from `bytes` to `data`\nDataflow from `readBytes(...)` to `data`\nDataflow from `getInputStream(...)` to `data`\nDataflow from `1024` to `data`\nDataflow from `0` to `data`\nDataflow from `copyOf(...)` to `data`",
                        "context": "            engine.initSign(key);\r\n            byte[] data = readBytes(is, 1024); // Assuming data to read is 1024 bytes\r\n            engine.update(data);\r\n            byte[] signature = engine.sign();\r\n            byte[] expected = readBytes(is, 256);\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "offset",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "0",
                        "type": "Number",
                        "context": "    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n |     private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n |     private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n |     private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n |     private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n |     private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n",
                        "nextNode": "offset"
                    },
                    {
                        "name": "offset",
                        "type": "Dataflow from `0` to `offset`",
                        "context": "        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n        if (offset < numBytes) {\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |             offset += read;\r\n        }\r\n        if (offset < numBytes) {\r\n            return Arrays.copyOf(bytes, offset);\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |             offset += read;\r\n        }\r\n        if (offset < numBytes) {\r\n            return Arrays.copyOf(bytes, offset);\r\n        }\r\n |         }\r\n        if (offset < numBytes) {\r\n            return Arrays.copyOf(bytes, offset);\r\n        }\r\n        return bytes;\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "engine",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "Signature.getInstance(\"SHA256withRSA\")",
                        "type": "Signature",
                        "context": "    public boolean saferCheckSignatures(Socket socket, PrivateKey key) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            Signature engine = Signature.getInstance(\"SHA256withRSA\");\r\n            engine.initSign(key);\r\n            byte[] data = readBytes(is, 1024); // Assuming data to read is 1024 bytes\r\n |     public boolean saferCheckSignatures(Socket socket, PrivateKey key) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            Signature engine = Signature.getInstance(\"SHA256withRSA\");\r\n            engine.initSign(key);\r\n            byte[] data = readBytes(is, 1024); // Assuming data to read is 1024 bytes\r\n |     public boolean saferCheckSignatures(Socket socket, PrivateKey key) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            Signature engine = Signature.getInstance(\"SHA256withRSA\");\r\n            engine.initSign(key);\r\n            byte[] data = readBytes(is, 1024); // Assuming data to read is 1024 bytes\r\n",
                        "nextNode": "engine"
                    },
                    {
                        "name": "engine",
                        "type": "Signature",
                        "context": "        try (InputStream is = socket.getInputStream()) {\r\n            Signature engine = Signature.getInstance(\"SHA256withRSA\");\r\n            engine.initSign(key);\r\n            byte[] data = readBytes(is, 1024); // Assuming data to read is 1024 bytes\r\n            engine.update(data);\r\n |             engine.initSign(key);\r\n            byte[] data = readBytes(is, 1024); // Assuming data to read is 1024 bytes\r\n            engine.update(data);\r\n            byte[] signature = engine.sign();\r\n            byte[] expected = readBytes(is, 256);\r\n |             byte[] data = readBytes(is, 1024); // Assuming data to read is 1024 bytes\r\n            engine.update(data);\r\n            byte[] signature = engine.sign();\r\n            byte[] expected = readBytes(is, 256);\r\n            return MessageDigest.isEqual(expected, signature);\r\n |         try (InputStream is = socket.getInputStream()) {\r\n            Signature engine = Signature.getInstance(\"SHA256withRSA\");\r\n            engine.initSign(key);\r\n            byte[] data = readBytes(is, 1024); // Assuming data to read is 1024 bytes\r\n            engine.update(data);\r\n |         try (InputStream is = socket.getInputStream()) {\r\n            Signature engine = Signature.getInstance(\"SHA256withRSA\");\r\n            engine.initSign(key);\r\n            byte[] data = readBytes(is, 1024); // Assuming data to read is 1024 bytes\r\n            engine.update(data);\r\n |             engine.initSign(key);\r\n            byte[] data = readBytes(is, 1024); // Assuming data to read is 1024 bytes\r\n            engine.update(data);\r\n            byte[] signature = engine.sign();\r\n            byte[] expected = readBytes(is, 256);\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "signature",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "engine.sign()",
                        "type": "byte[]",
                        "context": "            byte[] data = readBytes(is, 1024); // Assuming data to read is 1024 bytes\r\n            engine.update(data);\r\n            byte[] signature = engine.sign();\r\n            byte[] expected = readBytes(is, 256);\r\n            return MessageDigest.isEqual(expected, signature);\r\n",
                        "nextNode": "signature"
                    },
                    {
                        "name": "signature",
                        "type": "Dataflow from `sign(...)` to `signature`",
                        "context": "            byte[] signature = engine.sign();\r\n            byte[] expected = readBytes(is, 256);\r\n            return MessageDigest.isEqual(expected, signature);\r\n        }\r\n    }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "bytes",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "is",
                        "type": "InputStream",
                        "context": "            Signature engine = Signature.getInstance(\"SHA256withRSA\");\r\n            engine.initSign(key);\r\n            byte[] data = readBytes(is, 1024); // Assuming data to read is 1024 bytes\r\n            engine.update(data);\r\n            byte[] signature = engine.sign();\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |             Signature engine = Signature.getInstance(\"SHA256withRSA\");\r\n            engine.initSign(key);\r\n            byte[] data = readBytes(is, 1024); // Assuming data to read is 1024 bytes\r\n            engine.update(data);\r\n            byte[] signature = engine.sign();\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |             Signature engine = Signature.getInstance(\"SHA256withRSA\");\r\n            engine.initSign(key);\r\n            byte[] data = readBytes(is, 1024); // Assuming data to read is 1024 bytes\r\n            engine.update(data);\r\n            byte[] signature = engine.sign();\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n",
                        "nextNode": "bytes"
                    },
                    {
                        "name": "InputStream is",
                        "type": "InputStream",
                        "context": "    }\r\n\r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n |     }\r\n\r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n |     }\r\n\r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n",
                        "nextNode": "is"
                    },
                    {
                        "name": "bytes",
                        "type": "byte[]",
                        "context": "        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         }\r\n        if (offset < numBytes) {\r\n            return Arrays.copyOf(bytes, offset);\r\n        }\r\n        return bytes;\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |             return Arrays.copyOf(bytes, offset);\r\n        }\r\n        return bytes;\r\n    }\r\n}\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "expected",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "is",
                        "type": "InputStream",
                        "context": "            Signature engine = Signature.getInstance(\"SHA256withRSA\");\r\n            engine.initSign(key);\r\n            byte[] data = readBytes(is, 1024); // Assuming data to read is 1024 bytes\r\n            engine.update(data);\r\n            byte[] signature = engine.sign();\r\n |             engine.update(data);\r\n            byte[] signature = engine.sign();\r\n            byte[] expected = readBytes(is, 256);\r\n            return MessageDigest.isEqual(expected, signature);\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n",
                        "nextNode": "bytes"
                    },
                    {
                        "name": "InputStream is",
                        "type": "InputStream",
                        "context": "    }\r\n\r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n",
                        "nextNode": "is"
                    },
                    {
                        "name": "bytes",
                        "type": "byte[]",
                        "context": "        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |             return Arrays.copyOf(bytes, offset);\r\n        }\r\n        return bytes;\r\n    }\r\n}\r\n",
                        "nextNode": "readBytes(is, 256)"
                    },
                    {
                        "name": "readBytes(is, 256)",
                        "type": "byte[]",
                        "context": "            engine.update(data);\r\n            byte[] signature = engine.sign();\r\n            byte[] expected = readBytes(is, 256);\r\n            return MessageDigest.isEqual(expected, signature);\r\n        }\r\n",
                        "nextNode": "expected"
                    },
                    {
                        "name": "expected",
                        "type": "Dataflow from `is` to `expected`\nDataflow from `is` to `expected`\nDataflow from `offset` to `expected`\nDataflow from `is` to `expected`\nDataflow from `bytes` to `expected`\nDataflow from `offset` to `expected`\nDataflow from `offset` to `expected`\nDataflow from `offset` to `expected`\nDataflow from `bytes` to `expected`\nDataflow from `offset` to `expected`\nDataflow from `bytes` to `expected`\nDataflow from `readBytes(...)` to `expected`\nDataflow from `getInputStream(...)` to `expected`\nDataflow from `256` to `expected`\nDataflow from `0` to `expected`\nDataflow from `copyOf(...)` to `expected`",
                        "context": "            byte[] signature = engine.sign();\r\n            byte[] expected = readBytes(is, 256);\r\n            return MessageDigest.isEqual(expected, signature);\r\n        }\r\n    }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "is",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "socket.getInputStream()",
                        "type": "InputStream",
                        "context": "public class GOOD_AAS_saferCheckSignatures {\r\n    public boolean saferCheckSignatures(Socket socket, PrivateKey key) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            Signature engine = Signature.getInstance(\"SHA256withRSA\");\r\n            engine.initSign(key);\r\n | public class GOOD_AAS_saferCheckSignatures {\r\n    public boolean saferCheckSignatures(Socket socket, PrivateKey key) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            Signature engine = Signature.getInstance(\"SHA256withRSA\");\r\n            engine.initSign(key);\r\n | public class GOOD_AAS_saferCheckSignatures {\r\n    public boolean saferCheckSignatures(Socket socket, PrivateKey key) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            Signature engine = Signature.getInstance(\"SHA256withRSA\");\r\n            engine.initSign(key);\r\n",
                        "nextNode": "is"
                    },
                    {
                        "name": "InputStream is",
                        "type": "InputStream",
                        "context": "    }\r\n\r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n",
                        "nextNode": "is"
                    },
                    {
                        "name": "is",
                        "type": "Dataflow from `getInputStream(...)` to `is`",
                        "context": "            Signature engine = Signature.getInstance(\"SHA256withRSA\");\r\n            engine.initSign(key);\r\n            byte[] data = readBytes(is, 1024); // Assuming data to read is 1024 bytes\r\n            engine.update(data);\r\n            byte[] signature = engine.sign();\r\n |             Signature engine = Signature.getInstance(\"SHA256withRSA\");\r\n            engine.initSign(key);\r\n            byte[] data = readBytes(is, 1024); // Assuming data to read is 1024 bytes\r\n            engine.update(data);\r\n            byte[] signature = engine.sign();\r\n |             engine.update(data);\r\n            byte[] signature = engine.sign();\r\n            byte[] expected = readBytes(is, 256);\r\n            return MessageDigest.isEqual(expected, signature);\r\n        }\r\n |             Signature engine = Signature.getInstance(\"SHA256withRSA\");\r\n            engine.initSign(key);\r\n            byte[] data = readBytes(is, 1024); // Assuming data to read is 1024 bytes\r\n            engine.update(data);\r\n            byte[] signature = engine.sign();\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "socket",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "key",
                "isSensitive": "yes",
                "graph": []
            }
        ],
        "strings": [
            {
                "name": "SHA256withRSA",
                "isSensitive": "yes"
            }
        ],
        "comments": [
            {
                "name": "Assuming data to read is 1024 bytes",
                "isSensitive": "no"
            }
        ],
        "sinks": [
            {
                "name": "initSign",
                "isSink": "no"
            },
            {
                "name": "read",
                "isSink": "no"
            },
            {
                "name": "isEqual",
                "isSink": "no"
            },
            {
                "name": "sign",
                "isSink": "no"
            },
            {
                "name": "readBytes",
                "isSink": "no"
            },
            {
                "name": "update",
                "isSink": "no"
            },
            {
                "name": "getInstance",
                "isSink": "no"
            },
            {
                "name": "copyOf",
                "isSink": "no"
            },
            {
                "name": "getInputStream",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "GOOD_AAS_saferMacCheck.java",
        "variables": [
            {
                "name": "expectedMac",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "is",
                        "type": "InputStream",
                        "context": "        try (InputStream is = socket.getInputStream()) {\r\n            byte[] data = new byte[1024];\r\n            int readBytes = is.read(data);\r\n      \r\n            if (readBytes < data.length) {\r\n |             byte[] actualMac = mac.doFinal(data);\r\n\r\n            byte[] expectedMac = readBytes(is, 32);\r\n            return MessageDigest.isEqual(expectedMac, actualMac);\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n",
                        "nextNode": "bytes"
                    },
                    {
                        "name": "InputStream is",
                        "type": "InputStream",
                        "context": "    }\r\n\r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n",
                        "nextNode": "is"
                    },
                    {
                        "name": "bytes",
                        "type": "byte[]",
                        "context": "        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |             return Arrays.copyOf(bytes, offset);\r\n        }\r\n        return bytes;\r\n    }\r\n}\r\n",
                        "nextNode": "readBytes(is, 32)"
                    },
                    {
                        "name": "readBytes(is, 32)",
                        "type": "byte[]",
                        "context": "            byte[] actualMac = mac.doFinal(data);\r\n\r\n            byte[] expectedMac = readBytes(is, 32);\r\n            return MessageDigest.isEqual(expectedMac, actualMac);\r\n        }\r\n",
                        "nextNode": "expectedMac"
                    },
                    {
                        "name": "expectedMac",
                        "type": "Dataflow from `is` to `expectedMac`\nDataflow from `is` to `expectedMac`\nDataflow from `offset` to `expectedMac`\nDataflow from `is` to `expectedMac`\nDataflow from `bytes` to `expectedMac`\nDataflow from `offset` to `expectedMac`\nDataflow from `offset` to `expectedMac`\nDataflow from `offset` to `expectedMac`\nDataflow from `bytes` to `expectedMac`\nDataflow from `offset` to `expectedMac`\nDataflow from `bytes` to `expectedMac`\nDataflow from `readBytes(...)` to `expectedMac`\nDataflow from `getInputStream(...)` to `expectedMac`\nDataflow from `32` to `expectedMac`\nDataflow from `0` to `expectedMac`\nDataflow from `copyOf(...)` to `expectedMac`",
                        "context": "\r\n            byte[] expectedMac = readBytes(is, 32);\r\n            return MessageDigest.isEqual(expectedMac, actualMac);\r\n        }\r\n    }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "numBytes",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "32",
                        "type": "Number",
                        "context": "            byte[] actualMac = mac.doFinal(data);\r\n\r\n            byte[] expectedMac = readBytes(is, 32);\r\n            return MessageDigest.isEqual(expectedMac, actualMac);\r\n        }\r\n |             byte[] actualMac = mac.doFinal(data);\r\n\r\n            byte[] expectedMac = readBytes(is, 32);\r\n            return MessageDigest.isEqual(expectedMac, actualMac);\r\n        }\r\n |             byte[] actualMac = mac.doFinal(data);\r\n\r\n            byte[] expectedMac = readBytes(is, 32);\r\n            return MessageDigest.isEqual(expectedMac, actualMac);\r\n        }\r\n |             byte[] actualMac = mac.doFinal(data);\r\n\r\n            byte[] expectedMac = readBytes(is, 32);\r\n            return MessageDigest.isEqual(expectedMac, actualMac);\r\n        }\r\n",
                        "nextNode": "int numBytes"
                    },
                    {
                        "name": "int numBytes",
                        "type": "Number",
                        "context": "    }\r\n\r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n |     }\r\n\r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n |     }\r\n\r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n |     }\r\n\r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n",
                        "nextNode": "numBytes]"
                    },
                    {
                        "name": "numBytes]",
                        "type": "Dataflow from `32` to `numBytes`",
                        "context": "\r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n        int read;\r\n | \r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n        int read;\r\n | \r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n        int read;\r\n | \r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n        int read;\r\n",
                        "nextNode": "numBytes"
                    },
                    {
                        "name": "numBytes",
                        "type": "Dataflow from `32` to `numBytes`",
                        "context": "        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |             offset += read;\r\n        }\r\n        if (offset < numBytes) {\r\n            return Arrays.copyOf(bytes, offset);\r\n        }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "read",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "is",
                        "type": "InputStream",
                        "context": "        try (InputStream is = socket.getInputStream()) {\r\n            byte[] data = new byte[1024];\r\n            int readBytes = is.read(data);\r\n      \r\n            if (readBytes < data.length) {\r\n |             byte[] actualMac = mac.doFinal(data);\r\n\r\n            byte[] expectedMac = readBytes(is, 32);\r\n            return MessageDigest.isEqual(expectedMac, actualMac);\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n",
                        "nextNode": "bytes"
                    },
                    {
                        "name": "InputStream is",
                        "type": "InputStream",
                        "context": "    }\r\n\r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n",
                        "nextNode": "is"
                    },
                    {
                        "name": "bytes",
                        "type": "byte[]",
                        "context": "        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n",
                        "nextNode": "is.read(bytes, offset, numBytes - offset)"
                    },
                    {
                        "name": "is.read(bytes, offset, numBytes - offset)",
                        "type": "Number",
                        "context": "        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n",
                        "nextNode": "read"
                    },
                    {
                        "name": "read",
                        "type": "Dataflow from `is` to `read`\nDataflow from `is` to `read`\nDataflow from `offset` to `read`\nDataflow from `is` to `read`\nDataflow from `bytes` to `read`\nDataflow from `offset` to `read`\nDataflow from `getInputStream(...)` to `read`\nDataflow from `0` to `read`\nDataflow from `read(...)` to `read`",
                        "context": "        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n        if (offset < numBytes) {\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "data",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "is",
                        "type": "InputStream",
                        "context": "        try (InputStream is = socket.getInputStream()) {\r\n            byte[] data = new byte[1024];\r\n            int readBytes = is.read(data);\r\n      \r\n            if (readBytes < data.length) {\r\n |         try (InputStream is = socket.getInputStream()) {\r\n            byte[] data = new byte[1024];\r\n            int readBytes = is.read(data);\r\n      \r\n            if (readBytes < data.length) {\r\n |         try (InputStream is = socket.getInputStream()) {\r\n            byte[] data = new byte[1024];\r\n            int readBytes = is.read(data);\r\n      \r\n            if (readBytes < data.length) {\r\n",
                        "nextNode": "data"
                    },
                    {
                        "name": "data",
                        "type": "byte[]",
                        "context": "        try (InputStream is = socket.getInputStream()) {\r\n            byte[] data = new byte[1024];\r\n            int readBytes = is.read(data);\r\n      \r\n            if (readBytes < data.length) {\r\n |             int readBytes = is.read(data);\r\n      \r\n            if (readBytes < data.length) {\r\n                data = Arrays.copyOf(data, readBytes);\r\n            }\r\n |             }\r\n            Mac mac = Mac.getInstance(\"HmacSHA256\");\r\n            byte[] actualMac = mac.doFinal(data);\r\n\r\n            byte[] expectedMac = readBytes(is, 32);\r\n |         try (InputStream is = socket.getInputStream()) {\r\n            byte[] data = new byte[1024];\r\n            int readBytes = is.read(data);\r\n      \r\n            if (readBytes < data.length) {\r\n |             int readBytes = is.read(data);\r\n      \r\n            if (readBytes < data.length) {\r\n                data = Arrays.copyOf(data, readBytes);\r\n            }\r\n |         try (InputStream is = socket.getInputStream()) {\r\n            byte[] data = new byte[1024];\r\n            int readBytes = is.read(data);\r\n      \r\n            if (readBytes < data.length) {\r\n |             int readBytes = is.read(data);\r\n      \r\n            if (readBytes < data.length) {\r\n                data = Arrays.copyOf(data, readBytes);\r\n            }\r\n |       \r\n            if (readBytes < data.length) {\r\n                data = Arrays.copyOf(data, readBytes);\r\n            }\r\n            Mac mac = Mac.getInstance(\"HmacSHA256\");\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "actualMac",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "is",
                        "type": "InputStream",
                        "context": "        try (InputStream is = socket.getInputStream()) {\r\n            byte[] data = new byte[1024];\r\n            int readBytes = is.read(data);\r\n      \r\n            if (readBytes < data.length) {\r\n",
                        "nextNode": "data"
                    },
                    {
                        "name": "data",
                        "type": "byte[]",
                        "context": "        try (InputStream is = socket.getInputStream()) {\r\n            byte[] data = new byte[1024];\r\n            int readBytes = is.read(data);\r\n      \r\n            if (readBytes < data.length) {\r\n |             int readBytes = is.read(data);\r\n      \r\n            if (readBytes < data.length) {\r\n                data = Arrays.copyOf(data, readBytes);\r\n            }\r\n |             }\r\n            Mac mac = Mac.getInstance(\"HmacSHA256\");\r\n            byte[] actualMac = mac.doFinal(data);\r\n\r\n            byte[] expectedMac = readBytes(is, 32);\r\n",
                        "nextNode": "mac.doFinal(data)"
                    },
                    {
                        "name": "mac.doFinal(data)",
                        "type": "byte[]",
                        "context": "            }\r\n            Mac mac = Mac.getInstance(\"HmacSHA256\");\r\n            byte[] actualMac = mac.doFinal(data);\r\n\r\n            byte[] expectedMac = readBytes(is, 32);\r\n",
                        "nextNode": "actualMac"
                    },
                    {
                        "name": "actualMac",
                        "type": "Dataflow from `is` to `actualMac`\nDataflow from `data` to `actualMac`\nDataflow from `data` to `actualMac`\nDataflow from `readBytes` to `actualMac`\nDataflow from `data` to `actualMac`\nDataflow from `data` to `actualMac`\nDataflow from `readBytes` to `actualMac`\nDataflow from `getInputStream(...)` to `actualMac`\nDataflow from `read(...)` to `actualMac`\nDataflow from `doFinal(...)` to `actualMac`\nDataflow from `copyOf(...)` to `actualMac`",
                        "context": "\r\n            byte[] expectedMac = readBytes(is, 32);\r\n            return MessageDigest.isEqual(expectedMac, actualMac);\r\n        }\r\n    }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "offset",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "0",
                        "type": "Number",
                        "context": "    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n |     private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n |     private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n |     private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n |     private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n |     private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n",
                        "nextNode": "offset"
                    },
                    {
                        "name": "offset",
                        "type": "Dataflow from `0` to `offset`",
                        "context": "        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n        if (offset < numBytes) {\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |             offset += read;\r\n        }\r\n        if (offset < numBytes) {\r\n            return Arrays.copyOf(bytes, offset);\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |             offset += read;\r\n        }\r\n        if (offset < numBytes) {\r\n            return Arrays.copyOf(bytes, offset);\r\n        }\r\n |         }\r\n        if (offset < numBytes) {\r\n            return Arrays.copyOf(bytes, offset);\r\n        }\r\n        return bytes;\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "bytes",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "is",
                        "type": "InputStream",
                        "context": "        try (InputStream is = socket.getInputStream()) {\r\n            byte[] data = new byte[1024];\r\n            int readBytes = is.read(data);\r\n      \r\n            if (readBytes < data.length) {\r\n |             byte[] actualMac = mac.doFinal(data);\r\n\r\n            byte[] expectedMac = readBytes(is, 32);\r\n            return MessageDigest.isEqual(expectedMac, actualMac);\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         try (InputStream is = socket.getInputStream()) {\r\n            byte[] data = new byte[1024];\r\n            int readBytes = is.read(data);\r\n      \r\n            if (readBytes < data.length) {\r\n |             byte[] actualMac = mac.doFinal(data);\r\n\r\n            byte[] expectedMac = readBytes(is, 32);\r\n            return MessageDigest.isEqual(expectedMac, actualMac);\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         try (InputStream is = socket.getInputStream()) {\r\n            byte[] data = new byte[1024];\r\n            int readBytes = is.read(data);\r\n      \r\n            if (readBytes < data.length) {\r\n |             byte[] actualMac = mac.doFinal(data);\r\n\r\n            byte[] expectedMac = readBytes(is, 32);\r\n            return MessageDigest.isEqual(expectedMac, actualMac);\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n",
                        "nextNode": "bytes"
                    },
                    {
                        "name": "InputStream is",
                        "type": "InputStream",
                        "context": "    }\r\n\r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n |     }\r\n\r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n |     }\r\n\r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n",
                        "nextNode": "is"
                    },
                    {
                        "name": "bytes",
                        "type": "byte[]",
                        "context": "        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         }\r\n        if (offset < numBytes) {\r\n            return Arrays.copyOf(bytes, offset);\r\n        }\r\n        return bytes;\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |             return Arrays.copyOf(bytes, offset);\r\n        }\r\n        return bytes;\r\n    }\r\n}\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "readBytes",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "data",
                        "type": "byte[]",
                        "context": "        try (InputStream is = socket.getInputStream()) {\r\n            byte[] data = new byte[1024];\r\n            int readBytes = is.read(data);\r\n      \r\n            if (readBytes < data.length) {\r\n |         try (InputStream is = socket.getInputStream()) {\r\n            byte[] data = new byte[1024];\r\n            int readBytes = is.read(data);\r\n      \r\n            if (readBytes < data.length) {\r\n",
                        "nextNode": "is.read(data)"
                    },
                    {
                        "name": "is.read(data)",
                        "type": "Number",
                        "context": "        try (InputStream is = socket.getInputStream()) {\r\n            byte[] data = new byte[1024];\r\n            int readBytes = is.read(data);\r\n      \r\n            if (readBytes < data.length) {\r\n |         try (InputStream is = socket.getInputStream()) {\r\n            byte[] data = new byte[1024];\r\n            int readBytes = is.read(data);\r\n      \r\n            if (readBytes < data.length) {\r\n",
                        "nextNode": "readBytes"
                    },
                    {
                        "name": "readBytes",
                        "type": "Dataflow from `data` to `readBytes`\nDataflow from `read(...)` to `readBytes`",
                        "context": "            int readBytes = is.read(data);\r\n      \r\n            if (readBytes < data.length) {\r\n                data = Arrays.copyOf(data, readBytes);\r\n            }\r\n |             int readBytes = is.read(data);\r\n      \r\n            if (readBytes < data.length) {\r\n                data = Arrays.copyOf(data, readBytes);\r\n            }\r\n |       \r\n            if (readBytes < data.length) {\r\n                data = Arrays.copyOf(data, readBytes);\r\n            }\r\n            Mac mac = Mac.getInstance(\"HmacSHA256\");\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "is",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "socket.getInputStream()",
                        "type": "InputStream",
                        "context": "public class GOOD_AAS_saferMacCheck {\r\n    public boolean saferMacCheck(Socket socket) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            byte[] data = new byte[1024];\r\n            int readBytes = is.read(data);\r\n | public class GOOD_AAS_saferMacCheck {\r\n    public boolean saferMacCheck(Socket socket) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            byte[] data = new byte[1024];\r\n            int readBytes = is.read(data);\r\n | public class GOOD_AAS_saferMacCheck {\r\n    public boolean saferMacCheck(Socket socket) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            byte[] data = new byte[1024];\r\n            int readBytes = is.read(data);\r\n",
                        "nextNode": "is"
                    },
                    {
                        "name": "InputStream is",
                        "type": "InputStream",
                        "context": "    }\r\n\r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n",
                        "nextNode": "is"
                    },
                    {
                        "name": "is",
                        "type": "Dataflow from `getInputStream(...)` to `is`",
                        "context": "        try (InputStream is = socket.getInputStream()) {\r\n            byte[] data = new byte[1024];\r\n            int readBytes = is.read(data);\r\n      \r\n            if (readBytes < data.length) {\r\n |         try (InputStream is = socket.getInputStream()) {\r\n            byte[] data = new byte[1024];\r\n            int readBytes = is.read(data);\r\n      \r\n            if (readBytes < data.length) {\r\n |             byte[] actualMac = mac.doFinal(data);\r\n\r\n            byte[] expectedMac = readBytes(is, 32);\r\n            return MessageDigest.isEqual(expectedMac, actualMac);\r\n        }\r\n |         try (InputStream is = socket.getInputStream()) {\r\n            byte[] data = new byte[1024];\r\n            int readBytes = is.read(data);\r\n      \r\n            if (readBytes < data.length) {\r\n |             byte[] actualMac = mac.doFinal(data);\r\n\r\n            byte[] expectedMac = readBytes(is, 32);\r\n            return MessageDigest.isEqual(expectedMac, actualMac);\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "socket",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "mac",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "Mac.getInstance(\"HmacSHA256\")",
                        "type": "Mac",
                        "context": "                data = Arrays.copyOf(data, readBytes);\r\n            }\r\n            Mac mac = Mac.getInstance(\"HmacSHA256\");\r\n            byte[] actualMac = mac.doFinal(data);\r\n\r\n",
                        "nextNode": "mac"
                    },
                    {
                        "name": "mac",
                        "type": "Dataflow from `getInstance(...)` to `mac`\nDataflow from `\"HmacSHA256\"` to `mac`",
                        "context": "            }\r\n            Mac mac = Mac.getInstance(\"HmacSHA256\");\r\n            byte[] actualMac = mac.doFinal(data);\r\n\r\n            byte[] expectedMac = readBytes(is, 32);\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "HmacSHA256",
                "isSensitive": "no"
            }
        ],
        "comments": [],
        "sinks": [
            {
                "name": "read",
                "isSink": "no"
            },
            {
                "name": "isEqual",
                "isSink": "no"
            },
            {
                "name": "readBytes",
                "isSink": "no"
            },
            {
                "name": "getInstance",
                "isSink": "no"
            },
            {
                "name": "copyOf",
                "isSink": "no"
            },
            {
                "name": "getInputStream",
                "isSink": "no"
            },
            {
                "name": "doFinal",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "BAD_unsafeCheckCustomMac.java",
        "variables": [
            {
                "name": "cipher",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "Cipher.getInstance(\"AES/CBC/PKCS5Padding\")",
                        "type": "Cipher",
                        "context": "public class BAD_unsafeCheckCustomMac {\r\n    public boolean unsafeCheckCustomMac(byte[] expected, byte[] plaintext, Key key) throws Exception {\r\n        Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, key);\r\n        byte[] tag = cipher.doFinal(plaintext);\r\n | public class BAD_unsafeCheckCustomMac {\r\n    public boolean unsafeCheckCustomMac(byte[] expected, byte[] plaintext, Key key) throws Exception {\r\n        Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, key);\r\n        byte[] tag = cipher.doFinal(plaintext);\r\n",
                        "nextNode": "cipher"
                    },
                    {
                        "name": "cipher",
                        "type": "Cipher",
                        "context": "    public boolean unsafeCheckCustomMac(byte[] expected, byte[] plaintext, Key key) throws Exception {\r\n        Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, key);\r\n        byte[] tag = cipher.doFinal(plaintext);\r\n        return Arrays.equals(expected, tag);\r\n |         Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, key);\r\n        byte[] tag = cipher.doFinal(plaintext);\r\n        return Arrays.equals(expected, tag);\r\n    }\r\n |     public boolean unsafeCheckCustomMac(byte[] expected, byte[] plaintext, Key key) throws Exception {\r\n        Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, key);\r\n        byte[] tag = cipher.doFinal(plaintext);\r\n        return Arrays.equals(expected, tag);\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "expected",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "plaintext",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "tag",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "plaintext",
                        "type": "byte[]",
                        "context": "        Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, key);\r\n        byte[] tag = cipher.doFinal(plaintext);\r\n        return Arrays.equals(expected, tag);\r\n    }\r\n",
                        "nextNode": "cipher.doFinal(plaintext)"
                    },
                    {
                        "name": "cipher.doFinal(plaintext)",
                        "type": "byte[]",
                        "context": "        Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, key);\r\n        byte[] tag = cipher.doFinal(plaintext);\r\n        return Arrays.equals(expected, tag);\r\n    }\r\n",
                        "nextNode": "tag"
                    },
                    {
                        "name": "tag",
                        "type": "Dataflow from `plaintext` to `tag`\nDataflow from `doFinal(...)` to `tag`",
                        "context": "        cipher.init(Cipher.ENCRYPT_MODE, key);\r\n        byte[] tag = cipher.doFinal(plaintext);\r\n        return Arrays.equals(expected, tag);\r\n    }\r\n}\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "key",
                "isSensitive": "yes",
                "graph": []
            }
        ],
        "strings": [
            {
                "name": "AES/CBC/PKCS5Padding",
                "isSensitive": "yes"
            }
        ],
        "comments": [],
        "sinks": [
            {
                "name": "init",
                "isSink": "no"
            },
            {
                "name": "equals",
                "isSink": "no"
            },
            {
                "name": "getInstance",
                "isSink": "no"
            },
            {
                "name": "doFinal",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "BAD_unsafeCheckSignatures.java",
        "variables": [
            {
                "name": "data",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "engine",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "Signature.getInstance(\"SHA256withRSA\")",
                        "type": "Signature",
                        "context": "public class BAD_unsafeCheckSignatures {\r\n    public boolean unsafeCheckSignatures(byte[] expected, byte[] data, PrivateKey key) throws Exception {\r\n        Signature engine = Signature.getInstance(\"SHA256withRSA\");\r\n        engine.initSign(key);\r\n        engine.update(data);\r\n | public class BAD_unsafeCheckSignatures {\r\n    public boolean unsafeCheckSignatures(byte[] expected, byte[] data, PrivateKey key) throws Exception {\r\n        Signature engine = Signature.getInstance(\"SHA256withRSA\");\r\n        engine.initSign(key);\r\n        engine.update(data);\r\n | public class BAD_unsafeCheckSignatures {\r\n    public boolean unsafeCheckSignatures(byte[] expected, byte[] data, PrivateKey key) throws Exception {\r\n        Signature engine = Signature.getInstance(\"SHA256withRSA\");\r\n        engine.initSign(key);\r\n        engine.update(data);\r\n",
                        "nextNode": "engine"
                    },
                    {
                        "name": "engine",
                        "type": "Signature",
                        "context": "    public boolean unsafeCheckSignatures(byte[] expected, byte[] data, PrivateKey key) throws Exception {\r\n        Signature engine = Signature.getInstance(\"SHA256withRSA\");\r\n        engine.initSign(key);\r\n        engine.update(data);\r\n        byte[] signature = engine.sign();\r\n |         Signature engine = Signature.getInstance(\"SHA256withRSA\");\r\n        engine.initSign(key);\r\n        engine.update(data);\r\n        byte[] signature = engine.sign();\r\n        return Arrays.equals(expected, signature);\r\n |         engine.initSign(key);\r\n        engine.update(data);\r\n        byte[] signature = engine.sign();\r\n        return Arrays.equals(expected, signature);\r\n    }\r\n |     public boolean unsafeCheckSignatures(byte[] expected, byte[] data, PrivateKey key) throws Exception {\r\n        Signature engine = Signature.getInstance(\"SHA256withRSA\");\r\n        engine.initSign(key);\r\n        engine.update(data);\r\n        byte[] signature = engine.sign();\r\n |     public boolean unsafeCheckSignatures(byte[] expected, byte[] data, PrivateKey key) throws Exception {\r\n        Signature engine = Signature.getInstance(\"SHA256withRSA\");\r\n        engine.initSign(key);\r\n        engine.update(data);\r\n        byte[] signature = engine.sign();\r\n |         Signature engine = Signature.getInstance(\"SHA256withRSA\");\r\n        engine.initSign(key);\r\n        engine.update(data);\r\n        byte[] signature = engine.sign();\r\n        return Arrays.equals(expected, signature);\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "signature",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "engine.sign()",
                        "type": "byte[]",
                        "context": "        engine.initSign(key);\r\n        engine.update(data);\r\n        byte[] signature = engine.sign();\r\n        return Arrays.equals(expected, signature);\r\n    }\r\n",
                        "nextNode": "signature"
                    },
                    {
                        "name": "signature",
                        "type": "Dataflow from `sign(...)` to `signature`",
                        "context": "        engine.update(data);\r\n        byte[] signature = engine.sign();\r\n        return Arrays.equals(expected, signature);\r\n    }\r\n}\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "expected",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "key",
                "isSensitive": "yes",
                "graph": []
            }
        ],
        "strings": [
            {
                "name": "SHA256withRSA",
                "isSensitive": "yes"
            }
        ],
        "comments": [],
        "sinks": [
            {
                "name": "initSign",
                "isSink": "no"
            },
            {
                "name": "equals",
                "isSink": "no"
            },
            {
                "name": "sign",
                "isSink": "no"
            },
            {
                "name": "update",
                "isSink": "no"
            },
            {
                "name": "getInstance",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "BAD_unsafeMacCheck.java",
        "variables": [
            {
                "name": "expectedMac",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "actualMac",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "data",
                        "type": "byte[]",
                        "context": "    public boolean unsafeMacCheck(byte[] expectedMac, byte[] data) throws Exception {\r\n        Mac mac = Mac.getInstance(\"HmacSHA256\");\r\n        byte[] actualMac = mac.doFinal(data);\r\n        return Arrays.equals(expectedMac, actualMac);\r\n    }\r\n",
                        "nextNode": "mac.doFinal(data)"
                    },
                    {
                        "name": "mac.doFinal(data)",
                        "type": "byte[]",
                        "context": "    public boolean unsafeMacCheck(byte[] expectedMac, byte[] data) throws Exception {\r\n        Mac mac = Mac.getInstance(\"HmacSHA256\");\r\n        byte[] actualMac = mac.doFinal(data);\r\n        return Arrays.equals(expectedMac, actualMac);\r\n    }\r\n",
                        "nextNode": "actualMac"
                    },
                    {
                        "name": "actualMac",
                        "type": "Dataflow from `data` to `actualMac`\nDataflow from `doFinal(...)` to `actualMac`",
                        "context": "        Mac mac = Mac.getInstance(\"HmacSHA256\");\r\n        byte[] actualMac = mac.doFinal(data);\r\n        return Arrays.equals(expectedMac, actualMac);\r\n    }\r\n}\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "data",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "mac",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "Mac.getInstance(\"HmacSHA256\")",
                        "type": "Mac",
                        "context": "public class BAD_unsafeMacCheck {\r\n    public boolean unsafeMacCheck(byte[] expectedMac, byte[] data) throws Exception {\r\n        Mac mac = Mac.getInstance(\"HmacSHA256\");\r\n        byte[] actualMac = mac.doFinal(data);\r\n        return Arrays.equals(expectedMac, actualMac);\r\n",
                        "nextNode": "mac"
                    },
                    {
                        "name": "mac",
                        "type": "Dataflow from `getInstance(...)` to `mac`\nDataflow from `\"HmacSHA256\"` to `mac`",
                        "context": "    public boolean unsafeMacCheck(byte[] expectedMac, byte[] data) throws Exception {\r\n        Mac mac = Mac.getInstance(\"HmacSHA256\");\r\n        byte[] actualMac = mac.doFinal(data);\r\n        return Arrays.equals(expectedMac, actualMac);\r\n    }\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "HmacSHA256",
                "isSensitive": "yes"
            }
        ],
        "comments": [],
        "sinks": [
            {
                "name": "equals",
                "isSink": "no"
            },
            {
                "name": "getInstance",
                "isSink": "no"
            },
            {
                "name": "doFinal",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "BAD_unsafeMacCheckWithLoop.java",
        "variables": [
            {
                "name": "a",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "b",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "is",
                        "type": "InputStream",
                        "context": "    public boolean unsafeMacCheckWithLoop(Socket socket) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            byte[] data = readBytes(is, 256);\r\n            byte[] tag = readBytes(is, 32);\r\n\r\n |         try (InputStream is = socket.getInputStream()) {\r\n            byte[] data = readBytes(is, 256);\r\n            byte[] tag = readBytes(is, 32);\r\n\r\n            Mac mac = Mac.getInstance(\"Hmac256\");\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n",
                        "nextNode": "bytes"
                    },
                    {
                        "name": "InputStream is",
                        "type": "InputStream",
                        "context": "    }\r\n\r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n",
                        "nextNode": "is"
                    },
                    {
                        "name": "bytes",
                        "type": "byte[]",
                        "context": "        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         }\r\n        if (offset < numBytes) {\r\n            return Arrays.copyOf(bytes, offset);\r\n        }\r\n        return bytes;\r\n",
                        "nextNode": "Arrays.copyOf(bytes, offset)"
                    },
                    {
                        "name": "Arrays.copyOf(bytes, offset)",
                        "type": "Object",
                        "context": "        }\r\n        if (offset < numBytes) {\r\n            return Arrays.copyOf(bytes, offset);\r\n        }\r\n        return bytes;\r\n",
                        "nextNode": "readBytes(is, 32)"
                    },
                    {
                        "name": "readBytes(is, 32)",
                        "type": "Object",
                        "context": "        try (InputStream is = socket.getInputStream()) {\r\n            byte[] data = readBytes(is, 256);\r\n            byte[] tag = readBytes(is, 32);\r\n\r\n            Mac mac = Mac.getInstance(\"Hmac256\");\r\n",
                        "nextNode": "tag["
                    },
                    {
                        "name": "tag[",
                        "type": "Object",
                        "context": "            for (int i = 0; i < computedTag.length; i++) {\r\n                byte a = computedTag[i];\r\n                byte b = tag[i];\r\n                if (a != b) {\r\n                    return false;\r\n",
                        "nextNode": "tag[i]"
                    },
                    {
                        "name": "tag[i]",
                        "type": "Number",
                        "context": "            for (int i = 0; i < computedTag.length; i++) {\r\n                byte a = computedTag[i];\r\n                byte b = tag[i];\r\n                if (a != b) {\r\n                    return false;\r\n",
                        "nextNode": "b"
                    },
                    {
                        "name": "b",
                        "type": "Dataflow from `is` to `b`\nDataflow from `is` to `b`\nDataflow from `is` to `b`\nDataflow from `bytes` to `b`\nDataflow from `bytes` to `b`\nDataflow from `getInputStream(...)` to `b`",
                        "context": "                byte a = computedTag[i];\r\n                byte b = tag[i];\r\n                if (a != b) {\r\n                    return false;\r\n                }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "read",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "is",
                        "type": "InputStream",
                        "context": "    public boolean unsafeMacCheckWithLoop(Socket socket) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            byte[] data = readBytes(is, 256);\r\n            byte[] tag = readBytes(is, 32);\r\n\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n",
                        "nextNode": "bytes"
                    },
                    {
                        "name": "InputStream is",
                        "type": "InputStream",
                        "context": "    }\r\n\r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n",
                        "nextNode": "is"
                    },
                    {
                        "name": "bytes",
                        "type": "byte[]",
                        "context": "        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n",
                        "nextNode": "is.read(bytes, offset, numBytes - offset)"
                    },
                    {
                        "name": "is.read(bytes, offset, numBytes - offset)",
                        "type": "Number",
                        "context": "        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n",
                        "nextNode": "read"
                    },
                    {
                        "name": "read",
                        "type": "Dataflow from `is` to `read`\nDataflow from `is` to `read`\nDataflow from `offset` to `read`\nDataflow from `is` to `read`\nDataflow from `bytes` to `read`\nDataflow from `offset` to `read`\nDataflow from `getInputStream(...)` to `read`\nDataflow from `0` to `read`\nDataflow from `read(...)` to `read`",
                        "context": "        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n        if (offset < numBytes) {\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "data",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "is",
                        "type": "InputStream",
                        "context": "    public boolean unsafeMacCheckWithLoop(Socket socket) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            byte[] data = readBytes(is, 256);\r\n            byte[] tag = readBytes(is, 32);\r\n\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n",
                        "nextNode": "bytes"
                    },
                    {
                        "name": "InputStream is",
                        "type": "InputStream",
                        "context": "    }\r\n\r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n",
                        "nextNode": "is"
                    },
                    {
                        "name": "bytes",
                        "type": "byte[]",
                        "context": "        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |             return Arrays.copyOf(bytes, offset);\r\n        }\r\n        return bytes;\r\n    }\r\n}\r\n",
                        "nextNode": "readBytes(is, 256)"
                    },
                    {
                        "name": "readBytes(is, 256)",
                        "type": "byte[]",
                        "context": "    public boolean unsafeMacCheckWithLoop(Socket socket) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            byte[] data = readBytes(is, 256);\r\n            byte[] tag = readBytes(is, 32);\r\n\r\n",
                        "nextNode": "data"
                    },
                    {
                        "name": "data",
                        "type": "Dataflow from `is` to `data`\nDataflow from `offset` to `data`\nDataflow from `is` to `data`\nDataflow from `bytes` to `data`\nDataflow from `offset` to `data`\nDataflow from `offset` to `data`\nDataflow from `offset` to `data`\nDataflow from `bytes` to `data`\nDataflow from `offset` to `data`\nDataflow from `bytes` to `data`\nDataflow from `readBytes(...)` to `data`\nDataflow from `getInputStream(...)` to `data`\nDataflow from `256` to `data`\nDataflow from `0` to `data`\nDataflow from `copyOf(...)` to `data`",
                        "context": "\r\n            Mac mac = Mac.getInstance(\"Hmac256\");\r\n            byte[] computedTag = mac.doFinal(data);\r\n\r\n            for (int i = 0; i < computedTag.length; i++) {\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "offset",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "0",
                        "type": "Number",
                        "context": "    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n |     private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n |     private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n |     private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n |     private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n |     private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n",
                        "nextNode": "offset"
                    },
                    {
                        "name": "offset",
                        "type": "Dataflow from `0` to `offset`",
                        "context": "        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n        if (offset < numBytes) {\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |             offset += read;\r\n        }\r\n        if (offset < numBytes) {\r\n            return Arrays.copyOf(bytes, offset);\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |             offset += read;\r\n        }\r\n        if (offset < numBytes) {\r\n            return Arrays.copyOf(bytes, offset);\r\n        }\r\n |         }\r\n        if (offset < numBytes) {\r\n            return Arrays.copyOf(bytes, offset);\r\n        }\r\n        return bytes;\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "i",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "0",
                        "type": "Number",
                        "context": "            byte[] computedTag = mac.doFinal(data);\r\n\r\n            for (int i = 0; i < computedTag.length; i++) {\r\n                byte a = computedTag[i];\r\n                byte b = tag[i];\r\n |             byte[] computedTag = mac.doFinal(data);\r\n\r\n            for (int i = 0; i < computedTag.length; i++) {\r\n                byte a = computedTag[i];\r\n                byte b = tag[i];\r\n |             byte[] computedTag = mac.doFinal(data);\r\n\r\n            for (int i = 0; i < computedTag.length; i++) {\r\n                byte a = computedTag[i];\r\n                byte b = tag[i];\r\n |             byte[] computedTag = mac.doFinal(data);\r\n\r\n            for (int i = 0; i < computedTag.length; i++) {\r\n                byte a = computedTag[i];\r\n                byte b = tag[i];\r\n",
                        "nextNode": "i"
                    },
                    {
                        "name": "i",
                        "type": "Dataflow from `0` to `i`",
                        "context": "            byte[] computedTag = mac.doFinal(data);\r\n\r\n            for (int i = 0; i < computedTag.length; i++) {\r\n                byte a = computedTag[i];\r\n                byte b = tag[i];\r\n |             byte[] computedTag = mac.doFinal(data);\r\n\r\n            for (int i = 0; i < computedTag.length; i++) {\r\n                byte a = computedTag[i];\r\n                byte b = tag[i];\r\n |             byte[] computedTag = mac.doFinal(data);\r\n\r\n            for (int i = 0; i < computedTag.length; i++) {\r\n                byte a = computedTag[i];\r\n                byte b = tag[i];\r\n |             byte[] computedTag = mac.doFinal(data);\r\n\r\n            for (int i = 0; i < computedTag.length; i++) {\r\n                byte a = computedTag[i];\r\n                byte b = tag[i];\r\n",
                        "nextNode": "i]"
                    },
                    {
                        "name": "i]",
                        "type": "Number",
                        "context": "\r\n            for (int i = 0; i < computedTag.length; i++) {\r\n                byte a = computedTag[i];\r\n                byte b = tag[i];\r\n                if (a != b) {\r\n |             for (int i = 0; i < computedTag.length; i++) {\r\n                byte a = computedTag[i];\r\n                byte b = tag[i];\r\n                if (a != b) {\r\n                    return false;\r\n | \r\n            for (int i = 0; i < computedTag.length; i++) {\r\n                byte a = computedTag[i];\r\n                byte b = tag[i];\r\n                if (a != b) {\r\n | \r\n            for (int i = 0; i < computedTag.length; i++) {\r\n                byte a = computedTag[i];\r\n                byte b = tag[i];\r\n                if (a != b) {\r\n |             for (int i = 0; i < computedTag.length; i++) {\r\n                byte a = computedTag[i];\r\n                byte b = tag[i];\r\n                if (a != b) {\r\n                    return false;\r\n",
                        "nextNode": "end"
                    },
                    {
                        "name": "i+",
                        "type": "Dataflow from `0` to `i`",
                        "context": "            byte[] computedTag = mac.doFinal(data);\r\n\r\n            for (int i = 0; i < computedTag.length; i++) {\r\n                byte a = computedTag[i];\r\n                byte b = tag[i];\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "is",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "socket.getInputStream()",
                        "type": "InputStream",
                        "context": "public class BAD_unsafeMacCheckWithLoop {\r\n    public boolean unsafeMacCheckWithLoop(Socket socket) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            byte[] data = readBytes(is, 256);\r\n            byte[] tag = readBytes(is, 32);\r\n | public class BAD_unsafeMacCheckWithLoop {\r\n    public boolean unsafeMacCheckWithLoop(Socket socket) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            byte[] data = readBytes(is, 256);\r\n            byte[] tag = readBytes(is, 32);\r\n | public class BAD_unsafeMacCheckWithLoop {\r\n    public boolean unsafeMacCheckWithLoop(Socket socket) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            byte[] data = readBytes(is, 256);\r\n            byte[] tag = readBytes(is, 32);\r\n",
                        "nextNode": "is"
                    },
                    {
                        "name": "InputStream is",
                        "type": "InputStream",
                        "context": "    }\r\n\r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n",
                        "nextNode": "is"
                    },
                    {
                        "name": "is",
                        "type": "Dataflow from `getInputStream(...)` to `is`",
                        "context": "    public boolean unsafeMacCheckWithLoop(Socket socket) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            byte[] data = readBytes(is, 256);\r\n            byte[] tag = readBytes(is, 32);\r\n\r\n |     public boolean unsafeMacCheckWithLoop(Socket socket) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            byte[] data = readBytes(is, 256);\r\n            byte[] tag = readBytes(is, 32);\r\n\r\n |         try (InputStream is = socket.getInputStream()) {\r\n            byte[] data = readBytes(is, 256);\r\n            byte[] tag = readBytes(is, 32);\r\n\r\n            Mac mac = Mac.getInstance(\"Hmac256\");\r\n |     public boolean unsafeMacCheckWithLoop(Socket socket) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            byte[] data = readBytes(is, 256);\r\n            byte[] tag = readBytes(is, 32);\r\n\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "mac",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "Mac.getInstance(\"Hmac256\")",
                        "type": "Mac",
                        "context": "            byte[] tag = readBytes(is, 32);\r\n\r\n            Mac mac = Mac.getInstance(\"Hmac256\");\r\n            byte[] computedTag = mac.doFinal(data);\r\n\r\n",
                        "nextNode": "mac"
                    },
                    {
                        "name": "mac",
                        "type": "Dataflow from `getInstance(...)` to `mac`\nDataflow from `\"Hmac256\"` to `mac`",
                        "context": "\r\n            Mac mac = Mac.getInstance(\"Hmac256\");\r\n            byte[] computedTag = mac.doFinal(data);\r\n\r\n            for (int i = 0; i < computedTag.length; i++) {\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "numBytes",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "256",
                        "type": "Number",
                        "context": "    public boolean unsafeMacCheckWithLoop(Socket socket) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            byte[] data = readBytes(is, 256);\r\n            byte[] tag = readBytes(is, 32);\r\n\r\n |     public boolean unsafeMacCheckWithLoop(Socket socket) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            byte[] data = readBytes(is, 256);\r\n            byte[] tag = readBytes(is, 32);\r\n\r\n |     public boolean unsafeMacCheckWithLoop(Socket socket) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            byte[] data = readBytes(is, 256);\r\n            byte[] tag = readBytes(is, 32);\r\n\r\n |     public boolean unsafeMacCheckWithLoop(Socket socket) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            byte[] data = readBytes(is, 256);\r\n            byte[] tag = readBytes(is, 32);\r\n\r\n",
                        "nextNode": "int numBytes"
                    },
                    {
                        "name": "int numBytes",
                        "type": "Number",
                        "context": "    }\r\n\r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n |     }\r\n\r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n |     }\r\n\r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n |     }\r\n\r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n",
                        "nextNode": "numBytes]"
                    },
                    {
                        "name": "numBytes]",
                        "type": "Dataflow from `256` to `numBytes`\nDataflow from `32` to `numBytes`",
                        "context": "\r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n        int read;\r\n | \r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n        int read;\r\n | \r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n        int read;\r\n | \r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n        int read;\r\n",
                        "nextNode": "numBytes"
                    },
                    {
                        "name": "numBytes",
                        "type": "Dataflow from `256` to `numBytes`\nDataflow from `32` to `numBytes`",
                        "context": "        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |             offset += read;\r\n        }\r\n        if (offset < numBytes) {\r\n            return Arrays.copyOf(bytes, offset);\r\n        }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "computedTag",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "is",
                        "type": "InputStream",
                        "context": "    public boolean unsafeMacCheckWithLoop(Socket socket) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            byte[] data = readBytes(is, 256);\r\n            byte[] tag = readBytes(is, 32);\r\n\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |     public boolean unsafeMacCheckWithLoop(Socket socket) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            byte[] data = readBytes(is, 256);\r\n            byte[] tag = readBytes(is, 32);\r\n\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n",
                        "nextNode": "bytes"
                    },
                    {
                        "name": "InputStream is",
                        "type": "InputStream",
                        "context": "    }\r\n\r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n |     }\r\n\r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n",
                        "nextNode": "is"
                    },
                    {
                        "name": "bytes",
                        "type": "byte[]",
                        "context": "        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |             return Arrays.copyOf(bytes, offset);\r\n        }\r\n        return bytes;\r\n    }\r\n}\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |             return Arrays.copyOf(bytes, offset);\r\n        }\r\n        return bytes;\r\n    }\r\n}\r\n",
                        "nextNode": "readBytes(is, 256)"
                    },
                    {
                        "name": "readBytes(is, 256)",
                        "type": "byte[]",
                        "context": "    public boolean unsafeMacCheckWithLoop(Socket socket) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            byte[] data = readBytes(is, 256);\r\n            byte[] tag = readBytes(is, 32);\r\n\r\n |     public boolean unsafeMacCheckWithLoop(Socket socket) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            byte[] data = readBytes(is, 256);\r\n            byte[] tag = readBytes(is, 32);\r\n\r\n",
                        "nextNode": "data"
                    },
                    {
                        "name": "data",
                        "type": "byte[]",
                        "context": "\r\n            Mac mac = Mac.getInstance(\"Hmac256\");\r\n            byte[] computedTag = mac.doFinal(data);\r\n\r\n            for (int i = 0; i < computedTag.length; i++) {\r\n | \r\n            Mac mac = Mac.getInstance(\"Hmac256\");\r\n            byte[] computedTag = mac.doFinal(data);\r\n\r\n            for (int i = 0; i < computedTag.length; i++) {\r\n",
                        "nextNode": "mac.doFinal(data)"
                    },
                    {
                        "name": "mac.doFinal(data)",
                        "type": "byte[]",
                        "context": "\r\n            Mac mac = Mac.getInstance(\"Hmac256\");\r\n            byte[] computedTag = mac.doFinal(data);\r\n\r\n            for (int i = 0; i < computedTag.length; i++) {\r\n | \r\n            Mac mac = Mac.getInstance(\"Hmac256\");\r\n            byte[] computedTag = mac.doFinal(data);\r\n\r\n            for (int i = 0; i < computedTag.length; i++) {\r\n",
                        "nextNode": "computedTag"
                    },
                    {
                        "name": "computedTag",
                        "type": "Dataflow from `is` to `computedTag`\nDataflow from `data` to `computedTag`\nDataflow from `offset` to `computedTag`\nDataflow from `is` to `computedTag`\nDataflow from `bytes` to `computedTag`\nDataflow from `offset` to `computedTag`\nDataflow from `offset` to `computedTag`\nDataflow from `offset` to `computedTag`\nDataflow from `bytes` to `computedTag`\nDataflow from `offset` to `computedTag`\nDataflow from `bytes` to `computedTag`\nDataflow from `readBytes(...)` to `computedTag`\nDataflow from `getInputStream(...)` to `computedTag`\nDataflow from `256` to `computedTag`\nDataflow from `doFinal(...)` to `computedTag`\nDataflow from `0` to `computedTag`\nDataflow from `copyOf(...)` to `computedTag`",
                        "context": "            byte[] computedTag = mac.doFinal(data);\r\n\r\n            for (int i = 0; i < computedTag.length; i++) {\r\n                byte a = computedTag[i];\r\n                byte b = tag[i];\r\n |             byte[] computedTag = mac.doFinal(data);\r\n\r\n            for (int i = 0; i < computedTag.length; i++) {\r\n                byte a = computedTag[i];\r\n                byte b = tag[i];\r\n",
                        "nextNode": "computedTag["
                    },
                    {
                        "name": "computedTag[",
                        "type": "Dataflow from `is` to `computedTag`\nDataflow from `data` to `computedTag`\nDataflow from `offset` to `computedTag`\nDataflow from `is` to `computedTag`\nDataflow from `bytes` to `computedTag`\nDataflow from `offset` to `computedTag`\nDataflow from `offset` to `computedTag`\nDataflow from `offset` to `computedTag`\nDataflow from `bytes` to `computedTag`\nDataflow from `offset` to `computedTag`\nDataflow from `bytes` to `computedTag`\nDataflow from `readBytes(...)` to `computedTag`\nDataflow from `getInputStream(...)` to `computedTag`\nDataflow from `256` to `computedTag`\nDataflow from `doFinal(...)` to `computedTag`\nDataflow from `0` to `computedTag`\nDataflow from `copyOf(...)` to `computedTag`",
                        "context": "\r\n            for (int i = 0; i < computedTag.length; i++) {\r\n                byte a = computedTag[i];\r\n                byte b = tag[i];\r\n                if (a != b) {\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "bytes",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "is",
                        "type": "InputStream",
                        "context": "    public boolean unsafeMacCheckWithLoop(Socket socket) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            byte[] data = readBytes(is, 256);\r\n            byte[] tag = readBytes(is, 32);\r\n\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |     public boolean unsafeMacCheckWithLoop(Socket socket) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            byte[] data = readBytes(is, 256);\r\n            byte[] tag = readBytes(is, 32);\r\n\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |     public boolean unsafeMacCheckWithLoop(Socket socket) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            byte[] data = readBytes(is, 256);\r\n            byte[] tag = readBytes(is, 32);\r\n\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n",
                        "nextNode": "bytes"
                    },
                    {
                        "name": "InputStream is",
                        "type": "InputStream",
                        "context": "    }\r\n\r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n |     }\r\n\r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n |     }\r\n\r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n",
                        "nextNode": "is"
                    },
                    {
                        "name": "bytes",
                        "type": "byte[]",
                        "context": "        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         }\r\n        if (offset < numBytes) {\r\n            return Arrays.copyOf(bytes, offset);\r\n        }\r\n        return bytes;\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |             return Arrays.copyOf(bytes, offset);\r\n        }\r\n        return bytes;\r\n    }\r\n}\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "tag",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "is",
                        "type": "InputStream",
                        "context": "    public boolean unsafeMacCheckWithLoop(Socket socket) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            byte[] data = readBytes(is, 256);\r\n            byte[] tag = readBytes(is, 32);\r\n\r\n |         try (InputStream is = socket.getInputStream()) {\r\n            byte[] data = readBytes(is, 256);\r\n            byte[] tag = readBytes(is, 32);\r\n\r\n            Mac mac = Mac.getInstance(\"Hmac256\");\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n",
                        "nextNode": "bytes"
                    },
                    {
                        "name": "InputStream is",
                        "type": "InputStream",
                        "context": "    }\r\n\r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n",
                        "nextNode": "is"
                    },
                    {
                        "name": "bytes",
                        "type": "byte[]",
                        "context": "        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |             return Arrays.copyOf(bytes, offset);\r\n        }\r\n        return bytes;\r\n    }\r\n}\r\n",
                        "nextNode": "readBytes(is, 32)"
                    },
                    {
                        "name": "readBytes(is, 32)",
                        "type": "byte[]",
                        "context": "        try (InputStream is = socket.getInputStream()) {\r\n            byte[] data = readBytes(is, 256);\r\n            byte[] tag = readBytes(is, 32);\r\n\r\n            Mac mac = Mac.getInstance(\"Hmac256\");\r\n",
                        "nextNode": "tag["
                    },
                    {
                        "name": "tag[",
                        "type": "Dataflow from `is` to `tag`\nDataflow from `is` to `tag`\nDataflow from `offset` to `tag`\nDataflow from `is` to `tag`\nDataflow from `bytes` to `tag`\nDataflow from `offset` to `tag`\nDataflow from `offset` to `tag`\nDataflow from `offset` to `tag`\nDataflow from `bytes` to `tag`\nDataflow from `offset` to `tag`\nDataflow from `bytes` to `tag`\nDataflow from `readBytes(...)` to `tag`\nDataflow from `getInputStream(...)` to `tag`\nDataflow from `32` to `tag`\nDataflow from `0` to `tag`\nDataflow from `copyOf(...)` to `tag`",
                        "context": "            for (int i = 0; i < computedTag.length; i++) {\r\n                byte a = computedTag[i];\r\n                byte b = tag[i];\r\n                if (a != b) {\r\n                    return false;\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "socket",
                "isSensitive": "no",
                "graph": []
            }
        ],
        "strings": [
            {
                "name": "Hmac256",
                "isSensitive": "yes"
            }
        ],
        "comments": [],
        "sinks": [
            {
                "name": "read",
                "isSink": "yes"
            },
            {
                "name": "readBytes",
                "isSink": "no"
            },
            {
                "name": "getInstance",
                "isSink": "no"
            },
            {
                "name": "copyOf",
                "isSink": "no"
            },
            {
                "name": "getInputStream",
                "isSink": "no"
            },
            {
                "name": "doFinal",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "GOOD_safeMacCheckWithLoop.java",
        "variables": [
            {
                "name": "result",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "0",
                        "type": "Number",
                        "context": "            byte[] computedTag = mac.doFinal(data);\r\n\r\n            int result = 0;\r\n            for (int i = 0; i < computedTag.length; i++) {\r\n                result |= computedTag[i] ^ tag[i];\r\n |             byte[] computedTag = mac.doFinal(data);\r\n\r\n            int result = 0;\r\n            for (int i = 0; i < computedTag.length; i++) {\r\n                result |= computedTag[i] ^ tag[i];\r\n",
                        "nextNode": "result"
                    },
                    {
                        "name": "result",
                        "type": "Dataflow from `0` to `result`",
                        "context": "            int result = 0;\r\n            for (int i = 0; i < computedTag.length; i++) {\r\n                result |= computedTag[i] ^ tag[i];\r\n            }\r\n\r\n |             }\r\n\r\n            return result == 0;\r\n        }\r\n    }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "numBytes",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "256",
                        "type": "Number",
                        "context": "    public boolean safeMacCheckWithLoop(Socket socket) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            byte[] data = readBytes(is, 256);\r\n            byte[] tag = readBytes(is, 32);\r\n\r\n |     public boolean safeMacCheckWithLoop(Socket socket) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            byte[] data = readBytes(is, 256);\r\n            byte[] tag = readBytes(is, 32);\r\n\r\n |     public boolean safeMacCheckWithLoop(Socket socket) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            byte[] data = readBytes(is, 256);\r\n            byte[] tag = readBytes(is, 32);\r\n\r\n |     public boolean safeMacCheckWithLoop(Socket socket) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            byte[] data = readBytes(is, 256);\r\n            byte[] tag = readBytes(is, 32);\r\n\r\n",
                        "nextNode": "int numBytes"
                    },
                    {
                        "name": "int numBytes",
                        "type": "Number",
                        "context": "    }\r\n\r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n |     }\r\n\r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n |     }\r\n\r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n |     }\r\n\r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n",
                        "nextNode": "numBytes]"
                    },
                    {
                        "name": "numBytes]",
                        "type": "Dataflow from `256` to `numBytes`\nDataflow from `32` to `numBytes`",
                        "context": "\r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n        int read;\r\n | \r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n        int read;\r\n | \r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n        int read;\r\n | \r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n        int read;\r\n",
                        "nextNode": "numBytes"
                    },
                    {
                        "name": "numBytes",
                        "type": "Dataflow from `256` to `numBytes`\nDataflow from `32` to `numBytes`",
                        "context": "        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |             offset += read;\r\n        }\r\n        if (offset < numBytes) {\r\n            return Arrays.copyOf(bytes, offset);\r\n        }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "read",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "is",
                        "type": "InputStream",
                        "context": "    public boolean safeMacCheckWithLoop(Socket socket) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            byte[] data = readBytes(is, 256);\r\n            byte[] tag = readBytes(is, 32);\r\n\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n",
                        "nextNode": "bytes"
                    },
                    {
                        "name": "InputStream is",
                        "type": "InputStream",
                        "context": "    }\r\n\r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n",
                        "nextNode": "is"
                    },
                    {
                        "name": "bytes",
                        "type": "byte[]",
                        "context": "        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n",
                        "nextNode": "is.read(bytes, offset, numBytes - offset)"
                    },
                    {
                        "name": "is.read(bytes, offset, numBytes - offset)",
                        "type": "Number",
                        "context": "        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n",
                        "nextNode": "read"
                    },
                    {
                        "name": "read",
                        "type": "Dataflow from `is` to `read`\nDataflow from `is` to `read`\nDataflow from `offset` to `read`\nDataflow from `is` to `read`\nDataflow from `bytes` to `read`\nDataflow from `offset` to `read`\nDataflow from `getInputStream(...)` to `read`\nDataflow from `0` to `read`\nDataflow from `read(...)` to `read`",
                        "context": "        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n        if (offset < numBytes) {\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "data",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "is",
                        "type": "InputStream",
                        "context": "    public boolean safeMacCheckWithLoop(Socket socket) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            byte[] data = readBytes(is, 256);\r\n            byte[] tag = readBytes(is, 32);\r\n\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n",
                        "nextNode": "bytes"
                    },
                    {
                        "name": "InputStream is",
                        "type": "InputStream",
                        "context": "    }\r\n\r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n",
                        "nextNode": "is"
                    },
                    {
                        "name": "bytes",
                        "type": "byte[]",
                        "context": "        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |             return Arrays.copyOf(bytes, offset);\r\n        }\r\n        return bytes;\r\n    }\r\n}",
                        "nextNode": "readBytes(is, 256)"
                    },
                    {
                        "name": "readBytes(is, 256)",
                        "type": "byte[]",
                        "context": "    public boolean safeMacCheckWithLoop(Socket socket) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            byte[] data = readBytes(is, 256);\r\n            byte[] tag = readBytes(is, 32);\r\n\r\n",
                        "nextNode": "data"
                    },
                    {
                        "name": "data",
                        "type": "Dataflow from `is` to `data`\nDataflow from `offset` to `data`\nDataflow from `is` to `data`\nDataflow from `bytes` to `data`\nDataflow from `offset` to `data`\nDataflow from `offset` to `data`\nDataflow from `offset` to `data`\nDataflow from `bytes` to `data`\nDataflow from `offset` to `data`\nDataflow from `bytes` to `data`\nDataflow from `readBytes(...)` to `data`\nDataflow from `getInputStream(...)` to `data`\nDataflow from `256` to `data`\nDataflow from `0` to `data`\nDataflow from `copyOf(...)` to `data`",
                        "context": "\r\n            Mac mac = Mac.getInstance(\"Hmac256\");\r\n            byte[] computedTag = mac.doFinal(data);\r\n\r\n            int result = 0;\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "computedTag",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "is",
                        "type": "InputStream",
                        "context": "    public boolean safeMacCheckWithLoop(Socket socket) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            byte[] data = readBytes(is, 256);\r\n            byte[] tag = readBytes(is, 32);\r\n\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |     public boolean safeMacCheckWithLoop(Socket socket) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            byte[] data = readBytes(is, 256);\r\n            byte[] tag = readBytes(is, 32);\r\n\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n",
                        "nextNode": "bytes"
                    },
                    {
                        "name": "InputStream is",
                        "type": "InputStream",
                        "context": "    }\r\n\r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n |     }\r\n\r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n",
                        "nextNode": "is"
                    },
                    {
                        "name": "bytes",
                        "type": "byte[]",
                        "context": "        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |             return Arrays.copyOf(bytes, offset);\r\n        }\r\n        return bytes;\r\n    }\r\n} |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |             return Arrays.copyOf(bytes, offset);\r\n        }\r\n        return bytes;\r\n    }\r\n}",
                        "nextNode": "readBytes(is, 256)"
                    },
                    {
                        "name": "readBytes(is, 256)",
                        "type": "byte[]",
                        "context": "    public boolean safeMacCheckWithLoop(Socket socket) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            byte[] data = readBytes(is, 256);\r\n            byte[] tag = readBytes(is, 32);\r\n\r\n |     public boolean safeMacCheckWithLoop(Socket socket) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            byte[] data = readBytes(is, 256);\r\n            byte[] tag = readBytes(is, 32);\r\n\r\n",
                        "nextNode": "data"
                    },
                    {
                        "name": "data",
                        "type": "byte[]",
                        "context": "\r\n            Mac mac = Mac.getInstance(\"Hmac256\");\r\n            byte[] computedTag = mac.doFinal(data);\r\n\r\n            int result = 0;\r\n | \r\n            Mac mac = Mac.getInstance(\"Hmac256\");\r\n            byte[] computedTag = mac.doFinal(data);\r\n\r\n            int result = 0;\r\n",
                        "nextNode": "mac.doFinal(data)"
                    },
                    {
                        "name": "mac.doFinal(data)",
                        "type": "byte[]",
                        "context": "\r\n            Mac mac = Mac.getInstance(\"Hmac256\");\r\n            byte[] computedTag = mac.doFinal(data);\r\n\r\n            int result = 0;\r\n | \r\n            Mac mac = Mac.getInstance(\"Hmac256\");\r\n            byte[] computedTag = mac.doFinal(data);\r\n\r\n            int result = 0;\r\n",
                        "nextNode": "computedTag"
                    },
                    {
                        "name": "computedTag",
                        "type": "Dataflow from `is` to `computedTag`\nDataflow from `data` to `computedTag`\nDataflow from `offset` to `computedTag`\nDataflow from `is` to `computedTag`\nDataflow from `bytes` to `computedTag`\nDataflow from `offset` to `computedTag`\nDataflow from `offset` to `computedTag`\nDataflow from `offset` to `computedTag`\nDataflow from `bytes` to `computedTag`\nDataflow from `offset` to `computedTag`\nDataflow from `bytes` to `computedTag`\nDataflow from `readBytes(...)` to `computedTag`\nDataflow from `getInputStream(...)` to `computedTag`\nDataflow from `256` to `computedTag`\nDataflow from `doFinal(...)` to `computedTag`\nDataflow from `0` to `computedTag`\nDataflow from `copyOf(...)` to `computedTag`",
                        "context": "\r\n            int result = 0;\r\n            for (int i = 0; i < computedTag.length; i++) {\r\n                result |= computedTag[i] ^ tag[i];\r\n            }\r\n | \r\n            int result = 0;\r\n            for (int i = 0; i < computedTag.length; i++) {\r\n                result |= computedTag[i] ^ tag[i];\r\n            }\r\n",
                        "nextNode": "computedTag["
                    },
                    {
                        "name": "computedTag[",
                        "type": "Dataflow from `is` to `computedTag`\nDataflow from `data` to `computedTag`\nDataflow from `offset` to `computedTag`\nDataflow from `is` to `computedTag`\nDataflow from `bytes` to `computedTag`\nDataflow from `offset` to `computedTag`\nDataflow from `offset` to `computedTag`\nDataflow from `offset` to `computedTag`\nDataflow from `bytes` to `computedTag`\nDataflow from `offset` to `computedTag`\nDataflow from `bytes` to `computedTag`\nDataflow from `readBytes(...)` to `computedTag`\nDataflow from `getInputStream(...)` to `computedTag`\nDataflow from `256` to `computedTag`\nDataflow from `doFinal(...)` to `computedTag`\nDataflow from `0` to `computedTag`\nDataflow from `copyOf(...)` to `computedTag`",
                        "context": "            int result = 0;\r\n            for (int i = 0; i < computedTag.length; i++) {\r\n                result |= computedTag[i] ^ tag[i];\r\n            }\r\n\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "offset",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "0",
                        "type": "Number",
                        "context": "    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n |     private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n |     private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n |     private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n |     private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n |     private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n",
                        "nextNode": "offset"
                    },
                    {
                        "name": "offset",
                        "type": "Dataflow from `0` to `offset`",
                        "context": "        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n        if (offset < numBytes) {\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |             offset += read;\r\n        }\r\n        if (offset < numBytes) {\r\n            return Arrays.copyOf(bytes, offset);\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |             offset += read;\r\n        }\r\n        if (offset < numBytes) {\r\n            return Arrays.copyOf(bytes, offset);\r\n        }\r\n |         }\r\n        if (offset < numBytes) {\r\n            return Arrays.copyOf(bytes, offset);\r\n        }\r\n        return bytes;\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "bytes",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "is",
                        "type": "InputStream",
                        "context": "    public boolean safeMacCheckWithLoop(Socket socket) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            byte[] data = readBytes(is, 256);\r\n            byte[] tag = readBytes(is, 32);\r\n\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |     public boolean safeMacCheckWithLoop(Socket socket) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            byte[] data = readBytes(is, 256);\r\n            byte[] tag = readBytes(is, 32);\r\n\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |     public boolean safeMacCheckWithLoop(Socket socket) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            byte[] data = readBytes(is, 256);\r\n            byte[] tag = readBytes(is, 32);\r\n\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n",
                        "nextNode": "bytes"
                    },
                    {
                        "name": "InputStream is",
                        "type": "InputStream",
                        "context": "    }\r\n\r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n |     }\r\n\r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n |     }\r\n\r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n",
                        "nextNode": "is"
                    },
                    {
                        "name": "bytes",
                        "type": "byte[]",
                        "context": "        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |         }\r\n        if (offset < numBytes) {\r\n            return Arrays.copyOf(bytes, offset);\r\n        }\r\n        return bytes;\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |             return Arrays.copyOf(bytes, offset);\r\n        }\r\n        return bytes;\r\n    }\r\n}",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "i",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "0",
                        "type": "Number",
                        "context": "\r\n            int result = 0;\r\n            for (int i = 0; i < computedTag.length; i++) {\r\n                result |= computedTag[i] ^ tag[i];\r\n            }\r\n | \r\n            int result = 0;\r\n            for (int i = 0; i < computedTag.length; i++) {\r\n                result |= computedTag[i] ^ tag[i];\r\n            }\r\n | \r\n            int result = 0;\r\n            for (int i = 0; i < computedTag.length; i++) {\r\n                result |= computedTag[i] ^ tag[i];\r\n            }\r\n | \r\n            int result = 0;\r\n            for (int i = 0; i < computedTag.length; i++) {\r\n                result |= computedTag[i] ^ tag[i];\r\n            }\r\n",
                        "nextNode": "i"
                    },
                    {
                        "name": "i",
                        "type": "Dataflow from `0` to `i`",
                        "context": "\r\n            int result = 0;\r\n            for (int i = 0; i < computedTag.length; i++) {\r\n                result |= computedTag[i] ^ tag[i];\r\n            }\r\n | \r\n            int result = 0;\r\n            for (int i = 0; i < computedTag.length; i++) {\r\n                result |= computedTag[i] ^ tag[i];\r\n            }\r\n | \r\n            int result = 0;\r\n            for (int i = 0; i < computedTag.length; i++) {\r\n                result |= computedTag[i] ^ tag[i];\r\n            }\r\n | \r\n            int result = 0;\r\n            for (int i = 0; i < computedTag.length; i++) {\r\n                result |= computedTag[i] ^ tag[i];\r\n            }\r\n",
                        "nextNode": "i]"
                    },
                    {
                        "name": "i]",
                        "type": "Number",
                        "context": "            int result = 0;\r\n            for (int i = 0; i < computedTag.length; i++) {\r\n                result |= computedTag[i] ^ tag[i];\r\n            }\r\n\r\n |             int result = 0;\r\n            for (int i = 0; i < computedTag.length; i++) {\r\n                result |= computedTag[i] ^ tag[i];\r\n            }\r\n\r\n |             int result = 0;\r\n            for (int i = 0; i < computedTag.length; i++) {\r\n                result |= computedTag[i] ^ tag[i];\r\n            }\r\n\r\n |             int result = 0;\r\n            for (int i = 0; i < computedTag.length; i++) {\r\n                result |= computedTag[i] ^ tag[i];\r\n            }\r\n\r\n |             int result = 0;\r\n            for (int i = 0; i < computedTag.length; i++) {\r\n                result |= computedTag[i] ^ tag[i];\r\n            }\r\n\r\n",
                        "nextNode": "end"
                    },
                    {
                        "name": "i+",
                        "type": "Dataflow from `0` to `i`",
                        "context": "\r\n            int result = 0;\r\n            for (int i = 0; i < computedTag.length; i++) {\r\n                result |= computedTag[i] ^ tag[i];\r\n            }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "is",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "socket.getInputStream()",
                        "type": "InputStream",
                        "context": "public class GOOD_safeMacCheckWithLoop {\r\n    public boolean safeMacCheckWithLoop(Socket socket) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            byte[] data = readBytes(is, 256);\r\n            byte[] tag = readBytes(is, 32);\r\n | public class GOOD_safeMacCheckWithLoop {\r\n    public boolean safeMacCheckWithLoop(Socket socket) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            byte[] data = readBytes(is, 256);\r\n            byte[] tag = readBytes(is, 32);\r\n | public class GOOD_safeMacCheckWithLoop {\r\n    public boolean safeMacCheckWithLoop(Socket socket) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            byte[] data = readBytes(is, 256);\r\n            byte[] tag = readBytes(is, 32);\r\n",
                        "nextNode": "is"
                    },
                    {
                        "name": "InputStream is",
                        "type": "InputStream",
                        "context": "    }\r\n\r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n",
                        "nextNode": "is"
                    },
                    {
                        "name": "is",
                        "type": "Dataflow from `getInputStream(...)` to `is`",
                        "context": "    public boolean safeMacCheckWithLoop(Socket socket) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            byte[] data = readBytes(is, 256);\r\n            byte[] tag = readBytes(is, 32);\r\n\r\n |     public boolean safeMacCheckWithLoop(Socket socket) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            byte[] data = readBytes(is, 256);\r\n            byte[] tag = readBytes(is, 32);\r\n\r\n |         try (InputStream is = socket.getInputStream()) {\r\n            byte[] data = readBytes(is, 256);\r\n            byte[] tag = readBytes(is, 32);\r\n\r\n            Mac mac = Mac.getInstance(\"Hmac256\");\r\n |     public boolean safeMacCheckWithLoop(Socket socket) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            byte[] data = readBytes(is, 256);\r\n            byte[] tag = readBytes(is, 32);\r\n\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "tag",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "is",
                        "type": "InputStream",
                        "context": "    public boolean safeMacCheckWithLoop(Socket socket) throws Exception {\r\n        try (InputStream is = socket.getInputStream()) {\r\n            byte[] data = readBytes(is, 256);\r\n            byte[] tag = readBytes(is, 32);\r\n\r\n |         try (InputStream is = socket.getInputStream()) {\r\n            byte[] data = readBytes(is, 256);\r\n            byte[] tag = readBytes(is, 32);\r\n\r\n            Mac mac = Mac.getInstance(\"Hmac256\");\r\n |         int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n",
                        "nextNode": "bytes"
                    },
                    {
                        "name": "InputStream is",
                        "type": "InputStream",
                        "context": "    }\r\n\r\n    private byte[] readBytes(InputStream is, int numBytes) throws Exception {\r\n        byte[] bytes = new byte[numBytes];\r\n        int offset = 0;\r\n",
                        "nextNode": "is"
                    },
                    {
                        "name": "bytes",
                        "type": "byte[]",
                        "context": "        int offset = 0;\r\n        int read;\r\n        while (offset < numBytes && (read = is.read(bytes, offset, numBytes - offset)) != -1) {\r\n            offset += read;\r\n        }\r\n |             return Arrays.copyOf(bytes, offset);\r\n        }\r\n        return bytes;\r\n    }\r\n}",
                        "nextNode": "readBytes(is, 32)"
                    },
                    {
                        "name": "readBytes(is, 32)",
                        "type": "byte[]",
                        "context": "        try (InputStream is = socket.getInputStream()) {\r\n            byte[] data = readBytes(is, 256);\r\n            byte[] tag = readBytes(is, 32);\r\n\r\n            Mac mac = Mac.getInstance(\"Hmac256\");\r\n",
                        "nextNode": "tag["
                    },
                    {
                        "name": "tag[",
                        "type": "Dataflow from `is` to `tag`\nDataflow from `is` to `tag`\nDataflow from `offset` to `tag`\nDataflow from `is` to `tag`\nDataflow from `bytes` to `tag`\nDataflow from `offset` to `tag`\nDataflow from `offset` to `tag`\nDataflow from `offset` to `tag`\nDataflow from `bytes` to `tag`\nDataflow from `offset` to `tag`\nDataflow from `bytes` to `tag`\nDataflow from `readBytes(...)` to `tag`\nDataflow from `getInputStream(...)` to `tag`\nDataflow from `32` to `tag`\nDataflow from `0` to `tag`\nDataflow from `copyOf(...)` to `tag`",
                        "context": "            int result = 0;\r\n            for (int i = 0; i < computedTag.length; i++) {\r\n                result |= computedTag[i] ^ tag[i];\r\n            }\r\n\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "socket",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "mac",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "Mac.getInstance(\"Hmac256\")",
                        "type": "Mac",
                        "context": "            byte[] tag = readBytes(is, 32);\r\n\r\n            Mac mac = Mac.getInstance(\"Hmac256\");\r\n            byte[] computedTag = mac.doFinal(data);\r\n\r\n",
                        "nextNode": "mac"
                    },
                    {
                        "name": "mac",
                        "type": "Dataflow from `getInstance(...)` to `mac`\nDataflow from `\"Hmac256\"` to `mac`",
                        "context": "\r\n            Mac mac = Mac.getInstance(\"Hmac256\");\r\n            byte[] computedTag = mac.doFinal(data);\r\n\r\n            int result = 0;\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "Hmac256",
                "isSensitive": "yes"
            }
        ],
        "comments": [],
        "sinks": [
            {
                "name": "read",
                "isSink": "no"
            },
            {
                "name": "readBytes",
                "isSink": "no"
            },
            {
                "name": "getInstance",
                "isSink": "no"
            },
            {
                "name": "copyOf",
                "isSink": "no"
            },
            {
                "name": "getInputStream",
                "isSink": "no"
            },
            {
                "name": "doFinal",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "GOOD_saferCheckCustomMac.java",
        "variables": [
            {
                "name": "cipher",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "Cipher.getInstance(\"AES/CBC/PKCS5Padding\")",
                        "type": "Cipher",
                        "context": "public class GOOD_saferCheckCustomMac {\r\n    public boolean saferCheckCustomMac(byte[] expected, byte[] plaintext, Key key) throws Exception {\r\n        Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, key);\r\n        byte[] tag = cipher.doFinal(plaintext);\r\n | public class GOOD_saferCheckCustomMac {\r\n    public boolean saferCheckCustomMac(byte[] expected, byte[] plaintext, Key key) throws Exception {\r\n        Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, key);\r\n        byte[] tag = cipher.doFinal(plaintext);\r\n",
                        "nextNode": "cipher"
                    },
                    {
                        "name": "cipher",
                        "type": "Cipher",
                        "context": "    public boolean saferCheckCustomMac(byte[] expected, byte[] plaintext, Key key) throws Exception {\r\n        Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, key);\r\n        byte[] tag = cipher.doFinal(plaintext);\r\n        return MessageDigest.isEqual(expected, tag);\r\n |         Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, key);\r\n        byte[] tag = cipher.doFinal(plaintext);\r\n        return MessageDigest.isEqual(expected, tag);\r\n    }\r\n |     public boolean saferCheckCustomMac(byte[] expected, byte[] plaintext, Key key) throws Exception {\r\n        Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, key);\r\n        byte[] tag = cipher.doFinal(plaintext);\r\n        return MessageDigest.isEqual(expected, tag);\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "expected",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "plaintext",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "tag",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "plaintext",
                        "type": "byte[]",
                        "context": "        Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, key);\r\n        byte[] tag = cipher.doFinal(plaintext);\r\n        return MessageDigest.isEqual(expected, tag);\r\n    }\r\n",
                        "nextNode": "cipher.doFinal(plaintext)"
                    },
                    {
                        "name": "cipher.doFinal(plaintext)",
                        "type": "byte[]",
                        "context": "        Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, key);\r\n        byte[] tag = cipher.doFinal(plaintext);\r\n        return MessageDigest.isEqual(expected, tag);\r\n    }\r\n",
                        "nextNode": "tag"
                    },
                    {
                        "name": "tag",
                        "type": "Dataflow from `plaintext` to `tag`\nDataflow from `doFinal(...)` to `tag`",
                        "context": "        cipher.init(Cipher.ENCRYPT_MODE, key);\r\n        byte[] tag = cipher.doFinal(plaintext);\r\n        return MessageDigest.isEqual(expected, tag);\r\n    }\r\n}\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "key",
                "isSensitive": "yes",
                "graph": []
            }
        ],
        "strings": [
            {
                "name": "AES/CBC/PKCS5Padding",
                "isSensitive": "yes"
            }
        ],
        "comments": [],
        "sinks": [
            {
                "name": "init",
                "isSink": "no"
            },
            {
                "name": "isEqual",
                "isSink": "no"
            },
            {
                "name": "getInstance",
                "isSink": "no"
            },
            {
                "name": "doFinal",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "GOOD_saferCheckSignatures.java",
        "variables": [
            {
                "name": "data",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "engine",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "Signature.getInstance(\"SHA256withRSA\")",
                        "type": "Signature",
                        "context": "public class GOOD_saferCheckSignatures {\r\n    public boolean saferCheckSignatures(byte[] expected, byte[] data, PrivateKey key) throws Exception {\r\n        Signature engine = Signature.getInstance(\"SHA256withRSA\");\r\n        engine.initSign(key);\r\n        engine.update(data);\r\n | public class GOOD_saferCheckSignatures {\r\n    public boolean saferCheckSignatures(byte[] expected, byte[] data, PrivateKey key) throws Exception {\r\n        Signature engine = Signature.getInstance(\"SHA256withRSA\");\r\n        engine.initSign(key);\r\n        engine.update(data);\r\n | public class GOOD_saferCheckSignatures {\r\n    public boolean saferCheckSignatures(byte[] expected, byte[] data, PrivateKey key) throws Exception {\r\n        Signature engine = Signature.getInstance(\"SHA256withRSA\");\r\n        engine.initSign(key);\r\n        engine.update(data);\r\n",
                        "nextNode": "engine"
                    },
                    {
                        "name": "engine",
                        "type": "Signature",
                        "context": "    public boolean saferCheckSignatures(byte[] expected, byte[] data, PrivateKey key) throws Exception {\r\n        Signature engine = Signature.getInstance(\"SHA256withRSA\");\r\n        engine.initSign(key);\r\n        engine.update(data);\r\n        byte[] signature = engine.sign();\r\n |         Signature engine = Signature.getInstance(\"SHA256withRSA\");\r\n        engine.initSign(key);\r\n        engine.update(data);\r\n        byte[] signature = engine.sign();\r\n        return MessageDigest.isEqual(expected, signature);\r\n |         engine.initSign(key);\r\n        engine.update(data);\r\n        byte[] signature = engine.sign();\r\n        return MessageDigest.isEqual(expected, signature);\r\n    }\r\n |     public boolean saferCheckSignatures(byte[] expected, byte[] data, PrivateKey key) throws Exception {\r\n        Signature engine = Signature.getInstance(\"SHA256withRSA\");\r\n        engine.initSign(key);\r\n        engine.update(data);\r\n        byte[] signature = engine.sign();\r\n |     public boolean saferCheckSignatures(byte[] expected, byte[] data, PrivateKey key) throws Exception {\r\n        Signature engine = Signature.getInstance(\"SHA256withRSA\");\r\n        engine.initSign(key);\r\n        engine.update(data);\r\n        byte[] signature = engine.sign();\r\n |         Signature engine = Signature.getInstance(\"SHA256withRSA\");\r\n        engine.initSign(key);\r\n        engine.update(data);\r\n        byte[] signature = engine.sign();\r\n        return MessageDigest.isEqual(expected, signature);\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "signature",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "engine.sign()",
                        "type": "byte[]",
                        "context": "        engine.initSign(key);\r\n        engine.update(data);\r\n        byte[] signature = engine.sign();\r\n        return MessageDigest.isEqual(expected, signature);\r\n    }\r\n",
                        "nextNode": "signature"
                    },
                    {
                        "name": "signature",
                        "type": "Dataflow from `sign(...)` to `signature`",
                        "context": "        engine.update(data);\r\n        byte[] signature = engine.sign();\r\n        return MessageDigest.isEqual(expected, signature);\r\n    }\r\n}\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "expected",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "key",
                "isSensitive": "yes",
                "graph": []
            }
        ],
        "strings": [
            {
                "name": "SHA256withRSA",
                "isSensitive": "yes"
            }
        ],
        "comments": [],
        "sinks": [
            {
                "name": "initSign",
                "isSink": "no"
            },
            {
                "name": "isEqual",
                "isSink": "no"
            },
            {
                "name": "sign",
                "isSink": "no"
            },
            {
                "name": "update",
                "isSink": "no"
            },
            {
                "name": "getInstance",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "GOOD_saferMacCheck.java",
        "variables": [
            {
                "name": "expectedMac",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "actualMac",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "data",
                        "type": "byte[]",
                        "context": "    public boolean saferMacCheck(byte[] expectedMac, byte[] data) throws Exception {\r\n        Mac mac = Mac.getInstance(\"HmacSHA256\");\r\n        byte[] actualMac = mac.doFinal(data);\r\n        return MessageDigest.isEqual(expectedMac, actualMac);\r\n    }\r\n",
                        "nextNode": "mac.doFinal(data)"
                    },
                    {
                        "name": "mac.doFinal(data)",
                        "type": "byte[]",
                        "context": "    public boolean saferMacCheck(byte[] expectedMac, byte[] data) throws Exception {\r\n        Mac mac = Mac.getInstance(\"HmacSHA256\");\r\n        byte[] actualMac = mac.doFinal(data);\r\n        return MessageDigest.isEqual(expectedMac, actualMac);\r\n    }\r\n",
                        "nextNode": "actualMac"
                    },
                    {
                        "name": "actualMac",
                        "type": "Dataflow from `data` to `actualMac`\nDataflow from `doFinal(...)` to `actualMac`",
                        "context": "        Mac mac = Mac.getInstance(\"HmacSHA256\");\r\n        byte[] actualMac = mac.doFinal(data);\r\n        return MessageDigest.isEqual(expectedMac, actualMac);\r\n    }\r\n}\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "data",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "mac",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "Mac.getInstance(\"HmacSHA256\")",
                        "type": "Mac",
                        "context": "public class GOOD_saferMacCheck {\r\n    public boolean saferMacCheck(byte[] expectedMac, byte[] data) throws Exception {\r\n        Mac mac = Mac.getInstance(\"HmacSHA256\");\r\n        byte[] actualMac = mac.doFinal(data);\r\n        return MessageDigest.isEqual(expectedMac, actualMac);\r\n",
                        "nextNode": "mac"
                    },
                    {
                        "name": "mac",
                        "type": "Dataflow from `getInstance(...)` to `mac`\nDataflow from `\"HmacSHA256\"` to `mac`",
                        "context": "    public boolean saferMacCheck(byte[] expectedMac, byte[] data) throws Exception {\r\n        Mac mac = Mac.getInstance(\"HmacSHA256\");\r\n        byte[] actualMac = mac.doFinal(data);\r\n        return MessageDigest.isEqual(expectedMac, actualMac);\r\n    }\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "HmacSHA256",
                "isSensitive": "yes"
            }
        ],
        "comments": [],
        "sinks": [
            {
                "name": "isEqual",
                "isSink": "no"
            },
            {
                "name": "getInstance",
                "isSink": "no"
            },
            {
                "name": "doFinal",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "BAD_AccessControlError.java",
        "variables": [
            {
                "name": "args",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "accessLevel",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "0",
                        "type": "Number",
                        "context": "\r\n    public static void main(String[] args) {\r\n        new BAD_AccessControlError().validateUserAccess(\"adminUser\", 0);\r\n    }\r\n}\r\n | \r\n    public static void main(String[] args) {\r\n        new BAD_AccessControlError().validateUserAccess(\"adminUser\", 0);\r\n    }\r\n}\r\n | \r\n    public static void main(String[] args) {\r\n        new BAD_AccessControlError().validateUserAccess(\"adminUser\", 0);\r\n    }\r\n}\r\n",
                        "nextNode": "int accessLevel"
                    },
                    {
                        "name": "int accessLevel",
                        "type": "Number",
                        "context": "public class BAD_AccessControlError {\r\n    public void validateUserAccess(String userName, int accessLevel) {\r\n        try {\r\n            if (accessLevel < 1 || accessLevel > 5) {\r\n | public class BAD_AccessControlError {\r\n    public void validateUserAccess(String userName, int accessLevel) {\r\n        try {\r\n            if (accessLevel < 1 || accessLevel > 5) {\r\n | public class BAD_AccessControlError {\r\n    public void validateUserAccess(String userName, int accessLevel) {\r\n        try {\r\n            if (accessLevel < 1 || accessLevel > 5) {\r\n",
                        "nextNode": "accessLevel"
                    },
                    {
                        "name": "accessLevel",
                        "type": "Dataflow from `0` to `accessLevel`",
                        "context": "    public void validateUserAccess(String userName, int accessLevel) {\r\n        try {\r\n            if (accessLevel < 1 || accessLevel > 5) {\r\n                throw new IllegalArgumentException(\"Access level \" + accessLevel + \" is out of valid range for \" + userName);\r\n            }\r\n |     public void validateUserAccess(String userName, int accessLevel) {\r\n        try {\r\n            if (accessLevel < 1 || accessLevel > 5) {\r\n                throw new IllegalArgumentException(\"Access level \" + accessLevel + \" is out of valid range for \" + userName);\r\n            }\r\n |     public void validateUserAccess(String userName, int accessLevel) {\r\n        try {\r\n            if (accessLevel < 1 || accessLevel > 5) {\r\n                throw new IllegalArgumentException(\"Access level \" + accessLevel + \" is out of valid range for \" + userName);\r\n            }\r\n |     public void validateUserAccess(String userName, int accessLevel) {\r\n        try {\r\n            if (accessLevel < 1 || accessLevel > 5) {\r\n                throw new IllegalArgumentException(\"Access level \" + accessLevel + \" is out of valid range for \" + userName);\r\n            }\r\n |         try {\r\n            if (accessLevel < 1 || accessLevel > 5) {\r\n                throw new IllegalArgumentException(\"Access level \" + accessLevel + \" is out of valid range for \" + userName);\r\n            }\r\n            // Access validation logic\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "e",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "userName",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "\"adminUser\"",
                        "type": "String",
                        "context": "\r\n    public static void main(String[] args) {\r\n        new BAD_AccessControlError().validateUserAccess(\"adminUser\", 0);\r\n    }\r\n}\r\n",
                        "nextNode": "String userName"
                    },
                    {
                        "name": "String userName",
                        "type": "String",
                        "context": "public class BAD_AccessControlError {\r\n    public void validateUserAccess(String userName, int accessLevel) {\r\n        try {\r\n            if (accessLevel < 1 || accessLevel > 5) {\r\n",
                        "nextNode": "userName"
                    },
                    {
                        "name": "userName",
                        "type": "Dataflow from `\"adminUser\"` to `userName`",
                        "context": "        try {\r\n            if (accessLevel < 1 || accessLevel > 5) {\r\n                throw new IllegalArgumentException(\"Access level \" + accessLevel + \" is out of valid range for \" + userName);\r\n            }\r\n            // Access validation logic\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "is out of valid range for",
                "isSensitive": "no"
            },
            {
                "name": "adminUser",
                "isSensitive": "yes"
            },
            {
                "name": "Invalid access attempt detected for user:",
                "isSensitive": "no"
            },
            {
                "name": "Access level",
                "isSensitive": "no"
            }
        ],
        "comments": [
            {
                "name": "Access validation logic",
                "isSensitive": "no"
            }
        ],
        "sinks": [
            {
                "name": "println",
                "isSink": "yes"
            },
            {
                "name": "getMessage",
                "isSink": "no"
            },
            {
                "name": "validateUserAccess",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "BAD_DatabaseSchemaError.java",
        "variables": [
            {
                "name": "args",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "e",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "sqlUpdateCommand",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "\"DROP TABLE Users\"",
                        "type": "String",
                        "context": "\r\n    public static void main(String[] args) {\r\n        new BAD_DatabaseSchemaError().updateDatabaseSchema(\"DROP TABLE Users\");\r\n    }\r\n}\r\n | \r\n    public static void main(String[] args) {\r\n        new BAD_DatabaseSchemaError().updateDatabaseSchema(\"DROP TABLE Users\");\r\n    }\r\n}\r\n",
                        "nextNode": "String sqlUpdateCommand"
                    },
                    {
                        "name": "String sqlUpdateCommand",
                        "type": "String",
                        "context": "public class BAD_DatabaseSchemaError {\r\n    public void updateDatabaseSchema(String sqlUpdateCommand) {\r\n        try {\r\n            if (!sqlUpdateCommand.startsWith(\"ALTER TABLE\")) {\r\n | public class BAD_DatabaseSchemaError {\r\n    public void updateDatabaseSchema(String sqlUpdateCommand) {\r\n        try {\r\n            if (!sqlUpdateCommand.startsWith(\"ALTER TABLE\")) {\r\n",
                        "nextNode": "sqlUpdateCommand"
                    },
                    {
                        "name": "sqlUpdateCommand",
                        "type": "Dataflow from `\"DROP TABLE Users\"` to `sqlUpdateCommand`",
                        "context": "    public void updateDatabaseSchema(String sqlUpdateCommand) {\r\n        try {\r\n            if (!sqlUpdateCommand.startsWith(\"ALTER TABLE\")) {\r\n                throw new UnsupportedOperationException(\"Only table alterations are supported.\");\r\n            }\r\n |     public void updateDatabaseSchema(String sqlUpdateCommand) {\r\n        try {\r\n            if (!sqlUpdateCommand.startsWith(\"ALTER TABLE\")) {\r\n                throw new UnsupportedOperationException(\"Only table alterations are supported.\");\r\n            }\r\n |             // Database schema update logic\r\n        } catch (UnsupportedOperationException e) {\r\n            System.err.println(\"Database schema update failed with command: \" + sqlUpdateCommand);\r\n        }\r\n    }\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "Only table alterations are supported.",
                "isSensitive": "no"
            },
            {
                "name": "Database schema update failed with command:",
                "isSensitive": "no"
            },
            {
                "name": "ALTER TABLE",
                "isSensitive": "no"
            },
            {
                "name": "DROP TABLE Users",
                "isSensitive": "yes"
            }
        ],
        "comments": [
            {
                "name": "Database schema update logic",
                "isSensitive": "no"
            }
        ],
        "sinks": [
            {
                "name": "println",
                "isSink": "yes"
            },
            {
                "name": "updateDatabaseSchema",
                "isSink": "no"
            },
            {
                "name": "startsWith",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "BAD_DetailedDatabaseErrorExposure.java",
        "variables": [
            {
                "name": "args",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "e",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "query",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "\"SELECT * FROM accounts_table\"",
                        "type": "String",
                        "context": "public class BAD_DetailedDatabaseErrorExposure {\r\n    public static void main(String[] args) {\r\n        String query = \"SELECT * FROM accounts_table\";\r\n        try {\r\n            executeDatabaseQuery(query);\r\n | public class BAD_DetailedDatabaseErrorExposure {\r\n    public static void main(String[] args) {\r\n        String query = \"SELECT * FROM accounts_table\";\r\n        try {\r\n            executeDatabaseQuery(query);\r\n",
                        "nextNode": "query"
                    },
                    {
                        "name": "query",
                        "type": "Dataflow from `\"SELECT * FROM accounts_table\"` to `query`",
                        "context": "        String query = \"SELECT * FROM accounts_table\";\r\n        try {\r\n            executeDatabaseQuery(query);\r\n        } catch (Exception e) {\r\n            System.out.println(\"Database error: Failed to execute query: \" + query);\r\n |         String query = \"SELECT * FROM accounts_table\";\r\n        try {\r\n            executeDatabaseQuery(query);\r\n        } catch (Exception e) {\r\n            System.out.println(\"Database error: Failed to execute query: \" + query);\r\n |             executeDatabaseQuery(query);\r\n        } catch (Exception e) {\r\n            System.out.println(\"Database error: Failed to execute query: \" + query);\r\n        }\r\n    }\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "SELECT * FROM accounts_table",
                "isSensitive": "yes"
            },
            {
                "name": "Database error: Failed to execute query:",
                "isSensitive": "no"
            }
        ],
        "comments": [
            {
                "name": "Placeholder for database operation",
                "isSensitive": "no"
            }
        ],
        "sinks": [
            {
                "name": "println",
                "isSink": "yes"
            },
            {
                "name": "executeDatabaseQuery",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "BAD_EncryptionKeyError.java",
        "variables": [
            {
                "name": "args",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "data",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "\"Sensitive data to encrypt\"",
                        "type": "String",
                        "context": "\r\n    public static void main(String[] args) {\r\n        new BAD_EncryptionKeyError().useEncryptionKey(\"12345\", \"Sensitive data to encrypt\");\r\n    }\r\n}\r\n",
                        "nextNode": "String data"
                    },
                    {
                        "name": "String data",
                        "type": "String",
                        "context": "public class BAD_EncryptionKeyError {\r\n    public void useEncryptionKey(String key, String data) {\r\n        try {\r\n            if (key.length() < 32) {\r\n",
                        "nextNode": "data"
                    },
                    {
                        "name": "data",
                        "type": "Dataflow from `\"Sensitive data to encrypt\"` to `data`",
                        "context": "        } catch (IllegalArgumentException e) {\r\n            System.err.println(\"Encryption error: \" + e.getMessage());\r\n            throw new SecurityException(\"Encryption failed due to inadequate key length for data: \" + data);\r\n        }\r\n    }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "e",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "key",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "\"12345\"",
                        "type": "String",
                        "context": "\r\n    public static void main(String[] args) {\r\n        new BAD_EncryptionKeyError().useEncryptionKey(\"12345\", \"Sensitive data to encrypt\");\r\n    }\r\n}\r\n | \r\n    public static void main(String[] args) {\r\n        new BAD_EncryptionKeyError().useEncryptionKey(\"12345\", \"Sensitive data to encrypt\");\r\n    }\r\n}\r\n",
                        "nextNode": "String key"
                    },
                    {
                        "name": "String key",
                        "type": "String",
                        "context": "public class BAD_EncryptionKeyError {\r\n    public void useEncryptionKey(String key, String data) {\r\n        try {\r\n            if (key.length() < 32) {\r\n | public class BAD_EncryptionKeyError {\r\n    public void useEncryptionKey(String key, String data) {\r\n        try {\r\n            if (key.length() < 32) {\r\n",
                        "nextNode": "key"
                    },
                    {
                        "name": "key",
                        "type": "Dataflow from `\"12345\"` to `key`",
                        "context": "    public void useEncryptionKey(String key, String data) {\r\n        try {\r\n            if (key.length() < 32) {\r\n                throw new IllegalArgumentException(\"Encryption key too short: \" + key);\r\n            }\r\n |     public void useEncryptionKey(String key, String data) {\r\n        try {\r\n            if (key.length() < 32) {\r\n                throw new IllegalArgumentException(\"Encryption key too short: \" + key);\r\n            }\r\n |         try {\r\n            if (key.length() < 32) {\r\n                throw new IllegalArgumentException(\"Encryption key too short: \" + key);\r\n            }\r\n            // Encryption logic\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "Encryption key too short:",
                "isSensitive": "no"
            },
            {
                "name": "Sensitive data to encrypt",
                "isSensitive": "yes"
            },
            {
                "name": "12345",
                "isSensitive": "yes"
            },
            {
                "name": "Encryption error:",
                "isSensitive": "no"
            },
            {
                "name": "Encryption failed due to inadequate key length for data:",
                "isSensitive": "no"
            }
        ],
        "comments": [
            {
                "name": "Encryption logic",
                "isSensitive": "no"
            }
        ],
        "sinks": [
            {
                "name": "println",
                "isSink": "yes"
            },
            {
                "name": "useEncryptionKey",
                "isSink": "no"
            },
            {
                "name": "length",
                "isSink": "no"
            },
            {
                "name": "getMessage",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "BAD_FinancialAuditError.java",
        "variables": [
            {
                "name": "financialYear",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "\"2023\"",
                        "type": "String",
                        "context": "\r\n    public static void main(String[] args) {\r\n        new BAD_FinancialAuditError().processAuditReport(\"2023\", -500000.00);\r\n    }\r\n}\r\n | \r\n    public static void main(String[] args) {\r\n        new BAD_FinancialAuditError().processAuditReport(\"2023\", -500000.00);\r\n    }\r\n}\r\n",
                        "nextNode": "String financialYear"
                    },
                    {
                        "name": "String financialYear",
                        "type": "String",
                        "context": "public class BAD_FinancialAuditError {\r\n    public void processAuditReport(String financialYear, double declaredRevenue) {\r\n        try {\r\n            if (declaredRevenue < 0) {\r\n | public class BAD_FinancialAuditError {\r\n    public void processAuditReport(String financialYear, double declaredRevenue) {\r\n        try {\r\n            if (declaredRevenue < 0) {\r\n",
                        "nextNode": "financialYear"
                    },
                    {
                        "name": "financialYear",
                        "type": "Dataflow from `\"2023\"` to `financialYear`",
                        "context": "            // Audit processing logic\r\n        } catch (Exception e) {\r\n            System.err.println(\"Audit processing error for financial year \" + financialYear + \": \" + e.getMessage());\r\n            throw new RuntimeException(\"Failed to process audit for financial year \" + financialYear, e);\r\n        }\r\n |             // Audit processing logic\r\n        } catch (Exception e) {\r\n            System.err.println(\"Audit processing error for financial year \" + financialYear + \": \" + e.getMessage());\r\n            throw new RuntimeException(\"Failed to process audit for financial year \" + financialYear, e);\r\n        }\r\n |         } catch (Exception e) {\r\n            System.err.println(\"Audit processing error for financial year \" + financialYear + \": \" + e.getMessage());\r\n            throw new RuntimeException(\"Failed to process audit for financial year \" + financialYear, e);\r\n        }\r\n    }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "args",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "e",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "declaredRevenue",
                "isSensitive": "yes",
                "graph": []
            }
        ],
        "strings": [
            {
                "name": "Audit processing error for financial year",
                "isSensitive": "no"
            },
            {
                "name": "Failed to process audit for financial year",
                "isSensitive": "no"
            },
            {
                "name": "Revenue cannot be negative:",
                "isSensitive": "no"
            },
            {
                "name": "2023",
                "isSensitive": "no"
            },
            {
                "name": ":",
                "isSensitive": "no"
            }
        ],
        "comments": [
            {
                "name": "Audit processing logic",
                "isSensitive": "no"
            }
        ],
        "sinks": [
            {
                "name": "println",
                "isSink": "yes"
            },
            {
                "name": "processAuditReport",
                "isSink": "no"
            },
            {
                "name": "getMessage",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "BAD_HealthcareSystemError.java",
        "variables": [
            {
                "name": "args",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "e",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "errorMessage",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "systemConfig",
                        "type": "String",
                        "context": "    public void initializeHealthcareSystem(String systemConfig) {\r\n        try {\r\n            if (!systemConfig.contains(\"HIPAA_compliant\")) {\r\n                throw new IllegalStateException(\"System configuration must be HIPAA compliant.\");\r\n            }\r\n |             // Initialization logic\r\n        } catch (IllegalStateException e) {\r\n            String errorMessage = \"Initialization failed with non-compliant settings: \" + systemConfig;\r\n            System.err.println(errorMessage);\r\n            throw new SecurityException(errorMessage);\r\n |     public void initializeHealthcareSystem(String systemConfig) {\r\n        try {\r\n            if (!systemConfig.contains(\"HIPAA_compliant\")) {\r\n                throw new IllegalStateException(\"System configuration must be HIPAA compliant.\");\r\n            }\r\n |             // Initialization logic\r\n        } catch (IllegalStateException e) {\r\n            String errorMessage = \"Initialization failed with non-compliant settings: \" + systemConfig;\r\n            System.err.println(errorMessage);\r\n            throw new SecurityException(errorMessage);\r\n",
                        "nextNode": "\"Initialization failed with non-compliant settings: \" + systemConfig"
                    },
                    {
                        "name": "\"Initialization failed with non-compliant settings: \" + systemConfig",
                        "type": "String",
                        "context": "            // Initialization logic\r\n        } catch (IllegalStateException e) {\r\n            String errorMessage = \"Initialization failed with non-compliant settings: \" + systemConfig;\r\n            System.err.println(errorMessage);\r\n            throw new SecurityException(errorMessage);\r\n |             // Initialization logic\r\n        } catch (IllegalStateException e) {\r\n            String errorMessage = \"Initialization failed with non-compliant settings: \" + systemConfig;\r\n            System.err.println(errorMessage);\r\n            throw new SecurityException(errorMessage);\r\n",
                        "nextNode": "errorMessage"
                    },
                    {
                        "name": "errorMessage",
                        "type": "Dataflow from `systemConfig` to `errorMessage`\nDataflow from `systemConfig` to `errorMessage`\nDataflow from `\"Initialization failed with non-compliant settings: \"` to `errorMessage`\nDataflow from `\"encryption=weak, HIPAA_compliant=false\"` to `errorMessage`",
                        "context": "        } catch (IllegalStateException e) {\r\n            String errorMessage = \"Initialization failed with non-compliant settings: \" + systemConfig;\r\n            System.err.println(errorMessage);\r\n            throw new SecurityException(errorMessage);\r\n        }\r\n |         } catch (IllegalStateException e) {\r\n            String errorMessage = \"Initialization failed with non-compliant settings: \" + systemConfig;\r\n            System.err.println(errorMessage);\r\n            throw new SecurityException(errorMessage);\r\n        }\r\n |             String errorMessage = \"Initialization failed with non-compliant settings: \" + systemConfig;\r\n            System.err.println(errorMessage);\r\n            throw new SecurityException(errorMessage);\r\n        }\r\n    }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "systemConfig",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "\"encryption=weak, HIPAA_compliant=false\"",
                        "type": "String",
                        "context": "\r\n    public static void main(String[] args) {\r\n        new BAD_HealthcareSystemError().initializeHealthcareSystem(\"encryption=weak, HIPAA_compliant=false\");\r\n    }\r\n}\r\n | \r\n    public static void main(String[] args) {\r\n        new BAD_HealthcareSystemError().initializeHealthcareSystem(\"encryption=weak, HIPAA_compliant=false\");\r\n    }\r\n}\r\n",
                        "nextNode": "String systemConfig"
                    },
                    {
                        "name": "String systemConfig",
                        "type": "String",
                        "context": "public class BAD_HealthcareSystemError {\r\n    public void initializeHealthcareSystem(String systemConfig) {\r\n        try {\r\n            if (!systemConfig.contains(\"HIPAA_compliant\")) {\r\n | public class BAD_HealthcareSystemError {\r\n    public void initializeHealthcareSystem(String systemConfig) {\r\n        try {\r\n            if (!systemConfig.contains(\"HIPAA_compliant\")) {\r\n",
                        "nextNode": "systemConfig"
                    },
                    {
                        "name": "systemConfig",
                        "type": "Dataflow from `\"encryption=weak, HIPAA_compliant=false\"` to `systemConfig`",
                        "context": "    public void initializeHealthcareSystem(String systemConfig) {\r\n        try {\r\n            if (!systemConfig.contains(\"HIPAA_compliant\")) {\r\n                throw new IllegalStateException(\"System configuration must be HIPAA compliant.\");\r\n            }\r\n |     public void initializeHealthcareSystem(String systemConfig) {\r\n        try {\r\n            if (!systemConfig.contains(\"HIPAA_compliant\")) {\r\n                throw new IllegalStateException(\"System configuration must be HIPAA compliant.\");\r\n            }\r\n |             // Initialization logic\r\n        } catch (IllegalStateException e) {\r\n            String errorMessage = \"Initialization failed with non-compliant settings: \" + systemConfig;\r\n            System.err.println(errorMessage);\r\n            throw new SecurityException(errorMessage);\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "System configuration must be HIPAA compliant.",
                "isSensitive": "no"
            },
            {
                "name": "HIPAA_compliant",
                "isSensitive": "no"
            },
            {
                "name": "encryption=weak, HIPAA_compliant=false",
                "isSensitive": "yes"
            },
            {
                "name": "Initialization failed with non-compliant settings:",
                "isSensitive": "no"
            }
        ],
        "comments": [
            {
                "name": "Initialization logic",
                "isSensitive": "no"
            }
        ],
        "sinks": [
            {
                "name": "println",
                "isSink": "yes"
            },
            {
                "name": "contains",
                "isSink": "no"
            },
            {
                "name": "initializeHealthcareSystem",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "BAD_MedicalRecordSystemLookup.java",
        "variables": [
            {
                "name": "args",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "e",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "patientId",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "\"patient_112233\"",
                        "type": "String",
                        "context": "\r\n    public static void main(String[] args) {\r\n        new BAD_MedicalRecordSystemLookup().retrieveRecord(\"patient_112233\");\r\n    }\r\n} | \r\n    public static void main(String[] args) {\r\n        new BAD_MedicalRecordSystemLookup().retrieveRecord(\"patient_112233\");\r\n    }\r\n} | \r\n    public static void main(String[] args) {\r\n        new BAD_MedicalRecordSystemLookup().retrieveRecord(\"patient_112233\");\r\n    }\r\n}",
                        "nextNode": "String patientId"
                    },
                    {
                        "name": "String patientId",
                        "type": "String",
                        "context": "\r\npublic class BAD_MedicalRecordSystemLookup {\r\n    public void retrieveRecord(String patientId) {\r\n        Connection connection = null;\r\n        PreparedStatement statement = null;\r\n | \r\npublic class BAD_MedicalRecordSystemLookup {\r\n    public void retrieveRecord(String patientId) {\r\n        Connection connection = null;\r\n        PreparedStatement statement = null;\r\n | \r\npublic class BAD_MedicalRecordSystemLookup {\r\n    public void retrieveRecord(String patientId) {\r\n        Connection connection = null;\r\n        PreparedStatement statement = null;\r\n",
                        "nextNode": "patientId"
                    },
                    {
                        "name": "patientId",
                        "type": "Dataflow from `\"patient_112233\"` to `patientId`",
                        "context": "            String sql = \"SELECT * FROM medical_records WHERE patient_id = ?\";\r\n            statement = connection.prepareStatement(sql);\r\n            statement.setString(1, patientId);\r\n\r\n            // Execute query and process result set\r\n |             String sql = \"SELECT * FROM medical_records WHERE patient_id = ?\";\r\n            statement = connection.prepareStatement(sql);\r\n            statement.setString(1, patientId);\r\n\r\n            // Execute query and process result set\r\n |             resultSet = statement.executeQuery();\r\n            if (resultSet.next()) {\r\n                System.out.println(\"Medical record for patient ID: \" + patientId + \" retrieved successfully.\");\r\n            } else {\r\n                throw new Exception(\"No medical record found for patient ID: \" + patientId);\r\n |             String sql = \"SELECT * FROM medical_records WHERE patient_id = ?\";\r\n            statement = connection.prepareStatement(sql);\r\n            statement.setString(1, patientId);\r\n\r\n            // Execute query and process result set\r\n |                 System.out.println(\"Medical record for patient ID: \" + patientId + \" retrieved successfully.\");\r\n            } else {\r\n                throw new Exception(\"No medical record found for patient ID: \" + patientId);\r\n            }\r\n        } catch (Exception e) {\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "statement",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "sql",
                        "type": "String",
                        "context": "            // Prepare SQL query to retrieve medical record\r\n            String sql = \"SELECT * FROM medical_records WHERE patient_id = ?\";\r\n            statement = connection.prepareStatement(sql);\r\n            statement.setString(1, patientId);\r\n\r\n |             // Prepare SQL query to retrieve medical record\r\n            String sql = \"SELECT * FROM medical_records WHERE patient_id = ?\";\r\n            statement = connection.prepareStatement(sql);\r\n            statement.setString(1, patientId);\r\n\r\n |             // Prepare SQL query to retrieve medical record\r\n            String sql = \"SELECT * FROM medical_records WHERE patient_id = ?\";\r\n            statement = connection.prepareStatement(sql);\r\n            statement.setString(1, patientId);\r\n\r\n |             // Prepare SQL query to retrieve medical record\r\n            String sql = \"SELECT * FROM medical_records WHERE patient_id = ?\";\r\n            statement = connection.prepareStatement(sql);\r\n            statement.setString(1, patientId);\r\n\r\n",
                        "nextNode": "connection.prepareStatement(sql)"
                    },
                    {
                        "name": "connection.prepareStatement(sql)",
                        "type": "PreparedStatement",
                        "context": "            // Prepare SQL query to retrieve medical record\r\n            String sql = \"SELECT * FROM medical_records WHERE patient_id = ?\";\r\n            statement = connection.prepareStatement(sql);\r\n            statement.setString(1, patientId);\r\n\r\n |             // Prepare SQL query to retrieve medical record\r\n            String sql = \"SELECT * FROM medical_records WHERE patient_id = ?\";\r\n            statement = connection.prepareStatement(sql);\r\n            statement.setString(1, patientId);\r\n\r\n |             // Prepare SQL query to retrieve medical record\r\n            String sql = \"SELECT * FROM medical_records WHERE patient_id = ?\";\r\n            statement = connection.prepareStatement(sql);\r\n            statement.setString(1, patientId);\r\n\r\n |             // Prepare SQL query to retrieve medical record\r\n            String sql = \"SELECT * FROM medical_records WHERE patient_id = ?\";\r\n            statement = connection.prepareStatement(sql);\r\n            statement.setString(1, patientId);\r\n\r\n",
                        "nextNode": "statement"
                    },
                    {
                        "name": "statement",
                        "type": "Dataflow from `sql` to `statement`\nDataflow from `\"SELECT * FROM medical_records WHERE patient_id = ?\"` to `statement`\nDataflow from `prepareStatement(...)` to `statement`",
                        "context": "            String sql = \"SELECT * FROM medical_records WHERE patient_id = ?\";\r\n            statement = connection.prepareStatement(sql);\r\n            statement.setString(1, patientId);\r\n\r\n            // Execute query and process result set\r\n |             String sql = \"SELECT * FROM medical_records WHERE patient_id = ?\";\r\n            statement = connection.prepareStatement(sql);\r\n            statement.setString(1, patientId);\r\n\r\n            // Execute query and process result set\r\n | \r\n            // Execute query and process result set\r\n            resultSet = statement.executeQuery();\r\n            if (resultSet.next()) {\r\n                System.out.println(\"Medical record for patient ID: \" + patientId + \" retrieved successfully.\");\r\n |             String sql = \"SELECT * FROM medical_records WHERE patient_id = ?\";\r\n            statement = connection.prepareStatement(sql);\r\n            statement.setString(1, patientId);\r\n\r\n            // Execute query and process result set\r\n |             try {\r\n                if (resultSet != null) resultSet.close();\r\n                if (statement != null) statement.close();\r\n                if (connection != null) connection.close();\r\n            } catch (Exception e) {\r\n |             String sql = \"SELECT * FROM medical_records WHERE patient_id = ?\";\r\n            statement = connection.prepareStatement(sql);\r\n            statement.setString(1, patientId);\r\n\r\n            // Execute query and process result set\r\n |             try {\r\n                if (resultSet != null) resultSet.close();\r\n                if (statement != null) statement.close();\r\n                if (connection != null) connection.close();\r\n            } catch (Exception e) {\r\n |             try {\r\n                if (resultSet != null) resultSet.close();\r\n                if (statement != null) statement.close();\r\n                if (connection != null) connection.close();\r\n            } catch (Exception e) {\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "connection",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "DriverManager.getConnection(\"jdbc:mysql://hawaiihealth:3306/medical_records\", \"user\", \"password\")",
                        "type": "Connection",
                        "context": "        try {\r\n            // Establish database connection\r\n            connection = DriverManager.getConnection(\"jdbc:mysql://hawaiihealth:3306/medical_records\", \"user\", \"password\");\r\n\r\n            // Prepare SQL query to retrieve medical record\r\n",
                        "nextNode": "connection"
                    },
                    {
                        "name": "null",
                        "type": "Object",
                        "context": "public class BAD_MedicalRecordSystemLookup {\r\n    public void retrieveRecord(String patientId) {\r\n        Connection connection = null;\r\n        PreparedStatement statement = null;\r\n        ResultSet resultSet = null;\r\n | public class BAD_MedicalRecordSystemLookup {\r\n    public void retrieveRecord(String patientId) {\r\n        Connection connection = null;\r\n        PreparedStatement statement = null;\r\n        ResultSet resultSet = null;\r\n",
                        "nextNode": "connection"
                    },
                    {
                        "name": "connection",
                        "type": "Dataflow from `getConnection(...)` to `connection`\nDataflow from `\"jdbc:mysql://hawaiihealth:3306/medical_records\"` to `connection`\nDataflow from `\"user\"` to `connection`\nDataflow from `\"password\"` to `connection`",
                        "context": "            // Prepare SQL query to retrieve medical record\r\n            String sql = \"SELECT * FROM medical_records WHERE patient_id = ?\";\r\n            statement = connection.prepareStatement(sql);\r\n            statement.setString(1, patientId);\r\n\r\n |                 if (resultSet != null) resultSet.close();\r\n                if (statement != null) statement.close();\r\n                if (connection != null) connection.close();\r\n            } catch (Exception e) {\r\n                System.err.println(\"Error closing resources: \" + e.getMessage());\r\n |                 if (resultSet != null) resultSet.close();\r\n                if (statement != null) statement.close();\r\n                if (connection != null) connection.close();\r\n            } catch (Exception e) {\r\n                System.err.println(\"Error closing resources: \" + e.getMessage());\r\n |                 if (resultSet != null) resultSet.close();\r\n                if (statement != null) statement.close();\r\n                if (connection != null) connection.close();\r\n            } catch (Exception e) {\r\n                System.err.println(\"Error closing resources: \" + e.getMessage());\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "resultSet",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "statement.executeQuery()",
                        "type": "ResultSet",
                        "context": "\r\n            // Execute query and process result set\r\n            resultSet = statement.executeQuery();\r\n            if (resultSet.next()) {\r\n                System.out.println(\"Medical record for patient ID: \" + patientId + \" retrieved successfully.\");\r\n",
                        "nextNode": "resultSet"
                    },
                    {
                        "name": "null",
                        "type": "Object",
                        "context": "        Connection connection = null;\r\n        PreparedStatement statement = null;\r\n        ResultSet resultSet = null;\r\n\r\n        try {\r\n |         Connection connection = null;\r\n        PreparedStatement statement = null;\r\n        ResultSet resultSet = null;\r\n\r\n        try {\r\n",
                        "nextNode": "resultSet"
                    },
                    {
                        "name": "resultSet",
                        "type": "Dataflow from `executeQuery(...)` to `resultSet`",
                        "context": "            // Execute query and process result set\r\n            resultSet = statement.executeQuery();\r\n            if (resultSet.next()) {\r\n                System.out.println(\"Medical record for patient ID: \" + patientId + \" retrieved successfully.\");\r\n            } else {\r\n |             // Close resources\r\n            try {\r\n                if (resultSet != null) resultSet.close();\r\n                if (statement != null) statement.close();\r\n                if (connection != null) connection.close();\r\n |             // Close resources\r\n            try {\r\n                if (resultSet != null) resultSet.close();\r\n                if (statement != null) statement.close();\r\n                if (connection != null) connection.close();\r\n |             // Close resources\r\n            try {\r\n                if (resultSet != null) resultSet.close();\r\n                if (statement != null) statement.close();\r\n                if (connection != null) connection.close();\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "sql",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "\"SELECT * FROM medical_records WHERE patient_id = ?\"",
                        "type": "String",
                        "context": "\r\n            // Prepare SQL query to retrieve medical record\r\n            String sql = \"SELECT * FROM medical_records WHERE patient_id = ?\";\r\n            statement = connection.prepareStatement(sql);\r\n            statement.setString(1, patientId);\r\n",
                        "nextNode": "sql"
                    },
                    {
                        "name": "sql",
                        "type": "Dataflow from `\"SELECT * FROM medical_records WHERE patient_id = ?\"` to `sql`",
                        "context": "            // Prepare SQL query to retrieve medical record\r\n            String sql = \"SELECT * FROM medical_records WHERE patient_id = ?\";\r\n            statement = connection.prepareStatement(sql);\r\n            statement.setString(1, patientId);\r\n\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "Medical record error:",
                "isSensitive": "no"
            },
            {
                "name": "patient_112233",
                "isSensitive": "yes"
            },
            {
                "name": "password",
                "isSensitive": "yes"
            },
            {
                "name": "Medical record for patient ID:",
                "isSensitive": "no"
            },
            {
                "name": "retrieved successfully.",
                "isSensitive": "no"
            },
            {
                "name": "jdbc:mysql://hawaiihealth:3306/medical_records",
                "isSensitive": "yes"
            },
            {
                "name": "Error closing resources:",
                "isSensitive": "no"
            },
            {
                "name": "No medical record found for patient ID:",
                "isSensitive": "no"
            },
            {
                "name": "user",
                "isSensitive": "yes"
            },
            {
                "name": "SELECT * FROM medical_records WHERE patient_id = ?",
                "isSensitive": "no"
            }
        ],
        "comments": [
            {
                "name": "Execute query and process result set",
                "isSensitive": "no"
            },
            {
                "name": "Establish database connection",
                "isSensitive": "no"
            },
            {
                "name": "Prepare SQL query to retrieve medical record",
                "isSensitive": "no"
            },
            {
                "name": "Close resources",
                "isSensitive": "no"
            }
        ],
        "sinks": [
            {
                "name": "next",
                "isSink": "no"
            },
            {
                "name": "getConnection",
                "isSink": "yes"
            },
            {
                "name": "println",
                "isSink": "yes"
            },
            {
                "name": "setString",
                "isSink": "no"
            },
            {
                "name": "getMessage",
                "isSink": "no"
            },
            {
                "name": "prepareStatement",
                "isSink": "no"
            },
            {
                "name": "retrieveRecord",
                "isSink": "no"
            },
            {
                "name": "close",
                "isSink": "no"
            },
            {
                "name": "executeQuery",
                "isSink": "yes"
            }
        ]
    },
    {
        "fileName": "BAD_MessagingSystem.java",
        "variables": [
            {
                "name": "args",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "e",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "userId",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "\"user42\"",
                        "type": "String",
                        "context": "\r\n    public static void main(String[] args) {\r\n        new BAD_MessagingSystem().sendMessage(\"user42\", \"Your PIN is 1234.\");\r\n    }\r\n}\r\n",
                        "nextNode": "String userId"
                    },
                    {
                        "name": "String userId",
                        "type": "String",
                        "context": "public class BAD_MessagingSystem {\r\n    public void sendMessage(String userId, String messageContent) {\r\n        try {\r\n            throw new Exception(\"Message sending failed for user \" + userId + \" with content: \" + messageContent);\r\n",
                        "nextNode": "userId"
                    },
                    {
                        "name": "userId",
                        "type": "Dataflow from `\"user42\"` to `userId`",
                        "context": "    public void sendMessage(String userId, String messageContent) {\r\n        try {\r\n            throw new Exception(\"Message sending failed for user \" + userId + \" with content: \" + messageContent);\r\n        } catch (Exception e) {\r\n            System.err.println(\"Messaging error: \" + e.getMessage());\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "messageContent",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "\"Your PIN is 1234.\"",
                        "type": "String",
                        "context": "\r\n    public static void main(String[] args) {\r\n        new BAD_MessagingSystem().sendMessage(\"user42\", \"Your PIN is 1234.\");\r\n    }\r\n}\r\n",
                        "nextNode": "String messageContent"
                    },
                    {
                        "name": "String messageContent",
                        "type": "String",
                        "context": "public class BAD_MessagingSystem {\r\n    public void sendMessage(String userId, String messageContent) {\r\n        try {\r\n            throw new Exception(\"Message sending failed for user \" + userId + \" with content: \" + messageContent);\r\n",
                        "nextNode": "messageContent"
                    },
                    {
                        "name": "messageContent",
                        "type": "Dataflow from `\"Your PIN is 1234.\"` to `messageContent`",
                        "context": "    public void sendMessage(String userId, String messageContent) {\r\n        try {\r\n            throw new Exception(\"Message sending failed for user \" + userId + \" with content: \" + messageContent);\r\n        } catch (Exception e) {\r\n            System.err.println(\"Messaging error: \" + e.getMessage());\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "Messaging error:",
                "isSensitive": "no"
            },
            {
                "name": "Your PIN is 1234.",
                "isSensitive": "yes"
            },
            {
                "name": "with content:",
                "isSensitive": "no"
            },
            {
                "name": "user42",
                "isSensitive": "yes"
            },
            {
                "name": "Message sending failed for user",
                "isSensitive": "no"
            },
            {
                "name": "Failed to send message, exposing sensitive content and user details.",
                "isSensitive": "no"
            }
        ],
        "comments": [],
        "sinks": [
            {
                "name": "println",
                "isSink": "yes"
            },
            {
                "name": "getMessage",
                "isSink": "no"
            },
            {
                "name": "sendMessage",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "BAD_MilitaryOperationPlanError.java",
        "variables": [
            {
                "name": "args",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "e",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "operationPlan",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "\"Operation Red Dawn at 0400 hours Secure the target zone.\"",
                        "type": "String",
                        "context": "\r\n    public static void main(String[] args) {\r\n        new BAD_MilitaryOperationPlanError().dispatchUnits(\"Operation Red Dawn at 0400 hours; Secure the target zone.\");\r\n    }\r\n}\r\n | \r\n    public static void main(String[] args) {\r\n        new BAD_MilitaryOperationPlanError().dispatchUnits(\"Operation Red Dawn at 0400 hours; Secure the target zone.\");\r\n    }\r\n}\r\n",
                        "nextNode": "String operationPlan"
                    },
                    {
                        "name": "String operationPlan",
                        "type": "String",
                        "context": "public class BAD_MilitaryOperationPlanError {\r\n    public void dispatchUnits(String operationPlan) {\r\n        try {\r\n            if (operationPlan.isEmpty()) {\r\n | public class BAD_MilitaryOperationPlanError {\r\n    public void dispatchUnits(String operationPlan) {\r\n        try {\r\n            if (operationPlan.isEmpty()) {\r\n",
                        "nextNode": "operationPlan"
                    },
                    {
                        "name": "operationPlan",
                        "type": "Dataflow from `\"Operation Red Dawn at 0400 hours; Secure the target zone.\"` to `operationPlan`",
                        "context": "    public void dispatchUnits(String operationPlan) {\r\n        try {\r\n            if (operationPlan.isEmpty()) {\r\n                throw new SecurityException(\"Operation plan is required.\");\r\n            }\r\n |     public void dispatchUnits(String operationPlan) {\r\n        try {\r\n            if (operationPlan.isEmpty()) {\r\n                throw new SecurityException(\"Operation plan is required.\");\r\n            }\r\n |             // Pretend to coordinate military units\r\n        } catch (SecurityException e) {\r\n            System.err.println(\"Military operation could not be initiated due to an empty plan: \" + operationPlan);\r\n        }\r\n    }\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "Operation Red Dawn at 0400 hours; Secure the target zone.",
                "isSensitive": "yes"
            },
            {
                "name": "Military operation could not be initiated due to an empty plan:",
                "isSensitive": "no"
            },
            {
                "name": "Operation plan is required.",
                "isSensitive": "no"
            }
        ],
        "comments": [
            {
                "name": "Pretend to coordinate military units",
                "isSensitive": "no"
            }
        ],
        "sinks": [
            {
                "name": "println",
                "isSink": "yes"
            },
            {
                "name": "dispatchUnits",
                "isSink": "no"
            },
            {
                "name": "isEmpty",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "BAD_PatentApplicationError.java",
        "variables": [
            {
                "name": "args",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "patentDetails",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "\"Invention: New efficient solar panel, Inventor: John Doe\"",
                        "type": "String",
                        "context": "\r\n    public static void main(String[] args) {\r\n        new BAD_PatentApplicationError().submitPatentApplication(\"Invention: New efficient solar panel, Inventor: John Doe\");\r\n    }\r\n}\r\n | \r\n    public static void main(String[] args) {\r\n        new BAD_PatentApplicationError().submitPatentApplication(\"Invention: New efficient solar panel, Inventor: John Doe\");\r\n    }\r\n}\r\n",
                        "nextNode": "String patentDetails"
                    },
                    {
                        "name": "String patentDetails",
                        "type": "String",
                        "context": "public class BAD_PatentApplicationError {\r\n    public void submitPatentApplication(String patentDetails) {\r\n        try {\r\n            if (patentDetails == null) {\r\n | public class BAD_PatentApplicationError {\r\n    public void submitPatentApplication(String patentDetails) {\r\n        try {\r\n            if (patentDetails == null) {\r\n",
                        "nextNode": "patentDetails"
                    },
                    {
                        "name": "patentDetails",
                        "type": "Dataflow from `\"Invention: New efficient solar panel, Inventor: John Doe\"` to `patentDetails`",
                        "context": "    public void submitPatentApplication(String patentDetails) {\r\n        try {\r\n            if (patentDetails == null) {\r\n                throw new IllegalArgumentException(\"Patent details are required.\");\r\n            }\r\n |     public void submitPatentApplication(String patentDetails) {\r\n        try {\r\n            if (patentDetails == null) {\r\n                throw new IllegalArgumentException(\"Patent details are required.\");\r\n            }\r\n |             // Simulated submission logic\r\n        } catch (Exception e) {\r\n            System.err.println(\"Failed to submit patent application due to missing information: \" + patentDetails);\r\n        }\r\n    }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "e",
                "isSensitive": "yes",
                "graph": []
            }
        ],
        "strings": [
            {
                "name": "Patent details are required.",
                "isSensitive": "no"
            },
            {
                "name": "Failed to submit patent application due to missing information:",
                "isSensitive": "no"
            },
            {
                "name": "Invention: New efficient solar panel, Inventor: John Doe",
                "isSensitive": "yes"
            }
        ],
        "comments": [
            {
                "name": "Simulated submission logic",
                "isSensitive": "no"
            }
        ],
        "sinks": [
            {
                "name": "println",
                "isSink": "yes"
            },
            {
                "name": "submitPatentApplication",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "BAD_ProcessMonitoring.java",
        "variables": [
            {
                "name": "args",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "e",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "processName",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "\"DatabaseSyncJob\"",
                        "type": "String",
                        "context": "\r\n    public static void main(String[] args) {\r\n        new BAD_ProcessMonitoring().monitorProcess(\"DatabaseSyncJob\");\r\n    }\r\n}\r\n | \r\n    public static void main(String[] args) {\r\n        new BAD_ProcessMonitoring().monitorProcess(\"DatabaseSyncJob\");\r\n    }\r\n}\r\n",
                        "nextNode": "String processName"
                    },
                    {
                        "name": "String processName",
                        "type": "String",
                        "context": "public class BAD_ProcessMonitoring {\r\n    public void monitorProcess(String processName) {\r\n        try {\r\n            // Monitor process logic\r\n | public class BAD_ProcessMonitoring {\r\n    public void monitorProcess(String processName) {\r\n        try {\r\n            // Monitor process logic\r\n",
                        "nextNode": "processName"
                    },
                    {
                        "name": "processName",
                        "type": "Dataflow from `\"DatabaseSyncJob\"` to `processName`",
                        "context": "        try {\r\n            // Monitor process logic\r\n            throw new Exception(\"Critical process failure detected: \" + processName);\r\n        } catch (Exception e) {\r\n            System.err.println(\"Monitoring error: \" + e.getMessage());\r\n |         try {\r\n            // Monitor process logic\r\n            throw new Exception(\"Critical process failure detected: \" + processName);\r\n        } catch (Exception e) {\r\n            System.err.println(\"Monitoring error: \" + e.getMessage());\r\n |         } catch (Exception e) {\r\n            System.err.println(\"Monitoring error: \" + e.getMessage());\r\n            throw new RuntimeException(\"Critical monitoring failure. Escalate immediately for process: \" + processName, e);\r\n        }\r\n    }\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "DatabaseSyncJob",
                "isSensitive": "yes"
            },
            {
                "name": "Monitoring error:",
                "isSensitive": "no"
            },
            {
                "name": "Critical monitoring failure. Escalate immediately for process:",
                "isSensitive": "no"
            },
            {
                "name": "Critical process failure detected:",
                "isSensitive": "no"
            }
        ],
        "comments": [
            {
                "name": "Monitor process logic",
                "isSensitive": "no"
            }
        ],
        "sinks": [
            {
                "name": "println",
                "isSink": "yes"
            },
            {
                "name": "monitorProcess",
                "isSink": "no"
            },
            {
                "name": "getMessage",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "BAD_RealTimeBiddingError.java",
        "variables": [
            {
                "name": "args",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "e",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "bidData",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "\"\"",
                        "type": "String",
                        "context": "\r\n    public static void main(String[] args) {\r\n        new BAD_RealTimeBiddingError().processBid(\"\", \"Session1234\");\r\n    }\r\n}\r\n",
                        "nextNode": "String bidData"
                    },
                    {
                        "name": "String bidData",
                        "type": "String",
                        "context": "public class BAD_RealTimeBiddingError {\r\n    public void processBid(String bidData, String sessionId) {\r\n        try {\r\n            if (bidData.isEmpty()) {\r\n",
                        "nextNode": "bidData"
                    },
                    {
                        "name": "bidData",
                        "type": "Dataflow from `\"\"` to `bidData`",
                        "context": "    public void processBid(String bidData, String sessionId) {\r\n        try {\r\n            if (bidData.isEmpty()) {\r\n                throw new Exception(\"Empty bid data received for session: \" + sessionId);\r\n            }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "sessionId",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "\"Session1234\"",
                        "type": "String",
                        "context": "\r\n    public static void main(String[] args) {\r\n        new BAD_RealTimeBiddingError().processBid(\"\", \"Session1234\");\r\n    }\r\n}\r\n | \r\n    public static void main(String[] args) {\r\n        new BAD_RealTimeBiddingError().processBid(\"\", \"Session1234\");\r\n    }\r\n}\r\n",
                        "nextNode": "String sessionId"
                    },
                    {
                        "name": "String sessionId",
                        "type": "String",
                        "context": "public class BAD_RealTimeBiddingError {\r\n    public void processBid(String bidData, String sessionId) {\r\n        try {\r\n            if (bidData.isEmpty()) {\r\n | public class BAD_RealTimeBiddingError {\r\n    public void processBid(String bidData, String sessionId) {\r\n        try {\r\n            if (bidData.isEmpty()) {\r\n",
                        "nextNode": "sessionId"
                    },
                    {
                        "name": "sessionId",
                        "type": "Dataflow from `\"Session1234\"` to `sessionId`",
                        "context": "        try {\r\n            if (bidData.isEmpty()) {\r\n                throw new Exception(\"Empty bid data received for session: \" + sessionId);\r\n            }\r\n            // Bid processing logic\r\n |             // Bid processing logic\r\n        } catch (Exception e) {\r\n            String errorDetails = \"Error processing bid for session \" + sessionId + \": \" + e.getMessage();\r\n            System.err.println(errorDetails);\r\n            throw new RuntimeException(\"Failed to process bid, contact tech support with this session ID.\", e);\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "errorDetails",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "sessionId",
                        "type": "String",
                        "context": "        try {\r\n            if (bidData.isEmpty()) {\r\n                throw new Exception(\"Empty bid data received for session: \" + sessionId);\r\n            }\r\n            // Bid processing logic\r\n |             // Bid processing logic\r\n        } catch (Exception e) {\r\n            String errorDetails = \"Error processing bid for session \" + sessionId + \": \" + e.getMessage();\r\n            System.err.println(errorDetails);\r\n            throw new RuntimeException(\"Failed to process bid, contact tech support with this session ID.\", e);\r\n",
                        "nextNode": "\"Error processing bid for session \" + sessionId"
                    },
                    {
                        "name": "\"Error processing bid for session \" + sessionId",
                        "type": "String",
                        "context": "            // Bid processing logic\r\n        } catch (Exception e) {\r\n            String errorDetails = \"Error processing bid for session \" + sessionId + \": \" + e.getMessage();\r\n            System.err.println(errorDetails);\r\n            throw new RuntimeException(\"Failed to process bid, contact tech support with this session ID.\", e);\r\n",
                        "nextNode": "\"Error processing bid for session \" + sessionId + \": \""
                    },
                    {
                        "name": "\"Error processing bid for session \" + sessionId + \": \"",
                        "type": "String",
                        "context": "            // Bid processing logic\r\n        } catch (Exception e) {\r\n            String errorDetails = \"Error processing bid for session \" + sessionId + \": \" + e.getMessage();\r\n            System.err.println(errorDetails);\r\n            throw new RuntimeException(\"Failed to process bid, contact tech support with this session ID.\", e);\r\n",
                        "nextNode": "\"Error processing bid for session \" + sessionId + \": \" + e.getMessage()"
                    },
                    {
                        "name": "\"Error processing bid for session \" + sessionId + \": \" + e.getMessage()",
                        "type": "String",
                        "context": "            // Bid processing logic\r\n        } catch (Exception e) {\r\n            String errorDetails = \"Error processing bid for session \" + sessionId + \": \" + e.getMessage();\r\n            System.err.println(errorDetails);\r\n            throw new RuntimeException(\"Failed to process bid, contact tech support with this session ID.\", e);\r\n",
                        "nextNode": "errorDetails"
                    },
                    {
                        "name": "errorDetails",
                        "type": "Dataflow from `sessionId` to `errorDetails`\nDataflow from `sessionId` to `errorDetails`\nDataflow from `getMessage(...)` to `errorDetails`\nDataflow from `\": \"` to `errorDetails`\nDataflow from `\"Error processing bid for session \"` to `errorDetails`\nDataflow from `\"Session1234\"` to `errorDetails`",
                        "context": "        } catch (Exception e) {\r\n            String errorDetails = \"Error processing bid for session \" + sessionId + \": \" + e.getMessage();\r\n            System.err.println(errorDetails);\r\n            throw new RuntimeException(\"Failed to process bid, contact tech support with this session ID.\", e);\r\n        }\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "Empty bid data received for session:",
                "isSensitive": "no"
            },
            {
                "name": "Failed to process bid, contact tech support with this session ID.",
                "isSensitive": "no"
            },
            {
                "name": "Error processing bid for session",
                "isSensitive": "no"
            },
            {
                "name": "Session1234",
                "isSensitive": "yes"
            },
            {
                "name": ":",
                "isSensitive": "no"
            }
        ],
        "comments": [
            {
                "name": "Bid processing logic",
                "isSensitive": "no"
            }
        ],
        "sinks": [
            {
                "name": "println",
                "isSink": "yes"
            },
            {
                "name": "processBid",
                "isSink": "no"
            },
            {
                "name": "isEmpty",
                "isSink": "no"
            },
            {
                "name": "getMessage",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "BAD_SensitivePathDisclosureInErrors.java",
        "variables": [
            {
                "name": "args",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "e",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "filePath",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "\"/sensitive/config/taxes.txt\"",
                        "type": "String",
                        "context": "public class BAD_SensitivePathDisclosureInErrors{\r\n    public static void main(String[] args) {\r\n        String filePath = \"/sensitive/config/taxes.txt\";\r\n\r\n        try {\r\n | public class BAD_SensitivePathDisclosureInErrors{\r\n    public static void main(String[] args) {\r\n        String filePath = \"/sensitive/config/taxes.txt\";\r\n\r\n        try {\r\n",
                        "nextNode": "filePath"
                    },
                    {
                        "name": "filePath",
                        "type": "Dataflow from `\"/sensitive/config/taxes.txt\"` to `filePath`",
                        "context": "\r\n        try {\r\n            Scanner scanner = new Scanner(new File(filePath));\r\n            while (scanner.hasNextLine()) {\r\n                System.out.println(scanner.nextLine());\r\n | \r\n        try {\r\n            Scanner scanner = new Scanner(new File(filePath));\r\n            while (scanner.hasNextLine()) {\r\n                System.out.println(scanner.nextLine());\r\n |             scanner.close();\r\n        } catch (FileNotFoundException e) {\r\n            System.err.println(\"Error: File not found - \" + filePath);\r\n        } catch (Exception e) {\r\n            System.err.println(\"An unexpected error occurred.\");\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "scanner",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "filePath",
                        "type": "String",
                        "context": "\r\n        try {\r\n            Scanner scanner = new Scanner(new File(filePath));\r\n            while (scanner.hasNextLine()) {\r\n                System.out.println(scanner.nextLine());\r\n | \r\n        try {\r\n            Scanner scanner = new Scanner(new File(filePath));\r\n            while (scanner.hasNextLine()) {\r\n                System.out.println(scanner.nextLine());\r\n | \r\n        try {\r\n            Scanner scanner = new Scanner(new File(filePath));\r\n            while (scanner.hasNextLine()) {\r\n                System.out.println(scanner.nextLine());\r\n",
                        "nextNode": "new File(filePath)"
                    },
                    {
                        "name": "new File(filePath)",
                        "type": "File",
                        "context": "\r\n        try {\r\n            Scanner scanner = new Scanner(new File(filePath));\r\n            while (scanner.hasNextLine()) {\r\n                System.out.println(scanner.nextLine());\r\n | \r\n        try {\r\n            Scanner scanner = new Scanner(new File(filePath));\r\n            while (scanner.hasNextLine()) {\r\n                System.out.println(scanner.nextLine());\r\n | \r\n        try {\r\n            Scanner scanner = new Scanner(new File(filePath));\r\n            while (scanner.hasNextLine()) {\r\n                System.out.println(scanner.nextLine());\r\n",
                        "nextNode": "new Scanner(new File(filePath)"
                    },
                    {
                        "name": "new Scanner(new File(filePath)",
                        "type": "Scanner",
                        "context": "\r\n        try {\r\n            Scanner scanner = new Scanner(new File(filePath));\r\n            while (scanner.hasNextLine()) {\r\n                System.out.println(scanner.nextLine());\r\n | \r\n        try {\r\n            Scanner scanner = new Scanner(new File(filePath));\r\n            while (scanner.hasNextLine()) {\r\n                System.out.println(scanner.nextLine());\r\n | \r\n        try {\r\n            Scanner scanner = new Scanner(new File(filePath));\r\n            while (scanner.hasNextLine()) {\r\n                System.out.println(scanner.nextLine());\r\n",
                        "nextNode": "scanner"
                    },
                    {
                        "name": "scanner",
                        "type": "Dataflow from `filePath` to `scanner`\nDataflow from `new File(...)` to `scanner`\nDataflow from `new Scanner(...)` to `scanner`\nDataflow from `\"/sensitive/config/taxes.txt\"` to `scanner`",
                        "context": "        try {\r\n            Scanner scanner = new Scanner(new File(filePath));\r\n            while (scanner.hasNextLine()) {\r\n                System.out.println(scanner.nextLine());\r\n            }\r\n |         try {\r\n            Scanner scanner = new Scanner(new File(filePath));\r\n            while (scanner.hasNextLine()) {\r\n                System.out.println(scanner.nextLine());\r\n            }\r\n |             Scanner scanner = new Scanner(new File(filePath));\r\n            while (scanner.hasNextLine()) {\r\n                System.out.println(scanner.nextLine());\r\n            }\r\n            scanner.close();\r\n |         try {\r\n            Scanner scanner = new Scanner(new File(filePath));\r\n            while (scanner.hasNextLine()) {\r\n                System.out.println(scanner.nextLine());\r\n            }\r\n |                 System.out.println(scanner.nextLine());\r\n            }\r\n            scanner.close();\r\n        } catch (FileNotFoundException e) {\r\n            System.err.println(\"Error: File not found - \" + filePath);\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "/sensitive/config/taxes.txt",
                "isSensitive": "yes"
            },
            {
                "name": "Error: File not found -",
                "isSensitive": "no"
            },
            {
                "name": "An unexpected error occurred.",
                "isSensitive": "no"
            }
        ],
        "comments": [],
        "sinks": [
            {
                "name": "println",
                "isSink": "yes"
            },
            {
                "name": "nextLine",
                "isSink": "no"
            },
            {
                "name": "hasNextLine",
                "isSink": "no"
            },
            {
                "name": "close",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "BAD_SimpleExceptionExposure.java",
        "variables": [
            {
                "name": "a",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "e",
                "isSensitive": "yes",
                "graph": []
            }
        ],
        "strings": [],
        "comments": [],
        "sinks": [
            {
                "name": "println",
                "isSink": "yes"
            }
        ]
    },
    {
        "fileName": "BAD_SoftwareLicensingError.java",
        "variables": [
            {
                "name": "args",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "licenseKey",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "\"\"",
                        "type": "String",
                        "context": "\r\n    public static void main(String[] args) {\r\n        new BAD_SoftwareLicensingError().checkSoftwareLicense(\"\");\r\n    }\r\n}\r\n | \r\n    public static void main(String[] args) {\r\n        new BAD_SoftwareLicensingError().checkSoftwareLicense(\"\");\r\n    }\r\n}\r\n | \r\n    public static void main(String[] args) {\r\n        new BAD_SoftwareLicensingError().checkSoftwareLicense(\"\");\r\n    }\r\n}\r\n | \r\n    public static void main(String[] args) {\r\n        new BAD_SoftwareLicensingError().checkSoftwareLicense(\"\");\r\n    }\r\n}\r\n",
                        "nextNode": "String licenseKey"
                    },
                    {
                        "name": "String licenseKey",
                        "type": "String",
                        "context": "public class BAD_SoftwareLicensingError {\r\n    public void checkSoftwareLicense(String licenseKey) {\r\n        try {\r\n            if (licenseKey == null || licenseKey.isEmpty()) {\r\n | public class BAD_SoftwareLicensingError {\r\n    public void checkSoftwareLicense(String licenseKey) {\r\n        try {\r\n            if (licenseKey == null || licenseKey.isEmpty()) {\r\n | public class BAD_SoftwareLicensingError {\r\n    public void checkSoftwareLicense(String licenseKey) {\r\n        try {\r\n            if (licenseKey == null || licenseKey.isEmpty()) {\r\n | public class BAD_SoftwareLicensingError {\r\n    public void checkSoftwareLicense(String licenseKey) {\r\n        try {\r\n            if (licenseKey == null || licenseKey.isEmpty()) {\r\n",
                        "nextNode": "licenseKey"
                    },
                    {
                        "name": "licenseKey",
                        "type": "Dataflow from `\"\"` to `licenseKey`",
                        "context": "    public void checkSoftwareLicense(String licenseKey) {\r\n        try {\r\n            if (licenseKey == null || licenseKey.isEmpty()) {\r\n                throw new Exception(\"License key is missing: \" + licenseKey);\r\n            }\r\n |     public void checkSoftwareLicense(String licenseKey) {\r\n        try {\r\n            if (licenseKey == null || licenseKey.isEmpty()) {\r\n                throw new Exception(\"License key is missing: \" + licenseKey);\r\n            }\r\n |     public void checkSoftwareLicense(String licenseKey) {\r\n        try {\r\n            if (licenseKey == null || licenseKey.isEmpty()) {\r\n                throw new Exception(\"License key is missing: \" + licenseKey);\r\n            }\r\n |     public void checkSoftwareLicense(String licenseKey) {\r\n        try {\r\n            if (licenseKey == null || licenseKey.isEmpty()) {\r\n                throw new Exception(\"License key is missing: \" + licenseKey);\r\n            }\r\n |         try {\r\n            if (licenseKey == null || licenseKey.isEmpty()) {\r\n                throw new Exception(\"License key is missing: \" + licenseKey);\r\n            }\r\n            // License checking logic\r\n |     public void checkSoftwareLicense(String licenseKey) {\r\n        try {\r\n            if (licenseKey == null || licenseKey.isEmpty()) {\r\n                throw new Exception(\"License key is missing: \" + licenseKey);\r\n            }\r\n |     public void checkSoftwareLicense(String licenseKey) {\r\n        try {\r\n            if (licenseKey == null || licenseKey.isEmpty()) {\r\n                throw new Exception(\"License key is missing: \" + licenseKey);\r\n            }\r\n |         } catch (Exception e) {\r\n            System.err.println(\"Software license validation failed: \" + e.getMessage());\r\n            throw new RuntimeException(\"Critical licensing error, contact support with code: \" + licenseKey, e);\r\n        }\r\n    }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "e",
                "isSensitive": "yes",
                "graph": []
            }
        ],
        "strings": [
            {
                "name": "Critical licensing error, contact support with code:",
                "isSensitive": "no"
            },
            {
                "name": "Software license validation failed:",
                "isSensitive": "no"
            },
            {
                "name": "License key is missing:",
                "isSensitive": "no"
            }
        ],
        "comments": [
            {
                "name": "License checking logic",
                "isSensitive": "no"
            }
        ],
        "sinks": [
            {
                "name": "checkSoftwareLicense",
                "isSink": "no"
            },
            {
                "name": "println",
                "isSink": "yes"
            },
            {
                "name": "isEmpty",
                "isSink": "no"
            },
            {
                "name": "getMessage",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "BAD_VerboseAuthenticationFailure.java",
        "variables": [
            {
                "name": "args",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "password",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "\"guessme\"",
                        "type": "String",
                        "context": "    public static void main(String[] args) {\r\n        String username = \"user\";\r\n        String password = \"guessme\";\r\n\r\n        if (!authenticate(username, password)) {\r\n |     public static void main(String[] args) {\r\n        String username = \"user\";\r\n        String password = \"guessme\";\r\n\r\n        if (!authenticate(username, password)) {\r\n",
                        "nextNode": "password"
                    },
                    {
                        "name": "password",
                        "type": "Dataflow from `\"guessme\"` to `password`",
                        "context": "        String password = \"guessme\";\r\n\r\n        if (!authenticate(username, password)) {\r\n            System.out.println(\"Authentication failed: \" + password + \" is incorrect or username does not exist.\");\r\n        }\r\n |         String password = \"guessme\";\r\n\r\n        if (!authenticate(username, password)) {\r\n            System.out.println(\"Authentication failed: \" + password + \" is incorrect or username does not exist.\");\r\n        }\r\n | \r\n        if (!authenticate(username, password)) {\r\n            System.out.println(\"Authentication failed: \" + password + \" is incorrect or username does not exist.\");\r\n        }\r\n    }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "username",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "\"user\"",
                        "type": "String",
                        "context": "\r\n    public static void main(String[] args) {\r\n        String username = \"user\";\r\n        String password = \"guessme\";\r\n\r\n",
                        "nextNode": "username"
                    },
                    {
                        "name": "username",
                        "type": "Dataflow from `\"user\"` to `username`",
                        "context": "        String password = \"guessme\";\r\n\r\n        if (!authenticate(username, password)) {\r\n            System.out.println(\"Authentication failed: \" + password + \" is incorrect or username does not exist.\");\r\n        }\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "guessme",
                "isSensitive": "yes"
            },
            {
                "name": "Authentication failed:",
                "isSensitive": "no"
            },
            {
                "name": "user",
                "isSensitive": "yes"
            },
            {
                "name": "is incorrect or username does not exist.",
                "isSensitive": "no"
            }
        ],
        "comments": [],
        "sinks": [
            {
                "name": "println",
                "isSink": "yes"
            },
            {
                "name": "authenticate",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "GOOD_AccessControlError.java",
        "variables": [
            {
                "name": "args",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "accessLevel",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "0",
                        "type": "Number",
                        "context": "\r\n    public static void main(String[] args) {\r\n        new GOOD_AccessControlError().validateUserAccess(\"adminUser\", 0);\r\n    }\r\n}\r\n | \r\n    public static void main(String[] args) {\r\n        new GOOD_AccessControlError().validateUserAccess(\"adminUser\", 0);\r\n    }\r\n}\r\n",
                        "nextNode": "int accessLevel"
                    },
                    {
                        "name": "int accessLevel",
                        "type": "Number",
                        "context": "public class GOOD_AccessControlError {\r\n    public void validateUserAccess(String userName, int accessLevel) {\r\n        try {\r\n            if (accessLevel < 1 || accessLevel > 5) {\r\n | public class GOOD_AccessControlError {\r\n    public void validateUserAccess(String userName, int accessLevel) {\r\n        try {\r\n            if (accessLevel < 1 || accessLevel > 5) {\r\n",
                        "nextNode": "accessLevel"
                    },
                    {
                        "name": "accessLevel",
                        "type": "Dataflow from `0` to `accessLevel`",
                        "context": "    public void validateUserAccess(String userName, int accessLevel) {\r\n        try {\r\n            if (accessLevel < 1 || accessLevel > 5) {\r\n                throw new IllegalArgumentException(\"Access level is out of valid range.\");\r\n            }\r\n |     public void validateUserAccess(String userName, int accessLevel) {\r\n        try {\r\n            if (accessLevel < 1 || accessLevel > 5) {\r\n                throw new IllegalArgumentException(\"Access level is out of valid range.\");\r\n            }\r\n |     public void validateUserAccess(String userName, int accessLevel) {\r\n        try {\r\n            if (accessLevel < 1 || accessLevel > 5) {\r\n                throw new IllegalArgumentException(\"Access level is out of valid range.\");\r\n            }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "e",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "userName",
                "isSensitive": "yes",
                "graph": []
            }
        ],
        "strings": [
            {
                "name": "Access level is out of valid range.",
                "isSensitive": "no"
            },
            {
                "name": "adminUser",
                "isSensitive": "yes"
            },
            {
                "name": "Access level validation failed.",
                "isSensitive": "no"
            },
            {
                "name": "Invalid access attempt detected.",
                "isSensitive": "no"
            }
        ],
        "comments": [
            {
                "name": "Access validation logic",
                "isSensitive": "no"
            }
        ],
        "sinks": [
            {
                "name": "println",
                "isSink": "yes"
            },
            {
                "name": "validateUserAccess",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "GOOD_DatabaseSchemaError.java",
        "variables": [
            {
                "name": "args",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "e",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "sqlUpdateCommand",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "\"ALTER TABLE Users ADD COLUMN Age INT\"",
                        "type": "String",
                        "context": "\r\n    public static void main(String[] args) {\r\n        new GOOD_DatabaseSchemaError().updateDatabaseSchema(\"ALTER TABLE Users ADD COLUMN Age INT\");\r\n    }\r\n}\r\n",
                        "nextNode": "String sqlUpdateCommand"
                    },
                    {
                        "name": "String sqlUpdateCommand",
                        "type": "String",
                        "context": "public class GOOD_DatabaseSchemaError {\r\n    public void updateDatabaseSchema(String sqlUpdateCommand) {\r\n        try {\r\n            if (!sqlUpdateCommand.startsWith(\"ALTER TABLE\")) {\r\n",
                        "nextNode": "sqlUpdateCommand"
                    },
                    {
                        "name": "sqlUpdateCommand",
                        "type": "Dataflow from `\"ALTER TABLE Users ADD COLUMN Age INT\"` to `sqlUpdateCommand`",
                        "context": "    public void updateDatabaseSchema(String sqlUpdateCommand) {\r\n        try {\r\n            if (!sqlUpdateCommand.startsWith(\"ALTER TABLE\")) {\r\n                throw new UnsupportedOperationException(\"Unsupported operation. Only table alterations are allowed.\");\r\n            }\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "Database update error occurred.",
                "isSensitive": "no"
            },
            {
                "name": "ALTER TABLE",
                "isSensitive": "no"
            },
            {
                "name": "Unsupported operation. Only table alterations are allowed.",
                "isSensitive": "no"
            },
            {
                "name": "ALTER TABLE Users ADD COLUMN Age INT",
                "isSensitive": "yes"
            },
            {
                "name": "Failed to update the database schema. Please check the command format.",
                "isSensitive": "no"
            }
        ],
        "comments": [
            {
                "name": "Database schema update logic",
                "isSensitive": "no"
            }
        ],
        "sinks": [
            {
                "name": "println",
                "isSink": "yes"
            },
            {
                "name": "updateDatabaseSchema",
                "isSink": "no"
            },
            {
                "name": "startsWith",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "GOOD_DetailedDatabaseErrorExposure.java",
        "variables": [
            {
                "name": "args",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "e",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "query",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "errorDetails",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "\"Database query failed.\"",
                        "type": "String",
                        "context": "        } catch (Exception e) {\r\n            System.out.println(\"A database error occurred. Please try again later.\");\r\n            displayInternalError(\"Database query failed.\");\r\n        }\r\n    }\r\n",
                        "nextNode": "String errorDetails"
                    },
                    {
                        "name": "String errorDetails",
                        "type": "String",
                        "context": "    }\r\n\r\n    private static void displayInternalError(String errorDetails) {\r\n        System.err.println(errorDetails);\r\n    }\r\n",
                        "nextNode": "errorDetails"
                    },
                    {
                        "name": "errorDetails",
                        "type": "Dataflow from `\"Database query failed.\"` to `errorDetails`",
                        "context": "\r\n    private static void displayInternalError(String errorDetails) {\r\n        System.err.println(errorDetails);\r\n    }\r\n}\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "Database query failed.",
                "isSensitive": "no"
            },
            {
                "name": "A database error occurred. Please try again later.",
                "isSensitive": "no"
            },
            {
                "name": "Query failed due to schema mismatch.",
                "isSensitive": "no"
            },
            {
                "name": "SELECT * FROM sensitive_table",
                "isSensitive": "yes"
            }
        ],
        "comments": [
            {
                "name": "Attempt to connect to a database or execute a query",
                "isSensitive": "no"
            },
            {
                "name": "Placeholder for a database operation that might throw an error",
                "isSensitive": "no"
            }
        ],
        "sinks": [
            {
                "name": "println",
                "isSink": "yes"
            },
            {
                "name": "displayInternalError",
                "isSink": "no"
            },
            {
                "name": "executeDatabaseQuery",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "GOOD_EncryptionKeyError.java",
        "variables": [
            {
                "name": "args",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "data",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "e",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "key",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "\"12345\"",
                        "type": "String",
                        "context": "\r\n    public static void main(String[] args) {\r\n        new GOOD_EncryptionKeyError().useEncryptionKey(\"12345\", \"Sensitive data to encrypt\");\r\n    }\r\n}\r\n",
                        "nextNode": "String key"
                    },
                    {
                        "name": "String key",
                        "type": "String",
                        "context": "public class GOOD_EncryptionKeyError {\r\n    public void useEncryptionKey(String key, String data) {\r\n        try {\r\n            if (key.length() < 32) {\r\n",
                        "nextNode": "key"
                    },
                    {
                        "name": "key",
                        "type": "Dataflow from `\"12345\"` to `key`",
                        "context": "    public void useEncryptionKey(String key, String data) {\r\n        try {\r\n            if (key.length() < 32) {\r\n                throw new IllegalArgumentException(\"Invalid encryption key.\");\r\n            }\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "Encryption initialization failed.",
                "isSensitive": "no"
            },
            {
                "name": "Invalid encryption key.",
                "isSensitive": "no"
            },
            {
                "name": "Sensitive data to encrypt",
                "isSensitive": "yes"
            },
            {
                "name": "12345",
                "isSensitive": "yes"
            },
            {
                "name": "Failed to initialize encryption.",
                "isSensitive": "no"
            }
        ],
        "comments": [
            {
                "name": "Encryption logic",
                "isSensitive": "no"
            }
        ],
        "sinks": [
            {
                "name": "println",
                "isSink": "yes"
            },
            {
                "name": "useEncryptionKey",
                "isSink": "no"
            },
            {
                "name": "length",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "GOOD_FinancialAuditError.java",
        "variables": [
            {
                "name": "financialYear",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "args",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "e",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "declaredRevenue",
                "isSensitive": "yes",
                "graph": []
            }
        ],
        "strings": [
            {
                "name": "Invalid revenue value.",
                "isSensitive": "no"
            },
            {
                "name": "Audit processing failed.",
                "isSensitive": "no"
            },
            {
                "name": "2023",
                "isSensitive": "no"
            },
            {
                "name": "Audit processing error occurred. Please review the input values.",
                "isSensitive": "no"
            }
        ],
        "comments": [],
        "sinks": [
            {
                "name": "println",
                "isSink": "yes"
            },
            {
                "name": "processAuditReport",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "GOOD_GeneralizedAuthenticationFeedback.java",
        "variables": [
            {
                "name": "args",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "password",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "\"guessme\"",
                        "type": "String",
                        "context": "    public static void main(String[] args) {\r\n        String username = \"user\";\r\n        String password = \"guessme\";\r\n\r\n        if (!authenticate(username, password)) {\r\n",
                        "nextNode": "password"
                    },
                    {
                        "name": "password",
                        "type": "Dataflow from `\"guessme\"` to `password`",
                        "context": "        String password = \"guessme\";\r\n\r\n        if (!authenticate(username, password)) {\r\n            System.out.println(\"Authentication failed. Please check your credentials and try again.\");\r\n        }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "username",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "\"user\"",
                        "type": "String",
                        "context": "public class GOOD_GeneralizedAuthenticationFeedback {\r\n    public static void main(String[] args) {\r\n        String username = \"user\";\r\n        String password = \"guessme\";\r\n\r\n",
                        "nextNode": "username"
                    },
                    {
                        "name": "username",
                        "type": "Dataflow from `\"user\"` to `username`",
                        "context": "        String password = \"guessme\";\r\n\r\n        if (!authenticate(username, password)) {\r\n            System.out.println(\"Authentication failed. Please check your credentials and try again.\");\r\n        }\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "guessme",
                "isSensitive": "yes"
            },
            {
                "name": "Authentication failed. Please check your credentials and try again.",
                "isSensitive": "no"
            },
            {
                "name": "user",
                "isSensitive": "yes"
            }
        ],
        "comments": [],
        "sinks": [
            {
                "name": "println",
                "isSink": "yes"
            },
            {
                "name": "authenticate",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "GOOD_GenericDatabaseErrorHandling.java",
        "variables": [
            {
                "name": "args",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "e",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "query",
                "isSensitive": "yes",
                "graph": []
            }
        ],
        "strings": [
            {
                "name": "SELECT * FROM users",
                "isSensitive": "yes"
            },
            {
                "name": "Database access error",
                "isSensitive": "no"
            },
            {
                "name": "An error occurred while accessing the database. Please try again or contact support.",
                "isSensitive": "no"
            }
        ],
        "comments": [],
        "sinks": [
            {
                "name": "println",
                "isSink": "yes"
            },
            {
                "name": "executeDatabaseQuery",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "GOOD_HealthcareSystemError.java",
        "variables": [
            {
                "name": "args",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "e",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "systemConfig",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "\"encryption=weak, HIPAA_compliant=false\"",
                        "type": "String",
                        "context": "\r\n    public static void main(String[] args) {\r\n        new GOOD_HealthcareSystemError().initializeHealthcareSystem(\"encryption=weak, HIPAA_compliant=false\");\r\n    }\r\n}",
                        "nextNode": "String systemConfig"
                    },
                    {
                        "name": "String systemConfig",
                        "type": "String",
                        "context": "public class GOOD_HealthcareSystemError {\r\n    public void initializeHealthcareSystem(String systemConfig) {\r\n        try {\r\n            if (!systemConfig.contains(\"HIPAA_compliant\")) {\r\n",
                        "nextNode": "systemConfig"
                    },
                    {
                        "name": "systemConfig",
                        "type": "Dataflow from `\"encryption=weak, HIPAA_compliant=false\"` to `systemConfig`",
                        "context": "    public void initializeHealthcareSystem(String systemConfig) {\r\n        try {\r\n            if (!systemConfig.contains(\"HIPAA_compliant\")) {\r\n                throw new IllegalStateException(\"Non-compliance with required standards detected.\");\r\n            }\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "Non-compliance with required standards detected.",
                "isSensitive": "no"
            },
            {
                "name": "System configuration issue.",
                "isSensitive": "no"
            },
            {
                "name": "HIPAA_compliant",
                "isSensitive": "no"
            },
            {
                "name": "encryption=weak, HIPAA_compliant=false",
                "isSensitive": "yes"
            },
            {
                "name": "Initialization failed due to compliance issues.",
                "isSensitive": "no"
            }
        ],
        "comments": [
            {
                "name": "Initialization logic",
                "isSensitive": "no"
            }
        ],
        "sinks": [
            {
                "name": "println",
                "isSink": "yes"
            },
            {
                "name": "contains",
                "isSink": "no"
            },
            {
                "name": "initializeHealthcareSystem",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "GOOD_MedicalRecordSystemLookup.java",
        "variables": [
            {
                "name": "args",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "e",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "patientId",
                "isSensitive": "yes",
                "graph": []
            }
        ],
        "strings": [
            {
                "name": "patient_112233",
                "isSensitive": "yes"
            },
            {
                "name": "Error occurred during medical record retrieval.",
                "isSensitive": "no"
            },
            {
                "name": "Record retrieval issue.",
                "isSensitive": "no"
            },
            {
                "name": "Unable to retrieve records at this time.",
                "isSensitive": "no"
            }
        ],
        "comments": [
            {
                "name": "Retrieve medical record logic",
                "isSensitive": "no"
            }
        ],
        "sinks": [
            {
                "name": "println",
                "isSink": "yes"
            },
            {
                "name": "retrieveRecord",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "GOOD_MessagingSystem.java",
        "variables": [
            {
                "name": "args",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "e",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "userId",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "messageContent",
                "isSensitive": "yes",
                "graph": []
            }
        ],
        "strings": [
            {
                "name": "user42",
                "isSensitive": "yes"
            },
            {
                "name": "Messaging service interruption.",
                "isSensitive": "no"
            },
            {
                "name": "Confidential content.",
                "isSensitive": "yes"
            },
            {
                "name": "Messaging service error.",
                "isSensitive": "no"
            },
            {
                "name": "Messaging service currently unavailable.",
                "isSensitive": "no"
            }
        ],
        "comments": [],
        "sinks": [
            {
                "name": "println",
                "isSink": "yes"
            },
            {
                "name": "sendMessage",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "GOOD_MilitaryOperationPlanError.java",
        "variables": [
            {
                "name": "args",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "e",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "operationPlan",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "\"\"",
                        "type": "String",
                        "context": "\r\n    public static void main(String[] args) {\r\n        new GOOD_MilitaryOperationPlanError().dispatchUnits(\"\");\r\n    }\r\n}",
                        "nextNode": "String operationPlan"
                    },
                    {
                        "name": "String operationPlan",
                        "type": "String",
                        "context": "public class GOOD_MilitaryOperationPlanError {\r\n    public void dispatchUnits(String operationPlan) {\r\n        try {\r\n            if (operationPlan.isEmpty()) {\r\n",
                        "nextNode": "operationPlan"
                    },
                    {
                        "name": "operationPlan",
                        "type": "Dataflow from `\"\"` to `operationPlan`",
                        "context": "    public void dispatchUnits(String operationPlan) {\r\n        try {\r\n            if (operationPlan.isEmpty()) {\r\n                throw new SecurityException(\"Operation plan required.\");\r\n            }\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "Operation cannot be initiated without a plan.",
                "isSensitive": "no"
            },
            {
                "name": "Operation plan required.",
                "isSensitive": "no"
            }
        ],
        "comments": [
            {
                "name": "Pretend to coordinate military units",
                "isSensitive": "no"
            }
        ],
        "sinks": [
            {
                "name": "println",
                "isSink": "yes"
            },
            {
                "name": "dispatchUnits",
                "isSink": "no"
            },
            {
                "name": "isEmpty",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "GOOD_PatentApplicationError.java",
        "variables": [
            {
                "name": "args",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "patentDetails",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "null",
                        "type": "Object",
                        "context": "\r\n    public static void main(String[] args) {\r\n        new GOOD_PatentApplicationError().submitPatentApplication(null);\r\n    }\r\n}",
                        "nextNode": "String patentDetails"
                    },
                    {
                        "name": "String patentDetails",
                        "type": "String",
                        "context": "public class GOOD_PatentApplicationError {\r\n    public void submitPatentApplication(String patentDetails) {\r\n        try {\r\n            if (patentDetails == null) {\r\n",
                        "nextNode": "patentDetails"
                    },
                    {
                        "name": "patentDetails",
                        "type": "Dataflow from `null` to `patentDetails`",
                        "context": "    public void submitPatentApplication(String patentDetails) {\r\n        try {\r\n            if (patentDetails == null) {\r\n                throw new IllegalArgumentException(\"Details required.\");\r\n            }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "e",
                "isSensitive": "yes",
                "graph": []
            }
        ],
        "strings": [
            {
                "name": "Submission failed due to incomplete details.",
                "isSensitive": "no"
            },
            {
                "name": "Details required.",
                "isSensitive": "no"
            }
        ],
        "comments": [
            {
                "name": "Simulated submission logic",
                "isSensitive": "no"
            }
        ],
        "sinks": [
            {
                "name": "println",
                "isSink": "yes"
            },
            {
                "name": "submitPatentApplication",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "GOOD_ProcessMonitoring.java",
        "variables": [
            {
                "name": "args",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "e",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "processName",
                "isSensitive": "yes",
                "graph": []
            }
        ],
        "strings": [
            {
                "name": "Monitoring error occurred.",
                "isSensitive": "no"
            },
            {
                "name": "Critical process monitoring failure. Immediate action required.",
                "isSensitive": "no"
            },
            {
                "name": "DatabaseSyncJob",
                "isSensitive": "no"
            },
            {
                "name": "Process interruption detected.",
                "isSensitive": "no"
            }
        ],
        "comments": [
            {
                "name": "Monitor process logic",
                "isSensitive": "no"
            }
        ],
        "sinks": [
            {
                "name": "println",
                "isSink": "yes"
            },
            {
                "name": "monitorProcess",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "GOOD_RealTimeBiddingError.java",
        "variables": [
            {
                "name": "args",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "e",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "bidData",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "\"\"",
                        "type": "String",
                        "context": "\r\n    public static void main(String[] args) {\r\n        new GOOD_RealTimeBiddingError().processBid(\"\", \"Session1234\");\r\n    }\r\n}",
                        "nextNode": "String bidData"
                    },
                    {
                        "name": "String bidData",
                        "type": "String",
                        "context": "public class GOOD_RealTimeBiddingError {\r\n    public void processBid(String bidData, String sessionId) {\r\n        try {\r\n            if (bidData.isEmpty()) {\r\n",
                        "nextNode": "bidData"
                    },
                    {
                        "name": "bidData",
                        "type": "Dataflow from `\"\"` to `bidData`",
                        "context": "    public void processBid(String bidData, String sessionId) {\r\n        try {\r\n            if (bidData.isEmpty()) {\r\n                throw new Exception(\"No data received for session.\");\r\n            }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "sessionId",
                "isSensitive": "yes",
                "graph": []
            }
        ],
        "strings": [
            {
                "name": "Bid processing error.",
                "isSensitive": "no"
            },
            {
                "name": "Bid processing issue detected.",
                "isSensitive": "no"
            },
            {
                "name": "Session1234",
                "isSensitive": "yes"
            },
            {
                "name": "No data received for session.",
                "isSensitive": "no"
            }
        ],
        "comments": [
            {
                "name": "Bid processing logic",
                "isSensitive": "no"
            }
        ],
        "sinks": [
            {
                "name": "println",
                "isSink": "yes"
            },
            {
                "name": "processBid",
                "isSink": "no"
            },
            {
                "name": "isEmpty",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "GOOD_SensitivePathDisclosureInErrors.java",
        "variables": [
            {
                "name": "args",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "e",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "filePath",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "\"/sensitive/config/users.txt\"",
                        "type": "String",
                        "context": "\r\n    public static void main(String[] args) {\r\n        String filePath = \"/sensitive/config/users.txt\";\r\n\r\n        try {\r\n",
                        "nextNode": "filePath"
                    },
                    {
                        "name": "filePath",
                        "type": "Dataflow from `\"/sensitive/config/users.txt\"` to `filePath`",
                        "context": "\r\n        try {\r\n            Scanner scanner = new Scanner(new File(filePath));\r\n            while (scanner.hasNextLine()) {\r\n                System.out.println(scanner.nextLine());\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "scanner",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "filePath",
                        "type": "String",
                        "context": "\r\n        try {\r\n            Scanner scanner = new Scanner(new File(filePath));\r\n            while (scanner.hasNextLine()) {\r\n                System.out.println(scanner.nextLine());\r\n | \r\n        try {\r\n            Scanner scanner = new Scanner(new File(filePath));\r\n            while (scanner.hasNextLine()) {\r\n                System.out.println(scanner.nextLine());\r\n | \r\n        try {\r\n            Scanner scanner = new Scanner(new File(filePath));\r\n            while (scanner.hasNextLine()) {\r\n                System.out.println(scanner.nextLine());\r\n",
                        "nextNode": "new File(filePath)"
                    },
                    {
                        "name": "new File(filePath)",
                        "type": "File",
                        "context": "\r\n        try {\r\n            Scanner scanner = new Scanner(new File(filePath));\r\n            while (scanner.hasNextLine()) {\r\n                System.out.println(scanner.nextLine());\r\n | \r\n        try {\r\n            Scanner scanner = new Scanner(new File(filePath));\r\n            while (scanner.hasNextLine()) {\r\n                System.out.println(scanner.nextLine());\r\n | \r\n        try {\r\n            Scanner scanner = new Scanner(new File(filePath));\r\n            while (scanner.hasNextLine()) {\r\n                System.out.println(scanner.nextLine());\r\n",
                        "nextNode": "new Scanner(new File(filePath)"
                    },
                    {
                        "name": "new Scanner(new File(filePath)",
                        "type": "Scanner",
                        "context": "\r\n        try {\r\n            Scanner scanner = new Scanner(new File(filePath));\r\n            while (scanner.hasNextLine()) {\r\n                System.out.println(scanner.nextLine());\r\n | \r\n        try {\r\n            Scanner scanner = new Scanner(new File(filePath));\r\n            while (scanner.hasNextLine()) {\r\n                System.out.println(scanner.nextLine());\r\n | \r\n        try {\r\n            Scanner scanner = new Scanner(new File(filePath));\r\n            while (scanner.hasNextLine()) {\r\n                System.out.println(scanner.nextLine());\r\n",
                        "nextNode": "scanner"
                    },
                    {
                        "name": "scanner",
                        "type": "Dataflow from `filePath` to `scanner`\nDataflow from `new File(...)` to `scanner`\nDataflow from `new Scanner(...)` to `scanner`\nDataflow from `\"/sensitive/config/users.txt\"` to `scanner`",
                        "context": "        try {\r\n            Scanner scanner = new Scanner(new File(filePath));\r\n            while (scanner.hasNextLine()) {\r\n                System.out.println(scanner.nextLine());\r\n            }\r\n |         try {\r\n            Scanner scanner = new Scanner(new File(filePath));\r\n            while (scanner.hasNextLine()) {\r\n                System.out.println(scanner.nextLine());\r\n            }\r\n |             Scanner scanner = new Scanner(new File(filePath));\r\n            while (scanner.hasNextLine()) {\r\n                System.out.println(scanner.nextLine());\r\n            }\r\n            scanner.close();\r\n |         try {\r\n            Scanner scanner = new Scanner(new File(filePath));\r\n            while (scanner.hasNextLine()) {\r\n                System.out.println(scanner.nextLine());\r\n            }\r\n |                 System.out.println(scanner.nextLine());\r\n            }\r\n            scanner.close();\r\n        } catch (FileNotFoundException e) {\r\n            System.err.println(\"Error: File not found - Access denied or file does not exist.\");\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "/sensitive/config/users.txt",
                "isSensitive": "yes"
            },
            {
                "name": "Error: File not found - Access denied or file does not exist.",
                "isSensitive": "no"
            },
            {
                "name": "An unexpected error occurred.",
                "isSensitive": "no"
            }
        ],
        "comments": [],
        "sinks": [
            {
                "name": "println",
                "isSink": "yes"
            },
            {
                "name": "nextLine",
                "isSink": "no"
            },
            {
                "name": "hasNextLine",
                "isSink": "no"
            },
            {
                "name": "close",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "GOOD_SoftwareLicensingError.java",
        "variables": [
            {
                "name": "args",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "licenseKey",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "\"\"",
                        "type": "String",
                        "context": "\r\n    public static void main(String[] args) {\r\n        new GOOD_SoftwareLicensingError().checkSoftwareLicense(\"\");\r\n    }\r\n} | \r\n    public static void main(String[] args) {\r\n        new GOOD_SoftwareLicensingError().checkSoftwareLicense(\"\");\r\n    }\r\n}",
                        "nextNode": "String licenseKey"
                    },
                    {
                        "name": "String licenseKey",
                        "type": "String",
                        "context": "public class GOOD_SoftwareLicensingError {\r\n    public void checkSoftwareLicense(String licenseKey) {\r\n        try {\r\n            if (licenseKey == null || licenseKey.isEmpty()) {\r\n | public class GOOD_SoftwareLicensingError {\r\n    public void checkSoftwareLicense(String licenseKey) {\r\n        try {\r\n            if (licenseKey == null || licenseKey.isEmpty()) {\r\n",
                        "nextNode": "licenseKey"
                    },
                    {
                        "name": "licenseKey",
                        "type": "Dataflow from `\"\"` to `licenseKey`",
                        "context": "    public void checkSoftwareLicense(String licenseKey) {\r\n        try {\r\n            if (licenseKey == null || licenseKey.isEmpty()) {\r\n                throw new Exception(\"License key is missing.\");\r\n            }\r\n |     public void checkSoftwareLicense(String licenseKey) {\r\n        try {\r\n            if (licenseKey == null || licenseKey.isEmpty()) {\r\n                throw new Exception(\"License key is missing.\");\r\n            }\r\n |     public void checkSoftwareLicense(String licenseKey) {\r\n        try {\r\n            if (licenseKey == null || licenseKey.isEmpty()) {\r\n                throw new Exception(\"License key is missing.\");\r\n            }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "e",
                "isSensitive": "yes",
                "graph": []
            }
        ],
        "strings": [
            {
                "name": "Software license validation failed.",
                "isSensitive": "no"
            },
            {
                "name": "License key is missing.",
                "isSensitive": "no"
            },
            {
                "name": "Critical licensing issue, please contact support.",
                "isSensitive": "no"
            }
        ],
        "comments": [
            {
                "name": "License checking logic",
                "isSensitive": "no"
            }
        ],
        "sinks": [
            {
                "name": "checkSoftwareLicense",
                "isSink": "no"
            },
            {
                "name": "println",
                "isSink": "yes"
            },
            {
                "name": "isEmpty",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "GOOD_VerboseAuthenticationFailure.java",
        "variables": [
            {
                "name": "args",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "password",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "\"guessme\"",
                        "type": "String",
                        "context": "    public static void main(String[] args) {\r\n        String username = \"user\";\r\n        String password = \"guessme\";\r\n\r\n        if (!authenticate(username, password)) {\r\n",
                        "nextNode": "password"
                    },
                    {
                        "name": "password",
                        "type": "Dataflow from `\"guessme\"` to `password`",
                        "context": "        String password = \"guessme\";\r\n\r\n        if (!authenticate(username, password)) {\r\n            System.out.println(\"Authentication failed: Please check your username and password.\");\r\n        }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "username",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "\"user\"",
                        "type": "String",
                        "context": "\r\n    public static void main(String[] args) {\r\n        String username = \"user\";\r\n        String password = \"guessme\";\r\n\r\n",
                        "nextNode": "username"
                    },
                    {
                        "name": "username",
                        "type": "Dataflow from `\"user\"` to `username`",
                        "context": "        String password = \"guessme\";\r\n\r\n        if (!authenticate(username, password)) {\r\n            System.out.println(\"Authentication failed: Please check your username and password.\");\r\n        }\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "guessme",
                "isSensitive": "yes"
            },
            {
                "name": "Authentication failed: Please check your username and password.",
                "isSensitive": "no"
            },
            {
                "name": "user",
                "isSensitive": "yes"
            }
        ],
        "comments": [],
        "sinks": [
            {
                "name": "println",
                "isSink": "yes"
            },
            {
                "name": "authenticate",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "BAD_CloudServiceConfigExposure.java",
        "variables": [
            {
                "name": "args",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "e",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "cloudAccessToken",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "\"SilentForest123\"",
                        "type": "String",
                        "context": "    public static void main(String[] args) {\r\n        try {\r\n            String cloudAccessToken = \"SilentForest123\";\r\n            // Command to deploy an application to a cloud service with an access token exposed\r\n            Runtime.getRuntime().exec(new String[]{\"cloud\", \"deploy\", \"--access-token\", cloudAccessToken, \"my-cloud-app\"});\r\n",
                        "nextNode": "cloudAccessToken"
                    },
                    {
                        "name": "cloudAccessToken",
                        "type": "Dataflow from `\"SilentForest123\"` to `cloudAccessToken`",
                        "context": "            String cloudAccessToken = \"SilentForest123\";\r\n            // Command to deploy an application to a cloud service with an access token exposed\r\n            Runtime.getRuntime().exec(new String[]{\"cloud\", \"deploy\", \"--access-token\", cloudAccessToken, \"my-cloud-app\"});\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "cloud",
                "isSensitive": "no"
            },
            {
                "name": "--access-token",
                "isSensitive": "no"
            },
            {
                "name": "my-cloud-app",
                "isSensitive": "no"
            },
            {
                "name": "SilentForest123",
                "isSensitive": "yes"
            },
            {
                "name": "deploy",
                "isSensitive": "no"
            }
        ],
        "comments": [
            {
                "name": "Command to deploy an application to a cloud service with an access token exposed",
                "isSensitive": "no"
            }
        ],
        "sinks": [
            {
                "name": "printStackTrace",
                "isSink": "yes"
            },
            {
                "name": "getRuntime",
                "isSink": "no"
            },
            {
                "name": "exec",
                "isSink": "yes"
            }
        ]
    },
    {
        "fileName": "BAD_CommandLinePasswordExposure.java",
        "variables": [
            {
                "name": "psswrd",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "\"BlueSkyMorning\"",
                        "type": "String",
                        "context": "    public static void main(String[] args) {\r\n        try {\r\n            String psswrd = \"BlueSkyMorning\";\r\n            // Running a system command\r\n            Runtime.getRuntime().exec(new String[]{\"sh\", \"-c\", \"somecommand --password \" + psswrd});\r\n",
                        "nextNode": "psswrd}"
                    },
                    {
                        "name": "psswrd}",
                        "type": "Dataflow from `\"BlueSkyMorning\"` to `psswrd`",
                        "context": "            String psswrd = \"BlueSkyMorning\";\r\n            // Running a system command\r\n            Runtime.getRuntime().exec(new String[]{\"sh\", \"-c\", \"somecommand --password \" + psswrd});\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "args",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "e",
                "isSensitive": "yes",
                "graph": []
            }
        ],
        "strings": [
            {
                "name": "sh",
                "isSensitive": "no"
            },
            {
                "name": "BlueSkyMorning",
                "isSensitive": "yes"
            },
            {
                "name": "-c",
                "isSensitive": "no"
            },
            {
                "name": "somecommand --password",
                "isSensitive": "no"
            }
        ],
        "comments": [
            {
                "name": "Running a system command",
                "isSensitive": "no"
            }
        ],
        "sinks": [
            {
                "name": "printStackTrace",
                "isSink": "yes"
            },
            {
                "name": "getRuntime",
                "isSink": "no"
            },
            {
                "name": "exec",
                "isSink": "yes"
            }
        ]
    },
    {
        "fileName": "BAD_CommandLineToolSensitiveData.java",
        "variables": [
            {
                "name": "args",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "e",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "sensitiveFilePath",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "\"/path/to/sensitive/data.txt\"",
                        "type": "String",
                        "context": "\r\n    public static void main(String[] args) {\r\n        String sensitiveFilePath = \"/path/to/sensitive/data.txt\";\r\n        try {\r\n            String command = \"cat \" + sensitiveFilePath;\r\n | \r\n    public static void main(String[] args) {\r\n        String sensitiveFilePath = \"/path/to/sensitive/data.txt\";\r\n        try {\r\n            String command = \"cat \" + sensitiveFilePath;\r\n",
                        "nextNode": "sensitiveFilePath"
                    },
                    {
                        "name": "sensitiveFilePath",
                        "type": "Dataflow from `\"/path/to/sensitive/data.txt\"` to `sensitiveFilePath`",
                        "context": "        String sensitiveFilePath = \"/path/to/sensitive/data.txt\";\r\n        try {\r\n            String command = \"cat \" + sensitiveFilePath;\r\n            Runtime.getRuntime().exec(new String[]{\"sh\", \"-c\", command});\r\n            System.out.println(\"Invoked command-line tool with sensitive file path.\");\r\n |         String sensitiveFilePath = \"/path/to/sensitive/data.txt\";\r\n        try {\r\n            String command = \"cat \" + sensitiveFilePath;\r\n            Runtime.getRuntime().exec(new String[]{\"sh\", \"-c\", command});\r\n            System.out.println(\"Invoked command-line tool with sensitive file path.\");\r\n |             System.out.println(\"Invoked command-line tool with sensitive file path.\");\r\n        } catch (Exception e) {\r\n            System.err.println(\"An error occurred while invoking the command-line tool using \" + sensitiveFilePath) ;\r\n        }\r\n    }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "command",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "sensitiveFilePath",
                        "type": "String",
                        "context": "        String sensitiveFilePath = \"/path/to/sensitive/data.txt\";\r\n        try {\r\n            String command = \"cat \" + sensitiveFilePath;\r\n            Runtime.getRuntime().exec(new String[]{\"sh\", \"-c\", command});\r\n            System.out.println(\"Invoked command-line tool with sensitive file path.\");\r\n",
                        "nextNode": "\"cat \" + sensitiveFilePath"
                    },
                    {
                        "name": "\"cat \" + sensitiveFilePath",
                        "type": "String",
                        "context": "        String sensitiveFilePath = \"/path/to/sensitive/data.txt\";\r\n        try {\r\n            String command = \"cat \" + sensitiveFilePath;\r\n            Runtime.getRuntime().exec(new String[]{\"sh\", \"-c\", command});\r\n            System.out.println(\"Invoked command-line tool with sensitive file path.\");\r\n",
                        "nextNode": "command}"
                    },
                    {
                        "name": "command}",
                        "type": "Dataflow from `sensitiveFilePath` to `command`\nDataflow from `\"/path/to/sensitive/data.txt\"` to `command`\nDataflow from `\"cat \"` to `command`",
                        "context": "        try {\r\n            String command = \"cat \" + sensitiveFilePath;\r\n            Runtime.getRuntime().exec(new String[]{\"sh\", \"-c\", command});\r\n            System.out.println(\"Invoked command-line tool with sensitive file path.\");\r\n        } catch (Exception e) {\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "Invoked command-line tool with sensitive file path.",
                "isSensitive": "no"
            },
            {
                "name": "sh",
                "isSensitive": "no"
            },
            {
                "name": "-c",
                "isSensitive": "no"
            },
            {
                "name": "cat",
                "isSensitive": "no"
            },
            {
                "name": "An error occurred while invoking the command-line tool using",
                "isSensitive": "no"
            },
            {
                "name": "/path/to/sensitive/data.txt",
                "isSensitive": "yes"
            }
        ],
        "comments": [],
        "sinks": [
            {
                "name": "println",
                "isSink": "yes"
            },
            {
                "name": "getRuntime",
                "isSink": "no"
            },
            {
                "name": "exec",
                "isSink": "yes"
            }
        ]
    },
    {
        "fileName": "BAD_DockerRunSensitiveInfoExposure.java",
        "variables": [
            {
                "name": "args",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "e",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "config",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "\"config123\"",
                        "type": "String",
                        "context": "    public static void main(String[] args) {\r\n        try {\r\n            String config = \"config123\";\r\n            // Running a Docker container\r\n            Runtime.getRuntime().exec(new String[]{\"docker\", \"run\", \"-e\", \"CONFIG_SECRET=\" + config, \"myapp:latest\"});\r\n",
                        "nextNode": "config"
                    },
                    {
                        "name": "config",
                        "type": "Dataflow from `\"config123\"` to `config`",
                        "context": "            String config = \"config123\";\r\n            // Running a Docker container\r\n            Runtime.getRuntime().exec(new String[]{\"docker\", \"run\", \"-e\", \"CONFIG_SECRET=\" + config, \"myapp:latest\"});\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "-e",
                "isSensitive": "no"
            },
            {
                "name": "CONFIG_SECRET=",
                "isSensitive": "no"
            },
            {
                "name": "myapp:latest",
                "isSensitive": "no"
            },
            {
                "name": "run",
                "isSensitive": "no"
            },
            {
                "name": "config123",
                "isSensitive": "yes"
            },
            {
                "name": "docker",
                "isSensitive": "no"
            }
        ],
        "comments": [
            {
                "name": "Running a Docker container",
                "isSensitive": "no"
            }
        ],
        "sinks": [
            {
                "name": "printStackTrace",
                "isSink": "yes"
            },
            {
                "name": "getRuntime",
                "isSink": "no"
            },
            {
                "name": "exec",
                "isSink": "yes"
            }
        ]
    },
    {
        "fileName": "BAD_EnvVarExposure.java",
        "variables": [
            {
                "name": "args",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "API_KEY",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "args[",
                        "type": "String[]",
                        "context": "\r\n    public static void main(String[] args) {\r\n        String API_KEY = args[1];\r\n        try {\r\n            ProcessBuilder processBuilder = new ProcessBuilder(\"someCommand\");\r\n | \r\n    public static void main(String[] args) {\r\n        String API_KEY = args[1];\r\n        try {\r\n            ProcessBuilder processBuilder = new ProcessBuilder(\"someCommand\");\r\n",
                        "nextNode": "args[1]"
                    },
                    {
                        "name": "args[1]",
                        "type": "String",
                        "context": "\r\n    public static void main(String[] args) {\r\n        String API_KEY = args[1];\r\n        try {\r\n            ProcessBuilder processBuilder = new ProcessBuilder(\"someCommand\");\r\n | \r\n    public static void main(String[] args) {\r\n        String API_KEY = args[1];\r\n        try {\r\n            ProcessBuilder processBuilder = new ProcessBuilder(\"someCommand\");\r\n",
                        "nextNode": "API_KEY"
                    },
                    {
                        "name": "API_KEY",
                        "type": "Dataflow from `args` to `API_KEY`",
                        "context": "        try {\r\n            ProcessBuilder processBuilder = new ProcessBuilder(\"someCommand\");\r\n            processBuilder.environment().put(API_KEY, \"GoldenSunset89\");\r\n            processBuilder.start();\r\n            System.out.println(\"Process invoked with sensitive information in environment variable.\");\r\n |         } catch (Exception e) {\r\n            e.printStackTrace();\r\n            System.err.println(\"An error occurred while invoking the process with API key \" + API_KEY);\r\n        }\r\n    }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "e",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "processBuilder",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "new ProcessBuilder(\"someCommand\")",
                        "type": "ProcessBuilder",
                        "context": "        String API_KEY = args[1];\r\n        try {\r\n            ProcessBuilder processBuilder = new ProcessBuilder(\"someCommand\");\r\n            processBuilder.environment().put(API_KEY, \"GoldenSunset89\");\r\n            processBuilder.start();\r\n |         String API_KEY = args[1];\r\n        try {\r\n            ProcessBuilder processBuilder = new ProcessBuilder(\"someCommand\");\r\n            processBuilder.environment().put(API_KEY, \"GoldenSunset89\");\r\n            processBuilder.start();\r\n",
                        "nextNode": "processBuilder"
                    },
                    {
                        "name": "processBuilder",
                        "type": "Dataflow from `new ProcessBuilder(...)` to `processBuilder`\nDataflow from `\"someCommand\"` to `processBuilder`",
                        "context": "        try {\r\n            ProcessBuilder processBuilder = new ProcessBuilder(\"someCommand\");\r\n            processBuilder.environment().put(API_KEY, \"GoldenSunset89\");\r\n            processBuilder.start();\r\n            System.out.println(\"Process invoked with sensitive information in environment variable.\");\r\n |         try {\r\n            ProcessBuilder processBuilder = new ProcessBuilder(\"someCommand\");\r\n            processBuilder.environment().put(API_KEY, \"GoldenSunset89\");\r\n            processBuilder.start();\r\n            System.out.println(\"Process invoked with sensitive information in environment variable.\");\r\n |             ProcessBuilder processBuilder = new ProcessBuilder(\"someCommand\");\r\n            processBuilder.environment().put(API_KEY, \"GoldenSunset89\");\r\n            processBuilder.start();\r\n            System.out.println(\"Process invoked with sensitive information in environment variable.\");\r\n        } catch (Exception e) {\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "someCommand",
                "isSensitive": "no"
            },
            {
                "name": "Process invoked with sensitive information in environment variable.",
                "isSensitive": "no"
            },
            {
                "name": "An error occurred while invoking the process with API key",
                "isSensitive": "no"
            },
            {
                "name": "GoldenSunset89",
                "isSensitive": "yes"
            }
        ],
        "comments": [],
        "sinks": [
            {
                "name": "println",
                "isSink": "yes"
            },
            {
                "name": "environment",
                "isSink": "no"
            },
            {
                "name": "printStackTrace",
                "isSink": "yes"
            },
            {
                "name": "start",
                "isSink": "yes"
            },
            {
                "name": "put",
                "isSink": "yes"
            }
        ]
    },
    {
        "fileName": "BAD_InsecureAPIKeyInvocation.java",
        "variables": [
            {
                "name": "args",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "apiKey",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "\"MountainStream42\"",
                        "type": "String",
                        "context": "\r\n    public static void main(String[] args) {\r\n        String apiKey = \"MountainStream42\";\r\n        try {\r\n            Runtime.getRuntime().exec(\"script --use-key \" + apiKey);\r\n",
                        "nextNode": "apiKey"
                    },
                    {
                        "name": "apiKey",
                        "type": "Dataflow from `\"MountainStream42\"` to `apiKey`",
                        "context": "        String apiKey = \"MountainStream42\";\r\n        try {\r\n            Runtime.getRuntime().exec(\"script --use-key \" + apiKey);\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "e",
                "isSensitive": "yes",
                "graph": []
            }
        ],
        "strings": [
            {
                "name": "script --use-key",
                "isSensitive": "no"
            },
            {
                "name": "MountainStream42",
                "isSensitive": "yes"
            }
        ],
        "comments": [],
        "sinks": [
            {
                "name": "printStackTrace",
                "isSink": "yes"
            },
            {
                "name": "getRuntime",
                "isSink": "no"
            },
            {
                "name": "exec",
                "isSink": "yes"
            }
        ]
    },
    {
        "fileName": "BAD_NetworkConfigCredentialsExposure.java",
        "variables": [
            {
                "name": "args",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "e",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "vpnPassword",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "args[",
                        "type": "String[]",
                        "context": "    public static void main(String[] args) {\r\n        try {\r\n            String vpnPassword = args[0];\r\n            // Command to configure VPN\r\n            Runtime.getRuntime().exec(new String[]{\"vpnsetup\", \"--username\", \"admin\", \"--password\", vpnPassword});\r\n",
                        "nextNode": "args[0]"
                    },
                    {
                        "name": "args[0]",
                        "type": "String",
                        "context": "    public static void main(String[] args) {\r\n        try {\r\n            String vpnPassword = args[0];\r\n            // Command to configure VPN\r\n            Runtime.getRuntime().exec(new String[]{\"vpnsetup\", \"--username\", \"admin\", \"--password\", vpnPassword});\r\n",
                        "nextNode": "vpnPassword}"
                    },
                    {
                        "name": "vpnPassword}",
                        "type": "Dataflow from `args` to `vpnPassword`",
                        "context": "            String vpnPassword = args[0];\r\n            // Command to configure VPN\r\n            Runtime.getRuntime().exec(new String[]{\"vpnsetup\", \"--username\", \"admin\", \"--password\", vpnPassword});\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "--password",
                "isSensitive": "no"
            },
            {
                "name": "vpnsetup",
                "isSensitive": "no"
            },
            {
                "name": "admin",
                "isSensitive": "yes"
            },
            {
                "name": "--username",
                "isSensitive": "no"
            }
        ],
        "comments": [
            {
                "name": "Command to configure VPN",
                "isSensitive": "no"
            }
        ],
        "sinks": [
            {
                "name": "printStackTrace",
                "isSink": "yes"
            },
            {
                "name": "getRuntime",
                "isSink": "no"
            },
            {
                "name": "exec",
                "isSink": "yes"
            }
        ]
    },
    {
        "fileName": "BAD_PasswordExposureInCommands.java",
        "variables": [
            {
                "name": "args",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "password",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "\"P@ssw0rd2024!\"",
                        "type": "String",
                        "context": "    public static void main(String[] args) {\r\n        try {\r\n            String password = \"P@ssw0rd2024!\";\r\n            Process process = Runtime.getRuntime().exec(\"curl -u admin:\" + password + \"http://healthcare.com/data\");\r\n            process.waitFor();\r\n",
                        "nextNode": "password"
                    },
                    {
                        "name": "password",
                        "type": "Dataflow from `\"P@ssw0rd2024!\"` to `password`",
                        "context": "        try {\r\n            String password = \"P@ssw0rd2024!\";\r\n            Process process = Runtime.getRuntime().exec(\"curl -u admin:\" + password + \"http://healthcare.com/data\");\r\n            process.waitFor();\r\n        } catch (Exception e) {\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "process",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "password",
                        "type": "String",
                        "context": "        try {\r\n            String password = \"P@ssw0rd2024!\";\r\n            Process process = Runtime.getRuntime().exec(\"curl -u admin:\" + password + \"http://healthcare.com/data\");\r\n            process.waitFor();\r\n        } catch (Exception e) {\r\n",
                        "nextNode": "\"curl -u admin:\" + password"
                    },
                    {
                        "name": "\"curl -u admin:\" + password",
                        "type": "String",
                        "context": "        try {\r\n            String password = \"P@ssw0rd2024!\";\r\n            Process process = Runtime.getRuntime().exec(\"curl -u admin:\" + password + \"http://healthcare.com/data\");\r\n            process.waitFor();\r\n        } catch (Exception e) {\r\n",
                        "nextNode": "\"curl -u admin:\" + password + \"http://healthcare.com/data\""
                    },
                    {
                        "name": "\"curl -u admin:\" + password + \"http://healthcare.com/data\"",
                        "type": "String",
                        "context": "        try {\r\n            String password = \"P@ssw0rd2024!\";\r\n            Process process = Runtime.getRuntime().exec(\"curl -u admin:\" + password + \"http://healthcare.com/data\");\r\n            process.waitFor();\r\n        } catch (Exception e) {\r\n",
                        "nextNode": "Runtime.getRuntime().exec(\"curl -u admin:\" + password + \"http://healthcare.com/data\")"
                    },
                    {
                        "name": "Runtime.getRuntime().exec(\"curl -u admin:\" + password + \"http://healthcare.com/data\")",
                        "type": "Process",
                        "context": "        try {\r\n            String password = \"P@ssw0rd2024!\";\r\n            Process process = Runtime.getRuntime().exec(\"curl -u admin:\" + password + \"http://healthcare.com/data\");\r\n            process.waitFor();\r\n        } catch (Exception e) {\r\n",
                        "nextNode": "process"
                    },
                    {
                        "name": "process",
                        "type": "Dataflow from `password` to `process`\nDataflow from `\"P@ssw0rd2024!\"` to `process`\nDataflow from `exec(...)` to `process`\nDataflow from `\"http://healthcare.com/data\"` to `process`\nDataflow from `\"curl -u admin:\"` to `process`",
                        "context": "            String password = \"P@ssw0rd2024!\";\r\n            Process process = Runtime.getRuntime().exec(\"curl -u admin:\" + password + \"http://healthcare.com/data\");\r\n            process.waitFor();\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "e",
                "isSensitive": "yes",
                "graph": []
            }
        ],
        "strings": [
            {
                "name": "curl -u admin:",
                "isSensitive": "no"
            },
            {
                "name": "http://healthcare.com/data",
                "isSensitive": "no"
            },
            {
                "name": "P@ssw0rd2024!",
                "isSensitive": "yes"
            }
        ],
        "comments": [],
        "sinks": [
            {
                "name": "printStackTrace",
                "isSink": "yes"
            },
            {
                "name": "getRuntime",
                "isSink": "no"
            },
            {
                "name": "waitFor",
                "isSink": "no"
            },
            {
                "name": "exec",
                "isSink": "yes"
            }
        ]
    },
    {
        "fileName": "BAD_ProcessInvocationWithArgs.java",
        "variables": [
            {
                "name": "args",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "password",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "pass",
                        "type": "String",
                        "context": "    public static void main(String[] args) {\r\n        String pass = \"helloWorld123\";\r\n        invokeSensitiveProcess(pass);\r\n    }\r\n\r\n",
                        "nextNode": "String password"
                    },
                    {
                        "name": "String password",
                        "type": "String",
                        "context": "    }\r\n\r\n    public static void invokeSensitiveProcess(String password) {\r\n        String[] command = {\"sh\", \"-c\", \"someCommand --password=\" + password};\r\n        try {\r\n",
                        "nextNode": "password}"
                    },
                    {
                        "name": "password}",
                        "type": "Dataflow from `pass` to `password`\nDataflow from `\"helloWorld123\"` to `password`",
                        "context": "\r\n    public static void invokeSensitiveProcess(String password) {\r\n        String[] command = {\"sh\", \"-c\", \"someCommand --password=\" + password};\r\n        try {\r\n            Runtime.getRuntime().exec(command);\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "pass",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "\"helloWorld123\"",
                        "type": "String",
                        "context": "\r\n    public static void main(String[] args) {\r\n        String pass = \"helloWorld123\";\r\n        invokeSensitiveProcess(pass);\r\n    }\r\n",
                        "nextNode": "pass"
                    },
                    {
                        "name": "pass",
                        "type": "Dataflow from `\"helloWorld123\"` to `pass`",
                        "context": "    public static void main(String[] args) {\r\n        String pass = \"helloWorld123\";\r\n        invokeSensitiveProcess(pass);\r\n    }\r\n\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "e",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "command",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "pass",
                        "type": "String",
                        "context": "    public static void main(String[] args) {\r\n        String pass = \"helloWorld123\";\r\n        invokeSensitiveProcess(pass);\r\n    }\r\n\r\n |     public static void main(String[] args) {\r\n        String pass = \"helloWorld123\";\r\n        invokeSensitiveProcess(pass);\r\n    }\r\n\r\n",
                        "nextNode": "String password"
                    },
                    {
                        "name": "String password",
                        "type": "String",
                        "context": "    }\r\n\r\n    public static void invokeSensitiveProcess(String password) {\r\n        String[] command = {\"sh\", \"-c\", \"someCommand --password=\" + password};\r\n        try {\r\n |     }\r\n\r\n    public static void invokeSensitiveProcess(String password) {\r\n        String[] command = {\"sh\", \"-c\", \"someCommand --password=\" + password};\r\n        try {\r\n",
                        "nextNode": "password}"
                    },
                    {
                        "name": "password}",
                        "type": "String",
                        "context": "\r\n    public static void invokeSensitiveProcess(String password) {\r\n        String[] command = {\"sh\", \"-c\", \"someCommand --password=\" + password};\r\n        try {\r\n            Runtime.getRuntime().exec(command);\r\n | \r\n    public static void invokeSensitiveProcess(String password) {\r\n        String[] command = {\"sh\", \"-c\", \"someCommand --password=\" + password};\r\n        try {\r\n            Runtime.getRuntime().exec(command);\r\n",
                        "nextNode": "\"someCommand --password=\" + password}"
                    },
                    {
                        "name": "\"someCommand --password=\" + password}",
                        "type": "String",
                        "context": "\r\n    public static void invokeSensitiveProcess(String password) {\r\n        String[] command = {\"sh\", \"-c\", \"someCommand --password=\" + password};\r\n        try {\r\n            Runtime.getRuntime().exec(command);\r\n | \r\n    public static void invokeSensitiveProcess(String password) {\r\n        String[] command = {\"sh\", \"-c\", \"someCommand --password=\" + password};\r\n        try {\r\n            Runtime.getRuntime().exec(command);\r\n",
                        "nextNode": "{\"sh\", \"-c\", \"someCommand --password=\" + password}"
                    },
                    {
                        "name": "{\"sh\", \"-c\", \"someCommand --password=\" + password}",
                        "type": "String",
                        "context": "\r\n    public static void invokeSensitiveProcess(String password) {\r\n        String[] command = {\"sh\", \"-c\", \"someCommand --password=\" + password};\r\n        try {\r\n            Runtime.getRuntime().exec(command);\r\n | \r\n    public static void invokeSensitiveProcess(String password) {\r\n        String[] command = {\"sh\", \"-c\", \"someCommand --password=\" + password};\r\n        try {\r\n            Runtime.getRuntime().exec(command);\r\n | \r\n    public static void invokeSensitiveProcess(String password) {\r\n        String[] command = {\"sh\", \"-c\", \"someCommand --password=\" + password};\r\n        try {\r\n            Runtime.getRuntime().exec(command);\r\n | \r\n    public static void invokeSensitiveProcess(String password) {\r\n        String[] command = {\"sh\", \"-c\", \"someCommand --password=\" + password};\r\n        try {\r\n            Runtime.getRuntime().exec(command);\r\n",
                        "nextNode": "command"
                    },
                    {
                        "name": "command",
                        "type": "String",
                        "context": "        String[] command = {\"sh\", \"-c\", \"someCommand --password=\" + password};\r\n        try {\r\n            Runtime.getRuntime().exec(command);\r\n            System.out.println(\"Process invoked with sensitive command-line arguments.\");\r\n        } catch (Exception e) {\r\n |         String[] command = {\"sh\", \"-c\", \"someCommand --password=\" + password};\r\n        try {\r\n            Runtime.getRuntime().exec(command);\r\n            System.out.println(\"Process invoked with sensitive command-line arguments.\");\r\n        } catch (Exception e) {\r\n |         String[] command = {\"sh\", \"-c\", \"someCommand --password=\" + password};\r\n        try {\r\n            Runtime.getRuntime().exec(command);\r\n            System.out.println(\"Process invoked with sensitive command-line arguments.\");\r\n        } catch (Exception e) {\r\n |         String[] command = {\"sh\", \"-c\", \"someCommand --password=\" + password};\r\n        try {\r\n            Runtime.getRuntime().exec(command);\r\n            System.out.println(\"Process invoked with sensitive command-line arguments.\");\r\n        } catch (Exception e) {\r\n |         } catch (Exception e) {\r\n            e.printStackTrace();\r\n            System.err.println(\"An error occurred while invoking the process with this command: \" + command);\r\n            \r\n        }\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "helloWorld123",
                "isSensitive": "yes"
            },
            {
                "name": "sh",
                "isSensitive": "no"
            },
            {
                "name": "-c",
                "isSensitive": "no"
            },
            {
                "name": "someCommand --password=",
                "isSensitive": "no"
            },
            {
                "name": "Process invoked with sensitive command-line arguments.",
                "isSensitive": "no"
            },
            {
                "name": "An error occurred while invoking the process with this command:",
                "isSensitive": "no"
            }
        ],
        "comments": [],
        "sinks": [
            {
                "name": "invokeSensitiveProcess",
                "isSink": "no"
            },
            {
                "name": "println",
                "isSink": "yes"
            },
            {
                "name": "printStackTrace",
                "isSink": "yes"
            },
            {
                "name": "getRuntime",
                "isSink": "no"
            },
            {
                "name": "exec",
                "isSink": "yes"
            }
        ]
    },
    {
        "fileName": "BAD_TokenExposureViaEnvironment.java",
        "variables": [
            {
                "name": "args",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "process",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "builder.start()",
                        "type": "Process",
                        "context": "            ProcessBuilder builder = new ProcessBuilder(\"myCommand\");\r\n            builder.environment().put(\"SECRET_TOKEN\", envToken);\r\n            Process process = builder.start();\r\n            process.waitFor();\r\n        } catch (Exception e) {\r\n",
                        "nextNode": "process"
                    },
                    {
                        "name": "process",
                        "type": "Dataflow from `start(...)` to `process`",
                        "context": "            builder.environment().put(\"SECRET_TOKEN\", envToken);\r\n            Process process = builder.start();\r\n            process.waitFor();\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "e",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "builder",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "new ProcessBuilder(\"myCommand\")",
                        "type": "ProcessBuilder",
                        "context": "            String envToken = \"WhisperingPines456\";\r\n\r\n            ProcessBuilder builder = new ProcessBuilder(\"myCommand\");\r\n            builder.environment().put(\"SECRET_TOKEN\", envToken);\r\n            Process process = builder.start();\r\n |             String envToken = \"WhisperingPines456\";\r\n\r\n            ProcessBuilder builder = new ProcessBuilder(\"myCommand\");\r\n            builder.environment().put(\"SECRET_TOKEN\", envToken);\r\n            Process process = builder.start();\r\n",
                        "nextNode": "builder"
                    },
                    {
                        "name": "builder",
                        "type": "ProcessBuilder",
                        "context": "\r\n            ProcessBuilder builder = new ProcessBuilder(\"myCommand\");\r\n            builder.environment().put(\"SECRET_TOKEN\", envToken);\r\n            Process process = builder.start();\r\n            process.waitFor();\r\n |             ProcessBuilder builder = new ProcessBuilder(\"myCommand\");\r\n            builder.environment().put(\"SECRET_TOKEN\", envToken);\r\n            Process process = builder.start();\r\n            process.waitFor();\r\n        } catch (Exception e) {\r\n | \r\n            ProcessBuilder builder = new ProcessBuilder(\"myCommand\");\r\n            builder.environment().put(\"SECRET_TOKEN\", envToken);\r\n            Process process = builder.start();\r\n            process.waitFor();\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "envToken",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "\"WhisperingPines456\"",
                        "type": "String",
                        "context": "    public static void main(String[] args) {\r\n        try {\r\n            String envToken = \"WhisperingPines456\";\r\n\r\n            ProcessBuilder builder = new ProcessBuilder(\"myCommand\");\r\n",
                        "nextNode": "envToken"
                    },
                    {
                        "name": "envToken",
                        "type": "Dataflow from `\"WhisperingPines456\"` to `envToken`",
                        "context": "\r\n            ProcessBuilder builder = new ProcessBuilder(\"myCommand\");\r\n            builder.environment().put(\"SECRET_TOKEN\", envToken);\r\n            Process process = builder.start();\r\n            process.waitFor();\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "myCommand",
                "isSensitive": "no"
            },
            {
                "name": "SECRET_TOKEN",
                "isSensitive": "no"
            },
            {
                "name": "WhisperingPines456",
                "isSensitive": "yes"
            }
        ],
        "comments": [],
        "sinks": [
            {
                "name": "environment",
                "isSink": "no"
            },
            {
                "name": "printStackTrace",
                "isSink": "yes"
            },
            {
                "name": "start",
                "isSink": "yes"
            },
            {
                "name": "waitFor",
                "isSink": "no"
            },
            {
                "name": "put",
                "isSink": "yes"
            }
        ]
    },
    {
        "fileName": "GOOD_CloudServiceConfigSecure.java",
        "variables": [
            {
                "name": "encryptedToken",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "token",
                        "type": "String",
                        "context": "        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, logonKey);\r\n        byte[] encryptedBytes = cipher.doFinal(token.getBytes());\r\n\r\n        // Encode bytes to Base64 to ensure safe transmission over command line\r\n",
                        "nextNode": "token.getBytes()"
                    },
                    {
                        "name": "token.getBytes()",
                        "type": "byte[]",
                        "context": "        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, logonKey);\r\n        byte[] encryptedBytes = cipher.doFinal(token.getBytes());\r\n\r\n        // Encode bytes to Base64 to ensure safe transmission over command line\r\n",
                        "nextNode": "cipher.doFinal(token.getBytes()"
                    },
                    {
                        "name": "cipher.doFinal(token.getBytes()",
                        "type": "byte[]",
                        "context": "        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, logonKey);\r\n        byte[] encryptedBytes = cipher.doFinal(token.getBytes());\r\n\r\n        // Encode bytes to Base64 to ensure safe transmission over command line\r\n",
                        "nextNode": "encryptedBytes"
                    },
                    {
                        "name": "encryptedBytes",
                        "type": "byte[]",
                        "context": "\r\n        // Encode bytes to Base64 to ensure safe transmission over command line\r\n        return Base64.getEncoder().encodeToString(encryptedBytes);\r\n    }\r\n}\r\n",
                        "nextNode": "Base64.getEncoder().encodeToString(encryptedBytes)"
                    },
                    {
                        "name": "Base64.getEncoder().encodeToString(encryptedBytes)",
                        "type": "String",
                        "context": "\r\n        // Encode bytes to Base64 to ensure safe transmission over command line\r\n        return Base64.getEncoder().encodeToString(encryptedBytes);\r\n    }\r\n}\r\n",
                        "nextNode": "encryptToken(cloudAccessToken)"
                    },
                    {
                        "name": "encryptToken(cloudAccessToken)",
                        "type": "String",
                        "context": "        try {\r\n            String cloudAccessToken = \"SilentWhisper2021\";\r\n            String encryptedToken = encryptToken(cloudAccessToken);\r\n\r\n            ProcessBuilder builder = new ProcessBuilder(\"cloud\", \"deploy\", \"--access-token\", encryptedToken, \"my-cloud-app\");\r\n",
                        "nextNode": "encryptedToken"
                    },
                    {
                        "name": "encryptedToken",
                        "type": "Dataflow from `token` to `encryptedToken`\nDataflow from `encryptedBytes` to `encryptedToken`\nDataflow from `doFinal(...)` to `encryptedToken`\nDataflow from `getBytes(...)` to `encryptedToken`\nDataflow from `encodeToString(...)` to `encryptedToken`\nDataflow from `\"SilentWhisper2021\"` to `encryptedToken`\nDataflow from `encryptToken(...)` to `encryptedToken`\nDataflow from `cloudAccessToken` to `encryptedToken`",
                        "context": "            String encryptedToken = encryptToken(cloudAccessToken);\r\n\r\n            ProcessBuilder builder = new ProcessBuilder(\"cloud\", \"deploy\", \"--access-token\", encryptedToken, \"my-cloud-app\");\r\n            Process process = builder.start();\r\n            process.waitFor();  // Wait for the process to complete\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "args",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "cipher",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "Cipher.getInstance(\"AES\")",
                        "type": "Cipher",
                        "context": "        SecretKey logonKey = keyGen.generateKey();\r\n\r\n        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, logonKey);\r\n        byte[] encryptedBytes = cipher.doFinal(token.getBytes());\r\n |         SecretKey logonKey = keyGen.generateKey();\r\n\r\n        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, logonKey);\r\n        byte[] encryptedBytes = cipher.doFinal(token.getBytes());\r\n",
                        "nextNode": "cipher"
                    },
                    {
                        "name": "cipher",
                        "type": "Cipher",
                        "context": "\r\n        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, logonKey);\r\n        byte[] encryptedBytes = cipher.doFinal(token.getBytes());\r\n\r\n |         Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, logonKey);\r\n        byte[] encryptedBytes = cipher.doFinal(token.getBytes());\r\n\r\n        // Encode bytes to Base64 to ensure safe transmission over command line\r\n | \r\n        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, logonKey);\r\n        byte[] encryptedBytes = cipher.doFinal(token.getBytes());\r\n\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "process",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "builder.start()",
                        "type": "Process",
                        "context": "\r\n            ProcessBuilder builder = new ProcessBuilder(\"cloud\", \"deploy\", \"--access-token\", encryptedToken, \"my-cloud-app\");\r\n            Process process = builder.start();\r\n            process.waitFor();  // Wait for the process to complete\r\n            System.out.println(\"Cloud deployment initiated successfully.\");\r\n",
                        "nextNode": "process"
                    },
                    {
                        "name": "process",
                        "type": "Dataflow from `start(...)` to `process`",
                        "context": "            ProcessBuilder builder = new ProcessBuilder(\"cloud\", \"deploy\", \"--access-token\", encryptedToken, \"my-cloud-app\");\r\n            Process process = builder.start();\r\n            process.waitFor();  // Wait for the process to complete\r\n            System.out.println(\"Cloud deployment initiated successfully.\");\r\n        } catch (Exception e) {\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "e",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "builder",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "encryptedToken",
                        "type": "String",
                        "context": "            String encryptedToken = encryptToken(cloudAccessToken);\r\n\r\n            ProcessBuilder builder = new ProcessBuilder(\"cloud\", \"deploy\", \"--access-token\", encryptedToken, \"my-cloud-app\");\r\n            Process process = builder.start();\r\n            process.waitFor();  // Wait for the process to complete\r\n",
                        "nextNode": "new ProcessBuilder(\"cloud\", \"deploy\", \"--access-token\", encryptedToken, \"my-cloud-app\")"
                    },
                    {
                        "name": "new ProcessBuilder(\"cloud\", \"deploy\", \"--access-token\", encryptedToken, \"my-cloud-app\")",
                        "type": "ProcessBuilder",
                        "context": "            String encryptedToken = encryptToken(cloudAccessToken);\r\n\r\n            ProcessBuilder builder = new ProcessBuilder(\"cloud\", \"deploy\", \"--access-token\", encryptedToken, \"my-cloud-app\");\r\n            Process process = builder.start();\r\n            process.waitFor();  // Wait for the process to complete\r\n",
                        "nextNode": "builder"
                    },
                    {
                        "name": "builder",
                        "type": "Dataflow from `encryptedToken` to `builder`\nDataflow from `token` to `builder`\nDataflow from `encryptedBytes` to `builder`\nDataflow from `new ProcessBuilder(...)` to `builder`\nDataflow from `doFinal(...)` to `builder`\nDataflow from `getBytes(...)` to `builder`\nDataflow from `encodeToString(...)` to `builder`\nDataflow from `\"SilentWhisper2021\"` to `builder`\nDataflow from `encryptToken(...)` to `builder`\nDataflow from `cloudAccessToken` to `builder`\nDataflow from `\"cloud\"` to `builder`\nDataflow from `\"deploy\"` to `builder`\nDataflow from `\"--access-token\"` to `builder`\nDataflow from `\"my-cloud-app\"` to `builder`",
                        "context": "\r\n            ProcessBuilder builder = new ProcessBuilder(\"cloud\", \"deploy\", \"--access-token\", encryptedToken, \"my-cloud-app\");\r\n            Process process = builder.start();\r\n            process.waitFor();  // Wait for the process to complete\r\n            System.out.println(\"Cloud deployment initiated successfully.\");\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "logonKey",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "keyGen.generateKey()",
                        "type": "SecretKey",
                        "context": "        KeyGenerator keyGen = KeyGenerator.getInstance(\"AES\");\r\n        keyGen.init(128);  // Use AES-128 encryption\r\n        SecretKey logonKey = keyGen.generateKey();\r\n\r\n        Cipher cipher = Cipher.getInstance(\"AES\");\r\n",
                        "nextNode": "logonKey"
                    },
                    {
                        "name": "logonKey",
                        "type": "Dataflow from `generateKey(...)` to `logonKey`",
                        "context": "\r\n        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, logonKey);\r\n        byte[] encryptedBytes = cipher.doFinal(token.getBytes());\r\n\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "encryptedBytes",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "token",
                        "type": "String",
                        "context": "        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, logonKey);\r\n        byte[] encryptedBytes = cipher.doFinal(token.getBytes());\r\n\r\n        // Encode bytes to Base64 to ensure safe transmission over command line\r\n",
                        "nextNode": "token.getBytes()"
                    },
                    {
                        "name": "token.getBytes()",
                        "type": "byte[]",
                        "context": "        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, logonKey);\r\n        byte[] encryptedBytes = cipher.doFinal(token.getBytes());\r\n\r\n        // Encode bytes to Base64 to ensure safe transmission over command line\r\n",
                        "nextNode": "cipher.doFinal(token.getBytes()"
                    },
                    {
                        "name": "cipher.doFinal(token.getBytes()",
                        "type": "byte[]",
                        "context": "        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, logonKey);\r\n        byte[] encryptedBytes = cipher.doFinal(token.getBytes());\r\n\r\n        // Encode bytes to Base64 to ensure safe transmission over command line\r\n",
                        "nextNode": "encryptedBytes"
                    },
                    {
                        "name": "encryptedBytes",
                        "type": "Dataflow from `token` to `encryptedBytes`\nDataflow from `doFinal(...)` to `encryptedBytes`\nDataflow from `getBytes(...)` to `encryptedBytes`\nDataflow from `\"SilentWhisper2021\"` to `encryptedBytes`\nDataflow from `cloudAccessToken` to `encryptedBytes`",
                        "context": "\r\n        // Encode bytes to Base64 to ensure safe transmission over command line\r\n        return Base64.getEncoder().encodeToString(encryptedBytes);\r\n    }\r\n}\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "keyGen",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "KeyGenerator.getInstance(\"AES\")",
                        "type": "KeyGenerator",
                        "context": "    // Encrypt the token using AES encryption\r\n    private static String encryptToken(String token) throws Exception {\r\n        KeyGenerator keyGen = KeyGenerator.getInstance(\"AES\");\r\n        keyGen.init(128);  // Use AES-128 encryption\r\n        SecretKey logonKey = keyGen.generateKey();\r\n |     // Encrypt the token using AES encryption\r\n    private static String encryptToken(String token) throws Exception {\r\n        KeyGenerator keyGen = KeyGenerator.getInstance(\"AES\");\r\n        keyGen.init(128);  // Use AES-128 encryption\r\n        SecretKey logonKey = keyGen.generateKey();\r\n",
                        "nextNode": "keyGen"
                    },
                    {
                        "name": "keyGen",
                        "type": "KeyGenerator",
                        "context": "    private static String encryptToken(String token) throws Exception {\r\n        KeyGenerator keyGen = KeyGenerator.getInstance(\"AES\");\r\n        keyGen.init(128);  // Use AES-128 encryption\r\n        SecretKey logonKey = keyGen.generateKey();\r\n\r\n |         KeyGenerator keyGen = KeyGenerator.getInstance(\"AES\");\r\n        keyGen.init(128);  // Use AES-128 encryption\r\n        SecretKey logonKey = keyGen.generateKey();\r\n\r\n        Cipher cipher = Cipher.getInstance(\"AES\");\r\n |     private static String encryptToken(String token) throws Exception {\r\n        KeyGenerator keyGen = KeyGenerator.getInstance(\"AES\");\r\n        keyGen.init(128);  // Use AES-128 encryption\r\n        SecretKey logonKey = keyGen.generateKey();\r\n\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "cloudAccessToken",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "\"SilentWhisper2021\"",
                        "type": "String",
                        "context": "    public static void main(String[] args) {\r\n        try {\r\n            String cloudAccessToken = \"SilentWhisper2021\";\r\n            String encryptedToken = encryptToken(cloudAccessToken);\r\n\r\n",
                        "nextNode": "cloudAccessToken"
                    },
                    {
                        "name": "cloudAccessToken",
                        "type": "Dataflow from `\"SilentWhisper2021\"` to `cloudAccessToken`",
                        "context": "        try {\r\n            String cloudAccessToken = \"SilentWhisper2021\";\r\n            String encryptedToken = encryptToken(cloudAccessToken);\r\n\r\n            ProcessBuilder builder = new ProcessBuilder(\"cloud\", \"deploy\", \"--access-token\", encryptedToken, \"my-cloud-app\");\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "token",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "\"SilentWhisper2021\"",
                        "type": "String",
                        "context": "    public static void main(String[] args) {\r\n        try {\r\n            String cloudAccessToken = \"SilentWhisper2021\";\r\n            String encryptedToken = encryptToken(cloudAccessToken);\r\n\r\n",
                        "nextNode": "cloudAccessToken"
                    },
                    {
                        "name": "cloudAccessToken",
                        "type": "String",
                        "context": "        try {\r\n            String cloudAccessToken = \"SilentWhisper2021\";\r\n            String encryptedToken = encryptToken(cloudAccessToken);\r\n\r\n            ProcessBuilder builder = new ProcessBuilder(\"cloud\", \"deploy\", \"--access-token\", encryptedToken, \"my-cloud-app\");\r\n",
                        "nextNode": "String token"
                    },
                    {
                        "name": "String token",
                        "type": "String",
                        "context": "\r\n    // Encrypt the token using AES encryption\r\n    private static String encryptToken(String token) throws Exception {\r\n        KeyGenerator keyGen = KeyGenerator.getInstance(\"AES\");\r\n        keyGen.init(128);  // Use AES-128 encryption\r\n",
                        "nextNode": "token"
                    },
                    {
                        "name": "token",
                        "type": "Dataflow from `\"SilentWhisper2021\"` to `token`\nDataflow from `cloudAccessToken` to `token`",
                        "context": "        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, logonKey);\r\n        byte[] encryptedBytes = cipher.doFinal(token.getBytes());\r\n\r\n        // Encode bytes to Base64 to ensure safe transmission over command line\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "cloud",
                "isSensitive": "no"
            },
            {
                "name": "--access-token",
                "isSensitive": "no"
            },
            {
                "name": "my-cloud-app",
                "isSensitive": "yes"
            },
            {
                "name": "SilentWhisper2021",
                "isSensitive": "yes"
            },
            {
                "name": "deploy",
                "isSensitive": "no"
            },
            {
                "name": "Cloud deployment initiated successfully.",
                "isSensitive": "no"
            },
            {
                "name": "AES",
                "isSensitive": "yes"
            }
        ],
        "comments": [
            {
                "name": "Wait for the process to complete",
                "isSensitive": "no"
            },
            {
                "name": "Encrypt the token using AES encryption",
                "isSensitive": "no"
            },
            {
                "name": "Use AES-128 encryption",
                "isSensitive": "no"
            },
            {
                "name": "Encode bytes to Base64 to ensure safe transmission over command line",
                "isSensitive": "no"
            }
        ],
        "sinks": [
            {
                "name": "generateKey",
                "isSink": "no"
            },
            {
                "name": "init",
                "isSink": "no"
            },
            {
                "name": "println",
                "isSink": "yes"
            },
            {
                "name": "printStackTrace",
                "isSink": "yes"
            },
            {
                "name": "start",
                "isSink": "yes"
            },
            {
                "name": "getEncoder",
                "isSink": "no"
            },
            {
                "name": "encodeToString",
                "isSink": "no"
            },
            {
                "name": "getInstance",
                "isSink": "no"
            },
            {
                "name": "encryptToken",
                "isSink": "no"
            },
            {
                "name": "waitFor",
                "isSink": "no"
            },
            {
                "name": "getBytes",
                "isSink": "no"
            },
            {
                "name": "doFinal",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "GOOD_DockerRunEncryptedConfig.java",
        "variables": [
            {
                "name": "args",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "cipher",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "Cipher.getInstance(\"AES\")",
                        "type": "Cipher",
                        "context": "        SecretKey key = keyGen.generateKey();\r\n\r\n        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, key);\r\n        byte[] encryptedBytes = cipher.doFinal(message.getBytes());\r\n |         SecretKey key = keyGen.generateKey();\r\n\r\n        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, key);\r\n        byte[] encryptedBytes = cipher.doFinal(message.getBytes());\r\n",
                        "nextNode": "cipher"
                    },
                    {
                        "name": "cipher",
                        "type": "Cipher",
                        "context": "\r\n        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, key);\r\n        byte[] encryptedBytes = cipher.doFinal(message.getBytes());\r\n\r\n |         Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, key);\r\n        byte[] encryptedBytes = cipher.doFinal(message.getBytes());\r\n\r\n        // Encode bytes to Base64 to ensure safe transmission over environments like command lines\r\n | \r\n        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, key);\r\n        byte[] encryptedBytes = cipher.doFinal(message.getBytes());\r\n\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "process",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "builder.start()",
                        "type": "Process",
                        "context": "            );\r\n            builder.inheritIO();  // Inherit IO to see Docker output in Java process\r\n            Process process = builder.start();\r\n            process.waitFor();  // Wait for the process to complete\r\n            System.out.println(\"Docker container started successfully with encrypted config.\");\r\n",
                        "nextNode": "process"
                    },
                    {
                        "name": "process",
                        "type": "Dataflow from `start(...)` to `process`",
                        "context": "            builder.inheritIO();  // Inherit IO to see Docker output in Java process\r\n            Process process = builder.start();\r\n            process.waitFor();  // Wait for the process to complete\r\n            System.out.println(\"Docker container started successfully with encrypted config.\");\r\n        } catch (Exception e) {\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "e",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "builder",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "encryptedConfig",
                        "type": "String",
                        "context": "            ProcessBuilder builder = new ProcessBuilder(\r\n                \"docker\", \"run\", \r\n                \"-e\", \"CONFIG_SECRET=\" + encryptedConfig, \r\n                \"myapp:latest\"\r\n            );\r\n |             ProcessBuilder builder = new ProcessBuilder(\r\n                \"docker\", \"run\", \r\n                \"-e\", \"CONFIG_SECRET=\" + encryptedConfig, \r\n                \"myapp:latest\"\r\n            );\r\n",
                        "nextNode": "\"CONFIG_SECRET=\" + encryptedConfig"
                    },
                    {
                        "name": "\"CONFIG_SECRET=\" + encryptedConfig",
                        "type": "String",
                        "context": "            ProcessBuilder builder = new ProcessBuilder(\r\n                \"docker\", \"run\", \r\n                \"-e\", \"CONFIG_SECRET=\" + encryptedConfig, \r\n                \"myapp:latest\"\r\n            );\r\n |             ProcessBuilder builder = new ProcessBuilder(\r\n                \"docker\", \"run\", \r\n                \"-e\", \"CONFIG_SECRET=\" + encryptedConfig, \r\n                \"myapp:latest\"\r\n            );\r\n",
                        "nextNode": ""
                    },
                    {
                        "name": "",
                        "type": "ProcessBuilder",
                        "context": "\r\n            // We now pass the encrypted secret as an environment variable to the Docker process\r\n            ProcessBuilder builder = new ProcessBuilder(\r\n                \"docker\", \"run\", \r\n                \"-e\", \"CONFIG_SECRET=\" + encryptedConfig, \r\n                \"myapp:latest\"\r\n            );\r\n            builder.inheritIO();  // Inherit IO to see Docker output in Java process\r\n            Process process = builder.start();\r\n | \r\n            // We now pass the encrypted secret as an environment variable to the Docker process\r\n            ProcessBuilder builder = new ProcessBuilder(\r\n                \"docker\", \"run\", \r\n                \"-e\", \"CONFIG_SECRET=\" + encryptedConfig, \r\n                \"myapp:latest\"\r\n            );\r\n            builder.inheritIO();  // Inherit IO to see Docker output in Java process\r\n            Process process = builder.start();\r\n",
                        "nextNode": null
                    },
                    {
                        "name": "builder",
                        "type": "ProcessBuilder",
                        "context": "                \"myapp:latest\"\r\n            );\r\n            builder.inheritIO();  // Inherit IO to see Docker output in Java process\r\n            Process process = builder.start();\r\n            process.waitFor();  // Wait for the process to complete\r\n |             );\r\n            builder.inheritIO();  // Inherit IO to see Docker output in Java process\r\n            Process process = builder.start();\r\n            process.waitFor();  // Wait for the process to complete\r\n            System.out.println(\"Docker container started successfully with encrypted config.\");\r\n |                 \"myapp:latest\"\r\n            );\r\n            builder.inheritIO();  // Inherit IO to see Docker output in Java process\r\n            Process process = builder.start();\r\n            process.waitFor();  // Wait for the process to complete\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "encryptedBytes",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "message",
                        "type": "String",
                        "context": "        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, key);\r\n        byte[] encryptedBytes = cipher.doFinal(message.getBytes());\r\n\r\n        // Encode bytes to Base64 to ensure safe transmission over environments like command lines\r\n",
                        "nextNode": "message.getBytes()"
                    },
                    {
                        "name": "message.getBytes()",
                        "type": "byte[]",
                        "context": "        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, key);\r\n        byte[] encryptedBytes = cipher.doFinal(message.getBytes());\r\n\r\n        // Encode bytes to Base64 to ensure safe transmission over environments like command lines\r\n",
                        "nextNode": "cipher.doFinal(message.getBytes()"
                    },
                    {
                        "name": "cipher.doFinal(message.getBytes()",
                        "type": "byte[]",
                        "context": "        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, key);\r\n        byte[] encryptedBytes = cipher.doFinal(message.getBytes());\r\n\r\n        // Encode bytes to Base64 to ensure safe transmission over environments like command lines\r\n",
                        "nextNode": "encryptedBytes"
                    },
                    {
                        "name": "encryptedBytes",
                        "type": "Dataflow from `message` to `encryptedBytes`\nDataflow from `doFinal(...)` to `encryptedBytes`\nDataflow from `getBytes(...)` to `encryptedBytes`\nDataflow from `\"CrimsonMoonlight78\"` to `encryptedBytes`\nDataflow from `config` to `encryptedBytes`",
                        "context": "\r\n        // Encode bytes to Base64 to ensure safe transmission over environments like command lines\r\n        return Base64.getEncoder().encodeToString(encryptedBytes);\r\n    }\r\n}\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "keyGen",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "KeyGenerator.getInstance(\"AES\")",
                        "type": "KeyGenerator",
                        "context": "    // Encrypt the configuration secret using AES encryption\r\n    private static String encryptSecret(String message) throws Exception {\r\n        KeyGenerator keyGen = KeyGenerator.getInstance(\"AES\");\r\n        keyGen.init(256); // Use AES-256 for encryption\r\n        SecretKey key = keyGen.generateKey();\r\n |     // Encrypt the configuration secret using AES encryption\r\n    private static String encryptSecret(String message) throws Exception {\r\n        KeyGenerator keyGen = KeyGenerator.getInstance(\"AES\");\r\n        keyGen.init(256); // Use AES-256 for encryption\r\n        SecretKey key = keyGen.generateKey();\r\n",
                        "nextNode": "keyGen"
                    },
                    {
                        "name": "keyGen",
                        "type": "KeyGenerator",
                        "context": "    private static String encryptSecret(String message) throws Exception {\r\n        KeyGenerator keyGen = KeyGenerator.getInstance(\"AES\");\r\n        keyGen.init(256); // Use AES-256 for encryption\r\n        SecretKey key = keyGen.generateKey();\r\n\r\n |         KeyGenerator keyGen = KeyGenerator.getInstance(\"AES\");\r\n        keyGen.init(256); // Use AES-256 for encryption\r\n        SecretKey key = keyGen.generateKey();\r\n\r\n        Cipher cipher = Cipher.getInstance(\"AES\");\r\n |     private static String encryptSecret(String message) throws Exception {\r\n        KeyGenerator keyGen = KeyGenerator.getInstance(\"AES\");\r\n        keyGen.init(256); // Use AES-256 for encryption\r\n        SecretKey key = keyGen.generateKey();\r\n\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "message",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "\"CrimsonMoonlight78\"",
                        "type": "String",
                        "context": "    public static void main(String[] args) {\r\n        try {\r\n            String config = \"CrimsonMoonlight78\";\r\n            String encryptedConfig = encryptSecret(config);\r\n\r\n",
                        "nextNode": "config"
                    },
                    {
                        "name": "config",
                        "type": "String",
                        "context": "        try {\r\n            String config = \"CrimsonMoonlight78\";\r\n            String encryptedConfig = encryptSecret(config);\r\n\r\n            // We now pass the encrypted secret as an environment variable to the Docker process\r\n",
                        "nextNode": "String message"
                    },
                    {
                        "name": "String message",
                        "type": "String",
                        "context": "\r\n    // Encrypt the configuration secret using AES encryption\r\n    private static String encryptSecret(String message) throws Exception {\r\n        KeyGenerator keyGen = KeyGenerator.getInstance(\"AES\");\r\n        keyGen.init(256); // Use AES-256 for encryption\r\n",
                        "nextNode": "message"
                    },
                    {
                        "name": "message",
                        "type": "Dataflow from `\"CrimsonMoonlight78\"` to `message`\nDataflow from `config` to `message`",
                        "context": "        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, key);\r\n        byte[] encryptedBytes = cipher.doFinal(message.getBytes());\r\n\r\n        // Encode bytes to Base64 to ensure safe transmission over environments like command lines\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "config",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "\"CrimsonMoonlight78\"",
                        "type": "String",
                        "context": "    public static void main(String[] args) {\r\n        try {\r\n            String config = \"CrimsonMoonlight78\";\r\n            String encryptedConfig = encryptSecret(config);\r\n\r\n",
                        "nextNode": "config"
                    },
                    {
                        "name": "config",
                        "type": "Dataflow from `\"CrimsonMoonlight78\"` to `config`",
                        "context": "        try {\r\n            String config = \"CrimsonMoonlight78\";\r\n            String encryptedConfig = encryptSecret(config);\r\n\r\n            // We now pass the encrypted secret as an environment variable to the Docker process\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "encryptedConfig",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "message",
                        "type": "String",
                        "context": "        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, key);\r\n        byte[] encryptedBytes = cipher.doFinal(message.getBytes());\r\n\r\n        // Encode bytes to Base64 to ensure safe transmission over environments like command lines\r\n",
                        "nextNode": "message.getBytes()"
                    },
                    {
                        "name": "message.getBytes()",
                        "type": "byte[]",
                        "context": "        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, key);\r\n        byte[] encryptedBytes = cipher.doFinal(message.getBytes());\r\n\r\n        // Encode bytes to Base64 to ensure safe transmission over environments like command lines\r\n",
                        "nextNode": "cipher.doFinal(message.getBytes()"
                    },
                    {
                        "name": "cipher.doFinal(message.getBytes()",
                        "type": "byte[]",
                        "context": "        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, key);\r\n        byte[] encryptedBytes = cipher.doFinal(message.getBytes());\r\n\r\n        // Encode bytes to Base64 to ensure safe transmission over environments like command lines\r\n",
                        "nextNode": "encryptedBytes"
                    },
                    {
                        "name": "encryptedBytes",
                        "type": "byte[]",
                        "context": "\r\n        // Encode bytes to Base64 to ensure safe transmission over environments like command lines\r\n        return Base64.getEncoder().encodeToString(encryptedBytes);\r\n    }\r\n}\r\n",
                        "nextNode": "Base64.getEncoder().encodeToString(encryptedBytes)"
                    },
                    {
                        "name": "Base64.getEncoder().encodeToString(encryptedBytes)",
                        "type": "String",
                        "context": "\r\n        // Encode bytes to Base64 to ensure safe transmission over environments like command lines\r\n        return Base64.getEncoder().encodeToString(encryptedBytes);\r\n    }\r\n}\r\n",
                        "nextNode": "encryptSecret(config)"
                    },
                    {
                        "name": "encryptSecret(config)",
                        "type": "String",
                        "context": "        try {\r\n            String config = \"CrimsonMoonlight78\";\r\n            String encryptedConfig = encryptSecret(config);\r\n\r\n            // We now pass the encrypted secret as an environment variable to the Docker process\r\n",
                        "nextNode": "encryptedConfig"
                    },
                    {
                        "name": "encryptedConfig",
                        "type": "Dataflow from `message` to `encryptedConfig`\nDataflow from `encryptedBytes` to `encryptedConfig`\nDataflow from `doFinal(...)` to `encryptedConfig`\nDataflow from `getBytes(...)` to `encryptedConfig`\nDataflow from `encodeToString(...)` to `encryptedConfig`\nDataflow from `\"CrimsonMoonlight78\"` to `encryptedConfig`\nDataflow from `encryptSecret(...)` to `encryptedConfig`\nDataflow from `config` to `encryptedConfig`",
                        "context": "            ProcessBuilder builder = new ProcessBuilder(\r\n                \"docker\", \"run\", \r\n                \"-e\", \"CONFIG_SECRET=\" + encryptedConfig, \r\n                \"myapp:latest\"\r\n            );\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "key",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "keyGen.generateKey()",
                        "type": "SecretKey",
                        "context": "        KeyGenerator keyGen = KeyGenerator.getInstance(\"AES\");\r\n        keyGen.init(256); // Use AES-256 for encryption\r\n        SecretKey key = keyGen.generateKey();\r\n\r\n        Cipher cipher = Cipher.getInstance(\"AES\");\r\n",
                        "nextNode": "key"
                    },
                    {
                        "name": "key",
                        "type": "Dataflow from `generateKey(...)` to `key`",
                        "context": "\r\n        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, key);\r\n        byte[] encryptedBytes = cipher.doFinal(message.getBytes());\r\n\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "Docker container started successfully with encrypted config.",
                "isSensitive": "no"
            },
            {
                "name": "CrimsonMoonlight78",
                "isSensitive": "yes"
            },
            {
                "name": "-e",
                "isSensitive": "no"
            },
            {
                "name": "CONFIG_SECRET=",
                "isSensitive": "no"
            },
            {
                "name": "myapp:latest",
                "isSensitive": "no"
            },
            {
                "name": "run",
                "isSensitive": "no"
            },
            {
                "name": "docker",
                "isSensitive": "no"
            },
            {
                "name": "AES",
                "isSensitive": "yes"
            }
        ],
        "comments": [
            {
                "name": "Wait for the process to complete",
                "isSensitive": "no"
            },
            {
                "name": "Encode bytes to Base64 to ensure safe transmission over environments like command lines",
                "isSensitive": "no"
            },
            {
                "name": "We now pass the encrypted secret as an environment variable to the Docker process",
                "isSensitive": "no"
            },
            {
                "name": "Inherit IO to see Docker output in Java process",
                "isSensitive": "no"
            },
            {
                "name": "Encrypt the configuration secret using AES encryption",
                "isSensitive": "no"
            },
            {
                "name": "Use AES-256 for encryption",
                "isSensitive": "no"
            }
        ],
        "sinks": [
            {
                "name": "init",
                "isSink": "no"
            },
            {
                "name": "printStackTrace",
                "isSink": "yes"
            },
            {
                "name": "start",
                "isSink": "yes"
            },
            {
                "name": "encodeToString",
                "isSink": "no"
            },
            {
                "name": "inheritIO",
                "isSink": "yes"
            },
            {
                "name": "encryptSecret",
                "isSink": "no"
            },
            {
                "name": "getBytes",
                "isSink": "no"
            },
            {
                "name": "doFinal",
                "isSink": "no"
            },
            {
                "name": "generateKey",
                "isSink": "no"
            },
            {
                "name": "println",
                "isSink": "yes"
            },
            {
                "name": "getEncoder",
                "isSink": "no"
            },
            {
                "name": "getInstance",
                "isSink": "no"
            },
            {
                "name": "waitFor",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "GOOD_EncryptCommandExecution.java",
        "variables": [
            {
                "name": "args",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "cipher",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "Cipher.getInstance(\"AES\")",
                        "type": "Cipher",
                        "context": "        SecretKey userKey = keyGen.generateKey();\r\n\r\n        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, userKey);\r\n        byte[] encrypted = cipher.doFinal(argument.getBytes());\r\n |         SecretKey userKey = keyGen.generateKey();\r\n\r\n        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, userKey);\r\n        byte[] encrypted = cipher.doFinal(argument.getBytes());\r\n",
                        "nextNode": "cipher"
                    },
                    {
                        "name": "cipher",
                        "type": "Cipher",
                        "context": "\r\n        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, userKey);\r\n        byte[] encrypted = cipher.doFinal(argument.getBytes());\r\n\r\n |         Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, userKey);\r\n        byte[] encrypted = cipher.doFinal(argument.getBytes());\r\n\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n | \r\n        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, userKey);\r\n        byte[] encrypted = cipher.doFinal(argument.getBytes());\r\n\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "process",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "builder.start()",
                        "type": "Process",
                        "context": "\r\n            ProcessBuilder builder = new ProcessBuilder(\"processpayment.sh\", encryptedArgument);\r\n            Process process = builder.start();\r\n            process.waitFor();\r\n        } catch (Exception e) {\r\n",
                        "nextNode": "process"
                    },
                    {
                        "name": "process",
                        "type": "Dataflow from `start(...)` to `process`",
                        "context": "            ProcessBuilder builder = new ProcessBuilder(\"processpayment.sh\", encryptedArgument);\r\n            Process process = builder.start();\r\n            process.waitFor();\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "argument",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "\"48098433183058\"",
                        "type": "String",
                        "context": "    public static void main(String[] args) {\r\n        try {\r\n            String bankAccountNumber = \"48098433183058\";\r\n            String encryptedArgument = encryptArgument(bankAccountNumber);\r\n\r\n",
                        "nextNode": "bankAccountNumber"
                    },
                    {
                        "name": "bankAccountNumber",
                        "type": "String",
                        "context": "        try {\r\n            String bankAccountNumber = \"48098433183058\";\r\n            String encryptedArgument = encryptArgument(bankAccountNumber);\r\n\r\n            ProcessBuilder builder = new ProcessBuilder(\"processpayment.sh\", encryptedArgument);\r\n",
                        "nextNode": "String argument"
                    },
                    {
                        "name": "String argument",
                        "type": "String",
                        "context": "    }\r\n\r\n    private static String encryptArgument(String argument) throws Exception {\r\n        KeyGenerator keyGen = KeyGenerator.getInstance(\"AES\");\r\n        keyGen.init(128);\r\n",
                        "nextNode": "argument"
                    },
                    {
                        "name": "argument",
                        "type": "Dataflow from `\"48098433183058\"` to `argument`\nDataflow from `bankAccountNumber` to `argument`",
                        "context": "        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, userKey);\r\n        byte[] encrypted = cipher.doFinal(argument.getBytes());\r\n\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "encryptedArgument",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "argument",
                        "type": "String",
                        "context": "        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, userKey);\r\n        byte[] encrypted = cipher.doFinal(argument.getBytes());\r\n\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n",
                        "nextNode": "argument.getBytes()"
                    },
                    {
                        "name": "argument.getBytes()",
                        "type": "byte[]",
                        "context": "        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, userKey);\r\n        byte[] encrypted = cipher.doFinal(argument.getBytes());\r\n\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n",
                        "nextNode": "cipher.doFinal(argument.getBytes()"
                    },
                    {
                        "name": "cipher.doFinal(argument.getBytes()",
                        "type": "byte[]",
                        "context": "        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, userKey);\r\n        byte[] encrypted = cipher.doFinal(argument.getBytes());\r\n\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n",
                        "nextNode": "encrypted"
                    },
                    {
                        "name": "encrypted",
                        "type": "byte[]",
                        "context": "        byte[] encrypted = cipher.doFinal(argument.getBytes());\r\n\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n    }\r\n}\r\n",
                        "nextNode": "Base64.getEncoder().encodeToString(encrypted)"
                    },
                    {
                        "name": "Base64.getEncoder().encodeToString(encrypted)",
                        "type": "String",
                        "context": "        byte[] encrypted = cipher.doFinal(argument.getBytes());\r\n\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n    }\r\n}\r\n",
                        "nextNode": "encryptArgument(bankAccountNumber)"
                    },
                    {
                        "name": "encryptArgument(bankAccountNumber)",
                        "type": "String",
                        "context": "        try {\r\n            String bankAccountNumber = \"48098433183058\";\r\n            String encryptedArgument = encryptArgument(bankAccountNumber);\r\n\r\n            ProcessBuilder builder = new ProcessBuilder(\"processpayment.sh\", encryptedArgument);\r\n",
                        "nextNode": "encryptedArgument"
                    },
                    {
                        "name": "encryptedArgument",
                        "type": "Dataflow from `argument` to `encryptedArgument`\nDataflow from `encrypted` to `encryptedArgument`\nDataflow from `doFinal(...)` to `encryptedArgument`\nDataflow from `getBytes(...)` to `encryptedArgument`\nDataflow from `encodeToString(...)` to `encryptedArgument`\nDataflow from `\"48098433183058\"` to `encryptedArgument`\nDataflow from `encryptArgument(...)` to `encryptedArgument`\nDataflow from `bankAccountNumber` to `encryptedArgument`",
                        "context": "            String encryptedArgument = encryptArgument(bankAccountNumber);\r\n\r\n            ProcessBuilder builder = new ProcessBuilder(\"processpayment.sh\", encryptedArgument);\r\n            Process process = builder.start();\r\n            process.waitFor();\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "encrypted",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "argument",
                        "type": "String",
                        "context": "        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, userKey);\r\n        byte[] encrypted = cipher.doFinal(argument.getBytes());\r\n\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n",
                        "nextNode": "argument.getBytes()"
                    },
                    {
                        "name": "argument.getBytes()",
                        "type": "byte[]",
                        "context": "        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, userKey);\r\n        byte[] encrypted = cipher.doFinal(argument.getBytes());\r\n\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n",
                        "nextNode": "cipher.doFinal(argument.getBytes()"
                    },
                    {
                        "name": "cipher.doFinal(argument.getBytes()",
                        "type": "byte[]",
                        "context": "        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, userKey);\r\n        byte[] encrypted = cipher.doFinal(argument.getBytes());\r\n\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n",
                        "nextNode": "encrypted"
                    },
                    {
                        "name": "encrypted",
                        "type": "Dataflow from `argument` to `encrypted`\nDataflow from `doFinal(...)` to `encrypted`\nDataflow from `getBytes(...)` to `encrypted`\nDataflow from `\"48098433183058\"` to `encrypted`\nDataflow from `bankAccountNumber` to `encrypted`",
                        "context": "        byte[] encrypted = cipher.doFinal(argument.getBytes());\r\n\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n    }\r\n}\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "e",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "builder",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "encryptedArgument",
                        "type": "String",
                        "context": "            String encryptedArgument = encryptArgument(bankAccountNumber);\r\n\r\n            ProcessBuilder builder = new ProcessBuilder(\"processpayment.sh\", encryptedArgument);\r\n            Process process = builder.start();\r\n            process.waitFor();\r\n",
                        "nextNode": "new ProcessBuilder(\"processpayment.sh\", encryptedArgument)"
                    },
                    {
                        "name": "new ProcessBuilder(\"processpayment.sh\", encryptedArgument)",
                        "type": "ProcessBuilder",
                        "context": "            String encryptedArgument = encryptArgument(bankAccountNumber);\r\n\r\n            ProcessBuilder builder = new ProcessBuilder(\"processpayment.sh\", encryptedArgument);\r\n            Process process = builder.start();\r\n            process.waitFor();\r\n",
                        "nextNode": "builder"
                    },
                    {
                        "name": "builder",
                        "type": "Dataflow from `encryptedArgument` to `builder`\nDataflow from `argument` to `builder`\nDataflow from `encrypted` to `builder`\nDataflow from `new ProcessBuilder(...)` to `builder`\nDataflow from `doFinal(...)` to `builder`\nDataflow from `getBytes(...)` to `builder`\nDataflow from `encodeToString(...)` to `builder`\nDataflow from `\"48098433183058\"` to `builder`\nDataflow from `encryptArgument(...)` to `builder`\nDataflow from `bankAccountNumber` to `builder`\nDataflow from `\"processpayment.sh\"` to `builder`",
                        "context": "\r\n            ProcessBuilder builder = new ProcessBuilder(\"processpayment.sh\", encryptedArgument);\r\n            Process process = builder.start();\r\n            process.waitFor();\r\n        } catch (Exception e) {\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "bankAccountNumber",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "\"48098433183058\"",
                        "type": "String",
                        "context": "    public static void main(String[] args) {\r\n        try {\r\n            String bankAccountNumber = \"48098433183058\";\r\n            String encryptedArgument = encryptArgument(bankAccountNumber);\r\n\r\n",
                        "nextNode": "bankAccountNumber"
                    },
                    {
                        "name": "bankAccountNumber",
                        "type": "Dataflow from `\"48098433183058\"` to `bankAccountNumber`",
                        "context": "        try {\r\n            String bankAccountNumber = \"48098433183058\";\r\n            String encryptedArgument = encryptArgument(bankAccountNumber);\r\n\r\n            ProcessBuilder builder = new ProcessBuilder(\"processpayment.sh\", encryptedArgument);\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "keyGen",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "KeyGenerator.getInstance(\"AES\")",
                        "type": "KeyGenerator",
                        "context": "\r\n    private static String encryptArgument(String argument) throws Exception {\r\n        KeyGenerator keyGen = KeyGenerator.getInstance(\"AES\");\r\n        keyGen.init(128);\r\n        SecretKey userKey = keyGen.generateKey();\r\n | \r\n    private static String encryptArgument(String argument) throws Exception {\r\n        KeyGenerator keyGen = KeyGenerator.getInstance(\"AES\");\r\n        keyGen.init(128);\r\n        SecretKey userKey = keyGen.generateKey();\r\n",
                        "nextNode": "keyGen"
                    },
                    {
                        "name": "keyGen",
                        "type": "KeyGenerator",
                        "context": "    private static String encryptArgument(String argument) throws Exception {\r\n        KeyGenerator keyGen = KeyGenerator.getInstance(\"AES\");\r\n        keyGen.init(128);\r\n        SecretKey userKey = keyGen.generateKey();\r\n\r\n |         KeyGenerator keyGen = KeyGenerator.getInstance(\"AES\");\r\n        keyGen.init(128);\r\n        SecretKey userKey = keyGen.generateKey();\r\n\r\n        Cipher cipher = Cipher.getInstance(\"AES\");\r\n |     private static String encryptArgument(String argument) throws Exception {\r\n        KeyGenerator keyGen = KeyGenerator.getInstance(\"AES\");\r\n        keyGen.init(128);\r\n        SecretKey userKey = keyGen.generateKey();\r\n\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "userKey",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "keyGen.generateKey()",
                        "type": "SecretKey",
                        "context": "        KeyGenerator keyGen = KeyGenerator.getInstance(\"AES\");\r\n        keyGen.init(128);\r\n        SecretKey userKey = keyGen.generateKey();\r\n\r\n        Cipher cipher = Cipher.getInstance(\"AES\");\r\n",
                        "nextNode": "userKey"
                    },
                    {
                        "name": "userKey",
                        "type": "Dataflow from `generateKey(...)` to `userKey`",
                        "context": "\r\n        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, userKey);\r\n        byte[] encrypted = cipher.doFinal(argument.getBytes());\r\n\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "processpayment.sh",
                "isSensitive": "no"
            },
            {
                "name": "48098433183058",
                "isSensitive": "no"
            },
            {
                "name": "AES",
                "isSensitive": "yes"
            }
        ],
        "comments": [],
        "sinks": [
            {
                "name": "generateKey",
                "isSink": "no"
            },
            {
                "name": "init",
                "isSink": "no"
            },
            {
                "name": "printStackTrace",
                "isSink": "yes"
            },
            {
                "name": "encryptArgument",
                "isSink": "no"
            },
            {
                "name": "start",
                "isSink": "yes"
            },
            {
                "name": "getEncoder",
                "isSink": "no"
            },
            {
                "name": "encodeToString",
                "isSink": "no"
            },
            {
                "name": "getInstance",
                "isSink": "no"
            },
            {
                "name": "waitFor",
                "isSink": "no"
            },
            {
                "name": "getBytes",
                "isSink": "no"
            },
            {
                "name": "doFinal",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "GOOD_EncryptTempFileProcess.java",
        "variables": [
            {
                "name": "cipher",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "Cipher.getInstance(\"AES\")",
                        "type": "Cipher",
                        "context": "\r\n        // Encrypt data\r\n        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, key);\r\n        byte[] encryptedData = cipher.doFinal(dataToEncrypt);\r\n | \r\n        // Encrypt data\r\n        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, key);\r\n        byte[] encryptedData = cipher.doFinal(dataToEncrypt);\r\n",
                        "nextNode": "cipher"
                    },
                    {
                        "name": "cipher",
                        "type": "Cipher",
                        "context": "        // Encrypt data\r\n        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, key);\r\n        byte[] encryptedData = cipher.doFinal(dataToEncrypt);\r\n\r\n |         Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, key);\r\n        byte[] encryptedData = cipher.doFinal(dataToEncrypt);\r\n\r\n        // Write encrypted data to a secure temporary file\r\n |         // Encrypt data\r\n        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, key);\r\n        byte[] encryptedData = cipher.doFinal(dataToEncrypt);\r\n\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "args",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "process",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "builder.start()",
                        "type": "Process",
                        "context": "        // Invoke the process with the path to the encrypted file\r\n        ProcessBuilder builder = new ProcessBuilder(\"secureProcessor\", tempFile.toString());\r\n        Process process = builder.start();\r\n        process.waitFor();\r\n\r\n",
                        "nextNode": "process"
                    },
                    {
                        "name": "process",
                        "type": "Dataflow from `start(...)` to `process`",
                        "context": "        ProcessBuilder builder = new ProcessBuilder(\"secureProcessor\", tempFile.toString());\r\n        Process process = builder.start();\r\n        process.waitFor();\r\n\r\n        // Securely delete the temporary file after use\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "dataToEncrypt",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "sensitiveData",
                        "type": "String",
                        "context": "        // Prepare data to encrypt\r\n        String sensitiveData = \"Highly confidential information\";\r\n        byte[] dataToEncrypt = sensitiveData.getBytes();\r\n\r\n        // Encrypt data\r\n",
                        "nextNode": "sensitiveData.getBytes()"
                    },
                    {
                        "name": "sensitiveData.getBytes()",
                        "type": "byte[]",
                        "context": "        // Prepare data to encrypt\r\n        String sensitiveData = \"Highly confidential information\";\r\n        byte[] dataToEncrypt = sensitiveData.getBytes();\r\n\r\n        // Encrypt data\r\n",
                        "nextNode": "dataToEncrypt"
                    },
                    {
                        "name": "dataToEncrypt",
                        "type": "Dataflow from `sensitiveData` to `dataToEncrypt`\nDataflow from `getBytes(...)` to `dataToEncrypt`\nDataflow from `\"Highly confidential information\"` to `dataToEncrypt`",
                        "context": "        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, key);\r\n        byte[] encryptedData = cipher.doFinal(dataToEncrypt);\r\n\r\n        // Write encrypted data to a secure temporary file\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "sensitiveData",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "\"Highly confidential information\"",
                        "type": "String",
                        "context": "\r\n        // Prepare data to encrypt\r\n        String sensitiveData = \"Highly confidential information\";\r\n        byte[] dataToEncrypt = sensitiveData.getBytes();\r\n\r\n",
                        "nextNode": "sensitiveData"
                    },
                    {
                        "name": "sensitiveData",
                        "type": "Dataflow from `\"Highly confidential information\"` to `sensitiveData`",
                        "context": "        // Prepare data to encrypt\r\n        String sensitiveData = \"Highly confidential information\";\r\n        byte[] dataToEncrypt = sensitiveData.getBytes();\r\n\r\n        // Encrypt data\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "encryptedData",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "sensitiveData",
                        "type": "String",
                        "context": "        // Prepare data to encrypt\r\n        String sensitiveData = \"Highly confidential information\";\r\n        byte[] dataToEncrypt = sensitiveData.getBytes();\r\n\r\n        // Encrypt data\r\n",
                        "nextNode": "sensitiveData.getBytes()"
                    },
                    {
                        "name": "sensitiveData.getBytes()",
                        "type": "byte[]",
                        "context": "        // Prepare data to encrypt\r\n        String sensitiveData = \"Highly confidential information\";\r\n        byte[] dataToEncrypt = sensitiveData.getBytes();\r\n\r\n        // Encrypt data\r\n",
                        "nextNode": "dataToEncrypt"
                    },
                    {
                        "name": "dataToEncrypt",
                        "type": "byte[]",
                        "context": "        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, key);\r\n        byte[] encryptedData = cipher.doFinal(dataToEncrypt);\r\n\r\n        // Write encrypted data to a secure temporary file\r\n",
                        "nextNode": "cipher.doFinal(dataToEncrypt)"
                    },
                    {
                        "name": "cipher.doFinal(dataToEncrypt)",
                        "type": "byte[]",
                        "context": "        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, key);\r\n        byte[] encryptedData = cipher.doFinal(dataToEncrypt);\r\n\r\n        // Write encrypted data to a secure temporary file\r\n",
                        "nextNode": "encryptedData"
                    },
                    {
                        "name": "encryptedData",
                        "type": "Dataflow from `sensitiveData` to `encryptedData`\nDataflow from `dataToEncrypt` to `encryptedData`\nDataflow from `getBytes(...)` to `encryptedData`\nDataflow from `\"Highly confidential information\"` to `encryptedData`\nDataflow from `doFinal(...)` to `encryptedData`",
                        "context": "        Path tempFile = Files.createTempFile(null, \".tmp\");\r\n        try (FileOutputStream fos = new FileOutputStream(tempFile.toFile())) {\r\n            fos.write(encryptedData);\r\n        }\r\n\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "builder",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "tempFile",
                        "type": "Path",
                        "context": "\r\n        // Invoke the process with the path to the encrypted file\r\n        ProcessBuilder builder = new ProcessBuilder(\"secureProcessor\", tempFile.toString());\r\n        Process process = builder.start();\r\n        process.waitFor();\r\n",
                        "nextNode": "tempFile.toString()"
                    },
                    {
                        "name": "tempFile.toString()",
                        "type": "String",
                        "context": "\r\n        // Invoke the process with the path to the encrypted file\r\n        ProcessBuilder builder = new ProcessBuilder(\"secureProcessor\", tempFile.toString());\r\n        Process process = builder.start();\r\n        process.waitFor();\r\n",
                        "nextNode": "new ProcessBuilder(\"secureProcessor\", tempFile.toString()"
                    },
                    {
                        "name": "new ProcessBuilder(\"secureProcessor\", tempFile.toString()",
                        "type": "ProcessBuilder",
                        "context": "\r\n        // Invoke the process with the path to the encrypted file\r\n        ProcessBuilder builder = new ProcessBuilder(\"secureProcessor\", tempFile.toString());\r\n        Process process = builder.start();\r\n        process.waitFor();\r\n",
                        "nextNode": "builder"
                    },
                    {
                        "name": "builder",
                        "type": "Dataflow from `tempFile` to `builder`\nDataflow from `tempFile` to `builder`\nDataflow from `createTempFile(...)` to `builder`\nDataflow from `new ProcessBuilder(...)` to `builder`\nDataflow from `toString(...)` to `builder`\nDataflow from `null` to `builder`\nDataflow from `\".tmp\"` to `builder`\nDataflow from `\"secureProcessor\"` to `builder`",
                        "context": "        // Invoke the process with the path to the encrypted file\r\n        ProcessBuilder builder = new ProcessBuilder(\"secureProcessor\", tempFile.toString());\r\n        Process process = builder.start();\r\n        process.waitFor();\r\n\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "tempFile",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "Files.createTempFile(null, \".tmp\")",
                        "type": "Path",
                        "context": "\r\n        // Write encrypted data to a secure temporary file\r\n        Path tempFile = Files.createTempFile(null, \".tmp\");\r\n        try (FileOutputStream fos = new FileOutputStream(tempFile.toFile())) {\r\n            fos.write(encryptedData);\r\n | \r\n        // Write encrypted data to a secure temporary file\r\n        Path tempFile = Files.createTempFile(null, \".tmp\");\r\n        try (FileOutputStream fos = new FileOutputStream(tempFile.toFile())) {\r\n            fos.write(encryptedData);\r\n | \r\n        // Write encrypted data to a secure temporary file\r\n        Path tempFile = Files.createTempFile(null, \".tmp\");\r\n        try (FileOutputStream fos = new FileOutputStream(tempFile.toFile())) {\r\n            fos.write(encryptedData);\r\n",
                        "nextNode": "tempFile"
                    },
                    {
                        "name": "tempFile",
                        "type": "Path",
                        "context": "        // Write encrypted data to a secure temporary file\r\n        Path tempFile = Files.createTempFile(null, \".tmp\");\r\n        try (FileOutputStream fos = new FileOutputStream(tempFile.toFile())) {\r\n            fos.write(encryptedData);\r\n        }\r\n | \r\n        // Invoke the process with the path to the encrypted file\r\n        ProcessBuilder builder = new ProcessBuilder(\"secureProcessor\", tempFile.toString());\r\n        Process process = builder.start();\r\n        process.waitFor();\r\n |         // Write encrypted data to a secure temporary file\r\n        Path tempFile = Files.createTempFile(null, \".tmp\");\r\n        try (FileOutputStream fos = new FileOutputStream(tempFile.toFile())) {\r\n            fos.write(encryptedData);\r\n        }\r\n |         // Write encrypted data to a secure temporary file\r\n        Path tempFile = Files.createTempFile(null, \".tmp\");\r\n        try (FileOutputStream fos = new FileOutputStream(tempFile.toFile())) {\r\n            fos.write(encryptedData);\r\n        }\r\n | \r\n        // Invoke the process with the path to the encrypted file\r\n        ProcessBuilder builder = new ProcessBuilder(\"secureProcessor\", tempFile.toString());\r\n        Process process = builder.start();\r\n        process.waitFor();\r\n | \r\n        // Securely delete the temporary file after use\r\n        Files.delete(tempFile);\r\n    }\r\n}\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "fos",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "tempFile",
                        "type": "Path",
                        "context": "        // Write encrypted data to a secure temporary file\r\n        Path tempFile = Files.createTempFile(null, \".tmp\");\r\n        try (FileOutputStream fos = new FileOutputStream(tempFile.toFile())) {\r\n            fos.write(encryptedData);\r\n        }\r\n",
                        "nextNode": "tempFile.toFile()"
                    },
                    {
                        "name": "tempFile.toFile()",
                        "type": "File",
                        "context": "        // Write encrypted data to a secure temporary file\r\n        Path tempFile = Files.createTempFile(null, \".tmp\");\r\n        try (FileOutputStream fos = new FileOutputStream(tempFile.toFile())) {\r\n            fos.write(encryptedData);\r\n        }\r\n",
                        "nextNode": "new FileOutputStream(tempFile.toFile()"
                    },
                    {
                        "name": "new FileOutputStream(tempFile.toFile()",
                        "type": "FileOutputStream",
                        "context": "        // Write encrypted data to a secure temporary file\r\n        Path tempFile = Files.createTempFile(null, \".tmp\");\r\n        try (FileOutputStream fos = new FileOutputStream(tempFile.toFile())) {\r\n            fos.write(encryptedData);\r\n        }\r\n",
                        "nextNode": "fos"
                    },
                    {
                        "name": "fos",
                        "type": "Dataflow from `tempFile` to `fos`\nDataflow from `createTempFile(...)` to `fos`\nDataflow from `new FileOutputStream(...)` to `fos`\nDataflow from `toFile(...)` to `fos`\nDataflow from `null` to `fos`\nDataflow from `\".tmp\"` to `fos`",
                        "context": "        Path tempFile = Files.createTempFile(null, \".tmp\");\r\n        try (FileOutputStream fos = new FileOutputStream(tempFile.toFile())) {\r\n            fos.write(encryptedData);\r\n        }\r\n\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "keyGen",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "KeyGenerator.getInstance(\"AES\")",
                        "type": "KeyGenerator",
                        "context": "    public static void main(String[] args) throws Exception {\r\n        // Generate encryption key\r\n        KeyGenerator keyGen = KeyGenerator.getInstance(\"AES\");\r\n        keyGen.init(256); // Use 256-bit AES for encryption\r\n        SecretKey key = keyGen.generateKey();\r\n |     public static void main(String[] args) throws Exception {\r\n        // Generate encryption key\r\n        KeyGenerator keyGen = KeyGenerator.getInstance(\"AES\");\r\n        keyGen.init(256); // Use 256-bit AES for encryption\r\n        SecretKey key = keyGen.generateKey();\r\n",
                        "nextNode": "keyGen"
                    },
                    {
                        "name": "keyGen",
                        "type": "KeyGenerator",
                        "context": "        // Generate encryption key\r\n        KeyGenerator keyGen = KeyGenerator.getInstance(\"AES\");\r\n        keyGen.init(256); // Use 256-bit AES for encryption\r\n        SecretKey key = keyGen.generateKey();\r\n\r\n |         KeyGenerator keyGen = KeyGenerator.getInstance(\"AES\");\r\n        keyGen.init(256); // Use 256-bit AES for encryption\r\n        SecretKey key = keyGen.generateKey();\r\n\r\n        // Prepare data to encrypt\r\n |         // Generate encryption key\r\n        KeyGenerator keyGen = KeyGenerator.getInstance(\"AES\");\r\n        keyGen.init(256); // Use 256-bit AES for encryption\r\n        SecretKey key = keyGen.generateKey();\r\n\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "key",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "keyGen.generateKey()",
                        "type": "SecretKey",
                        "context": "        KeyGenerator keyGen = KeyGenerator.getInstance(\"AES\");\r\n        keyGen.init(256); // Use 256-bit AES for encryption\r\n        SecretKey key = keyGen.generateKey();\r\n\r\n        // Prepare data to encrypt\r\n",
                        "nextNode": "key"
                    },
                    {
                        "name": "key",
                        "type": "Dataflow from `generateKey(...)` to `key`",
                        "context": "        // Encrypt data\r\n        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, key);\r\n        byte[] encryptedData = cipher.doFinal(dataToEncrypt);\r\n\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "Highly confidential information",
                "isSensitive": "no"
            },
            {
                "name": "secureProcessor",
                "isSensitive": "no"
            },
            {
                "name": "AES",
                "isSensitive": "yes"
            },
            {
                "name": ".tmp",
                "isSensitive": "no"
            }
        ],
        "comments": [
            {
                "name": "Generate encryption key",
                "isSensitive": "no"
            },
            {
                "name": "Use 256-bit AES for encryption",
                "isSensitive": "no"
            },
            {
                "name": "Securely delete the temporary file after use",
                "isSensitive": "no"
            },
            {
                "name": "Prepare data to encrypt",
                "isSensitive": "no"
            },
            {
                "name": "Invoke the process with the path to the encrypted file",
                "isSensitive": "no"
            },
            {
                "name": "Encrypt data",
                "isSensitive": "no"
            },
            {
                "name": "Write encrypted data to a secure temporary file",
                "isSensitive": "no"
            }
        ],
        "sinks": [
            {
                "name": "generateKey",
                "isSink": "no"
            },
            {
                "name": "init",
                "isSink": "no"
            },
            {
                "name": "toFile",
                "isSink": "no"
            },
            {
                "name": "start",
                "isSink": "yes"
            },
            {
                "name": "createTempFile",
                "isSink": "no"
            },
            {
                "name": "toString",
                "isSink": "no"
            },
            {
                "name": "getInstance",
                "isSink": "no"
            },
            {
                "name": "write",
                "isSink": "yes"
            },
            {
                "name": "waitFor",
                "isSink": "no"
            },
            {
                "name": "delete",
                "isSink": "no"
            },
            {
                "name": "getBytes",
                "isSink": "no"
            },
            {
                "name": "doFinal",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "GOOD_EnvVarEncryption.java",
        "variables": [
            {
                "name": "args",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "cipher",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "Cipher.getInstance(\"AES\")",
                        "type": "Cipher",
                        "context": "        SecretKey authKey = keyGenerator.generateKey();\r\n\r\n        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, authKey);\r\n        byte[] encryptedBytes = cipher.doFinal(apiKey.getBytes()); // Corrected line\r\n |         SecretKey authKey = keyGenerator.generateKey();\r\n\r\n        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, authKey);\r\n        byte[] encryptedBytes = cipher.doFinal(apiKey.getBytes()); // Corrected line\r\n",
                        "nextNode": "cipher"
                    },
                    {
                        "name": "cipher",
                        "type": "Cipher",
                        "context": "\r\n        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, authKey);\r\n        byte[] encryptedBytes = cipher.doFinal(apiKey.getBytes()); // Corrected line\r\n\r\n |         Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, authKey);\r\n        byte[] encryptedBytes = cipher.doFinal(apiKey.getBytes()); // Corrected line\r\n\r\n        return Base64.getEncoder().encodeToString(encryptedBytes);\r\n | \r\n        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, authKey);\r\n        byte[] encryptedBytes = cipher.doFinal(apiKey.getBytes()); // Corrected line\r\n\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "authKey",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "keyGenerator.generateKey()",
                        "type": "SecretKey",
                        "context": "        KeyGenerator keyGenerator = KeyGenerator.getInstance(\"AES\");\r\n        keyGenerator.init(128); // Use AES-128 for encryption\r\n        SecretKey authKey = keyGenerator.generateKey();\r\n\r\n        Cipher cipher = Cipher.getInstance(\"AES\");\r\n",
                        "nextNode": "authKey"
                    },
                    {
                        "name": "authKey",
                        "type": "Dataflow from `generateKey(...)` to `authKey`",
                        "context": "\r\n        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, authKey);\r\n        byte[] encryptedBytes = cipher.doFinal(apiKey.getBytes()); // Corrected line\r\n\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "API_KEY",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "args[",
                        "type": "String[]",
                        "context": "\r\n    public static void main(String[] args) throws Exception {\r\n        String API_KEY = args[0];\r\n        String encryptedApiKey = encryptApiKey(API_KEY);\r\n        \r\n",
                        "nextNode": "args[0]"
                    },
                    {
                        "name": "args[0]",
                        "type": "String",
                        "context": "\r\n    public static void main(String[] args) throws Exception {\r\n        String API_KEY = args[0];\r\n        String encryptedApiKey = encryptApiKey(API_KEY);\r\n        \r\n",
                        "nextNode": "API_KEY"
                    },
                    {
                        "name": "API_KEY",
                        "type": "Dataflow from `args` to `API_KEY`",
                        "context": "    public static void main(String[] args) throws Exception {\r\n        String API_KEY = args[0];\r\n        String encryptedApiKey = encryptApiKey(API_KEY);\r\n        \r\n        try {\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "encryptedApiKey",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "args[",
                        "type": "String[]",
                        "context": "\r\n    public static void main(String[] args) throws Exception {\r\n        String API_KEY = args[0];\r\n        String encryptedApiKey = encryptApiKey(API_KEY);\r\n        \r\n",
                        "nextNode": "args[0]"
                    },
                    {
                        "name": "args[0]",
                        "type": "String",
                        "context": "\r\n    public static void main(String[] args) throws Exception {\r\n        String API_KEY = args[0];\r\n        String encryptedApiKey = encryptApiKey(API_KEY);\r\n        \r\n",
                        "nextNode": "API_KEY"
                    },
                    {
                        "name": "API_KEY",
                        "type": "String",
                        "context": "    public static void main(String[] args) throws Exception {\r\n        String API_KEY = args[0];\r\n        String encryptedApiKey = encryptApiKey(API_KEY);\r\n        \r\n        try {\r\n",
                        "nextNode": "String apiKey"
                    },
                    {
                        "name": "String apiKey",
                        "type": "String",
                        "context": "    }\r\n\r\n    private static String encryptApiKey(String apiKey) throws Exception {\r\n        KeyGenerator keyGenerator = KeyGenerator.getInstance(\"AES\");\r\n        keyGenerator.init(128); // Use AES-128 for encryption\r\n",
                        "nextNode": "apiKey"
                    },
                    {
                        "name": "apiKey",
                        "type": "String",
                        "context": "        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, authKey);\r\n        byte[] encryptedBytes = cipher.doFinal(apiKey.getBytes()); // Corrected line\r\n\r\n        return Base64.getEncoder().encodeToString(encryptedBytes);\r\n",
                        "nextNode": "apiKey.getBytes()"
                    },
                    {
                        "name": "apiKey.getBytes()",
                        "type": "byte[]",
                        "context": "        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, authKey);\r\n        byte[] encryptedBytes = cipher.doFinal(apiKey.getBytes()); // Corrected line\r\n\r\n        return Base64.getEncoder().encodeToString(encryptedBytes);\r\n",
                        "nextNode": "cipher.doFinal(apiKey.getBytes()"
                    },
                    {
                        "name": "cipher.doFinal(apiKey.getBytes()",
                        "type": "byte[]",
                        "context": "        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, authKey);\r\n        byte[] encryptedBytes = cipher.doFinal(apiKey.getBytes()); // Corrected line\r\n\r\n        return Base64.getEncoder().encodeToString(encryptedBytes);\r\n",
                        "nextNode": "encryptedBytes"
                    },
                    {
                        "name": "encryptedBytes",
                        "type": "byte[]",
                        "context": "        byte[] encryptedBytes = cipher.doFinal(apiKey.getBytes()); // Corrected line\r\n\r\n        return Base64.getEncoder().encodeToString(encryptedBytes);\r\n    }\r\n}\r\n",
                        "nextNode": "Base64.getEncoder().encodeToString(encryptedBytes)"
                    },
                    {
                        "name": "Base64.getEncoder().encodeToString(encryptedBytes)",
                        "type": "String",
                        "context": "        byte[] encryptedBytes = cipher.doFinal(apiKey.getBytes()); // Corrected line\r\n\r\n        return Base64.getEncoder().encodeToString(encryptedBytes);\r\n    }\r\n}\r\n",
                        "nextNode": "encryptApiKey(API_KEY)"
                    },
                    {
                        "name": "encryptApiKey(API_KEY)",
                        "type": "String",
                        "context": "    public static void main(String[] args) throws Exception {\r\n        String API_KEY = args[0];\r\n        String encryptedApiKey = encryptApiKey(API_KEY);\r\n        \r\n        try {\r\n",
                        "nextNode": "encryptedApiKey"
                    },
                    {
                        "name": "encryptedApiKey",
                        "type": "Dataflow from `args` to `encryptedApiKey`\nDataflow from `apiKey` to `encryptedApiKey`\nDataflow from `encryptedBytes` to `encryptedApiKey`\nDataflow from `doFinal(...)` to `encryptedApiKey`\nDataflow from `getBytes(...)` to `encryptedApiKey`\nDataflow from `encodeToString(...)` to `encryptedApiKey`\nDataflow from `encryptApiKey(...)` to `encryptedApiKey`\nDataflow from `API_KEY` to `encryptedApiKey`",
                        "context": "        try {\r\n            ProcessBuilder processBuilder = new ProcessBuilder(\"someCommand\");\r\n            processBuilder.environment().put(\"ApiKey\", encryptedApiKey);\r\n            processBuilder.start();\r\n            System.out.println(\"Process invoked with sensitive information in environment variable.\");\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "apiKey",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "args[",
                        "type": "String[]",
                        "context": "\r\n    public static void main(String[] args) throws Exception {\r\n        String API_KEY = args[0];\r\n        String encryptedApiKey = encryptApiKey(API_KEY);\r\n        \r\n",
                        "nextNode": "args[0]"
                    },
                    {
                        "name": "args[0]",
                        "type": "String",
                        "context": "\r\n    public static void main(String[] args) throws Exception {\r\n        String API_KEY = args[0];\r\n        String encryptedApiKey = encryptApiKey(API_KEY);\r\n        \r\n",
                        "nextNode": "API_KEY"
                    },
                    {
                        "name": "API_KEY",
                        "type": "String",
                        "context": "    public static void main(String[] args) throws Exception {\r\n        String API_KEY = args[0];\r\n        String encryptedApiKey = encryptApiKey(API_KEY);\r\n        \r\n        try {\r\n",
                        "nextNode": "String apiKey"
                    },
                    {
                        "name": "String apiKey",
                        "type": "String",
                        "context": "    }\r\n\r\n    private static String encryptApiKey(String apiKey) throws Exception {\r\n        KeyGenerator keyGenerator = KeyGenerator.getInstance(\"AES\");\r\n        keyGenerator.init(128); // Use AES-128 for encryption\r\n",
                        "nextNode": "apiKey"
                    },
                    {
                        "name": "apiKey",
                        "type": "Dataflow from `args` to `apiKey`\nDataflow from `API_KEY` to `apiKey`",
                        "context": "        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, authKey);\r\n        byte[] encryptedBytes = cipher.doFinal(apiKey.getBytes()); // Corrected line\r\n\r\n        return Base64.getEncoder().encodeToString(encryptedBytes);\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "e",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "processBuilder",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "new ProcessBuilder(\"someCommand\")",
                        "type": "ProcessBuilder",
                        "context": "        \r\n        try {\r\n            ProcessBuilder processBuilder = new ProcessBuilder(\"someCommand\");\r\n            processBuilder.environment().put(\"ApiKey\", encryptedApiKey);\r\n            processBuilder.start();\r\n |         \r\n        try {\r\n            ProcessBuilder processBuilder = new ProcessBuilder(\"someCommand\");\r\n            processBuilder.environment().put(\"ApiKey\", encryptedApiKey);\r\n            processBuilder.start();\r\n",
                        "nextNode": "processBuilder"
                    },
                    {
                        "name": "processBuilder",
                        "type": "Dataflow from `new ProcessBuilder(...)` to `processBuilder`\nDataflow from `\"someCommand\"` to `processBuilder`",
                        "context": "        try {\r\n            ProcessBuilder processBuilder = new ProcessBuilder(\"someCommand\");\r\n            processBuilder.environment().put(\"ApiKey\", encryptedApiKey);\r\n            processBuilder.start();\r\n            System.out.println(\"Process invoked with sensitive information in environment variable.\");\r\n |         try {\r\n            ProcessBuilder processBuilder = new ProcessBuilder(\"someCommand\");\r\n            processBuilder.environment().put(\"ApiKey\", encryptedApiKey);\r\n            processBuilder.start();\r\n            System.out.println(\"Process invoked with sensitive information in environment variable.\");\r\n |             ProcessBuilder processBuilder = new ProcessBuilder(\"someCommand\");\r\n            processBuilder.environment().put(\"ApiKey\", encryptedApiKey);\r\n            processBuilder.start();\r\n            System.out.println(\"Process invoked with sensitive information in environment variable.\");\r\n        } catch (Exception e) {\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "keyGenerator",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "KeyGenerator.getInstance(\"AES\")",
                        "type": "KeyGenerator",
                        "context": "\r\n    private static String encryptApiKey(String apiKey) throws Exception {\r\n        KeyGenerator keyGenerator = KeyGenerator.getInstance(\"AES\");\r\n        keyGenerator.init(128); // Use AES-128 for encryption\r\n        SecretKey authKey = keyGenerator.generateKey();\r\n | \r\n    private static String encryptApiKey(String apiKey) throws Exception {\r\n        KeyGenerator keyGenerator = KeyGenerator.getInstance(\"AES\");\r\n        keyGenerator.init(128); // Use AES-128 for encryption\r\n        SecretKey authKey = keyGenerator.generateKey();\r\n",
                        "nextNode": "keyGenerator"
                    },
                    {
                        "name": "keyGenerator",
                        "type": "KeyGenerator",
                        "context": "    private static String encryptApiKey(String apiKey) throws Exception {\r\n        KeyGenerator keyGenerator = KeyGenerator.getInstance(\"AES\");\r\n        keyGenerator.init(128); // Use AES-128 for encryption\r\n        SecretKey authKey = keyGenerator.generateKey();\r\n\r\n |         KeyGenerator keyGenerator = KeyGenerator.getInstance(\"AES\");\r\n        keyGenerator.init(128); // Use AES-128 for encryption\r\n        SecretKey authKey = keyGenerator.generateKey();\r\n\r\n        Cipher cipher = Cipher.getInstance(\"AES\");\r\n |     private static String encryptApiKey(String apiKey) throws Exception {\r\n        KeyGenerator keyGenerator = KeyGenerator.getInstance(\"AES\");\r\n        keyGenerator.init(128); // Use AES-128 for encryption\r\n        SecretKey authKey = keyGenerator.generateKey();\r\n\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "encryptedBytes",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "args[",
                        "type": "String[]",
                        "context": "\r\n    public static void main(String[] args) throws Exception {\r\n        String API_KEY = args[0];\r\n        String encryptedApiKey = encryptApiKey(API_KEY);\r\n        \r\n",
                        "nextNode": "args[0]"
                    },
                    {
                        "name": "args[0]",
                        "type": "String",
                        "context": "\r\n    public static void main(String[] args) throws Exception {\r\n        String API_KEY = args[0];\r\n        String encryptedApiKey = encryptApiKey(API_KEY);\r\n        \r\n",
                        "nextNode": "API_KEY"
                    },
                    {
                        "name": "API_KEY",
                        "type": "String",
                        "context": "    public static void main(String[] args) throws Exception {\r\n        String API_KEY = args[0];\r\n        String encryptedApiKey = encryptApiKey(API_KEY);\r\n        \r\n        try {\r\n",
                        "nextNode": "String apiKey"
                    },
                    {
                        "name": "String apiKey",
                        "type": "String",
                        "context": "    }\r\n\r\n    private static String encryptApiKey(String apiKey) throws Exception {\r\n        KeyGenerator keyGenerator = KeyGenerator.getInstance(\"AES\");\r\n        keyGenerator.init(128); // Use AES-128 for encryption\r\n",
                        "nextNode": "apiKey"
                    },
                    {
                        "name": "apiKey",
                        "type": "String",
                        "context": "        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, authKey);\r\n        byte[] encryptedBytes = cipher.doFinal(apiKey.getBytes()); // Corrected line\r\n\r\n        return Base64.getEncoder().encodeToString(encryptedBytes);\r\n",
                        "nextNode": "apiKey.getBytes()"
                    },
                    {
                        "name": "apiKey.getBytes()",
                        "type": "byte[]",
                        "context": "        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, authKey);\r\n        byte[] encryptedBytes = cipher.doFinal(apiKey.getBytes()); // Corrected line\r\n\r\n        return Base64.getEncoder().encodeToString(encryptedBytes);\r\n",
                        "nextNode": "cipher.doFinal(apiKey.getBytes()"
                    },
                    {
                        "name": "cipher.doFinal(apiKey.getBytes()",
                        "type": "byte[]",
                        "context": "        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, authKey);\r\n        byte[] encryptedBytes = cipher.doFinal(apiKey.getBytes()); // Corrected line\r\n\r\n        return Base64.getEncoder().encodeToString(encryptedBytes);\r\n",
                        "nextNode": "encryptedBytes"
                    },
                    {
                        "name": "encryptedBytes",
                        "type": "Dataflow from `args` to `encryptedBytes`\nDataflow from `apiKey` to `encryptedBytes`\nDataflow from `doFinal(...)` to `encryptedBytes`\nDataflow from `getBytes(...)` to `encryptedBytes`\nDataflow from `API_KEY` to `encryptedBytes`",
                        "context": "        byte[] encryptedBytes = cipher.doFinal(apiKey.getBytes()); // Corrected line\r\n\r\n        return Base64.getEncoder().encodeToString(encryptedBytes);\r\n    }\r\n}\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "An error occurred while invoking the process.",
                "isSensitive": "no"
            },
            {
                "name": "ApiKey",
                "isSensitive": "no"
            },
            {
                "name": "someCommand",
                "isSensitive": "no"
            },
            {
                "name": "Process invoked with sensitive information in environment variable.",
                "isSensitive": "no"
            },
            {
                "name": "AES",
                "isSensitive": "yes"
            }
        ],
        "comments": [
            {
                "name": "Use AES-128 for encryption",
                "isSensitive": "no"
            },
            {
                "name": "Corrected line",
                "isSensitive": "no"
            }
        ],
        "sinks": [
            {
                "name": "init",
                "isSink": "no"
            },
            {
                "name": "printStackTrace",
                "isSink": "yes"
            },
            {
                "name": "start",
                "isSink": "yes"
            },
            {
                "name": "encodeToString",
                "isSink": "no"
            },
            {
                "name": "encryptApiKey",
                "isSink": "no"
            },
            {
                "name": "put",
                "isSink": "yes"
            },
            {
                "name": "getBytes",
                "isSink": "no"
            },
            {
                "name": "doFinal",
                "isSink": "no"
            },
            {
                "name": "generateKey",
                "isSink": "no"
            },
            {
                "name": "println",
                "isSink": "yes"
            },
            {
                "name": "environment",
                "isSink": "no"
            },
            {
                "name": "getEncoder",
                "isSink": "no"
            },
            {
                "name": "getInstance",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "GOOD_NetworkConfigSecureHandling.java",
        "variables": [
            {
                "name": "args",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "process",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "builder.start()",
                        "type": "Process",
                        "context": "            ProcessBuilder builder = new ProcessBuilder(\"vpnsetup\", \"--username\", \"admin\", \"--password-env-var\");\r\n            builder.environment().put(\"PASSWORD_ENV_VAR\", encryptedVpnPassword);\r\n            Process process = builder.start();\r\n\r\n            // Optionally, capture the output to check for errors or confirmation\r\n |             ProcessBuilder builder = new ProcessBuilder(\"vpnsetup\", \"--username\", \"admin\", \"--password-env-var\");\r\n            builder.environment().put(\"PASSWORD_ENV_VAR\", encryptedVpnPassword);\r\n            Process process = builder.start();\r\n\r\n            // Optionally, capture the output to check for errors or confirmation\r\n",
                        "nextNode": "process"
                    },
                    {
                        "name": "process",
                        "type": "Dataflow from `start(...)` to `process`",
                        "context": "\r\n            // Optionally, capture the output to check for errors or confirmation\r\n            BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));\r\n            String line;\r\n            while ((line = reader.readLine()) != null) {\r\n | \r\n            // Optionally, capture the output to check for errors or confirmation\r\n            BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));\r\n            String line;\r\n            while ((line = reader.readLine()) != null) {\r\n |             }\r\n\r\n            process.waitFor();\r\n            System.out.println(\"VPN configuration completed successfully.\");\r\n        } catch (Exception e) {\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "password",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "args[",
                        "type": "String[]",
                        "context": "    public static void main(String[] args) {\r\n        try {\r\n            String vpnPassword = args[0];\r\n            String encryptedVpnPassword = encryptPassword(vpnPassword);\r\n\r\n",
                        "nextNode": "args[0]"
                    },
                    {
                        "name": "args[0]",
                        "type": "String",
                        "context": "    public static void main(String[] args) {\r\n        try {\r\n            String vpnPassword = args[0];\r\n            String encryptedVpnPassword = encryptPassword(vpnPassword);\r\n\r\n",
                        "nextNode": "vpnPassword"
                    },
                    {
                        "name": "vpnPassword",
                        "type": "String",
                        "context": "        try {\r\n            String vpnPassword = args[0];\r\n            String encryptedVpnPassword = encryptPassword(vpnPassword);\r\n\r\n            ProcessBuilder builder = new ProcessBuilder(\"vpnsetup\", \"--username\", \"admin\", \"--password-env-var\");\r\n",
                        "nextNode": "String password"
                    },
                    {
                        "name": "String password",
                        "type": "String",
                        "context": "    }\r\n\r\n    private static String encryptPassword(String password) {\r\n        return new StringBuilder(password).reverse().toString();  // Simplified example of \"encryption\"\r\n    }\r\n",
                        "nextNode": "password"
                    },
                    {
                        "name": "password",
                        "type": "Dataflow from `args` to `password`\nDataflow from `vpnPassword` to `password`",
                        "context": "\r\n    private static String encryptPassword(String password) {\r\n        return new StringBuilder(password).reverse().toString();  // Simplified example of \"encryption\"\r\n    }\r\n}\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "e",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "reader",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "new BufferedReader(new InputStreamReader(process.getInputStream()",
                        "type": "BufferedReader",
                        "context": "\r\n            // Optionally, capture the output to check for errors or confirmation\r\n            BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));\r\n            String line;\r\n            while ((line = reader.readLine()) != null) {\r\n",
                        "nextNode": "reader"
                    },
                    {
                        "name": "reader",
                        "type": "Dataflow from `new BufferedReader(...)` to `reader`\nDataflow from `new InputStreamReader(...)` to `reader`\nDataflow from `getInputStream(...)` to `reader`",
                        "context": "            BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));\r\n            String line;\r\n            while ((line = reader.readLine()) != null) {\r\n                System.out.println(line);\r\n            }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "line",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "reader",
                        "type": "BufferedReader",
                        "context": "            BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));\r\n            String line;\r\n            while ((line = reader.readLine()) != null) {\r\n                System.out.println(line);\r\n            }\r\n",
                        "nextNode": "reader.readLine()"
                    },
                    {
                        "name": "reader.readLine()",
                        "type": "String",
                        "context": "            BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));\r\n            String line;\r\n            while ((line = reader.readLine()) != null) {\r\n                System.out.println(line);\r\n            }\r\n",
                        "nextNode": "line"
                    },
                    {
                        "name": "line",
                        "type": "Dataflow from `reader` to `line`\nDataflow from `readLine(...)` to `line`\nDataflow from `new BufferedReader(...)` to `line`\nDataflow from `new InputStreamReader(...)` to `line`\nDataflow from `getInputStream(...)` to `line`",
                        "context": "            String line;\r\n            while ((line = reader.readLine()) != null) {\r\n                System.out.println(line);\r\n            }\r\n\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "vpnPassword",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "args[",
                        "type": "String[]",
                        "context": "    public static void main(String[] args) {\r\n        try {\r\n            String vpnPassword = args[0];\r\n            String encryptedVpnPassword = encryptPassword(vpnPassword);\r\n\r\n",
                        "nextNode": "args[0]"
                    },
                    {
                        "name": "args[0]",
                        "type": "String",
                        "context": "    public static void main(String[] args) {\r\n        try {\r\n            String vpnPassword = args[0];\r\n            String encryptedVpnPassword = encryptPassword(vpnPassword);\r\n\r\n",
                        "nextNode": "vpnPassword"
                    },
                    {
                        "name": "vpnPassword",
                        "type": "Dataflow from `args` to `vpnPassword`",
                        "context": "        try {\r\n            String vpnPassword = args[0];\r\n            String encryptedVpnPassword = encryptPassword(vpnPassword);\r\n\r\n            ProcessBuilder builder = new ProcessBuilder(\"vpnsetup\", \"--username\", \"admin\", \"--password-env-var\");\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "builder",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "new ProcessBuilder(\"vpnsetup\", \"--username\", \"admin\", \"--password-env-var\")",
                        "type": "ProcessBuilder",
                        "context": "            String encryptedVpnPassword = encryptPassword(vpnPassword);\r\n\r\n            ProcessBuilder builder = new ProcessBuilder(\"vpnsetup\", \"--username\", \"admin\", \"--password-env-var\");\r\n            builder.environment().put(\"PASSWORD_ENV_VAR\", encryptedVpnPassword);\r\n            Process process = builder.start();\r\n |             String encryptedVpnPassword = encryptPassword(vpnPassword);\r\n\r\n            ProcessBuilder builder = new ProcessBuilder(\"vpnsetup\", \"--username\", \"admin\", \"--password-env-var\");\r\n            builder.environment().put(\"PASSWORD_ENV_VAR\", encryptedVpnPassword);\r\n            Process process = builder.start();\r\n",
                        "nextNode": "builder"
                    },
                    {
                        "name": "builder",
                        "type": "ProcessBuilder",
                        "context": "\r\n            ProcessBuilder builder = new ProcessBuilder(\"vpnsetup\", \"--username\", \"admin\", \"--password-env-var\");\r\n            builder.environment().put(\"PASSWORD_ENV_VAR\", encryptedVpnPassword);\r\n            Process process = builder.start();\r\n\r\n |             ProcessBuilder builder = new ProcessBuilder(\"vpnsetup\", \"--username\", \"admin\", \"--password-env-var\");\r\n            builder.environment().put(\"PASSWORD_ENV_VAR\", encryptedVpnPassword);\r\n            Process process = builder.start();\r\n\r\n            // Optionally, capture the output to check for errors or confirmation\r\n | \r\n            ProcessBuilder builder = new ProcessBuilder(\"vpnsetup\", \"--username\", \"admin\", \"--password-env-var\");\r\n            builder.environment().put(\"PASSWORD_ENV_VAR\", encryptedVpnPassword);\r\n            Process process = builder.start();\r\n\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "encryptedVpnPassword",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "args[",
                        "type": "String[]",
                        "context": "    public static void main(String[] args) {\r\n        try {\r\n            String vpnPassword = args[0];\r\n            String encryptedVpnPassword = encryptPassword(vpnPassword);\r\n\r\n",
                        "nextNode": "args[0]"
                    },
                    {
                        "name": "args[0]",
                        "type": "String",
                        "context": "    public static void main(String[] args) {\r\n        try {\r\n            String vpnPassword = args[0];\r\n            String encryptedVpnPassword = encryptPassword(vpnPassword);\r\n\r\n",
                        "nextNode": "vpnPassword"
                    },
                    {
                        "name": "vpnPassword",
                        "type": "String",
                        "context": "        try {\r\n            String vpnPassword = args[0];\r\n            String encryptedVpnPassword = encryptPassword(vpnPassword);\r\n\r\n            ProcessBuilder builder = new ProcessBuilder(\"vpnsetup\", \"--username\", \"admin\", \"--password-env-var\");\r\n",
                        "nextNode": "String password"
                    },
                    {
                        "name": "String password",
                        "type": "String",
                        "context": "    }\r\n\r\n    private static String encryptPassword(String password) {\r\n        return new StringBuilder(password).reverse().toString();  // Simplified example of \"encryption\"\r\n    }\r\n",
                        "nextNode": "password"
                    },
                    {
                        "name": "password",
                        "type": "String",
                        "context": "\r\n    private static String encryptPassword(String password) {\r\n        return new StringBuilder(password).reverse().toString();  // Simplified example of \"encryption\"\r\n    }\r\n}\r\n",
                        "nextNode": "new StringBuilder(password)"
                    },
                    {
                        "name": "new StringBuilder(password)",
                        "type": "StringBuilder",
                        "context": "\r\n    private static String encryptPassword(String password) {\r\n        return new StringBuilder(password).reverse().toString();  // Simplified example of \"encryption\"\r\n    }\r\n}\r\n",
                        "nextNode": "new StringBuilder(password).reverse()"
                    },
                    {
                        "name": "new StringBuilder(password).reverse()",
                        "type": "StringBuilder",
                        "context": "\r\n    private static String encryptPassword(String password) {\r\n        return new StringBuilder(password).reverse().toString();  // Simplified example of \"encryption\"\r\n    }\r\n}\r\n",
                        "nextNode": "new StringBuilder(password).reverse().toString()"
                    },
                    {
                        "name": "new StringBuilder(password).reverse().toString()",
                        "type": "String",
                        "context": "\r\n    private static String encryptPassword(String password) {\r\n        return new StringBuilder(password).reverse().toString();  // Simplified example of \"encryption\"\r\n    }\r\n}\r\n",
                        "nextNode": "encryptPassword(vpnPassword)"
                    },
                    {
                        "name": "encryptPassword(vpnPassword)",
                        "type": "String",
                        "context": "        try {\r\n            String vpnPassword = args[0];\r\n            String encryptedVpnPassword = encryptPassword(vpnPassword);\r\n\r\n            ProcessBuilder builder = new ProcessBuilder(\"vpnsetup\", \"--username\", \"admin\", \"--password-env-var\");\r\n",
                        "nextNode": "encryptedVpnPassword"
                    },
                    {
                        "name": "encryptedVpnPassword",
                        "type": "Dataflow from `args` to `encryptedVpnPassword`\nDataflow from `password` to `encryptedVpnPassword`\nDataflow from `toString(...)` to `encryptedVpnPassword`\nDataflow from `reverse(...)` to `encryptedVpnPassword`\nDataflow from `new StringBuilder(...)` to `encryptedVpnPassword`\nDataflow from `encryptPassword(...)` to `encryptedVpnPassword`\nDataflow from `vpnPassword` to `encryptedVpnPassword`",
                        "context": "\r\n            ProcessBuilder builder = new ProcessBuilder(\"vpnsetup\", \"--username\", \"admin\", \"--password-env-var\");\r\n            builder.environment().put(\"PASSWORD_ENV_VAR\", encryptedVpnPassword);\r\n            Process process = builder.start();\r\n\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "--password-env-var",
                "isSensitive": "no"
            },
            {
                "name": "Failed to configure VPN securely.",
                "isSensitive": "no"
            },
            {
                "name": "vpnsetup",
                "isSensitive": "yes"
            },
            {
                "name": "PASSWORD_ENV_VAR",
                "isSensitive": "no"
            },
            {
                "name": "admin",
                "isSensitive": "yes"
            },
            {
                "name": "VPN configuration completed successfully.",
                "isSensitive": "no"
            },
            {
                "name": "--username",
                "isSensitive": "no"
            }
        ],
        "comments": [
            {
                "name": "Simplified example of \"encryption\"",
                "isSensitive": "no"
            },
            {
                "name": "Optionally, capture the output to check for errors or confirmation",
                "isSensitive": "no"
            }
        ],
        "sinks": [
            {
                "name": "println",
                "isSink": "yes"
            },
            {
                "name": "environment",
                "isSink": "no"
            },
            {
                "name": "printStackTrace",
                "isSink": "yes"
            },
            {
                "name": "encryptPassword",
                "isSink": "no"
            },
            {
                "name": "start",
                "isSink": "yes"
            },
            {
                "name": "toString",
                "isSink": "no"
            },
            {
                "name": "readLine",
                "isSink": "no"
            },
            {
                "name": "reverse",
                "isSink": "no"
            },
            {
                "name": "getInputStream",
                "isSink": "no"
            },
            {
                "name": "waitFor",
                "isSink": "no"
            },
            {
                "name": "put",
                "isSink": "yes"
            }
        ]
    },
    {
        "fileName": "GOOD_nonSensitiveInformationInShellCommand.java",
        "variables": [
            {
                "name": "args",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "process",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "builder.start()",
                        "type": "Process",
                        "context": "\r\n            ProcessBuilder builder = new ProcessBuilder(\"codeql\", command);\r\n            Process process = builder.start();\r\n            process.waitFor();  // Wait for the process to complete\r\n            System.out.println(\"Cloud deployment initiated successfully.\");\r\n",
                        "nextNode": "process"
                    },
                    {
                        "name": "process",
                        "type": "Dataflow from `start(...)` to `process`",
                        "context": "            ProcessBuilder builder = new ProcessBuilder(\"codeql\", command);\r\n            Process process = builder.start();\r\n            process.waitFor();  // Wait for the process to complete\r\n            System.out.println(\"Cloud deployment initiated successfully.\");\r\n        } catch (Exception e) {\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "e",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "builder",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "command",
                        "type": "String",
                        "context": "            String command = \"analyze --no-sarif --format=csv --output=results.csv\";\r\n\r\n            ProcessBuilder builder = new ProcessBuilder(\"codeql\", command);\r\n            Process process = builder.start();\r\n            process.waitFor();  // Wait for the process to complete\r\n",
                        "nextNode": "new ProcessBuilder(\"codeql\", command)"
                    },
                    {
                        "name": "new ProcessBuilder(\"codeql\", command)",
                        "type": "ProcessBuilder",
                        "context": "            String command = \"analyze --no-sarif --format=csv --output=results.csv\";\r\n\r\n            ProcessBuilder builder = new ProcessBuilder(\"codeql\", command);\r\n            Process process = builder.start();\r\n            process.waitFor();  // Wait for the process to complete\r\n",
                        "nextNode": "builder"
                    },
                    {
                        "name": "builder",
                        "type": "Dataflow from `command` to `builder`\nDataflow from `\"analyze --no-sarif --format=csv --output=results.csv\"` to `builder`\nDataflow from `new ProcessBuilder(...)` to `builder`\nDataflow from `\"codeql\"` to `builder`",
                        "context": "\r\n            ProcessBuilder builder = new ProcessBuilder(\"codeql\", command);\r\n            Process process = builder.start();\r\n            process.waitFor();  // Wait for the process to complete\r\n            System.out.println(\"Cloud deployment initiated successfully.\");\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "command",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "\"analyze --no-sarif --format=csv --output=results.csv\"",
                        "type": "String",
                        "context": "    public static void main(String[] args) {\r\n        try {\r\n            String command = \"analyze --no-sarif --format=csv --output=results.csv\";\r\n\r\n            ProcessBuilder builder = new ProcessBuilder(\"codeql\", command);\r\n",
                        "nextNode": "command"
                    },
                    {
                        "name": "command",
                        "type": "Dataflow from `\"analyze --no-sarif --format=csv --output=results.csv\"` to `command`",
                        "context": "            String command = \"analyze --no-sarif --format=csv --output=results.csv\";\r\n\r\n            ProcessBuilder builder = new ProcessBuilder(\"codeql\", command);\r\n            Process process = builder.start();\r\n            process.waitFor();  // Wait for the process to complete\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "codeql",
                "isSensitive": "no"
            },
            {
                "name": "analyze --no-sarif --format=csv --output=results.csv",
                "isSensitive": "no"
            },
            {
                "name": "Cloud deployment initiated successfully.",
                "isSensitive": "no"
            }
        ],
        "comments": [
            {
                "name": "Wait for the process to complete",
                "isSensitive": "no"
            }
        ],
        "sinks": [
            {
                "name": "println",
                "isSink": "yes"
            },
            {
                "name": "printStackTrace",
                "isSink": "yes"
            },
            {
                "name": "start",
                "isSink": "yes"
            },
            {
                "name": "waitFor",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "GOOD_PasswordSecureCommands.java",
        "variables": [
            {
                "name": "args",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "conn",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "url.openConnection()",
                        "type": "URLConnection",
                        "context": "            \r\n            URL url = new URL(\"http://api.companynetwork.com/private/data?apikey=\" + authToken);\r\n            HttpURLConnection conn = (HttpURLConnection) url.openConnection();\r\n            conn.setRequestMethod(\"GET\");\r\n            conn.setRequestProperty(\"Authorization\", \"Basic \" + authToken);\r\n |             \r\n            URL url = new URL(\"http://api.companynetwork.com/private/data?apikey=\" + authToken);\r\n            HttpURLConnection conn = (HttpURLConnection) url.openConnection();\r\n            conn.setRequestMethod(\"GET\");\r\n            conn.setRequestProperty(\"Authorization\", \"Basic \" + authToken);\r\n |             \r\n            URL url = new URL(\"http://api.companynetwork.com/private/data?apikey=\" + authToken);\r\n            HttpURLConnection conn = (HttpURLConnection) url.openConnection();\r\n            conn.setRequestMethod(\"GET\");\r\n            conn.setRequestProperty(\"Authorization\", \"Basic \" + authToken);\r\n |             \r\n            URL url = new URL(\"http://api.companynetwork.com/private/data?apikey=\" + authToken);\r\n            HttpURLConnection conn = (HttpURLConnection) url.openConnection();\r\n            conn.setRequestMethod(\"GET\");\r\n            conn.setRequestProperty(\"Authorization\", \"Basic \" + authToken);\r\n |             \r\n            URL url = new URL(\"http://api.companynetwork.com/private/data?apikey=\" + authToken);\r\n            HttpURLConnection conn = (HttpURLConnection) url.openConnection();\r\n            conn.setRequestMethod(\"GET\");\r\n            conn.setRequestProperty(\"Authorization\", \"Basic \" + authToken);\r\n",
                        "nextNode": "(HttpURLConnection) url.openConnection()"
                    },
                    {
                        "name": "(HttpURLConnection) url.openConnection()",
                        "type": "HttpURLConnection",
                        "context": "            \r\n            URL url = new URL(\"http://api.companynetwork.com/private/data?apikey=\" + authToken);\r\n            HttpURLConnection conn = (HttpURLConnection) url.openConnection();\r\n            conn.setRequestMethod(\"GET\");\r\n            conn.setRequestProperty(\"Authorization\", \"Basic \" + authToken);\r\n |             \r\n            URL url = new URL(\"http://api.companynetwork.com/private/data?apikey=\" + authToken);\r\n            HttpURLConnection conn = (HttpURLConnection) url.openConnection();\r\n            conn.setRequestMethod(\"GET\");\r\n            conn.setRequestProperty(\"Authorization\", \"Basic \" + authToken);\r\n |             \r\n            URL url = new URL(\"http://api.companynetwork.com/private/data?apikey=\" + authToken);\r\n            HttpURLConnection conn = (HttpURLConnection) url.openConnection();\r\n            conn.setRequestMethod(\"GET\");\r\n            conn.setRequestProperty(\"Authorization\", \"Basic \" + authToken);\r\n |             \r\n            URL url = new URL(\"http://api.companynetwork.com/private/data?apikey=\" + authToken);\r\n            HttpURLConnection conn = (HttpURLConnection) url.openConnection();\r\n            conn.setRequestMethod(\"GET\");\r\n            conn.setRequestProperty(\"Authorization\", \"Basic \" + authToken);\r\n |             \r\n            URL url = new URL(\"http://api.companynetwork.com/private/data?apikey=\" + authToken);\r\n            HttpURLConnection conn = (HttpURLConnection) url.openConnection();\r\n            conn.setRequestMethod(\"GET\");\r\n            conn.setRequestProperty(\"Authorization\", \"Basic \" + authToken);\r\n",
                        "nextNode": "conn"
                    },
                    {
                        "name": "conn",
                        "type": "HttpURLConnection",
                        "context": "            URL url = new URL(\"http://api.companynetwork.com/private/data?apikey=\" + authToken);\r\n            HttpURLConnection conn = (HttpURLConnection) url.openConnection();\r\n            conn.setRequestMethod(\"GET\");\r\n            conn.setRequestProperty(\"Authorization\", \"Basic \" + authToken);\r\n            conn.connect();\r\n |             HttpURLConnection conn = (HttpURLConnection) url.openConnection();\r\n            conn.setRequestMethod(\"GET\");\r\n            conn.setRequestProperty(\"Authorization\", \"Basic \" + authToken);\r\n            conn.connect();\r\n\r\n |             conn.setRequestMethod(\"GET\");\r\n            conn.setRequestProperty(\"Authorization\", \"Basic \" + authToken);\r\n            conn.connect();\r\n\r\n            int responseCode = conn.getResponseCode();\r\n |             conn.connect();\r\n\r\n            int responseCode = conn.getResponseCode();\r\n            System.out.println(\"Response Code: \" + responseCode);\r\n            // Handle the response appropriately\r\n |             URL url = new URL(\"http://api.companynetwork.com/private/data?apikey=\" + authToken);\r\n            HttpURLConnection conn = (HttpURLConnection) url.openConnection();\r\n            conn.setRequestMethod(\"GET\");\r\n            conn.setRequestProperty(\"Authorization\", \"Basic \" + authToken);\r\n            conn.connect();\r\n |             URL url = new URL(\"http://api.companynetwork.com/private/data?apikey=\" + authToken);\r\n            HttpURLConnection conn = (HttpURLConnection) url.openConnection();\r\n            conn.setRequestMethod(\"GET\");\r\n            conn.setRequestProperty(\"Authorization\", \"Basic \" + authToken);\r\n            conn.connect();\r\n |             HttpURLConnection conn = (HttpURLConnection) url.openConnection();\r\n            conn.setRequestMethod(\"GET\");\r\n            conn.setRequestProperty(\"Authorization\", \"Basic \" + authToken);\r\n            conn.connect();\r\n\r\n |             URL url = new URL(\"http://api.companynetwork.com/private/data?apikey=\" + authToken);\r\n            HttpURLConnection conn = (HttpURLConnection) url.openConnection();\r\n            conn.setRequestMethod(\"GET\");\r\n            conn.setRequestProperty(\"Authorization\", \"Basic \" + authToken);\r\n            conn.connect();\r\n |             HttpURLConnection conn = (HttpURLConnection) url.openConnection();\r\n            conn.setRequestMethod(\"GET\");\r\n            conn.setRequestProperty(\"Authorization\", \"Basic \" + authToken);\r\n            conn.connect();\r\n\r\n |             conn.setRequestMethod(\"GET\");\r\n            conn.setRequestProperty(\"Authorization\", \"Basic \" + authToken);\r\n            conn.connect();\r\n\r\n            int responseCode = conn.getResponseCode();\r\n |             URL url = new URL(\"http://api.companynetwork.com/private/data?apikey=\" + authToken);\r\n            HttpURLConnection conn = (HttpURLConnection) url.openConnection();\r\n            conn.setRequestMethod(\"GET\");\r\n            conn.setRequestProperty(\"Authorization\", \"Basic \" + authToken);\r\n            conn.connect();\r\n |             HttpURLConnection conn = (HttpURLConnection) url.openConnection();\r\n            conn.setRequestMethod(\"GET\");\r\n            conn.setRequestProperty(\"Authorization\", \"Basic \" + authToken);\r\n            conn.connect();\r\n\r\n |             conn.setRequestMethod(\"GET\");\r\n            conn.setRequestProperty(\"Authorization\", \"Basic \" + authToken);\r\n            conn.connect();\r\n\r\n            int responseCode = conn.getResponseCode();\r\n |             conn.connect();\r\n\r\n            int responseCode = conn.getResponseCode();\r\n            System.out.println(\"Response Code: \" + responseCode);\r\n            // Handle the response appropriately\r\n |             // Handle the response appropriately\r\n\r\n            conn.disconnect();\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "password",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "\"RadiantAurora2021\"",
                        "type": "String",
                        "context": "        // Simulate retrieving an encrypted token and decrypting it\r\n        String username = \"admin\";\r\n        String password = \"RadiantAurora2021\"; \r\n        String authString = username + \":\" + password;\r\n        byte[] authEncBytes = Base64.getEncoder().encode(authString.getBytes());\r\n",
                        "nextNode": "password"
                    },
                    {
                        "name": "password",
                        "type": "Dataflow from `\"RadiantAurora2021\"` to `password`",
                        "context": "        String username = \"admin\";\r\n        String password = \"RadiantAurora2021\"; \r\n        String authString = username + \":\" + password;\r\n        byte[] authEncBytes = Base64.getEncoder().encode(authString.getBytes());\r\n        return new String(authEncBytes);\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "e",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "authToken",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "password",
                        "type": "String",
                        "context": "        String username = \"admin\";\r\n        String password = \"RadiantAurora2021\"; \r\n        String authString = username + \":\" + password;\r\n        byte[] authEncBytes = Base64.getEncoder().encode(authString.getBytes());\r\n        return new String(authEncBytes);\r\n |         String username = \"admin\";\r\n        String password = \"RadiantAurora2021\"; \r\n        String authString = username + \":\" + password;\r\n        byte[] authEncBytes = Base64.getEncoder().encode(authString.getBytes());\r\n        return new String(authEncBytes);\r\n",
                        "nextNode": "username + \":\" + password"
                    },
                    {
                        "name": "username + \":\" + password",
                        "type": "String",
                        "context": "        String username = \"admin\";\r\n        String password = \"RadiantAurora2021\"; \r\n        String authString = username + \":\" + password;\r\n        byte[] authEncBytes = Base64.getEncoder().encode(authString.getBytes());\r\n        return new String(authEncBytes);\r\n |         String username = \"admin\";\r\n        String password = \"RadiantAurora2021\"; \r\n        String authString = username + \":\" + password;\r\n        byte[] authEncBytes = Base64.getEncoder().encode(authString.getBytes());\r\n        return new String(authEncBytes);\r\n",
                        "nextNode": "authString"
                    },
                    {
                        "name": "authString",
                        "type": "String",
                        "context": "        String password = \"RadiantAurora2021\"; \r\n        String authString = username + \":\" + password;\r\n        byte[] authEncBytes = Base64.getEncoder().encode(authString.getBytes());\r\n        return new String(authEncBytes);\r\n    }\r\n |         String password = \"RadiantAurora2021\"; \r\n        String authString = username + \":\" + password;\r\n        byte[] authEncBytes = Base64.getEncoder().encode(authString.getBytes());\r\n        return new String(authEncBytes);\r\n    }\r\n",
                        "nextNode": "authString.getBytes()"
                    },
                    {
                        "name": "authString.getBytes()",
                        "type": "byte[]",
                        "context": "        String password = \"RadiantAurora2021\"; \r\n        String authString = username + \":\" + password;\r\n        byte[] authEncBytes = Base64.getEncoder().encode(authString.getBytes());\r\n        return new String(authEncBytes);\r\n    }\r\n |         String password = \"RadiantAurora2021\"; \r\n        String authString = username + \":\" + password;\r\n        byte[] authEncBytes = Base64.getEncoder().encode(authString.getBytes());\r\n        return new String(authEncBytes);\r\n    }\r\n",
                        "nextNode": "Base64.getEncoder().encode(authString.getBytes()"
                    },
                    {
                        "name": "Base64.getEncoder().encode(authString.getBytes()",
                        "type": "byte[]",
                        "context": "        String password = \"RadiantAurora2021\"; \r\n        String authString = username + \":\" + password;\r\n        byte[] authEncBytes = Base64.getEncoder().encode(authString.getBytes());\r\n        return new String(authEncBytes);\r\n    }\r\n |         String password = \"RadiantAurora2021\"; \r\n        String authString = username + \":\" + password;\r\n        byte[] authEncBytes = Base64.getEncoder().encode(authString.getBytes());\r\n        return new String(authEncBytes);\r\n    }\r\n",
                        "nextNode": "authEncBytes"
                    },
                    {
                        "name": "authEncBytes",
                        "type": "byte[]",
                        "context": "        String authString = username + \":\" + password;\r\n        byte[] authEncBytes = Base64.getEncoder().encode(authString.getBytes());\r\n        return new String(authEncBytes);\r\n    }\r\n}\r\n |         String authString = username + \":\" + password;\r\n        byte[] authEncBytes = Base64.getEncoder().encode(authString.getBytes());\r\n        return new String(authEncBytes);\r\n    }\r\n}\r\n",
                        "nextNode": "new String(authEncBytes)"
                    },
                    {
                        "name": "new String(authEncBytes)",
                        "type": "String",
                        "context": "        String authString = username + \":\" + password;\r\n        byte[] authEncBytes = Base64.getEncoder().encode(authString.getBytes());\r\n        return new String(authEncBytes);\r\n    }\r\n}\r\n |         String authString = username + \":\" + password;\r\n        byte[] authEncBytes = Base64.getEncoder().encode(authString.getBytes());\r\n        return new String(authEncBytes);\r\n    }\r\n}\r\n",
                        "nextNode": "getEncryptedAuthToken()"
                    },
                    {
                        "name": "getEncryptedAuthToken()",
                        "type": "String",
                        "context": "    public static void main(String[] args) {\r\n        try {\r\n            String authToken = getEncryptedAuthToken();\r\n            \r\n            URL url = new URL(\"http://api.companynetwork.com/private/data?apikey=\" + authToken);\r\n |     public static void main(String[] args) {\r\n        try {\r\n            String authToken = getEncryptedAuthToken();\r\n            \r\n            URL url = new URL(\"http://api.companynetwork.com/private/data?apikey=\" + authToken);\r\n",
                        "nextNode": "authToken"
                    },
                    {
                        "name": "authToken",
                        "type": "Dataflow from `password` to `authToken`\nDataflow from `username` to `authToken`\nDataflow from `authString` to `authToken`\nDataflow from `authEncBytes` to `authToken`\nDataflow from `getBytes(...)` to `authToken`\nDataflow from `encode(...)` to `authToken`\nDataflow from `\"admin\"` to `authToken`\nDataflow from `\"RadiantAurora2021\"` to `authToken`\nDataflow from `\":\"` to `authToken`\nDataflow from `getEncryptedAuthToken(...)` to `authToken`\nDataflow from `new String(...)` to `authToken`",
                        "context": "            String authToken = getEncryptedAuthToken();\r\n            \r\n            URL url = new URL(\"http://api.companynetwork.com/private/data?apikey=\" + authToken);\r\n            HttpURLConnection conn = (HttpURLConnection) url.openConnection();\r\n            conn.setRequestMethod(\"GET\");\r\n |             String authToken = getEncryptedAuthToken();\r\n            \r\n            URL url = new URL(\"http://api.companynetwork.com/private/data?apikey=\" + authToken);\r\n            HttpURLConnection conn = (HttpURLConnection) url.openConnection();\r\n            conn.setRequestMethod(\"GET\");\r\n |             HttpURLConnection conn = (HttpURLConnection) url.openConnection();\r\n            conn.setRequestMethod(\"GET\");\r\n            conn.setRequestProperty(\"Authorization\", \"Basic \" + authToken);\r\n            conn.connect();\r\n\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "authEncBytes",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "password",
                        "type": "String",
                        "context": "        String username = \"admin\";\r\n        String password = \"RadiantAurora2021\"; \r\n        String authString = username + \":\" + password;\r\n        byte[] authEncBytes = Base64.getEncoder().encode(authString.getBytes());\r\n        return new String(authEncBytes);\r\n",
                        "nextNode": "username + \":\" + password"
                    },
                    {
                        "name": "username + \":\" + password",
                        "type": "String",
                        "context": "        String username = \"admin\";\r\n        String password = \"RadiantAurora2021\"; \r\n        String authString = username + \":\" + password;\r\n        byte[] authEncBytes = Base64.getEncoder().encode(authString.getBytes());\r\n        return new String(authEncBytes);\r\n",
                        "nextNode": "authString"
                    },
                    {
                        "name": "authString",
                        "type": "String",
                        "context": "        String password = \"RadiantAurora2021\"; \r\n        String authString = username + \":\" + password;\r\n        byte[] authEncBytes = Base64.getEncoder().encode(authString.getBytes());\r\n        return new String(authEncBytes);\r\n    }\r\n",
                        "nextNode": "authString.getBytes()"
                    },
                    {
                        "name": "authString.getBytes()",
                        "type": "byte[]",
                        "context": "        String password = \"RadiantAurora2021\"; \r\n        String authString = username + \":\" + password;\r\n        byte[] authEncBytes = Base64.getEncoder().encode(authString.getBytes());\r\n        return new String(authEncBytes);\r\n    }\r\n",
                        "nextNode": "Base64.getEncoder().encode(authString.getBytes()"
                    },
                    {
                        "name": "Base64.getEncoder().encode(authString.getBytes()",
                        "type": "byte[]",
                        "context": "        String password = \"RadiantAurora2021\"; \r\n        String authString = username + \":\" + password;\r\n        byte[] authEncBytes = Base64.getEncoder().encode(authString.getBytes());\r\n        return new String(authEncBytes);\r\n    }\r\n",
                        "nextNode": "authEncBytes"
                    },
                    {
                        "name": "authEncBytes",
                        "type": "Dataflow from `password` to `authEncBytes`\nDataflow from `username` to `authEncBytes`\nDataflow from `authString` to `authEncBytes`\nDataflow from `getBytes(...)` to `authEncBytes`\nDataflow from `encode(...)` to `authEncBytes`\nDataflow from `\"admin\"` to `authEncBytes`\nDataflow from `\"RadiantAurora2021\"` to `authEncBytes`\nDataflow from `\":\"` to `authEncBytes`",
                        "context": "        String authString = username + \":\" + password;\r\n        byte[] authEncBytes = Base64.getEncoder().encode(authString.getBytes());\r\n        return new String(authEncBytes);\r\n    }\r\n}\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "authString",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "password",
                        "type": "String",
                        "context": "        String username = \"admin\";\r\n        String password = \"RadiantAurora2021\"; \r\n        String authString = username + \":\" + password;\r\n        byte[] authEncBytes = Base64.getEncoder().encode(authString.getBytes());\r\n        return new String(authEncBytes);\r\n",
                        "nextNode": "username + \":\" + password"
                    },
                    {
                        "name": "username + \":\" + password",
                        "type": "String",
                        "context": "        String username = \"admin\";\r\n        String password = \"RadiantAurora2021\"; \r\n        String authString = username + \":\" + password;\r\n        byte[] authEncBytes = Base64.getEncoder().encode(authString.getBytes());\r\n        return new String(authEncBytes);\r\n",
                        "nextNode": "authString"
                    },
                    {
                        "name": "authString",
                        "type": "Dataflow from `password` to `authString`\nDataflow from `username` to `authString`\nDataflow from `\"admin\"` to `authString`\nDataflow from `\"RadiantAurora2021\"` to `authString`\nDataflow from `\":\"` to `authString`",
                        "context": "        String password = \"RadiantAurora2021\"; \r\n        String authString = username + \":\" + password;\r\n        byte[] authEncBytes = Base64.getEncoder().encode(authString.getBytes());\r\n        return new String(authEncBytes);\r\n    }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "url",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "authToken",
                        "type": "String",
                        "context": "            String authToken = getEncryptedAuthToken();\r\n            \r\n            URL url = new URL(\"http://api.companynetwork.com/private/data?apikey=\" + authToken);\r\n            HttpURLConnection conn = (HttpURLConnection) url.openConnection();\r\n            conn.setRequestMethod(\"GET\");\r\n",
                        "nextNode": "\"http://api.companynetwork.com/private/data?apikey=\" + authToken"
                    },
                    {
                        "name": "\"http://api.companynetwork.com/private/data?apikey=\" + authToken",
                        "type": "String",
                        "context": "            String authToken = getEncryptedAuthToken();\r\n            \r\n            URL url = new URL(\"http://api.companynetwork.com/private/data?apikey=\" + authToken);\r\n            HttpURLConnection conn = (HttpURLConnection) url.openConnection();\r\n            conn.setRequestMethod(\"GET\");\r\n",
                        "nextNode": "new URL(\"http://api.companynetwork.com/private/data?apikey=\" + authToken)"
                    },
                    {
                        "name": "new URL(\"http://api.companynetwork.com/private/data?apikey=\" + authToken)",
                        "type": "URL",
                        "context": "            String authToken = getEncryptedAuthToken();\r\n            \r\n            URL url = new URL(\"http://api.companynetwork.com/private/data?apikey=\" + authToken);\r\n            HttpURLConnection conn = (HttpURLConnection) url.openConnection();\r\n            conn.setRequestMethod(\"GET\");\r\n",
                        "nextNode": "url"
                    },
                    {
                        "name": "url",
                        "type": "Dataflow from `authToken` to `url`\nDataflow from `password` to `url`\nDataflow from `username` to `url`\nDataflow from `authString` to `url`\nDataflow from `authEncBytes` to `url`\nDataflow from `new URL(...)` to `url`\nDataflow from `getBytes(...)` to `url`\nDataflow from `encode(...)` to `url`\nDataflow from `\"http://api.companynetwork.com/private/data?apikey=\"` to `url`\nDataflow from `\"admin\"` to `url`\nDataflow from `\"RadiantAurora2021\"` to `url`\nDataflow from `\":\"` to `url`\nDataflow from `getEncryptedAuthToken(...)` to `url`\nDataflow from `new String(...)` to `url`",
                        "context": "            \r\n            URL url = new URL(\"http://api.companynetwork.com/private/data?apikey=\" + authToken);\r\n            HttpURLConnection conn = (HttpURLConnection) url.openConnection();\r\n            conn.setRequestMethod(\"GET\");\r\n            conn.setRequestProperty(\"Authorization\", \"Basic \" + authToken);\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "responseCode",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "conn.getResponseCode()",
                        "type": "Number",
                        "context": "            conn.connect();\r\n\r\n            int responseCode = conn.getResponseCode();\r\n            System.out.println(\"Response Code: \" + responseCode);\r\n            // Handle the response appropriately\r\n",
                        "nextNode": "responseCode"
                    },
                    {
                        "name": "responseCode",
                        "type": "Dataflow from `getResponseCode(...)` to `responseCode`",
                        "context": "\r\n            int responseCode = conn.getResponseCode();\r\n            System.out.println(\"Response Code: \" + responseCode);\r\n            // Handle the response appropriately\r\n\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "username",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "\"admin\"",
                        "type": "String",
                        "context": "    private static String getEncryptedAuthToken() {\r\n        // Simulate retrieving an encrypted token and decrypting it\r\n        String username = \"admin\";\r\n        String password = \"RadiantAurora2021\"; \r\n        String authString = username + \":\" + password;\r\n",
                        "nextNode": "username"
                    },
                    {
                        "name": "username",
                        "type": "Dataflow from `\"admin\"` to `username`",
                        "context": "        String username = \"admin\";\r\n        String password = \"RadiantAurora2021\"; \r\n        String authString = username + \":\" + password;\r\n        byte[] authEncBytes = Base64.getEncoder().encode(authString.getBytes());\r\n        return new String(authEncBytes);\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "Authorization",
                "isSensitive": "no"
            },
            {
                "name": "Basic",
                "isSensitive": "no"
            },
            {
                "name": "RadiantAurora2021",
                "isSensitive": "yes"
            },
            {
                "name": "GET",
                "isSensitive": "no"
            },
            {
                "name": "admin",
                "isSensitive": "yes"
            },
            {
                "name": ":",
                "isSensitive": "no"
            },
            {
                "name": "http://api.companynetwork.com/private/data?apikey=",
                "isSensitive": "yes"
            },
            {
                "name": "Response Code:",
                "isSensitive": "no"
            }
        ],
        "comments": [
            {
                "name": "Handle the response appropriately",
                "isSensitive": "no"
            },
            {
                "name": "Simulate retrieving an encrypted token and decrypting it",
                "isSensitive": "no"
            }
        ],
        "sinks": [
            {
                "name": "encode",
                "isSink": "no"
            },
            {
                "name": "disconnect",
                "isSink": "yes"
            },
            {
                "name": "println",
                "isSink": "yes"
            },
            {
                "name": "setRequestMethod",
                "isSink": "yes"
            },
            {
                "name": "printStackTrace",
                "isSink": "yes"
            },
            {
                "name": "setRequestProperty",
                "isSink": "yes"
            },
            {
                "name": "openConnection",
                "isSink": "yes"
            },
            {
                "name": "getResponseCode",
                "isSink": "no"
            },
            {
                "name": "getEncoder",
                "isSink": "no"
            },
            {
                "name": "getEncryptedAuthToken",
                "isSink": "no"
            },
            {
                "name": "connect",
                "isSink": "yes"
            },
            {
                "name": "getBytes",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "GOOD_SecureProcessInvocationWithEncryption.java",
        "variables": [
            {
                "name": "args",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "cipher",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "Cipher.getInstance(\"AES\")",
                        "type": "Cipher",
                        "context": "        SecretKey accessCode = keyGen.generateKey();\r\n\r\n        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, accessCode);\r\n        byte[] encrypted = cipher.doFinal(data.getBytes());\r\n |         SecretKey accessCode = keyGen.generateKey();\r\n\r\n        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, accessCode);\r\n        byte[] encrypted = cipher.doFinal(data.getBytes());\r\n",
                        "nextNode": "cipher"
                    },
                    {
                        "name": "cipher",
                        "type": "Cipher",
                        "context": "\r\n        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, accessCode);\r\n        byte[] encrypted = cipher.doFinal(data.getBytes());\r\n\r\n |         Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, accessCode);\r\n        byte[] encrypted = cipher.doFinal(data.getBytes());\r\n\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n | \r\n        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, accessCode);\r\n        byte[] encrypted = cipher.doFinal(data.getBytes());\r\n\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "encrypted",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "data",
                        "type": "String",
                        "context": "        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, accessCode);\r\n        byte[] encrypted = cipher.doFinal(data.getBytes());\r\n\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n",
                        "nextNode": "data.getBytes()"
                    },
                    {
                        "name": "data.getBytes()",
                        "type": "byte[]",
                        "context": "        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, accessCode);\r\n        byte[] encrypted = cipher.doFinal(data.getBytes());\r\n\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n",
                        "nextNode": "cipher.doFinal(data.getBytes()"
                    },
                    {
                        "name": "cipher.doFinal(data.getBytes()",
                        "type": "byte[]",
                        "context": "        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, accessCode);\r\n        byte[] encrypted = cipher.doFinal(data.getBytes());\r\n\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n",
                        "nextNode": "encrypted"
                    },
                    {
                        "name": "encrypted",
                        "type": "Dataflow from `data` to `encrypted`\nDataflow from `doFinal(...)` to `encrypted`\nDataflow from `getBytes(...)` to `encrypted`\nDataflow from `\"WinterSnowflake21\"` to `encrypted`\nDataflow from `sensitiveData` to `encrypted`",
                        "context": "        byte[] encrypted = cipher.doFinal(data.getBytes());\r\n\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n    }\r\n}\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "data",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "\"WinterSnowflake21\"",
                        "type": "String",
                        "context": "    public static void main(String[] args) {\r\n        try {\r\n            String sensitiveData = \"WinterSnowflake21\";\r\n            String encryptedData = encryptData(sensitiveData);\r\n\r\n",
                        "nextNode": "sensitiveData"
                    },
                    {
                        "name": "sensitiveData",
                        "type": "String",
                        "context": "        try {\r\n            String sensitiveData = \"WinterSnowflake21\";\r\n            String encryptedData = encryptData(sensitiveData);\r\n\r\n            ProcessBuilder builder = new ProcessBuilder(\"secureProcess\", encryptedData);\r\n",
                        "nextNode": "String data"
                    },
                    {
                        "name": "String data",
                        "type": "String",
                        "context": "    }\r\n\r\n    private static String encryptData(String data) throws Exception {\r\n        KeyGenerator keyGen = KeyGenerator.getInstance(\"AES\");\r\n        keyGen.init(256);\r\n",
                        "nextNode": "data"
                    },
                    {
                        "name": "data",
                        "type": "Dataflow from `\"WinterSnowflake21\"` to `data`\nDataflow from `sensitiveData` to `data`",
                        "context": "        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, accessCode);\r\n        byte[] encrypted = cipher.doFinal(data.getBytes());\r\n\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "e",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "accessCode",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "keyGen.generateKey()",
                        "type": "SecretKey",
                        "context": "        KeyGenerator keyGen = KeyGenerator.getInstance(\"AES\");\r\n        keyGen.init(256);\r\n        SecretKey accessCode = keyGen.generateKey();\r\n\r\n        Cipher cipher = Cipher.getInstance(\"AES\");\r\n",
                        "nextNode": "accessCode"
                    },
                    {
                        "name": "accessCode",
                        "type": "Dataflow from `generateKey(...)` to `accessCode`",
                        "context": "\r\n        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, accessCode);\r\n        byte[] encrypted = cipher.doFinal(data.getBytes());\r\n\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "sensitiveData",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "\"WinterSnowflake21\"",
                        "type": "String",
                        "context": "    public static void main(String[] args) {\r\n        try {\r\n            String sensitiveData = \"WinterSnowflake21\";\r\n            String encryptedData = encryptData(sensitiveData);\r\n\r\n",
                        "nextNode": "sensitiveData"
                    },
                    {
                        "name": "sensitiveData",
                        "type": "Dataflow from `\"WinterSnowflake21\"` to `sensitiveData`",
                        "context": "        try {\r\n            String sensitiveData = \"WinterSnowflake21\";\r\n            String encryptedData = encryptData(sensitiveData);\r\n\r\n            ProcessBuilder builder = new ProcessBuilder(\"secureProcess\", encryptedData);\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "encryptedData",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "data",
                        "type": "String",
                        "context": "        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, accessCode);\r\n        byte[] encrypted = cipher.doFinal(data.getBytes());\r\n\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n",
                        "nextNode": "data.getBytes()"
                    },
                    {
                        "name": "data.getBytes()",
                        "type": "byte[]",
                        "context": "        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, accessCode);\r\n        byte[] encrypted = cipher.doFinal(data.getBytes());\r\n\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n",
                        "nextNode": "cipher.doFinal(data.getBytes()"
                    },
                    {
                        "name": "cipher.doFinal(data.getBytes()",
                        "type": "byte[]",
                        "context": "        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, accessCode);\r\n        byte[] encrypted = cipher.doFinal(data.getBytes());\r\n\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n",
                        "nextNode": "encrypted"
                    },
                    {
                        "name": "encrypted",
                        "type": "byte[]",
                        "context": "        byte[] encrypted = cipher.doFinal(data.getBytes());\r\n\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n    }\r\n}\r\n",
                        "nextNode": "Base64.getEncoder().encodeToString(encrypted)"
                    },
                    {
                        "name": "Base64.getEncoder().encodeToString(encrypted)",
                        "type": "String",
                        "context": "        byte[] encrypted = cipher.doFinal(data.getBytes());\r\n\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n    }\r\n}\r\n",
                        "nextNode": "encryptData(sensitiveData)"
                    },
                    {
                        "name": "encryptData(sensitiveData)",
                        "type": "String",
                        "context": "        try {\r\n            String sensitiveData = \"WinterSnowflake21\";\r\n            String encryptedData = encryptData(sensitiveData);\r\n\r\n            ProcessBuilder builder = new ProcessBuilder(\"secureProcess\", encryptedData);\r\n",
                        "nextNode": "encryptedData"
                    },
                    {
                        "name": "encryptedData",
                        "type": "Dataflow from `data` to `encryptedData`\nDataflow from `encrypted` to `encryptedData`\nDataflow from `doFinal(...)` to `encryptedData`\nDataflow from `getBytes(...)` to `encryptedData`\nDataflow from `encodeToString(...)` to `encryptedData`\nDataflow from `\"WinterSnowflake21\"` to `encryptedData`\nDataflow from `encryptData(...)` to `encryptedData`\nDataflow from `sensitiveData` to `encryptedData`",
                        "context": "            String encryptedData = encryptData(sensitiveData);\r\n\r\n            ProcessBuilder builder = new ProcessBuilder(\"secureProcess\", encryptedData);\r\n            builder.start().waitFor();\r\n            System.out.println(\"Secure process invoked successfully with encrypted data.\");\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "builder",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "encryptedData",
                        "type": "String",
                        "context": "            String encryptedData = encryptData(sensitiveData);\r\n\r\n            ProcessBuilder builder = new ProcessBuilder(\"secureProcess\", encryptedData);\r\n            builder.start().waitFor();\r\n            System.out.println(\"Secure process invoked successfully with encrypted data.\");\r\n",
                        "nextNode": "new ProcessBuilder(\"secureProcess\", encryptedData)"
                    },
                    {
                        "name": "new ProcessBuilder(\"secureProcess\", encryptedData)",
                        "type": "ProcessBuilder",
                        "context": "            String encryptedData = encryptData(sensitiveData);\r\n\r\n            ProcessBuilder builder = new ProcessBuilder(\"secureProcess\", encryptedData);\r\n            builder.start().waitFor();\r\n            System.out.println(\"Secure process invoked successfully with encrypted data.\");\r\n",
                        "nextNode": "builder"
                    },
                    {
                        "name": "builder",
                        "type": "Dataflow from `encryptedData` to `builder`\nDataflow from `data` to `builder`\nDataflow from `encrypted` to `builder`\nDataflow from `new ProcessBuilder(...)` to `builder`\nDataflow from `doFinal(...)` to `builder`\nDataflow from `getBytes(...)` to `builder`\nDataflow from `encodeToString(...)` to `builder`\nDataflow from `\"WinterSnowflake21\"` to `builder`\nDataflow from `encryptData(...)` to `builder`\nDataflow from `sensitiveData` to `builder`\nDataflow from `\"secureProcess\"` to `builder`",
                        "context": "\r\n            ProcessBuilder builder = new ProcessBuilder(\"secureProcess\", encryptedData);\r\n            builder.start().waitFor();\r\n            System.out.println(\"Secure process invoked successfully with encrypted data.\");\r\n        } catch (Exception e) {\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "keyGen",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "KeyGenerator.getInstance(\"AES\")",
                        "type": "KeyGenerator",
                        "context": "\r\n    private static String encryptData(String data) throws Exception {\r\n        KeyGenerator keyGen = KeyGenerator.getInstance(\"AES\");\r\n        keyGen.init(256);\r\n        SecretKey accessCode = keyGen.generateKey();\r\n | \r\n    private static String encryptData(String data) throws Exception {\r\n        KeyGenerator keyGen = KeyGenerator.getInstance(\"AES\");\r\n        keyGen.init(256);\r\n        SecretKey accessCode = keyGen.generateKey();\r\n",
                        "nextNode": "keyGen"
                    },
                    {
                        "name": "keyGen",
                        "type": "KeyGenerator",
                        "context": "    private static String encryptData(String data) throws Exception {\r\n        KeyGenerator keyGen = KeyGenerator.getInstance(\"AES\");\r\n        keyGen.init(256);\r\n        SecretKey accessCode = keyGen.generateKey();\r\n\r\n |         KeyGenerator keyGen = KeyGenerator.getInstance(\"AES\");\r\n        keyGen.init(256);\r\n        SecretKey accessCode = keyGen.generateKey();\r\n\r\n        Cipher cipher = Cipher.getInstance(\"AES\");\r\n |     private static String encryptData(String data) throws Exception {\r\n        KeyGenerator keyGen = KeyGenerator.getInstance(\"AES\");\r\n        keyGen.init(256);\r\n        SecretKey accessCode = keyGen.generateKey();\r\n\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "secureProcess",
                "isSensitive": "no"
            },
            {
                "name": "WinterSnowflake21",
                "isSensitive": "yes"
            },
            {
                "name": "Secure process invoked successfully with encrypted data.",
                "isSensitive": "no"
            },
            {
                "name": "Error during secure process invocation.",
                "isSensitive": "no"
            },
            {
                "name": "AES",
                "isSensitive": "yes"
            }
        ],
        "comments": [],
        "sinks": [
            {
                "name": "generateKey",
                "isSink": "no"
            },
            {
                "name": "init",
                "isSink": "no"
            },
            {
                "name": "println",
                "isSink": "yes"
            },
            {
                "name": "printStackTrace",
                "isSink": "yes"
            },
            {
                "name": "encryptData",
                "isSink": "no"
            },
            {
                "name": "start",
                "isSink": "yes"
            },
            {
                "name": "getEncoder",
                "isSink": "no"
            },
            {
                "name": "encodeToString",
                "isSink": "no"
            },
            {
                "name": "getInstance",
                "isSink": "no"
            },
            {
                "name": "waitFor",
                "isSink": "no"
            },
            {
                "name": "getBytes",
                "isSink": "no"
            },
            {
                "name": "doFinal",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "GOOD_SecureSoftwareUpdate.java",
        "variables": [
            {
                "name": "cipher",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "Cipher.getInstance(\"AES\")",
                        "type": "Cipher",
                        "context": "        SecretKey bankKey = keyGen.generateKey();\r\n\r\n        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, bankKey);\r\n        byte[] encrypted = cipher.doFinal(key.getBytes());\r\n |         SecretKey bankKey = keyGen.generateKey();\r\n\r\n        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, bankKey);\r\n        byte[] encrypted = cipher.doFinal(key.getBytes());\r\n",
                        "nextNode": "cipher"
                    },
                    {
                        "name": "cipher",
                        "type": "Cipher",
                        "context": "\r\n        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, bankKey);\r\n        byte[] encrypted = cipher.doFinal(key.getBytes());\r\n\r\n |         Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, bankKey);\r\n        byte[] encrypted = cipher.doFinal(key.getBytes());\r\n\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n | \r\n        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, bankKey);\r\n        byte[] encrypted = cipher.doFinal(key.getBytes());\r\n\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "process",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "builder.start()",
                        "type": "Process",
                        "context": "            ProcessBuilder builder = new ProcessBuilder(\"updateScript\", securePath.toString());\r\n            builder.inheritIO();  // Optionally inherit IO to manage output\r\n            Process process = builder.start();\r\n            process.waitFor();\r\n\r\n",
                        "nextNode": "process"
                    },
                    {
                        "name": "process",
                        "type": "Dataflow from `start(...)` to `process`",
                        "context": "            builder.inheritIO();  // Optionally inherit IO to manage output\r\n            Process process = builder.start();\r\n            process.waitFor();\r\n\r\n            // Cleanup: Securely delete the temporary secure storage\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "e",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "encryptedKey",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "key",
                        "type": "String",
                        "context": "        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, bankKey);\r\n        byte[] encrypted = cipher.doFinal(key.getBytes());\r\n\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n |         Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, bankKey);\r\n        byte[] encrypted = cipher.doFinal(key.getBytes());\r\n\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n",
                        "nextNode": "key.getBytes()"
                    },
                    {
                        "name": "key.getBytes()",
                        "type": "byte[]",
                        "context": "        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, bankKey);\r\n        byte[] encrypted = cipher.doFinal(key.getBytes());\r\n\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n |         Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, bankKey);\r\n        byte[] encrypted = cipher.doFinal(key.getBytes());\r\n\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n",
                        "nextNode": "cipher.doFinal(key.getBytes()"
                    },
                    {
                        "name": "cipher.doFinal(key.getBytes()",
                        "type": "byte[]",
                        "context": "        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, bankKey);\r\n        byte[] encrypted = cipher.doFinal(key.getBytes());\r\n\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n |         Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, bankKey);\r\n        byte[] encrypted = cipher.doFinal(key.getBytes());\r\n\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n",
                        "nextNode": "encrypted"
                    },
                    {
                        "name": "encrypted",
                        "type": "byte[]",
                        "context": "        byte[] encrypted = cipher.doFinal(key.getBytes());\r\n\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n    }\r\n\r\n |         byte[] encrypted = cipher.doFinal(key.getBytes());\r\n\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n    }\r\n\r\n",
                        "nextNode": "Base64.getEncoder().encodeToString(encrypted)"
                    },
                    {
                        "name": "Base64.getEncoder().encodeToString(encrypted)",
                        "type": "String",
                        "context": "        byte[] encrypted = cipher.doFinal(key.getBytes());\r\n\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n    }\r\n\r\n |         byte[] encrypted = cipher.doFinal(key.getBytes());\r\n\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n    }\r\n\r\n",
                        "nextNode": "encryptVerificationKey(verificationKey)"
                    },
                    {
                        "name": "encryptVerificationKey(verificationKey)",
                        "type": "String",
                        "context": "            // Generate and encrypt the digital signature verification key\r\n            String verificationKey = generateSignatureVerificationKey();\r\n            String encryptedKey = encryptVerificationKey(verificationKey);\r\n\r\n            // Write the encrypted key to a secure location or transmit it securely\r\n |             // Generate and encrypt the digital signature verification key\r\n            String verificationKey = generateSignatureVerificationKey();\r\n            String encryptedKey = encryptVerificationKey(verificationKey);\r\n\r\n            // Write the encrypted key to a secure location or transmit it securely\r\n",
                        "nextNode": "encryptedKey"
                    },
                    {
                        "name": "String encryptedKey",
                        "type": "String",
                        "context": "    }\r\n\r\n    private static Path writeKeyToSecureLocation(String encryptedKey) throws IOException {\r\n        // Write the encrypted key to a secure, temporary file\r\n        Path tempFile = Files.createTempFile(\"BrightStarryNight\", \".tmp\");\r\n",
                        "nextNode": "encryptedKey"
                    },
                    {
                        "name": "encryptedKey",
                        "type": "Dataflow from `key` to `encryptedKey`\nDataflow from `encrypted` to `encryptedKey`\nDataflow from `generateSignatureVerificationKey(...)` to `encryptedKey`\nDataflow from `\"signatureKey123\"` to `encryptedKey`\nDataflow from `doFinal(...)` to `encryptedKey`\nDataflow from `getBytes(...)` to `encryptedKey`\nDataflow from `encodeToString(...)` to `encryptedKey`\nDataflow from `encryptVerificationKey(...)` to `encryptedKey`\nDataflow from `verificationKey` to `encryptedKey`",
                        "context": "\r\n            // Write the encrypted key to a secure location or transmit it securely\r\n            Path securePath = writeKeyToSecureLocation(encryptedKey);\r\n\r\n            // Use ProcessBuilder to initiate the update process\r\n | \r\n            // Write the encrypted key to a secure location or transmit it securely\r\n            Path securePath = writeKeyToSecureLocation(encryptedKey);\r\n\r\n            // Use ProcessBuilder to initiate the update process\r\n |         // Write the encrypted key to a secure, temporary file\r\n        Path tempFile = Files.createTempFile(\"BrightStarryNight\", \".tmp\");\r\n        Files.write(tempFile, encryptedKey.getBytes());\r\n        return tempFile;\r\n    }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "verificationKey",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "generateSignatureVerificationKey()",
                        "type": "String",
                        "context": "        try {\r\n            // Generate and encrypt the digital signature verification key\r\n            String verificationKey = generateSignatureVerificationKey();\r\n            String encryptedKey = encryptVerificationKey(verificationKey);\r\n\r\n",
                        "nextNode": "verificationKey"
                    },
                    {
                        "name": "verificationKey",
                        "type": "Dataflow from `generateSignatureVerificationKey(...)` to `verificationKey`\nDataflow from `\"signatureKey123\"` to `verificationKey`",
                        "context": "            // Generate and encrypt the digital signature verification key\r\n            String verificationKey = generateSignatureVerificationKey();\r\n            String encryptedKey = encryptVerificationKey(verificationKey);\r\n\r\n            // Write the encrypted key to a secure location or transmit it securely\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "bankKey",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "keyGen.generateKey()",
                        "type": "SecretKey",
                        "context": "        KeyGenerator keyGen = KeyGenerator.getInstance(\"AES\");\r\n        keyGen.init(256);  // Strong encryption with AES-256\r\n        SecretKey bankKey = keyGen.generateKey();\r\n\r\n        Cipher cipher = Cipher.getInstance(\"AES\");\r\n",
                        "nextNode": "bankKey"
                    },
                    {
                        "name": "bankKey",
                        "type": "Dataflow from `generateKey(...)` to `bankKey`",
                        "context": "\r\n        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, bankKey);\r\n        byte[] encrypted = cipher.doFinal(key.getBytes());\r\n\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "keyGen",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "KeyGenerator.getInstance(\"AES\")",
                        "type": "KeyGenerator",
                        "context": "    private static String encryptVerificationKey(String key) throws Exception {\r\n        // Use AES encryption for the key\r\n        KeyGenerator keyGen = KeyGenerator.getInstance(\"AES\");\r\n        keyGen.init(256);  // Strong encryption with AES-256\r\n        SecretKey bankKey = keyGen.generateKey();\r\n |     private static String encryptVerificationKey(String key) throws Exception {\r\n        // Use AES encryption for the key\r\n        KeyGenerator keyGen = KeyGenerator.getInstance(\"AES\");\r\n        keyGen.init(256);  // Strong encryption with AES-256\r\n        SecretKey bankKey = keyGen.generateKey();\r\n",
                        "nextNode": "keyGen"
                    },
                    {
                        "name": "keyGen",
                        "type": "KeyGenerator",
                        "context": "        // Use AES encryption for the key\r\n        KeyGenerator keyGen = KeyGenerator.getInstance(\"AES\");\r\n        keyGen.init(256);  // Strong encryption with AES-256\r\n        SecretKey bankKey = keyGen.generateKey();\r\n\r\n |         KeyGenerator keyGen = KeyGenerator.getInstance(\"AES\");\r\n        keyGen.init(256);  // Strong encryption with AES-256\r\n        SecretKey bankKey = keyGen.generateKey();\r\n\r\n        Cipher cipher = Cipher.getInstance(\"AES\");\r\n |         // Use AES encryption for the key\r\n        KeyGenerator keyGen = KeyGenerator.getInstance(\"AES\");\r\n        keyGen.init(256);  // Strong encryption with AES-256\r\n        SecretKey bankKey = keyGen.generateKey();\r\n\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "args",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "securePath",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "encryptedKey",
                        "type": "String",
                        "context": "\r\n            // Write the encrypted key to a secure location or transmit it securely\r\n            Path securePath = writeKeyToSecureLocation(encryptedKey);\r\n\r\n            // Use ProcessBuilder to initiate the update process\r\n | \r\n            // Write the encrypted key to a secure location or transmit it securely\r\n            Path securePath = writeKeyToSecureLocation(encryptedKey);\r\n\r\n            // Use ProcessBuilder to initiate the update process\r\n",
                        "nextNode": "writeKeyToSecureLocation(encryptedKey)"
                    },
                    {
                        "name": "writeKeyToSecureLocation(encryptedKey)",
                        "type": "Path",
                        "context": "\r\n            // Write the encrypted key to a secure location or transmit it securely\r\n            Path securePath = writeKeyToSecureLocation(encryptedKey);\r\n\r\n            // Use ProcessBuilder to initiate the update process\r\n | \r\n            // Write the encrypted key to a secure location or transmit it securely\r\n            Path securePath = writeKeyToSecureLocation(encryptedKey);\r\n\r\n            // Use ProcessBuilder to initiate the update process\r\n",
                        "nextNode": "securePath"
                    },
                    {
                        "name": "securePath",
                        "type": "Dataflow from `encryptedKey` to `securePath`\nDataflow from `key` to `securePath`\nDataflow from `encrypted` to `securePath`\nDataflow from `tempFile` to `securePath`\nDataflow from `tempFile` to `securePath`\nDataflow from `writeKeyToSecureLocation(...)` to `securePath`\nDataflow from `generateSignatureVerificationKey(...)` to `securePath`\nDataflow from `\"signatureKey123\"` to `securePath`\nDataflow from `doFinal(...)` to `securePath`\nDataflow from `getBytes(...)` to `securePath`\nDataflow from `encodeToString(...)` to `securePath`\nDataflow from `createTempFile(...)` to `securePath`\nDataflow from `encryptVerificationKey(...)` to `securePath`\nDataflow from `verificationKey` to `securePath`\nDataflow from `\"BrightStarryNight\"` to `securePath`\nDataflow from `\".tmp\"` to `securePath`",
                        "context": "\r\n            // Use ProcessBuilder to initiate the update process\r\n            ProcessBuilder builder = new ProcessBuilder(\"updateScript\", securePath.toString());\r\n            builder.inheritIO();  // Optionally inherit IO to manage output\r\n            Process process = builder.start();\r\n | \r\n            // Use ProcessBuilder to initiate the update process\r\n            ProcessBuilder builder = new ProcessBuilder(\"updateScript\", securePath.toString());\r\n            builder.inheritIO();  // Optionally inherit IO to manage output\r\n            Process process = builder.start();\r\n | \r\n            // Cleanup: Securely delete the temporary secure storage\r\n            Files.delete(securePath);\r\n            System.out.println(\"Software update process completed securely.\");\r\n        } catch (Exception e) {\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "encrypted",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "key",
                        "type": "String",
                        "context": "        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, bankKey);\r\n        byte[] encrypted = cipher.doFinal(key.getBytes());\r\n\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n",
                        "nextNode": "key.getBytes()"
                    },
                    {
                        "name": "key.getBytes()",
                        "type": "byte[]",
                        "context": "        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, bankKey);\r\n        byte[] encrypted = cipher.doFinal(key.getBytes());\r\n\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n",
                        "nextNode": "cipher.doFinal(key.getBytes()"
                    },
                    {
                        "name": "cipher.doFinal(key.getBytes()",
                        "type": "byte[]",
                        "context": "        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, bankKey);\r\n        byte[] encrypted = cipher.doFinal(key.getBytes());\r\n\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n",
                        "nextNode": "encrypted"
                    },
                    {
                        "name": "encrypted",
                        "type": "Dataflow from `key` to `encrypted`\nDataflow from `generateSignatureVerificationKey(...)` to `encrypted`\nDataflow from `\"signatureKey123\"` to `encrypted`\nDataflow from `doFinal(...)` to `encrypted`\nDataflow from `getBytes(...)` to `encrypted`\nDataflow from `verificationKey` to `encrypted`",
                        "context": "        byte[] encrypted = cipher.doFinal(key.getBytes());\r\n\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n    }\r\n\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "builder",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "encryptedKey",
                        "type": "String",
                        "context": "\r\n            // Write the encrypted key to a secure location or transmit it securely\r\n            Path securePath = writeKeyToSecureLocation(encryptedKey);\r\n\r\n            // Use ProcessBuilder to initiate the update process\r\n | \r\n            // Write the encrypted key to a secure location or transmit it securely\r\n            Path securePath = writeKeyToSecureLocation(encryptedKey);\r\n\r\n            // Use ProcessBuilder to initiate the update process\r\n",
                        "nextNode": "writeKeyToSecureLocation(encryptedKey)"
                    },
                    {
                        "name": "writeKeyToSecureLocation(encryptedKey)",
                        "type": "Path",
                        "context": "\r\n            // Write the encrypted key to a secure location or transmit it securely\r\n            Path securePath = writeKeyToSecureLocation(encryptedKey);\r\n\r\n            // Use ProcessBuilder to initiate the update process\r\n | \r\n            // Write the encrypted key to a secure location or transmit it securely\r\n            Path securePath = writeKeyToSecureLocation(encryptedKey);\r\n\r\n            // Use ProcessBuilder to initiate the update process\r\n",
                        "nextNode": "securePath"
                    },
                    {
                        "name": "securePath",
                        "type": "Path",
                        "context": "\r\n            // Use ProcessBuilder to initiate the update process\r\n            ProcessBuilder builder = new ProcessBuilder(\"updateScript\", securePath.toString());\r\n            builder.inheritIO();  // Optionally inherit IO to manage output\r\n            Process process = builder.start();\r\n | \r\n            // Use ProcessBuilder to initiate the update process\r\n            ProcessBuilder builder = new ProcessBuilder(\"updateScript\", securePath.toString());\r\n            builder.inheritIO();  // Optionally inherit IO to manage output\r\n            Process process = builder.start();\r\n",
                        "nextNode": "securePath.toString()"
                    },
                    {
                        "name": "securePath.toString()",
                        "type": "String",
                        "context": "\r\n            // Use ProcessBuilder to initiate the update process\r\n            ProcessBuilder builder = new ProcessBuilder(\"updateScript\", securePath.toString());\r\n            builder.inheritIO();  // Optionally inherit IO to manage output\r\n            Process process = builder.start();\r\n | \r\n            // Use ProcessBuilder to initiate the update process\r\n            ProcessBuilder builder = new ProcessBuilder(\"updateScript\", securePath.toString());\r\n            builder.inheritIO();  // Optionally inherit IO to manage output\r\n            Process process = builder.start();\r\n",
                        "nextNode": "new ProcessBuilder(\"updateScript\", securePath.toString()"
                    },
                    {
                        "name": "new ProcessBuilder(\"updateScript\", securePath.toString()",
                        "type": "ProcessBuilder",
                        "context": "\r\n            // Use ProcessBuilder to initiate the update process\r\n            ProcessBuilder builder = new ProcessBuilder(\"updateScript\", securePath.toString());\r\n            builder.inheritIO();  // Optionally inherit IO to manage output\r\n            Process process = builder.start();\r\n | \r\n            // Use ProcessBuilder to initiate the update process\r\n            ProcessBuilder builder = new ProcessBuilder(\"updateScript\", securePath.toString());\r\n            builder.inheritIO();  // Optionally inherit IO to manage output\r\n            Process process = builder.start();\r\n",
                        "nextNode": "builder"
                    },
                    {
                        "name": "builder",
                        "type": "ProcessBuilder",
                        "context": "            // Use ProcessBuilder to initiate the update process\r\n            ProcessBuilder builder = new ProcessBuilder(\"updateScript\", securePath.toString());\r\n            builder.inheritIO();  // Optionally inherit IO to manage output\r\n            Process process = builder.start();\r\n            process.waitFor();\r\n |             ProcessBuilder builder = new ProcessBuilder(\"updateScript\", securePath.toString());\r\n            builder.inheritIO();  // Optionally inherit IO to manage output\r\n            Process process = builder.start();\r\n            process.waitFor();\r\n\r\n |             // Use ProcessBuilder to initiate the update process\r\n            ProcessBuilder builder = new ProcessBuilder(\"updateScript\", securePath.toString());\r\n            builder.inheritIO();  // Optionally inherit IO to manage output\r\n            Process process = builder.start();\r\n            process.waitFor();\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "tempFile",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "Files.createTempFile(\"BrightStarryNight\", \".tmp\")",
                        "type": "Path",
                        "context": "    private static Path writeKeyToSecureLocation(String encryptedKey) throws IOException {\r\n        // Write the encrypted key to a secure, temporary file\r\n        Path tempFile = Files.createTempFile(\"BrightStarryNight\", \".tmp\");\r\n        Files.write(tempFile, encryptedKey.getBytes());\r\n        return tempFile;\r\n |     private static Path writeKeyToSecureLocation(String encryptedKey) throws IOException {\r\n        // Write the encrypted key to a secure, temporary file\r\n        Path tempFile = Files.createTempFile(\"BrightStarryNight\", \".tmp\");\r\n        Files.write(tempFile, encryptedKey.getBytes());\r\n        return tempFile;\r\n",
                        "nextNode": "tempFile"
                    },
                    {
                        "name": "tempFile",
                        "type": "Dataflow from `createTempFile(...)` to `tempFile`\nDataflow from `\"BrightStarryNight\"` to `tempFile`\nDataflow from `\".tmp\"` to `tempFile`",
                        "context": "        // Write the encrypted key to a secure, temporary file\r\n        Path tempFile = Files.createTempFile(\"BrightStarryNight\", \".tmp\");\r\n        Files.write(tempFile, encryptedKey.getBytes());\r\n        return tempFile;\r\n    }\r\n |         // Write the encrypted key to a secure, temporary file\r\n        Path tempFile = Files.createTempFile(\"BrightStarryNight\", \".tmp\");\r\n        Files.write(tempFile, encryptedKey.getBytes());\r\n        return tempFile;\r\n    }\r\n |         Path tempFile = Files.createTempFile(\"BrightStarryNight\", \".tmp\");\r\n        Files.write(tempFile, encryptedKey.getBytes());\r\n        return tempFile;\r\n    }\r\n}\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "key",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "generateSignatureVerificationKey()",
                        "type": "String",
                        "context": "        try {\r\n            // Generate and encrypt the digital signature verification key\r\n            String verificationKey = generateSignatureVerificationKey();\r\n            String encryptedKey = encryptVerificationKey(verificationKey);\r\n\r\n",
                        "nextNode": "verificationKey"
                    },
                    {
                        "name": "verificationKey",
                        "type": "String",
                        "context": "            // Generate and encrypt the digital signature verification key\r\n            String verificationKey = generateSignatureVerificationKey();\r\n            String encryptedKey = encryptVerificationKey(verificationKey);\r\n\r\n            // Write the encrypted key to a secure location or transmit it securely\r\n",
                        "nextNode": "String key"
                    },
                    {
                        "name": "String key",
                        "type": "String",
                        "context": "    }\r\n\r\n    private static String encryptVerificationKey(String key) throws Exception {\r\n        // Use AES encryption for the key\r\n        KeyGenerator keyGen = KeyGenerator.getInstance(\"AES\");\r\n",
                        "nextNode": "key"
                    },
                    {
                        "name": "key",
                        "type": "Dataflow from `generateSignatureVerificationKey(...)` to `key`\nDataflow from `\"signatureKey123\"` to `key`\nDataflow from `verificationKey` to `key`",
                        "context": "        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, bankKey);\r\n        byte[] encrypted = cipher.doFinal(key.getBytes());\r\n\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "Software update process completed securely.",
                "isSensitive": "no"
            },
            {
                "name": "updateScript",
                "isSensitive": "no"
            },
            {
                "name": "signatureKey123",
                "isSensitive": "yes"
            },
            {
                "name": "BrightStarryNight",
                "isSensitive": "yes"
            },
            {
                "name": "AES",
                "isSensitive": "yes"
            },
            {
                "name": ".tmp",
                "isSensitive": "no"
            }
        ],
        "comments": [
            {
                "name": "Use AES encryption for the key",
                "isSensitive": "no"
            },
            {
                "name": "Write the encrypted key to a secure location or transmit it securely",
                "isSensitive": "no"
            },
            {
                "name": "Generate and encrypt the digital signature verification key",
                "isSensitive": "no"
            },
            {
                "name": "Placeholder for key generation logic",
                "isSensitive": "no"
            },
            {
                "name": "Strong encryption with AES-256",
                "isSensitive": "no"
            },
            {
                "name": "Example key, replace with actual key generation logic",
                "isSensitive": "no"
            },
            {
                "name": "Cleanup: Securely delete the temporary secure storage",
                "isSensitive": "no"
            },
            {
                "name": "Write the encrypted key to a secure, temporary file",
                "isSensitive": "no"
            },
            {
                "name": "Use ProcessBuilder to initiate the update process",
                "isSensitive": "no"
            },
            {
                "name": "Optionally inherit IO to manage output",
                "isSensitive": "no"
            }
        ],
        "sinks": [
            {
                "name": "init",
                "isSink": "no"
            },
            {
                "name": "writeKeyToSecureLocation",
                "isSink": "no"
            },
            {
                "name": "printStackTrace",
                "isSink": "yes"
            },
            {
                "name": "start",
                "isSink": "yes"
            },
            {
                "name": "encodeToString",
                "isSink": "no"
            },
            {
                "name": "createTempFile",
                "isSink": "no"
            },
            {
                "name": "inheritIO",
                "isSink": "yes"
            },
            {
                "name": "delete",
                "isSink": "yes"
            },
            {
                "name": "encryptVerificationKey",
                "isSink": "no"
            },
            {
                "name": "getBytes",
                "isSink": "no"
            },
            {
                "name": "doFinal",
                "isSink": "no"
            },
            {
                "name": "generateKey",
                "isSink": "no"
            },
            {
                "name": "generateSignatureVerificationKey",
                "isSink": "no"
            },
            {
                "name": "println",
                "isSink": "yes"
            },
            {
                "name": "getEncoder",
                "isSink": "no"
            },
            {
                "name": "toString",
                "isSink": "no"
            },
            {
                "name": "getInstance",
                "isSink": "no"
            },
            {
                "name": "waitFor",
                "isSink": "no"
            },
            {
                "name": "write",
                "isSink": "yes"
            }
        ]
    },
    {
        "fileName": "GOOD_TokenSecureViaEnvironment.java",
        "variables": [
            {
                "name": "encryptedToken",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "token",
                        "type": "String",
                        "context": "        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, key);\r\n        byte[] encryptedBytes = cipher.doFinal(token.getBytes());\r\n\r\n        return Base64.getEncoder().encodeToString(encryptedBytes);\r\n",
                        "nextNode": "token.getBytes()"
                    },
                    {
                        "name": "token.getBytes()",
                        "type": "byte[]",
                        "context": "        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, key);\r\n        byte[] encryptedBytes = cipher.doFinal(token.getBytes());\r\n\r\n        return Base64.getEncoder().encodeToString(encryptedBytes);\r\n",
                        "nextNode": "cipher.doFinal(token.getBytes()"
                    },
                    {
                        "name": "cipher.doFinal(token.getBytes()",
                        "type": "byte[]",
                        "context": "        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, key);\r\n        byte[] encryptedBytes = cipher.doFinal(token.getBytes());\r\n\r\n        return Base64.getEncoder().encodeToString(encryptedBytes);\r\n",
                        "nextNode": "encryptedBytes"
                    },
                    {
                        "name": "encryptedBytes",
                        "type": "byte[]",
                        "context": "        byte[] encryptedBytes = cipher.doFinal(token.getBytes());\r\n\r\n        return Base64.getEncoder().encodeToString(encryptedBytes);\r\n    }\r\n}\r\n",
                        "nextNode": "Base64.getEncoder().encodeToString(encryptedBytes)"
                    },
                    {
                        "name": "Base64.getEncoder().encodeToString(encryptedBytes)",
                        "type": "String",
                        "context": "        byte[] encryptedBytes = cipher.doFinal(token.getBytes());\r\n\r\n        return Base64.getEncoder().encodeToString(encryptedBytes);\r\n    }\r\n}\r\n",
                        "nextNode": "encryptToken(token)"
                    },
                    {
                        "name": "encryptToken(token)",
                        "type": "String",
                        "context": "        try {\r\n            String token = \"s3cr3tT0k3n\";\r\n            String encryptedToken = encryptToken(token);\r\n\r\n            ProcessBuilder builder = new ProcessBuilder(\"myCommand\");\r\n",
                        "nextNode": "encryptedToken"
                    },
                    {
                        "name": "encryptedToken",
                        "type": "Dataflow from `token` to `encryptedToken`\nDataflow from `encryptedBytes` to `encryptedToken`\nDataflow from `doFinal(...)` to `encryptedToken`\nDataflow from `getBytes(...)` to `encryptedToken`\nDataflow from `encodeToString(...)` to `encryptedToken`\nDataflow from `\"s3cr3tT0k3n\"` to `encryptedToken`\nDataflow from `encryptToken(...)` to `encryptedToken`\nDataflow from `token` to `encryptedToken`",
                        "context": "\r\n            ProcessBuilder builder = new ProcessBuilder(\"myCommand\");\r\n            builder.environment().put(\"SECRET_TOKEN\", encryptedToken); // Pass encrypted token\r\n            Process process = builder.start();\r\n            process.waitFor();\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "args",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "cipher",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "Cipher.getInstance(\"AES\")",
                        "type": "Cipher",
                        "context": "        SecretKey key = keyGenerator.generateKey();\r\n\r\n        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, key);\r\n        byte[] encryptedBytes = cipher.doFinal(token.getBytes());\r\n |         SecretKey key = keyGenerator.generateKey();\r\n\r\n        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, key);\r\n        byte[] encryptedBytes = cipher.doFinal(token.getBytes());\r\n",
                        "nextNode": "cipher"
                    },
                    {
                        "name": "cipher",
                        "type": "Cipher",
                        "context": "\r\n        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, key);\r\n        byte[] encryptedBytes = cipher.doFinal(token.getBytes());\r\n\r\n |         Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, key);\r\n        byte[] encryptedBytes = cipher.doFinal(token.getBytes());\r\n\r\n        return Base64.getEncoder().encodeToString(encryptedBytes);\r\n | \r\n        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, key);\r\n        byte[] encryptedBytes = cipher.doFinal(token.getBytes());\r\n\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "process",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "builder.start()",
                        "type": "Process",
                        "context": "            ProcessBuilder builder = new ProcessBuilder(\"myCommand\");\r\n            builder.environment().put(\"SECRET_TOKEN\", encryptedToken); // Pass encrypted token\r\n            Process process = builder.start();\r\n            process.waitFor();\r\n        } catch (Exception e) {\r\n",
                        "nextNode": "process"
                    },
                    {
                        "name": "process",
                        "type": "Dataflow from `start(...)` to `process`",
                        "context": "            builder.environment().put(\"SECRET_TOKEN\", encryptedToken); // Pass encrypted token\r\n            Process process = builder.start();\r\n            process.waitFor();\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "e",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "builder",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "new ProcessBuilder(\"myCommand\")",
                        "type": "ProcessBuilder",
                        "context": "            String encryptedToken = encryptToken(token);\r\n\r\n            ProcessBuilder builder = new ProcessBuilder(\"myCommand\");\r\n            builder.environment().put(\"SECRET_TOKEN\", encryptedToken); // Pass encrypted token\r\n            Process process = builder.start();\r\n |             String encryptedToken = encryptToken(token);\r\n\r\n            ProcessBuilder builder = new ProcessBuilder(\"myCommand\");\r\n            builder.environment().put(\"SECRET_TOKEN\", encryptedToken); // Pass encrypted token\r\n            Process process = builder.start();\r\n",
                        "nextNode": "builder"
                    },
                    {
                        "name": "builder",
                        "type": "ProcessBuilder",
                        "context": "\r\n            ProcessBuilder builder = new ProcessBuilder(\"myCommand\");\r\n            builder.environment().put(\"SECRET_TOKEN\", encryptedToken); // Pass encrypted token\r\n            Process process = builder.start();\r\n            process.waitFor();\r\n |             ProcessBuilder builder = new ProcessBuilder(\"myCommand\");\r\n            builder.environment().put(\"SECRET_TOKEN\", encryptedToken); // Pass encrypted token\r\n            Process process = builder.start();\r\n            process.waitFor();\r\n        } catch (Exception e) {\r\n | \r\n            ProcessBuilder builder = new ProcessBuilder(\"myCommand\");\r\n            builder.environment().put(\"SECRET_TOKEN\", encryptedToken); // Pass encrypted token\r\n            Process process = builder.start();\r\n            process.waitFor();\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "keyGenerator",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "KeyGenerator.getInstance(\"AES\")",
                        "type": "KeyGenerator",
                        "context": "    private static String encryptToken(String token) throws Exception {\r\n        // Encrypt the token using AES encryption\r\n        KeyGenerator keyGenerator = KeyGenerator.getInstance(\"AES\");\r\n        keyGenerator.init(128); // Use AES-128 encryption\r\n        SecretKey key = keyGenerator.generateKey();\r\n |     private static String encryptToken(String token) throws Exception {\r\n        // Encrypt the token using AES encryption\r\n        KeyGenerator keyGenerator = KeyGenerator.getInstance(\"AES\");\r\n        keyGenerator.init(128); // Use AES-128 encryption\r\n        SecretKey key = keyGenerator.generateKey();\r\n",
                        "nextNode": "keyGenerator"
                    },
                    {
                        "name": "keyGenerator",
                        "type": "KeyGenerator",
                        "context": "        // Encrypt the token using AES encryption\r\n        KeyGenerator keyGenerator = KeyGenerator.getInstance(\"AES\");\r\n        keyGenerator.init(128); // Use AES-128 encryption\r\n        SecretKey key = keyGenerator.generateKey();\r\n\r\n |         KeyGenerator keyGenerator = KeyGenerator.getInstance(\"AES\");\r\n        keyGenerator.init(128); // Use AES-128 encryption\r\n        SecretKey key = keyGenerator.generateKey();\r\n\r\n        Cipher cipher = Cipher.getInstance(\"AES\");\r\n |         // Encrypt the token using AES encryption\r\n        KeyGenerator keyGenerator = KeyGenerator.getInstance(\"AES\");\r\n        keyGenerator.init(128); // Use AES-128 encryption\r\n        SecretKey key = keyGenerator.generateKey();\r\n\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "encryptedBytes",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "token",
                        "type": "String",
                        "context": "        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, key);\r\n        byte[] encryptedBytes = cipher.doFinal(token.getBytes());\r\n\r\n        return Base64.getEncoder().encodeToString(encryptedBytes);\r\n",
                        "nextNode": "token.getBytes()"
                    },
                    {
                        "name": "token.getBytes()",
                        "type": "byte[]",
                        "context": "        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, key);\r\n        byte[] encryptedBytes = cipher.doFinal(token.getBytes());\r\n\r\n        return Base64.getEncoder().encodeToString(encryptedBytes);\r\n",
                        "nextNode": "cipher.doFinal(token.getBytes()"
                    },
                    {
                        "name": "cipher.doFinal(token.getBytes()",
                        "type": "byte[]",
                        "context": "        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, key);\r\n        byte[] encryptedBytes = cipher.doFinal(token.getBytes());\r\n\r\n        return Base64.getEncoder().encodeToString(encryptedBytes);\r\n",
                        "nextNode": "encryptedBytes"
                    },
                    {
                        "name": "encryptedBytes",
                        "type": "Dataflow from `token` to `encryptedBytes`\nDataflow from `doFinal(...)` to `encryptedBytes`\nDataflow from `getBytes(...)` to `encryptedBytes`\nDataflow from `\"s3cr3tT0k3n\"` to `encryptedBytes`\nDataflow from `token` to `encryptedBytes`",
                        "context": "        byte[] encryptedBytes = cipher.doFinal(token.getBytes());\r\n\r\n        return Base64.getEncoder().encodeToString(encryptedBytes);\r\n    }\r\n}\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "key",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "keyGenerator.generateKey()",
                        "type": "SecretKey",
                        "context": "        KeyGenerator keyGenerator = KeyGenerator.getInstance(\"AES\");\r\n        keyGenerator.init(128); // Use AES-128 encryption\r\n        SecretKey key = keyGenerator.generateKey();\r\n\r\n        Cipher cipher = Cipher.getInstance(\"AES\");\r\n",
                        "nextNode": "key"
                    },
                    {
                        "name": "key",
                        "type": "Dataflow from `generateKey(...)` to `key`",
                        "context": "\r\n        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, key);\r\n        byte[] encryptedBytes = cipher.doFinal(token.getBytes());\r\n\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "token",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "\"s3cr3tT0k3n\"",
                        "type": "String",
                        "context": "    public static void main(String[] args) {\r\n        try {\r\n            String token = \"s3cr3tT0k3n\";\r\n            String encryptedToken = encryptToken(token);\r\n\r\n |     public static void main(String[] args) {\r\n        try {\r\n            String token = \"s3cr3tT0k3n\";\r\n            String encryptedToken = encryptToken(token);\r\n\r\n",
                        "nextNode": "token"
                    },
                    {
                        "name": "String token",
                        "type": "String",
                        "context": "    }\r\n\r\n    private static String encryptToken(String token) throws Exception {\r\n        // Encrypt the token using AES encryption\r\n        KeyGenerator keyGenerator = KeyGenerator.getInstance(\"AES\");\r\n",
                        "nextNode": "token"
                    },
                    {
                        "name": "token",
                        "type": "Dataflow from `\"s3cr3tT0k3n\"` to `token`",
                        "context": "        try {\r\n            String token = \"s3cr3tT0k3n\";\r\n            String encryptedToken = encryptToken(token);\r\n\r\n            ProcessBuilder builder = new ProcessBuilder(\"myCommand\");\r\n |         try {\r\n            String token = \"s3cr3tT0k3n\";\r\n            String encryptedToken = encryptToken(token);\r\n\r\n            ProcessBuilder builder = new ProcessBuilder(\"myCommand\");\r\n |         Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, key);\r\n        byte[] encryptedBytes = cipher.doFinal(token.getBytes());\r\n\r\n        return Base64.getEncoder().encodeToString(encryptedBytes);\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "myCommand",
                "isSensitive": "no"
            },
            {
                "name": "SECRET_TOKEN",
                "isSensitive": "no"
            },
            {
                "name": "s3cr3tT0k3n",
                "isSensitive": "yes"
            },
            {
                "name": "AES",
                "isSensitive": "yes"
            }
        ],
        "comments": [
            {
                "name": "Pass encrypted token",
                "isSensitive": "no"
            },
            {
                "name": "Encrypt the token using AES encryption",
                "isSensitive": "no"
            },
            {
                "name": "Use AES-128 encryption",
                "isSensitive": "no"
            }
        ],
        "sinks": [
            {
                "name": "init",
                "isSink": "no"
            },
            {
                "name": "printStackTrace",
                "isSink": "yes"
            },
            {
                "name": "start",
                "isSink": "yes"
            },
            {
                "name": "encodeToString",
                "isSink": "no"
            },
            {
                "name": "put",
                "isSink": "yes"
            },
            {
                "name": "getBytes",
                "isSink": "no"
            },
            {
                "name": "doFinal",
                "isSink": "no"
            },
            {
                "name": "generateKey",
                "isSink": "no"
            },
            {
                "name": "environment",
                "isSink": "no"
            },
            {
                "name": "getEncoder",
                "isSink": "no"
            },
            {
                "name": "getInstance",
                "isSink": "no"
            },
            {
                "name": "encryptToken",
                "isSink": "no"
            },
            {
                "name": "waitFor",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "BAD_APIEndpointDebugging.java",
        "variables": [
            {
                "name": "args",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "apiEndpoint",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "\"https://api.example.com/data\"",
                        "type": "String",
                        "context": "\r\n    public static void main(String[] args) {\r\n        String apiEndpoint = \"https://api.example.com/data\";\r\n        String apiKey = \"api_key_123456789\"; \r\n\r\n",
                        "nextNode": "apiEndpoint"
                    },
                    {
                        "name": "apiEndpoint",
                        "type": "Dataflow from `\"https://api.example.com/data\"` to `apiEndpoint`",
                        "context": "\r\n        if (API_DEBUG) {\r\n            testAPI(apiEndpoint, apiKey);\r\n        }\r\n    }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "apiKey",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "\"api_key_123456789\"",
                        "type": "String",
                        "context": "    public static void main(String[] args) {\r\n        String apiEndpoint = \"https://api.example.com/data\";\r\n        String apiKey = \"api_key_123456789\"; \r\n\r\n        if (API_DEBUG) {\r\n",
                        "nextNode": "apiKey"
                    },
                    {
                        "name": "apiKey",
                        "type": "Dataflow from `\"api_key_123456789\"` to `apiKey`",
                        "context": "\r\n        if (API_DEBUG) {\r\n            testAPI(apiEndpoint, apiKey);\r\n        }\r\n    }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "API_DEBUG",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "Boolean.parseBoolean(System.getenv(\"API_DEBUG\")",
                        "type": "Boolean",
                        "context": "public class BAD_APIEndpointDebugging {\r\n    private static final boolean API_DEBUG = Boolean.parseBoolean(System.getenv(\"API_DEBUG\"));\r\n\r\n    public static void main(String[] args) {\r\n",
                        "nextNode": "API_DEBUG"
                    },
                    {
                        "name": "API_DEBUG",
                        "type": "Boolean",
                        "context": "public class BAD_APIEndpointDebugging {\r\n    private static final boolean API_DEBUG = Boolean.parseBoolean(System.getenv(\"API_DEBUG\"));\r\n\r\n    public static void main(String[] args) {\r\n |         String apiKey = \"api_key_123456789\"; \r\n\r\n        if (API_DEBUG) {\r\n            testAPI(apiEndpoint, apiKey);\r\n        }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "url",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "apiEndpoint",
                        "type": "String",
                        "context": "\r\n        if (API_DEBUG) {\r\n            testAPI(apiEndpoint, apiKey);\r\n        }\r\n    }\r\n",
                        "nextNode": "String url"
                    },
                    {
                        "name": "String url",
                        "type": "String",
                        "context": "    }\r\n\r\n    private static void testAPI(String url, String key) {\r\n        System.out.println(\"DEBUG: Testing API endpoint: \" + url + \" with API Key: \" + key);\r\n        // Assume some testing logic here\r\n",
                        "nextNode": "url"
                    },
                    {
                        "name": "url",
                        "type": "Dataflow from `apiEndpoint` to `url`\nDataflow from `\"https://api.example.com/data\"` to `url`",
                        "context": "\r\n    private static void testAPI(String url, String key) {\r\n        System.out.println(\"DEBUG: Testing API endpoint: \" + url + \" with API Key: \" + key);\r\n        // Assume some testing logic here\r\n    }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "key",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "apiKey",
                        "type": "String",
                        "context": "\r\n        if (API_DEBUG) {\r\n            testAPI(apiEndpoint, apiKey);\r\n        }\r\n    }\r\n",
                        "nextNode": "String key"
                    },
                    {
                        "name": "String key",
                        "type": "String",
                        "context": "    }\r\n\r\n    private static void testAPI(String url, String key) {\r\n        System.out.println(\"DEBUG: Testing API endpoint: \" + url + \" with API Key: \" + key);\r\n        // Assume some testing logic here\r\n",
                        "nextNode": "key"
                    },
                    {
                        "name": "key",
                        "type": "Dataflow from `apiKey` to `key`\nDataflow from `\"api_key_123456789\"` to `key`",
                        "context": "\r\n    private static void testAPI(String url, String key) {\r\n        System.out.println(\"DEBUG: Testing API endpoint: \" + url + \" with API Key: \" + key);\r\n        // Assume some testing logic here\r\n    }\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "api_key_123456789",
                "isSensitive": "yes"
            },
            {
                "name": "DEBUG: Testing API endpoint:",
                "isSensitive": "no"
            },
            {
                "name": "https://api.example.com/data",
                "isSensitive": "yes"
            },
            {
                "name": "with API Key:",
                "isSensitive": "no"
            },
            {
                "name": "API_DEBUG",
                "isSensitive": "no"
            }
        ],
        "comments": [
            {
                "name": "Assume some testing logic here",
                "isSensitive": "no"
            }
        ],
        "sinks": [
            {
                "name": "println",
                "isSink": "yes"
            },
            {
                "name": "parseBoolean",
                "isSink": "no"
            },
            {
                "name": "testAPI",
                "isSink": "no"
            },
            {
                "name": "getenv",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "BAD_DataProcessor.java",
        "variables": [
            {
                "name": "args",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "data",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "\"sensitiveDataString\"",
                        "type": "String",
                        "context": "    public static void main(String[] args) {\r\n        try {\r\n            processData(\"sensitiveDataString\");\r\n        } catch (DataProcessingException e) {\r\n            if (DATA_PROCESSING_DEBUG) {\r\n",
                        "nextNode": "String data"
                    },
                    {
                        "name": "String data",
                        "type": "String",
                        "context": "    }\r\n\r\n    private static void processData(String data) throws DataProcessingException {\r\n        // Simulating a processing error\r\n        throw new DataProcessingException(\"Processing failed at index: 10\", data.substring(5, 15));\r\n",
                        "nextNode": "data"
                    },
                    {
                        "name": "data",
                        "type": "Dataflow from `\"sensitiveDataString\"` to `data`",
                        "context": "    private static void processData(String data) throws DataProcessingException {\r\n        // Simulating a processing error\r\n        throw new DataProcessingException(\"Processing failed at index: 10\", data.substring(5, 15));\r\n    }\r\n\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "DATA_PROCESSING_DEBUG",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "Boolean.parseBoolean(System.getProperty(\"DATA_PROCESSING_DEBUG\", \"false\")",
                        "type": "Boolean",
                        "context": "public class BAD_DataProcessor {\r\n    private static final boolean DATA_PROCESSING_DEBUG = Boolean.parseBoolean(System.getProperty(\"DATA_PROCESSING_DEBUG\", \"false\"));\r\n\r\n    public static void main(String[] args) {\r\n",
                        "nextNode": "DATA_PROCESSING_DEBUG"
                    },
                    {
                        "name": "DATA_PROCESSING_DEBUG",
                        "type": "Boolean",
                        "context": "public class BAD_DataProcessor {\r\n    private static final boolean DATA_PROCESSING_DEBUG = Boolean.parseBoolean(System.getProperty(\"DATA_PROCESSING_DEBUG\", \"false\"));\r\n\r\n    public static void main(String[] args) {\r\n |             processData(\"sensitiveDataString\");\r\n        } catch (DataProcessingException e) {\r\n            if (DATA_PROCESSING_DEBUG) {\r\n                System.err.println(\"DEBUG: Error processing data: \" + e.getDataSnippet());\r\n            }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "e",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "dataSnippet",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "data",
                        "type": "String",
                        "context": "    private static void processData(String data) throws DataProcessingException {\r\n        // Simulating a processing error\r\n        throw new DataProcessingException(\"Processing failed at index: 10\", data.substring(5, 15));\r\n    }\r\n\r\n",
                        "nextNode": "data.substring(5, 15)"
                    },
                    {
                        "name": "data.substring(5, 15)",
                        "type": "String",
                        "context": "    private static void processData(String data) throws DataProcessingException {\r\n        // Simulating a processing error\r\n        throw new DataProcessingException(\"Processing failed at index: 10\", data.substring(5, 15));\r\n    }\r\n\r\n",
                        "nextNode": "String dataSnippet"
                    },
                    {
                        "name": "String dataSnippet",
                        "type": "String",
                        "context": "        private String dataSnippet;\r\n\r\n        public DataProcessingException(String message, String dataSnippet) {\r\n            super(message);\r\n            this.dataSnippet = dataSnippet;\r\n",
                        "nextNode": "dataSnippet"
                    },
                    {
                        "name": "dataSnippet",
                        "type": "Dataflow from `data` to `dataSnippet`\nDataflow from `substring(...)` to `dataSnippet`\nDataflow from `\"sensitiveDataString\"` to `dataSnippet`\nDataflow from `5` to `dataSnippet`\nDataflow from `15` to `dataSnippet`",
                        "context": "        public DataProcessingException(String message, String dataSnippet) {\r\n            super(message);\r\n            this.dataSnippet = dataSnippet;\r\n        }\r\n\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "message",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "\"Processing failed at index: 10\"",
                        "type": "String",
                        "context": "    private static void processData(String data) throws DataProcessingException {\r\n        // Simulating a processing error\r\n        throw new DataProcessingException(\"Processing failed at index: 10\", data.substring(5, 15));\r\n    }\r\n\r\n",
                        "nextNode": "String message"
                    },
                    {
                        "name": "String message",
                        "type": "String",
                        "context": "        private String dataSnippet;\r\n\r\n        public DataProcessingException(String message, String dataSnippet) {\r\n            super(message);\r\n            this.dataSnippet = dataSnippet;\r\n",
                        "nextNode": "message"
                    },
                    {
                        "name": "message",
                        "type": "Dataflow from `\"Processing failed at index: 10\"` to `message`",
                        "context": "\r\n        public DataProcessingException(String message, String dataSnippet) {\r\n            super(message);\r\n            this.dataSnippet = dataSnippet;\r\n        }\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "Processing failed at index: 10",
                "isSensitive": "no"
            },
            {
                "name": "sensitiveDataString",
                "isSensitive": "yes"
            },
            {
                "name": "DATA_PROCESSING_DEBUG",
                "isSensitive": "no"
            },
            {
                "name": "false",
                "isSensitive": "no"
            },
            {
                "name": "DEBUG: Error processing data:",
                "isSensitive": "no"
            }
        ],
        "comments": [
            {
                "name": "Simulating a processing error",
                "isSensitive": "no"
            }
        ],
        "sinks": [
            {
                "name": "println",
                "isSink": "yes"
            },
            {
                "name": "getProperty",
                "isSink": "no"
            },
            {
                "name": "processData",
                "isSink": "no"
            },
            {
                "name": "getDataSnippet",
                "isSink": "no"
            },
            {
                "name": "parseBoolean",
                "isSink": "no"
            },
            {
                "name": "substring",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "BAD_DebugFeatureToggle.java",
        "variables": [
            {
                "name": "DEBUG_FEATURE_TOGGLE",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "Boolean.parseBoolean(System.getProperty(\"DEBUG_FEATURE_TOGGLE\", \"false\")",
                        "type": "Boolean",
                        "context": "public class BAD_DebugFeatureToggle {\r\n    private static final boolean DEBUG_FEATURE_TOGGLE = Boolean.parseBoolean(System.getProperty(\"DEBUG_FEATURE_TOGGLE\", \"false\"));\r\n\r\n    public static void main(String[] args) {\r\n",
                        "nextNode": "DEBUG_FEATURE_TOGGLE"
                    },
                    {
                        "name": "DEBUG_FEATURE_TOGGLE",
                        "type": "Boolean",
                        "context": "public class BAD_DebugFeatureToggle {\r\n    private static final boolean DEBUG_FEATURE_TOGGLE = Boolean.parseBoolean(System.getProperty(\"DEBUG_FEATURE_TOGGLE\", \"false\"));\r\n\r\n    public static void main(String[] args) {\r\n |         String userSSN = \"123-45-6789\";\r\n\r\n        if (DEBUG_FEATURE_TOGGLE) {\r\n            System.out.println(\"DEBUG: User SSN for troubleshooting: \" + userSSN);\r\n        }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "args",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "userSSN",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "\"123-45-6789\"",
                        "type": "String",
                        "context": "\r\n    public static void main(String[] args) {\r\n        String userSSN = \"123-45-6789\";\r\n\r\n        if (DEBUG_FEATURE_TOGGLE) {\r\n",
                        "nextNode": "userSSN"
                    },
                    {
                        "name": "userSSN",
                        "type": "Dataflow from `\"123-45-6789\"` to `userSSN`",
                        "context": "\r\n        if (DEBUG_FEATURE_TOGGLE) {\r\n            System.out.println(\"DEBUG: User SSN for troubleshooting: \" + userSSN);\r\n        }\r\n\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "DEBUG_FEATURE_TOGGLE",
                "isSensitive": "no"
            },
            {
                "name": "DEBUG: User SSN for troubleshooting:",
                "isSensitive": "no"
            },
            {
                "name": "false",
                "isSensitive": "no"
            },
            {
                "name": "123-45-6789",
                "isSensitive": "yes"
            }
        ],
        "comments": [
            {
                "name": "Code to handle sensitive personal information",
                "isSensitive": "no"
            }
        ],
        "sinks": [
            {
                "name": "println",
                "isSink": "yes"
            },
            {
                "name": "getProperty",
                "isSink": "no"
            },
            {
                "name": "parseBoolean",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "BAD_DebugLoggingEnabled.java",
        "variables": [
            {
                "name": "args",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "accessToken",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "System.getenv(\"ACCESS_TOKEN\")",
                        "type": "String",
                        "context": "\r\n    public static void main(String[] args) {\r\n        String accessToken = System.getenv(\"ACCESS_TOKEN\");\r\n\r\n        if (DEBUG_LOGGING_ENABLED) {\r\n",
                        "nextNode": "accessToken"
                    },
                    {
                        "name": "accessToken",
                        "type": "Dataflow from `getenv(...)` to `accessToken`\nDataflow from `\"ACCESS_TOKEN\"` to `accessToken`",
                        "context": "\r\n        if (DEBUG_LOGGING_ENABLED) {\r\n            System.out.println(\"DEBUG: Access Token: \" + accessToken);\r\n        }\r\n\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "DEBUG_LOGGING_ENABLED",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "Boolean.parseBoolean(System.getenv(\"DEBUG_LOGGING_ENABLED\")",
                        "type": "Boolean",
                        "context": "public class BAD_DebugLoggingEnabled {\r\n    private static final boolean DEBUG_LOGGING_ENABLED = Boolean.parseBoolean(System.getenv(\"DEBUG_LOGGING_ENABLED\"));\r\n\r\n    public static void main(String[] args) {\r\n",
                        "nextNode": "DEBUG_LOGGING_ENABLED"
                    },
                    {
                        "name": "DEBUG_LOGGING_ENABLED",
                        "type": "Boolean",
                        "context": "public class BAD_DebugLoggingEnabled {\r\n    private static final boolean DEBUG_LOGGING_ENABLED = Boolean.parseBoolean(System.getenv(\"DEBUG_LOGGING_ENABLED\"));\r\n\r\n    public static void main(String[] args) {\r\n |         String accessToken = System.getenv(\"ACCESS_TOKEN\");\r\n\r\n        if (DEBUG_LOGGING_ENABLED) {\r\n            System.out.println(\"DEBUG: Access Token: \" + accessToken);\r\n        }\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "DEBUG: Access Token:",
                "isSensitive": "no"
            },
            {
                "name": "ACCESS_TOKEN",
                "isSensitive": "no"
            },
            {
                "name": "DEBUG_LOGGING_ENABLED",
                "isSensitive": "no"
            }
        ],
        "comments": [
            {
                "name": "Code to handle the access token",
                "isSensitive": "no"
            }
        ],
        "sinks": [
            {
                "name": "println",
                "isSink": "yes"
            },
            {
                "name": "parseBoolean",
                "isSink": "no"
            },
            {
                "name": "getenv",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "BAD_DebugLoggingSensitiveInfo.java",
        "variables": [
            {
                "name": "args",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "password",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "System.getProperty(\"password\", \"defaultPass\")",
                        "type": "String",
                        "context": "        // Fetching username and password from system properties or defaulting to safe values\r\n        String username = System.getProperty(\"username\", \"defaultUser\");\r\n        String password = System.getProperty(\"password\", \"defaultPass\");\r\n\r\n        if (DEBUG_FLAG) {\r\n |         // Fetching username and password from system properties or defaulting to safe values\r\n        String username = System.getProperty(\"username\", \"defaultUser\");\r\n        String password = System.getProperty(\"password\", \"defaultPass\");\r\n\r\n        if (DEBUG_FLAG) {\r\n",
                        "nextNode": "password"
                    },
                    {
                        "name": "password",
                        "type": "Dataflow from `getProperty(...)` to `password`\nDataflow from `\"defaultPass\"` to `password`\nDataflow from `\"password\"` to `password`",
                        "context": "\r\n        if (DEBUG_FLAG) {\r\n            System.out.println(\"DEBUG: Attempting login with username: \" + username + \" and password: \" + password);\r\n        }\r\n\r\n | \r\n        // Placeholder for login logic\r\n        performLogin(username, password);\r\n    }\r\n\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "DEBUG_FLAG",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "System.getProperty(\"debugMode\", \"false\").equalsIgnoreCase(\"true\")",
                        "type": "Boolean",
                        "context": "public class BAD_DebugLoggingSensitiveInfo {\r\n    private static final boolean DEBUG_FLAG = System.getProperty(\"debugMode\", \"false\").equalsIgnoreCase(\"true\"); // Debugging flag, should be false in production\r\n\r\n    public static void main(String[] args) {\r\n",
                        "nextNode": "DEBUG_FLAG"
                    },
                    {
                        "name": "DEBUG_FLAG",
                        "type": "Boolean",
                        "context": "public class BAD_DebugLoggingSensitiveInfo {\r\n    private static final boolean DEBUG_FLAG = System.getProperty(\"debugMode\", \"false\").equalsIgnoreCase(\"true\"); // Debugging flag, should be false in production\r\n\r\n    public static void main(String[] args) {\r\n |         String password = System.getProperty(\"password\", \"defaultPass\");\r\n\r\n        if (DEBUG_FLAG) {\r\n            System.out.println(\"DEBUG: Attempting login with username: \" + username + \" and password: \" + password);\r\n        }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "username",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "System.getProperty(\"username\", \"defaultUser\")",
                        "type": "String",
                        "context": "    public static void main(String[] args) {\r\n        // Fetching username and password from system properties or defaulting to safe values\r\n        String username = System.getProperty(\"username\", \"defaultUser\");\r\n        String password = System.getProperty(\"password\", \"defaultPass\");\r\n\r\n |     public static void main(String[] args) {\r\n        // Fetching username and password from system properties or defaulting to safe values\r\n        String username = System.getProperty(\"username\", \"defaultUser\");\r\n        String password = System.getProperty(\"password\", \"defaultPass\");\r\n\r\n",
                        "nextNode": "username"
                    },
                    {
                        "name": "username",
                        "type": "Dataflow from `getProperty(...)` to `username`\nDataflow from `\"defaultUser\"` to `username`\nDataflow from `\"username\"` to `username`",
                        "context": "\r\n        if (DEBUG_FLAG) {\r\n            System.out.println(\"DEBUG: Attempting login with username: \" + username + \" and password: \" + password);\r\n        }\r\n\r\n | \r\n        // Placeholder for login logic\r\n        performLogin(username, password);\r\n    }\r\n\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "defaultPass",
                "isSensitive": "yes"
            },
            {
                "name": "password",
                "isSensitive": "no"
            },
            {
                "name": "true",
                "isSensitive": "no"
            },
            {
                "name": "false",
                "isSensitive": "no"
            },
            {
                "name": "defaultUser",
                "isSensitive": "yes"
            },
            {
                "name": "and password:",
                "isSensitive": "no"
            },
            {
                "name": "debugMode",
                "isSensitive": "no"
            },
            {
                "name": "username",
                "isSensitive": "no"
            },
            {
                "name": "DEBUG: Attempting login with username:",
                "isSensitive": "no"
            }
        ],
        "comments": [
            {
                "name": "Placeholder for login logic",
                "isSensitive": "no"
            },
            {
                "name": "Placeholder for actual login logic",
                "isSensitive": "no"
            },
            {
                "name": "Debugging flag, should be false in production",
                "isSensitive": "no"
            },
            {
                "name": "Fetching username and password from system properties or defaulting to safe values",
                "isSensitive": "no"
            }
        ],
        "sinks": [
            {
                "name": "println",
                "isSink": "yes"
            },
            {
                "name": "getProperty",
                "isSink": "no"
            },
            {
                "name": "equalsIgnoreCase",
                "isSink": "no"
            },
            {
                "name": "performLogin",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "BAD_DebugModeActive.java",
        "variables": [
            {
                "name": "args",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "DEBUG_MODE_ACTIVE",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "System.getProperty(\"DEBUG_MODE_ACTIVE\", \"false\").equalsIgnoreCase(\"true\")",
                        "type": "Boolean",
                        "context": "public class BAD_DebugModeActive {\r\n    private static final boolean DEBUG_MODE_ACTIVE = System.getProperty(\"DEBUG_MODE_ACTIVE\", \"false\").equalsIgnoreCase(\"true\");\r\n\r\n    public static void main(String[] args) {\r\n",
                        "nextNode": "DEBUG_MODE_ACTIVE"
                    },
                    {
                        "name": "DEBUG_MODE_ACTIVE",
                        "type": "Boolean",
                        "context": "public class BAD_DebugModeActive {\r\n    private static final boolean DEBUG_MODE_ACTIVE = System.getProperty(\"DEBUG_MODE_ACTIVE\", \"false\").equalsIgnoreCase(\"true\");\r\n\r\n    public static void main(String[] args) {\r\n | \r\n        // Debug condition\r\n        if (DEBUG_MODE_ACTIVE) {\r\n            System.out.println(\"DEBUG: Using encryption key: \" + encryptionKey);\r\n        }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "encryptionKey",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "\"ABCD-1234-EFGH-5678\"",
                        "type": "String",
                        "context": "\r\n    public static void main(String[] args) {\r\n        String encryptionKey = \"ABCD-1234-EFGH-5678\";\r\n\r\n        // Debug condition\r\n",
                        "nextNode": "encryptionKey"
                    },
                    {
                        "name": "encryptionKey",
                        "type": "Dataflow from `\"ABCD-1234-EFGH-5678\"` to `encryptionKey`",
                        "context": "        // Debug condition\r\n        if (DEBUG_MODE_ACTIVE) {\r\n            System.out.println(\"DEBUG: Using encryption key: \" + encryptionKey);\r\n        }\r\n\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "ABCD-1234-EFGH-5678",
                "isSensitive": "yes"
            },
            {
                "name": "true",
                "isSensitive": "no"
            },
            {
                "name": "false",
                "isSensitive": "no"
            },
            {
                "name": "DEBUG_MODE_ACTIVE",
                "isSensitive": "no"
            },
            {
                "name": "DEBUG: Using encryption key:",
                "isSensitive": "no"
            }
        ],
        "comments": [
            {
                "name": "Debug condition",
                "isSensitive": "no"
            },
            {
                "name": "Placeholder for encryption routine",
                "isSensitive": "no"
            }
        ],
        "sinks": [
            {
                "name": "println",
                "isSink": "yes"
            },
            {
                "name": "getProperty",
                "isSink": "no"
            },
            {
                "name": "equalsIgnoreCase",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "BAD_DebugOutputWithCredentials.java",
        "variables": [
            {
                "name": "args",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "password",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "\"MorningDew2024\"",
                        "type": "String",
                        "context": "\r\n    public static void main(String[] args) {\r\n        authenticateUser(\"admin\", \"MorningDew2024\");\r\n\r\n        authenticateUser(\"admin\", \"SummerSunshine20\");\r\n | \r\n    public static void main(String[] args) {\r\n        authenticateUser(\"admin\", \"MorningDew2024\");\r\n\r\n        authenticateUser(\"admin\", \"SummerSunshine20\");\r\n",
                        "nextNode": "String password"
                    },
                    {
                        "name": "String password",
                        "type": "String",
                        "context": "    private static final Map<String, String> userStore = new HashMap<>();\r\n\r\n    public static boolean authenticateUser(String username, String password) {\r\n        // Simulated authentication logic\r\n        boolean isAuthenticated = userStore.containsKey(username) && userStore.get(username).equals(password);\r\n |     private static final Map<String, String> userStore = new HashMap<>();\r\n\r\n    public static boolean authenticateUser(String username, String password) {\r\n        // Simulated authentication logic\r\n        boolean isAuthenticated = userStore.containsKey(username) && userStore.get(username).equals(password);\r\n",
                        "nextNode": "password"
                    },
                    {
                        "name": "password",
                        "type": "Dataflow from `\"MorningDew2024\"` to `password`\nDataflow from `\"SummerSunshine20\"` to `password`",
                        "context": "    public static boolean authenticateUser(String username, String password) {\r\n        // Simulated authentication logic\r\n        boolean isAuthenticated = userStore.containsKey(username) && userStore.get(username).equals(password);\r\n\r\n        if (DEBUG_ENABLED) {\r\n |                 System.out.println(\"DEBUG: Authentication succeeded for user: \" + username);\r\n            } else {\r\n                System.out.println(\"DEBUG: Authentication failed for user: \" + username + \" with password: \" + password);\r\n            }\r\n        }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "userStore",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "new HashMap<>()",
                        "type": "HashMap",
                        "context": "public class BAD_DebugOutputWithCredentials {\r\n    private static final boolean DEBUG_ENABLED = true; // Debugging flag, should be false in production\r\n    private static final Map<String, String> userStore = new HashMap<>();\r\n\r\n    public static boolean authenticateUser(String username, String password) {\r\n | public class BAD_DebugOutputWithCredentials {\r\n    private static final boolean DEBUG_ENABLED = true; // Debugging flag, should be false in production\r\n    private static final Map<String, String> userStore = new HashMap<>();\r\n\r\n    public static boolean authenticateUser(String username, String password) {\r\n",
                        "nextNode": "userStore"
                    },
                    {
                        "name": "userStore",
                        "type": "HashMap",
                        "context": "public class BAD_DebugOutputWithCredentials {\r\n    private static final boolean DEBUG_ENABLED = true; // Debugging flag, should be false in production\r\n    private static final Map<String, String> userStore = new HashMap<>();\r\n\r\n    public static boolean authenticateUser(String username, String password) {\r\n |     public static boolean authenticateUser(String username, String password) {\r\n        // Simulated authentication logic\r\n        boolean isAuthenticated = userStore.containsKey(username) && userStore.get(username).equals(password);\r\n\r\n        if (DEBUG_ENABLED) {\r\n | public class BAD_DebugOutputWithCredentials {\r\n    private static final boolean DEBUG_ENABLED = true; // Debugging flag, should be false in production\r\n    private static final Map<String, String> userStore = new HashMap<>();\r\n\r\n    public static boolean authenticateUser(String username, String password) {\r\n |     public static boolean authenticateUser(String username, String password) {\r\n        // Simulated authentication logic\r\n        boolean isAuthenticated = userStore.containsKey(username) && userStore.get(username).equals(password);\r\n\r\n        if (DEBUG_ENABLED) {\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "DEBUG_ENABLED",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "true",
                        "type": "Boolean",
                        "context": "\r\npublic class BAD_DebugOutputWithCredentials {\r\n    private static final boolean DEBUG_ENABLED = true; // Debugging flag, should be false in production\r\n    private static final Map<String, String> userStore = new HashMap<>();\r\n\r\n",
                        "nextNode": "DEBUG_ENABLED"
                    },
                    {
                        "name": "DEBUG_ENABLED",
                        "type": "Boolean",
                        "context": "\r\npublic class BAD_DebugOutputWithCredentials {\r\n    private static final boolean DEBUG_ENABLED = true; // Debugging flag, should be false in production\r\n    private static final Map<String, String> userStore = new HashMap<>();\r\n\r\n |         boolean isAuthenticated = userStore.containsKey(username) && userStore.get(username).equals(password);\r\n\r\n        if (DEBUG_ENABLED) {\r\n            if (isAuthenticated) {\r\n                System.out.println(\"DEBUG: Authentication succeeded for user: \" + username);\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "isAuthenticated",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "username",
                        "type": "String",
                        "context": "    public static boolean authenticateUser(String username, String password) {\r\n        // Simulated authentication logic\r\n        boolean isAuthenticated = userStore.containsKey(username) && userStore.get(username).equals(password);\r\n\r\n        if (DEBUG_ENABLED) {\r\n |     public static boolean authenticateUser(String username, String password) {\r\n        // Simulated authentication logic\r\n        boolean isAuthenticated = userStore.containsKey(username) && userStore.get(username).equals(password);\r\n\r\n        if (DEBUG_ENABLED) {\r\n",
                        "nextNode": "userStore.containsKey(username)"
                    },
                    {
                        "name": "userStore.containsKey(username)",
                        "type": "Boolean",
                        "context": "    public static boolean authenticateUser(String username, String password) {\r\n        // Simulated authentication logic\r\n        boolean isAuthenticated = userStore.containsKey(username) && userStore.get(username).equals(password);\r\n\r\n        if (DEBUG_ENABLED) {\r\n |     public static boolean authenticateUser(String username, String password) {\r\n        // Simulated authentication logic\r\n        boolean isAuthenticated = userStore.containsKey(username) && userStore.get(username).equals(password);\r\n\r\n        if (DEBUG_ENABLED) {\r\n",
                        "nextNode": "userStore.containsKey(username) && userStore.get(username).equals(password)"
                    },
                    {
                        "name": "userStore.containsKey(username) && userStore.get(username).equals(password)",
                        "type": "Boolean",
                        "context": "    public static boolean authenticateUser(String username, String password) {\r\n        // Simulated authentication logic\r\n        boolean isAuthenticated = userStore.containsKey(username) && userStore.get(username).equals(password);\r\n\r\n        if (DEBUG_ENABLED) {\r\n |     public static boolean authenticateUser(String username, String password) {\r\n        // Simulated authentication logic\r\n        boolean isAuthenticated = userStore.containsKey(username) && userStore.get(username).equals(password);\r\n\r\n        if (DEBUG_ENABLED) {\r\n",
                        "nextNode": "isAuthenticated"
                    },
                    {
                        "name": "isAuthenticated",
                        "type": "Dataflow from `username` to `isAuthenticated`\nDataflow from `password` to `isAuthenticated`\nDataflow from `containsKey(...)` to `isAuthenticated`\nDataflow from `equals(...)` to `isAuthenticated`\nDataflow from `\"admin\"` to `isAuthenticated`\nDataflow from `\"MorningDew2024\"` to `isAuthenticated`\nDataflow from `\"admin\"` to `isAuthenticated`\nDataflow from `\"SummerSunshine20\"` to `isAuthenticated`",
                        "context": "\r\n        if (DEBUG_ENABLED) {\r\n            if (isAuthenticated) {\r\n                System.out.println(\"DEBUG: Authentication succeeded for user: \" + username);\r\n            } else {\r\n |         }\r\n\r\n        return isAuthenticated;\r\n    }\r\n\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "username",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "\"admin\"",
                        "type": "String",
                        "context": "\r\n    public static void main(String[] args) {\r\n        authenticateUser(\"admin\", \"MorningDew2024\");\r\n\r\n        authenticateUser(\"admin\", \"SummerSunshine20\");\r\n | \r\n    public static void main(String[] args) {\r\n        authenticateUser(\"admin\", \"MorningDew2024\");\r\n\r\n        authenticateUser(\"admin\", \"SummerSunshine20\");\r\n | \r\n    public static void main(String[] args) {\r\n        authenticateUser(\"admin\", \"MorningDew2024\");\r\n\r\n        authenticateUser(\"admin\", \"SummerSunshine20\");\r\n | \r\n    public static void main(String[] args) {\r\n        authenticateUser(\"admin\", \"MorningDew2024\");\r\n\r\n        authenticateUser(\"admin\", \"SummerSunshine20\");\r\n",
                        "nextNode": "String username"
                    },
                    {
                        "name": "String username",
                        "type": "String",
                        "context": "    private static final Map<String, String> userStore = new HashMap<>();\r\n\r\n    public static boolean authenticateUser(String username, String password) {\r\n        // Simulated authentication logic\r\n        boolean isAuthenticated = userStore.containsKey(username) && userStore.get(username).equals(password);\r\n |     private static final Map<String, String> userStore = new HashMap<>();\r\n\r\n    public static boolean authenticateUser(String username, String password) {\r\n        // Simulated authentication logic\r\n        boolean isAuthenticated = userStore.containsKey(username) && userStore.get(username).equals(password);\r\n |     private static final Map<String, String> userStore = new HashMap<>();\r\n\r\n    public static boolean authenticateUser(String username, String password) {\r\n        // Simulated authentication logic\r\n        boolean isAuthenticated = userStore.containsKey(username) && userStore.get(username).equals(password);\r\n |     private static final Map<String, String> userStore = new HashMap<>();\r\n\r\n    public static boolean authenticateUser(String username, String password) {\r\n        // Simulated authentication logic\r\n        boolean isAuthenticated = userStore.containsKey(username) && userStore.get(username).equals(password);\r\n",
                        "nextNode": "username"
                    },
                    {
                        "name": "username",
                        "type": "Dataflow from `\"admin\"` to `username`\nDataflow from `\"admin\"` to `username`",
                        "context": "    public static boolean authenticateUser(String username, String password) {\r\n        // Simulated authentication logic\r\n        boolean isAuthenticated = userStore.containsKey(username) && userStore.get(username).equals(password);\r\n\r\n        if (DEBUG_ENABLED) {\r\n |     public static boolean authenticateUser(String username, String password) {\r\n        // Simulated authentication logic\r\n        boolean isAuthenticated = userStore.containsKey(username) && userStore.get(username).equals(password);\r\n\r\n        if (DEBUG_ENABLED) {\r\n |     public static boolean authenticateUser(String username, String password) {\r\n        // Simulated authentication logic\r\n        boolean isAuthenticated = userStore.containsKey(username) && userStore.get(username).equals(password);\r\n\r\n        if (DEBUG_ENABLED) {\r\n |     public static boolean authenticateUser(String username, String password) {\r\n        // Simulated authentication logic\r\n        boolean isAuthenticated = userStore.containsKey(username) && userStore.get(username).equals(password);\r\n\r\n        if (DEBUG_ENABLED) {\r\n |         if (DEBUG_ENABLED) {\r\n            if (isAuthenticated) {\r\n                System.out.println(\"DEBUG: Authentication succeeded for user: \" + username);\r\n            } else {\r\n                System.out.println(\"DEBUG: Authentication failed for user: \" + username + \" with password: \" + password);\r\n |     public static boolean authenticateUser(String username, String password) {\r\n        // Simulated authentication logic\r\n        boolean isAuthenticated = userStore.containsKey(username) && userStore.get(username).equals(password);\r\n\r\n        if (DEBUG_ENABLED) {\r\n |                 System.out.println(\"DEBUG: Authentication succeeded for user: \" + username);\r\n            } else {\r\n                System.out.println(\"DEBUG: Authentication failed for user: \" + username + \" with password: \" + password);\r\n            }\r\n        }\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "DEBUG: Authentication succeeded for user:",
                "isSensitive": "no"
            },
            {
                "name": "admin",
                "isSensitive": "yes"
            },
            {
                "name": "MorningDew2024",
                "isSensitive": "yes"
            },
            {
                "name": "DEBUG: Authentication failed for user:",
                "isSensitive": "no"
            },
            {
                "name": "with password:",
                "isSensitive": "no"
            },
            {
                "name": "SummerSunshine20",
                "isSensitive": "yes"
            }
        ],
        "comments": [
            {
                "name": "Simulated authentication logic",
                "isSensitive": "no"
            },
            {
                "name": "Debugging flag, should be false in production",
                "isSensitive": "no"
            }
        ],
        "sinks": [
            {
                "name": "println",
                "isSink": "yes"
            },
            {
                "name": "authenticateUser",
                "isSink": "no"
            },
            {
                "name": "containsKey",
                "isSink": "no"
            },
            {
                "name": "get",
                "isSink": "no"
            },
            {
                "name": "equals",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "BAD_ExceptionDebuggingWithSensitiveData.java",
        "variables": [
            {
                "name": "args",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "amount",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "e",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "creditCardNumber",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "DEBUG",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "false",
                        "type": "Boolean",
                        "context": "public class BAD_ExceptionDebuggingWithSensitiveData {\r\n    private static final boolean DEBUG = false; // Debugging flag, should be false in production\r\n\r\n    public static void processPayment(String creditCardNumber, double amount) {\r\n",
                        "nextNode": "DEBUG"
                    },
                    {
                        "name": "DEBUG",
                        "type": "Boolean",
                        "context": "public class BAD_ExceptionDebuggingWithSensitiveData {\r\n    private static final boolean DEBUG = false; // Debugging flag, should be false in production\r\n\r\n    public static void processPayment(String creditCardNumber, double amount) {\r\n |             // Further processing logic...\r\n        } catch (Exception e) {\r\n            if (DEBUG){\r\n                System.out.println(\"DEBUG: Failed to process payment with card \" + creditCardNumber + \": \" + e.getMessage());\r\n            }\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "DEBUG: Failed to process payment with card",
                "isSensitive": "no"
            },
            {
                "name": ":",
                "isSensitive": "no"
            },
            {
                "name": "Amount must be positive.",
                "isSensitive": "no"
            },
            {
                "name": "Processing payment...",
                "isSensitive": "no"
            },
            {
                "name": "1234-5678-9012-3456",
                "isSensitive": "yes"
            }
        ],
        "comments": [
            {
                "name": "Debugging flag, should be false in production",
                "isSensitive": "no"
            },
            {
                "name": "Simulate payment processing that might fail",
                "isSensitive": "no"
            },
            {
                "name": "Further processing logic...",
                "isSensitive": "no"
            }
        ],
        "sinks": [
            {
                "name": "println",
                "isSink": "yes"
            },
            {
                "name": "getMessage",
                "isSink": "no"
            },
            {
                "name": "processPayment",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "BAD_LoginProcessorDebugging.java",
        "variables": [
            {
                "name": "args",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "password",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "e",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "DEBUG_ON_ERROR",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "Boolean.parseBoolean(System.getenv(\"DEBUG_ON_ERROR\")",
                        "type": "Boolean",
                        "context": "public class BAD_LoginProcessorDebugging {\r\n    private static final boolean DEBUG_ON_ERROR = Boolean.parseBoolean(System.getenv(\"DEBUG_ON_ERROR\"));\r\n\r\n    public static void main(String[] args) {\r\n",
                        "nextNode": "DEBUG_ON_ERROR"
                    },
                    {
                        "name": "DEBUG_ON_ERROR",
                        "type": "Boolean",
                        "context": "public class BAD_LoginProcessorDebugging {\r\n    private static final boolean DEBUG_ON_ERROR = Boolean.parseBoolean(System.getenv(\"DEBUG_ON_ERROR\"));\r\n\r\n    public static void main(String[] args) {\r\n |             authenticateUser(\"username\", \"password\");\r\n        } catch (AuthenticationException e) {\r\n            if (DEBUG_ON_ERROR) {\r\n                System.err.println(\"DEBUG: Authentication failed for user: \" + e.getUsername() + \" with error: \" + e.getMessage());\r\n            }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "message",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "\"Invalid credentials\"",
                        "type": "String",
                        "context": "    private static void authenticateUser(String username, String password) throws AuthenticationException {\r\n        // Simulate an authentication check\r\n        throw new AuthenticationException(\"Invalid credentials\", username);\r\n    }\r\n\r\n",
                        "nextNode": "String message"
                    },
                    {
                        "name": "String message",
                        "type": "String",
                        "context": "        private String username;\r\n\r\n        public AuthenticationException(String message, String username) {\r\n            super(message);\r\n            this.username = username;\r\n",
                        "nextNode": "message"
                    },
                    {
                        "name": "message",
                        "type": "Dataflow from `\"Invalid credentials\"` to `message`",
                        "context": "\r\n        public AuthenticationException(String message, String username) {\r\n            super(message);\r\n            this.username = username;\r\n        }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "username",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "\"username\"",
                        "type": "String",
                        "context": "    public static void main(String[] args) {\r\n        try {\r\n            authenticateUser(\"username\", \"password\");\r\n        } catch (AuthenticationException e) {\r\n            if (DEBUG_ON_ERROR) {\r\n |     public static void main(String[] args) {\r\n        try {\r\n            authenticateUser(\"username\", \"password\");\r\n        } catch (AuthenticationException e) {\r\n            if (DEBUG_ON_ERROR) {\r\n",
                        "nextNode": "String username"
                    },
                    {
                        "name": "String username",
                        "type": "String",
                        "context": "    }\r\n\r\n    private static void authenticateUser(String username, String password) throws AuthenticationException {\r\n        // Simulate an authentication check\r\n        throw new AuthenticationException(\"Invalid credentials\", username);\r\n |     }\r\n\r\n    private static void authenticateUser(String username, String password) throws AuthenticationException {\r\n        // Simulate an authentication check\r\n        throw new AuthenticationException(\"Invalid credentials\", username);\r\n |         private String username;\r\n\r\n        public AuthenticationException(String message, String username) {\r\n            super(message);\r\n            this.username = username;\r\n",
                        "nextNode": "username"
                    },
                    {
                        "name": "username",
                        "type": "Dataflow from `\"username\"` to `username`",
                        "context": "    private static void authenticateUser(String username, String password) throws AuthenticationException {\r\n        // Simulate an authentication check\r\n        throw new AuthenticationException(\"Invalid credentials\", username);\r\n    }\r\n\r\n |     private static void authenticateUser(String username, String password) throws AuthenticationException {\r\n        // Simulate an authentication check\r\n        throw new AuthenticationException(\"Invalid credentials\", username);\r\n    }\r\n\r\n |         public AuthenticationException(String message, String username) {\r\n            super(message);\r\n            this.username = username;\r\n        }\r\n\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "password",
                "isSensitive": "yes"
            },
            {
                "name": "DEBUG_ON_ERROR",
                "isSensitive": "no"
            },
            {
                "name": "Invalid credentials",
                "isSensitive": "no"
            },
            {
                "name": "DEBUG: Authentication failed for user:",
                "isSensitive": "no"
            },
            {
                "name": "with error:",
                "isSensitive": "no"
            },
            {
                "name": "username",
                "isSensitive": "yes"
            }
        ],
        "comments": [
            {
                "name": "Simulate an authentication check",
                "isSensitive": "no"
            }
        ],
        "sinks": [
            {
                "name": "println",
                "isSink": "yes"
            },
            {
                "name": "authenticateUser",
                "isSink": "no"
            },
            {
                "name": "parseBoolean",
                "isSink": "no"
            },
            {
                "name": "getMessage",
                "isSink": "no"
            },
            {
                "name": "getenv",
                "isSink": "no"
            },
            {
                "name": "getUsername",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "BAD_NetworkDebugger.java",
        "variables": [
            {
                "name": "args",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "apiKey",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "\"b1234567-89ab-cdef-0123-456789abcdef\"",
                        "type": "String",
                        "context": "    public static void main(String[] args) {\r\n        if (NETWORK_DEBUG_MODE) {\r\n            testConnection(\"192.168.1.100\", \"b1234567-89ab-cdef-0123-456789abcdef\");\r\n        }\r\n    }\r\n",
                        "nextNode": "String apiKey"
                    },
                    {
                        "name": "String apiKey",
                        "type": "String",
                        "context": "    }\r\n\r\n    private static void testConnection(String ipAddress, String apiKey) {\r\n        System.out.println(\"DEBUG: Testing connection to IP: \" + ipAddress + \" using API Key: \" + apiKey);\r\n        // Assume network testing logic here\r\n",
                        "nextNode": "apiKey"
                    },
                    {
                        "name": "apiKey",
                        "type": "Dataflow from `\"b1234567-89ab-cdef-0123-456789abcdef\"` to `apiKey`",
                        "context": "\r\n    private static void testConnection(String ipAddress, String apiKey) {\r\n        System.out.println(\"DEBUG: Testing connection to IP: \" + ipAddress + \" using API Key: \" + apiKey);\r\n        // Assume network testing logic here\r\n    }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "NETWORK_DEBUG_MODE",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "System.getProperty(\"NETWORK_DEBUG_MODE\", \"false\").equalsIgnoreCase(\"true\")",
                        "type": "Boolean",
                        "context": "public class BAD_NetworkDebugger {\r\n    private static final boolean NETWORK_DEBUG_MODE = System.getProperty(\"NETWORK_DEBUG_MODE\", \"false\").equalsIgnoreCase(\"true\");\r\n\r\n    public static void main(String[] args) {\r\n",
                        "nextNode": "NETWORK_DEBUG_MODE"
                    },
                    {
                        "name": "NETWORK_DEBUG_MODE",
                        "type": "Boolean",
                        "context": "public class BAD_NetworkDebugger {\r\n    private static final boolean NETWORK_DEBUG_MODE = System.getProperty(\"NETWORK_DEBUG_MODE\", \"false\").equalsIgnoreCase(\"true\");\r\n\r\n    public static void main(String[] args) {\r\n | \r\n    public static void main(String[] args) {\r\n        if (NETWORK_DEBUG_MODE) {\r\n            testConnection(\"192.168.1.100\", \"b1234567-89ab-cdef-0123-456789abcdef\");\r\n        }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "ipAddress",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "\"192.168.1.100\"",
                        "type": "String",
                        "context": "    public static void main(String[] args) {\r\n        if (NETWORK_DEBUG_MODE) {\r\n            testConnection(\"192.168.1.100\", \"b1234567-89ab-cdef-0123-456789abcdef\");\r\n        }\r\n    }\r\n",
                        "nextNode": "String ipAddress"
                    },
                    {
                        "name": "String ipAddress",
                        "type": "String",
                        "context": "    }\r\n\r\n    private static void testConnection(String ipAddress, String apiKey) {\r\n        System.out.println(\"DEBUG: Testing connection to IP: \" + ipAddress + \" using API Key: \" + apiKey);\r\n        // Assume network testing logic here\r\n",
                        "nextNode": "ipAddress"
                    },
                    {
                        "name": "ipAddress",
                        "type": "Dataflow from `\"192.168.1.100\"` to `ipAddress`",
                        "context": "\r\n    private static void testConnection(String ipAddress, String apiKey) {\r\n        System.out.println(\"DEBUG: Testing connection to IP: \" + ipAddress + \" using API Key: \" + apiKey);\r\n        // Assume network testing logic here\r\n    }\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "using API Key:",
                "isSensitive": "no"
            },
            {
                "name": "NETWORK_DEBUG_MODE",
                "isSensitive": "no"
            },
            {
                "name": "true",
                "isSensitive": "no"
            },
            {
                "name": "false",
                "isSensitive": "no"
            },
            {
                "name": "192.168.1.100",
                "isSensitive": "yes"
            },
            {
                "name": "DEBUG: Testing connection to IP:",
                "isSensitive": "no"
            },
            {
                "name": "b1234567-89ab-cdef-0123-456789abcdef",
                "isSensitive": "yes"
            }
        ],
        "comments": [
            {
                "name": "Assume network testing logic here",
                "isSensitive": "no"
            }
        ],
        "sinks": [
            {
                "name": "println",
                "isSink": "yes"
            },
            {
                "name": "getProperty",
                "isSink": "no"
            },
            {
                "name": "testConnection",
                "isSink": "no"
            },
            {
                "name": "equalsIgnoreCase",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "GOOD_APIEndpointDebugging.java",
        "variables": [
            {
                "name": "args",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "apiEndpoint",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "\"https://api.example.com/data\"",
                        "type": "String",
                        "context": "\r\n    public static void main(String[] args) {\r\n        String apiEndpoint = \"https://api.example.com/data\";\r\n        String apiKey = \"api_key_123456789\";\r\n\r\n",
                        "nextNode": "apiEndpoint"
                    },
                    {
                        "name": "apiEndpoint",
                        "type": "Dataflow from `\"https://api.example.com/data\"` to `apiEndpoint`",
                        "context": "\r\n        if (API_DEBUG) {\r\n            testAPI(apiEndpoint, apiKey);\r\n        }\r\n    }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "apiKey",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "\"api_key_123456789\"",
                        "type": "String",
                        "context": "    public static void main(String[] args) {\r\n        String apiEndpoint = \"https://api.example.com/data\";\r\n        String apiKey = \"api_key_123456789\";\r\n\r\n        if (API_DEBUG) {\r\n",
                        "nextNode": "apiKey"
                    },
                    {
                        "name": "apiKey",
                        "type": "Dataflow from `\"api_key_123456789\"` to `apiKey`",
                        "context": "\r\n        if (API_DEBUG) {\r\n            testAPI(apiEndpoint, apiKey);\r\n        }\r\n    }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "API_DEBUG",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "Boolean.parseBoolean(System.getenv(\"API_DEBUG\")",
                        "type": "Boolean",
                        "context": "public class GOOD_APIEndpointDebugging {\r\n    private static final boolean API_DEBUG = Boolean.parseBoolean(System.getenv(\"API_DEBUG\"));\r\n\r\n    public static void main(String[] args) {\r\n",
                        "nextNode": "API_DEBUG"
                    },
                    {
                        "name": "API_DEBUG",
                        "type": "Boolean",
                        "context": "public class GOOD_APIEndpointDebugging {\r\n    private static final boolean API_DEBUG = Boolean.parseBoolean(System.getenv(\"API_DEBUG\"));\r\n\r\n    public static void main(String[] args) {\r\n |         String apiKey = \"api_key_123456789\";\r\n\r\n        if (API_DEBUG) {\r\n            testAPI(apiEndpoint, apiKey);\r\n        }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "url",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "key",
                "isSensitive": "no",
                "graph": []
            }
        ],
        "strings": [
            {
                "name": "api_key_123456789",
                "isSensitive": "yes"
            },
            {
                "name": "https://api.example.com/data",
                "isSensitive": "yes"
            },
            {
                "name": "DEBUG: Testing API endpoint.",
                "isSensitive": "no"
            },
            {
                "name": "API_DEBUG",
                "isSensitive": "no"
            }
        ],
        "comments": [
            {
                "name": "Assume some testing logic here",
                "isSensitive": "no"
            }
        ],
        "sinks": [
            {
                "name": "println",
                "isSink": "yes"
            },
            {
                "name": "parseBoolean",
                "isSink": "no"
            },
            {
                "name": "testAPI",
                "isSink": "no"
            },
            {
                "name": "getenv",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "GOOD_DataProcessor.java",
        "variables": [
            {
                "name": "args",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "data",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "\"sensitiveDataString\"",
                        "type": "String",
                        "context": "    public static void main(String[] args) {\r\n        try {\r\n            processData(\"sensitiveDataString\");\r\n        } catch (DataProcessingException e) {\r\n            if (DATA_PROCESSING_DEBUG) {\r\n",
                        "nextNode": "String data"
                    },
                    {
                        "name": "String data",
                        "type": "String",
                        "context": "    }\r\n\r\n    private static void processData(String data) throws DataProcessingException {\r\n        // Simulating a processing error\r\n        throw new DataProcessingException(\"Processing failed at index: 10\", data.substring(5, 15));\r\n",
                        "nextNode": "data"
                    },
                    {
                        "name": "data",
                        "type": "Dataflow from `\"sensitiveDataString\"` to `data`",
                        "context": "    private static void processData(String data) throws DataProcessingException {\r\n        // Simulating a processing error\r\n        throw new DataProcessingException(\"Processing failed at index: 10\", data.substring(5, 15));\r\n    }\r\n\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "DATA_PROCESSING_DEBUG",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "Boolean.parseBoolean(System.getProperty(\"DATA_PROCESSING_DEBUG\", \"false\")",
                        "type": "Boolean",
                        "context": "public class GOOD_DataProcessor {\r\n    private static final boolean DATA_PROCESSING_DEBUG = Boolean.parseBoolean(System.getProperty(\"DATA_PROCESSING_DEBUG\", \"false\"));\r\n\r\n    public static void main(String[] args) {\r\n",
                        "nextNode": "DATA_PROCESSING_DEBUG"
                    },
                    {
                        "name": "DATA_PROCESSING_DEBUG",
                        "type": "Boolean",
                        "context": "public class GOOD_DataProcessor {\r\n    private static final boolean DATA_PROCESSING_DEBUG = Boolean.parseBoolean(System.getProperty(\"DATA_PROCESSING_DEBUG\", \"false\"));\r\n\r\n    public static void main(String[] args) {\r\n |             processData(\"sensitiveDataString\");\r\n        } catch (DataProcessingException e) {\r\n            if (DATA_PROCESSING_DEBUG) {\r\n                System.err.println(\"DEBUG: Error processing data.\");\r\n            }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "e",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "dataSnippet",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "data",
                        "type": "String",
                        "context": "    private static void processData(String data) throws DataProcessingException {\r\n        // Simulating a processing error\r\n        throw new DataProcessingException(\"Processing failed at index: 10\", data.substring(5, 15));\r\n    }\r\n\r\n",
                        "nextNode": "data.substring(5, 15)"
                    },
                    {
                        "name": "data.substring(5, 15)",
                        "type": "String",
                        "context": "    private static void processData(String data) throws DataProcessingException {\r\n        // Simulating a processing error\r\n        throw new DataProcessingException(\"Processing failed at index: 10\", data.substring(5, 15));\r\n    }\r\n\r\n",
                        "nextNode": "String dataSnippet"
                    },
                    {
                        "name": "String dataSnippet",
                        "type": "String",
                        "context": "        private String dataSnippet;\r\n\r\n        public DataProcessingException(String message, String dataSnippet) {\r\n            super(message);\r\n            this.dataSnippet = dataSnippet;\r\n",
                        "nextNode": "dataSnippet"
                    },
                    {
                        "name": "dataSnippet",
                        "type": "Dataflow from `data` to `dataSnippet`\nDataflow from `substring(...)` to `dataSnippet`\nDataflow from `\"sensitiveDataString\"` to `dataSnippet`\nDataflow from `5` to `dataSnippet`\nDataflow from `15` to `dataSnippet`",
                        "context": "        public DataProcessingException(String message, String dataSnippet) {\r\n            super(message);\r\n            this.dataSnippet = dataSnippet;\r\n        }\r\n\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "message",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "\"Processing failed at index: 10\"",
                        "type": "String",
                        "context": "    private static void processData(String data) throws DataProcessingException {\r\n        // Simulating a processing error\r\n        throw new DataProcessingException(\"Processing failed at index: 10\", data.substring(5, 15));\r\n    }\r\n\r\n",
                        "nextNode": "String message"
                    },
                    {
                        "name": "String message",
                        "type": "String",
                        "context": "        private String dataSnippet;\r\n\r\n        public DataProcessingException(String message, String dataSnippet) {\r\n            super(message);\r\n            this.dataSnippet = dataSnippet;\r\n",
                        "nextNode": "message"
                    },
                    {
                        "name": "message",
                        "type": "Dataflow from `\"Processing failed at index: 10\"` to `message`",
                        "context": "\r\n        public DataProcessingException(String message, String dataSnippet) {\r\n            super(message);\r\n            this.dataSnippet = dataSnippet;\r\n        }\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "Processing failed at index: 10",
                "isSensitive": "no"
            },
            {
                "name": "DEBUG: Error processing data.",
                "isSensitive": "no"
            },
            {
                "name": "sensitiveDataString",
                "isSensitive": "no"
            },
            {
                "name": "DATA_PROCESSING_DEBUG",
                "isSensitive": "no"
            },
            {
                "name": "false",
                "isSensitive": "no"
            }
        ],
        "comments": [
            {
                "name": "Simulating a processing error",
                "isSensitive": "no"
            }
        ],
        "sinks": [
            {
                "name": "println",
                "isSink": "yes"
            },
            {
                "name": "getProperty",
                "isSink": "no"
            },
            {
                "name": "processData",
                "isSink": "no"
            },
            {
                "name": "parseBoolean",
                "isSink": "no"
            },
            {
                "name": "substring",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "GOOD_DebugFeatureToggle.java",
        "variables": [
            {
                "name": "DEBUG_FEATURE_TOGGLE",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "Boolean.parseBoolean(System.getProperty(\"DEBUG_FEATURE_TOGGLE\", \"false\")",
                        "type": "Boolean",
                        "context": "public class GOOD_DebugFeatureToggle {\r\n    private static final boolean DEBUG_FEATURE_TOGGLE = Boolean.parseBoolean(System.getProperty(\"DEBUG_FEATURE_TOGGLE\", \"false\"));\r\n\r\n    public static void main(String[] args) {\r\n",
                        "nextNode": "DEBUG_FEATURE_TOGGLE"
                    },
                    {
                        "name": "DEBUG_FEATURE_TOGGLE",
                        "type": "Boolean",
                        "context": "public class GOOD_DebugFeatureToggle {\r\n    private static final boolean DEBUG_FEATURE_TOGGLE = Boolean.parseBoolean(System.getProperty(\"DEBUG_FEATURE_TOGGLE\", \"false\"));\r\n\r\n    public static void main(String[] args) {\r\n |         String userSSN = \"123-45-6789\";\r\n\r\n        if (DEBUG_FEATURE_TOGGLE) {\r\n            System.out.println(\"DEBUG: User SSN.\");\r\n        }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "args",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "userSSN",
                "isSensitive": "yes",
                "graph": []
            }
        ],
        "strings": [
            {
                "name": "DEBUG_FEATURE_TOGGLE",
                "isSensitive": "no"
            },
            {
                "name": "DEBUG: User SSN.",
                "isSensitive": "no"
            },
            {
                "name": "false",
                "isSensitive": "no"
            },
            {
                "name": "123-45-6789",
                "isSensitive": "yes"
            }
        ],
        "comments": [],
        "sinks": [
            {
                "name": "println",
                "isSink": "yes"
            },
            {
                "name": "getProperty",
                "isSink": "no"
            },
            {
                "name": "parseBoolean",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "GOOD_DebugLoggingEnabled.java",
        "variables": [
            {
                "name": "args",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "accessToken",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "DEBUG_LOGGING_ENABLED",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "Boolean.parseBoolean(System.getenv(\"DEBUG_LOGGING_ENABLED\")",
                        "type": "Boolean",
                        "context": "public class GOOD_DebugLoggingEnabled {\r\n    private static final boolean DEBUG_LOGGING_ENABLED = Boolean.parseBoolean(System.getenv(\"DEBUG_LOGGING_ENABLED\"));\r\n\r\n    public static void main(String[] args) {\r\n",
                        "nextNode": "DEBUG_LOGGING_ENABLED"
                    },
                    {
                        "name": "DEBUG_LOGGING_ENABLED",
                        "type": "Boolean",
                        "context": "public class GOOD_DebugLoggingEnabled {\r\n    private static final boolean DEBUG_LOGGING_ENABLED = Boolean.parseBoolean(System.getenv(\"DEBUG_LOGGING_ENABLED\"));\r\n\r\n    public static void main(String[] args) {\r\n |         String accessToken = System.getenv(\"ACCESS_TOKEN\");\r\n\r\n        if (DEBUG_LOGGING_ENABLED) {\r\n            System.out.println(\"DEBUG: Access Token.\");\r\n        }\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "ACCESS_TOKEN",
                "isSensitive": "no"
            },
            {
                "name": "DEBUG: Access Token.",
                "isSensitive": "no"
            },
            {
                "name": "DEBUG_LOGGING_ENABLED",
                "isSensitive": "no"
            }
        ],
        "comments": [],
        "sinks": [
            {
                "name": "println",
                "isSink": "yes"
            },
            {
                "name": "parseBoolean",
                "isSink": "no"
            },
            {
                "name": "getenv",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "GOOD_DebugLoggingSensitiveInfo.java",
        "variables": [
            {
                "name": "args",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "password",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "System.getProperty(\"password\", \"defaultPass\")",
                        "type": "String",
                        "context": "    public static void main(String[] args) {\r\n        String username = System.getProperty(\"username\", \"defaultUser\");\r\n        String password = System.getProperty(\"password\", \"defaultPass\");\r\n\r\n        if (DEBUG_FLAG) {\r\n",
                        "nextNode": "password"
                    },
                    {
                        "name": "password",
                        "type": "Dataflow from `getProperty(...)` to `password`\nDataflow from `\"defaultPass\"` to `password`\nDataflow from `\"password\"` to `password`",
                        "context": "\r\n        // Placeholder for login logic\r\n        performLogin(username, password);\r\n    }\r\n\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "DEBUG_FLAG",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "System.getProperty(\"debugMode\", \"false\").equalsIgnoreCase(\"true\")",
                        "type": "Boolean",
                        "context": "public class GOOD_DebugLoggingSensitiveInfo {\r\n    private static final boolean DEBUG_FLAG = System.getProperty(\"debugMode\", \"false\").equalsIgnoreCase(\"true\"); // Debugging flag, should be false in production\r\n\r\n    public static void main(String[] args) {\r\n",
                        "nextNode": "DEBUG_FLAG"
                    },
                    {
                        "name": "DEBUG_FLAG",
                        "type": "Boolean",
                        "context": "public class GOOD_DebugLoggingSensitiveInfo {\r\n    private static final boolean DEBUG_FLAG = System.getProperty(\"debugMode\", \"false\").equalsIgnoreCase(\"true\"); // Debugging flag, should be false in production\r\n\r\n    public static void main(String[] args) {\r\n |         String password = System.getProperty(\"password\", \"defaultPass\");\r\n\r\n        if (DEBUG_FLAG) {\r\n            System.out.println(\"DEBUG: Attempting login.\");\r\n        }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "username",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "System.getProperty(\"username\", \"defaultUser\")",
                        "type": "String",
                        "context": "\r\n    public static void main(String[] args) {\r\n        String username = System.getProperty(\"username\", \"defaultUser\");\r\n        String password = System.getProperty(\"password\", \"defaultPass\");\r\n\r\n",
                        "nextNode": "username"
                    },
                    {
                        "name": "username",
                        "type": "Dataflow from `getProperty(...)` to `username`\nDataflow from `\"defaultUser\"` to `username`\nDataflow from `\"username\"` to `username`",
                        "context": "\r\n        // Placeholder for login logic\r\n        performLogin(username, password);\r\n    }\r\n\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "defaultPass",
                "isSensitive": "yes"
            },
            {
                "name": "password",
                "isSensitive": "yes"
            },
            {
                "name": "true",
                "isSensitive": "no"
            },
            {
                "name": "false",
                "isSensitive": "no"
            },
            {
                "name": "defaultUser",
                "isSensitive": "no"
            },
            {
                "name": "DEBUG: Attempting login.",
                "isSensitive": "no"
            },
            {
                "name": "debugMode",
                "isSensitive": "no"
            },
            {
                "name": "username",
                "isSensitive": "no"
            }
        ],
        "comments": [
            {
                "name": "Placeholder for login logic",
                "isSensitive": "no"
            },
            {
                "name": "Placeholder for actual login logic",
                "isSensitive": "no"
            },
            {
                "name": "Debugging flag, should be false in production",
                "isSensitive": "no"
            }
        ],
        "sinks": [
            {
                "name": "println",
                "isSink": "yes"
            },
            {
                "name": "getProperty",
                "isSink": "no"
            },
            {
                "name": "equalsIgnoreCase",
                "isSink": "no"
            },
            {
                "name": "performLogin",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "GOOD_DebugModeActive.java",
        "variables": [
            {
                "name": "args",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "DEBUG_MODE_ACTIVE",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "System.getProperty(\"DEBUG_MODE_ACTIVE\", \"false\").equalsIgnoreCase(\"true\")",
                        "type": "Boolean",
                        "context": "public class GOOD_DebugModeActive {\r\n    private static final boolean DEBUG_MODE_ACTIVE = System.getProperty(\"DEBUG_MODE_ACTIVE\", \"false\").equalsIgnoreCase(\"true\");\r\n\r\n    public static void main(String[] args) {\r\n",
                        "nextNode": "DEBUG_MODE_ACTIVE"
                    },
                    {
                        "name": "DEBUG_MODE_ACTIVE",
                        "type": "Boolean",
                        "context": "public class GOOD_DebugModeActive {\r\n    private static final boolean DEBUG_MODE_ACTIVE = System.getProperty(\"DEBUG_MODE_ACTIVE\", \"false\").equalsIgnoreCase(\"true\");\r\n\r\n    public static void main(String[] args) {\r\n | \r\n        // Debug condition\r\n        if (DEBUG_MODE_ACTIVE) {\r\n            System.out.println(\"DEBUG: Using encryption key.\");\r\n        }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "encryptionKey",
                "isSensitive": "yes",
                "graph": []
            }
        ],
        "strings": [
            {
                "name": "ABCD-1234-EFGH-5678",
                "isSensitive": "yes"
            },
            {
                "name": "true",
                "isSensitive": "no"
            },
            {
                "name": "false",
                "isSensitive": "no"
            },
            {
                "name": "DEBUG: Using encryption key.",
                "isSensitive": "no"
            },
            {
                "name": "DEBUG_MODE_ACTIVE",
                "isSensitive": "no"
            }
        ],
        "comments": [
            {
                "name": "Debug condition",
                "isSensitive": "no"
            },
            {
                "name": "Placeholder for encryption routine",
                "isSensitive": "no"
            }
        ],
        "sinks": [
            {
                "name": "println",
                "isSink": "yes"
            },
            {
                "name": "getProperty",
                "isSink": "no"
            },
            {
                "name": "equalsIgnoreCase",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "GOOD_DebugOutputWithCredentials.java",
        "variables": [
            {
                "name": "args",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "password",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "\"wrongPassword\"",
                        "type": "String",
                        "context": "\r\n    public static void main(String[] args) {\r\n        authenticateUser(\"admin\", \"wrongPassword\");\r\n\r\n        authenticateUser(\"admin\", \"StarlitNight2021\");\r\n",
                        "nextNode": "String password"
                    },
                    {
                        "name": "String password",
                        "type": "String",
                        "context": "    private static final Map<String, String> userStore = new HashMap<>();\r\n\r\n    public static boolean authenticateUser(String username, String password) {\r\n        // Simulated authentication logic\r\n        boolean isAuthenticated = userStore.containsKey(username) && userStore.get(username).equals(password);\r\n",
                        "nextNode": "password"
                    },
                    {
                        "name": "password",
                        "type": "Dataflow from `\"wrongPassword\"` to `password`\nDataflow from `\"StarlitNight2021\"` to `password`",
                        "context": "    public static boolean authenticateUser(String username, String password) {\r\n        // Simulated authentication logic\r\n        boolean isAuthenticated = userStore.containsKey(username) && userStore.get(username).equals(password);\r\n\r\n        if (DEBUG_ENABLED) {\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "userStore",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "new HashMap<>()",
                        "type": "HashMap",
                        "context": "public class GOOD_DebugOutputWithCredentials {\r\n    private static final boolean DEBUG_ENABLED = true; // Debugging flag, should be false in production\r\n    private static final Map<String, String> userStore = new HashMap<>();\r\n\r\n    public static boolean authenticateUser(String username, String password) {\r\n | public class GOOD_DebugOutputWithCredentials {\r\n    private static final boolean DEBUG_ENABLED = true; // Debugging flag, should be false in production\r\n    private static final Map<String, String> userStore = new HashMap<>();\r\n\r\n    public static boolean authenticateUser(String username, String password) {\r\n",
                        "nextNode": "userStore"
                    },
                    {
                        "name": "userStore",
                        "type": "HashMap",
                        "context": "public class GOOD_DebugOutputWithCredentials {\r\n    private static final boolean DEBUG_ENABLED = true; // Debugging flag, should be false in production\r\n    private static final Map<String, String> userStore = new HashMap<>();\r\n\r\n    public static boolean authenticateUser(String username, String password) {\r\n |     public static boolean authenticateUser(String username, String password) {\r\n        // Simulated authentication logic\r\n        boolean isAuthenticated = userStore.containsKey(username) && userStore.get(username).equals(password);\r\n\r\n        if (DEBUG_ENABLED) {\r\n | public class GOOD_DebugOutputWithCredentials {\r\n    private static final boolean DEBUG_ENABLED = true; // Debugging flag, should be false in production\r\n    private static final Map<String, String> userStore = new HashMap<>();\r\n\r\n    public static boolean authenticateUser(String username, String password) {\r\n |     public static boolean authenticateUser(String username, String password) {\r\n        // Simulated authentication logic\r\n        boolean isAuthenticated = userStore.containsKey(username) && userStore.get(username).equals(password);\r\n\r\n        if (DEBUG_ENABLED) {\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "DEBUG_ENABLED",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "true",
                        "type": "Boolean",
                        "context": "\r\npublic class GOOD_DebugOutputWithCredentials {\r\n    private static final boolean DEBUG_ENABLED = true; // Debugging flag, should be false in production\r\n    private static final Map<String, String> userStore = new HashMap<>();\r\n\r\n",
                        "nextNode": "DEBUG_ENABLED"
                    },
                    {
                        "name": "DEBUG_ENABLED",
                        "type": "Boolean",
                        "context": "\r\npublic class GOOD_DebugOutputWithCredentials {\r\n    private static final boolean DEBUG_ENABLED = true; // Debugging flag, should be false in production\r\n    private static final Map<String, String> userStore = new HashMap<>();\r\n\r\n |         boolean isAuthenticated = userStore.containsKey(username) && userStore.get(username).equals(password);\r\n\r\n        if (DEBUG_ENABLED) {\r\n            if (isAuthenticated) {\r\n                System.out.println(\"DEBUG: Authentication succeeded.\");\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "isAuthenticated",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "username",
                        "type": "String",
                        "context": "    public static boolean authenticateUser(String username, String password) {\r\n        // Simulated authentication logic\r\n        boolean isAuthenticated = userStore.containsKey(username) && userStore.get(username).equals(password);\r\n\r\n        if (DEBUG_ENABLED) {\r\n |     public static boolean authenticateUser(String username, String password) {\r\n        // Simulated authentication logic\r\n        boolean isAuthenticated = userStore.containsKey(username) && userStore.get(username).equals(password);\r\n\r\n        if (DEBUG_ENABLED) {\r\n",
                        "nextNode": "userStore.containsKey(username)"
                    },
                    {
                        "name": "userStore.containsKey(username)",
                        "type": "Boolean",
                        "context": "    public static boolean authenticateUser(String username, String password) {\r\n        // Simulated authentication logic\r\n        boolean isAuthenticated = userStore.containsKey(username) && userStore.get(username).equals(password);\r\n\r\n        if (DEBUG_ENABLED) {\r\n |     public static boolean authenticateUser(String username, String password) {\r\n        // Simulated authentication logic\r\n        boolean isAuthenticated = userStore.containsKey(username) && userStore.get(username).equals(password);\r\n\r\n        if (DEBUG_ENABLED) {\r\n",
                        "nextNode": "userStore.containsKey(username) && userStore.get(username).equals(password)"
                    },
                    {
                        "name": "userStore.containsKey(username) && userStore.get(username).equals(password)",
                        "type": "Boolean",
                        "context": "    public static boolean authenticateUser(String username, String password) {\r\n        // Simulated authentication logic\r\n        boolean isAuthenticated = userStore.containsKey(username) && userStore.get(username).equals(password);\r\n\r\n        if (DEBUG_ENABLED) {\r\n |     public static boolean authenticateUser(String username, String password) {\r\n        // Simulated authentication logic\r\n        boolean isAuthenticated = userStore.containsKey(username) && userStore.get(username).equals(password);\r\n\r\n        if (DEBUG_ENABLED) {\r\n",
                        "nextNode": "isAuthenticated"
                    },
                    {
                        "name": "isAuthenticated",
                        "type": "Dataflow from `username` to `isAuthenticated`\nDataflow from `password` to `isAuthenticated`\nDataflow from `containsKey(...)` to `isAuthenticated`\nDataflow from `equals(...)` to `isAuthenticated`\nDataflow from `\"admin\"` to `isAuthenticated`\nDataflow from `\"wrongPassword\"` to `isAuthenticated`\nDataflow from `\"admin\"` to `isAuthenticated`\nDataflow from `\"StarlitNight2021\"` to `isAuthenticated`",
                        "context": "\r\n        if (DEBUG_ENABLED) {\r\n            if (isAuthenticated) {\r\n                System.out.println(\"DEBUG: Authentication succeeded.\");\r\n            } else {\r\n |         }\r\n\r\n        return isAuthenticated;\r\n    }\r\n\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "username",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "\"admin\"",
                        "type": "String",
                        "context": "\r\n    public static void main(String[] args) {\r\n        authenticateUser(\"admin\", \"wrongPassword\");\r\n\r\n        authenticateUser(\"admin\", \"StarlitNight2021\");\r\n | \r\n    public static void main(String[] args) {\r\n        authenticateUser(\"admin\", \"wrongPassword\");\r\n\r\n        authenticateUser(\"admin\", \"StarlitNight2021\");\r\n",
                        "nextNode": "String username"
                    },
                    {
                        "name": "String username",
                        "type": "String",
                        "context": "    private static final Map<String, String> userStore = new HashMap<>();\r\n\r\n    public static boolean authenticateUser(String username, String password) {\r\n        // Simulated authentication logic\r\n        boolean isAuthenticated = userStore.containsKey(username) && userStore.get(username).equals(password);\r\n |     private static final Map<String, String> userStore = new HashMap<>();\r\n\r\n    public static boolean authenticateUser(String username, String password) {\r\n        // Simulated authentication logic\r\n        boolean isAuthenticated = userStore.containsKey(username) && userStore.get(username).equals(password);\r\n",
                        "nextNode": "username"
                    },
                    {
                        "name": "username",
                        "type": "Dataflow from `\"admin\"` to `username`\nDataflow from `\"admin\"` to `username`",
                        "context": "    public static boolean authenticateUser(String username, String password) {\r\n        // Simulated authentication logic\r\n        boolean isAuthenticated = userStore.containsKey(username) && userStore.get(username).equals(password);\r\n\r\n        if (DEBUG_ENABLED) {\r\n |     public static boolean authenticateUser(String username, String password) {\r\n        // Simulated authentication logic\r\n        boolean isAuthenticated = userStore.containsKey(username) && userStore.get(username).equals(password);\r\n\r\n        if (DEBUG_ENABLED) {\r\n |     public static boolean authenticateUser(String username, String password) {\r\n        // Simulated authentication logic\r\n        boolean isAuthenticated = userStore.containsKey(username) && userStore.get(username).equals(password);\r\n\r\n        if (DEBUG_ENABLED) {\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "wrongPassword",
                "isSensitive": "yes"
            },
            {
                "name": "DEBUG: Authentication succeeded.",
                "isSensitive": "no"
            },
            {
                "name": "DEBUG: Authentication failed.",
                "isSensitive": "no"
            },
            {
                "name": "StarlitNight2021",
                "isSensitive": "yes"
            },
            {
                "name": "admin",
                "isSensitive": "yes"
            }
        ],
        "comments": [
            {
                "name": "Simulated authentication logic",
                "isSensitive": "no"
            },
            {
                "name": "Debugging flag, should be false in production",
                "isSensitive": "no"
            }
        ],
        "sinks": [
            {
                "name": "println",
                "isSink": "yes"
            },
            {
                "name": "authenticateUser",
                "isSink": "no"
            },
            {
                "name": "containsKey",
                "isSink": "no"
            },
            {
                "name": "get",
                "isSink": "no"
            },
            {
                "name": "equals",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "GOOD_EnhancedDebugWithoutSensitiveData.java",
        "variables": [
            {
                "name": "args",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "e",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "DEBUG_ENABLED",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "System.getenv(\"DEBUG_MODE\").equals(\"true\")",
                        "type": "Boolean",
                        "context": "public class GOOD_EnhancedDebugWithoutSensitiveData {\r\n\r\n    private static final boolean DEBUG_ENABLED = System.getenv(\"DEBUG_MODE\").equals(\"true\");\r\n\r\n    public static void main(String[] args) {\r\n",
                        "nextNode": "DEBUG_ENABLED"
                    },
                    {
                        "name": "DEBUG_ENABLED",
                        "type": "Boolean",
                        "context": "public class GOOD_EnhancedDebugWithoutSensitiveData {\r\n\r\n    private static final boolean DEBUG_ENABLED = System.getenv(\"DEBUG_MODE\").equals(\"true\");\r\n\r\n    public static void main(String[] args) {\r\n | \r\n    private static void logDebugInfo(String message, Exception e) {\r\n        if (DEBUG_ENABLED) {\r\n            System.out.println(message);\r\n            System.out.println(\"Error: \" + sanitizeExceptionMessage(e.getMessage()));\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "errorMessage",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "e.getMessage()",
                        "type": "String",
                        "context": "        if (DEBUG_ENABLED) {\r\n            System.out.println(message);\r\n            System.out.println(\"Error: \" + sanitizeExceptionMessage(e.getMessage()));\r\n        }\r\n    }\r\n",
                        "nextNode": "String errorMessage"
                    },
                    {
                        "name": "String errorMessage",
                        "type": "String",
                        "context": "    }\r\n\r\n    private static String sanitizeExceptionMessage(String errorMessage) {\r\n        return errorMessage.replaceAll(\"sensitivePattern\", \"[REDACTED]\");\r\n    }\r\n",
                        "nextNode": "errorMessage"
                    },
                    {
                        "name": "errorMessage",
                        "type": "Dataflow from `getMessage(...)` to `errorMessage`",
                        "context": "\r\n    private static String sanitizeExceptionMessage(String errorMessage) {\r\n        return errorMessage.replaceAll(\"sensitivePattern\", \"[REDACTED]\");\r\n    }\r\n}\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "message",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "userId",
                        "type": "String",
                        "context": "    public static void main(String[] args) {\r\n        String userId = System.getProperty(\"username\", \"defaultUser\");\r\n        performAction(userId);\r\n    }\r\n\r\n |             throw new RuntimeException(\"Action failed due to system error.\");\r\n        } catch (RuntimeException e) {\r\n            logDebugInfo(\"Action failure for userId: \" + userId, e);\r\n        }\r\n    }\r\n",
                        "nextNode": "\"Action failure for userId: \" + userId"
                    },
                    {
                        "name": "String userId",
                        "type": "String",
                        "context": "    }\r\n\r\n    private static void performAction(String userId) {\r\n        try {\r\n            // Simulated action that could fail\r\n",
                        "nextNode": "userId"
                    },
                    {
                        "name": "\"Action failure for userId: \" + userId",
                        "type": "String",
                        "context": "            throw new RuntimeException(\"Action failed due to system error.\");\r\n        } catch (RuntimeException e) {\r\n            logDebugInfo(\"Action failure for userId: \" + userId, e);\r\n        }\r\n    }\r\n",
                        "nextNode": "String message"
                    },
                    {
                        "name": "String message",
                        "type": "String",
                        "context": "    }\r\n\r\n    private static void logDebugInfo(String message, Exception e) {\r\n        if (DEBUG_ENABLED) {\r\n            System.out.println(message);\r\n",
                        "nextNode": "message"
                    },
                    {
                        "name": "message",
                        "type": "Dataflow from `userId` to `message`\nDataflow from `userId` to `message`\nDataflow from `getProperty(...)` to `message`\nDataflow from `\"defaultUser\"` to `message`\nDataflow from `\"Action failure for userId: \"` to `message`\nDataflow from `\"username\"` to `message`",
                        "context": "    private static void logDebugInfo(String message, Exception e) {\r\n        if (DEBUG_ENABLED) {\r\n            System.out.println(message);\r\n            System.out.println(\"Error: \" + sanitizeExceptionMessage(e.getMessage()));\r\n        }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "userId",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "System.getProperty(\"username\", \"defaultUser\")",
                        "type": "String",
                        "context": "\r\n    public static void main(String[] args) {\r\n        String userId = System.getProperty(\"username\", \"defaultUser\");\r\n        performAction(userId);\r\n    }\r\n | \r\n    public static void main(String[] args) {\r\n        String userId = System.getProperty(\"username\", \"defaultUser\");\r\n        performAction(userId);\r\n    }\r\n",
                        "nextNode": "userId"
                    },
                    {
                        "name": "String userId",
                        "type": "String",
                        "context": "    }\r\n\r\n    private static void performAction(String userId) {\r\n        try {\r\n            // Simulated action that could fail\r\n",
                        "nextNode": "userId"
                    },
                    {
                        "name": "userId",
                        "type": "Dataflow from `getProperty(...)` to `userId`\nDataflow from `\"defaultUser\"` to `userId`\nDataflow from `\"username\"` to `userId`",
                        "context": "    public static void main(String[] args) {\r\n        String userId = System.getProperty(\"username\", \"defaultUser\");\r\n        performAction(userId);\r\n    }\r\n\r\n |     public static void main(String[] args) {\r\n        String userId = System.getProperty(\"username\", \"defaultUser\");\r\n        performAction(userId);\r\n    }\r\n\r\n |             throw new RuntimeException(\"Action failed due to system error.\");\r\n        } catch (RuntimeException e) {\r\n            logDebugInfo(\"Action failure for userId: \" + userId, e);\r\n        }\r\n    }\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "[REDACTED]",
                "isSensitive": "no"
            },
            {
                "name": "DEBUG_MODE",
                "isSensitive": "no"
            },
            {
                "name": "Action failure for userId:",
                "isSensitive": "no"
            },
            {
                "name": "true",
                "isSensitive": "no"
            },
            {
                "name": "Error:",
                "isSensitive": "no"
            },
            {
                "name": "defaultUser",
                "isSensitive": "yes"
            },
            {
                "name": "sensitivePattern",
                "isSensitive": "yes"
            },
            {
                "name": "Action failed due to system error.",
                "isSensitive": "no"
            },
            {
                "name": "username",
                "isSensitive": "no"
            }
        ],
        "comments": [
            {
                "name": "Simulated action that could fail",
                "isSensitive": "no"
            }
        ],
        "sinks": [
            {
                "name": "println",
                "isSink": "yes"
            },
            {
                "name": "getProperty",
                "isSink": "no"
            },
            {
                "name": "performAction",
                "isSink": "no"
            },
            {
                "name": "equals",
                "isSink": "no"
            },
            {
                "name": "getMessage",
                "isSink": "no"
            },
            {
                "name": "sanitizeExceptionMessage",
                "isSink": "no"
            },
            {
                "name": "replaceAll",
                "isSink": "no"
            },
            {
                "name": "logDebugInfo",
                "isSink": "no"
            },
            {
                "name": "getenv",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "GOOD_ExceptionDebuggingWithSensitiveData.java",
        "variables": [
            {
                "name": "args",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "amount",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "e",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "creditCardNumber",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "DEBUG",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "false",
                        "type": "Boolean",
                        "context": "public class GOOD_ExceptionDebuggingWithSensitiveData {\r\n    private static final boolean DEBUG = false; // Debugging flag, should be false in production\r\n\r\n    public static void processPayment(String creditCardNumber, double amount) {\r\n",
                        "nextNode": "DEBUG"
                    },
                    {
                        "name": "DEBUG",
                        "type": "Boolean",
                        "context": "public class GOOD_ExceptionDebuggingWithSensitiveData {\r\n    private static final boolean DEBUG = false; // Debugging flag, should be false in production\r\n\r\n    public static void processPayment(String creditCardNumber, double amount) {\r\n |             // Further processing logic...\r\n        } catch (Exception e) {\r\n            if (DEBUG){\r\n                System.out.println(\"DEBUG: Failed to process payment.\");\r\n            }\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "Amount must be positive.",
                "isSensitive": "no"
            },
            {
                "name": "Processing payment...",
                "isSensitive": "no"
            },
            {
                "name": "DEBUG: Failed to process payment.",
                "isSensitive": "no"
            },
            {
                "name": "1234-5678-9012-3456",
                "isSensitive": "yes"
            }
        ],
        "comments": [
            {
                "name": "Debugging flag, should be false in production",
                "isSensitive": "no"
            },
            {
                "name": "Simulate payment processing that might fail",
                "isSensitive": "no"
            },
            {
                "name": "Further processing logic...",
                "isSensitive": "no"
            }
        ],
        "sinks": [
            {
                "name": "println",
                "isSink": "yes"
            },
            {
                "name": "processPayment",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "GOOD_SecureDebuggingPractices.java",
        "variables": [
            {
                "name": "args",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "password",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "System.getProperty(\"password\", \"defaultPass\")",
                        "type": "String",
                        "context": "    public static void main(String[] args) {\r\n        String username = System.getProperty(\"username\", \"defaultUser\");\r\n        String password = System.getProperty(\"password\", \"defaultPass\");\r\n\r\n        if (DEBUG_ENABLED) {\r\n",
                        "nextNode": "password"
                    },
                    {
                        "name": "password",
                        "type": "Dataflow from `getProperty(...)` to `password`\nDataflow from `\"defaultPass\"` to `password`\nDataflow from `\"password\"` to `password`",
                        "context": "        }\r\n        \r\n        performLogin(username, password);\r\n    }\r\n\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "DEBUG_ENABLED",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "false",
                        "type": "Boolean",
                        "context": "public class GOOD_SecureDebuggingPractices {\r\n    private static final boolean DEBUG_ENABLED = false; // Debugging flag, should be false in production\r\n\r\n    public static void main(String[] args) {\r\n",
                        "nextNode": "DEBUG_ENABLED"
                    },
                    {
                        "name": "DEBUG_ENABLED",
                        "type": "Boolean",
                        "context": "public class GOOD_SecureDebuggingPractices {\r\n    private static final boolean DEBUG_ENABLED = false; // Debugging flag, should be false in production\r\n\r\n    public static void main(String[] args) {\r\n |         String password = System.getProperty(\"password\", \"defaultPass\");\r\n\r\n        if (DEBUG_ENABLED) {\r\n            // Debugging code is gated by a flag, ensuring it's disabled in production environments\r\n            System.out.println(\"DEBUG: Attempting login.\");\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "username",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "System.getProperty(\"username\", \"defaultUser\")",
                        "type": "String",
                        "context": "\r\n    public static void main(String[] args) {\r\n        String username = System.getProperty(\"username\", \"defaultUser\");\r\n        String password = System.getProperty(\"password\", \"defaultPass\");\r\n\r\n",
                        "nextNode": "username"
                    },
                    {
                        "name": "username",
                        "type": "Dataflow from `getProperty(...)` to `username`\nDataflow from `\"defaultUser\"` to `username`\nDataflow from `\"username\"` to `username`",
                        "context": "        }\r\n        \r\n        performLogin(username, password);\r\n    }\r\n\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "defaultPass",
                "isSensitive": "yes"
            },
            {
                "name": "password",
                "isSensitive": "no"
            },
            {
                "name": "defaultUser",
                "isSensitive": "yes"
            },
            {
                "name": "DEBUG: Attempting login.",
                "isSensitive": "no"
            },
            {
                "name": "username",
                "isSensitive": "no"
            }
        ],
        "comments": [
            {
                "name": "Note: Sensitive details like passwords should never be logged, even in debugging mode",
                "isSensitive": "no"
            },
            {
                "name": "Debugging code is gated by a flag, ensuring it's disabled in production environments",
                "isSensitive": "no"
            },
            {
                "name": "Placeholder for actual login logic",
                "isSensitive": "no"
            },
            {
                "name": "Debugging flag, should be false in production",
                "isSensitive": "no"
            }
        ],
        "sinks": [
            {
                "name": "println",
                "isSink": "yes"
            },
            {
                "name": "getProperty",
                "isSink": "no"
            },
            {
                "name": "performLogin",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "BAD_ApiEndpointSecurityTest.java",
        "variables": [
            {
                "name": "validationToken",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "\"XYZ-780320-BHDM\"",
                        "type": "String",
                        "context": "    public void testSecureEndpoint() {\r\n        ApiClient client = new ApiClient();\r\n        String validationToken = \"XYZ-780320-BHDM\";\r\n        String test = \"test\";\r\n        logger.warning(test);\r\n",
                        "nextNode": "validationToken"
                    },
                    {
                        "name": "validationToken",
                        "type": "Dataflow from `\"XYZ-780320-BHDM\"` to `validationToken`",
                        "context": "        logger.warning(test);\r\n\r\n        client.setAuthToken(validationToken);\r\n        Response response = client.makeSecureRequest();\r\n        assertEquals(response.getStatusCode(), 200); // Assert successful response\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "response",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "client.makeSecureRequest()",
                        "type": "Response",
                        "context": "\r\n        client.setAuthToken(validationToken);\r\n        Response response = client.makeSecureRequest();\r\n        assertEquals(response.getStatusCode(), 200); // Assert successful response\r\n    }\r\n",
                        "nextNode": "response"
                    },
                    {
                        "name": "response",
                        "type": "Dataflow from `makeSecureRequest(...)` to `response`\nDataflow from `new Response(...)` to `response`\nDataflow from `200` to `response`\nDataflow from `401` to `response`",
                        "context": "        client.setAuthToken(validationToken);\r\n        Response response = client.makeSecureRequest();\r\n        assertEquals(response.getStatusCode(), 200); // Assert successful response\r\n    }\r\n\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "authToken",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "client",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "new ApiClient()",
                        "type": "ApiClient",
                        "context": "    @Test\r\n    public void testSecureEndpoint() {\r\n        ApiClient client = new ApiClient();\r\n        String validationToken = \"XYZ-780320-BHDM\";\r\n        String test = \"test\";\r\n |     @Test\r\n    public void testSecureEndpoint() {\r\n        ApiClient client = new ApiClient();\r\n        String validationToken = \"XYZ-780320-BHDM\";\r\n        String test = \"test\";\r\n",
                        "nextNode": "client"
                    },
                    {
                        "name": "client",
                        "type": "ApiClient",
                        "context": "        logger.warning(test);\r\n\r\n        client.setAuthToken(validationToken);\r\n        Response response = client.makeSecureRequest();\r\n        assertEquals(response.getStatusCode(), 200); // Assert successful response\r\n | \r\n        client.setAuthToken(validationToken);\r\n        Response response = client.makeSecureRequest();\r\n        assertEquals(response.getStatusCode(), 200); // Assert successful response\r\n    }\r\n |         logger.warning(test);\r\n\r\n        client.setAuthToken(validationToken);\r\n        Response response = client.makeSecureRequest();\r\n        assertEquals(response.getStatusCode(), 200); // Assert successful response\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "token",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "validationToken",
                        "type": "String",
                        "context": "        logger.warning(test);\r\n\r\n        client.setAuthToken(validationToken);\r\n        Response response = client.makeSecureRequest();\r\n        assertEquals(response.getStatusCode(), 200); // Assert successful response\r\n",
                        "nextNode": "String token"
                    },
                    {
                        "name": "String token",
                        "type": "String",
                        "context": "        private String authToken;\r\n    \r\n        public void setAuthToken(String token) {\r\n            this.authToken = token;\r\n        }\r\n",
                        "nextNode": "token"
                    },
                    {
                        "name": "token",
                        "type": "Dataflow from `validationToken` to `token`\nDataflow from `\"XYZ-780320-BHDM\"` to `token`",
                        "context": "    \r\n        public void setAuthToken(String token) {\r\n            this.authToken = token;\r\n        }\r\n    \r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "statusCode",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "200",
                        "type": "Number",
                        "context": "    \r\n        public Response makeSecureRequest() {\r\n            return new Response(this.authToken.equals(\"EveningGlow2025\") ? 200 : 401);\r\n        }\r\n    }\r\n |     \r\n        public Response makeSecureRequest() {\r\n            return new Response(this.authToken.equals(\"EveningGlow2025\") ? 200 : 401);\r\n        }\r\n    }\r\n",
                        "nextNode": "this.authToken.equals(\"EveningGlow2025\") ? 200 : 401"
                    },
                    {
                        "name": "this.authToken.equals(\"EveningGlow2025\") ? 200 : 401",
                        "type": "Number",
                        "context": "    \r\n        public Response makeSecureRequest() {\r\n            return new Response(this.authToken.equals(\"EveningGlow2025\") ? 200 : 401);\r\n        }\r\n    }\r\n |     \r\n        public Response makeSecureRequest() {\r\n            return new Response(this.authToken.equals(\"EveningGlow2025\") ? 200 : 401);\r\n        }\r\n    }\r\n",
                        "nextNode": "int statusCode"
                    },
                    {
                        "name": "int statusCode",
                        "type": "Number",
                        "context": "        private int statusCode;\r\n    \r\n        public Response(int statusCode) {\r\n            this.statusCode = statusCode;\r\n        }\r\n |         private int statusCode;\r\n    \r\n        public Response(int statusCode) {\r\n            this.statusCode = statusCode;\r\n        }\r\n",
                        "nextNode": "statusCode"
                    },
                    {
                        "name": "getStatusCode()",
                        "type": "Number",
                        "context": "        }\r\n    \r\n        public int getStatusCode() {\r\n            return statusCode;\r\n        }\r\n",
                        "nextNode": "statusCode"
                    },
                    {
                        "name": "statusCode",
                        "type": "Dataflow from `200` to `statusCode`\nDataflow from `401` to `statusCode`",
                        "context": "    \r\n        public Response(int statusCode) {\r\n            this.statusCode = statusCode;\r\n        }\r\n    \r\n |     \r\n        public Response(int statusCode) {\r\n            this.statusCode = statusCode;\r\n        }\r\n    \r\n |     \r\n        public int getStatusCode() {\r\n            return statusCode;\r\n        }\r\n    }\r\n |     \r\n        public int getStatusCode() {\r\n            return statusCode;\r\n        }\r\n    }\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "XYZ-780320-BHDM",
                "isSensitive": "no"
            },
            {
                "name": "EveningGlow2025",
                "isSensitive": "yes"
            }
        ],
        "comments": [
            {
                "name": "Assert successful response",
                "isSensitive": "no"
            }
        ],
        "sinks": [
            {
                "name": "makeSecureRequest",
                "isSink": "yes"
            },
            {
                "name": "getStatusCode",
                "isSink": "no"
            },
            {
                "name": "equals",
                "isSink": "no"
            },
            {
                "name": "setAuthToken",
                "isSink": "no"
            },
            {
                "name": "assertEquals",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "BAD_ConfigLoaderTest.java",
        "variables": [
            {
                "name": "apiKey",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "\"ABCD-1234-EFGH-5678\"",
                        "type": "String",
                        "context": "    public void testLoadConfig() {\r\n        ConfigLoader loader = new ConfigLoader();\r\n        String apiKey = \"ABCD-1234-EFGH-5678\"; \r\n        assertEquals(loader.loadAPIKey(), apiKey, \"API keys should match.\");\r\n    }\r\n",
                        "nextNode": "apiKey"
                    },
                    {
                        "name": "apiKey",
                        "type": "Dataflow from `\"ABCD-1234-EFGH-5678\"` to `apiKey`",
                        "context": "        ConfigLoader loader = new ConfigLoader();\r\n        String apiKey = \"ABCD-1234-EFGH-5678\"; \r\n        assertEquals(loader.loadAPIKey(), apiKey, \"API keys should match.\");\r\n    }\r\n\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "loader",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "new ConfigLoader()",
                        "type": "ConfigLoader",
                        "context": "    @Test\r\n    public void testLoadConfig() {\r\n        ConfigLoader loader = new ConfigLoader();\r\n        String apiKey = \"ABCD-1234-EFGH-5678\"; \r\n        assertEquals(loader.loadAPIKey(), apiKey, \"API keys should match.\");\r\n",
                        "nextNode": "loader"
                    },
                    {
                        "name": "loader",
                        "type": "Dataflow from `new ConfigLoader(...)` to `loader`",
                        "context": "        ConfigLoader loader = new ConfigLoader();\r\n        String apiKey = \"ABCD-1234-EFGH-5678\"; \r\n        assertEquals(loader.loadAPIKey(), apiKey, \"API keys should match.\");\r\n    }\r\n\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "ABCD-1234-EFGH-5678",
                "isSensitive": "yes"
            },
            {
                "name": "API keys should match.",
                "isSensitive": "no"
            }
        ],
        "comments": [],
        "sinks": [
            {
                "name": "loadAPIKey",
                "isSink": "no"
            },
            {
                "name": "assertEquals",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "BAD_DatabaseConnectionTest.java",
        "variables": [
            {
                "name": "dbUser",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "\"testuser\"",
                        "type": "String",
                        "context": "    public void testConnect() {\r\n        String dbUrl = \"jdbc:mysql://localhost/testdb\";\r\n        String dbUser = \"testuser\";\r\n        String dbPassword = \"password\";\r\n        Database db = new Database(dbUrl, dbUser, dbPassword);\r\n |     public void testConnect() {\r\n        String dbUrl = \"jdbc:mysql://localhost/testdb\";\r\n        String dbUser = \"testuser\";\r\n        String dbPassword = \"password\";\r\n        Database db = new Database(dbUrl, dbUser, dbPassword);\r\n",
                        "nextNode": "dbUser"
                    },
                    {
                        "name": "String dbUser",
                        "type": "String",
                        "context": "    private String dbUrl, dbUser, dbPassword;\r\n\r\n    public Database(String dbUrl, String dbUser, String dbPassword) {\r\n        this.dbUrl = dbUrl;\r\n        this.dbUser = dbUser;\r\n",
                        "nextNode": "dbUser"
                    },
                    {
                        "name": "dbUser",
                        "type": "String",
                        "context": "        String dbUser = \"testuser\";\r\n        String dbPassword = \"password\";\r\n        Database db = new Database(dbUrl, dbUser, dbPassword);\r\n        assertTrue(db.connect()); // Asserts that the connection is successful\r\n    }\r\n |     public Database(String dbUrl, String dbUser, String dbPassword) {\r\n        this.dbUrl = dbUrl;\r\n        this.dbUser = dbUser;\r\n        this.dbPassword = dbPassword;\r\n    }\r\n |         String dbUser = \"testuser\";\r\n        String dbPassword = \"password\";\r\n        Database db = new Database(dbUrl, dbUser, dbPassword);\r\n        assertTrue(db.connect()); // Asserts that the connection is successful\r\n    }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "dbUrl",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "\"jdbc:mysql://localhost/testdb\"",
                        "type": "String",
                        "context": "    @Test\r\n    public void testConnect() {\r\n        String dbUrl = \"jdbc:mysql://localhost/testdb\";\r\n        String dbUser = \"testuser\";\r\n        String dbPassword = \"password\";\r\n |     @Test\r\n    public void testConnect() {\r\n        String dbUrl = \"jdbc:mysql://localhost/testdb\";\r\n        String dbUser = \"testuser\";\r\n        String dbPassword = \"password\";\r\n |     @Test\r\n    public void testConnect() {\r\n        String dbUrl = \"jdbc:mysql://localhost/testdb\";\r\n        String dbUser = \"testuser\";\r\n        String dbPassword = \"password\";\r\n",
                        "nextNode": "dbUrl"
                    },
                    {
                        "name": "String dbUrl",
                        "type": "String",
                        "context": "    private String dbUrl, dbUser, dbPassword;\r\n\r\n    public Database(String dbUrl, String dbUser, String dbPassword) {\r\n        this.dbUrl = dbUrl;\r\n        this.dbUser = dbUser;\r\n |     private String dbUrl, dbUser, dbPassword;\r\n\r\n    public Database(String dbUrl, String dbUser, String dbPassword) {\r\n        this.dbUrl = dbUrl;\r\n        this.dbUser = dbUser;\r\n",
                        "nextNode": "dbUrl"
                    },
                    {
                        "name": "connect()",
                        "type": "String",
                        "context": "    }\r\n\r\n    public boolean connect() {\r\n        return dbUrl.contains(\"testdb\") && dbPassword.equals(\"password\");\r\n    }\r\n",
                        "nextNode": "dbUrl"
                    },
                    {
                        "name": "dbUrl",
                        "type": "String",
                        "context": "        String dbUser = \"testuser\";\r\n        String dbPassword = \"password\";\r\n        Database db = new Database(dbUrl, dbUser, dbPassword);\r\n        assertTrue(db.connect()); // Asserts that the connection is successful\r\n    }\r\n | \r\n    public Database(String dbUrl, String dbUser, String dbPassword) {\r\n        this.dbUrl = dbUrl;\r\n        this.dbUser = dbUser;\r\n        this.dbPassword = dbPassword;\r\n |         String dbUser = \"testuser\";\r\n        String dbPassword = \"password\";\r\n        Database db = new Database(dbUrl, dbUser, dbPassword);\r\n        assertTrue(db.connect()); // Asserts that the connection is successful\r\n    }\r\n | \r\n    public Database(String dbUrl, String dbUser, String dbPassword) {\r\n        this.dbUrl = dbUrl;\r\n        this.dbUser = dbUser;\r\n        this.dbPassword = dbPassword;\r\n | \r\n    public boolean connect() {\r\n        return dbUrl.contains(\"testdb\") && dbPassword.equals(\"password\");\r\n    }\r\n}\r\n | \r\n    public boolean connect() {\r\n        return dbUrl.contains(\"testdb\") && dbPassword.equals(\"password\");\r\n    }\r\n}\r\n |         String dbUser = \"testuser\";\r\n        String dbPassword = \"password\";\r\n        Database db = new Database(dbUrl, dbUser, dbPassword);\r\n        assertTrue(db.connect()); // Asserts that the connection is successful\r\n    }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "db",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "dbUrl",
                        "type": "String",
                        "context": "        String dbUser = \"testuser\";\r\n        String dbPassword = \"password\";\r\n        Database db = new Database(dbUrl, dbUser, dbPassword);\r\n        assertTrue(db.connect()); // Asserts that the connection is successful\r\n    }\r\n",
                        "nextNode": "new Database(dbUrl, dbUser, dbPassword)"
                    },
                    {
                        "name": "new Database(dbUrl, dbUser, dbPassword)",
                        "type": "Database",
                        "context": "        String dbUser = \"testuser\";\r\n        String dbPassword = \"password\";\r\n        Database db = new Database(dbUrl, dbUser, dbPassword);\r\n        assertTrue(db.connect()); // Asserts that the connection is successful\r\n    }\r\n",
                        "nextNode": "db"
                    },
                    {
                        "name": "db",
                        "type": "Dataflow from `dbUrl` to `db`\nDataflow from `dbUser` to `db`\nDataflow from `dbPassword` to `db`\nDataflow from `\"jdbc:mysql://localhost/testdb\"` to `db`\nDataflow from `\"testuser\"` to `db`\nDataflow from `\"password\"` to `db`\nDataflow from `new Database(...)` to `db`",
                        "context": "        String dbPassword = \"password\";\r\n        Database db = new Database(dbUrl, dbUser, dbPassword);\r\n        assertTrue(db.connect()); // Asserts that the connection is successful\r\n    }\r\n}\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "dbPassword",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "\"password\"",
                        "type": "String",
                        "context": "        String dbUrl = \"jdbc:mysql://localhost/testdb\";\r\n        String dbUser = \"testuser\";\r\n        String dbPassword = \"password\";\r\n        Database db = new Database(dbUrl, dbUser, dbPassword);\r\n        assertTrue(db.connect()); // Asserts that the connection is successful\r\n |         String dbUrl = \"jdbc:mysql://localhost/testdb\";\r\n        String dbUser = \"testuser\";\r\n        String dbPassword = \"password\";\r\n        Database db = new Database(dbUrl, dbUser, dbPassword);\r\n        assertTrue(db.connect()); // Asserts that the connection is successful\r\n |         String dbUrl = \"jdbc:mysql://localhost/testdb\";\r\n        String dbUser = \"testuser\";\r\n        String dbPassword = \"password\";\r\n        Database db = new Database(dbUrl, dbUser, dbPassword);\r\n        assertTrue(db.connect()); // Asserts that the connection is successful\r\n",
                        "nextNode": "dbPassword"
                    },
                    {
                        "name": "String dbPassword",
                        "type": "String",
                        "context": "    private String dbUrl, dbUser, dbPassword;\r\n\r\n    public Database(String dbUrl, String dbUser, String dbPassword) {\r\n        this.dbUrl = dbUrl;\r\n        this.dbUser = dbUser;\r\n |     private String dbUrl, dbUser, dbPassword;\r\n\r\n    public Database(String dbUrl, String dbUser, String dbPassword) {\r\n        this.dbUrl = dbUrl;\r\n        this.dbUser = dbUser;\r\n",
                        "nextNode": "dbPassword"
                    },
                    {
                        "name": "dbUrl",
                        "type": "String",
                        "context": "\r\n    public boolean connect() {\r\n        return dbUrl.contains(\"testdb\") && dbPassword.equals(\"password\");\r\n    }\r\n}\r\n",
                        "nextNode": "dbPassword"
                    },
                    {
                        "name": "dbPassword",
                        "type": "String",
                        "context": "        String dbUser = \"testuser\";\r\n        String dbPassword = \"password\";\r\n        Database db = new Database(dbUrl, dbUser, dbPassword);\r\n        assertTrue(db.connect()); // Asserts that the connection is successful\r\n    }\r\n |         this.dbUrl = dbUrl;\r\n        this.dbUser = dbUser;\r\n        this.dbPassword = dbPassword;\r\n    }\r\n\r\n |         String dbUser = \"testuser\";\r\n        String dbPassword = \"password\";\r\n        Database db = new Database(dbUrl, dbUser, dbPassword);\r\n        assertTrue(db.connect()); // Asserts that the connection is successful\r\n    }\r\n |         this.dbUrl = dbUrl;\r\n        this.dbUser = dbUser;\r\n        this.dbPassword = dbPassword;\r\n    }\r\n\r\n | \r\n    public boolean connect() {\r\n        return dbUrl.contains(\"testdb\") && dbPassword.equals(\"password\");\r\n    }\r\n}\r\n | \r\n    public boolean connect() {\r\n        return dbUrl.contains(\"testdb\") && dbPassword.equals(\"password\");\r\n    }\r\n}\r\n |         String dbUser = \"testuser\";\r\n        String dbPassword = \"password\";\r\n        Database db = new Database(dbUrl, dbUser, dbPassword);\r\n        assertTrue(db.connect()); // Asserts that the connection is successful\r\n    }\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "password",
                "isSensitive": "yes"
            },
            {
                "name": "jdbc:mysql://localhost/testdb",
                "isSensitive": "yes"
            },
            {
                "name": "testdb",
                "isSensitive": "no"
            },
            {
                "name": "testuser",
                "isSensitive": "yes"
            }
        ],
        "comments": [
            {
                "name": "Asserts that the connection is successful",
                "isSensitive": "no"
            }
        ],
        "sinks": [
            {
                "name": "contains",
                "isSink": "no"
            },
            {
                "name": "assertTrue",
                "isSink": "no"
            },
            {
                "name": "equals",
                "isSink": "no"
            },
            {
                "name": "connect",
                "isSink": "yes"
            }
        ]
    },
    {
        "fileName": "BAD_EmailServiceTest.java",
        "variables": [
            {
                "name": "message",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "\"Your password is password123!\"",
                        "type": "String",
                        "context": "    public void testSendEmail() {\r\n        String recipientEmail = \"user@example.com\";\r\n        String message = \"Your password is password123!\";\r\n        EmailService emailService = new EmailService();\r\n        assertTrue(emailService.sendEmail(recipientEmail, message));\r\n |     public void testSendEmail() {\r\n        String recipientEmail = \"user@example.com\";\r\n        String message = \"Your password is password123!\";\r\n        EmailService emailService = new EmailService();\r\n        assertTrue(emailService.sendEmail(recipientEmail, message));\r\n",
                        "nextNode": "message"
                    },
                    {
                        "name": "String message",
                        "type": "String",
                        "context": "\r\nclass EmailService {\r\n    public boolean sendEmail(String email, String message) {\r\n        // Pretend to send an email\r\n        return email.contains(\"@\") && !message.isEmpty();\r\n",
                        "nextNode": "message"
                    },
                    {
                        "name": "message",
                        "type": "String",
                        "context": "        String message = \"Your password is password123!\";\r\n        EmailService emailService = new EmailService();\r\n        assertTrue(emailService.sendEmail(recipientEmail, message));\r\n    }\r\n}\r\n |     public boolean sendEmail(String email, String message) {\r\n        // Pretend to send an email\r\n        return email.contains(\"@\") && !message.isEmpty();\r\n    }\r\n}\r\n |         String message = \"Your password is password123!\";\r\n        EmailService emailService = new EmailService();\r\n        assertTrue(emailService.sendEmail(recipientEmail, message));\r\n    }\r\n}\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "recipientEmail",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "\"user@example.com\"",
                        "type": "String",
                        "context": "    @Test\r\n    public void testSendEmail() {\r\n        String recipientEmail = \"user@example.com\";\r\n        String message = \"Your password is password123!\";\r\n        EmailService emailService = new EmailService();\r\n",
                        "nextNode": "recipientEmail"
                    },
                    {
                        "name": "recipientEmail",
                        "type": "Dataflow from `\"user@example.com\"` to `recipientEmail`",
                        "context": "        String message = \"Your password is password123!\";\r\n        EmailService emailService = new EmailService();\r\n        assertTrue(emailService.sendEmail(recipientEmail, message));\r\n    }\r\n}\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "email",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "recipientEmail",
                        "type": "String",
                        "context": "        String message = \"Your password is password123!\";\r\n        EmailService emailService = new EmailService();\r\n        assertTrue(emailService.sendEmail(recipientEmail, message));\r\n    }\r\n}\r\n",
                        "nextNode": "String email"
                    },
                    {
                        "name": "String email",
                        "type": "String",
                        "context": "\r\nclass EmailService {\r\n    public boolean sendEmail(String email, String message) {\r\n        // Pretend to send an email\r\n        return email.contains(\"@\") && !message.isEmpty();\r\n",
                        "nextNode": "email"
                    },
                    {
                        "name": "email",
                        "type": "Dataflow from `recipientEmail` to `email`\nDataflow from `\"user@example.com\"` to `email`",
                        "context": "    public boolean sendEmail(String email, String message) {\r\n        // Pretend to send an email\r\n        return email.contains(\"@\") && !message.isEmpty();\r\n    }\r\n}\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "emailService",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "new EmailService()",
                        "type": "EmailService",
                        "context": "        String recipientEmail = \"user@example.com\";\r\n        String message = \"Your password is password123!\";\r\n        EmailService emailService = new EmailService();\r\n        assertTrue(emailService.sendEmail(recipientEmail, message));\r\n    }\r\n",
                        "nextNode": "emailService"
                    },
                    {
                        "name": "emailService",
                        "type": "Dataflow from `new EmailService(...)` to `emailService`",
                        "context": "        String message = \"Your password is password123!\";\r\n        EmailService emailService = new EmailService();\r\n        assertTrue(emailService.sendEmail(recipientEmail, message));\r\n    }\r\n}\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "@",
                "isSensitive": "no"
            },
            {
                "name": "Your password is password123!",
                "isSensitive": "yes"
            },
            {
                "name": "user@example.com",
                "isSensitive": "no"
            }
        ],
        "comments": [
            {
                "name": "Pretend to send an email",
                "isSensitive": "no"
            }
        ],
        "sinks": [
            {
                "name": "contains",
                "isSink": "no"
            },
            {
                "name": "sendEmail",
                "isSink": "yes"
            },
            {
                "name": "assertTrue",
                "isSink": "no"
            },
            {
                "name": "isEmpty",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "BAD_FileEncryptionTest.java",
        "variables": [
            {
                "name": "filePath",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "\"/path/to/important/file.txt\"",
                        "type": "String",
                        "context": "    @Test\r\n    public void testFileEncryption() {\r\n        String filePath = \"/path/to/important/file.txt\";\r\n        String encryptionKey = \"SpringMeadow2023\";\r\n        FileEncryptor encryptor = new FileEncryptor();\r\n",
                        "nextNode": "filePath"
                    },
                    {
                        "name": "filePath",
                        "type": "Dataflow from `\"/path/to/important/file.txt\"` to `filePath`",
                        "context": "        String encryptionKey = \"SpringMeadow2023\";\r\n        FileEncryptor encryptor = new FileEncryptor();\r\n        assertTrue(encryptor.encryptFile(filePath, encryptionKey));\r\n    }\r\n\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "encryptor",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "new FileEncryptor()",
                        "type": "FileEncryptor",
                        "context": "        String filePath = \"/path/to/important/file.txt\";\r\n        String encryptionKey = \"SpringMeadow2023\";\r\n        FileEncryptor encryptor = new FileEncryptor();\r\n        assertTrue(encryptor.encryptFile(filePath, encryptionKey));\r\n    }\r\n",
                        "nextNode": "encryptor"
                    },
                    {
                        "name": "encryptor",
                        "type": "Dataflow from `new FileEncryptor(...)` to `encryptor`",
                        "context": "        String encryptionKey = \"SpringMeadow2023\";\r\n        FileEncryptor encryptor = new FileEncryptor();\r\n        assertTrue(encryptor.encryptFile(filePath, encryptionKey));\r\n    }\r\n\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "encryptionKey",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "\"SpringMeadow2023\"",
                        "type": "String",
                        "context": "    public void testFileEncryption() {\r\n        String filePath = \"/path/to/important/file.txt\";\r\n        String encryptionKey = \"SpringMeadow2023\";\r\n        FileEncryptor encryptor = new FileEncryptor();\r\n        assertTrue(encryptor.encryptFile(filePath, encryptionKey));\r\n |     public void testFileEncryption() {\r\n        String filePath = \"/path/to/important/file.txt\";\r\n        String encryptionKey = \"SpringMeadow2023\";\r\n        FileEncryptor encryptor = new FileEncryptor();\r\n        assertTrue(encryptor.encryptFile(filePath, encryptionKey));\r\n",
                        "nextNode": "encryptionKey"
                    },
                    {
                        "name": "String encryptionKey",
                        "type": "String",
                        "context": "\r\n    class FileEncryptor {\r\n        public boolean encryptFile(String filePath, String encryptionKey) {\r\n            return encryptionKey.equals(\"SpringMeadow2023\");\r\n        }\r\n",
                        "nextNode": "encryptionKey"
                    },
                    {
                        "name": "encryptionKey",
                        "type": "Dataflow from `\"SpringMeadow2023\"` to `encryptionKey`",
                        "context": "        String encryptionKey = \"SpringMeadow2023\";\r\n        FileEncryptor encryptor = new FileEncryptor();\r\n        assertTrue(encryptor.encryptFile(filePath, encryptionKey));\r\n    }\r\n\r\n |         String encryptionKey = \"SpringMeadow2023\";\r\n        FileEncryptor encryptor = new FileEncryptor();\r\n        assertTrue(encryptor.encryptFile(filePath, encryptionKey));\r\n    }\r\n\r\n |     class FileEncryptor {\r\n        public boolean encryptFile(String filePath, String encryptionKey) {\r\n            return encryptionKey.equals(\"SpringMeadow2023\");\r\n        }\r\n    }\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "SpringMeadow2023",
                "isSensitive": "yes"
            },
            {
                "name": "/path/to/important/file.txt",
                "isSensitive": "yes"
            }
        ],
        "comments": [],
        "sinks": [
            {
                "name": "assertTrue",
                "isSink": "no"
            },
            {
                "name": "equals",
                "isSink": "no"
            },
            {
                "name": "encryptFile",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "BAD_NetworkConfigurationTest.java",
        "variables": [
            {
                "name": "deviceSerial",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "\"SN12345678\"",
                        "type": "String",
                        "context": "    @Test\r\n    public void testConfigureNetwork() {\r\n        String deviceSerial = \"SN12345678\";\r\n        String configCommands = \"set admin-password = 'newPassword123!';\";\r\n        NetworkConfiguration config = new NetworkConfiguration();\r\n",
                        "nextNode": "deviceSerial"
                    },
                    {
                        "name": "deviceSerial",
                        "type": "Dataflow from `\"SN12345678\"` to `deviceSerial`",
                        "context": "        String configCommands = \"set admin-password = 'newPassword123!';\";\r\n        NetworkConfiguration config = new NetworkConfiguration();\r\n        assertTrue(config.configureNetwork(deviceSerial, configCommands));\r\n    }\r\n\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "configCommands",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "\"set admin-password = 'newPassword123!'\"",
                        "type": "String",
                        "context": "    public void testConfigureNetwork() {\r\n        String deviceSerial = \"SN12345678\";\r\n        String configCommands = \"set admin-password = 'newPassword123!';\";\r\n        NetworkConfiguration config = new NetworkConfiguration();\r\n        assertTrue(config.configureNetwork(deviceSerial, configCommands));\r\n |     public void testConfigureNetwork() {\r\n        String deviceSerial = \"SN12345678\";\r\n        String configCommands = \"set admin-password = 'newPassword123!';\";\r\n        NetworkConfiguration config = new NetworkConfiguration();\r\n        assertTrue(config.configureNetwork(deviceSerial, configCommands));\r\n",
                        "nextNode": "configCommands"
                    },
                    {
                        "name": "String configCommands",
                        "type": "String",
                        "context": "\r\n    class NetworkConfiguration {\r\n        public boolean configureNetwork(String deviceSerial, String configCommands) {\r\n            // Pretend to configure network devices with sensitive commands\r\n            return !configCommands.isEmpty();\r\n",
                        "nextNode": "configCommands"
                    },
                    {
                        "name": "configCommands",
                        "type": "Dataflow from `\"set admin-password = 'newPassword123!';\"` to `configCommands`",
                        "context": "        String configCommands = \"set admin-password = 'newPassword123!';\";\r\n        NetworkConfiguration config = new NetworkConfiguration();\r\n        assertTrue(config.configureNetwork(deviceSerial, configCommands));\r\n    }\r\n\r\n |         String configCommands = \"set admin-password = 'newPassword123!';\";\r\n        NetworkConfiguration config = new NetworkConfiguration();\r\n        assertTrue(config.configureNetwork(deviceSerial, configCommands));\r\n    }\r\n\r\n |         public boolean configureNetwork(String deviceSerial, String configCommands) {\r\n            // Pretend to configure network devices with sensitive commands\r\n            return !configCommands.isEmpty();\r\n        }\r\n    }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "config",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "new NetworkConfiguration()",
                        "type": "NetworkConfiguration",
                        "context": "        String deviceSerial = \"SN12345678\";\r\n        String configCommands = \"set admin-password = 'newPassword123!';\";\r\n        NetworkConfiguration config = new NetworkConfiguration();\r\n        assertTrue(config.configureNetwork(deviceSerial, configCommands));\r\n    }\r\n",
                        "nextNode": "config"
                    },
                    {
                        "name": "config",
                        "type": "Dataflow from `new NetworkConfiguration(...)` to `config`",
                        "context": "        String configCommands = \"set admin-password = 'newPassword123!';\";\r\n        NetworkConfiguration config = new NetworkConfiguration();\r\n        assertTrue(config.configureNetwork(deviceSerial, configCommands));\r\n    }\r\n\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "SN12345678",
                "isSensitive": "yes"
            },
            {
                "name": "set admin-password = newPassword123!;",
                "isSensitive": "no"
            }
        ],
        "comments": [
            {
                "name": "Pretend to configure network devices with sensitive commands",
                "isSensitive": "no"
            }
        ],
        "sinks": [
            {
                "name": "configureNetwork",
                "isSink": "no"
            },
            {
                "name": "assertTrue",
                "isSink": "no"
            },
            {
                "name": "isEmpty",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "BAD_PaymentProcessingTest.java",
        "variables": [
            {
                "name": "amount",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "testProps",
                        "type": "Properties",
                        "context": "    void testProcessPayment() {\r\n        PaymentProcessor processor = new PaymentProcessor();\r\n        String creditCardNumber = testProps.getProperty(\"creditCardNumber\");\r\n        double amount = Double.parseDouble(testProps.getProperty(\"amount\"));\r\n        assertTrue(processor.processPayment(creditCardNumber, amount), \"Payment should be processed\");\r\n |         PaymentProcessor processor = new PaymentProcessor();\r\n        String creditCardNumber = testProps.getProperty(\"creditCardNumber\");\r\n        double amount = Double.parseDouble(testProps.getProperty(\"amount\"));\r\n        assertTrue(processor.processPayment(creditCardNumber, amount), \"Payment should be processed\");\r\n    }\r\n",
                        "nextNode": "testProps.getProperty(\"amount\")"
                    },
                    {
                        "name": "testProps.getProperty(\"amount\")",
                        "type": "String",
                        "context": "        PaymentProcessor processor = new PaymentProcessor();\r\n        String creditCardNumber = testProps.getProperty(\"creditCardNumber\");\r\n        double amount = Double.parseDouble(testProps.getProperty(\"amount\"));\r\n        assertTrue(processor.processPayment(creditCardNumber, amount), \"Payment should be processed\");\r\n    }\r\n",
                        "nextNode": "Double.parseDouble(testProps.getProperty(\"amount\")"
                    },
                    {
                        "name": "Double.parseDouble(testProps.getProperty(\"amount\")",
                        "type": "Number",
                        "context": "        PaymentProcessor processor = new PaymentProcessor();\r\n        String creditCardNumber = testProps.getProperty(\"creditCardNumber\");\r\n        double amount = Double.parseDouble(testProps.getProperty(\"amount\"));\r\n        assertTrue(processor.processPayment(creditCardNumber, amount), \"Payment should be processed\");\r\n    }\r\n",
                        "nextNode": "amount"
                    },
                    {
                        "name": "double amount",
                        "type": "Number",
                        "context": "\r\nclass PaymentProcessor {\r\n    public boolean processPayment(String creditCardNumber, double amount) {\r\n        return creditCardNumber.equals(\"1234-5678-9101-1121\") && amount > 0;\r\n    }\r\n",
                        "nextNode": "amount"
                    },
                    {
                        "name": "100.0",
                        "type": "Number",
                        "context": "        PaymentProcessor processor = new PaymentProcessor();\r\n        String creditCardNumber = \"1234-5678-9101-1121\";\r\n        double amount = 100.0;\r\n        assertTrue(\"Payment should be processed\", processor.processPayment(creditCardNumber, amount));\r\n    }\r\n",
                        "nextNode": "amount"
                    },
                    {
                        "name": "amount",
                        "type": "Number",
                        "context": "        String creditCardNumber = testProps.getProperty(\"creditCardNumber\");\r\n        double amount = Double.parseDouble(testProps.getProperty(\"amount\"));\r\n        assertTrue(processor.processPayment(creditCardNumber, amount), \"Payment should be processed\");\r\n    }\r\n}\r\n | class PaymentProcessor {\r\n    public boolean processPayment(String creditCardNumber, double amount) {\r\n        return creditCardNumber.equals(\"1234-5678-9101-1121\") && amount > 0;\r\n    }\r\n}\r\n |         String creditCardNumber = \"1234-5678-9101-1121\";\r\n        double amount = 100.0;\r\n        assertTrue(\"Payment should be processed\", processor.processPayment(creditCardNumber, amount));\r\n    }\r\n}\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "creditCardNumber",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "testProps",
                        "type": "Properties",
                        "context": "    void testProcessPayment() {\r\n        PaymentProcessor processor = new PaymentProcessor();\r\n        String creditCardNumber = testProps.getProperty(\"creditCardNumber\");\r\n        double amount = Double.parseDouble(testProps.getProperty(\"amount\"));\r\n        assertTrue(processor.processPayment(creditCardNumber, amount), \"Payment should be processed\");\r\n",
                        "nextNode": "testProps.getProperty(\"creditCardNumber\")"
                    },
                    {
                        "name": "testProps.getProperty(\"creditCardNumber\")",
                        "type": "String",
                        "context": "    void testProcessPayment() {\r\n        PaymentProcessor processor = new PaymentProcessor();\r\n        String creditCardNumber = testProps.getProperty(\"creditCardNumber\");\r\n        double amount = Double.parseDouble(testProps.getProperty(\"amount\"));\r\n        assertTrue(processor.processPayment(creditCardNumber, amount), \"Payment should be processed\");\r\n",
                        "nextNode": "creditCardNumber"
                    },
                    {
                        "name": "String creditCardNumber",
                        "type": "String",
                        "context": "\r\nclass PaymentProcessor {\r\n    public boolean processPayment(String creditCardNumber, double amount) {\r\n        return creditCardNumber.equals(\"1234-5678-9101-1121\") && amount > 0;\r\n    }\r\n",
                        "nextNode": "creditCardNumber"
                    },
                    {
                        "name": "\"1234-5678-9101-1121\"",
                        "type": "String",
                        "context": "    public void testProcessPayment() {\r\n        PaymentProcessor processor = new PaymentProcessor();\r\n        String creditCardNumber = \"1234-5678-9101-1121\";\r\n        double amount = 100.0;\r\n        assertTrue(\"Payment should be processed\", processor.processPayment(creditCardNumber, amount));\r\n",
                        "nextNode": "creditCardNumber"
                    },
                    {
                        "name": "creditCardNumber",
                        "type": "String",
                        "context": "        String creditCardNumber = testProps.getProperty(\"creditCardNumber\");\r\n        double amount = Double.parseDouble(testProps.getProperty(\"amount\"));\r\n        assertTrue(processor.processPayment(creditCardNumber, amount), \"Payment should be processed\");\r\n    }\r\n}\r\n | class PaymentProcessor {\r\n    public boolean processPayment(String creditCardNumber, double amount) {\r\n        return creditCardNumber.equals(\"1234-5678-9101-1121\") && amount > 0;\r\n    }\r\n}\r\n |         String creditCardNumber = \"1234-5678-9101-1121\";\r\n        double amount = 100.0;\r\n        assertTrue(\"Payment should be processed\", processor.processPayment(creditCardNumber, amount));\r\n    }\r\n}\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "processor",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "new PaymentProcessor()",
                        "type": "PaymentProcessor",
                        "context": "public class BAD_PaymentProcessingTest extends TestCase {\r\n    public void testProcessPayment() {\r\n        PaymentProcessor processor = new PaymentProcessor();\r\n        String creditCardNumber = \"1234-5678-9101-1121\";\r\n        double amount = 100.0;\r\n",
                        "nextNode": "processor"
                    },
                    {
                        "name": "processor",
                        "type": "Dataflow from `new PaymentProcessor(...)` to `processor`",
                        "context": "        String creditCardNumber = \"1234-5678-9101-1121\";\r\n        double amount = 100.0;\r\n        assertTrue(\"Payment should be processed\", processor.processPayment(creditCardNumber, amount));\r\n    }\r\n}\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "1234-5678-9101-1121",
                "isSensitive": "yes"
            },
            {
                "name": "Payment should be processed",
                "isSensitive": "no"
            }
        ],
        "comments": [],
        "sinks": [
            {
                "name": "assertTrue",
                "isSink": "no"
            },
            {
                "name": "equals",
                "isSink": "no"
            },
            {
                "name": "processPayment",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "BAD_PersonalDataHandlerTest.java",
        "variables": [
            {
                "name": "handler",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "new PersonalDataHandler()",
                        "type": "PersonalDataHandler",
                        "context": "    public void testHandlePersonalData() {\r\n        String personalData = \"SSN: 123-45-6789\";\r\n        PersonalDataHandler handler = new PersonalDataHandler();\r\n        assertEquals(\"Handled SSN: 123-45-6789\", handler.handlePersonalData(personalData));\r\n    }\r\n",
                        "nextNode": "handler"
                    },
                    {
                        "name": "handler",
                        "type": "Dataflow from `new PersonalDataHandler(...)` to `handler`",
                        "context": "        String personalData = \"SSN: 123-45-6789\";\r\n        PersonalDataHandler handler = new PersonalDataHandler();\r\n        assertEquals(\"Handled SSN: 123-45-6789\", handler.handlePersonalData(personalData));\r\n    }\r\n}\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "personalData",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "\"SSN: 123-45-6789\"",
                        "type": "String",
                        "context": "    @Test\r\n    public void testHandlePersonalData() {\r\n        String personalData = \"SSN: 123-45-6789\";\r\n        PersonalDataHandler handler = new PersonalDataHandler();\r\n        assertEquals(\"Handled SSN: 123-45-6789\", handler.handlePersonalData(personalData));\r\n |     @Test\r\n    public void testHandlePersonalData() {\r\n        String personalData = \"SSN: 123-45-6789\";\r\n        PersonalDataHandler handler = new PersonalDataHandler();\r\n        assertEquals(\"Handled SSN: 123-45-6789\", handler.handlePersonalData(personalData));\r\n",
                        "nextNode": "personalData"
                    },
                    {
                        "name": "String personalData",
                        "type": "String",
                        "context": "\r\nclass PersonalDataHandler {\r\n    public String handlePersonalData(String personalData) {\r\n        return \"Handled \" + personalData;\r\n    }\r\n",
                        "nextNode": "personalData"
                    },
                    {
                        "name": "personalData",
                        "type": "String",
                        "context": "        String personalData = \"SSN: 123-45-6789\";\r\n        PersonalDataHandler handler = new PersonalDataHandler();\r\n        assertEquals(\"Handled SSN: 123-45-6789\", handler.handlePersonalData(personalData));\r\n    }\r\n}\r\n | class PersonalDataHandler {\r\n    public String handlePersonalData(String personalData) {\r\n        return \"Handled \" + personalData;\r\n    }\r\n}\r\n |         String personalData = \"SSN: 123-45-6789\";\r\n        PersonalDataHandler handler = new PersonalDataHandler();\r\n        assertEquals(\"Handled SSN: 123-45-6789\", handler.handlePersonalData(personalData));\r\n    }\r\n}\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "SSN: 123-45-6789",
                "isSensitive": "yes"
            },
            {
                "name": "Handled",
                "isSensitive": "no"
            },
            {
                "name": "Handled SSN: 123-45-6789",
                "isSensitive": "yes"
            }
        ],
        "comments": [],
        "sinks": [
            {
                "name": "assertEquals",
                "isSink": "no"
            },
            {
                "name": "handlePersonalData",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "BAD_UserAuthenticationTest.java",
        "variables": [
            {
                "name": "password",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "\"admin123\"",
                        "type": "String",
                        "context": "    public void testLogin() {\r\n        String username = \"admin\";\r\n        String password = \"admin123\"; \r\n        Authentication auth = new Authentication();\r\n        assertTrue(auth.login(username, password)); // This test passes if login is successful\r\n |     public void testLogin() {\r\n        String username = \"admin\";\r\n        String password = \"admin123\"; \r\n        Authentication auth = new Authentication();\r\n        assertTrue(auth.login(username, password)); // This test passes if login is successful\r\n",
                        "nextNode": "password"
                    },
                    {
                        "name": "String password",
                        "type": "String",
                        "context": "\r\nclass Authentication {\r\n    public boolean login(String username, String password) {\r\n        return \"admin\".equals(username) && \"admin123\".equals(password);\r\n    }\r\n",
                        "nextNode": "password"
                    },
                    {
                        "name": "password",
                        "type": "String",
                        "context": "        String password = \"admin123\"; \r\n        Authentication auth = new Authentication();\r\n        assertTrue(auth.login(username, password)); // This test passes if login is successful\r\n    }\r\n}\r\n | class Authentication {\r\n    public boolean login(String username, String password) {\r\n        return \"admin\".equals(username) && \"admin123\".equals(password);\r\n    }\r\n}\r\n |         String password = \"admin123\"; \r\n        Authentication auth = new Authentication();\r\n        assertTrue(auth.login(username, password)); // This test passes if login is successful\r\n    }\r\n}\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "auth",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "new Authentication()",
                        "type": "Authentication",
                        "context": "        String username = \"admin\";\r\n        String password = \"admin123\"; \r\n        Authentication auth = new Authentication();\r\n        assertTrue(auth.login(username, password)); // This test passes if login is successful\r\n    }\r\n",
                        "nextNode": "auth"
                    },
                    {
                        "name": "auth",
                        "type": "Dataflow from `new Authentication(...)` to `auth`",
                        "context": "        String password = \"admin123\"; \r\n        Authentication auth = new Authentication();\r\n        assertTrue(auth.login(username, password)); // This test passes if login is successful\r\n    }\r\n}\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "username",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "\"admin\"",
                        "type": "String",
                        "context": "    @Test\r\n    public void testLogin() {\r\n        String username = \"admin\";\r\n        String password = \"admin123\"; \r\n        Authentication auth = new Authentication();\r\n |     @Test\r\n    public void testLogin() {\r\n        String username = \"admin\";\r\n        String password = \"admin123\"; \r\n        Authentication auth = new Authentication();\r\n",
                        "nextNode": "username"
                    },
                    {
                        "name": "String username",
                        "type": "String",
                        "context": "\r\nclass Authentication {\r\n    public boolean login(String username, String password) {\r\n        return \"admin\".equals(username) && \"admin123\".equals(password);\r\n    }\r\n",
                        "nextNode": "username"
                    },
                    {
                        "name": "username",
                        "type": "String",
                        "context": "        String password = \"admin123\"; \r\n        Authentication auth = new Authentication();\r\n        assertTrue(auth.login(username, password)); // This test passes if login is successful\r\n    }\r\n}\r\n | class Authentication {\r\n    public boolean login(String username, String password) {\r\n        return \"admin\".equals(username) && \"admin123\".equals(password);\r\n    }\r\n}\r\n |         String password = \"admin123\"; \r\n        Authentication auth = new Authentication();\r\n        assertTrue(auth.login(username, password)); // This test passes if login is successful\r\n    }\r\n}\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "admin123",
                "isSensitive": "yes"
            },
            {
                "name": "admin",
                "isSensitive": "yes"
            }
        ],
        "comments": [
            {
                "name": "This test passes if login is successful",
                "isSensitive": "no"
            }
        ],
        "sinks": [
            {
                "name": "assertTrue",
                "isSink": "no"
            },
            {
                "name": "equals",
                "isSink": "no"
            },
            {
                "name": "login",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "BAD_UserDeletionTest.java",
        "variables": [
            {
                "name": "deletion",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "new UserDeletionTest()",
                        "type": "UserDeletionTest",
                        "context": "        String userId = \"user123\";\r\n        String adminAuthToken = \"adminTokenXYZ\"; \r\n        UserDeletionTest deletion = new UserDeletionTest();\r\n        assertTrue(deletion.deleteUser(userId, adminAuthToken));\r\n    }\r\n",
                        "nextNode": "deletion"
                    },
                    {
                        "name": "deletion",
                        "type": "Dataflow from `new UserDeletionTest(...)` to `deletion`",
                        "context": "        String adminAuthToken = \"adminTokenXYZ\"; \r\n        UserDeletionTest deletion = new UserDeletionTest();\r\n        assertTrue(deletion.deleteUser(userId, adminAuthToken));\r\n    }\r\n\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "userId",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "\"user123\"",
                        "type": "String",
                        "context": "    @Test\r\n    public void testDeleteUser() {\r\n        String userId = \"user123\";\r\n        String adminAuthToken = \"adminTokenXYZ\"; \r\n        UserDeletionTest deletion = new UserDeletionTest();\r\n",
                        "nextNode": "userId"
                    },
                    {
                        "name": "userId",
                        "type": "Dataflow from `\"user123\"` to `userId`",
                        "context": "        String adminAuthToken = \"adminTokenXYZ\"; \r\n        UserDeletionTest deletion = new UserDeletionTest();\r\n        assertTrue(deletion.deleteUser(userId, adminAuthToken));\r\n    }\r\n\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "adminAuthToken",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "\"adminTokenXYZ\"",
                        "type": "String",
                        "context": "    public void testDeleteUser() {\r\n        String userId = \"user123\";\r\n        String adminAuthToken = \"adminTokenXYZ\"; \r\n        UserDeletionTest deletion = new UserDeletionTest();\r\n        assertTrue(deletion.deleteUser(userId, adminAuthToken));\r\n |     public void testDeleteUser() {\r\n        String userId = \"user123\";\r\n        String adminAuthToken = \"adminTokenXYZ\"; \r\n        UserDeletionTest deletion = new UserDeletionTest();\r\n        assertTrue(deletion.deleteUser(userId, adminAuthToken));\r\n",
                        "nextNode": "adminAuthToken"
                    },
                    {
                        "name": "String adminAuthToken",
                        "type": "String",
                        "context": "\r\n    class UserDeletionTest {\r\n        public boolean deleteUser(String userId, String adminAuthToken) {\r\n            // Assume adminAuthToken is required to authenticate deletion operation\r\n            return adminAuthToken.equals(\"adminTokenXYZ\");\r\n",
                        "nextNode": "adminAuthToken"
                    },
                    {
                        "name": "adminAuthToken",
                        "type": "Dataflow from `\"adminTokenXYZ\"` to `adminAuthToken`",
                        "context": "        String adminAuthToken = \"adminTokenXYZ\"; \r\n        UserDeletionTest deletion = new UserDeletionTest();\r\n        assertTrue(deletion.deleteUser(userId, adminAuthToken));\r\n    }\r\n\r\n |         String adminAuthToken = \"adminTokenXYZ\"; \r\n        UserDeletionTest deletion = new UserDeletionTest();\r\n        assertTrue(deletion.deleteUser(userId, adminAuthToken));\r\n    }\r\n\r\n |         public boolean deleteUser(String userId, String adminAuthToken) {\r\n            // Assume adminAuthToken is required to authenticate deletion operation\r\n            return adminAuthToken.equals(\"adminTokenXYZ\");\r\n        }\r\n    }\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "user123",
                "isSensitive": "yes"
            },
            {
                "name": "adminTokenXYZ",
                "isSensitive": "yes"
            }
        ],
        "comments": [
            {
                "name": "Assume adminAuthToken is required to authenticate deletion operation",
                "isSensitive": "no"
            }
        ],
        "sinks": [
            {
                "name": "assertTrue",
                "isSink": "no"
            },
            {
                "name": "equals",
                "isSink": "no"
            },
            {
                "name": "deleteUser",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "GOOD_ApiEndpointSecurityTest.java",
        "variables": [
            {
                "name": "response",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "client.makeSecureRequest()",
                        "type": "Response",
                        "context": "    @Test\r\n    public void testSecureEndpoint() {\r\n        Response response = client.makeSecureRequest();\r\n        assertEquals(response.getStatusCode(), 200); // Assert successful response\r\n    }\r\n",
                        "nextNode": "response"
                    },
                    {
                        "name": "response",
                        "type": "Dataflow from `makeSecureRequest(...)` to `response`\nDataflow from `new Response(...)` to `response`\nDataflow from `200` to `response`\nDataflow from `401` to `response`",
                        "context": "    public void testSecureEndpoint() {\r\n        Response response = client.makeSecureRequest();\r\n        assertEquals(response.getStatusCode(), 200); // Assert successful response\r\n    }\r\n\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "authToken",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "client",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "new ApiClient()",
                        "type": "ApiClient",
                        "context": "    @BeforeEach\r\n    public void setUp() {\r\n        this.client = new ApiClient();\r\n        this.properties = new Properties();\r\n        loadTestProperties();\r\n",
                        "nextNode": "client"
                    },
                    {
                        "name": "client",
                        "type": "Dataflow from `new ApiClient(...)` to `client`",
                        "context": "        this.properties = new Properties();\r\n        loadTestProperties();\r\n        client.setAuthToken(properties.getProperty(\"apiAuthToken\"));\r\n    }\r\n\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "properties",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "new Properties()",
                        "type": "Properties",
                        "context": "    public void setUp() {\r\n        this.client = new ApiClient();\r\n        this.properties = new Properties();\r\n        loadTestProperties();\r\n        client.setAuthToken(properties.getProperty(\"apiAuthToken\"));\r\n |     public void setUp() {\r\n        this.client = new ApiClient();\r\n        this.properties = new Properties();\r\n        loadTestProperties();\r\n        client.setAuthToken(properties.getProperty(\"apiAuthToken\"));\r\n",
                        "nextNode": "this"
                    },
                    {
                        "name": "loadTestProperties()",
                        "type": "Properties",
                        "context": "        this.client = new ApiClient();\r\n        this.properties = new Properties();\r\n        loadTestProperties();\r\n        client.setAuthToken(properties.getProperty(\"apiAuthToken\"));\r\n    }\r\n |     }\r\n\r\n    private void loadTestProperties() {\r\n        properties.setProperty(\"apiAuthToken\", \"test-token\");\r\n    }\r\n",
                        "nextNode": "properties"
                    },
                    {
                        "name": "properties",
                        "type": "Dataflow from `new Properties(...)` to `properties`\nDataflow from `\"test-token\"` to `properties`",
                        "context": "        this.properties = new Properties();\r\n        loadTestProperties();\r\n        client.setAuthToken(properties.getProperty(\"apiAuthToken\"));\r\n    }\r\n\r\n | \r\n    private void loadTestProperties() {\r\n        properties.setProperty(\"apiAuthToken\", \"test-token\");\r\n    }\r\n\r\n | \r\n    private void loadTestProperties() {\r\n        properties.setProperty(\"apiAuthToken\", \"test-token\");\r\n    }\r\n\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "token",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "properties",
                        "type": "Properties",
                        "context": "        this.properties = new Properties();\r\n        loadTestProperties();\r\n        client.setAuthToken(properties.getProperty(\"apiAuthToken\"));\r\n    }\r\n\r\n",
                        "nextNode": "properties.getProperty(\"apiAuthToken\")"
                    },
                    {
                        "name": "properties.getProperty(\"apiAuthToken\")",
                        "type": "String",
                        "context": "        this.properties = new Properties();\r\n        loadTestProperties();\r\n        client.setAuthToken(properties.getProperty(\"apiAuthToken\"));\r\n    }\r\n\r\n",
                        "nextNode": "String token"
                    },
                    {
                        "name": "String token",
                        "type": "String",
                        "context": "        private String authToken;\r\n    \r\n        public void setAuthToken(String token) {\r\n            this.authToken = token;\r\n        }\r\n",
                        "nextNode": "token"
                    },
                    {
                        "name": "token",
                        "type": "Dataflow from `properties` to `token`\nDataflow from `getProperty(...)` to `token`\nDataflow from `new Properties(...)` to `token`\nDataflow from `\"test-token\"` to `token`\nDataflow from `\"apiAuthToken\"` to `token`",
                        "context": "    \r\n        public void setAuthToken(String token) {\r\n            this.authToken = token;\r\n        }\r\n    \r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "statusCode",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "200",
                        "type": "Number",
                        "context": "    \r\n        public Response makeSecureRequest() {\r\n            return new Response(this.authToken.equals(System.getenv(\"API_AUTH_TOKEN\")) ? 200 : 401);\r\n        }\r\n    }\r\n |     \r\n        public Response makeSecureRequest() {\r\n            return new Response(this.authToken.equals(System.getenv(\"API_AUTH_TOKEN\")) ? 200 : 401);\r\n        }\r\n    }\r\n",
                        "nextNode": "this.authToken.equals(System.getenv(\"API_AUTH_TOKEN\")) ? 200 : 401"
                    },
                    {
                        "name": "this.authToken.equals(System.getenv(\"API_AUTH_TOKEN\")) ? 200 : 401",
                        "type": "Number",
                        "context": "    \r\n        public Response makeSecureRequest() {\r\n            return new Response(this.authToken.equals(System.getenv(\"API_AUTH_TOKEN\")) ? 200 : 401);\r\n        }\r\n    }\r\n |     \r\n        public Response makeSecureRequest() {\r\n            return new Response(this.authToken.equals(System.getenv(\"API_AUTH_TOKEN\")) ? 200 : 401);\r\n        }\r\n    }\r\n",
                        "nextNode": "int statusCode"
                    },
                    {
                        "name": "int statusCode",
                        "type": "Number",
                        "context": "        private int statusCode;\r\n    \r\n        public Response(int statusCode) {\r\n            this.statusCode = statusCode;\r\n        }\r\n |         private int statusCode;\r\n    \r\n        public Response(int statusCode) {\r\n            this.statusCode = statusCode;\r\n        }\r\n",
                        "nextNode": "statusCode"
                    },
                    {
                        "name": "getStatusCode()",
                        "type": "Number",
                        "context": "        }\r\n    \r\n        public int getStatusCode() {\r\n            return statusCode;\r\n        }\r\n",
                        "nextNode": "statusCode"
                    },
                    {
                        "name": "statusCode",
                        "type": "Dataflow from `200` to `statusCode`\nDataflow from `401` to `statusCode`",
                        "context": "    \r\n        public Response(int statusCode) {\r\n            this.statusCode = statusCode;\r\n        }\r\n    \r\n |     \r\n        public Response(int statusCode) {\r\n            this.statusCode = statusCode;\r\n        }\r\n    \r\n |     \r\n        public int getStatusCode() {\r\n            return statusCode;\r\n        }\r\n    }\r\n |     \r\n        public int getStatusCode() {\r\n            return statusCode;\r\n        }\r\n    }\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "apiAuthToken",
                "isSensitive": "no"
            },
            {
                "name": "API_AUTH_TOKEN",
                "isSensitive": "no"
            },
            {
                "name": "test-token",
                "isSensitive": "yes"
            }
        ],
        "comments": [
            {
                "name": "Assert successful response",
                "isSensitive": "no"
            }
        ],
        "sinks": [
            {
                "name": "getProperty",
                "isSink": "no"
            },
            {
                "name": "makeSecureRequest",
                "isSink": "yes"
            },
            {
                "name": "getStatusCode",
                "isSink": "no"
            },
            {
                "name": "setProperty",
                "isSink": "no"
            },
            {
                "name": "equals",
                "isSink": "no"
            },
            {
                "name": "setAuthToken",
                "isSink": "no"
            },
            {
                "name": "loadTestProperties",
                "isSink": "no"
            },
            {
                "name": "assertEquals",
                "isSink": "no"
            },
            {
                "name": "getenv",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "GOOD_ConfigLoaderTest.java",
        "variables": [
            {
                "name": "actualApiKey",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "System.getenv(\"API_KEY\")",
                        "type": "String",
                        "context": "class ConfigLoader {\r\n    public String loadAPIKey() {\r\n        return System.getenv(\"API_KEY\"); // Fetch API key from environment variables\r\n    }\r\n}\r\n",
                        "nextNode": "loader.loadAPIKey()"
                    },
                    {
                        "name": "loader.loadAPIKey()",
                        "type": "String",
                        "context": "        // The API key is no longer hardcoded here, it's fetched from the environment during runtime\r\n        String expectedApiKey = System.getenv(\"API_KEY\"); // Fetch expected API key from environment variables\r\n        String actualApiKey = loader.loadAPIKey();\r\n        \r\n        assertEquals(expectedApiKey, actualApiKey, \"API keys should match.\");\r\n",
                        "nextNode": "actualApiKey"
                    },
                    {
                        "name": "actualApiKey",
                        "type": "Dataflow from `getenv(...)` to `actualApiKey`\nDataflow from `loadAPIKey(...)` to `actualApiKey`\nDataflow from `\"API_KEY\"` to `actualApiKey`",
                        "context": "        String actualApiKey = loader.loadAPIKey();\r\n        \r\n        assertEquals(expectedApiKey, actualApiKey, \"API keys should match.\");\r\n    }\r\n}\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "loader",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "new ConfigLoader()",
                        "type": "ConfigLoader",
                        "context": "    @Test\r\n    public void testLoadConfig() {\r\n        ConfigLoader loader = new ConfigLoader();\r\n        // The API key is no longer hardcoded here, it's fetched from the environment during runtime\r\n        String expectedApiKey = System.getenv(\"API_KEY\"); // Fetch expected API key from environment variables\r\n",
                        "nextNode": "loader"
                    },
                    {
                        "name": "loader",
                        "type": "Dataflow from `new ConfigLoader(...)` to `loader`",
                        "context": "        // The API key is no longer hardcoded here, it's fetched from the environment during runtime\r\n        String expectedApiKey = System.getenv(\"API_KEY\"); // Fetch expected API key from environment variables\r\n        String actualApiKey = loader.loadAPIKey();\r\n        \r\n        assertEquals(expectedApiKey, actualApiKey, \"API keys should match.\");\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "expectedApiKey",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "System.getenv(\"API_KEY\")",
                        "type": "String",
                        "context": "        ConfigLoader loader = new ConfigLoader();\r\n        // The API key is no longer hardcoded here, it's fetched from the environment during runtime\r\n        String expectedApiKey = System.getenv(\"API_KEY\"); // Fetch expected API key from environment variables\r\n        String actualApiKey = loader.loadAPIKey();\r\n        \r\n",
                        "nextNode": "expectedApiKey"
                    },
                    {
                        "name": "expectedApiKey",
                        "type": "Dataflow from `getenv(...)` to `expectedApiKey`\nDataflow from `\"API_KEY\"` to `expectedApiKey`",
                        "context": "        String actualApiKey = loader.loadAPIKey();\r\n        \r\n        assertEquals(expectedApiKey, actualApiKey, \"API keys should match.\");\r\n    }\r\n}\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "API_KEY",
                "isSensitive": "no"
            },
            {
                "name": "API keys should match.",
                "isSensitive": "no"
            }
        ],
        "comments": [
            {
                "name": "Fetch API key from environment variables",
                "isSensitive": "no"
            },
            {
                "name": "The API key is no longer hardcoded here, it's fetched from the environment during runtime",
                "isSensitive": "no"
            },
            {
                "name": "Fetch expected API key from environment variables",
                "isSensitive": "no"
            }
        ],
        "sinks": [
            {
                "name": "loadAPIKey",
                "isSink": "no"
            },
            {
                "name": "assertEquals",
                "isSink": "no"
            },
            {
                "name": "getenv",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "GOOD_DatabaseConnectionTest.java",
        "variables": [
            {
                "name": "e",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "in",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "new FileInputStream(\"db_test.properties\")",
                        "type": "FileInputStream",
                        "context": "    private Properties loadProperties() {\r\n        Properties props = new Properties();\r\n        try (FileInputStream in = new FileInputStream(\"db_test.properties\")) {\r\n            props.load(in);\r\n        } catch (IOException e) {\r\n",
                        "nextNode": "in"
                    },
                    {
                        "name": "in",
                        "type": "Dataflow from `new FileInputStream(...)` to `in`\nDataflow from `\"db_test.properties\"` to `in`",
                        "context": "        Properties props = new Properties();\r\n        try (FileInputStream in = new FileInputStream(\"db_test.properties\")) {\r\n            props.load(in);\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "dbUser",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "props",
                        "type": "Properties",
                        "context": "    public void testConnect() {\r\n        Properties props = loadProperties();\r\n        String dbUrl = props.getProperty(\"dbUrl\");\r\n        String dbUser = props.getProperty(\"dbUser\");\r\n        String dbPassword = props.getProperty(\"dbPassword\");\r\n |         Properties props = loadProperties();\r\n        String dbUrl = props.getProperty(\"dbUrl\");\r\n        String dbUser = props.getProperty(\"dbUser\");\r\n        String dbPassword = props.getProperty(\"dbPassword\");\r\n\r\n |     public void testConnect() {\r\n        Properties props = loadProperties();\r\n        String dbUrl = props.getProperty(\"dbUrl\");\r\n        String dbUser = props.getProperty(\"dbUser\");\r\n        String dbPassword = props.getProperty(\"dbPassword\");\r\n |         Properties props = loadProperties();\r\n        String dbUrl = props.getProperty(\"dbUrl\");\r\n        String dbUser = props.getProperty(\"dbUser\");\r\n        String dbPassword = props.getProperty(\"dbPassword\");\r\n\r\n",
                        "nextNode": "props.getProperty(\"dbUser\")"
                    },
                    {
                        "name": "props.getProperty(\"dbUser\")",
                        "type": "String",
                        "context": "        Properties props = loadProperties();\r\n        String dbUrl = props.getProperty(\"dbUrl\");\r\n        String dbUser = props.getProperty(\"dbUser\");\r\n        String dbPassword = props.getProperty(\"dbPassword\");\r\n\r\n |         Properties props = loadProperties();\r\n        String dbUrl = props.getProperty(\"dbUrl\");\r\n        String dbUser = props.getProperty(\"dbUser\");\r\n        String dbPassword = props.getProperty(\"dbPassword\");\r\n\r\n",
                        "nextNode": "dbUser"
                    },
                    {
                        "name": "String dbUser",
                        "type": "String",
                        "context": "        private String dbUrl, dbUser, dbPassword;\r\n    \r\n        public Database(String dbUrl, String dbUser, String dbPassword) {\r\n            this.dbUrl = dbUrl;\r\n            this.dbUser = dbUser;\r\n",
                        "nextNode": "dbUser"
                    },
                    {
                        "name": "dbUser",
                        "type": "Dataflow from `props` to `dbUser`\nDataflow from `props` to `dbUser`\nDataflow from `props` to `dbUser`\nDataflow from `props` to `dbUser`\nDataflow from `loadProperties(...)` to `dbUser`\nDataflow from `getProperty(...)` to `dbUser`\nDataflow from `new Properties(...)` to `dbUser`\nDataflow from `\"dbUser\"` to `dbUser`",
                        "context": "        String dbPassword = props.getProperty(\"dbPassword\");\r\n\r\n        Database db = new Database(dbUrl, dbUser, dbPassword);\r\n        assertTrue(db.connect()); // Asserts that the connection is successful\r\n    }\r\n |         String dbPassword = props.getProperty(\"dbPassword\");\r\n\r\n        Database db = new Database(dbUrl, dbUser, dbPassword);\r\n        assertTrue(db.connect()); // Asserts that the connection is successful\r\n    }\r\n |         public Database(String dbUrl, String dbUser, String dbPassword) {\r\n            this.dbUrl = dbUrl;\r\n            this.dbUser = dbUser;\r\n            this.dbPassword = dbPassword;\r\n        }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "dbUrl",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "props",
                        "type": "Properties",
                        "context": "    public void testConnect() {\r\n        Properties props = loadProperties();\r\n        String dbUrl = props.getProperty(\"dbUrl\");\r\n        String dbUser = props.getProperty(\"dbUser\");\r\n        String dbPassword = props.getProperty(\"dbPassword\");\r\n |     public void testConnect() {\r\n        Properties props = loadProperties();\r\n        String dbUrl = props.getProperty(\"dbUrl\");\r\n        String dbUser = props.getProperty(\"dbUser\");\r\n        String dbPassword = props.getProperty(\"dbPassword\");\r\n",
                        "nextNode": "props.getProperty(\"dbUrl\")"
                    },
                    {
                        "name": "props.getProperty(\"dbUrl\")",
                        "type": "String",
                        "context": "    public void testConnect() {\r\n        Properties props = loadProperties();\r\n        String dbUrl = props.getProperty(\"dbUrl\");\r\n        String dbUser = props.getProperty(\"dbUser\");\r\n        String dbPassword = props.getProperty(\"dbPassword\");\r\n |     public void testConnect() {\r\n        Properties props = loadProperties();\r\n        String dbUrl = props.getProperty(\"dbUrl\");\r\n        String dbUser = props.getProperty(\"dbUser\");\r\n        String dbPassword = props.getProperty(\"dbPassword\");\r\n",
                        "nextNode": "dbUrl"
                    },
                    {
                        "name": "String dbUrl",
                        "type": "String",
                        "context": "        private String dbUrl, dbUser, dbPassword;\r\n    \r\n        public Database(String dbUrl, String dbUser, String dbPassword) {\r\n            this.dbUrl = dbUrl;\r\n            this.dbUser = dbUser;\r\n",
                        "nextNode": "dbUrl"
                    },
                    {
                        "name": "dbUrl",
                        "type": "Dataflow from `props` to `dbUrl`\nDataflow from `props` to `dbUrl`\nDataflow from `props` to `dbUrl`\nDataflow from `loadProperties(...)` to `dbUrl`\nDataflow from `getProperty(...)` to `dbUrl`\nDataflow from `new Properties(...)` to `dbUrl`\nDataflow from `\"dbUrl\"` to `dbUrl`",
                        "context": "        String dbPassword = props.getProperty(\"dbPassword\");\r\n\r\n        Database db = new Database(dbUrl, dbUser, dbPassword);\r\n        assertTrue(db.connect()); // Asserts that the connection is successful\r\n    }\r\n |         String dbPassword = props.getProperty(\"dbPassword\");\r\n\r\n        Database db = new Database(dbUrl, dbUser, dbPassword);\r\n        assertTrue(db.connect()); // Asserts that the connection is successful\r\n    }\r\n |     \r\n        public Database(String dbUrl, String dbUser, String dbPassword) {\r\n            this.dbUrl = dbUrl;\r\n            this.dbUser = dbUser;\r\n            this.dbPassword = dbPassword;\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "db",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "props",
                        "type": "Properties",
                        "context": "    public void testConnect() {\r\n        Properties props = loadProperties();\r\n        String dbUrl = props.getProperty(\"dbUrl\");\r\n        String dbUser = props.getProperty(\"dbUser\");\r\n        String dbPassword = props.getProperty(\"dbPassword\");\r\n",
                        "nextNode": "props.getProperty(\"dbUrl\")"
                    },
                    {
                        "name": "props.getProperty(\"dbUrl\")",
                        "type": "String",
                        "context": "    public void testConnect() {\r\n        Properties props = loadProperties();\r\n        String dbUrl = props.getProperty(\"dbUrl\");\r\n        String dbUser = props.getProperty(\"dbUser\");\r\n        String dbPassword = props.getProperty(\"dbPassword\");\r\n",
                        "nextNode": "dbUrl"
                    },
                    {
                        "name": "dbUrl",
                        "type": "String",
                        "context": "        String dbPassword = props.getProperty(\"dbPassword\");\r\n\r\n        Database db = new Database(dbUrl, dbUser, dbPassword);\r\n        assertTrue(db.connect()); // Asserts that the connection is successful\r\n    }\r\n",
                        "nextNode": "new Database(dbUrl, dbUser, dbPassword)"
                    },
                    {
                        "name": "new Database(dbUrl, dbUser, dbPassword)",
                        "type": "Database",
                        "context": "        String dbPassword = props.getProperty(\"dbPassword\");\r\n\r\n        Database db = new Database(dbUrl, dbUser, dbPassword);\r\n        assertTrue(db.connect()); // Asserts that the connection is successful\r\n    }\r\n",
                        "nextNode": "db"
                    },
                    {
                        "name": "db",
                        "type": "Dataflow from `props` to `db`\nDataflow from `props` to `db`\nDataflow from `props` to `db`\nDataflow from `dbUrl` to `db`\nDataflow from `dbUser` to `db`\nDataflow from `dbPassword` to `db`\nDataflow from `props` to `db`\nDataflow from `props` to `db`\nDataflow from `loadProperties(...)` to `db`\nDataflow from `getProperty(...)` to `db`\nDataflow from `getProperty(...)` to `db`\nDataflow from `getProperty(...)` to `db`\nDataflow from `new Database(...)` to `db`\nDataflow from `new Properties(...)` to `db`\nDataflow from `\"dbUrl\"` to `db`\nDataflow from `\"dbUser\"` to `db`\nDataflow from `\"dbPassword\"` to `db`",
                        "context": "\r\n        Database db = new Database(dbUrl, dbUser, dbPassword);\r\n        assertTrue(db.connect()); // Asserts that the connection is successful\r\n    }\r\n\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "props",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "loadProperties()",
                        "type": "Properties",
                        "context": "    @Test\r\n    public void testConnect() {\r\n        Properties props = loadProperties();\r\n        String dbUrl = props.getProperty(\"dbUrl\");\r\n        String dbUser = props.getProperty(\"dbUser\");\r\n |     @Test\r\n    public void testConnect() {\r\n        Properties props = loadProperties();\r\n        String dbUrl = props.getProperty(\"dbUrl\");\r\n        String dbUser = props.getProperty(\"dbUser\");\r\n |     @Test\r\n    public void testConnect() {\r\n        Properties props = loadProperties();\r\n        String dbUrl = props.getProperty(\"dbUrl\");\r\n        String dbUser = props.getProperty(\"dbUser\");\r\n",
                        "nextNode": "props"
                    },
                    {
                        "name": "new Properties()",
                        "type": "Properties",
                        "context": "\r\n    private Properties loadProperties() {\r\n        Properties props = new Properties();\r\n        try (FileInputStream in = new FileInputStream(\"db_test.properties\")) {\r\n            props.load(in);\r\n | \r\n    private Properties loadProperties() {\r\n        Properties props = new Properties();\r\n        try (FileInputStream in = new FileInputStream(\"db_test.properties\")) {\r\n            props.load(in);\r\n",
                        "nextNode": "props"
                    },
                    {
                        "name": "props",
                        "type": "Dataflow from `loadProperties(...)` to `props`\nDataflow from `new Properties(...)` to `props`",
                        "context": "    public void testConnect() {\r\n        Properties props = loadProperties();\r\n        String dbUrl = props.getProperty(\"dbUrl\");\r\n        String dbUser = props.getProperty(\"dbUser\");\r\n        String dbPassword = props.getProperty(\"dbPassword\");\r\n |     public void testConnect() {\r\n        Properties props = loadProperties();\r\n        String dbUrl = props.getProperty(\"dbUrl\");\r\n        String dbUser = props.getProperty(\"dbUser\");\r\n        String dbPassword = props.getProperty(\"dbPassword\");\r\n |         Properties props = loadProperties();\r\n        String dbUrl = props.getProperty(\"dbUrl\");\r\n        String dbUser = props.getProperty(\"dbUser\");\r\n        String dbPassword = props.getProperty(\"dbPassword\");\r\n\r\n |     public void testConnect() {\r\n        Properties props = loadProperties();\r\n        String dbUrl = props.getProperty(\"dbUrl\");\r\n        String dbUser = props.getProperty(\"dbUser\");\r\n        String dbPassword = props.getProperty(\"dbPassword\");\r\n |         Properties props = loadProperties();\r\n        String dbUrl = props.getProperty(\"dbUrl\");\r\n        String dbUser = props.getProperty(\"dbUser\");\r\n        String dbPassword = props.getProperty(\"dbPassword\");\r\n\r\n |         String dbUrl = props.getProperty(\"dbUrl\");\r\n        String dbUser = props.getProperty(\"dbUser\");\r\n        String dbPassword = props.getProperty(\"dbPassword\");\r\n\r\n        Database db = new Database(dbUrl, dbUser, dbPassword);\r\n |         Properties props = new Properties();\r\n        try (FileInputStream in = new FileInputStream(\"db_test.properties\")) {\r\n            props.load(in);\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n |             e.printStackTrace();\r\n        }\r\n        return props;\r\n    }\r\n\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "dbPassword",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "props",
                        "type": "Properties",
                        "context": "    public void testConnect() {\r\n        Properties props = loadProperties();\r\n        String dbUrl = props.getProperty(\"dbUrl\");\r\n        String dbUser = props.getProperty(\"dbUser\");\r\n        String dbPassword = props.getProperty(\"dbPassword\");\r\n |         Properties props = loadProperties();\r\n        String dbUrl = props.getProperty(\"dbUrl\");\r\n        String dbUser = props.getProperty(\"dbUser\");\r\n        String dbPassword = props.getProperty(\"dbPassword\");\r\n\r\n |         String dbUrl = props.getProperty(\"dbUrl\");\r\n        String dbUser = props.getProperty(\"dbUser\");\r\n        String dbPassword = props.getProperty(\"dbPassword\");\r\n\r\n        Database db = new Database(dbUrl, dbUser, dbPassword);\r\n |     public void testConnect() {\r\n        Properties props = loadProperties();\r\n        String dbUrl = props.getProperty(\"dbUrl\");\r\n        String dbUser = props.getProperty(\"dbUser\");\r\n        String dbPassword = props.getProperty(\"dbPassword\");\r\n |         Properties props = loadProperties();\r\n        String dbUrl = props.getProperty(\"dbUrl\");\r\n        String dbUser = props.getProperty(\"dbUser\");\r\n        String dbPassword = props.getProperty(\"dbPassword\");\r\n\r\n |         String dbUrl = props.getProperty(\"dbUrl\");\r\n        String dbUser = props.getProperty(\"dbUser\");\r\n        String dbPassword = props.getProperty(\"dbPassword\");\r\n\r\n        Database db = new Database(dbUrl, dbUser, dbPassword);\r\n",
                        "nextNode": "props.getProperty(\"dbPassword\")"
                    },
                    {
                        "name": "props.getProperty(\"dbPassword\")",
                        "type": "String",
                        "context": "        String dbUrl = props.getProperty(\"dbUrl\");\r\n        String dbUser = props.getProperty(\"dbUser\");\r\n        String dbPassword = props.getProperty(\"dbPassword\");\r\n\r\n        Database db = new Database(dbUrl, dbUser, dbPassword);\r\n |         String dbUrl = props.getProperty(\"dbUrl\");\r\n        String dbUser = props.getProperty(\"dbUser\");\r\n        String dbPassword = props.getProperty(\"dbPassword\");\r\n\r\n        Database db = new Database(dbUrl, dbUser, dbPassword);\r\n",
                        "nextNode": "dbPassword"
                    },
                    {
                        "name": "String dbPassword",
                        "type": "String",
                        "context": "        private String dbUrl, dbUser, dbPassword;\r\n    \r\n        public Database(String dbUrl, String dbUser, String dbPassword) {\r\n            this.dbUrl = dbUrl;\r\n            this.dbUser = dbUser;\r\n",
                        "nextNode": "dbPassword"
                    },
                    {
                        "name": "dbPassword",
                        "type": "Dataflow from `props` to `dbPassword`\nDataflow from `props` to `dbPassword`\nDataflow from `props` to `dbPassword`\nDataflow from `props` to `dbPassword`\nDataflow from `props` to `dbPassword`\nDataflow from `loadProperties(...)` to `dbPassword`\nDataflow from `getProperty(...)` to `dbPassword`\nDataflow from `new Properties(...)` to `dbPassword`\nDataflow from `\"dbPassword\"` to `dbPassword`",
                        "context": "        String dbPassword = props.getProperty(\"dbPassword\");\r\n\r\n        Database db = new Database(dbUrl, dbUser, dbPassword);\r\n        assertTrue(db.connect()); // Asserts that the connection is successful\r\n    }\r\n |         String dbPassword = props.getProperty(\"dbPassword\");\r\n\r\n        Database db = new Database(dbUrl, dbUser, dbPassword);\r\n        assertTrue(db.connect()); // Asserts that the connection is successful\r\n    }\r\n |             this.dbUrl = dbUrl;\r\n            this.dbUser = dbUser;\r\n            this.dbPassword = dbPassword;\r\n        }\r\n    \r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "dbUser",
                "isSensitive": "no"
            },
            {
                "name": "dbUrl",
                "isSensitive": "no"
            },
            {
                "name": "dbPassword",
                "isSensitive": "no"
            },
            {
                "name": "db_test.properties",
                "isSensitive": "no"
            }
        ],
        "comments": [
            {
                "name": "Asserts that the connection is successful",
                "isSensitive": "no"
            },
            {
                "name": "Simulates a condition for connection success",
                "isSensitive": "no"
            }
        ],
        "sinks": [
            {
                "name": "getProperty",
                "isSink": "no"
            },
            {
                "name": "printStackTrace",
                "isSink": "yes"
            },
            {
                "name": "load",
                "isSink": "no"
            },
            {
                "name": "assertTrue",
                "isSink": "no"
            },
            {
                "name": "isEmpty",
                "isSink": "no"
            },
            {
                "name": "loadProperties",
                "isSink": "no"
            },
            {
                "name": "connect",
                "isSink": "yes"
            }
        ]
    },
    {
        "fileName": "GOOD_EmailNotificationTest.java",
        "variables": [
            {
                "name": "result",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "properties",
                        "type": "Properties",
                        "context": "    @Test\r\n    public void testSendEmail() {\r\n        String recipientEmail = properties.getProperty(\"recipientEmail\");\r\n        String message = properties.getProperty(\"message\");\r\n\r\n",
                        "nextNode": "properties.getProperty(\"recipientEmail\")"
                    },
                    {
                        "name": "properties.getProperty(\"recipientEmail\")",
                        "type": "String",
                        "context": "    @Test\r\n    public void testSendEmail() {\r\n        String recipientEmail = properties.getProperty(\"recipientEmail\");\r\n        String message = properties.getProperty(\"message\");\r\n\r\n",
                        "nextNode": "recipientEmail"
                    },
                    {
                        "name": "recipientEmail",
                        "type": "String",
                        "context": "\r\n        // Validate that the recipient email and message are set\r\n        if (recipientEmail == null || message == null) {\r\n            throw new IllegalStateException(\"Test configuration must include recipient email and message.\");\r\n        }\r\n | \r\n        // Perform the test\r\n        boolean result = emailService.sendEmail(recipientEmail, message);\r\n        assertTrue(result, \"Email should be sent successfully.\");\r\n    }\r\n",
                        "nextNode": "emailService.sendEmail(recipientEmail, message)"
                    },
                    {
                        "name": "emailService.sendEmail(recipientEmail, message)",
                        "type": "Boolean",
                        "context": "\r\n        // Perform the test\r\n        boolean result = emailService.sendEmail(recipientEmail, message);\r\n        assertTrue(result, \"Email should be sent successfully.\");\r\n    }\r\n",
                        "nextNode": "result"
                    },
                    {
                        "name": "result",
                        "type": "Dataflow from `properties` to `result`\nDataflow from `properties` to `result`\nDataflow from `recipientEmail` to `result`\nDataflow from `message` to `result`\nDataflow from `recipientEmail` to `result`\nDataflow from `message` to `result`\nDataflow from `getProperty(...)` to `result`\nDataflow from `getProperty(...)` to `result`\nDataflow from `contains(...)` to `result`\nDataflow from `isEmpty(...)` to `result`\nDataflow from `sendEmail(...)` to `result`\nDataflow from `\"@\"` to `result`\nDataflow from `\"recipientEmail\"` to `result`\nDataflow from `\"message\"` to `result`",
                        "context": "        // Perform the test\r\n        boolean result = emailService.sendEmail(recipientEmail, message);\r\n        assertTrue(result, \"Email should be sent successfully.\");\r\n    }\r\n}\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "message",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "properties",
                        "type": "Properties",
                        "context": "    @Test\r\n    public void testSendEmail() {\r\n        String recipientEmail = properties.getProperty(\"recipientEmail\");\r\n        String message = properties.getProperty(\"message\");\r\n\r\n |     public void testSendEmail() {\r\n        String recipientEmail = properties.getProperty(\"recipientEmail\");\r\n        String message = properties.getProperty(\"message\");\r\n\r\n        // Validate that the recipient email and message are set\r\n |     @Test\r\n    public void testSendEmail() {\r\n        String recipientEmail = properties.getProperty(\"recipientEmail\");\r\n        String message = properties.getProperty(\"message\");\r\n\r\n |     public void testSendEmail() {\r\n        String recipientEmail = properties.getProperty(\"recipientEmail\");\r\n        String message = properties.getProperty(\"message\");\r\n\r\n        // Validate that the recipient email and message are set\r\n |     @Test\r\n    public void testSendEmail() {\r\n        String recipientEmail = properties.getProperty(\"recipientEmail\");\r\n        String message = properties.getProperty(\"message\");\r\n\r\n |     public void testSendEmail() {\r\n        String recipientEmail = properties.getProperty(\"recipientEmail\");\r\n        String message = properties.getProperty(\"message\");\r\n\r\n        // Validate that the recipient email and message are set\r\n",
                        "nextNode": "properties.getProperty(\"message\")"
                    },
                    {
                        "name": "properties.getProperty(\"message\")",
                        "type": "String",
                        "context": "    public void testSendEmail() {\r\n        String recipientEmail = properties.getProperty(\"recipientEmail\");\r\n        String message = properties.getProperty(\"message\");\r\n\r\n        // Validate that the recipient email and message are set\r\n |     public void testSendEmail() {\r\n        String recipientEmail = properties.getProperty(\"recipientEmail\");\r\n        String message = properties.getProperty(\"message\");\r\n\r\n        // Validate that the recipient email and message are set\r\n |     public void testSendEmail() {\r\n        String recipientEmail = properties.getProperty(\"recipientEmail\");\r\n        String message = properties.getProperty(\"message\");\r\n\r\n        // Validate that the recipient email and message are set\r\n",
                        "nextNode": "message"
                    },
                    {
                        "name": "String message",
                        "type": "String",
                        "context": "\r\nclass EmailNotificationService {\r\n    public boolean sendEmail(String recipientEmail, String message) {\r\n        // This would interface with an email server in production\r\n        return recipientEmail.contains(\"@\") && !message.isEmpty();\r\n",
                        "nextNode": "message"
                    },
                    {
                        "name": "message",
                        "type": "String",
                        "context": "\r\n        // Validate that the recipient email and message are set\r\n        if (recipientEmail == null || message == null) {\r\n            throw new IllegalStateException(\"Test configuration must include recipient email and message.\");\r\n        }\r\n | \r\n        // Perform the test\r\n        boolean result = emailService.sendEmail(recipientEmail, message);\r\n        assertTrue(result, \"Email should be sent successfully.\");\r\n    }\r\n |     public boolean sendEmail(String recipientEmail, String message) {\r\n        // This would interface with an email server in production\r\n        return recipientEmail.contains(\"@\") && !message.isEmpty();\r\n    }\r\n}\r\n | \r\n        // Validate that the recipient email and message are set\r\n        if (recipientEmail == null || message == null) {\r\n            throw new IllegalStateException(\"Test configuration must include recipient email and message.\");\r\n        }\r\n | \r\n        // Perform the test\r\n        boolean result = emailService.sendEmail(recipientEmail, message);\r\n        assertTrue(result, \"Email should be sent successfully.\");\r\n    }\r\n | \r\n        // Validate that the recipient email and message are set\r\n        if (recipientEmail == null || message == null) {\r\n            throw new IllegalStateException(\"Test configuration must include recipient email and message.\");\r\n        }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "recipientEmail",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "properties",
                        "type": "Properties",
                        "context": "    @Test\r\n    public void testSendEmail() {\r\n        String recipientEmail = properties.getProperty(\"recipientEmail\");\r\n        String message = properties.getProperty(\"message\");\r\n\r\n |     @Test\r\n    public void testSendEmail() {\r\n        String recipientEmail = properties.getProperty(\"recipientEmail\");\r\n        String message = properties.getProperty(\"message\");\r\n\r\n |     @Test\r\n    public void testSendEmail() {\r\n        String recipientEmail = properties.getProperty(\"recipientEmail\");\r\n        String message = properties.getProperty(\"message\");\r\n\r\n",
                        "nextNode": "properties.getProperty(\"recipientEmail\")"
                    },
                    {
                        "name": "properties.getProperty(\"recipientEmail\")",
                        "type": "String",
                        "context": "    @Test\r\n    public void testSendEmail() {\r\n        String recipientEmail = properties.getProperty(\"recipientEmail\");\r\n        String message = properties.getProperty(\"message\");\r\n\r\n |     @Test\r\n    public void testSendEmail() {\r\n        String recipientEmail = properties.getProperty(\"recipientEmail\");\r\n        String message = properties.getProperty(\"message\");\r\n\r\n |     @Test\r\n    public void testSendEmail() {\r\n        String recipientEmail = properties.getProperty(\"recipientEmail\");\r\n        String message = properties.getProperty(\"message\");\r\n\r\n",
                        "nextNode": "recipientEmail"
                    },
                    {
                        "name": "String recipientEmail",
                        "type": "String",
                        "context": "\r\nclass EmailNotificationService {\r\n    public boolean sendEmail(String recipientEmail, String message) {\r\n        // This would interface with an email server in production\r\n        return recipientEmail.contains(\"@\") && !message.isEmpty();\r\n",
                        "nextNode": "recipientEmail"
                    },
                    {
                        "name": "recipientEmail",
                        "type": "String",
                        "context": "\r\n        // Validate that the recipient email and message are set\r\n        if (recipientEmail == null || message == null) {\r\n            throw new IllegalStateException(\"Test configuration must include recipient email and message.\");\r\n        }\r\n | \r\n        // Perform the test\r\n        boolean result = emailService.sendEmail(recipientEmail, message);\r\n        assertTrue(result, \"Email should be sent successfully.\");\r\n    }\r\n |     public boolean sendEmail(String recipientEmail, String message) {\r\n        // This would interface with an email server in production\r\n        return recipientEmail.contains(\"@\") && !message.isEmpty();\r\n    }\r\n}\r\n | \r\n        // Validate that the recipient email and message are set\r\n        if (recipientEmail == null || message == null) {\r\n            throw new IllegalStateException(\"Test configuration must include recipient email and message.\");\r\n        }\r\n | \r\n        // Perform the test\r\n        boolean result = emailService.sendEmail(recipientEmail, message);\r\n        assertTrue(result, \"Email should be sent successfully.\");\r\n    }\r\n | \r\n        // Validate that the recipient email and message are set\r\n        if (recipientEmail == null || message == null) {\r\n            throw new IllegalStateException(\"Test configuration must include recipient email and message.\");\r\n        }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "properties",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "new Properties()",
                        "type": "Properties",
                        "context": "    public void setup() {\r\n        // Load configuration properties\r\n        properties = new Properties();\r\n        properties.setProperty(\"recipientEmail\", System.getenv(\"TEST_RECIPIENT_EMAIL\"));\r\n        properties.setProperty(\"message\", \"This is a test notification.\");\r\n |     public void setup() {\r\n        // Load configuration properties\r\n        properties = new Properties();\r\n        properties.setProperty(\"recipientEmail\", System.getenv(\"TEST_RECIPIENT_EMAIL\"));\r\n        properties.setProperty(\"message\", \"This is a test notification.\");\r\n",
                        "nextNode": "properties"
                    },
                    {
                        "name": "properties",
                        "type": "Dataflow from `new Properties(...)` to `properties`",
                        "context": "        // Load configuration properties\r\n        properties = new Properties();\r\n        properties.setProperty(\"recipientEmail\", System.getenv(\"TEST_RECIPIENT_EMAIL\"));\r\n        properties.setProperty(\"message\", \"This is a test notification.\");\r\n\r\n |         // Load configuration properties\r\n        properties = new Properties();\r\n        properties.setProperty(\"recipientEmail\", System.getenv(\"TEST_RECIPIENT_EMAIL\"));\r\n        properties.setProperty(\"message\", \"This is a test notification.\");\r\n\r\n |         properties = new Properties();\r\n        properties.setProperty(\"recipientEmail\", System.getenv(\"TEST_RECIPIENT_EMAIL\"));\r\n        properties.setProperty(\"message\", \"This is a test notification.\");\r\n\r\n        // Initialize the service\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "emailService",
                "isSensitive": "yes",
                "graph": []
            }
        ],
        "strings": [
            {
                "name": "@",
                "isSensitive": "no"
            },
            {
                "name": "Email should be sent successfully.",
                "isSensitive": "no"
            },
            {
                "name": "TEST_RECIPIENT_EMAIL",
                "isSensitive": "no"
            },
            {
                "name": "message",
                "isSensitive": "no"
            },
            {
                "name": "Test configuration must include recipient email and message.",
                "isSensitive": "no"
            },
            {
                "name": "recipientEmail",
                "isSensitive": "no"
            },
            {
                "name": "This is a test notification.",
                "isSensitive": "no"
            }
        ],
        "comments": [
            {
                "name": "Initialize the service",
                "isSensitive": "no"
            },
            {
                "name": "This would interface with an email server in production",
                "isSensitive": "no"
            },
            {
                "name": "Load configuration properties",
                "isSensitive": "no"
            },
            {
                "name": "Perform the test",
                "isSensitive": "no"
            },
            {
                "name": "Validate that the recipient email and message are set",
                "isSensitive": "no"
            }
        ],
        "sinks": [
            {
                "name": "contains",
                "isSink": "no"
            },
            {
                "name": "sendEmail",
                "isSink": "yes"
            },
            {
                "name": "getProperty",
                "isSink": "no"
            },
            {
                "name": "assertTrue",
                "isSink": "no"
            },
            {
                "name": "setProperty",
                "isSink": "no"
            },
            {
                "name": "isEmpty",
                "isSink": "no"
            },
            {
                "name": "getenv",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "GOOD_EmailServiceTest.java",
        "variables": [
            {
                "name": "message",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "\"Hello, your request has been processed successfully.\"",
                        "type": "String",
                        "context": "        String recipientEmail = System.getenv(\"RECIPIENT_EMAIL\");\r\n     \r\n        String message = \"Hello, your request has been processed successfully.\"; \r\n        EmailService emailService = new EmailService();\r\n        assertTrue(emailService.sendEmail(recipientEmail, message));\r\n |         String recipientEmail = System.getenv(\"RECIPIENT_EMAIL\");\r\n     \r\n        String message = \"Hello, your request has been processed successfully.\"; \r\n        EmailService emailService = new EmailService();\r\n        assertTrue(emailService.sendEmail(recipientEmail, message));\r\n",
                        "nextNode": "message"
                    },
                    {
                        "name": "String message",
                        "type": "String",
                        "context": "\r\n    class EmailService {\r\n        public boolean sendEmail(String email, String message) {\r\n            // Pretend to send an email\r\n            return email.contains(\"@\") && !message.isEmpty();\r\n",
                        "nextNode": "message"
                    },
                    {
                        "name": "message",
                        "type": "Dataflow from `\"Hello, your request has been processed successfully.\"` to `message`",
                        "context": "        String message = \"Hello, your request has been processed successfully.\"; \r\n        EmailService emailService = new EmailService();\r\n        assertTrue(emailService.sendEmail(recipientEmail, message));\r\n    }\r\n\r\n |         String message = \"Hello, your request has been processed successfully.\"; \r\n        EmailService emailService = new EmailService();\r\n        assertTrue(emailService.sendEmail(recipientEmail, message));\r\n    }\r\n\r\n |         public boolean sendEmail(String email, String message) {\r\n            // Pretend to send an email\r\n            return email.contains(\"@\") && !message.isEmpty();\r\n        }\r\n    }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "recipientEmail",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "System.getenv(\"RECIPIENT_EMAIL\")",
                        "type": "String",
                        "context": "    public void testSendEmail() {\r\n        // Fetch the recipient email from environment variables\r\n        String recipientEmail = System.getenv(\"RECIPIENT_EMAIL\");\r\n     \r\n        String message = \"Hello, your request has been processed successfully.\"; \r\n",
                        "nextNode": "recipientEmail"
                    },
                    {
                        "name": "recipientEmail",
                        "type": "Dataflow from `getenv(...)` to `recipientEmail`\nDataflow from `\"RECIPIENT_EMAIL\"` to `recipientEmail`",
                        "context": "        String message = \"Hello, your request has been processed successfully.\"; \r\n        EmailService emailService = new EmailService();\r\n        assertTrue(emailService.sendEmail(recipientEmail, message));\r\n    }\r\n\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "emailService",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "new EmailService()",
                        "type": "EmailService",
                        "context": "     \r\n        String message = \"Hello, your request has been processed successfully.\"; \r\n        EmailService emailService = new EmailService();\r\n        assertTrue(emailService.sendEmail(recipientEmail, message));\r\n    }\r\n",
                        "nextNode": "emailService"
                    },
                    {
                        "name": "emailService",
                        "type": "Dataflow from `new EmailService(...)` to `emailService`",
                        "context": "        String message = \"Hello, your request has been processed successfully.\"; \r\n        EmailService emailService = new EmailService();\r\n        assertTrue(emailService.sendEmail(recipientEmail, message));\r\n    }\r\n\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "email",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "recipientEmail",
                        "type": "String",
                        "context": "        String message = \"Hello, your request has been processed successfully.\"; \r\n        EmailService emailService = new EmailService();\r\n        assertTrue(emailService.sendEmail(recipientEmail, message));\r\n    }\r\n\r\n",
                        "nextNode": "String email"
                    },
                    {
                        "name": "String email",
                        "type": "String",
                        "context": "\r\n    class EmailService {\r\n        public boolean sendEmail(String email, String message) {\r\n            // Pretend to send an email\r\n            return email.contains(\"@\") && !message.isEmpty();\r\n",
                        "nextNode": "email"
                    },
                    {
                        "name": "email",
                        "type": "Dataflow from `recipientEmail` to `email`\nDataflow from `getenv(...)` to `email`\nDataflow from `\"RECIPIENT_EMAIL\"` to `email`",
                        "context": "        public boolean sendEmail(String email, String message) {\r\n            // Pretend to send an email\r\n            return email.contains(\"@\") && !message.isEmpty();\r\n        }\r\n    }\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "@",
                "isSensitive": "no"
            },
            {
                "name": "Hello, your request has been processed successfully.",
                "isSensitive": "no"
            },
            {
                "name": "RECIPIENT_EMAIL",
                "isSensitive": "no"
            }
        ],
        "comments": [
            {
                "name": "Pretend to send an email",
                "isSensitive": "no"
            },
            {
                "name": "Fetch the recipient email from environment variables",
                "isSensitive": "no"
            }
        ],
        "sinks": [
            {
                "name": "sendEmail",
                "isSink": "yes"
            },
            {
                "name": "contains",
                "isSink": "no"
            },
            {
                "name": "assertTrue",
                "isSink": "no"
            },
            {
                "name": "isEmpty",
                "isSink": "no"
            },
            {
                "name": "getenv",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "GOOD_FileEncryptionTest.java",
        "variables": [
            {
                "name": "filePath",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "System.getenv(\"FILE_PATH\")",
                        "type": "String",
                        "context": "    @Test\r\n    public void testFileEncryption() {\r\n        String filePath = System.getenv(\"FILE_PATH\");\r\n        // Fetch encryption key from environment variables\r\n        String encryptionKey = System.getenv(\"ENCRYPTION_KEY\");\r\n",
                        "nextNode": "filePath"
                    },
                    {
                        "name": "filePath",
                        "type": "Dataflow from `getenv(...)` to `filePath`\nDataflow from `\"FILE_PATH\"` to `filePath`",
                        "context": "\r\n        FileEncryptor encryptor = new FileEncryptor();\r\n        assertTrue(encryptor.encryptFile(filePath, encryptionKey), \"File encryption should be successful.\");\r\n    }\r\n}\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "encryptor",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "new FileEncryptor()",
                        "type": "FileEncryptor",
                        "context": "        }\r\n\r\n        FileEncryptor encryptor = new FileEncryptor();\r\n        assertTrue(encryptor.encryptFile(filePath, encryptionKey), \"File encryption should be successful.\");\r\n    }\r\n",
                        "nextNode": "encryptor"
                    },
                    {
                        "name": "encryptor",
                        "type": "Dataflow from `new FileEncryptor(...)` to `encryptor`",
                        "context": "\r\n        FileEncryptor encryptor = new FileEncryptor();\r\n        assertTrue(encryptor.encryptFile(filePath, encryptionKey), \"File encryption should be successful.\");\r\n    }\r\n}\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "encryptionKey",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "System.getenv(\"ENCRYPTION_KEY\")",
                        "type": "String",
                        "context": "        String filePath = System.getenv(\"FILE_PATH\");\r\n        // Fetch encryption key from environment variables\r\n        String encryptionKey = System.getenv(\"ENCRYPTION_KEY\");\r\n        if (encryptionKey == null || encryptionKey.isEmpty()) {\r\n            throw new IllegalStateException(\"Encryption key must be set in the environment variables.\");\r\n |         String filePath = System.getenv(\"FILE_PATH\");\r\n        // Fetch encryption key from environment variables\r\n        String encryptionKey = System.getenv(\"ENCRYPTION_KEY\");\r\n        if (encryptionKey == null || encryptionKey.isEmpty()) {\r\n            throw new IllegalStateException(\"Encryption key must be set in the environment variables.\");\r\n |         String filePath = System.getenv(\"FILE_PATH\");\r\n        // Fetch encryption key from environment variables\r\n        String encryptionKey = System.getenv(\"ENCRYPTION_KEY\");\r\n        if (encryptionKey == null || encryptionKey.isEmpty()) {\r\n            throw new IllegalStateException(\"Encryption key must be set in the environment variables.\");\r\n |         String filePath = System.getenv(\"FILE_PATH\");\r\n        // Fetch encryption key from environment variables\r\n        String encryptionKey = System.getenv(\"ENCRYPTION_KEY\");\r\n        if (encryptionKey == null || encryptionKey.isEmpty()) {\r\n            throw new IllegalStateException(\"Encryption key must be set in the environment variables.\");\r\n",
                        "nextNode": "encryptionKey"
                    },
                    {
                        "name": "String encryptionKey",
                        "type": "String",
                        "context": "\r\nclass FileEncryptor {\r\n    public boolean encryptFile(String filePath, String encryptionKey) {\r\n        // Assume this method performs actual encryption and returns true if successful\r\n        return encryptionKey.equals(System.getenv(\"ENCRYPTION_KEY\"));\r\n",
                        "nextNode": "encryptionKey"
                    },
                    {
                        "name": "encryptionKey",
                        "type": "String",
                        "context": "        // Fetch encryption key from environment variables\r\n        String encryptionKey = System.getenv(\"ENCRYPTION_KEY\");\r\n        if (encryptionKey == null || encryptionKey.isEmpty()) {\r\n            throw new IllegalStateException(\"Encryption key must be set in the environment variables.\");\r\n        }\r\n |         // Fetch encryption key from environment variables\r\n        String encryptionKey = System.getenv(\"ENCRYPTION_KEY\");\r\n        if (encryptionKey == null || encryptionKey.isEmpty()) {\r\n            throw new IllegalStateException(\"Encryption key must be set in the environment variables.\");\r\n        }\r\n | \r\n        FileEncryptor encryptor = new FileEncryptor();\r\n        assertTrue(encryptor.encryptFile(filePath, encryptionKey), \"File encryption should be successful.\");\r\n    }\r\n}\r\n |     public boolean encryptFile(String filePath, String encryptionKey) {\r\n        // Assume this method performs actual encryption and returns true if successful\r\n        return encryptionKey.equals(System.getenv(\"ENCRYPTION_KEY\"));\r\n    }\r\n}\r\n |         // Fetch encryption key from environment variables\r\n        String encryptionKey = System.getenv(\"ENCRYPTION_KEY\");\r\n        if (encryptionKey == null || encryptionKey.isEmpty()) {\r\n            throw new IllegalStateException(\"Encryption key must be set in the environment variables.\");\r\n        }\r\n |         // Fetch encryption key from environment variables\r\n        String encryptionKey = System.getenv(\"ENCRYPTION_KEY\");\r\n        if (encryptionKey == null || encryptionKey.isEmpty()) {\r\n            throw new IllegalStateException(\"Encryption key must be set in the environment variables.\");\r\n        }\r\n |         // Fetch encryption key from environment variables\r\n        String encryptionKey = System.getenv(\"ENCRYPTION_KEY\");\r\n        if (encryptionKey == null || encryptionKey.isEmpty()) {\r\n            throw new IllegalStateException(\"Encryption key must be set in the environment variables.\");\r\n        }\r\n |         // Fetch encryption key from environment variables\r\n        String encryptionKey = System.getenv(\"ENCRYPTION_KEY\");\r\n        if (encryptionKey == null || encryptionKey.isEmpty()) {\r\n            throw new IllegalStateException(\"Encryption key must be set in the environment variables.\");\r\n        }\r\n |         // Fetch encryption key from environment variables\r\n        String encryptionKey = System.getenv(\"ENCRYPTION_KEY\");\r\n        if (encryptionKey == null || encryptionKey.isEmpty()) {\r\n            throw new IllegalStateException(\"Encryption key must be set in the environment variables.\");\r\n        }\r\n | \r\n        FileEncryptor encryptor = new FileEncryptor();\r\n        assertTrue(encryptor.encryptFile(filePath, encryptionKey), \"File encryption should be successful.\");\r\n    }\r\n}\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "File encryption should be successful.",
                "isSensitive": "no"
            },
            {
                "name": "FILE_PATH",
                "isSensitive": "no"
            },
            {
                "name": "Encryption key must be set in the environment variables.",
                "isSensitive": "no"
            },
            {
                "name": "ENCRYPTION_KEY",
                "isSensitive": "no"
            }
        ],
        "comments": [
            {
                "name": "Assume this method performs actual encryption and returns true if successful",
                "isSensitive": "no"
            },
            {
                "name": "Fetch encryption key from environment variables",
                "isSensitive": "no"
            }
        ],
        "sinks": [
            {
                "name": "assertTrue",
                "isSink": "no"
            },
            {
                "name": "equals",
                "isSink": "no"
            },
            {
                "name": "isEmpty",
                "isSink": "no"
            },
            {
                "name": "encryptFile",
                "isSink": "no"
            },
            {
                "name": "getenv",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "GOOD_NetworkConfigurationTest.java",
        "variables": [
            {
                "name": "deviceSerial",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "testProps",
                        "type": "Properties",
                        "context": "    @Test\r\n    public void testConfigureNetwork() {\r\n        String deviceSerial = testProps.getProperty(\"deviceSerial\");\r\n        String configCommands = testProps.getProperty(\"configCommands\");\r\n\r\n",
                        "nextNode": "testProps.getProperty(\"deviceSerial\")"
                    },
                    {
                        "name": "testProps.getProperty(\"deviceSerial\")",
                        "type": "String",
                        "context": "    @Test\r\n    public void testConfigureNetwork() {\r\n        String deviceSerial = testProps.getProperty(\"deviceSerial\");\r\n        String configCommands = testProps.getProperty(\"configCommands\");\r\n\r\n",
                        "nextNode": "deviceSerial"
                    },
                    {
                        "name": "deviceSerial",
                        "type": "Dataflow from `testProps` to `deviceSerial`\nDataflow from `getProperty(...)` to `deviceSerial`\nDataflow from `\"deviceSerial\"` to `deviceSerial`",
                        "context": "\r\n        NetworkConfiguration config = new NetworkConfiguration();\r\n        assertTrue(config.configureNetwork(deviceSerial, configCommands), \"Network should be configured successfully.\");\r\n    }\r\n}\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "e",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "in",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "new FileInputStream(\"test_network_config.properties\")",
                        "type": "FileInputStream",
                        "context": "    public void loadTestProperties() {\r\n        testProps = new Properties();\r\n        try (FileInputStream in = new FileInputStream(\"test_network_config.properties\")) {\r\n            testProps.load(in);\r\n        } catch (IOException e) {\r\n",
                        "nextNode": "in"
                    },
                    {
                        "name": "in",
                        "type": "Dataflow from `new FileInputStream(...)` to `in`\nDataflow from `\"test_network_config.properties\"` to `in`",
                        "context": "        testProps = new Properties();\r\n        try (FileInputStream in = new FileInputStream(\"test_network_config.properties\")) {\r\n            testProps.load(in);\r\n        } catch (IOException e) {\r\n            throw new RuntimeException(\"Failed to load network configuration properties\", e);\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "testProps",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "new Properties()",
                        "type": "Properties",
                        "context": "    @BeforeEach\r\n    public void loadTestProperties() {\r\n        testProps = new Properties();\r\n        try (FileInputStream in = new FileInputStream(\"test_network_config.properties\")) {\r\n            testProps.load(in);\r\n",
                        "nextNode": "testProps"
                    },
                    {
                        "name": "testProps",
                        "type": "Dataflow from `new Properties(...)` to `testProps`",
                        "context": "        testProps = new Properties();\r\n        try (FileInputStream in = new FileInputStream(\"test_network_config.properties\")) {\r\n            testProps.load(in);\r\n        } catch (IOException e) {\r\n            throw new RuntimeException(\"Failed to load network configuration properties\", e);\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "configCommands",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "testProps",
                        "type": "Properties",
                        "context": "    @Test\r\n    public void testConfigureNetwork() {\r\n        String deviceSerial = testProps.getProperty(\"deviceSerial\");\r\n        String configCommands = testProps.getProperty(\"configCommands\");\r\n\r\n |     public void testConfigureNetwork() {\r\n        String deviceSerial = testProps.getProperty(\"deviceSerial\");\r\n        String configCommands = testProps.getProperty(\"configCommands\");\r\n\r\n        NetworkConfiguration config = new NetworkConfiguration();\r\n |     @Test\r\n    public void testConfigureNetwork() {\r\n        String deviceSerial = testProps.getProperty(\"deviceSerial\");\r\n        String configCommands = testProps.getProperty(\"configCommands\");\r\n\r\n |     public void testConfigureNetwork() {\r\n        String deviceSerial = testProps.getProperty(\"deviceSerial\");\r\n        String configCommands = testProps.getProperty(\"configCommands\");\r\n\r\n        NetworkConfiguration config = new NetworkConfiguration();\r\n",
                        "nextNode": "testProps.getProperty(\"configCommands\")"
                    },
                    {
                        "name": "testProps.getProperty(\"configCommands\")",
                        "type": "String",
                        "context": "    public void testConfigureNetwork() {\r\n        String deviceSerial = testProps.getProperty(\"deviceSerial\");\r\n        String configCommands = testProps.getProperty(\"configCommands\");\r\n\r\n        NetworkConfiguration config = new NetworkConfiguration();\r\n |     public void testConfigureNetwork() {\r\n        String deviceSerial = testProps.getProperty(\"deviceSerial\");\r\n        String configCommands = testProps.getProperty(\"configCommands\");\r\n\r\n        NetworkConfiguration config = new NetworkConfiguration();\r\n",
                        "nextNode": "configCommands"
                    },
                    {
                        "name": "String configCommands",
                        "type": "String",
                        "context": "\r\nclass NetworkConfiguration {\r\n    public boolean configureNetwork(String deviceSerial, String configCommands) {\r\n        return !configCommands.isEmpty();\r\n    }\r\n",
                        "nextNode": "configCommands"
                    },
                    {
                        "name": "configCommands",
                        "type": "String",
                        "context": "\r\n        NetworkConfiguration config = new NetworkConfiguration();\r\n        assertTrue(config.configureNetwork(deviceSerial, configCommands), \"Network should be configured successfully.\");\r\n    }\r\n}\r\n | class NetworkConfiguration {\r\n    public boolean configureNetwork(String deviceSerial, String configCommands) {\r\n        return !configCommands.isEmpty();\r\n    }\r\n}\r\n | \r\n        NetworkConfiguration config = new NetworkConfiguration();\r\n        assertTrue(config.configureNetwork(deviceSerial, configCommands), \"Network should be configured successfully.\");\r\n    }\r\n}\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "config",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "new NetworkConfiguration()",
                        "type": "NetworkConfiguration",
                        "context": "        String configCommands = testProps.getProperty(\"configCommands\");\r\n\r\n        NetworkConfiguration config = new NetworkConfiguration();\r\n        assertTrue(config.configureNetwork(deviceSerial, configCommands), \"Network should be configured successfully.\");\r\n    }\r\n",
                        "nextNode": "config"
                    },
                    {
                        "name": "config",
                        "type": "Dataflow from `new NetworkConfiguration(...)` to `config`",
                        "context": "\r\n        NetworkConfiguration config = new NetworkConfiguration();\r\n        assertTrue(config.configureNetwork(deviceSerial, configCommands), \"Network should be configured successfully.\");\r\n    }\r\n}\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "deviceSerial",
                "isSensitive": "no"
            },
            {
                "name": "Network should be configured successfully.",
                "isSensitive": "no"
            },
            {
                "name": "configCommands",
                "isSensitive": "no"
            },
            {
                "name": "test_network_config.properties",
                "isSensitive": "yes"
            },
            {
                "name": "Failed to load network configuration properties",
                "isSensitive": "no"
            }
        ],
        "comments": [],
        "sinks": [
            {
                "name": "configureNetwork",
                "isSink": "no"
            },
            {
                "name": "getProperty",
                "isSink": "no"
            },
            {
                "name": "load",
                "isSink": "no"
            },
            {
                "name": "assertTrue",
                "isSink": "no"
            },
            {
                "name": "isEmpty",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "GOOD_PaymentProcessingTest.java",
        "variables": [
            {
                "name": "amount",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "testProps",
                        "type": "Properties",
                        "context": "    void testProcessPayment() {\r\n        PaymentProcessor processor = new PaymentProcessor();\r\n        String creditCardNumber = testProps.getProperty(\"creditCardNumber\");\r\n        double amount = Double.parseDouble(testProps.getProperty(\"amount\"));\r\n        assertTrue(processor.processPayment(creditCardNumber, amount), \"Payment should be processed\");\r\n |         PaymentProcessor processor = new PaymentProcessor();\r\n        String creditCardNumber = testProps.getProperty(\"creditCardNumber\");\r\n        double amount = Double.parseDouble(testProps.getProperty(\"amount\"));\r\n        assertTrue(processor.processPayment(creditCardNumber, amount), \"Payment should be processed\");\r\n    }\r\n",
                        "nextNode": "testProps.getProperty(\"amount\")"
                    },
                    {
                        "name": "testProps.getProperty(\"amount\")",
                        "type": "String",
                        "context": "        PaymentProcessor processor = new PaymentProcessor();\r\n        String creditCardNumber = testProps.getProperty(\"creditCardNumber\");\r\n        double amount = Double.parseDouble(testProps.getProperty(\"amount\"));\r\n        assertTrue(processor.processPayment(creditCardNumber, amount), \"Payment should be processed\");\r\n    }\r\n",
                        "nextNode": "Double.parseDouble(testProps.getProperty(\"amount\")"
                    },
                    {
                        "name": "Double.parseDouble(testProps.getProperty(\"amount\")",
                        "type": "Number",
                        "context": "        PaymentProcessor processor = new PaymentProcessor();\r\n        String creditCardNumber = testProps.getProperty(\"creditCardNumber\");\r\n        double amount = Double.parseDouble(testProps.getProperty(\"amount\"));\r\n        assertTrue(processor.processPayment(creditCardNumber, amount), \"Payment should be processed\");\r\n    }\r\n",
                        "nextNode": "amount"
                    },
                    {
                        "name": "amount",
                        "type": "Dataflow from `testProps` to `amount`\nDataflow from `testProps` to `amount`\nDataflow from `getProperty(...)` to `amount`\nDataflow from `parseDouble(...)` to `amount`\nDataflow from `\"amount\"` to `amount`",
                        "context": "        String creditCardNumber = testProps.getProperty(\"creditCardNumber\");\r\n        double amount = Double.parseDouble(testProps.getProperty(\"amount\"));\r\n        assertTrue(processor.processPayment(creditCardNumber, amount), \"Payment should be processed\");\r\n    }\r\n}\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "in",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "new FileInputStream(\"test_payment_config.properties\")",
                        "type": "FileInputStream",
                        "context": "    void setUp() throws IOException {\r\n        testProps = new Properties();\r\n        try (FileInputStream in = new FileInputStream(\"test_payment_config.properties\")) {\r\n            testProps.load(in);\r\n        }\r\n",
                        "nextNode": "in"
                    },
                    {
                        "name": "in",
                        "type": "Dataflow from `new FileInputStream(...)` to `in`\nDataflow from `\"test_payment_config.properties\"` to `in`",
                        "context": "        testProps = new Properties();\r\n        try (FileInputStream in = new FileInputStream(\"test_payment_config.properties\")) {\r\n            testProps.load(in);\r\n        }\r\n    }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "creditCardNumber",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "testProps",
                        "type": "Properties",
                        "context": "    void testProcessPayment() {\r\n        PaymentProcessor processor = new PaymentProcessor();\r\n        String creditCardNumber = testProps.getProperty(\"creditCardNumber\");\r\n        double amount = Double.parseDouble(testProps.getProperty(\"amount\"));\r\n        assertTrue(processor.processPayment(creditCardNumber, amount), \"Payment should be processed\");\r\n",
                        "nextNode": "testProps.getProperty(\"creditCardNumber\")"
                    },
                    {
                        "name": "testProps.getProperty(\"creditCardNumber\")",
                        "type": "String",
                        "context": "    void testProcessPayment() {\r\n        PaymentProcessor processor = new PaymentProcessor();\r\n        String creditCardNumber = testProps.getProperty(\"creditCardNumber\");\r\n        double amount = Double.parseDouble(testProps.getProperty(\"amount\"));\r\n        assertTrue(processor.processPayment(creditCardNumber, amount), \"Payment should be processed\");\r\n",
                        "nextNode": "creditCardNumber"
                    },
                    {
                        "name": "creditCardNumber",
                        "type": "Dataflow from `testProps` to `creditCardNumber`\nDataflow from `getProperty(...)` to `creditCardNumber`\nDataflow from `\"creditCardNumber\"` to `creditCardNumber`",
                        "context": "        String creditCardNumber = testProps.getProperty(\"creditCardNumber\");\r\n        double amount = Double.parseDouble(testProps.getProperty(\"amount\"));\r\n        assertTrue(processor.processPayment(creditCardNumber, amount), \"Payment should be processed\");\r\n    }\r\n}\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "testProps",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "new Properties()",
                        "type": "Properties",
                        "context": "    @BeforeEach\r\n    void setUp() throws IOException {\r\n        testProps = new Properties();\r\n        try (FileInputStream in = new FileInputStream(\"test_payment_config.properties\")) {\r\n            testProps.load(in);\r\n",
                        "nextNode": "testProps"
                    },
                    {
                        "name": "testProps",
                        "type": "Dataflow from `new Properties(...)` to `testProps`",
                        "context": "        testProps = new Properties();\r\n        try (FileInputStream in = new FileInputStream(\"test_payment_config.properties\")) {\r\n            testProps.load(in);\r\n        }\r\n    }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "processor",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "new PaymentProcessor()",
                        "type": "PaymentProcessor",
                        "context": "    @Test\r\n    void testProcessPayment() {\r\n        PaymentProcessor processor = new PaymentProcessor();\r\n        String creditCardNumber = testProps.getProperty(\"creditCardNumber\");\r\n        double amount = Double.parseDouble(testProps.getProperty(\"amount\"));\r\n",
                        "nextNode": "processor"
                    },
                    {
                        "name": "processor",
                        "type": "Dataflow from `new PaymentProcessor(...)` to `processor`",
                        "context": "        String creditCardNumber = testProps.getProperty(\"creditCardNumber\");\r\n        double amount = Double.parseDouble(testProps.getProperty(\"amount\"));\r\n        assertTrue(processor.processPayment(creditCardNumber, amount), \"Payment should be processed\");\r\n    }\r\n}\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "amount",
                "isSensitive": "no"
            },
            {
                "name": "creditCardNumber",
                "isSensitive": "no"
            },
            {
                "name": "test_payment_config.properties",
                "isSensitive": "no"
            },
            {
                "name": "Payment should be processed",
                "isSensitive": "no"
            }
        ],
        "comments": [],
        "sinks": [
            {
                "name": "parseDouble",
                "isSink": "no"
            },
            {
                "name": "getProperty",
                "isSink": "no"
            },
            {
                "name": "load",
                "isSink": "no"
            },
            {
                "name": "assertTrue",
                "isSink": "no"
            },
            {
                "name": "processPayment",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "GOOD_UserAuthenticationTest.java",
        "variables": [
            {
                "name": "password",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "System.getenv(\"TEST_PASSWORD\")",
                        "type": "String",
                        "context": "        // Fetch credentials securely from environment variables\r\n        username = System.getenv(\"TEST_USERNAME\");\r\n        password = System.getenv(\"TEST_PASSWORD\");\r\n\r\n        // Ensure that the environment variables are correctly set\r\n",
                        "nextNode": "password"
                    },
                    {
                        "name": "password",
                        "type": "Dataflow from `getenv(...)` to `password`\nDataflow from `\"TEST_PASSWORD\"` to `password`",
                        "context": "\r\n        // Ensure that the environment variables are correctly set\r\n        if (username == null || password == null) {\r\n            fail(\"Environment variables for credentials must be set\");\r\n        }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "auth",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "new Authentication()",
                        "type": "Authentication",
                        "context": "    @Test\r\n    public void testLogin() {\r\n        Authentication auth = new Authentication();\r\n        assertTrue(auth.login(username, password), \"This test passes if login is successful\");\r\n    }\r\n",
                        "nextNode": "auth"
                    },
                    {
                        "name": "auth",
                        "type": "Dataflow from `new Authentication(...)` to `auth`",
                        "context": "    public void testLogin() {\r\n        Authentication auth = new Authentication();\r\n        assertTrue(auth.login(username, password), \"This test passes if login is successful\");\r\n    }\r\n\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "validPassword",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "System.getenv(\"VALID_PASSWORD\")",
                        "type": "String",
                        "context": "            \r\n            validUsername = System.getenv(\"VALID_USERNAME\");\r\n            validPassword = System.getenv(\"VALID_PASSWORD\");\r\n    \r\n            return validUsername.equals(username) && validPassword.equals(password);\r\n",
                        "nextNode": "validPassword"
                    },
                    {
                        "name": "validPassword",
                        "type": "Dataflow from `getenv(...)` to `validPassword`\nDataflow from `\"VALID_PASSWORD\"` to `validPassword`",
                        "context": "            validPassword = System.getenv(\"VALID_PASSWORD\");\r\n    \r\n            return validUsername.equals(username) && validPassword.equals(password);\r\n        }\r\n    }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "validUsername",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "System.getenv(\"VALID_USERNAME\")",
                        "type": "String",
                        "context": "            String validPassword;\r\n            \r\n            validUsername = System.getenv(\"VALID_USERNAME\");\r\n            validPassword = System.getenv(\"VALID_PASSWORD\");\r\n    \r\n",
                        "nextNode": "validUsername"
                    },
                    {
                        "name": "validUsername",
                        "type": "Dataflow from `getenv(...)` to `validUsername`\nDataflow from `\"VALID_USERNAME\"` to `validUsername`",
                        "context": "            validPassword = System.getenv(\"VALID_PASSWORD\");\r\n    \r\n            return validUsername.equals(username) && validPassword.equals(password);\r\n        }\r\n    }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "username",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "System.getenv(\"TEST_USERNAME\")",
                        "type": "String",
                        "context": "    public void setup() {\r\n        // Fetch credentials securely from environment variables\r\n        username = System.getenv(\"TEST_USERNAME\");\r\n        password = System.getenv(\"TEST_PASSWORD\");\r\n\r\n",
                        "nextNode": "username"
                    },
                    {
                        "name": "username",
                        "type": "Dataflow from `getenv(...)` to `username`\nDataflow from `\"TEST_USERNAME\"` to `username`",
                        "context": "\r\n        // Ensure that the environment variables are correctly set\r\n        if (username == null || password == null) {\r\n            fail(\"Environment variables for credentials must be set\");\r\n        }\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "TEST_USERNAME",
                "isSensitive": "no"
            },
            {
                "name": "VALID_USERNAME",
                "isSensitive": "no"
            },
            {
                "name": "TEST_PASSWORD",
                "isSensitive": "no"
            },
            {
                "name": "This test passes if login is successful",
                "isSensitive": "no"
            },
            {
                "name": "Environment variables for credentials must be set",
                "isSensitive": "no"
            },
            {
                "name": "VALID_PASSWORD",
                "isSensitive": "no"
            }
        ],
        "comments": [
            {
                "name": "Ensure that the environment variables are correctly set",
                "isSensitive": "no"
            },
            {
                "name": "Fetch credentials securely from environment variables",
                "isSensitive": "no"
            }
        ],
        "sinks": [
            {
                "name": "fail",
                "isSink": "no"
            },
            {
                "name": "assertTrue",
                "isSink": "no"
            },
            {
                "name": "equals",
                "isSink": "no"
            },
            {
                "name": "login",
                "isSink": "no"
            },
            {
                "name": "getenv",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "GOOD_UserDeletionTest.java",
        "variables": [
            {
                "name": "deletion",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "new UserDeletion()",
                        "type": "UserDeletion",
                        "context": "        adminAuthToken = System.getenv(\"ADMIN_AUTH_TOKEN\");\r\n        \r\n        UserDeletion deletion = new UserDeletion();\r\n        assertTrue(deletion.deleteUser(userId, adminAuthToken));\r\n    }\r\n",
                        "nextNode": "deletion"
                    },
                    {
                        "name": "deletion",
                        "type": "Dataflow from `new UserDeletion(...)` to `deletion`",
                        "context": "        \r\n        UserDeletion deletion = new UserDeletion();\r\n        assertTrue(deletion.deleteUser(userId, adminAuthToken));\r\n    }\r\n}\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "adminAuthTokenFromDB",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "System.getenv(\"ADMIN_AUTH_TOKEN\")",
                        "type": "String",
                        "context": "    public boolean deleteUser(String userId, String adminAuthToken) {\r\n        // Assume adminAuthToken is required to authenticate deletion operation\r\n        String adminAuthTokenFromDB = System.getenv(\"ADMIN_AUTH_TOKEN\");\r\n        return adminAuthToken.equals(adminAuthTokenFromDB);\r\n    }\r\n",
                        "nextNode": "adminAuthTokenFromDB"
                    },
                    {
                        "name": "adminAuthTokenFromDB",
                        "type": "Dataflow from `getenv(...)` to `adminAuthTokenFromDB`\nDataflow from `\"ADMIN_AUTH_TOKEN\"` to `adminAuthTokenFromDB`",
                        "context": "        // Assume adminAuthToken is required to authenticate deletion operation\r\n        String adminAuthTokenFromDB = System.getenv(\"ADMIN_AUTH_TOKEN\");\r\n        return adminAuthToken.equals(adminAuthTokenFromDB);\r\n    }\r\n}\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "userId",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "System.getenv(\"USER_ID\")",
                        "type": "String",
                        "context": "        String adminAuthToken;\r\n\r\n        userId = System.getenv(\"USER_ID\");\r\n        adminAuthToken = System.getenv(\"ADMIN_AUTH_TOKEN\");\r\n        \r\n",
                        "nextNode": "userId"
                    },
                    {
                        "name": "userId",
                        "type": "Dataflow from `getenv(...)` to `userId`\nDataflow from `\"USER_ID\"` to `userId`",
                        "context": "        \r\n        UserDeletion deletion = new UserDeletion();\r\n        assertTrue(deletion.deleteUser(userId, adminAuthToken));\r\n    }\r\n}\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "adminAuthToken",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "System.getenv(\"ADMIN_AUTH_TOKEN\")",
                        "type": "String",
                        "context": "\r\n        userId = System.getenv(\"USER_ID\");\r\n        adminAuthToken = System.getenv(\"ADMIN_AUTH_TOKEN\");\r\n        \r\n        UserDeletion deletion = new UserDeletion();\r\n | \r\n        userId = System.getenv(\"USER_ID\");\r\n        adminAuthToken = System.getenv(\"ADMIN_AUTH_TOKEN\");\r\n        \r\n        UserDeletion deletion = new UserDeletion();\r\n",
                        "nextNode": "adminAuthToken"
                    },
                    {
                        "name": "String adminAuthToken",
                        "type": "String",
                        "context": "\r\nclass UserDeletion {\r\n    public boolean deleteUser(String userId, String adminAuthToken) {\r\n        // Assume adminAuthToken is required to authenticate deletion operation\r\n        String adminAuthTokenFromDB = System.getenv(\"ADMIN_AUTH_TOKEN\");\r\n",
                        "nextNode": "adminAuthToken"
                    },
                    {
                        "name": "adminAuthToken",
                        "type": "String",
                        "context": "        \r\n        UserDeletion deletion = new UserDeletion();\r\n        assertTrue(deletion.deleteUser(userId, adminAuthToken));\r\n    }\r\n}\r\n |         // Assume adminAuthToken is required to authenticate deletion operation\r\n        String adminAuthTokenFromDB = System.getenv(\"ADMIN_AUTH_TOKEN\");\r\n        return adminAuthToken.equals(adminAuthTokenFromDB);\r\n    }\r\n}\r\n |         \r\n        UserDeletion deletion = new UserDeletion();\r\n        assertTrue(deletion.deleteUser(userId, adminAuthToken));\r\n    }\r\n}\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "ADMIN_AUTH_TOKEN",
                "isSensitive": "no"
            },
            {
                "name": "USER_ID",
                "isSensitive": "no"
            }
        ],
        "comments": [
            {
                "name": "Assume adminAuthToken is required to authenticate deletion operation",
                "isSensitive": "no"
            }
        ],
        "sinks": [
            {
                "name": "assertTrue",
                "isSink": "no"
            },
            {
                "name": "equals",
                "isSink": "no"
            },
            {
                "name": "deleteUser",
                "isSink": "no"
            },
            {
                "name": "getenv",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "BAD_APIAccessLogger.java",
        "variables": [
            {
                "name": "apiKey",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "logger",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "Logger.getLogger(\"APIAccessLogger\")",
                        "type": "Logger",
                        "context": "\r\npublic class BAD_APIAccessLogger {\r\n    private static final Logger logger = Logger.getLogger(\"APIAccessLogger\");\r\n\r\n    public void logAPIUsage(String apiKey, String methodName) {\r\n",
                        "nextNode": "logger"
                    },
                    {
                        "name": "logger",
                        "type": "Logger",
                        "context": "\r\npublic class BAD_APIAccessLogger {\r\n    private static final Logger logger = Logger.getLogger(\"APIAccessLogger\");\r\n\r\n    public void logAPIUsage(String apiKey, String methodName) {\r\n |     public void logAPIUsage(String apiKey, String methodName) {\r\n        // Log API usage\r\n        logger.warning(\"API usage: Key: \" + apiKey + \", Method: \" + methodName);\r\n    }\r\n}\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "methodName",
                "isSensitive": "no",
                "graph": []
            }
        ],
        "strings": [
            {
                "name": ", Method:",
                "isSensitive": "no"
            },
            {
                "name": "API usage: Key:",
                "isSensitive": "no"
            },
            {
                "name": "APIAccessLogger",
                "isSensitive": "no"
            }
        ],
        "comments": [
            {
                "name": "Log API usage",
                "isSensitive": "no"
            }
        ],
        "sinks": [
            {
                "name": "getLogger",
                "isSink": "no"
            },
            {
                "name": "warning",
                "isSink": "yes"
            }
        ]
    },
    {
        "fileName": "BAD_ErrorHandler.java",
        "variables": [
            {
                "name": "logger",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "LogManager.getLogger(BAD_ErrorHandler.class)",
                        "type": "Logger",
                        "context": "\r\npublic class BAD_ErrorHandler {\r\n    private static final Logger logger = LogManager.getLogger(BAD_ErrorHandler.class);\r\n\r\n    public void logError(String errorMessage, String userSession) {\r\n",
                        "nextNode": "logger"
                    },
                    {
                        "name": "logger",
                        "type": "Logger",
                        "context": "\r\npublic class BAD_ErrorHandler {\r\n    private static final Logger logger = LogManager.getLogger(BAD_ErrorHandler.class);\r\n\r\n    public void logError(String errorMessage, String userSession) {\r\n | \r\n    public void logError(String errorMessage, String userSession) {\r\n        logger.error(\"An error occurred: \" + errorMessage + \". Session: \" + userSession);\r\n    }\r\n}\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "errorMessage",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "userSession",
                "isSensitive": "yes",
                "graph": []
            }
        ],
        "strings": [
            {
                "name": "An error occurred:",
                "isSensitive": "no"
            },
            {
                "name": ". Session:",
                "isSensitive": "no"
            }
        ],
        "comments": [],
        "sinks": [
            {
                "name": "getLogger",
                "isSink": "no"
            },
            {
                "name": "error",
                "isSink": "yes"
            }
        ]
    },
    {
        "fileName": "BAD_ErrorReportHandlerLog.java",
        "variables": [
            {
                "name": "logger",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "LoggerFactory.getLogger(BAD_ErrorReportHandlerLog.class)",
                        "type": "Logger",
                        "context": "\r\npublic class BAD_ErrorReportHandlerLog {\r\n    private static final Logger logger = (Logger) LoggerFactory.getLogger(BAD_ErrorReportHandlerLog.class);\r\n\r\n    public void handleError(String errorCode, String errorMessage, String debugInfo) {\r\n",
                        "nextNode": "(Logger) LoggerFactory.getLogger(BAD_ErrorReportHandlerLog.class)"
                    },
                    {
                        "name": "(Logger) LoggerFactory.getLogger(BAD_ErrorReportHandlerLog.class)",
                        "type": "Logger",
                        "context": "\r\npublic class BAD_ErrorReportHandlerLog {\r\n    private static final Logger logger = (Logger) LoggerFactory.getLogger(BAD_ErrorReportHandlerLog.class);\r\n\r\n    public void handleError(String errorCode, String errorMessage, String debugInfo) {\r\n",
                        "nextNode": "logger"
                    },
                    {
                        "name": "logger",
                        "type": "Logger",
                        "context": "\r\npublic class BAD_ErrorReportHandlerLog {\r\n    private static final Logger logger = (Logger) LoggerFactory.getLogger(BAD_ErrorReportHandlerLog.class);\r\n\r\n    public void handleError(String errorCode, String errorMessage, String debugInfo) {\r\n |     public void handleError(String errorCode, String errorMessage, String debugInfo) {\r\n        // Log detailed error information\r\n        logger.error(\"Error reported: Code: {}, Message: {}, Debug Info: {}\", errorCode, errorMessage, debugInfo); \r\n    }\r\n}\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "errorMessage",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "errorCode",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "debugInfo",
                "isSensitive": "yes",
                "graph": []
            }
        ],
        "strings": [
            {
                "name": "Error reported: Code: {}, Message: {}, Debug Info: {}",
                "isSensitive": "no"
            }
        ],
        "comments": [
            {
                "name": "Log detailed error information",
                "isSensitive": "no"
            }
        ],
        "sinks": [
            {
                "name": "getLogger",
                "isSink": "no"
            },
            {
                "name": "error",
                "isSink": "yes"
            }
        ]
    },
    {
        "fileName": "BAD_FinancialTransactionLogger.java",
        "variables": [
            {
                "name": "amount",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "logger",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "LogFactory.getLog(BAD_FinancialTransactionLogger.class)",
                        "type": "Log",
                        "context": "\r\npublic class BAD_FinancialTransactionLogger {\r\n    private static final Log logger = LogFactory.getLog(BAD_FinancialTransactionLogger.class);\r\n\r\n    public void logTransaction(String transactionId, double amount, String bankAccountNumber) {\r\n",
                        "nextNode": "logger"
                    },
                    {
                        "name": "logger",
                        "type": "Log",
                        "context": "\r\npublic class BAD_FinancialTransactionLogger {\r\n    private static final Log logger = LogFactory.getLog(BAD_FinancialTransactionLogger.class);\r\n\r\n    public void logTransaction(String transactionId, double amount, String bankAccountNumber) {\r\n |     public void logTransaction(String transactionId, double amount, String bankAccountNumber) {\r\n        // Log transaction details\r\n        logger.info(\"Transaction logged with ID: \" + transactionId + \", amount: \" + amount + \", account number: \" + bankAccountNumber);\r\n    }\r\n}\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "bankAccountNumber",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "transactionId",
                "isSensitive": "yes",
                "graph": []
            }
        ],
        "strings": [
            {
                "name": ", amount:",
                "isSensitive": "no"
            },
            {
                "name": ", account number:",
                "isSensitive": "no"
            },
            {
                "name": "Transaction logged with ID:",
                "isSensitive": "no"
            }
        ],
        "comments": [
            {
                "name": "Log transaction details",
                "isSensitive": "no"
            }
        ],
        "sinks": [
            {
                "name": "getLog",
                "isSink": "no"
            },
            {
                "name": "info",
                "isSink": "yes"
            }
        ]
    },
    {
        "fileName": "BAD_LogDbConnectionDetails.java",
        "variables": [
            {
                "name": "args",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "password",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "\"admin123\"",
                        "type": "String",
                        "context": "\r\n    public static void main(String[] args) {\r\n        new BAD_LogDbConnectionDetails().connectToDatabase(\"jdbc:mysql://localhost:3306/myapp\", \"admin\", \"admin123\");\r\n    }\r\n}\r\n | \r\n    public static void main(String[] args) {\r\n        new BAD_LogDbConnectionDetails().connectToDatabase(\"jdbc:mysql://localhost:3306/myapp\", \"admin\", \"admin123\");\r\n    }\r\n}\r\n",
                        "nextNode": "String password"
                    },
                    {
                        "name": "String password",
                        "type": "String",
                        "context": "    private static final Logger logger = LogManager.getLogger(BAD_LogDbConnectionDetails.class);\r\n\r\n    public Connection connectToDatabase(String dbUrl, String user, String password) {\r\n        try {\r\n            logger.info(\"Connecting to database at \" + dbUrl + \" with user \" + user + \" and password \" + password);\r\n |     private static final Logger logger = LogManager.getLogger(BAD_LogDbConnectionDetails.class);\r\n\r\n    public Connection connectToDatabase(String dbUrl, String user, String password) {\r\n        try {\r\n            logger.info(\"Connecting to database at \" + dbUrl + \" with user \" + user + \" and password \" + password);\r\n",
                        "nextNode": "password"
                    },
                    {
                        "name": "password",
                        "type": "Dataflow from `\"admin123\"` to `password`",
                        "context": "    public Connection connectToDatabase(String dbUrl, String user, String password) {\r\n        try {\r\n            logger.info(\"Connecting to database at \" + dbUrl + \" with user \" + user + \" and password \" + password);\r\n            return DriverManager.getConnection(dbUrl, user, password);\r\n        } catch (SQLException e) {\r\n |     public Connection connectToDatabase(String dbUrl, String user, String password) {\r\n        try {\r\n            logger.info(\"Connecting to database at \" + dbUrl + \" with user \" + user + \" and password \" + password);\r\n            return DriverManager.getConnection(dbUrl, user, password);\r\n        } catch (SQLException e) {\r\n |         try {\r\n            logger.info(\"Connecting to database at \" + dbUrl + \" with user \" + user + \" and password \" + password);\r\n            return DriverManager.getConnection(dbUrl, user, password);\r\n        } catch (SQLException e) {\r\n            logger.error(\"Database connection failed\", e);\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "e",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "logger",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "LogManager.getLogger(BAD_LogDbConnectionDetails.class)",
                        "type": "Logger",
                        "context": "\r\npublic class BAD_LogDbConnectionDetails {\r\n    private static final Logger logger = LogManager.getLogger(BAD_LogDbConnectionDetails.class);\r\n\r\n    public Connection connectToDatabase(String dbUrl, String user, String password) {\r\n | \r\npublic class BAD_LogDbConnectionDetails {\r\n    private static final Logger logger = LogManager.getLogger(BAD_LogDbConnectionDetails.class);\r\n\r\n    public Connection connectToDatabase(String dbUrl, String user, String password) {\r\n",
                        "nextNode": "logger"
                    },
                    {
                        "name": "logger",
                        "type": "Logger",
                        "context": "\r\npublic class BAD_LogDbConnectionDetails {\r\n    private static final Logger logger = LogManager.getLogger(BAD_LogDbConnectionDetails.class);\r\n\r\n    public Connection connectToDatabase(String dbUrl, String user, String password) {\r\n |     public Connection connectToDatabase(String dbUrl, String user, String password) {\r\n        try {\r\n            logger.info(\"Connecting to database at \" + dbUrl + \" with user \" + user + \" and password \" + password);\r\n            return DriverManager.getConnection(dbUrl, user, password);\r\n        } catch (SQLException e) {\r\n | \r\npublic class BAD_LogDbConnectionDetails {\r\n    private static final Logger logger = LogManager.getLogger(BAD_LogDbConnectionDetails.class);\r\n\r\n    public Connection connectToDatabase(String dbUrl, String user, String password) {\r\n |             return DriverManager.getConnection(dbUrl, user, password);\r\n        } catch (SQLException e) {\r\n            logger.error(\"Database connection failed\", e);\r\n            return null;\r\n        }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "user",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "\"admin\"",
                        "type": "String",
                        "context": "\r\n    public static void main(String[] args) {\r\n        new BAD_LogDbConnectionDetails().connectToDatabase(\"jdbc:mysql://localhost:3306/myapp\", \"admin\", \"admin123\");\r\n    }\r\n}\r\n | \r\n    public static void main(String[] args) {\r\n        new BAD_LogDbConnectionDetails().connectToDatabase(\"jdbc:mysql://localhost:3306/myapp\", \"admin\", \"admin123\");\r\n    }\r\n}\r\n",
                        "nextNode": "String user"
                    },
                    {
                        "name": "String user",
                        "type": "String",
                        "context": "    private static final Logger logger = LogManager.getLogger(BAD_LogDbConnectionDetails.class);\r\n\r\n    public Connection connectToDatabase(String dbUrl, String user, String password) {\r\n        try {\r\n            logger.info(\"Connecting to database at \" + dbUrl + \" with user \" + user + \" and password \" + password);\r\n |     private static final Logger logger = LogManager.getLogger(BAD_LogDbConnectionDetails.class);\r\n\r\n    public Connection connectToDatabase(String dbUrl, String user, String password) {\r\n        try {\r\n            logger.info(\"Connecting to database at \" + dbUrl + \" with user \" + user + \" and password \" + password);\r\n",
                        "nextNode": "user"
                    },
                    {
                        "name": "user",
                        "type": "Dataflow from `\"admin\"` to `user`",
                        "context": "    public Connection connectToDatabase(String dbUrl, String user, String password) {\r\n        try {\r\n            logger.info(\"Connecting to database at \" + dbUrl + \" with user \" + user + \" and password \" + password);\r\n            return DriverManager.getConnection(dbUrl, user, password);\r\n        } catch (SQLException e) {\r\n |     public Connection connectToDatabase(String dbUrl, String user, String password) {\r\n        try {\r\n            logger.info(\"Connecting to database at \" + dbUrl + \" with user \" + user + \" and password \" + password);\r\n            return DriverManager.getConnection(dbUrl, user, password);\r\n        } catch (SQLException e) {\r\n |         try {\r\n            logger.info(\"Connecting to database at \" + dbUrl + \" with user \" + user + \" and password \" + password);\r\n            return DriverManager.getConnection(dbUrl, user, password);\r\n        } catch (SQLException e) {\r\n            logger.error(\"Database connection failed\", e);\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "dbUrl",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "\"jdbc:mysql://localhost:3306/myapp\"",
                        "type": "String",
                        "context": "\r\n    public static void main(String[] args) {\r\n        new BAD_LogDbConnectionDetails().connectToDatabase(\"jdbc:mysql://localhost:3306/myapp\", \"admin\", \"admin123\");\r\n    }\r\n}\r\n | \r\n    public static void main(String[] args) {\r\n        new BAD_LogDbConnectionDetails().connectToDatabase(\"jdbc:mysql://localhost:3306/myapp\", \"admin\", \"admin123\");\r\n    }\r\n}\r\n",
                        "nextNode": "String dbUrl"
                    },
                    {
                        "name": "String dbUrl",
                        "type": "String",
                        "context": "    private static final Logger logger = LogManager.getLogger(BAD_LogDbConnectionDetails.class);\r\n\r\n    public Connection connectToDatabase(String dbUrl, String user, String password) {\r\n        try {\r\n            logger.info(\"Connecting to database at \" + dbUrl + \" with user \" + user + \" and password \" + password);\r\n |     private static final Logger logger = LogManager.getLogger(BAD_LogDbConnectionDetails.class);\r\n\r\n    public Connection connectToDatabase(String dbUrl, String user, String password) {\r\n        try {\r\n            logger.info(\"Connecting to database at \" + dbUrl + \" with user \" + user + \" and password \" + password);\r\n",
                        "nextNode": "dbUrl"
                    },
                    {
                        "name": "dbUrl",
                        "type": "Dataflow from `\"jdbc:mysql://localhost:3306/myapp\"` to `dbUrl`",
                        "context": "    public Connection connectToDatabase(String dbUrl, String user, String password) {\r\n        try {\r\n            logger.info(\"Connecting to database at \" + dbUrl + \" with user \" + user + \" and password \" + password);\r\n            return DriverManager.getConnection(dbUrl, user, password);\r\n        } catch (SQLException e) {\r\n |     public Connection connectToDatabase(String dbUrl, String user, String password) {\r\n        try {\r\n            logger.info(\"Connecting to database at \" + dbUrl + \" with user \" + user + \" and password \" + password);\r\n            return DriverManager.getConnection(dbUrl, user, password);\r\n        } catch (SQLException e) {\r\n |         try {\r\n            logger.info(\"Connecting to database at \" + dbUrl + \" with user \" + user + \" and password \" + password);\r\n            return DriverManager.getConnection(dbUrl, user, password);\r\n        } catch (SQLException e) {\r\n            logger.error(\"Database connection failed\", e);\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "Database connection failed",
                "isSensitive": "no"
            },
            {
                "name": "Connecting to database at",
                "isSensitive": "no"
            },
            {
                "name": "jdbc:mysql://localhost:3306/myapp",
                "isSensitive": "yes"
            },
            {
                "name": "and password",
                "isSensitive": "no"
            },
            {
                "name": "admin123",
                "isSensitive": "yes"
            },
            {
                "name": "admin",
                "isSensitive": "yes"
            },
            {
                "name": "with user",
                "isSensitive": "no"
            }
        ],
        "comments": [],
        "sinks": [
            {
                "name": "getConnection",
                "isSink": "yes"
            },
            {
                "name": "connectToDatabase",
                "isSink": "no"
            },
            {
                "name": "getLogger",
                "isSink": "no"
            },
            {
                "name": "error",
                "isSink": "yes"
            },
            {
                "name": "info",
                "isSink": "yes"
            }
        ]
    },
    {
        "fileName": "BAD_LogPaymentInformation.java",
        "variables": [
            {
                "name": "expiryDate",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "\"12/23\"",
                        "type": "String",
                        "context": "\r\n    public static void main(String[] args) {\r\n        new BAD_LogPaymentInformation().processPayment(\"1234567890123456\", \"12/23\", \"123\");\r\n    }\r\n}\r\n | \r\n    public static void main(String[] args) {\r\n        new BAD_LogPaymentInformation().processPayment(\"1234567890123456\", \"12/23\", \"123\");\r\n    }\r\n}\r\n | \r\n    public static void main(String[] args) {\r\n        new BAD_LogPaymentInformation().processPayment(\"1234567890123456\", \"12/23\", \"123\");\r\n    }\r\n}\r\n",
                        "nextNode": "String expiryDate"
                    },
                    {
                        "name": "String expiryDate",
                        "type": "String",
                        "context": "    }\r\n\r\n    public void processPayment(String creditCardNumber, String expiryDate, String cvv) {\r\n        String transactionId = generateTransactionId();\r\n\r\n |     private static final Logger logger = LogManager.getLogger(BAD_LogPaymentInformation.class);\r\n\r\n    public boolean validatePaymentDetails(String creditCardNumber, String expiryDate, String cvv) {\r\n        logger.info(\"Processing payment with card number: \" + creditCardNumber + \", expiry date: \" + expiryDate + \", and CVV: \" + cvv);\r\n\r\n |     }\r\n\r\n    public void processPayment(String creditCardNumber, String expiryDate, String cvv) {\r\n        String transactionId = generateTransactionId();\r\n\r\n |     }\r\n\r\n    public void processPayment(String creditCardNumber, String expiryDate, String cvv) {\r\n        String transactionId = generateTransactionId();\r\n\r\n",
                        "nextNode": "expiryDate"
                    },
                    {
                        "name": "expiryDate",
                        "type": "String",
                        "context": "        String transactionId = generateTransactionId();\r\n\r\n        if (!validatePaymentDetails(creditCardNumber, expiryDate, cvv)) {\r\n            logger.error(\"Invalid payment details provided for transaction \" + creditCardNumber + \", expiry date: \" + expiryDate + \", and CVV: \" + cvv);\r\n            return; // Early return if validation fails\r\n | \r\n    public boolean validatePaymentDetails(String creditCardNumber, String expiryDate, String cvv) {\r\n        logger.info(\"Processing payment with card number: \" + creditCardNumber + \", expiry date: \" + expiryDate + \", and CVV: \" + cvv);\r\n\r\n        return creditCardNumber.length() == 16 && cvv.length() == 3; // Simplified validation\r\n |         String transactionId = generateTransactionId();\r\n\r\n        if (!validatePaymentDetails(creditCardNumber, expiryDate, cvv)) {\r\n            logger.error(\"Invalid payment details provided for transaction \" + creditCardNumber + \", expiry date: \" + expiryDate + \", and CVV: \" + cvv);\r\n            return; // Early return if validation fails\r\n |         String transactionId = generateTransactionId();\r\n\r\n        if (!validatePaymentDetails(creditCardNumber, expiryDate, cvv)) {\r\n            logger.error(\"Invalid payment details provided for transaction \" + creditCardNumber + \", expiry date: \" + expiryDate + \", and CVV: \" + cvv);\r\n            return; // Early return if validation fails\r\n | \r\n        if (!validatePaymentDetails(creditCardNumber, expiryDate, cvv)) {\r\n            logger.error(\"Invalid payment details provided for transaction \" + creditCardNumber + \", expiry date: \" + expiryDate + \", and CVV: \" + cvv);\r\n            return; // Early return if validation fails\r\n        }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "args",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "paymentSuccess",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "cvv",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "\"123\"",
                        "type": "String",
                        "context": "\r\n    public static void main(String[] args) {\r\n        new BAD_LogPaymentInformation().processPayment(\"1234567890123456\", \"12/23\", \"123\");\r\n    }\r\n}\r\n | \r\n    public static void main(String[] args) {\r\n        new BAD_LogPaymentInformation().processPayment(\"1234567890123456\", \"12/23\", \"123\");\r\n    }\r\n}\r\n | \r\n    public static void main(String[] args) {\r\n        new BAD_LogPaymentInformation().processPayment(\"1234567890123456\", \"12/23\", \"123\");\r\n    }\r\n}\r\n | \r\n    public static void main(String[] args) {\r\n        new BAD_LogPaymentInformation().processPayment(\"1234567890123456\", \"12/23\", \"123\");\r\n    }\r\n}\r\n",
                        "nextNode": "String cvv"
                    },
                    {
                        "name": "String cvv",
                        "type": "String",
                        "context": "    }\r\n\r\n    public void processPayment(String creditCardNumber, String expiryDate, String cvv) {\r\n        String transactionId = generateTransactionId();\r\n\r\n |     private static final Logger logger = LogManager.getLogger(BAD_LogPaymentInformation.class);\r\n\r\n    public boolean validatePaymentDetails(String creditCardNumber, String expiryDate, String cvv) {\r\n        logger.info(\"Processing payment with card number: \" + creditCardNumber + \", expiry date: \" + expiryDate + \", and CVV: \" + cvv);\r\n\r\n |     }\r\n\r\n    public void processPayment(String creditCardNumber, String expiryDate, String cvv) {\r\n        String transactionId = generateTransactionId();\r\n\r\n |     private static final Logger logger = LogManager.getLogger(BAD_LogPaymentInformation.class);\r\n\r\n    public boolean validatePaymentDetails(String creditCardNumber, String expiryDate, String cvv) {\r\n        logger.info(\"Processing payment with card number: \" + creditCardNumber + \", expiry date: \" + expiryDate + \", and CVV: \" + cvv);\r\n\r\n |     }\r\n\r\n    public void processPayment(String creditCardNumber, String expiryDate, String cvv) {\r\n        String transactionId = generateTransactionId();\r\n\r\n |     }\r\n\r\n    public void processPayment(String creditCardNumber, String expiryDate, String cvv) {\r\n        String transactionId = generateTransactionId();\r\n\r\n",
                        "nextNode": "cvv"
                    },
                    {
                        "name": "cvv",
                        "type": "String",
                        "context": "        String transactionId = generateTransactionId();\r\n\r\n        if (!validatePaymentDetails(creditCardNumber, expiryDate, cvv)) {\r\n            logger.error(\"Invalid payment details provided for transaction \" + creditCardNumber + \", expiry date: \" + expiryDate + \", and CVV: \" + cvv);\r\n            return; // Early return if validation fails\r\n | \r\n    public boolean validatePaymentDetails(String creditCardNumber, String expiryDate, String cvv) {\r\n        logger.info(\"Processing payment with card number: \" + creditCardNumber + \", expiry date: \" + expiryDate + \", and CVV: \" + cvv);\r\n\r\n        return creditCardNumber.length() == 16 && cvv.length() == 3; // Simplified validation\r\n |         String transactionId = generateTransactionId();\r\n\r\n        if (!validatePaymentDetails(creditCardNumber, expiryDate, cvv)) {\r\n            logger.error(\"Invalid payment details provided for transaction \" + creditCardNumber + \", expiry date: \" + expiryDate + \", and CVV: \" + cvv);\r\n            return; // Early return if validation fails\r\n | \r\n    public boolean validatePaymentDetails(String creditCardNumber, String expiryDate, String cvv) {\r\n        logger.info(\"Processing payment with card number: \" + creditCardNumber + \", expiry date: \" + expiryDate + \", and CVV: \" + cvv);\r\n\r\n        return creditCardNumber.length() == 16 && cvv.length() == 3; // Simplified validation\r\n |         logger.info(\"Processing payment with card number: \" + creditCardNumber + \", expiry date: \" + expiryDate + \", and CVV: \" + cvv);\r\n\r\n        return creditCardNumber.length() == 16 && cvv.length() == 3; // Simplified validation\r\n    }\r\n\r\n |         String transactionId = generateTransactionId();\r\n\r\n        if (!validatePaymentDetails(creditCardNumber, expiryDate, cvv)) {\r\n            logger.error(\"Invalid payment details provided for transaction \" + creditCardNumber + \", expiry date: \" + expiryDate + \", and CVV: \" + cvv);\r\n            return; // Early return if validation fails\r\n |         String transactionId = generateTransactionId();\r\n\r\n        if (!validatePaymentDetails(creditCardNumber, expiryDate, cvv)) {\r\n            logger.error(\"Invalid payment details provided for transaction \" + creditCardNumber + \", expiry date: \" + expiryDate + \", and CVV: \" + cvv);\r\n            return; // Early return if validation fails\r\n | \r\n        if (!validatePaymentDetails(creditCardNumber, expiryDate, cvv)) {\r\n            logger.error(\"Invalid payment details provided for transaction \" + creditCardNumber + \", expiry date: \" + expiryDate + \", and CVV: \" + cvv);\r\n            return; // Early return if validation fails\r\n        }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "creditCardNumber",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "\"1234567890123456\"",
                        "type": "String",
                        "context": "\r\n    public static void main(String[] args) {\r\n        new BAD_LogPaymentInformation().processPayment(\"1234567890123456\", \"12/23\", \"123\");\r\n    }\r\n}\r\n | \r\n    public static void main(String[] args) {\r\n        new BAD_LogPaymentInformation().processPayment(\"1234567890123456\", \"12/23\", \"123\");\r\n    }\r\n}\r\n | \r\n    public static void main(String[] args) {\r\n        new BAD_LogPaymentInformation().processPayment(\"1234567890123456\", \"12/23\", \"123\");\r\n    }\r\n}\r\n | \r\n    public static void main(String[] args) {\r\n        new BAD_LogPaymentInformation().processPayment(\"1234567890123456\", \"12/23\", \"123\");\r\n    }\r\n}\r\n",
                        "nextNode": "String creditCardNumber"
                    },
                    {
                        "name": "String creditCardNumber",
                        "type": "String",
                        "context": "    }\r\n\r\n    public void processPayment(String creditCardNumber, String expiryDate, String cvv) {\r\n        String transactionId = generateTransactionId();\r\n\r\n |     private static final Logger logger = LogManager.getLogger(BAD_LogPaymentInformation.class);\r\n\r\n    public boolean validatePaymentDetails(String creditCardNumber, String expiryDate, String cvv) {\r\n        logger.info(\"Processing payment with card number: \" + creditCardNumber + \", expiry date: \" + expiryDate + \", and CVV: \" + cvv);\r\n\r\n |     }\r\n\r\n    public void processPayment(String creditCardNumber, String expiryDate, String cvv) {\r\n        String transactionId = generateTransactionId();\r\n\r\n |     private static final Logger logger = LogManager.getLogger(BAD_LogPaymentInformation.class);\r\n\r\n    public boolean validatePaymentDetails(String creditCardNumber, String expiryDate, String cvv) {\r\n        logger.info(\"Processing payment with card number: \" + creditCardNumber + \", expiry date: \" + expiryDate + \", and CVV: \" + cvv);\r\n\r\n |     }\r\n\r\n    public void processPayment(String creditCardNumber, String expiryDate, String cvv) {\r\n        String transactionId = generateTransactionId();\r\n\r\n |     }\r\n\r\n    public void processPayment(String creditCardNumber, String expiryDate, String cvv) {\r\n        String transactionId = generateTransactionId();\r\n\r\n",
                        "nextNode": "creditCardNumber"
                    },
                    {
                        "name": "creditCardNumber",
                        "type": "String",
                        "context": "        String transactionId = generateTransactionId();\r\n\r\n        if (!validatePaymentDetails(creditCardNumber, expiryDate, cvv)) {\r\n            logger.error(\"Invalid payment details provided for transaction \" + creditCardNumber + \", expiry date: \" + expiryDate + \", and CVV: \" + cvv);\r\n            return; // Early return if validation fails\r\n | \r\n    public boolean validatePaymentDetails(String creditCardNumber, String expiryDate, String cvv) {\r\n        logger.info(\"Processing payment with card number: \" + creditCardNumber + \", expiry date: \" + expiryDate + \", and CVV: \" + cvv);\r\n\r\n        return creditCardNumber.length() == 16 && cvv.length() == 3; // Simplified validation\r\n |         String transactionId = generateTransactionId();\r\n\r\n        if (!validatePaymentDetails(creditCardNumber, expiryDate, cvv)) {\r\n            logger.error(\"Invalid payment details provided for transaction \" + creditCardNumber + \", expiry date: \" + expiryDate + \", and CVV: \" + cvv);\r\n            return; // Early return if validation fails\r\n | \r\n    public boolean validatePaymentDetails(String creditCardNumber, String expiryDate, String cvv) {\r\n        logger.info(\"Processing payment with card number: \" + creditCardNumber + \", expiry date: \" + expiryDate + \", and CVV: \" + cvv);\r\n\r\n        return creditCardNumber.length() == 16 && cvv.length() == 3; // Simplified validation\r\n |         logger.info(\"Processing payment with card number: \" + creditCardNumber + \", expiry date: \" + expiryDate + \", and CVV: \" + cvv);\r\n\r\n        return creditCardNumber.length() == 16 && cvv.length() == 3; // Simplified validation\r\n    }\r\n\r\n |         String transactionId = generateTransactionId();\r\n\r\n        if (!validatePaymentDetails(creditCardNumber, expiryDate, cvv)) {\r\n            logger.error(\"Invalid payment details provided for transaction \" + creditCardNumber + \", expiry date: \" + expiryDate + \", and CVV: \" + cvv);\r\n            return; // Early return if validation fails\r\n |         String transactionId = generateTransactionId();\r\n\r\n        if (!validatePaymentDetails(creditCardNumber, expiryDate, cvv)) {\r\n            logger.error(\"Invalid payment details provided for transaction \" + creditCardNumber + \", expiry date: \" + expiryDate + \", and CVV: \" + cvv);\r\n            return; // Early return if validation fails\r\n | \r\n        if (!validatePaymentDetails(creditCardNumber, expiryDate, cvv)) {\r\n            logger.error(\"Invalid payment details provided for transaction \" + creditCardNumber + \", expiry date: \" + expiryDate + \", and CVV: \" + cvv);\r\n            return; // Early return if validation fails\r\n        }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "logger",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "LogManager.getLogger(BAD_LogPaymentInformation.class)",
                        "type": "Logger",
                        "context": "\r\npublic class BAD_LogPaymentInformation {\r\n    private static final Logger logger = LogManager.getLogger(BAD_LogPaymentInformation.class);\r\n\r\n    public boolean validatePaymentDetails(String creditCardNumber, String expiryDate, String cvv) {\r\n | \r\npublic class BAD_LogPaymentInformation {\r\n    private static final Logger logger = LogManager.getLogger(BAD_LogPaymentInformation.class);\r\n\r\n    public boolean validatePaymentDetails(String creditCardNumber, String expiryDate, String cvv) {\r\n",
                        "nextNode": "logger"
                    },
                    {
                        "name": "logger",
                        "type": "Logger",
                        "context": "\r\npublic class BAD_LogPaymentInformation {\r\n    private static final Logger logger = LogManager.getLogger(BAD_LogPaymentInformation.class);\r\n\r\n    public boolean validatePaymentDetails(String creditCardNumber, String expiryDate, String cvv) {\r\n | \r\n    public boolean validatePaymentDetails(String creditCardNumber, String expiryDate, String cvv) {\r\n        logger.info(\"Processing payment with card number: \" + creditCardNumber + \", expiry date: \" + expiryDate + \", and CVV: \" + cvv);\r\n\r\n        return creditCardNumber.length() == 16 && cvv.length() == 3; // Simplified validation\r\n | \r\npublic class BAD_LogPaymentInformation {\r\n    private static final Logger logger = LogManager.getLogger(BAD_LogPaymentInformation.class);\r\n\r\n    public boolean validatePaymentDetails(String creditCardNumber, String expiryDate, String cvv) {\r\n | \r\n        if (!validatePaymentDetails(creditCardNumber, expiryDate, cvv)) {\r\n            logger.error(\"Invalid payment details provided for transaction \" + creditCardNumber + \", expiry date: \" + expiryDate + \", and CVV: \" + cvv);\r\n            return; // Early return if validation fails\r\n        }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "transactionId",
                "isSensitive": "yes",
                "graph": []
            }
        ],
        "strings": [
            {
                "name": ", and CVV:",
                "isSensitive": "no"
            },
            {
                "name": "Processing payment with card number:",
                "isSensitive": "no"
            },
            {
                "name": "Invalid payment details provided for transaction",
                "isSensitive": "no"
            },
            {
                "name": "123",
                "isSensitive": "yes"
            },
            {
                "name": "1234567890123456",
                "isSensitive": "yes"
            },
            {
                "name": "12/23",
                "isSensitive": "yes"
            },
            {
                "name": ", expiry date:",
                "isSensitive": "no"
            }
        ],
        "comments": [
            {
                "name": "Early return if validation fails",
                "isSensitive": "no"
            },
            {
                "name": "Generate a unique transaction ID for tracking",
                "isSensitive": "no"
            },
            {
                "name": "Simulate payment processing logic...",
                "isSensitive": "no"
            },
            {
                "name": "Placeholder for actual payment processing result",
                "isSensitive": "no"
            },
            {
                "name": "Simplified validation",
                "isSensitive": "no"
            }
        ],
        "sinks": [
            {
                "name": "generateTransactionId",
                "isSink": "no"
            },
            {
                "name": "length",
                "isSink": "no"
            },
            {
                "name": "getLogger",
                "isSink": "no"
            },
            {
                "name": "validatePaymentDetails",
                "isSink": "no"
            },
            {
                "name": "randomUUID",
                "isSink": "no"
            },
            {
                "name": "toString",
                "isSink": "no"
            },
            {
                "name": "processPayment",
                "isSink": "no"
            },
            {
                "name": "error",
                "isSink": "yes"
            },
            {
                "name": "info",
                "isSink": "yes"
            }
        ]
    },
    {
        "fileName": "BAD_LogUserCredentials.java",
        "variables": [
            {
                "name": "args",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "password",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "\"pass1234\"",
                        "type": "String",
                        "context": "\r\n    public static void main(String[] args) {\r\n        new BAD_LogUserCredentials().loginUser(\"user1\", \"pass1234\");\r\n    }\r\n}\r\n | \r\n    public static void main(String[] args) {\r\n        new BAD_LogUserCredentials().loginUser(\"user1\", \"pass1234\");\r\n    }\r\n}\r\n | \r\n    public static void main(String[] args) {\r\n        new BAD_LogUserCredentials().loginUser(\"user1\", \"pass1234\");\r\n    }\r\n}\r\n | \r\n    public static void main(String[] args) {\r\n        new BAD_LogUserCredentials().loginUser(\"user1\", \"pass1234\");\r\n    }\r\n}\r\n | \r\n    public static void main(String[] args) {\r\n        new BAD_LogUserCredentials().loginUser(\"user1\", \"pass1234\");\r\n    }\r\n}\r\n | \r\n    public static void main(String[] args) {\r\n        new BAD_LogUserCredentials().loginUser(\"user1\", \"pass1234\");\r\n    }\r\n}\r\n | \r\n    public static void main(String[] args) {\r\n        new BAD_LogUserCredentials().loginUser(\"user1\", \"pass1234\");\r\n    }\r\n}\r\n | \r\n    public static void main(String[] args) {\r\n        new BAD_LogUserCredentials().loginUser(\"user1\", \"pass1234\");\r\n    }\r\n}\r\n",
                        "nextNode": "String password"
                    },
                    {
                        "name": "String password",
                        "type": "String",
                        "context": "    }\r\n\r\n    public void loginUser(String username, String password) {\r\n        if (username == null || password == null || username.isEmpty() || password.isEmpty()) {\r\n            logger.error(\"Login attempt with empty username or password. Username: {}, Password: {}\", username, password);\r\n |     private static final Logger logger = LogManager.getLogger(BAD_LogUserCredentials.class);\r\n\r\n    public boolean authenticateUser(String username, String password) {\r\n        logger.info(\"Checking credentials for username: {} with password: {}\", username, password);\r\n        \r\n |     }\r\n\r\n    public void loginUser(String username, String password) {\r\n        if (username == null || password == null || username.isEmpty() || password.isEmpty()) {\r\n            logger.error(\"Login attempt with empty username or password. Username: {}, Password: {}\", username, password);\r\n |     private static final Logger logger = LogManager.getLogger(BAD_LogUserCredentials.class);\r\n\r\n    public boolean authenticateUser(String username, String password) {\r\n        logger.info(\"Checking credentials for username: {} with password: {}\", username, password);\r\n        \r\n |     }\r\n\r\n    public void loginUser(String username, String password) {\r\n        if (username == null || password == null || username.isEmpty() || password.isEmpty()) {\r\n            logger.error(\"Login attempt with empty username or password. Username: {}, Password: {}\", username, password);\r\n |     private static final Logger logger = LogManager.getLogger(BAD_LogUserCredentials.class);\r\n\r\n    public boolean authenticateUser(String username, String password) {\r\n        logger.info(\"Checking credentials for username: {} with password: {}\", username, password);\r\n        \r\n |     }\r\n\r\n    public void loginUser(String username, String password) {\r\n        if (username == null || password == null || username.isEmpty() || password.isEmpty()) {\r\n            logger.error(\"Login attempt with empty username or password. Username: {}, Password: {}\", username, password);\r\n |     }\r\n\r\n    public void loginUser(String username, String password) {\r\n        if (username == null || password == null || username.isEmpty() || password.isEmpty()) {\r\n            logger.error(\"Login attempt with empty username or password. Username: {}, Password: {}\", username, password);\r\n |     }\r\n\r\n    public void loginUser(String username, String password) {\r\n        if (username == null || password == null || username.isEmpty() || password.isEmpty()) {\r\n            logger.error(\"Login attempt with empty username or password. Username: {}, Password: {}\", username, password);\r\n |     }\r\n\r\n    public void loginUser(String username, String password) {\r\n        if (username == null || password == null || username.isEmpty() || password.isEmpty()) {\r\n            logger.error(\"Login attempt with empty username or password. Username: {}, Password: {}\", username, password);\r\n |     }\r\n\r\n    public void loginUser(String username, String password) {\r\n        if (username == null || password == null || username.isEmpty() || password.isEmpty()) {\r\n            logger.error(\"Login attempt with empty username or password. Username: {}, Password: {}\", username, password);\r\n",
                        "nextNode": "password"
                    },
                    {
                        "name": "password",
                        "type": "String",
                        "context": "\r\n    public void loginUser(String username, String password) {\r\n        if (username == null || password == null || username.isEmpty() || password.isEmpty()) {\r\n            logger.error(\"Login attempt with empty username or password. Username: {}, Password: {}\", username, password);\r\n            return;\r\n | \r\n    public void loginUser(String username, String password) {\r\n        if (username == null || password == null || username.isEmpty() || password.isEmpty()) {\r\n            logger.error(\"Login attempt with empty username or password. Username: {}, Password: {}\", username, password);\r\n            return;\r\n |         }\r\n        \r\n        boolean isAuthenticated = authenticateUser(username, password);\r\n\r\n        if (isAuthenticated) {\r\n | \r\n    public boolean authenticateUser(String username, String password) {\r\n        logger.info(\"Checking credentials for username: {} with password: {}\", username, password);\r\n        \r\n        // Placeholder for database lookup that might involve insecure practices\r\n | \r\n    public void loginUser(String username, String password) {\r\n        if (username == null || password == null || username.isEmpty() || password.isEmpty()) {\r\n            logger.error(\"Login attempt with empty username or password. Username: {}, Password: {}\", username, password);\r\n            return;\r\n | \r\n    public void loginUser(String username, String password) {\r\n        if (username == null || password == null || username.isEmpty() || password.isEmpty()) {\r\n            logger.error(\"Login attempt with empty username or password. Username: {}, Password: {}\", username, password);\r\n            return;\r\n |         }\r\n        \r\n        boolean isAuthenticated = authenticateUser(username, password);\r\n\r\n        if (isAuthenticated) {\r\n | \r\n    public boolean authenticateUser(String username, String password) {\r\n        logger.info(\"Checking credentials for username: {} with password: {}\", username, password);\r\n        \r\n        // Placeholder for database lookup that might involve insecure practices\r\n |         \r\n        // Placeholder for database lookup that might involve insecure practices\r\n        if (\"admin\".equals(username) && \"adminPass\".equals(password)) {\r\n            return true; // Simulated successful authentication\r\n        } else if (\"user1\".equals(username) && \"pass1234\".equals(password)) {\r\n | \r\n    public void loginUser(String username, String password) {\r\n        if (username == null || password == null || username.isEmpty() || password.isEmpty()) {\r\n            logger.error(\"Login attempt with empty username or password. Username: {}, Password: {}\", username, password);\r\n            return;\r\n | \r\n    public void loginUser(String username, String password) {\r\n        if (username == null || password == null || username.isEmpty() || password.isEmpty()) {\r\n            logger.error(\"Login attempt with empty username or password. Username: {}, Password: {}\", username, password);\r\n            return;\r\n |         }\r\n        \r\n        boolean isAuthenticated = authenticateUser(username, password);\r\n\r\n        if (isAuthenticated) {\r\n | \r\n    public boolean authenticateUser(String username, String password) {\r\n        logger.info(\"Checking credentials for username: {} with password: {}\", username, password);\r\n        \r\n        // Placeholder for database lookup that might involve insecure practices\r\n |         if (\"admin\".equals(username) && \"adminPass\".equals(password)) {\r\n            return true; // Simulated successful authentication\r\n        } else if (\"user1\".equals(username) && \"pass1234\".equals(password)) {\r\n            return true; // Another simulated successful authentication\r\n        }\r\n | \r\n    public void loginUser(String username, String password) {\r\n        if (username == null || password == null || username.isEmpty() || password.isEmpty()) {\r\n            logger.error(\"Login attempt with empty username or password. Username: {}, Password: {}\", username, password);\r\n            return;\r\n | \r\n    public void loginUser(String username, String password) {\r\n        if (username == null || password == null || username.isEmpty() || password.isEmpty()) {\r\n            logger.error(\"Login attempt with empty username or password. Username: {}, Password: {}\", username, password);\r\n            return;\r\n |         }\r\n        \r\n        boolean isAuthenticated = authenticateUser(username, password);\r\n\r\n        if (isAuthenticated) {\r\n | \r\n    public void loginUser(String username, String password) {\r\n        if (username == null || password == null || username.isEmpty() || password.isEmpty()) {\r\n            logger.error(\"Login attempt with empty username or password. Username: {}, Password: {}\", username, password);\r\n            return;\r\n | \r\n    public void loginUser(String username, String password) {\r\n        if (username == null || password == null || username.isEmpty() || password.isEmpty()) {\r\n            logger.error(\"Login attempt with empty username or password. Username: {}, Password: {}\", username, password);\r\n            return;\r\n | \r\n    public void loginUser(String username, String password) {\r\n        if (username == null || password == null || username.isEmpty() || password.isEmpty()) {\r\n            logger.error(\"Login attempt with empty username or password. Username: {}, Password: {}\", username, password);\r\n            return;\r\n |     public void loginUser(String username, String password) {\r\n        if (username == null || password == null || username.isEmpty() || password.isEmpty()) {\r\n            logger.error(\"Login attempt with empty username or password. Username: {}, Password: {}\", username, password);\r\n            return;\r\n        }\r\n | \r\n    public void loginUser(String username, String password) {\r\n        if (username == null || password == null || username.isEmpty() || password.isEmpty()) {\r\n            logger.error(\"Login attempt with empty username or password. Username: {}, Password: {}\", username, password);\r\n            return;\r\n | \r\n    public void loginUser(String username, String password) {\r\n        if (username == null || password == null || username.isEmpty() || password.isEmpty()) {\r\n            logger.error(\"Login attempt with empty username or password. Username: {}, Password: {}\", username, password);\r\n            return;\r\n |         }\r\n        \r\n        boolean isAuthenticated = authenticateUser(username, password);\r\n\r\n        if (isAuthenticated) {\r\n |             logger.info(\"User '{}' logged in successfully.\", username);\r\n        } else {\r\n            logger.error(\"Failed login attempt for username: {} with password: {}\", username, password);\r\n        }\r\n    }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "logger",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "LogManager.getLogger(BAD_LogUserCredentials.class)",
                        "type": "Logger",
                        "context": "\r\npublic class BAD_LogUserCredentials {\r\n    private static final Logger logger = LogManager.getLogger(BAD_LogUserCredentials.class);\r\n\r\n    public boolean authenticateUser(String username, String password) {\r\n | \r\npublic class BAD_LogUserCredentials {\r\n    private static final Logger logger = LogManager.getLogger(BAD_LogUserCredentials.class);\r\n\r\n    public boolean authenticateUser(String username, String password) {\r\n | \r\npublic class BAD_LogUserCredentials {\r\n    private static final Logger logger = LogManager.getLogger(BAD_LogUserCredentials.class);\r\n\r\n    public boolean authenticateUser(String username, String password) {\r\n | \r\npublic class BAD_LogUserCredentials {\r\n    private static final Logger logger = LogManager.getLogger(BAD_LogUserCredentials.class);\r\n\r\n    public boolean authenticateUser(String username, String password) {\r\n",
                        "nextNode": "logger"
                    },
                    {
                        "name": "logger",
                        "type": "Logger",
                        "context": "\r\npublic class BAD_LogUserCredentials {\r\n    private static final Logger logger = LogManager.getLogger(BAD_LogUserCredentials.class);\r\n\r\n    public boolean authenticateUser(String username, String password) {\r\n | \r\n    public boolean authenticateUser(String username, String password) {\r\n        logger.info(\"Checking credentials for username: {} with password: {}\", username, password);\r\n        \r\n        // Placeholder for database lookup that might involve insecure practices\r\n | \r\npublic class BAD_LogUserCredentials {\r\n    private static final Logger logger = LogManager.getLogger(BAD_LogUserCredentials.class);\r\n\r\n    public boolean authenticateUser(String username, String password) {\r\n |     public void loginUser(String username, String password) {\r\n        if (username == null || password == null || username.isEmpty() || password.isEmpty()) {\r\n            logger.error(\"Login attempt with empty username or password. Username: {}, Password: {}\", username, password);\r\n            return;\r\n        }\r\n | \r\npublic class BAD_LogUserCredentials {\r\n    private static final Logger logger = LogManager.getLogger(BAD_LogUserCredentials.class);\r\n\r\n    public boolean authenticateUser(String username, String password) {\r\n | \r\n        if (isAuthenticated) {\r\n            logger.info(\"User '{}' logged in successfully.\", username);\r\n        } else {\r\n            logger.error(\"Failed login attempt for username: {} with password: {}\", username, password);\r\n | \r\npublic class BAD_LogUserCredentials {\r\n    private static final Logger logger = LogManager.getLogger(BAD_LogUserCredentials.class);\r\n\r\n    public boolean authenticateUser(String username, String password) {\r\n |             logger.info(\"User '{}' logged in successfully.\", username);\r\n        } else {\r\n            logger.error(\"Failed login attempt for username: {} with password: {}\", username, password);\r\n        }\r\n    }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "isAuthenticated",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "username",
                        "type": "String",
                        "context": "        }\r\n        \r\n        boolean isAuthenticated = authenticateUser(username, password);\r\n\r\n        if (isAuthenticated) {\r\n",
                        "nextNode": "authenticateUser(username, password)"
                    },
                    {
                        "name": "authenticateUser(username, password)",
                        "type": "Boolean",
                        "context": "        }\r\n        \r\n        boolean isAuthenticated = authenticateUser(username, password);\r\n\r\n        if (isAuthenticated) {\r\n",
                        "nextNode": "isAuthenticated"
                    },
                    {
                        "name": "isAuthenticated",
                        "type": "Dataflow from `username` to `isAuthenticated`\nDataflow from `password` to `isAuthenticated`\nDataflow from `username` to `isAuthenticated`\nDataflow from `password` to `isAuthenticated`\nDataflow from `username` to `isAuthenticated`\nDataflow from `password` to `isAuthenticated`\nDataflow from `true` to `isAuthenticated`\nDataflow from `true` to `isAuthenticated`\nDataflow from `false` to `isAuthenticated`\nDataflow from `authenticateUser(...)` to `isAuthenticated`\nDataflow from `\"user1\"` to `isAuthenticated`\nDataflow from `\"pass1234\"` to `isAuthenticated`",
                        "context": "        boolean isAuthenticated = authenticateUser(username, password);\r\n\r\n        if (isAuthenticated) {\r\n            logger.info(\"User '{}' logged in successfully.\", username);\r\n        } else {\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "username",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "\"user1\"",
                        "type": "String",
                        "context": "\r\n    public static void main(String[] args) {\r\n        new BAD_LogUserCredentials().loginUser(\"user1\", \"pass1234\");\r\n    }\r\n}\r\n | \r\n    public static void main(String[] args) {\r\n        new BAD_LogUserCredentials().loginUser(\"user1\", \"pass1234\");\r\n    }\r\n}\r\n | \r\n    public static void main(String[] args) {\r\n        new BAD_LogUserCredentials().loginUser(\"user1\", \"pass1234\");\r\n    }\r\n}\r\n | \r\n    public static void main(String[] args) {\r\n        new BAD_LogUserCredentials().loginUser(\"user1\", \"pass1234\");\r\n    }\r\n}\r\n | \r\n    public static void main(String[] args) {\r\n        new BAD_LogUserCredentials().loginUser(\"user1\", \"pass1234\");\r\n    }\r\n}\r\n | \r\n    public static void main(String[] args) {\r\n        new BAD_LogUserCredentials().loginUser(\"user1\", \"pass1234\");\r\n    }\r\n}\r\n | \r\n    public static void main(String[] args) {\r\n        new BAD_LogUserCredentials().loginUser(\"user1\", \"pass1234\");\r\n    }\r\n}\r\n | \r\n    public static void main(String[] args) {\r\n        new BAD_LogUserCredentials().loginUser(\"user1\", \"pass1234\");\r\n    }\r\n}\r\n | \r\n    public static void main(String[] args) {\r\n        new BAD_LogUserCredentials().loginUser(\"user1\", \"pass1234\");\r\n    }\r\n}\r\n",
                        "nextNode": "String username"
                    },
                    {
                        "name": "String username",
                        "type": "String",
                        "context": "    }\r\n\r\n    public void loginUser(String username, String password) {\r\n        if (username == null || password == null || username.isEmpty() || password.isEmpty()) {\r\n            logger.error(\"Login attempt with empty username or password. Username: {}, Password: {}\", username, password);\r\n |     private static final Logger logger = LogManager.getLogger(BAD_LogUserCredentials.class);\r\n\r\n    public boolean authenticateUser(String username, String password) {\r\n        logger.info(\"Checking credentials for username: {} with password: {}\", username, password);\r\n        \r\n |     }\r\n\r\n    public void loginUser(String username, String password) {\r\n        if (username == null || password == null || username.isEmpty() || password.isEmpty()) {\r\n            logger.error(\"Login attempt with empty username or password. Username: {}, Password: {}\", username, password);\r\n |     private static final Logger logger = LogManager.getLogger(BAD_LogUserCredentials.class);\r\n\r\n    public boolean authenticateUser(String username, String password) {\r\n        logger.info(\"Checking credentials for username: {} with password: {}\", username, password);\r\n        \r\n |     }\r\n\r\n    public void loginUser(String username, String password) {\r\n        if (username == null || password == null || username.isEmpty() || password.isEmpty()) {\r\n            logger.error(\"Login attempt with empty username or password. Username: {}, Password: {}\", username, password);\r\n |     private static final Logger logger = LogManager.getLogger(BAD_LogUserCredentials.class);\r\n\r\n    public boolean authenticateUser(String username, String password) {\r\n        logger.info(\"Checking credentials for username: {} with password: {}\", username, password);\r\n        \r\n |     }\r\n\r\n    public void loginUser(String username, String password) {\r\n        if (username == null || password == null || username.isEmpty() || password.isEmpty()) {\r\n            logger.error(\"Login attempt with empty username or password. Username: {}, Password: {}\", username, password);\r\n |     }\r\n\r\n    public void loginUser(String username, String password) {\r\n        if (username == null || password == null || username.isEmpty() || password.isEmpty()) {\r\n            logger.error(\"Login attempt with empty username or password. Username: {}, Password: {}\", username, password);\r\n |     }\r\n\r\n    public void loginUser(String username, String password) {\r\n        if (username == null || password == null || username.isEmpty() || password.isEmpty()) {\r\n            logger.error(\"Login attempt with empty username or password. Username: {}, Password: {}\", username, password);\r\n |     }\r\n\r\n    public void loginUser(String username, String password) {\r\n        if (username == null || password == null || username.isEmpty() || password.isEmpty()) {\r\n            logger.error(\"Login attempt with empty username or password. Username: {}, Password: {}\", username, password);\r\n |     }\r\n\r\n    public void loginUser(String username, String password) {\r\n        if (username == null || password == null || username.isEmpty() || password.isEmpty()) {\r\n            logger.error(\"Login attempt with empty username or password. Username: {}, Password: {}\", username, password);\r\n |     }\r\n\r\n    public void loginUser(String username, String password) {\r\n        if (username == null || password == null || username.isEmpty() || password.isEmpty()) {\r\n            logger.error(\"Login attempt with empty username or password. Username: {}, Password: {}\", username, password);\r\n",
                        "nextNode": "username"
                    },
                    {
                        "name": "username",
                        "type": "String",
                        "context": "\r\n    public void loginUser(String username, String password) {\r\n        if (username == null || password == null || username.isEmpty() || password.isEmpty()) {\r\n            logger.error(\"Login attempt with empty username or password. Username: {}, Password: {}\", username, password);\r\n            return;\r\n | \r\n    public void loginUser(String username, String password) {\r\n        if (username == null || password == null || username.isEmpty() || password.isEmpty()) {\r\n            logger.error(\"Login attempt with empty username or password. Username: {}, Password: {}\", username, password);\r\n            return;\r\n |         }\r\n        \r\n        boolean isAuthenticated = authenticateUser(username, password);\r\n\r\n        if (isAuthenticated) {\r\n | \r\n    public boolean authenticateUser(String username, String password) {\r\n        logger.info(\"Checking credentials for username: {} with password: {}\", username, password);\r\n        \r\n        // Placeholder for database lookup that might involve insecure practices\r\n | \r\n    public void loginUser(String username, String password) {\r\n        if (username == null || password == null || username.isEmpty() || password.isEmpty()) {\r\n            logger.error(\"Login attempt with empty username or password. Username: {}, Password: {}\", username, password);\r\n            return;\r\n | \r\n    public void loginUser(String username, String password) {\r\n        if (username == null || password == null || username.isEmpty() || password.isEmpty()) {\r\n            logger.error(\"Login attempt with empty username or password. Username: {}, Password: {}\", username, password);\r\n            return;\r\n |         }\r\n        \r\n        boolean isAuthenticated = authenticateUser(username, password);\r\n\r\n        if (isAuthenticated) {\r\n | \r\n    public boolean authenticateUser(String username, String password) {\r\n        logger.info(\"Checking credentials for username: {} with password: {}\", username, password);\r\n        \r\n        // Placeholder for database lookup that might involve insecure practices\r\n |         \r\n        // Placeholder for database lookup that might involve insecure practices\r\n        if (\"admin\".equals(username) && \"adminPass\".equals(password)) {\r\n            return true; // Simulated successful authentication\r\n        } else if (\"user1\".equals(username) && \"pass1234\".equals(password)) {\r\n | \r\n    public void loginUser(String username, String password) {\r\n        if (username == null || password == null || username.isEmpty() || password.isEmpty()) {\r\n            logger.error(\"Login attempt with empty username or password. Username: {}, Password: {}\", username, password);\r\n            return;\r\n | \r\n    public void loginUser(String username, String password) {\r\n        if (username == null || password == null || username.isEmpty() || password.isEmpty()) {\r\n            logger.error(\"Login attempt with empty username or password. Username: {}, Password: {}\", username, password);\r\n            return;\r\n |         }\r\n        \r\n        boolean isAuthenticated = authenticateUser(username, password);\r\n\r\n        if (isAuthenticated) {\r\n | \r\n    public boolean authenticateUser(String username, String password) {\r\n        logger.info(\"Checking credentials for username: {} with password: {}\", username, password);\r\n        \r\n        // Placeholder for database lookup that might involve insecure practices\r\n |         \r\n        // Placeholder for database lookup that might involve insecure practices\r\n        if (\"admin\".equals(username) && \"adminPass\".equals(password)) {\r\n            return true; // Simulated successful authentication\r\n        } else if (\"user1\".equals(username) && \"pass1234\".equals(password)) {\r\n |         if (\"admin\".equals(username) && \"adminPass\".equals(password)) {\r\n            return true; // Simulated successful authentication\r\n        } else if (\"user1\".equals(username) && \"pass1234\".equals(password)) {\r\n            return true; // Another simulated successful authentication\r\n        }\r\n | \r\n    public void loginUser(String username, String password) {\r\n        if (username == null || password == null || username.isEmpty() || password.isEmpty()) {\r\n            logger.error(\"Login attempt with empty username or password. Username: {}, Password: {}\", username, password);\r\n            return;\r\n | \r\n    public void loginUser(String username, String password) {\r\n        if (username == null || password == null || username.isEmpty() || password.isEmpty()) {\r\n            logger.error(\"Login attempt with empty username or password. Username: {}, Password: {}\", username, password);\r\n            return;\r\n |         }\r\n        \r\n        boolean isAuthenticated = authenticateUser(username, password);\r\n\r\n        if (isAuthenticated) {\r\n | \r\n    public void loginUser(String username, String password) {\r\n        if (username == null || password == null || username.isEmpty() || password.isEmpty()) {\r\n            logger.error(\"Login attempt with empty username or password. Username: {}, Password: {}\", username, password);\r\n            return;\r\n | \r\n    public void loginUser(String username, String password) {\r\n        if (username == null || password == null || username.isEmpty() || password.isEmpty()) {\r\n            logger.error(\"Login attempt with empty username or password. Username: {}, Password: {}\", username, password);\r\n            return;\r\n | \r\n    public void loginUser(String username, String password) {\r\n        if (username == null || password == null || username.isEmpty() || password.isEmpty()) {\r\n            logger.error(\"Login attempt with empty username or password. Username: {}, Password: {}\", username, password);\r\n            return;\r\n | \r\n    public void loginUser(String username, String password) {\r\n        if (username == null || password == null || username.isEmpty() || password.isEmpty()) {\r\n            logger.error(\"Login attempt with empty username or password. Username: {}, Password: {}\", username, password);\r\n            return;\r\n |     public void loginUser(String username, String password) {\r\n        if (username == null || password == null || username.isEmpty() || password.isEmpty()) {\r\n            logger.error(\"Login attempt with empty username or password. Username: {}, Password: {}\", username, password);\r\n            return;\r\n        }\r\n | \r\n    public void loginUser(String username, String password) {\r\n        if (username == null || password == null || username.isEmpty() || password.isEmpty()) {\r\n            logger.error(\"Login attempt with empty username or password. Username: {}, Password: {}\", username, password);\r\n            return;\r\n | \r\n    public void loginUser(String username, String password) {\r\n        if (username == null || password == null || username.isEmpty() || password.isEmpty()) {\r\n            logger.error(\"Login attempt with empty username or password. Username: {}, Password: {}\", username, password);\r\n            return;\r\n |         }\r\n        \r\n        boolean isAuthenticated = authenticateUser(username, password);\r\n\r\n        if (isAuthenticated) {\r\n | \r\n        if (isAuthenticated) {\r\n            logger.info(\"User '{}' logged in successfully.\", username);\r\n        } else {\r\n            logger.error(\"Failed login attempt for username: {} with password: {}\", username, password);\r\n | \r\n    public void loginUser(String username, String password) {\r\n        if (username == null || password == null || username.isEmpty() || password.isEmpty()) {\r\n            logger.error(\"Login attempt with empty username or password. Username: {}, Password: {}\", username, password);\r\n            return;\r\n | \r\n    public void loginUser(String username, String password) {\r\n        if (username == null || password == null || username.isEmpty() || password.isEmpty()) {\r\n            logger.error(\"Login attempt with empty username or password. Username: {}, Password: {}\", username, password);\r\n            return;\r\n |         }\r\n        \r\n        boolean isAuthenticated = authenticateUser(username, password);\r\n\r\n        if (isAuthenticated) {\r\n |             logger.info(\"User '{}' logged in successfully.\", username);\r\n        } else {\r\n            logger.error(\"Failed login attempt for username: {} with password: {}\", username, password);\r\n        }\r\n    }\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "user1",
                "isSensitive": "yes"
            },
            {
                "name": "Login attempt with empty username or password. Username: {}, Password: {}",
                "isSensitive": "no"
            },
            {
                "name": "Failed login attempt for username: {} with password: {}",
                "isSensitive": "no"
            },
            {
                "name": "Checking credentials for username: {} with password: {}",
                "isSensitive": "no"
            },
            {
                "name": "admin",
                "isSensitive": "yes"
            },
            {
                "name": "adminPass",
                "isSensitive": "yes"
            },
            {
                "name": "pass1234",
                "isSensitive": "yes"
            },
            {
                "name": "User {} logged in successfully.",
                "isSensitive": "no"
            }
        ],
        "comments": [
            {
                "name": "Another simulated successful authentication",
                "isSensitive": "no"
            },
            {
                "name": "Simulated successful authentication",
                "isSensitive": "no"
            },
            {
                "name": "Default to authentication failure",
                "isSensitive": "no"
            },
            {
                "name": "Placeholder for database lookup that might involve insecure practices",
                "isSensitive": "no"
            }
        ],
        "sinks": [
            {
                "name": "loginUser",
                "isSink": "no"
            },
            {
                "name": "authenticateUser",
                "isSink": "no"
            },
            {
                "name": "equals",
                "isSink": "no"
            },
            {
                "name": "isEmpty",
                "isSink": "no"
            },
            {
                "name": "getLogger",
                "isSink": "no"
            },
            {
                "name": "error",
                "isSink": "yes"
            },
            {
                "name": "info",
                "isSink": "yes"
            }
        ]
    },
    {
        "fileName": "BAD_TokenManager.java",
        "variables": [
            {
                "name": "newToken",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "\"newToken12345\"",
                        "type": "String",
                        "context": "    public void refreshToken(String userId, String oldToken) {\r\n        // Simulate token refresh process\r\n        String newToken = \"newToken12345\"; // Simulated new token\r\n        logger.debug(\"Refreshing token for user: {}, old token: {}, new token: {}\", userId, oldToken, newToken);\r\n    }\r\n",
                        "nextNode": "newToken"
                    },
                    {
                        "name": "newToken",
                        "type": "Dataflow from `\"newToken12345\"` to `newToken`",
                        "context": "        // Simulate token refresh process\r\n        String newToken = \"newToken12345\"; // Simulated new token\r\n        logger.debug(\"Refreshing token for user: {}, old token: {}, new token: {}\", userId, oldToken, newToken);\r\n    }\r\n}\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "logger",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "LoggerFactory.getLogger(BAD_TokenManager.class)",
                        "type": "Logger",
                        "context": "\r\npublic class BAD_TokenManager {\r\n    private static final Logger logger = LoggerFactory.getLogger(BAD_TokenManager.class);\r\n\r\n    public void refreshToken(String userId, String oldToken) {\r\n",
                        "nextNode": "logger"
                    },
                    {
                        "name": "logger",
                        "type": "Logger",
                        "context": "\r\npublic class BAD_TokenManager {\r\n    private static final Logger logger = LoggerFactory.getLogger(BAD_TokenManager.class);\r\n\r\n    public void refreshToken(String userId, String oldToken) {\r\n |         // Simulate token refresh process\r\n        String newToken = \"newToken12345\"; // Simulated new token\r\n        logger.debug(\"Refreshing token for user: {}, old token: {}, new token: {}\", userId, oldToken, newToken);\r\n    }\r\n}\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "oldToken",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "userId",
                "isSensitive": "yes",
                "graph": []
            }
        ],
        "strings": [
            {
                "name": "newToken12345",
                "isSensitive": "yes"
            },
            {
                "name": "Refreshing token for user: {}, old token: {}, new token: {}",
                "isSensitive": "no"
            }
        ],
        "comments": [
            {
                "name": "Simulated new token",
                "isSensitive": "no"
            },
            {
                "name": "Simulate token refresh process",
                "isSensitive": "no"
            }
        ],
        "sinks": [
            {
                "name": "debug",
                "isSink": "yes"
            },
            {
                "name": "getLogger",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "BAD_UserAuthenticationLogger.java",
        "variables": [
            {
                "name": "password",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "logger",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "LoggerFactory.getLogger(BAD_UserAuthenticationLogger.class)",
                        "type": "Logger",
                        "context": "\r\npublic class BAD_UserAuthenticationLogger {\r\n    private static final Logger logger = LoggerFactory.getLogger(BAD_UserAuthenticationLogger.class);\r\n\r\n    public void authenticateUser(String username, String password) {\r\n",
                        "nextNode": "logger"
                    },
                    {
                        "name": "logger",
                        "type": "Logger",
                        "context": "\r\npublic class BAD_UserAuthenticationLogger {\r\n    private static final Logger logger = LoggerFactory.getLogger(BAD_UserAuthenticationLogger.class);\r\n\r\n    public void authenticateUser(String username, String password) {\r\n | \r\n    public void authenticateUser(String username, String password) {\r\n        logger.debug(\"Attempting to authenticate user: \" + username + \" with password: \" + password);\r\n    }\r\n}\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "username",
                "isSensitive": "yes",
                "graph": []
            }
        ],
        "strings": [
            {
                "name": "Attempting to authenticate user:",
                "isSensitive": "no"
            },
            {
                "name": "with password:",
                "isSensitive": "no"
            }
        ],
        "comments": [],
        "sinks": [
            {
                "name": "debug",
                "isSink": "yes"
            },
            {
                "name": "getLogger",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "BAD_UserDataManager.java",
        "variables": [
            {
                "name": "e",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "logger",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "Logger.getLogger(\"UserDataManager\")",
                        "type": "Logger",
                        "context": "\r\npublic class BAD_UserDataManager {\r\n    private static final Logger logger = Logger.getLogger(\"UserDataManager\");\r\n\r\n    public void storeUserData(String userId, String personalData) {\r\n | \r\npublic class BAD_UserDataManager {\r\n    private static final Logger logger = Logger.getLogger(\"UserDataManager\");\r\n\r\n    public void storeUserData(String userId, String personalData) {\r\n",
                        "nextNode": "logger"
                    },
                    {
                        "name": "logger",
                        "type": "Logger",
                        "context": "\r\npublic class BAD_UserDataManager {\r\n    private static final Logger logger = Logger.getLogger(\"UserDataManager\");\r\n\r\n    public void storeUserData(String userId, String personalData) {\r\n |         try {\r\n            // Simulate storing user data\r\n            logger.fine(\"Storing data for user: \" + userId + \" with data: \" + personalData); \r\n        } catch (Exception e) {\r\n            logger.severe(\"Failed to store user data for user: \" + userId + \", error: \" + e.getMessage());\r\n | \r\npublic class BAD_UserDataManager {\r\n    private static final Logger logger = Logger.getLogger(\"UserDataManager\");\r\n\r\n    public void storeUserData(String userId, String personalData) {\r\n |             logger.fine(\"Storing data for user: \" + userId + \" with data: \" + personalData); \r\n        } catch (Exception e) {\r\n            logger.severe(\"Failed to store user data for user: \" + userId + \", error: \" + e.getMessage());\r\n        }\r\n    }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "personalData",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "userId",
                "isSensitive": "yes",
                "graph": []
            }
        ],
        "strings": [
            {
                "name": "Failed to store user data for user:",
                "isSensitive": "no"
            },
            {
                "name": ", error:",
                "isSensitive": "no"
            },
            {
                "name": "Storing data for user:",
                "isSensitive": "no"
            },
            {
                "name": "with data:",
                "isSensitive": "no"
            },
            {
                "name": "UserDataManager",
                "isSensitive": "no"
            }
        ],
        "comments": [
            {
                "name": "Simulate storing user data",
                "isSensitive": "no"
            }
        ],
        "sinks": [
            {
                "name": "fine",
                "isSink": "yes"
            },
            {
                "name": "severe",
                "isSink": "yes"
            },
            {
                "name": "getLogger",
                "isSink": "no"
            },
            {
                "name": "getMessage",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "BAD_CustomLogging.java",
        "variables": [
            {
                "name": "apiKey",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "methodName",
                "isSensitive": "no",
                "graph": []
            }
        ],
        "strings": [
            {
                "name": ", Method:",
                "isSensitive": "no"
            },
            {
                "name": "API usage: Key:",
                "isSensitive": "no"
            }
        ],
        "comments": [],
        "sinks": [
            {
                "name": "logInfo",
                "isSink": "yes"
            }
        ]
    },
    {
        "fileName": "BAD_LoginServiceCustom.java",
        "variables": [
            {
                "name": "password",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "username",
                "isSensitive": "yes",
                "graph": []
            }
        ],
        "strings": [
            {
                "name": "User logged in successfully:",
                "isSensitive": "no"
            },
            {
                "name": "User login failed for username:",
                "isSensitive": "no"
            },
            {
                "name": "with password",
                "isSensitive": "no"
            },
            {
                "name": "admin",
                "isSensitive": "yes"
            },
            {
                "name": "password123",
                "isSensitive": "yes"
            }
        ],
        "comments": [],
        "sinks": [
            {
                "name": "recordAction",
                "isSink": "yes"
            },
            {
                "name": "equals",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "BAD_RegistrationService.java",
        "variables": [
            {
                "name": "name",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "email",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "ssn",
                "isSensitive": "yes",
                "graph": []
            }
        ],
        "strings": [
            {
                "name": "New user registered: Name -",
                "isSensitive": "no"
            },
            {
                "name": ", SSN -",
                "isSensitive": "no"
            },
            {
                "name": ", Email -",
                "isSensitive": "no"
            }
        ],
        "comments": [],
        "sinks": [
            {
                "name": "logEvent",
                "isSink": "yes"
            }
        ]
    },
    {
        "fileName": "BAD_SecurityHandler.java",
        "variables": [
            {
                "name": "decryptionKey",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "eventType",
                "isSensitive": "no",
                "graph": []
            }
        ],
        "strings": [
            {
                "name": "Security event:",
                "isSensitive": "no"
            },
            {
                "name": "using Key:",
                "isSensitive": "no"
            }
        ],
        "comments": [],
        "sinks": [
            {
                "name": "logSignal",
                "isSink": "yes"
            }
        ]
    },
    {
        "fileName": "BAD_SessionManager.java",
        "variables": [
            {
                "name": "userId",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "token",
                "isSensitive": "yes",
                "graph": []
            }
        ],
        "strings": [
            {
                "name": "Session started for UserID:",
                "isSensitive": "no"
            },
            {
                "name": "with Token:",
                "isSensitive": "no"
            },
            {
                "name": "Session ended for UserID:",
                "isSensitive": "no"
            }
        ],
        "comments": [
            {
                "name": "Session logic",
                "isSensitive": "no"
            }
        ],
        "sinks": [
            {
                "name": "exitMethod",
                "isSink": "yes"
            },
            {
                "name": "enterMethod",
                "isSink": "yes"
            }
        ]
    },
    {
        "fileName": "GOOD_APIAccessLogger.java",
        "variables": [
            {
                "name": "apiKey",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "logger",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "Logger.getLogger(\"APIAccessLogger\")",
                        "type": "Logger",
                        "context": "\r\npublic class GOOD_APIAccessLogger {\r\n    private static final Logger logger = Logger.getLogger(\"APIAccessLogger\");\r\n\r\n    public void logAPIUsage(String apiKey, String methodName) {\r\n",
                        "nextNode": "logger"
                    },
                    {
                        "name": "logger",
                        "type": "Logger",
                        "context": "\r\npublic class GOOD_APIAccessLogger {\r\n    private static final Logger logger = Logger.getLogger(\"APIAccessLogger\");\r\n\r\n    public void logAPIUsage(String apiKey, String methodName) {\r\n |     public void logAPIUsage(String apiKey, String methodName) {\r\n        // Log API usage\r\n        logger.warning(\"Error with API key\"); \r\n    }\r\n}\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "methodName",
                "isSensitive": "no",
                "graph": []
            }
        ],
        "strings": [
            {
                "name": "APIAccessLogger",
                "isSensitive": "no"
            },
            {
                "name": "Error with API key",
                "isSensitive": "no"
            }
        ],
        "comments": [
            {
                "name": "Log API usage",
                "isSensitive": "no"
            }
        ],
        "sinks": [
            {
                "name": "getLogger",
                "isSink": "no"
            },
            {
                "name": "warning",
                "isSink": "yes"
            }
        ]
    },
    {
        "fileName": "GOOD_ErrorHandler.java",
        "variables": [
            {
                "name": "logger",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "LogManager.getLogger(GOOD_ErrorHandler.class)",
                        "type": "Logger",
                        "context": "\r\npublic class GOOD_ErrorHandler {\r\n    private static final Logger logger = LogManager.getLogger(GOOD_ErrorHandler.class);\r\n\r\n    public void logError(String errorMessage, String userSession) {\r\n",
                        "nextNode": "logger"
                    },
                    {
                        "name": "logger",
                        "type": "Logger",
                        "context": "\r\npublic class GOOD_ErrorHandler {\r\n    private static final Logger logger = LogManager.getLogger(GOOD_ErrorHandler.class);\r\n\r\n    public void logError(String errorMessage, String userSession) {\r\n | \r\n    public void logError(String errorMessage, String userSession) {\r\n        logger.error(\"An error occurred.\");\r\n    }\r\n}\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "errorMessage",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "userSession",
                "isSensitive": "yes",
                "graph": []
            }
        ],
        "strings": [
            {
                "name": "An error occurred.",
                "isSensitive": "no"
            }
        ],
        "comments": [],
        "sinks": [
            {
                "name": "getLogger",
                "isSink": "no"
            },
            {
                "name": "error",
                "isSink": "yes"
            }
        ]
    },
    {
        "fileName": "GOOD_ErrorReportHandler.java",
        "variables": [
            {
                "name": "logger",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "LoggerFactory.getLogger(GOOD_ErrorReportHandler.class)",
                        "type": "Logger",
                        "context": "\r\npublic class GOOD_ErrorReportHandler {\r\n    private static final Logger logger = (Logger) LoggerFactory.getLogger(GOOD_ErrorReportHandler.class);\r\n\r\n    public void handleError(String errorCode, String errorMessage, String debugInfo) {\r\n",
                        "nextNode": "(Logger) LoggerFactory.getLogger(GOOD_ErrorReportHandler.class)"
                    },
                    {
                        "name": "(Logger) LoggerFactory.getLogger(GOOD_ErrorReportHandler.class)",
                        "type": "Logger",
                        "context": "\r\npublic class GOOD_ErrorReportHandler {\r\n    private static final Logger logger = (Logger) LoggerFactory.getLogger(GOOD_ErrorReportHandler.class);\r\n\r\n    public void handleError(String errorCode, String errorMessage, String debugInfo) {\r\n",
                        "nextNode": "logger"
                    },
                    {
                        "name": "logger",
                        "type": "Logger",
                        "context": "\r\npublic class GOOD_ErrorReportHandler {\r\n    private static final Logger logger = (Logger) LoggerFactory.getLogger(GOOD_ErrorReportHandler.class);\r\n\r\n    public void handleError(String errorCode, String errorMessage, String debugInfo) {\r\n | \r\n    public void handleError(String errorCode, String errorMessage, String debugInfo) {\r\n        logger.error(\"Error occured\"); \r\n    }\r\n}\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "errorMessage",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "errorCode",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "debugInfo",
                "isSensitive": "yes",
                "graph": []
            }
        ],
        "strings": [
            {
                "name": "Error occured",
                "isSensitive": "no"
            }
        ],
        "comments": [],
        "sinks": [
            {
                "name": "getLogger",
                "isSink": "no"
            },
            {
                "name": "error",
                "isSink": "yes"
            }
        ]
    },
    {
        "fileName": "GOOD_FilterSensitiveInfoFromLogs.java",
        "variables": [
            {
                "name": "args",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "password",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "logger",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "LogManager.getLogger(GOOD_FilterSensitiveInfoFromLogs.class)",
                        "type": "Logger",
                        "context": "\r\npublic class GOOD_FilterSensitiveInfoFromLogs {\r\n    private static final Logger logger = LogManager.getLogger(GOOD_FilterSensitiveInfoFromLogs.class);\r\n\r\n    private boolean isUsernameValid(String username) {\r\n | \r\npublic class GOOD_FilterSensitiveInfoFromLogs {\r\n    private static final Logger logger = LogManager.getLogger(GOOD_FilterSensitiveInfoFromLogs.class);\r\n\r\n    private boolean isUsernameValid(String username) {\r\n | \r\npublic class GOOD_FilterSensitiveInfoFromLogs {\r\n    private static final Logger logger = LogManager.getLogger(GOOD_FilterSensitiveInfoFromLogs.class);\r\n\r\n    private boolean isUsernameValid(String username) {\r\n",
                        "nextNode": "logger"
                    },
                    {
                        "name": "logger",
                        "type": "Logger",
                        "context": "\r\npublic class GOOD_FilterSensitiveInfoFromLogs {\r\n    private static final Logger logger = LogManager.getLogger(GOOD_FilterSensitiveInfoFromLogs.class);\r\n\r\n    private boolean isUsernameValid(String username) {\r\n |     public void loginUser(String username, String password) {\r\n        if (!isUsernameValid(username)) {\r\n            logger.warn(\"Login attempt with invalid username format.\");\r\n            return;\r\n        }\r\n | \r\npublic class GOOD_FilterSensitiveInfoFromLogs {\r\n    private static final Logger logger = LogManager.getLogger(GOOD_FilterSensitiveInfoFromLogs.class);\r\n\r\n    private boolean isUsernameValid(String username) {\r\n | \r\n        if (!doesUserExist(username)) {\r\n            logger.info(\"Login attempt for non-existing user.\");\r\n            return;\r\n        }\r\n | \r\npublic class GOOD_FilterSensitiveInfoFromLogs {\r\n    private static final Logger logger = LogManager.getLogger(GOOD_FilterSensitiveInfoFromLogs.class);\r\n\r\n    private boolean isUsernameValid(String username) {\r\n |             logger.info(\"User logged in successfully.\");\r\n        } else {\r\n            logger.warn(\"Failed login attempt due to incorrect credentials.\");\r\n        }\r\n    }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "isAuthenticated",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "false",
                        "type": "Boolean",
                        "context": "        }\r\n\r\n        boolean isAuthenticated = false; // Placeholder for the authentication result\r\n\r\n\r\n",
                        "nextNode": "isAuthenticated"
                    },
                    {
                        "name": "isAuthenticated",
                        "type": "Dataflow from `false` to `isAuthenticated`",
                        "context": "\r\n\r\n        if (isAuthenticated) {\r\n            logger.info(\"User logged in successfully.\");\r\n        } else {\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "username",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "\"user1\"",
                        "type": "String",
                        "context": "\r\n    public static void main(String[] args) {\r\n        new GOOD_FilterSensitiveInfoFromLogs().loginUser(\"user1\", \"securePassword\");\r\n    }\r\n}\r\n | \r\n    public static void main(String[] args) {\r\n        new GOOD_FilterSensitiveInfoFromLogs().loginUser(\"user1\", \"securePassword\");\r\n    }\r\n}\r\n | \r\n    public static void main(String[] args) {\r\n        new GOOD_FilterSensitiveInfoFromLogs().loginUser(\"user1\", \"securePassword\");\r\n    }\r\n}\r\n | \r\n    public static void main(String[] args) {\r\n        new GOOD_FilterSensitiveInfoFromLogs().loginUser(\"user1\", \"securePassword\");\r\n    }\r\n}\r\n",
                        "nextNode": "String username"
                    },
                    {
                        "name": "String username",
                        "type": "String",
                        "context": "    }\r\n\r\n    public void loginUser(String username, String password) {\r\n        if (!isUsernameValid(username)) {\r\n            logger.warn(\"Login attempt with invalid username format.\");\r\n |     private static final Logger logger = LogManager.getLogger(GOOD_FilterSensitiveInfoFromLogs.class);\r\n\r\n    private boolean isUsernameValid(String username) {\r\n        // Placeholder for actual validation logic\r\n        return username != null && !username.trim().isEmpty();\r\n |     }\r\n\r\n    public void loginUser(String username, String password) {\r\n        if (!isUsernameValid(username)) {\r\n            logger.warn(\"Login attempt with invalid username format.\");\r\n |     private static final Logger logger = LogManager.getLogger(GOOD_FilterSensitiveInfoFromLogs.class);\r\n\r\n    private boolean isUsernameValid(String username) {\r\n        // Placeholder for actual validation logic\r\n        return username != null && !username.trim().isEmpty();\r\n |     }\r\n\r\n    public void loginUser(String username, String password) {\r\n        if (!isUsernameValid(username)) {\r\n            logger.warn(\"Login attempt with invalid username format.\");\r\n |     }\r\n\r\n    public void loginUser(String username, String password) {\r\n        if (!isUsernameValid(username)) {\r\n            logger.warn(\"Login attempt with invalid username format.\");\r\n",
                        "nextNode": "username"
                    },
                    {
                        "name": "username",
                        "type": "String",
                        "context": "\r\n    public void loginUser(String username, String password) {\r\n        if (!isUsernameValid(username)) {\r\n            logger.warn(\"Login attempt with invalid username format.\");\r\n            return;\r\n |     private boolean isUsernameValid(String username) {\r\n        // Placeholder for actual validation logic\r\n        return username != null && !username.trim().isEmpty();\r\n    }\r\n\r\n | \r\n    public void loginUser(String username, String password) {\r\n        if (!isUsernameValid(username)) {\r\n            logger.warn(\"Login attempt with invalid username format.\");\r\n            return;\r\n |     private boolean isUsernameValid(String username) {\r\n        // Placeholder for actual validation logic\r\n        return username != null && !username.trim().isEmpty();\r\n    }\r\n\r\n |     private boolean isUsernameValid(String username) {\r\n        // Placeholder for actual validation logic\r\n        return username != null && !username.trim().isEmpty();\r\n    }\r\n\r\n | \r\n    public void loginUser(String username, String password) {\r\n        if (!isUsernameValid(username)) {\r\n            logger.warn(\"Login attempt with invalid username format.\");\r\n            return;\r\n | \r\n    public void loginUser(String username, String password) {\r\n        if (!isUsernameValid(username)) {\r\n            logger.warn(\"Login attempt with invalid username format.\");\r\n            return;\r\n |         }\r\n\r\n        if (!doesUserExist(username)) {\r\n            logger.info(\"Login attempt for non-existing user.\");\r\n            return;\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "user1",
                "isSensitive": "yes"
            },
            {
                "name": "Login attempt for non-existing user.",
                "isSensitive": "no"
            },
            {
                "name": "User logged in successfully.",
                "isSensitive": "no"
            },
            {
                "name": "securePassword",
                "isSensitive": "yes"
            },
            {
                "name": "Login attempt with invalid username format.",
                "isSensitive": "no"
            },
            {
                "name": "Failed login attempt due to incorrect credentials.",
                "isSensitive": "no"
            }
        ],
        "comments": [
            {
                "name": "Placeholder for user existence check. Always returns true for demonstration.",
                "isSensitive": "no"
            },
            {
                "name": "Assume user exists for this example",
                "isSensitive": "no"
            },
            {
                "name": "Placeholder for actual validation logic",
                "isSensitive": "no"
            },
            {
                "name": "Placeholder for the authentication result",
                "isSensitive": "no"
            }
        ],
        "sinks": [
            {
                "name": "warn",
                "isSink": "yes"
            },
            {
                "name": "loginUser",
                "isSink": "no"
            },
            {
                "name": "trim",
                "isSink": "no"
            },
            {
                "name": "isEmpty",
                "isSink": "no"
            },
            {
                "name": "getLogger",
                "isSink": "no"
            },
            {
                "name": "doesUserExist",
                "isSink": "no"
            },
            {
                "name": "isUsernameValid",
                "isSink": "no"
            },
            {
                "name": "info",
                "isSink": "yes"
            }
        ]
    },
    {
        "fileName": "GOOD_FinancialTransactionLogger.java",
        "variables": [
            {
                "name": "amount",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "logger",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "LogFactory.getLog(GOOD_FinancialTransactionLogger.class)",
                        "type": "Log",
                        "context": "\r\npublic class GOOD_FinancialTransactionLogger {\r\n    private static final Log logger = LogFactory.getLog(GOOD_FinancialTransactionLogger.class);\r\n\r\n    public void logTransaction(String transactionId, double amount, String bankAccountNumber) {\r\n",
                        "nextNode": "logger"
                    },
                    {
                        "name": "logger",
                        "type": "Log",
                        "context": "\r\npublic class GOOD_FinancialTransactionLogger {\r\n    private static final Log logger = LogFactory.getLog(GOOD_FinancialTransactionLogger.class);\r\n\r\n    public void logTransaction(String transactionId, double amount, String bankAccountNumber) {\r\n |     public void logTransaction(String transactionId, double amount, String bankAccountNumber) {\r\n        // Log transaction\r\n        logger.info(\"Transaction logged.\"); \r\n    }\r\n}\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "bankAccountNumber",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "transactionId",
                "isSensitive": "yes",
                "graph": []
            }
        ],
        "strings": [
            {
                "name": "Transaction logged.",
                "isSensitive": "no"
            }
        ],
        "comments": [
            {
                "name": "Log transaction",
                "isSensitive": "no"
            }
        ],
        "sinks": [
            {
                "name": "getLog",
                "isSink": "no"
            },
            {
                "name": "info",
                "isSink": "yes"
            }
        ]
    },
    {
        "fileName": "GOOD_LogDbConnectionDetails.java",
        "variables": [
            {
                "name": "args",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "password",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "\"admin123\"",
                        "type": "String",
                        "context": "\r\n    public static void main(String[] args) {\r\n        new GOOD_LogDbConnectionDetails().connectToDatabase(\"jdbc:mysql://localhost:3306/myapp\", \"admin\", \"admin123\");\r\n    }\r\n}\r\n",
                        "nextNode": "String password"
                    },
                    {
                        "name": "String password",
                        "type": "String",
                        "context": "    private static final Logger logger = LogManager.getLogger(GOOD_LogDbConnectionDetails.class);\r\n\r\n    public Connection connectToDatabase(String dbUrl, String user, String password) {\r\n        try {\r\n            logger.info(\"Connecting to database.\");\r\n",
                        "nextNode": "password"
                    },
                    {
                        "name": "password",
                        "type": "Dataflow from `\"admin123\"` to `password`",
                        "context": "        try {\r\n            logger.info(\"Connecting to database.\");\r\n            return DriverManager.getConnection(dbUrl, user, password);\r\n        } catch (SQLException e) {\r\n            logger.error(\"Database connection failed.\");\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "e",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "logger",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "LogManager.getLogger(GOOD_LogDbConnectionDetails.class)",
                        "type": "Logger",
                        "context": "\r\npublic class GOOD_LogDbConnectionDetails {\r\n    private static final Logger logger = LogManager.getLogger(GOOD_LogDbConnectionDetails.class);\r\n\r\n    public Connection connectToDatabase(String dbUrl, String user, String password) {\r\n | \r\npublic class GOOD_LogDbConnectionDetails {\r\n    private static final Logger logger = LogManager.getLogger(GOOD_LogDbConnectionDetails.class);\r\n\r\n    public Connection connectToDatabase(String dbUrl, String user, String password) {\r\n",
                        "nextNode": "logger"
                    },
                    {
                        "name": "logger",
                        "type": "Logger",
                        "context": "\r\npublic class GOOD_LogDbConnectionDetails {\r\n    private static final Logger logger = LogManager.getLogger(GOOD_LogDbConnectionDetails.class);\r\n\r\n    public Connection connectToDatabase(String dbUrl, String user, String password) {\r\n |     public Connection connectToDatabase(String dbUrl, String user, String password) {\r\n        try {\r\n            logger.info(\"Connecting to database.\");\r\n            return DriverManager.getConnection(dbUrl, user, password);\r\n        } catch (SQLException e) {\r\n | \r\npublic class GOOD_LogDbConnectionDetails {\r\n    private static final Logger logger = LogManager.getLogger(GOOD_LogDbConnectionDetails.class);\r\n\r\n    public Connection connectToDatabase(String dbUrl, String user, String password) {\r\n |             return DriverManager.getConnection(dbUrl, user, password);\r\n        } catch (SQLException e) {\r\n            logger.error(\"Database connection failed.\");\r\n            return null;\r\n        }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "user",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "\"admin\"",
                        "type": "String",
                        "context": "\r\n    public static void main(String[] args) {\r\n        new GOOD_LogDbConnectionDetails().connectToDatabase(\"jdbc:mysql://localhost:3306/myapp\", \"admin\", \"admin123\");\r\n    }\r\n}\r\n",
                        "nextNode": "String user"
                    },
                    {
                        "name": "String user",
                        "type": "String",
                        "context": "    private static final Logger logger = LogManager.getLogger(GOOD_LogDbConnectionDetails.class);\r\n\r\n    public Connection connectToDatabase(String dbUrl, String user, String password) {\r\n        try {\r\n            logger.info(\"Connecting to database.\");\r\n",
                        "nextNode": "user"
                    },
                    {
                        "name": "user",
                        "type": "Dataflow from `\"admin\"` to `user`",
                        "context": "        try {\r\n            logger.info(\"Connecting to database.\");\r\n            return DriverManager.getConnection(dbUrl, user, password);\r\n        } catch (SQLException e) {\r\n            logger.error(\"Database connection failed.\");\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "dbUrl",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "\"jdbc:mysql://localhost:3306/myapp\"",
                        "type": "String",
                        "context": "\r\n    public static void main(String[] args) {\r\n        new GOOD_LogDbConnectionDetails().connectToDatabase(\"jdbc:mysql://localhost:3306/myapp\", \"admin\", \"admin123\");\r\n    }\r\n}\r\n",
                        "nextNode": "String dbUrl"
                    },
                    {
                        "name": "String dbUrl",
                        "type": "String",
                        "context": "    private static final Logger logger = LogManager.getLogger(GOOD_LogDbConnectionDetails.class);\r\n\r\n    public Connection connectToDatabase(String dbUrl, String user, String password) {\r\n        try {\r\n            logger.info(\"Connecting to database.\");\r\n",
                        "nextNode": "dbUrl"
                    },
                    {
                        "name": "dbUrl",
                        "type": "Dataflow from `\"jdbc:mysql://localhost:3306/myapp\"` to `dbUrl`",
                        "context": "        try {\r\n            logger.info(\"Connecting to database.\");\r\n            return DriverManager.getConnection(dbUrl, user, password);\r\n        } catch (SQLException e) {\r\n            logger.error(\"Database connection failed.\");\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "jdbc:mysql://localhost:3306/myapp",
                "isSensitive": "yes"
            },
            {
                "name": "Connecting to database.",
                "isSensitive": "no"
            },
            {
                "name": "admin123",
                "isSensitive": "yes"
            },
            {
                "name": "admin",
                "isSensitive": "yes"
            },
            {
                "name": "Database connection failed.",
                "isSensitive": "no"
            }
        ],
        "comments": [],
        "sinks": [
            {
                "name": "getConnection",
                "isSink": "yes"
            },
            {
                "name": "connectToDatabase",
                "isSink": "no"
            },
            {
                "name": "getLogger",
                "isSink": "no"
            },
            {
                "name": "error",
                "isSink": "yes"
            },
            {
                "name": "info",
                "isSink": "yes"
            }
        ]
    },
    {
        "fileName": "GOOD_LogPaymentInformation.java",
        "variables": [
            {
                "name": "expiryDate",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "\"12/23\"",
                        "type": "String",
                        "context": "\r\n    public static void main(String[] args) {\r\n        new GOOD_LogPaymentInformation().processPayment(\"1234567890123456\", \"12/23\", \"123\");\r\n    }\r\n}\r\n",
                        "nextNode": "String expiryDate"
                    },
                    {
                        "name": "String expiryDate",
                        "type": "String",
                        "context": "    }\r\n\r\n    public void processPayment(String creditCardNumber, String expiryDate, String cvv) {\r\n        String transactionId = generateTransactionId();\r\n\r\n",
                        "nextNode": "expiryDate"
                    },
                    {
                        "name": "expiryDate",
                        "type": "Dataflow from `\"12/23\"` to `expiryDate`",
                        "context": "        String transactionId = generateTransactionId();\r\n\r\n        if (!validatePaymentDetails(creditCardNumber, expiryDate, cvv)) {\r\n            logger.error(\"Invalid payment details provided for transaction.\");\r\n            return; // Early return if validation fails\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "args",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "paymentSuccess",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "cvv",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "\"123\"",
                        "type": "String",
                        "context": "\r\n    public static void main(String[] args) {\r\n        new GOOD_LogPaymentInformation().processPayment(\"1234567890123456\", \"12/23\", \"123\");\r\n    }\r\n}\r\n | \r\n    public static void main(String[] args) {\r\n        new GOOD_LogPaymentInformation().processPayment(\"1234567890123456\", \"12/23\", \"123\");\r\n    }\r\n}\r\n",
                        "nextNode": "String cvv"
                    },
                    {
                        "name": "String cvv",
                        "type": "String",
                        "context": "    }\r\n\r\n    public void processPayment(String creditCardNumber, String expiryDate, String cvv) {\r\n        String transactionId = generateTransactionId();\r\n\r\n |     private static final Logger logger = LogManager.getLogger(GOOD_LogPaymentInformation.class);\r\n\r\n    public boolean validatePaymentDetails(String creditCardNumber, String expiryDate, String cvv) {\r\n        logger.info(\"Processing payment.\");\r\n        // Placeholder for validation logic\r\n |     }\r\n\r\n    public void processPayment(String creditCardNumber, String expiryDate, String cvv) {\r\n        String transactionId = generateTransactionId();\r\n\r\n",
                        "nextNode": "cvv"
                    },
                    {
                        "name": "cvv",
                        "type": "String",
                        "context": "        String transactionId = generateTransactionId();\r\n\r\n        if (!validatePaymentDetails(creditCardNumber, expiryDate, cvv)) {\r\n            logger.error(\"Invalid payment details provided for transaction.\");\r\n            return; // Early return if validation fails\r\n |         // Example: Check if the card number is valid using a checksum like Luhn's algorithm\r\n        // Check if expiry date is in the future and CVV is correctly formatted\r\n        return creditCardNumber.length() == 16 && cvv.length() == 3; // Simplified validation\r\n    }\r\n\r\n |         String transactionId = generateTransactionId();\r\n\r\n        if (!validatePaymentDetails(creditCardNumber, expiryDate, cvv)) {\r\n            logger.error(\"Invalid payment details provided for transaction.\");\r\n            return; // Early return if validation fails\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "creditCardNumber",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "\"1234567890123456\"",
                        "type": "String",
                        "context": "\r\n    public static void main(String[] args) {\r\n        new GOOD_LogPaymentInformation().processPayment(\"1234567890123456\", \"12/23\", \"123\");\r\n    }\r\n}\r\n | \r\n    public static void main(String[] args) {\r\n        new GOOD_LogPaymentInformation().processPayment(\"1234567890123456\", \"12/23\", \"123\");\r\n    }\r\n}\r\n",
                        "nextNode": "String creditCardNumber"
                    },
                    {
                        "name": "String creditCardNumber",
                        "type": "String",
                        "context": "    }\r\n\r\n    public void processPayment(String creditCardNumber, String expiryDate, String cvv) {\r\n        String transactionId = generateTransactionId();\r\n\r\n |     private static final Logger logger = LogManager.getLogger(GOOD_LogPaymentInformation.class);\r\n\r\n    public boolean validatePaymentDetails(String creditCardNumber, String expiryDate, String cvv) {\r\n        logger.info(\"Processing payment.\");\r\n        // Placeholder for validation logic\r\n |     }\r\n\r\n    public void processPayment(String creditCardNumber, String expiryDate, String cvv) {\r\n        String transactionId = generateTransactionId();\r\n\r\n",
                        "nextNode": "creditCardNumber"
                    },
                    {
                        "name": "creditCardNumber",
                        "type": "String",
                        "context": "        String transactionId = generateTransactionId();\r\n\r\n        if (!validatePaymentDetails(creditCardNumber, expiryDate, cvv)) {\r\n            logger.error(\"Invalid payment details provided for transaction.\");\r\n            return; // Early return if validation fails\r\n |         // Example: Check if the card number is valid using a checksum like Luhn's algorithm\r\n        // Check if expiry date is in the future and CVV is correctly formatted\r\n        return creditCardNumber.length() == 16 && cvv.length() == 3; // Simplified validation\r\n    }\r\n\r\n |         String transactionId = generateTransactionId();\r\n\r\n        if (!validatePaymentDetails(creditCardNumber, expiryDate, cvv)) {\r\n            logger.error(\"Invalid payment details provided for transaction.\");\r\n            return; // Early return if validation fails\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "logger",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "LogManager.getLogger(GOOD_LogPaymentInformation.class)",
                        "type": "Logger",
                        "context": "\r\npublic class GOOD_LogPaymentInformation {\r\n    private static final Logger logger = LogManager.getLogger(GOOD_LogPaymentInformation.class);\r\n\r\n    public boolean validatePaymentDetails(String creditCardNumber, String expiryDate, String cvv) {\r\n | \r\npublic class GOOD_LogPaymentInformation {\r\n    private static final Logger logger = LogManager.getLogger(GOOD_LogPaymentInformation.class);\r\n\r\n    public boolean validatePaymentDetails(String creditCardNumber, String expiryDate, String cvv) {\r\n",
                        "nextNode": "logger"
                    },
                    {
                        "name": "logger",
                        "type": "Logger",
                        "context": "\r\npublic class GOOD_LogPaymentInformation {\r\n    private static final Logger logger = LogManager.getLogger(GOOD_LogPaymentInformation.class);\r\n\r\n    public boolean validatePaymentDetails(String creditCardNumber, String expiryDate, String cvv) {\r\n | \r\n    public boolean validatePaymentDetails(String creditCardNumber, String expiryDate, String cvv) {\r\n        logger.info(\"Processing payment.\");\r\n        // Placeholder for validation logic\r\n        // Example: Check if the card number is valid using a checksum like Luhn's algorithm\r\n | \r\npublic class GOOD_LogPaymentInformation {\r\n    private static final Logger logger = LogManager.getLogger(GOOD_LogPaymentInformation.class);\r\n\r\n    public boolean validatePaymentDetails(String creditCardNumber, String expiryDate, String cvv) {\r\n | \r\n        if (!validatePaymentDetails(creditCardNumber, expiryDate, cvv)) {\r\n            logger.error(\"Invalid payment details provided for transaction.\");\r\n            return; // Early return if validation fails\r\n        }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "transactionId",
                "isSensitive": "yes",
                "graph": []
            }
        ],
        "strings": [
            {
                "name": "Invalid payment details provided for transaction.",
                "isSensitive": "no"
            },
            {
                "name": "123",
                "isSensitive": "yes"
            },
            {
                "name": "1234567890123456",
                "isSensitive": "yes"
            },
            {
                "name": "12/23",
                "isSensitive": "yes"
            },
            {
                "name": "Processing payment.",
                "isSensitive": "no"
            }
        ],
        "comments": [
            {
                "name": "Placeholder for validation logic",
                "isSensitive": "no"
            },
            {
                "name": "Early return if validation fails",
                "isSensitive": "no"
            },
            {
                "name": "Example: Check if the card number is valid using a checksum like Luhn's algorithm",
                "isSensitive": "no"
            },
            {
                "name": "Generate a unique transaction ID for tracking",
                "isSensitive": "no"
            },
            {
                "name": "Simulate payment processing logic...",
                "isSensitive": "no"
            },
            {
                "name": "Placeholder for actual payment processing result",
                "isSensitive": "no"
            },
            {
                "name": "Check if expiry date is in the future and CVV is correctly formatted",
                "isSensitive": "no"
            },
            {
                "name": "Simplified validation",
                "isSensitive": "no"
            }
        ],
        "sinks": [
            {
                "name": "generateTransactionId",
                "isSink": "no"
            },
            {
                "name": "length",
                "isSink": "no"
            },
            {
                "name": "getLogger",
                "isSink": "no"
            },
            {
                "name": "validatePaymentDetails",
                "isSink": "no"
            },
            {
                "name": "randomUUID",
                "isSink": "no"
            },
            {
                "name": "toString",
                "isSink": "no"
            },
            {
                "name": "processPayment",
                "isSink": "no"
            },
            {
                "name": "error",
                "isSink": "yes"
            },
            {
                "name": "info",
                "isSink": "yes"
            }
        ]
    },
    {
        "fileName": "GOOD_LogUserCredentials.java",
        "variables": [
            {
                "name": "args",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "password",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "\"pass1234\"",
                        "type": "String",
                        "context": "\r\n    public static void main(String[] args) {\r\n        new GOOD_LogUserCredentials().loginUser(\"user1\", \"pass1234\");\r\n    }\r\n}\r\n | \r\n    public static void main(String[] args) {\r\n        new GOOD_LogUserCredentials().loginUser(\"user1\", \"pass1234\");\r\n    }\r\n}\r\n | \r\n    public static void main(String[] args) {\r\n        new GOOD_LogUserCredentials().loginUser(\"user1\", \"pass1234\");\r\n    }\r\n}\r\n | \r\n    public static void main(String[] args) {\r\n        new GOOD_LogUserCredentials().loginUser(\"user1\", \"pass1234\");\r\n    }\r\n}\r\n | \r\n    public static void main(String[] args) {\r\n        new GOOD_LogUserCredentials().loginUser(\"user1\", \"pass1234\");\r\n    }\r\n}\r\n",
                        "nextNode": "String password"
                    },
                    {
                        "name": "String password",
                        "type": "String",
                        "context": "    }\r\n\r\n    public void loginUser(String username, String password) {\r\n        if (username == null || password == null || username.isEmpty() || password.isEmpty()) {\r\n            logger.error(\"Login attempt with empty username or password.\");\r\n |     private static final Logger logger = LogManager.getLogger(GOOD_LogUserCredentials.class);\r\n\r\n    public boolean authenticateUser(String username, String password) {\r\n        logger.info(\"Checking credentials.\");\r\n        \r\n |     }\r\n\r\n    public void loginUser(String username, String password) {\r\n        if (username == null || password == null || username.isEmpty() || password.isEmpty()) {\r\n            logger.error(\"Login attempt with empty username or password.\");\r\n |     private static final Logger logger = LogManager.getLogger(GOOD_LogUserCredentials.class);\r\n\r\n    public boolean authenticateUser(String username, String password) {\r\n        logger.info(\"Checking credentials.\");\r\n        \r\n |     }\r\n\r\n    public void loginUser(String username, String password) {\r\n        if (username == null || password == null || username.isEmpty() || password.isEmpty()) {\r\n            logger.error(\"Login attempt with empty username or password.\");\r\n |     }\r\n\r\n    public void loginUser(String username, String password) {\r\n        if (username == null || password == null || username.isEmpty() || password.isEmpty()) {\r\n            logger.error(\"Login attempt with empty username or password.\");\r\n |     }\r\n\r\n    public void loginUser(String username, String password) {\r\n        if (username == null || password == null || username.isEmpty() || password.isEmpty()) {\r\n            logger.error(\"Login attempt with empty username or password.\");\r\n",
                        "nextNode": "password"
                    },
                    {
                        "name": "password",
                        "type": "String",
                        "context": "\r\n    public void loginUser(String username, String password) {\r\n        if (username == null || password == null || username.isEmpty() || password.isEmpty()) {\r\n            logger.error(\"Login attempt with empty username or password.\");\r\n            return;\r\n | \r\n    public void loginUser(String username, String password) {\r\n        if (username == null || password == null || username.isEmpty() || password.isEmpty()) {\r\n            logger.error(\"Login attempt with empty username or password.\");\r\n            return;\r\n |         }\r\n        \r\n        boolean isAuthenticated = authenticateUser(username, password);\r\n\r\n        if (isAuthenticated) {\r\n |         // Placeholder for database lookup that might involve insecure practices\r\n        // This part is purely illustrative and skips actual database operations\r\n        if (\"admin\".equals(username) && \"adminPass\".equals(password)) {\r\n            return true; // Simulated successful authentication\r\n        } else if (\"user1\".equals(username) && \"pass1234\".equals(password)) {\r\n | \r\n    public void loginUser(String username, String password) {\r\n        if (username == null || password == null || username.isEmpty() || password.isEmpty()) {\r\n            logger.error(\"Login attempt with empty username or password.\");\r\n            return;\r\n | \r\n    public void loginUser(String username, String password) {\r\n        if (username == null || password == null || username.isEmpty() || password.isEmpty()) {\r\n            logger.error(\"Login attempt with empty username or password.\");\r\n            return;\r\n |         }\r\n        \r\n        boolean isAuthenticated = authenticateUser(username, password);\r\n\r\n        if (isAuthenticated) {\r\n |         if (\"admin\".equals(username) && \"adminPass\".equals(password)) {\r\n            return true; // Simulated successful authentication\r\n        } else if (\"user1\".equals(username) && \"pass1234\".equals(password)) {\r\n            return true; // Another simulated successful authentication\r\n        }\r\n | \r\n    public void loginUser(String username, String password) {\r\n        if (username == null || password == null || username.isEmpty() || password.isEmpty()) {\r\n            logger.error(\"Login attempt with empty username or password.\");\r\n            return;\r\n | \r\n    public void loginUser(String username, String password) {\r\n        if (username == null || password == null || username.isEmpty() || password.isEmpty()) {\r\n            logger.error(\"Login attempt with empty username or password.\");\r\n            return;\r\n |         }\r\n        \r\n        boolean isAuthenticated = authenticateUser(username, password);\r\n\r\n        if (isAuthenticated) {\r\n | \r\n    public void loginUser(String username, String password) {\r\n        if (username == null || password == null || username.isEmpty() || password.isEmpty()) {\r\n            logger.error(\"Login attempt with empty username or password.\");\r\n            return;\r\n | \r\n    public void loginUser(String username, String password) {\r\n        if (username == null || password == null || username.isEmpty() || password.isEmpty()) {\r\n            logger.error(\"Login attempt with empty username or password.\");\r\n            return;\r\n | \r\n    public void loginUser(String username, String password) {\r\n        if (username == null || password == null || username.isEmpty() || password.isEmpty()) {\r\n            logger.error(\"Login attempt with empty username or password.\");\r\n            return;\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "logger",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "LogManager.getLogger(GOOD_LogUserCredentials.class)",
                        "type": "Logger",
                        "context": "\r\npublic class GOOD_LogUserCredentials {\r\n    private static final Logger logger = LogManager.getLogger(GOOD_LogUserCredentials.class);\r\n\r\n    public boolean authenticateUser(String username, String password) {\r\n | \r\npublic class GOOD_LogUserCredentials {\r\n    private static final Logger logger = LogManager.getLogger(GOOD_LogUserCredentials.class);\r\n\r\n    public boolean authenticateUser(String username, String password) {\r\n | \r\npublic class GOOD_LogUserCredentials {\r\n    private static final Logger logger = LogManager.getLogger(GOOD_LogUserCredentials.class);\r\n\r\n    public boolean authenticateUser(String username, String password) {\r\n | \r\npublic class GOOD_LogUserCredentials {\r\n    private static final Logger logger = LogManager.getLogger(GOOD_LogUserCredentials.class);\r\n\r\n    public boolean authenticateUser(String username, String password) {\r\n",
                        "nextNode": "logger"
                    },
                    {
                        "name": "logger",
                        "type": "Logger",
                        "context": "\r\npublic class GOOD_LogUserCredentials {\r\n    private static final Logger logger = LogManager.getLogger(GOOD_LogUserCredentials.class);\r\n\r\n    public boolean authenticateUser(String username, String password) {\r\n | \r\n    public boolean authenticateUser(String username, String password) {\r\n        logger.info(\"Checking credentials.\");\r\n        \r\n        // Placeholder for database lookup that might involve insecure practices\r\n | \r\npublic class GOOD_LogUserCredentials {\r\n    private static final Logger logger = LogManager.getLogger(GOOD_LogUserCredentials.class);\r\n\r\n    public boolean authenticateUser(String username, String password) {\r\n |     public void loginUser(String username, String password) {\r\n        if (username == null || password == null || username.isEmpty() || password.isEmpty()) {\r\n            logger.error(\"Login attempt with empty username or password.\");\r\n            return;\r\n        }\r\n | \r\npublic class GOOD_LogUserCredentials {\r\n    private static final Logger logger = LogManager.getLogger(GOOD_LogUserCredentials.class);\r\n\r\n    public boolean authenticateUser(String username, String password) {\r\n | \r\n        if (isAuthenticated) {\r\n            logger.info(\"User logged in successfully.\");\r\n        } else {\r\n            logger.error(\"Failed login attempt.\");\r\n | \r\npublic class GOOD_LogUserCredentials {\r\n    private static final Logger logger = LogManager.getLogger(GOOD_LogUserCredentials.class);\r\n\r\n    public boolean authenticateUser(String username, String password) {\r\n |             logger.info(\"User logged in successfully.\");\r\n        } else {\r\n            logger.error(\"Failed login attempt.\");\r\n        }\r\n    }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "isAuthenticated",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "username",
                        "type": "String",
                        "context": "        }\r\n        \r\n        boolean isAuthenticated = authenticateUser(username, password);\r\n\r\n        if (isAuthenticated) {\r\n",
                        "nextNode": "authenticateUser(username, password)"
                    },
                    {
                        "name": "authenticateUser(username, password)",
                        "type": "Boolean",
                        "context": "        }\r\n        \r\n        boolean isAuthenticated = authenticateUser(username, password);\r\n\r\n        if (isAuthenticated) {\r\n",
                        "nextNode": "isAuthenticated"
                    },
                    {
                        "name": "isAuthenticated",
                        "type": "Dataflow from `username` to `isAuthenticated`\nDataflow from `password` to `isAuthenticated`\nDataflow from `username` to `isAuthenticated`\nDataflow from `password` to `isAuthenticated`\nDataflow from `username` to `isAuthenticated`\nDataflow from `password` to `isAuthenticated`\nDataflow from `true` to `isAuthenticated`\nDataflow from `true` to `isAuthenticated`\nDataflow from `false` to `isAuthenticated`\nDataflow from `authenticateUser(...)` to `isAuthenticated`\nDataflow from `\"user1\"` to `isAuthenticated`\nDataflow from `\"pass1234\"` to `isAuthenticated`",
                        "context": "        boolean isAuthenticated = authenticateUser(username, password);\r\n\r\n        if (isAuthenticated) {\r\n            logger.info(\"User logged in successfully.\");\r\n        } else {\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "username",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "\"user1\"",
                        "type": "String",
                        "context": "\r\n    public static void main(String[] args) {\r\n        new GOOD_LogUserCredentials().loginUser(\"user1\", \"pass1234\");\r\n    }\r\n}\r\n | \r\n    public static void main(String[] args) {\r\n        new GOOD_LogUserCredentials().loginUser(\"user1\", \"pass1234\");\r\n    }\r\n}\r\n | \r\n    public static void main(String[] args) {\r\n        new GOOD_LogUserCredentials().loginUser(\"user1\", \"pass1234\");\r\n    }\r\n}\r\n | \r\n    public static void main(String[] args) {\r\n        new GOOD_LogUserCredentials().loginUser(\"user1\", \"pass1234\");\r\n    }\r\n}\r\n | \r\n    public static void main(String[] args) {\r\n        new GOOD_LogUserCredentials().loginUser(\"user1\", \"pass1234\");\r\n    }\r\n}\r\n",
                        "nextNode": "String username"
                    },
                    {
                        "name": "String username",
                        "type": "String",
                        "context": "    }\r\n\r\n    public void loginUser(String username, String password) {\r\n        if (username == null || password == null || username.isEmpty() || password.isEmpty()) {\r\n            logger.error(\"Login attempt with empty username or password.\");\r\n |     private static final Logger logger = LogManager.getLogger(GOOD_LogUserCredentials.class);\r\n\r\n    public boolean authenticateUser(String username, String password) {\r\n        logger.info(\"Checking credentials.\");\r\n        \r\n |     }\r\n\r\n    public void loginUser(String username, String password) {\r\n        if (username == null || password == null || username.isEmpty() || password.isEmpty()) {\r\n            logger.error(\"Login attempt with empty username or password.\");\r\n |     private static final Logger logger = LogManager.getLogger(GOOD_LogUserCredentials.class);\r\n\r\n    public boolean authenticateUser(String username, String password) {\r\n        logger.info(\"Checking credentials.\");\r\n        \r\n |     }\r\n\r\n    public void loginUser(String username, String password) {\r\n        if (username == null || password == null || username.isEmpty() || password.isEmpty()) {\r\n            logger.error(\"Login attempt with empty username or password.\");\r\n |     }\r\n\r\n    public void loginUser(String username, String password) {\r\n        if (username == null || password == null || username.isEmpty() || password.isEmpty()) {\r\n            logger.error(\"Login attempt with empty username or password.\");\r\n |     }\r\n\r\n    public void loginUser(String username, String password) {\r\n        if (username == null || password == null || username.isEmpty() || password.isEmpty()) {\r\n            logger.error(\"Login attempt with empty username or password.\");\r\n",
                        "nextNode": "username"
                    },
                    {
                        "name": "username",
                        "type": "String",
                        "context": "\r\n    public void loginUser(String username, String password) {\r\n        if (username == null || password == null || username.isEmpty() || password.isEmpty()) {\r\n            logger.error(\"Login attempt with empty username or password.\");\r\n            return;\r\n | \r\n    public void loginUser(String username, String password) {\r\n        if (username == null || password == null || username.isEmpty() || password.isEmpty()) {\r\n            logger.error(\"Login attempt with empty username or password.\");\r\n            return;\r\n |         }\r\n        \r\n        boolean isAuthenticated = authenticateUser(username, password);\r\n\r\n        if (isAuthenticated) {\r\n |         // Placeholder for database lookup that might involve insecure practices\r\n        // This part is purely illustrative and skips actual database operations\r\n        if (\"admin\".equals(username) && \"adminPass\".equals(password)) {\r\n            return true; // Simulated successful authentication\r\n        } else if (\"user1\".equals(username) && \"pass1234\".equals(password)) {\r\n | \r\n    public void loginUser(String username, String password) {\r\n        if (username == null || password == null || username.isEmpty() || password.isEmpty()) {\r\n            logger.error(\"Login attempt with empty username or password.\");\r\n            return;\r\n | \r\n    public void loginUser(String username, String password) {\r\n        if (username == null || password == null || username.isEmpty() || password.isEmpty()) {\r\n            logger.error(\"Login attempt with empty username or password.\");\r\n            return;\r\n |         }\r\n        \r\n        boolean isAuthenticated = authenticateUser(username, password);\r\n\r\n        if (isAuthenticated) {\r\n |         // Placeholder for database lookup that might involve insecure practices\r\n        // This part is purely illustrative and skips actual database operations\r\n        if (\"admin\".equals(username) && \"adminPass\".equals(password)) {\r\n            return true; // Simulated successful authentication\r\n        } else if (\"user1\".equals(username) && \"pass1234\".equals(password)) {\r\n |         if (\"admin\".equals(username) && \"adminPass\".equals(password)) {\r\n            return true; // Simulated successful authentication\r\n        } else if (\"user1\".equals(username) && \"pass1234\".equals(password)) {\r\n            return true; // Another simulated successful authentication\r\n        }\r\n | \r\n    public void loginUser(String username, String password) {\r\n        if (username == null || password == null || username.isEmpty() || password.isEmpty()) {\r\n            logger.error(\"Login attempt with empty username or password.\");\r\n            return;\r\n | \r\n    public void loginUser(String username, String password) {\r\n        if (username == null || password == null || username.isEmpty() || password.isEmpty()) {\r\n            logger.error(\"Login attempt with empty username or password.\");\r\n            return;\r\n |         }\r\n        \r\n        boolean isAuthenticated = authenticateUser(username, password);\r\n\r\n        if (isAuthenticated) {\r\n | \r\n    public void loginUser(String username, String password) {\r\n        if (username == null || password == null || username.isEmpty() || password.isEmpty()) {\r\n            logger.error(\"Login attempt with empty username or password.\");\r\n            return;\r\n | \r\n    public void loginUser(String username, String password) {\r\n        if (username == null || password == null || username.isEmpty() || password.isEmpty()) {\r\n            logger.error(\"Login attempt with empty username or password.\");\r\n            return;\r\n | \r\n    public void loginUser(String username, String password) {\r\n        if (username == null || password == null || username.isEmpty() || password.isEmpty()) {\r\n            logger.error(\"Login attempt with empty username or password.\");\r\n            return;\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "user1",
                "isSensitive": "yes"
            },
            {
                "name": "Checking credentials.",
                "isSensitive": "no"
            },
            {
                "name": "Failed login attempt.",
                "isSensitive": "no"
            },
            {
                "name": "User logged in successfully.",
                "isSensitive": "no"
            },
            {
                "name": "Login attempt with empty username or password.",
                "isSensitive": "no"
            },
            {
                "name": "admin",
                "isSensitive": "yes"
            },
            {
                "name": "adminPass",
                "isSensitive": "yes"
            },
            {
                "name": "pass1234",
                "isSensitive": "yes"
            }
        ],
        "comments": [
            {
                "name": "Another simulated successful authentication",
                "isSensitive": "no"
            },
            {
                "name": "Simulated successful authentication",
                "isSensitive": "no"
            },
            {
                "name": "Default to authentication failure",
                "isSensitive": "no"
            },
            {
                "name": "Placeholder for database lookup that might involve insecure practices",
                "isSensitive": "no"
            },
            {
                "name": "This part is purely illustrative and skips actual database operations",
                "isSensitive": "no"
            }
        ],
        "sinks": [
            {
                "name": "loginUser",
                "isSink": "no"
            },
            {
                "name": "authenticateUser",
                "isSink": "no"
            },
            {
                "name": "equals",
                "isSink": "no"
            },
            {
                "name": "isEmpty",
                "isSink": "no"
            },
            {
                "name": "getLogger",
                "isSink": "no"
            },
            {
                "name": "error",
                "isSink": "yes"
            },
            {
                "name": "info",
                "isSink": "yes"
            }
        ]
    },
    {
        "fileName": "GOOD_SecureLoggingPractices.java",
        "variables": [
            {
                "name": "args",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "logger",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "LogManager.getLogger(GOOD_SecureLoggingPractices.class)",
                        "type": "Logger",
                        "context": "\r\npublic class GOOD_SecureLoggingPractices {\r\n    private static final Logger logger = LogManager.getLogger(GOOD_SecureLoggingPractices.class);\r\n\r\n    // Method to determine if an operation is considered sensitive\r\n | \r\npublic class GOOD_SecureLoggingPractices {\r\n    private static final Logger logger = LogManager.getLogger(GOOD_SecureLoggingPractices.class);\r\n\r\n    // Method to determine if an operation is considered sensitive\r\n",
                        "nextNode": "logger"
                    },
                    {
                        "name": "logger",
                        "type": "Logger",
                        "context": "\r\npublic class GOOD_SecureLoggingPractices {\r\n    private static final Logger logger = LogManager.getLogger(GOOD_SecureLoggingPractices.class);\r\n\r\n    // Method to determine if an operation is considered sensitive\r\n |         if (isSensitiveOperation(operationDetails)) {\r\n            // For sensitive operations, log a generic message without specific details\r\n            logger.info(\"Processing a sensitive operation.\");\r\n        } else {\r\n            logger.info(\"Processing operation.\");\r\n | \r\npublic class GOOD_SecureLoggingPractices {\r\n    private static final Logger logger = LogManager.getLogger(GOOD_SecureLoggingPractices.class);\r\n\r\n    // Method to determine if an operation is considered sensitive\r\n |             logger.info(\"Processing a sensitive operation.\");\r\n        } else {\r\n            logger.info(\"Processing operation.\");\r\n        }\r\n\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "operationDetails",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "\"Updating user password\"",
                        "type": "String",
                        "context": "\r\n    public static void main(String[] args) {\r\n        new GOOD_SecureLoggingPractices().processOperation(\"Updating user password\");\r\n        new GOOD_SecureLoggingPractices().processOperation(\"Viewing general user profile information\");\r\n    }\r\n | \r\n    public static void main(String[] args) {\r\n        new GOOD_SecureLoggingPractices().processOperation(\"Updating user password\");\r\n        new GOOD_SecureLoggingPractices().processOperation(\"Viewing general user profile information\");\r\n    }\r\n | \r\n    public static void main(String[] args) {\r\n        new GOOD_SecureLoggingPractices().processOperation(\"Updating user password\");\r\n        new GOOD_SecureLoggingPractices().processOperation(\"Viewing general user profile information\");\r\n    }\r\n",
                        "nextNode": "String operationDetails"
                    },
                    {
                        "name": "String operationDetails",
                        "type": "String",
                        "context": "    }\r\n\r\n    public void processOperation(String operationDetails) {\r\n        if (isSensitiveOperation(operationDetails)) {\r\n            // For sensitive operations, log a generic message without specific details\r\n | \r\n    // Method to determine if an operation is considered sensitive\r\n    private boolean isSensitiveOperation(String operationDetails) {\r\n        // Placeholder for logic to determine operation sensitivity\r\n        // For example, checking if operation details contain keywords like \"password\", \"credit card\", etc.\r\n |     }\r\n\r\n    public void processOperation(String operationDetails) {\r\n        if (isSensitiveOperation(operationDetails)) {\r\n            // For sensitive operations, log a generic message without specific details\r\n | \r\n    // Method to determine if an operation is considered sensitive\r\n    private boolean isSensitiveOperation(String operationDetails) {\r\n        // Placeholder for logic to determine operation sensitivity\r\n        // For example, checking if operation details contain keywords like \"password\", \"credit card\", etc.\r\n |     }\r\n\r\n    public void processOperation(String operationDetails) {\r\n        if (isSensitiveOperation(operationDetails)) {\r\n            // For sensitive operations, log a generic message without specific details\r\n",
                        "nextNode": "operationDetails"
                    },
                    {
                        "name": "operationDetails",
                        "type": "String",
                        "context": "\r\n    public void processOperation(String operationDetails) {\r\n        if (isSensitiveOperation(operationDetails)) {\r\n            // For sensitive operations, log a generic message without specific details\r\n            logger.info(\"Processing a sensitive operation.\");\r\n |         // Placeholder for logic to determine operation sensitivity\r\n        // For example, checking if operation details contain keywords like \"password\", \"credit card\", etc.\r\n        return operationDetails.toLowerCase().contains(\"password\") || operationDetails.toLowerCase().contains(\"credit card\");\r\n    }\r\n\r\n | \r\n    public void processOperation(String operationDetails) {\r\n        if (isSensitiveOperation(operationDetails)) {\r\n            // For sensitive operations, log a generic message without specific details\r\n            logger.info(\"Processing a sensitive operation.\");\r\n |         // Placeholder for logic to determine operation sensitivity\r\n        // For example, checking if operation details contain keywords like \"password\", \"credit card\", etc.\r\n        return operationDetails.toLowerCase().contains(\"password\") || operationDetails.toLowerCase().contains(\"credit card\");\r\n    }\r\n\r\n |         // Placeholder for logic to determine operation sensitivity\r\n        // For example, checking if operation details contain keywords like \"password\", \"credit card\", etc.\r\n        return operationDetails.toLowerCase().contains(\"password\") || operationDetails.toLowerCase().contains(\"credit card\");\r\n    }\r\n\r\n | \r\n    public void processOperation(String operationDetails) {\r\n        if (isSensitiveOperation(operationDetails)) {\r\n            // For sensitive operations, log a generic message without specific details\r\n            logger.info(\"Processing a sensitive operation.\");\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "password",
                "isSensitive": "no"
            },
            {
                "name": "Viewing general user profile information",
                "isSensitive": "no"
            },
            {
                "name": "Updating user password",
                "isSensitive": "no"
            },
            {
                "name": "Processing a sensitive operation.",
                "isSensitive": "no"
            },
            {
                "name": "credit card",
                "isSensitive": "no"
            },
            {
                "name": "Processing operation.",
                "isSensitive": "no"
            }
        ],
        "comments": [
            {
                "name": "Placeholder for logic to determine operation sensitivity",
                "isSensitive": "no"
            },
            {
                "name": "Assume this includes secure handling of any sensitive data involved",
                "isSensitive": "no"
            },
            {
                "name": "For example, checking if operation details contain keywords like \"password\", \"credit card\", etc.",
                "isSensitive": "no"
            },
            {
                "name": "For sensitive operations, log a generic message without specific details",
                "isSensitive": "no"
            },
            {
                "name": "Placeholder for operation processing logic",
                "isSensitive": "no"
            },
            {
                "name": "Method to determine if an operation is considered sensitive",
                "isSensitive": "no"
            }
        ],
        "sinks": [
            {
                "name": "processOperation",
                "isSink": "no"
            },
            {
                "name": "contains",
                "isSink": "no"
            },
            {
                "name": "isSensitiveOperation",
                "isSink": "no"
            },
            {
                "name": "toLowerCase",
                "isSink": "no"
            },
            {
                "name": "getLogger",
                "isSink": "no"
            },
            {
                "name": "info",
                "isSink": "yes"
            }
        ]
    },
    {
        "fileName": "GOOD_TokenManager.java",
        "variables": [
            {
                "name": "newToken",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "logger",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "LoggerFactory.getLogger(GOOD_TokenManager.class)",
                        "type": "Logger",
                        "context": "\r\npublic class GOOD_TokenManager {\r\n    private static final Logger logger = LoggerFactory.getLogger(GOOD_TokenManager.class);\r\n\r\n    public void refreshToken(String userId, String oldToken) {\r\n",
                        "nextNode": "logger"
                    },
                    {
                        "name": "logger",
                        "type": "Logger",
                        "context": "\r\npublic class GOOD_TokenManager {\r\n    private static final Logger logger = LoggerFactory.getLogger(GOOD_TokenManager.class);\r\n\r\n    public void refreshToken(String userId, String oldToken) {\r\n |         // Simulate token refresh process\r\n        String newToken = \"newToken12345\"; // Simulated new token\r\n        logger.debug(\"Refreshing token.\"); \r\n    }\r\n}\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "oldToken",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "userId",
                "isSensitive": "yes",
                "graph": []
            }
        ],
        "strings": [
            {
                "name": "newToken12345",
                "isSensitive": "yes"
            },
            {
                "name": "Refreshing token.",
                "isSensitive": "no"
            }
        ],
        "comments": [
            {
                "name": "Simulated new token",
                "isSensitive": "no"
            },
            {
                "name": "Simulate token refresh process",
                "isSensitive": "no"
            }
        ],
        "sinks": [
            {
                "name": "debug",
                "isSink": "yes"
            },
            {
                "name": "getLogger",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "AuditTrailRecorder.java",
        "variables": [
            {
                "name": "action",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "username",
                        "type": "String",
                        "context": "public class BAD_LoginServiceCustom {\r\n    public void authenticateUser(String username, String password) {\r\n        if (username.equals(\"admin\") && password.equals(\"password123\")) {\r\n            AuditTrailRecorder.recordAction(\"User logged in successfully: \" + username + \" with password \" + password);\r\n        } else {\r\n |             AuditTrailRecorder.recordAction(\"User logged in successfully: \" + username + \" with password \" + password);\r\n        } else {\r\n            AuditTrailRecorder.recordAction(\"User login failed for username: \" + username);\r\n        }\r\n    }\r\n",
                        "nextNode": "\"User login failed for username: \" + username"
                    },
                    {
                        "name": "\"User login failed for username: \" + username",
                        "type": "String",
                        "context": "            AuditTrailRecorder.recordAction(\"User logged in successfully: \" + username + \" with password \" + password);\r\n        } else {\r\n            AuditTrailRecorder.recordAction(\"User login failed for username: \" + username);\r\n        }\r\n    }\r\n",
                        "nextNode": "String action"
                    },
                    {
                        "name": "String action",
                        "type": "String",
                        "context": "public class AuditTrailRecorder {\r\n    public static void recordAction(String action) {\r\n        System.out.println(\"Audit Record: \" + action);\r\n    }\r\n",
                        "nextNode": "action"
                    },
                    {
                        "name": "action",
                        "type": "Dataflow from `username` to `action`\nDataflow from `password` to `action`\nDataflow from `password` to `action`\nDataflow from `username` to `action`\nDataflow from `username` to `action`\nDataflow from `\" with password \"` to `action`\nDataflow from `\"User logged in successfully: \"` to `action`\nDataflow from `\"User login failed for username: \"` to `action`",
                        "context": "public class AuditTrailRecorder {\r\n    public static void recordAction(String action) {\r\n        System.out.println(\"Audit Record: \" + action);\r\n    }\r\n}\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "Audit Record:",
                "isSensitive": "no"
            }
        ],
        "comments": [],
        "sinks": [
            {
                "name": "println",
                "isSink": "yes"
            }
        ]
    },
    {
        "fileName": "EventChronicle.java",
        "variables": [
            {
                "name": "args",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "debug",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "\"This is a debug message\"",
                        "type": "String",
                        "context": "        EventChronicle.logEvent(\"Application started\");\r\n        EventChronicle.logInfo(\"This is an info message\");\r\n        EventChronicle.logDebug(\"This is a debug message\");\r\n        EventChronicle.logError(\"This is an error message\");\r\n    }\r\n",
                        "nextNode": "String debug"
                    },
                    {
                        "name": "String debug",
                        "type": "String",
                        "context": "    }\r\n\r\n    public static void logDebug(String debug) {\r\n        try (FileWriter fileWriter = new FileWriter(LOG_FILE, true);\r\n             PrintWriter printWriter = new PrintWriter(fileWriter)) {\r\n",
                        "nextNode": "debug"
                    },
                    {
                        "name": "debug",
                        "type": "Dataflow from `\"This is a debug message\"` to `debug`",
                        "context": "            \r\n            String timestamp = LocalDateTime.now().format(DATE_FORMATTER);\r\n            printWriter.println(timestamp + \" - DEBUG: \" + debug);\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "e",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "printWriter",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "LOG_FILE",
                        "type": "String",
                        "context": "\r\n    public static void logEvent(String event) {\r\n        try (FileWriter fileWriter = new FileWriter(LOG_FILE, true);\r\n             PrintWriter printWriter = new PrintWriter(fileWriter)) {\r\n            \r\n | \r\n    public static void logError(String error) {\r\n        try (FileWriter fileWriter = new FileWriter(LOG_FILE, true);\r\n             PrintWriter printWriter = new PrintWriter(fileWriter)) {\r\n            \r\n | \r\n    public static void logInfo(String info) {\r\n        try (FileWriter fileWriter = new FileWriter(LOG_FILE, true);\r\n             PrintWriter printWriter = new PrintWriter(fileWriter)) {\r\n            \r\n | \r\n    public static void logDebug(String debug) {\r\n        try (FileWriter fileWriter = new FileWriter(LOG_FILE, true);\r\n             PrintWriter printWriter = new PrintWriter(fileWriter)) {\r\n            \r\n",
                        "nextNode": "new FileWriter(LOG_FILE, true)"
                    },
                    {
                        "name": "new FileWriter(LOG_FILE, true)",
                        "type": "FileWriter",
                        "context": "\r\n    public static void logEvent(String event) {\r\n        try (FileWriter fileWriter = new FileWriter(LOG_FILE, true);\r\n             PrintWriter printWriter = new PrintWriter(fileWriter)) {\r\n            \r\n | \r\n    public static void logError(String error) {\r\n        try (FileWriter fileWriter = new FileWriter(LOG_FILE, true);\r\n             PrintWriter printWriter = new PrintWriter(fileWriter)) {\r\n            \r\n | \r\n    public static void logInfo(String info) {\r\n        try (FileWriter fileWriter = new FileWriter(LOG_FILE, true);\r\n             PrintWriter printWriter = new PrintWriter(fileWriter)) {\r\n            \r\n | \r\n    public static void logDebug(String debug) {\r\n        try (FileWriter fileWriter = new FileWriter(LOG_FILE, true);\r\n             PrintWriter printWriter = new PrintWriter(fileWriter)) {\r\n            \r\n",
                        "nextNode": "fileWriter"
                    },
                    {
                        "name": "fileWriter",
                        "type": "FileWriter",
                        "context": "    public static void logEvent(String event) {\r\n        try (FileWriter fileWriter = new FileWriter(LOG_FILE, true);\r\n             PrintWriter printWriter = new PrintWriter(fileWriter)) {\r\n            \r\n            String timestamp = LocalDateTime.now().format(DATE_FORMATTER);\r\n |     public static void logError(String error) {\r\n        try (FileWriter fileWriter = new FileWriter(LOG_FILE, true);\r\n             PrintWriter printWriter = new PrintWriter(fileWriter)) {\r\n            \r\n            String timestamp = LocalDateTime.now().format(DATE_FORMATTER);\r\n |     public static void logInfo(String info) {\r\n        try (FileWriter fileWriter = new FileWriter(LOG_FILE, true);\r\n             PrintWriter printWriter = new PrintWriter(fileWriter)) {\r\n            \r\n            String timestamp = LocalDateTime.now().format(DATE_FORMATTER);\r\n |     public static void logDebug(String debug) {\r\n        try (FileWriter fileWriter = new FileWriter(LOG_FILE, true);\r\n             PrintWriter printWriter = new PrintWriter(fileWriter)) {\r\n            \r\n            String timestamp = LocalDateTime.now().format(DATE_FORMATTER);\r\n",
                        "nextNode": "new PrintWriter(fileWriter)"
                    },
                    {
                        "name": "new PrintWriter(fileWriter)",
                        "type": "PrintWriter",
                        "context": "    public static void logEvent(String event) {\r\n        try (FileWriter fileWriter = new FileWriter(LOG_FILE, true);\r\n             PrintWriter printWriter = new PrintWriter(fileWriter)) {\r\n            \r\n            String timestamp = LocalDateTime.now().format(DATE_FORMATTER);\r\n |     public static void logError(String error) {\r\n        try (FileWriter fileWriter = new FileWriter(LOG_FILE, true);\r\n             PrintWriter printWriter = new PrintWriter(fileWriter)) {\r\n            \r\n            String timestamp = LocalDateTime.now().format(DATE_FORMATTER);\r\n |     public static void logInfo(String info) {\r\n        try (FileWriter fileWriter = new FileWriter(LOG_FILE, true);\r\n             PrintWriter printWriter = new PrintWriter(fileWriter)) {\r\n            \r\n            String timestamp = LocalDateTime.now().format(DATE_FORMATTER);\r\n |     public static void logDebug(String debug) {\r\n        try (FileWriter fileWriter = new FileWriter(LOG_FILE, true);\r\n             PrintWriter printWriter = new PrintWriter(fileWriter)) {\r\n            \r\n            String timestamp = LocalDateTime.now().format(DATE_FORMATTER);\r\n",
                        "nextNode": "printWriter"
                    },
                    {
                        "name": "printWriter",
                        "type": "Dataflow from `LOG_FILE` to `printWriter`\nDataflow from `fileWriter` to `printWriter`\nDataflow from `\"event_chronicle.log\"` to `printWriter`\nDataflow from `new FileWriter(...)` to `printWriter`\nDataflow from `new PrintWriter(...)` to `printWriter`\nDataflow from `true` to `printWriter`",
                        "context": "            \r\n            String timestamp = LocalDateTime.now().format(DATE_FORMATTER);\r\n            printWriter.println(timestamp + \" - \" + event);\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n |             \r\n            String timestamp = LocalDateTime.now().format(DATE_FORMATTER);\r\n            printWriter.println(timestamp + \" - ERROR: \" + error);\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n |             \r\n            String timestamp = LocalDateTime.now().format(DATE_FORMATTER);\r\n            printWriter.println(timestamp + \" - INFO: \" + info);\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n |             \r\n            String timestamp = LocalDateTime.now().format(DATE_FORMATTER);\r\n            printWriter.println(timestamp + \" - DEBUG: \" + debug);\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "DATE_FORMATTER",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\")",
                        "type": "DateTimeFormatter",
                        "context": "\r\n    private static final String LOG_FILE = \"event_chronicle.log\";\r\n    private static final DateTimeFormatter DATE_FORMATTER = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\");\r\n\r\n    public static void logEvent(String event) {\r\n | \r\n    private static final String LOG_FILE = \"event_chronicle.log\";\r\n    private static final DateTimeFormatter DATE_FORMATTER = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\");\r\n\r\n    public static void logEvent(String event) {\r\n | \r\n    private static final String LOG_FILE = \"event_chronicle.log\";\r\n    private static final DateTimeFormatter DATE_FORMATTER = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\");\r\n\r\n    public static void logEvent(String event) {\r\n | \r\n    private static final String LOG_FILE = \"event_chronicle.log\";\r\n    private static final DateTimeFormatter DATE_FORMATTER = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\");\r\n\r\n    public static void logEvent(String event) {\r\n",
                        "nextNode": "DATE_FORMATTER"
                    },
                    {
                        "name": "DATE_FORMATTER",
                        "type": "DateTimeFormatter",
                        "context": "\r\n    private static final String LOG_FILE = \"event_chronicle.log\";\r\n    private static final DateTimeFormatter DATE_FORMATTER = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\");\r\n\r\n    public static void logEvent(String event) {\r\n |              PrintWriter printWriter = new PrintWriter(fileWriter)) {\r\n            \r\n            String timestamp = LocalDateTime.now().format(DATE_FORMATTER);\r\n            printWriter.println(timestamp + \" - \" + event);\r\n        } catch (IOException e) {\r\n | \r\n    private static final String LOG_FILE = \"event_chronicle.log\";\r\n    private static final DateTimeFormatter DATE_FORMATTER = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\");\r\n\r\n    public static void logEvent(String event) {\r\n |              PrintWriter printWriter = new PrintWriter(fileWriter)) {\r\n            \r\n            String timestamp = LocalDateTime.now().format(DATE_FORMATTER);\r\n            printWriter.println(timestamp + \" - ERROR: \" + error);\r\n        } catch (IOException e) {\r\n | \r\n    private static final String LOG_FILE = \"event_chronicle.log\";\r\n    private static final DateTimeFormatter DATE_FORMATTER = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\");\r\n\r\n    public static void logEvent(String event) {\r\n |              PrintWriter printWriter = new PrintWriter(fileWriter)) {\r\n            \r\n            String timestamp = LocalDateTime.now().format(DATE_FORMATTER);\r\n            printWriter.println(timestamp + \" - INFO: \" + info);\r\n        } catch (IOException e) {\r\n | \r\n    private static final String LOG_FILE = \"event_chronicle.log\";\r\n    private static final DateTimeFormatter DATE_FORMATTER = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\");\r\n\r\n    public static void logEvent(String event) {\r\n |              PrintWriter printWriter = new PrintWriter(fileWriter)) {\r\n            \r\n            String timestamp = LocalDateTime.now().format(DATE_FORMATTER);\r\n            printWriter.println(timestamp + \" - DEBUG: \" + debug);\r\n        } catch (IOException e) {\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "fileWriter",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "LOG_FILE",
                        "type": "String",
                        "context": "\r\n    public static void logEvent(String event) {\r\n        try (FileWriter fileWriter = new FileWriter(LOG_FILE, true);\r\n             PrintWriter printWriter = new PrintWriter(fileWriter)) {\r\n            \r\n | \r\n    public static void logError(String error) {\r\n        try (FileWriter fileWriter = new FileWriter(LOG_FILE, true);\r\n             PrintWriter printWriter = new PrintWriter(fileWriter)) {\r\n            \r\n | \r\n    public static void logInfo(String info) {\r\n        try (FileWriter fileWriter = new FileWriter(LOG_FILE, true);\r\n             PrintWriter printWriter = new PrintWriter(fileWriter)) {\r\n            \r\n | \r\n    public static void logDebug(String debug) {\r\n        try (FileWriter fileWriter = new FileWriter(LOG_FILE, true);\r\n             PrintWriter printWriter = new PrintWriter(fileWriter)) {\r\n            \r\n",
                        "nextNode": "new FileWriter(LOG_FILE, true)"
                    },
                    {
                        "name": "new FileWriter(LOG_FILE, true)",
                        "type": "FileWriter",
                        "context": "\r\n    public static void logEvent(String event) {\r\n        try (FileWriter fileWriter = new FileWriter(LOG_FILE, true);\r\n             PrintWriter printWriter = new PrintWriter(fileWriter)) {\r\n            \r\n | \r\n    public static void logError(String error) {\r\n        try (FileWriter fileWriter = new FileWriter(LOG_FILE, true);\r\n             PrintWriter printWriter = new PrintWriter(fileWriter)) {\r\n            \r\n | \r\n    public static void logInfo(String info) {\r\n        try (FileWriter fileWriter = new FileWriter(LOG_FILE, true);\r\n             PrintWriter printWriter = new PrintWriter(fileWriter)) {\r\n            \r\n | \r\n    public static void logDebug(String debug) {\r\n        try (FileWriter fileWriter = new FileWriter(LOG_FILE, true);\r\n             PrintWriter printWriter = new PrintWriter(fileWriter)) {\r\n            \r\n",
                        "nextNode": "fileWriter"
                    },
                    {
                        "name": "fileWriter",
                        "type": "Dataflow from `LOG_FILE` to `fileWriter`\nDataflow from `\"event_chronicle.log\"` to `fileWriter`\nDataflow from `new FileWriter(...)` to `fileWriter`\nDataflow from `true` to `fileWriter`",
                        "context": "    public static void logEvent(String event) {\r\n        try (FileWriter fileWriter = new FileWriter(LOG_FILE, true);\r\n             PrintWriter printWriter = new PrintWriter(fileWriter)) {\r\n            \r\n            String timestamp = LocalDateTime.now().format(DATE_FORMATTER);\r\n |     public static void logError(String error) {\r\n        try (FileWriter fileWriter = new FileWriter(LOG_FILE, true);\r\n             PrintWriter printWriter = new PrintWriter(fileWriter)) {\r\n            \r\n            String timestamp = LocalDateTime.now().format(DATE_FORMATTER);\r\n |     public static void logInfo(String info) {\r\n        try (FileWriter fileWriter = new FileWriter(LOG_FILE, true);\r\n             PrintWriter printWriter = new PrintWriter(fileWriter)) {\r\n            \r\n            String timestamp = LocalDateTime.now().format(DATE_FORMATTER);\r\n |     public static void logDebug(String debug) {\r\n        try (FileWriter fileWriter = new FileWriter(LOG_FILE, true);\r\n             PrintWriter printWriter = new PrintWriter(fileWriter)) {\r\n            \r\n            String timestamp = LocalDateTime.now().format(DATE_FORMATTER);\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "event",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "ssn",
                        "type": "String",
                        "context": "public class BAD_RegistrationService {\r\n    public void registerUser(String name, String email, String ssn) {\r\n        EventChronicle.logEvent(\"New user registered: Name - \" + name + \", Email - \" + email + \", SSN - \" + ssn);\r\n    }\r\n}\r\n",
                        "nextNode": "\"New user registered: Name - \" + name + \", Email - \" + email + \", SSN - \" + ssn"
                    },
                    {
                        "name": "\"New user registered: Name - \" + name + \", Email - \" + email + \", SSN - \" + ssn",
                        "type": "String",
                        "context": "public class BAD_RegistrationService {\r\n    public void registerUser(String name, String email, String ssn) {\r\n        EventChronicle.logEvent(\"New user registered: Name - \" + name + \", Email - \" + email + \", SSN - \" + ssn);\r\n    }\r\n}\r\n",
                        "nextNode": "String event"
                    },
                    {
                        "name": "String event",
                        "type": "String",
                        "context": "    private static final DateTimeFormatter DATE_FORMATTER = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\");\r\n\r\n    public static void logEvent(String event) {\r\n        try (FileWriter fileWriter = new FileWriter(LOG_FILE, true);\r\n             PrintWriter printWriter = new PrintWriter(fileWriter)) {\r\n",
                        "nextNode": "event"
                    },
                    {
                        "name": "event",
                        "type": "Dataflow from `ssn` to `event`\nDataflow from `email` to `event`\nDataflow from `name` to `event`\nDataflow from `\", SSN - \"` to `event`\nDataflow from `\", Email - \"` to `event`\nDataflow from `\"New user registered: Name - \"` to `event`\nDataflow from `\"Application started\"` to `event`",
                        "context": "            \r\n            String timestamp = LocalDateTime.now().format(DATE_FORMATTER);\r\n            printWriter.println(timestamp + \" - \" + event);\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "error",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "\"This is an error message\"",
                        "type": "String",
                        "context": "        EventChronicle.logInfo(\"This is an info message\");\r\n        EventChronicle.logDebug(\"This is a debug message\");\r\n        EventChronicle.logError(\"This is an error message\");\r\n    }\r\n}\r\n",
                        "nextNode": "String error"
                    },
                    {
                        "name": "String error",
                        "type": "String",
                        "context": "    }\r\n\r\n    public static void logError(String error) {\r\n        try (FileWriter fileWriter = new FileWriter(LOG_FILE, true);\r\n             PrintWriter printWriter = new PrintWriter(fileWriter)) {\r\n",
                        "nextNode": "error"
                    },
                    {
                        "name": "error",
                        "type": "Dataflow from `\"This is an error message\"` to `error`",
                        "context": "            \r\n            String timestamp = LocalDateTime.now().format(DATE_FORMATTER);\r\n            printWriter.println(timestamp + \" - ERROR: \" + error);\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "LOG_FILE",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "\"event_chronicle.log\"",
                        "type": "String",
                        "context": "public class EventChronicle {\r\n\r\n    private static final String LOG_FILE = \"event_chronicle.log\";\r\n    private static final DateTimeFormatter DATE_FORMATTER = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\");\r\n\r\n | public class EventChronicle {\r\n\r\n    private static final String LOG_FILE = \"event_chronicle.log\";\r\n    private static final DateTimeFormatter DATE_FORMATTER = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\");\r\n\r\n | public class EventChronicle {\r\n\r\n    private static final String LOG_FILE = \"event_chronicle.log\";\r\n    private static final DateTimeFormatter DATE_FORMATTER = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\");\r\n\r\n | public class EventChronicle {\r\n\r\n    private static final String LOG_FILE = \"event_chronicle.log\";\r\n    private static final DateTimeFormatter DATE_FORMATTER = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\");\r\n\r\n",
                        "nextNode": "LOG_FILE"
                    },
                    {
                        "name": "LOG_FILE",
                        "type": "String",
                        "context": "public class EventChronicle {\r\n\r\n    private static final String LOG_FILE = \"event_chronicle.log\";\r\n    private static final DateTimeFormatter DATE_FORMATTER = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\");\r\n\r\n | \r\n    public static void logEvent(String event) {\r\n        try (FileWriter fileWriter = new FileWriter(LOG_FILE, true);\r\n             PrintWriter printWriter = new PrintWriter(fileWriter)) {\r\n            \r\n | public class EventChronicle {\r\n\r\n    private static final String LOG_FILE = \"event_chronicle.log\";\r\n    private static final DateTimeFormatter DATE_FORMATTER = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\");\r\n\r\n | \r\n    public static void logError(String error) {\r\n        try (FileWriter fileWriter = new FileWriter(LOG_FILE, true);\r\n             PrintWriter printWriter = new PrintWriter(fileWriter)) {\r\n            \r\n | public class EventChronicle {\r\n\r\n    private static final String LOG_FILE = \"event_chronicle.log\";\r\n    private static final DateTimeFormatter DATE_FORMATTER = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\");\r\n\r\n | \r\n    public static void logInfo(String info) {\r\n        try (FileWriter fileWriter = new FileWriter(LOG_FILE, true);\r\n             PrintWriter printWriter = new PrintWriter(fileWriter)) {\r\n            \r\n | public class EventChronicle {\r\n\r\n    private static final String LOG_FILE = \"event_chronicle.log\";\r\n    private static final DateTimeFormatter DATE_FORMATTER = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\");\r\n\r\n | \r\n    public static void logDebug(String debug) {\r\n        try (FileWriter fileWriter = new FileWriter(LOG_FILE, true);\r\n             PrintWriter printWriter = new PrintWriter(fileWriter)) {\r\n            \r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "timestamp",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "DATE_FORMATTER",
                        "type": "DateTimeFormatter",
                        "context": "             PrintWriter printWriter = new PrintWriter(fileWriter)) {\r\n            \r\n            String timestamp = LocalDateTime.now().format(DATE_FORMATTER);\r\n            printWriter.println(timestamp + \" - \" + event);\r\n        } catch (IOException e) {\r\n |              PrintWriter printWriter = new PrintWriter(fileWriter)) {\r\n            \r\n            String timestamp = LocalDateTime.now().format(DATE_FORMATTER);\r\n            printWriter.println(timestamp + \" - ERROR: \" + error);\r\n        } catch (IOException e) {\r\n |              PrintWriter printWriter = new PrintWriter(fileWriter)) {\r\n            \r\n            String timestamp = LocalDateTime.now().format(DATE_FORMATTER);\r\n            printWriter.println(timestamp + \" - INFO: \" + info);\r\n        } catch (IOException e) {\r\n |              PrintWriter printWriter = new PrintWriter(fileWriter)) {\r\n            \r\n            String timestamp = LocalDateTime.now().format(DATE_FORMATTER);\r\n            printWriter.println(timestamp + \" - DEBUG: \" + debug);\r\n        } catch (IOException e) {\r\n",
                        "nextNode": "LocalDateTime.now().format(DATE_FORMATTER)"
                    },
                    {
                        "name": "LocalDateTime.now().format(DATE_FORMATTER)",
                        "type": "String",
                        "context": "             PrintWriter printWriter = new PrintWriter(fileWriter)) {\r\n            \r\n            String timestamp = LocalDateTime.now().format(DATE_FORMATTER);\r\n            printWriter.println(timestamp + \" - \" + event);\r\n        } catch (IOException e) {\r\n |              PrintWriter printWriter = new PrintWriter(fileWriter)) {\r\n            \r\n            String timestamp = LocalDateTime.now().format(DATE_FORMATTER);\r\n            printWriter.println(timestamp + \" - ERROR: \" + error);\r\n        } catch (IOException e) {\r\n |              PrintWriter printWriter = new PrintWriter(fileWriter)) {\r\n            \r\n            String timestamp = LocalDateTime.now().format(DATE_FORMATTER);\r\n            printWriter.println(timestamp + \" - INFO: \" + info);\r\n        } catch (IOException e) {\r\n |              PrintWriter printWriter = new PrintWriter(fileWriter)) {\r\n            \r\n            String timestamp = LocalDateTime.now().format(DATE_FORMATTER);\r\n            printWriter.println(timestamp + \" - DEBUG: \" + debug);\r\n        } catch (IOException e) {\r\n",
                        "nextNode": "timestamp"
                    },
                    {
                        "name": "timestamp",
                        "type": "Dataflow from `DATE_FORMATTER` to `timestamp`\nDataflow from `ofPattern(...)` to `timestamp`\nDataflow from `format(...)` to `timestamp`\nDataflow from `\"yyyy-MM-dd HH:mm:ss\"` to `timestamp`",
                        "context": "            \r\n            String timestamp = LocalDateTime.now().format(DATE_FORMATTER);\r\n            printWriter.println(timestamp + \" - \" + event);\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n |             \r\n            String timestamp = LocalDateTime.now().format(DATE_FORMATTER);\r\n            printWriter.println(timestamp + \" - ERROR: \" + error);\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n |             \r\n            String timestamp = LocalDateTime.now().format(DATE_FORMATTER);\r\n            printWriter.println(timestamp + \" - INFO: \" + info);\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n |             \r\n            String timestamp = LocalDateTime.now().format(DATE_FORMATTER);\r\n            printWriter.println(timestamp + \" - DEBUG: \" + debug);\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "info",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "\"This is an info message\"",
                        "type": "String",
                        "context": "    public static void main(String[] args) {\r\n        EventChronicle.logEvent(\"Application started\");\r\n        EventChronicle.logInfo(\"This is an info message\");\r\n        EventChronicle.logDebug(\"This is a debug message\");\r\n        EventChronicle.logError(\"This is an error message\");\r\n",
                        "nextNode": "String info"
                    },
                    {
                        "name": "String info",
                        "type": "String",
                        "context": "    }\r\n\r\n    public static void logInfo(String info) {\r\n        try (FileWriter fileWriter = new FileWriter(LOG_FILE, true);\r\n             PrintWriter printWriter = new PrintWriter(fileWriter)) {\r\n",
                        "nextNode": "info"
                    },
                    {
                        "name": "info",
                        "type": "Dataflow from `\"This is an info message\"` to `info`",
                        "context": "            \r\n            String timestamp = LocalDateTime.now().format(DATE_FORMATTER);\r\n            printWriter.println(timestamp + \" - INFO: \" + info);\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "- ERROR:",
                "isSensitive": "no"
            },
            {
                "name": "- INFO:",
                "isSensitive": "no"
            },
            {
                "name": "event_chronicle.log",
                "isSensitive": "no"
            },
            {
                "name": "yyyy-MM-dd HH:mm:ss",
                "isSensitive": "no"
            },
            {
                "name": "Application started",
                "isSensitive": "no"
            },
            {
                "name": "This is an error message",
                "isSensitive": "no"
            },
            {
                "name": "This is a debug message",
                "isSensitive": "no"
            },
            {
                "name": "- DEBUG:",
                "isSensitive": "no"
            },
            {
                "name": "This is an info message",
                "isSensitive": "no"
            },
            {
                "name": "-",
                "isSensitive": "no"
            }
        ],
        "comments": [],
        "sinks": [
            {
                "name": "println",
                "isSink": "yes"
            },
            {
                "name": "logError",
                "isSink": "no"
            },
            {
                "name": "printStackTrace",
                "isSink": "yes"
            },
            {
                "name": "now",
                "isSink": "no"
            },
            {
                "name": "format",
                "isSink": "no"
            },
            {
                "name": "logInfo",
                "isSink": "no"
            },
            {
                "name": "ofPattern",
                "isSink": "no"
            },
            {
                "name": "logDebug",
                "isSink": "no"
            },
            {
                "name": "logEvent",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "MyCustomLogger.java",
        "variables": [
            {
                "name": "message",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "methodName",
                        "type": "String",
                        "context": "   \r\n    public void logAPIUsage(String apiKey, String methodName) {\r\n        MyCustomLogger.logInfo(\"API usage: Key: \" + apiKey + \", Method: \" + methodName);\r\n    }\r\n    \r\n",
                        "nextNode": "\"API usage: Key: \" + apiKey + \", Method: \" + methodName"
                    },
                    {
                        "name": "\"API usage: Key: \" + apiKey + \", Method: \" + methodName",
                        "type": "String",
                        "context": "   \r\n    public void logAPIUsage(String apiKey, String methodName) {\r\n        MyCustomLogger.logInfo(\"API usage: Key: \" + apiKey + \", Method: \" + methodName);\r\n    }\r\n    \r\n",
                        "nextNode": "String message"
                    },
                    {
                        "name": "String message",
                        "type": "String",
                        "context": "public class MyCustomLogger {\r\n\r\n    public static void logInfo(String message) {\r\n        System.out.println(\"INFO: \" + message);\r\n    }\r\n",
                        "nextNode": "message"
                    },
                    {
                        "name": "message",
                        "type": "Dataflow from `methodName` to `message`\nDataflow from `apiKey` to `message`\nDataflow from `\", Method: \"` to `message`\nDataflow from `\"API usage: Key: \"` to `message`",
                        "context": "\r\n    public static void logInfo(String message) {\r\n        System.out.println(\"INFO: \" + message);\r\n    }\r\n\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "DEBUG:",
                "isSensitive": "no"
            },
            {
                "name": "INFO:",
                "isSensitive": "no"
            },
            {
                "name": "ERROR:",
                "isSensitive": "no"
            }
        ],
        "comments": [],
        "sinks": [
            {
                "name": "println",
                "isSink": "yes"
            }
        ]
    },
    {
        "fileName": "SignalCatcher.java",
        "variables": [
            {
                "name": "signal",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "decryptionKey",
                        "type": "String",
                        "context": "public class BAD_SecurityHandler {\r\n    public void handleSecurityEvent(String eventType, String decryptionKey) {\r\n        SignalCatcher.logSignal(\"Security event: \" + eventType + \" using Key: \" + decryptionKey);\r\n    }\r\n}\r\n",
                        "nextNode": "\"Security event: \" + eventType + \" using Key: \" + decryptionKey"
                    },
                    {
                        "name": "\"Security event: \" + eventType + \" using Key: \" + decryptionKey",
                        "type": "String",
                        "context": "public class BAD_SecurityHandler {\r\n    public void handleSecurityEvent(String eventType, String decryptionKey) {\r\n        SignalCatcher.logSignal(\"Security event: \" + eventType + \" using Key: \" + decryptionKey);\r\n    }\r\n}\r\n",
                        "nextNode": "String signal"
                    },
                    {
                        "name": "String signal",
                        "type": "String",
                        "context": "public class SignalCatcher {\r\n    public static void logSignal(String signal) {\r\n        System.out.println(\"Signal Caught: \" + signal);\r\n    }\r\n",
                        "nextNode": "signal"
                    },
                    {
                        "name": "signal",
                        "type": "Dataflow from `decryptionKey` to `signal`\nDataflow from `eventType` to `signal`\nDataflow from `\" using Key: \"` to `signal`\nDataflow from `\"Security event: \"` to `signal`",
                        "context": "public class SignalCatcher {\r\n    public static void logSignal(String signal) {\r\n        System.out.println(\"Signal Caught: \" + signal);\r\n    }\r\n}\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "Signal Caught:",
                "isSensitive": "no"
            }
        ],
        "comments": [],
        "sinks": [
            {
                "name": "println",
                "isSink": "yes"
            }
        ]
    },
    {
        "fileName": "TraceKeeper.java",
        "variables": [
            {
                "name": "methodName",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "token",
                        "type": "String",
                        "context": "public class BAD_SessionManager {\r\n    public void startSession(String userId, String token) {\r\n        TraceKeeper.enterMethod(\"Session started for UserID: \" + userId + \" with Token: \" + token);\r\n        // Session logic\r\n        TraceKeeper.exitMethod(\"Session ended for UserID: \" + userId);\r\n",
                        "nextNode": "\"Session started for UserID: \" + userId + \" with Token: \" + token"
                    },
                    {
                        "name": "\"Session started for UserID: \" + userId + \" with Token: \" + token",
                        "type": "String",
                        "context": "public class BAD_SessionManager {\r\n    public void startSession(String userId, String token) {\r\n        TraceKeeper.enterMethod(\"Session started for UserID: \" + userId + \" with Token: \" + token);\r\n        // Session logic\r\n        TraceKeeper.exitMethod(\"Session ended for UserID: \" + userId);\r\n",
                        "nextNode": "String methodName"
                    },
                    {
                        "name": "\"Session ended for UserID: \" + userId",
                        "type": "String",
                        "context": "        TraceKeeper.enterMethod(\"Session started for UserID: \" + userId + \" with Token: \" + token);\r\n        // Session logic\r\n        TraceKeeper.exitMethod(\"Session ended for UserID: \" + userId);\r\n    }\r\n}\r\n",
                        "nextNode": "String methodName"
                    },
                    {
                        "name": "String methodName",
                        "type": "String",
                        "context": "public class TraceKeeper {\r\n    public static void enterMethod(String methodName) {\r\n        System.out.println(\"Entering Method: \" + methodName);\r\n    }\r\n |     }\r\n\r\n    public static void exitMethod(String methodName) {\r\n        System.out.println(\"Exiting Method: \" + methodName);\r\n    }\r\n",
                        "nextNode": "methodName"
                    },
                    {
                        "name": "methodName",
                        "type": "Dataflow from `token` to `methodName`\nDataflow from `userId` to `methodName`\nDataflow from `\" with Token: \"` to `methodName`\nDataflow from `\"Session started for UserID: \"` to `methodName`",
                        "context": "public class TraceKeeper {\r\n    public static void enterMethod(String methodName) {\r\n        System.out.println(\"Entering Method: \" + methodName);\r\n    }\r\n\r\n | \r\n    public static void exitMethod(String methodName) {\r\n        System.out.println(\"Exiting Method: \" + methodName);\r\n    }\r\n}\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "Exiting Method:",
                "isSensitive": "no"
            },
            {
                "name": "Entering Method:",
                "isSensitive": "no"
            }
        ],
        "comments": [],
        "sinks": [
            {
                "name": "println",
                "isSink": "yes"
            }
        ]
    },
    {
        "fileName": "BAD_APIKeyRegenerator.java",
        "variables": [
            {
                "name": "errorReader",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "new BufferedReader(new InputStreamReader(process.getErrorStream()",
                        "type": "BufferedReader",
                        "context": "        try {\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n            String error;\r\n\r\n",
                        "nextNode": "errorReader"
                    },
                    {
                        "name": "errorReader",
                        "type": "Dataflow from `new BufferedReader(...)` to `errorReader`\nDataflow from `new InputStreamReader(...)` to `errorReader`\nDataflow from `getErrorStream(...)` to `errorReader`",
                        "context": "            String error;\r\n\r\n            while ((error = errorReader.readLine()) != null) {\r\n                System.err.println(\"API key regeneration error for key \" + apiKey + \": \" + error);\r\n            }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "process",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "apiKey",
                        "type": "String",
                        "context": "\r\n    public static void regenerateAPIKey(String apiKey) {\r\n        String command = \"regenerate_api_key --api-key \" + apiKey;\r\n\r\n        try {\r\n | \r\n    public static void regenerateAPIKey(String apiKey) {\r\n        String command = \"regenerate_api_key --api-key \" + apiKey;\r\n\r\n        try {\r\n",
                        "nextNode": "\"regenerate_api_key --api-key \" + apiKey"
                    },
                    {
                        "name": "\"regenerate_api_key --api-key \" + apiKey",
                        "type": "String",
                        "context": "\r\n    public static void regenerateAPIKey(String apiKey) {\r\n        String command = \"regenerate_api_key --api-key \" + apiKey;\r\n\r\n        try {\r\n | \r\n    public static void regenerateAPIKey(String apiKey) {\r\n        String command = \"regenerate_api_key --api-key \" + apiKey;\r\n\r\n        try {\r\n",
                        "nextNode": "command"
                    },
                    {
                        "name": "command",
                        "type": "String",
                        "context": "\r\n        try {\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n            String error;\r\n | \r\n        try {\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n            String error;\r\n",
                        "nextNode": "Runtime.getRuntime().exec(command)"
                    },
                    {
                        "name": "Runtime.getRuntime().exec(command)",
                        "type": "Process",
                        "context": "\r\n        try {\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n            String error;\r\n | \r\n        try {\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n            String error;\r\n",
                        "nextNode": "process"
                    },
                    {
                        "name": "process",
                        "type": "Dataflow from `apiKey` to `process`\nDataflow from `command` to `process`\nDataflow from `\"regenerate_api_key --api-key \"` to `process`\nDataflow from `exec(...)` to `process`",
                        "context": "        try {\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n            String error;\r\n\r\n |         try {\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n            String error;\r\n\r\n |             }\r\n\r\n            if (process.waitFor() != 0) {\r\n                System.err.println(\"API key regeneration failed for key: \" + apiKey);\r\n            }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "apiKey",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "e",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "error",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "errorReader",
                        "type": "BufferedReader",
                        "context": "            String error;\r\n\r\n            while ((error = errorReader.readLine()) != null) {\r\n                System.err.println(\"API key regeneration error for key \" + apiKey + \": \" + error);\r\n            }\r\n",
                        "nextNode": "errorReader.readLine()"
                    },
                    {
                        "name": "errorReader.readLine()",
                        "type": "String",
                        "context": "            String error;\r\n\r\n            while ((error = errorReader.readLine()) != null) {\r\n                System.err.println(\"API key regeneration error for key \" + apiKey + \": \" + error);\r\n            }\r\n",
                        "nextNode": "error"
                    },
                    {
                        "name": "error",
                        "type": "Dataflow from `errorReader` to `error`\nDataflow from `readLine(...)` to `error`\nDataflow from `new BufferedReader(...)` to `error`\nDataflow from `new InputStreamReader(...)` to `error`\nDataflow from `getErrorStream(...)` to `error`",
                        "context": "\r\n            while ((error = errorReader.readLine()) != null) {\r\n                System.err.println(\"API key regeneration error for key \" + apiKey + \": \" + error);\r\n            }\r\n\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "command",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "apiKey",
                        "type": "String",
                        "context": "\r\n    public static void regenerateAPIKey(String apiKey) {\r\n        String command = \"regenerate_api_key --api-key \" + apiKey;\r\n\r\n        try {\r\n",
                        "nextNode": "\"regenerate_api_key --api-key \" + apiKey"
                    },
                    {
                        "name": "\"regenerate_api_key --api-key \" + apiKey",
                        "type": "String",
                        "context": "\r\n    public static void regenerateAPIKey(String apiKey) {\r\n        String command = \"regenerate_api_key --api-key \" + apiKey;\r\n\r\n        try {\r\n",
                        "nextNode": "command"
                    },
                    {
                        "name": "command",
                        "type": "Dataflow from `apiKey` to `command`\nDataflow from `\"regenerate_api_key --api-key \"` to `command`",
                        "context": "\r\n        try {\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n            String error;\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "regenerate_api_key --api-key",
                "isSensitive": "yes"
            },
            {
                "name": "API key regeneration failed for key:",
                "isSensitive": "no"
            },
            {
                "name": "API key regeneration error for key",
                "isSensitive": "no"
            },
            {
                "name": ":",
                "isSensitive": "no"
            }
        ],
        "comments": [],
        "sinks": [
            {
                "name": "println",
                "isSink": "yes"
            },
            {
                "name": "getErrorStream",
                "isSink": "no"
            },
            {
                "name": "readLine",
                "isSink": "no"
            },
            {
                "name": "getRuntime",
                "isSink": "no"
            },
            {
                "name": "waitFor",
                "isSink": "no"
            },
            {
                "name": "exec",
                "isSink": "yes"
            }
        ]
    },
    {
        "fileName": "BAD_APIKeyUpdater.java",
        "variables": [
            {
                "name": "errorReader",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "new BufferedReader(new InputStreamReader(process.getErrorStream()",
                        "type": "BufferedReader",
                        "context": "            int exitCode = process.waitFor();\r\n            if (exitCode != 0) {\r\n                BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n                System.err.println(\"API Key update failed: \" + errorReader.readLine() + \". Command attempted: \" + updateCommand);\r\n            }\r\n",
                        "nextNode": "errorReader"
                    },
                    {
                        "name": "errorReader",
                        "type": "Dataflow from `new BufferedReader(...)` to `errorReader`\nDataflow from `new InputStreamReader(...)` to `errorReader`\nDataflow from `getErrorStream(...)` to `errorReader`",
                        "context": "            if (exitCode != 0) {\r\n                BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n                System.err.println(\"API Key update failed: \" + errorReader.readLine() + \". Command attempted: \" + updateCommand);\r\n            }\r\n        } catch (IOException | InterruptedException e) {\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "process",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "apiKey",
                        "type": "String",
                        "context": "    public static void updateAPIKey(String updateCommand, String apiKey) {\r\n        try {\r\n            Process process = Runtime.getRuntime().exec(updateCommand + \" \" + apiKey);\r\n            int exitCode = process.waitFor();\r\n            if (exitCode != 0) {\r\n |     public static void updateAPIKey(String updateCommand, String apiKey) {\r\n        try {\r\n            Process process = Runtime.getRuntime().exec(updateCommand + \" \" + apiKey);\r\n            int exitCode = process.waitFor();\r\n            if (exitCode != 0) {\r\n",
                        "nextNode": "updateCommand + \" \" + apiKey"
                    },
                    {
                        "name": "updateCommand + \" \" + apiKey",
                        "type": "String",
                        "context": "    public static void updateAPIKey(String updateCommand, String apiKey) {\r\n        try {\r\n            Process process = Runtime.getRuntime().exec(updateCommand + \" \" + apiKey);\r\n            int exitCode = process.waitFor();\r\n            if (exitCode != 0) {\r\n |     public static void updateAPIKey(String updateCommand, String apiKey) {\r\n        try {\r\n            Process process = Runtime.getRuntime().exec(updateCommand + \" \" + apiKey);\r\n            int exitCode = process.waitFor();\r\n            if (exitCode != 0) {\r\n",
                        "nextNode": "Runtime.getRuntime().exec(updateCommand + \" \" + apiKey)"
                    },
                    {
                        "name": "Runtime.getRuntime().exec(updateCommand + \" \" + apiKey)",
                        "type": "Process",
                        "context": "    public static void updateAPIKey(String updateCommand, String apiKey) {\r\n        try {\r\n            Process process = Runtime.getRuntime().exec(updateCommand + \" \" + apiKey);\r\n            int exitCode = process.waitFor();\r\n            if (exitCode != 0) {\r\n |     public static void updateAPIKey(String updateCommand, String apiKey) {\r\n        try {\r\n            Process process = Runtime.getRuntime().exec(updateCommand + \" \" + apiKey);\r\n            int exitCode = process.waitFor();\r\n            if (exitCode != 0) {\r\n",
                        "nextNode": "process"
                    },
                    {
                        "name": "process",
                        "type": "Dataflow from `apiKey` to `process`\nDataflow from `updateCommand` to `process`\nDataflow from `exec(...)` to `process`\nDataflow from `\" \"` to `process`",
                        "context": "        try {\r\n            Process process = Runtime.getRuntime().exec(updateCommand + \" \" + apiKey);\r\n            int exitCode = process.waitFor();\r\n            if (exitCode != 0) {\r\n                BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n |         try {\r\n            Process process = Runtime.getRuntime().exec(updateCommand + \" \" + apiKey);\r\n            int exitCode = process.waitFor();\r\n            if (exitCode != 0) {\r\n                BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n |             int exitCode = process.waitFor();\r\n            if (exitCode != 0) {\r\n                BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n                System.err.println(\"API Key update failed: \" + errorReader.readLine() + \". Command attempted: \" + updateCommand);\r\n            }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "apiKey",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "e",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "exitCode",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "process.waitFor()",
                        "type": "Number",
                        "context": "        try {\r\n            Process process = Runtime.getRuntime().exec(updateCommand + \" \" + apiKey);\r\n            int exitCode = process.waitFor();\r\n            if (exitCode != 0) {\r\n                BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n",
                        "nextNode": "exitCode"
                    },
                    {
                        "name": "exitCode",
                        "type": "Dataflow from `waitFor(...)` to `exitCode`",
                        "context": "            Process process = Runtime.getRuntime().exec(updateCommand + \" \" + apiKey);\r\n            int exitCode = process.waitFor();\r\n            if (exitCode != 0) {\r\n                BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n                System.err.println(\"API Key update failed: \" + errorReader.readLine() + \". Command attempted: \" + updateCommand);\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "updateCommand",
                "isSensitive": "yes",
                "graph": []
            }
        ],
        "strings": [
            {
                "name": "Error updating API key:",
                "isSensitive": "no"
            },
            {
                "name": "API Key update failed:",
                "isSensitive": "no"
            },
            {
                "name": ". Command attempted:",
                "isSensitive": "no"
            }
        ],
        "comments": [],
        "sinks": [
            {
                "name": "println",
                "isSink": "yes"
            },
            {
                "name": "getErrorStream",
                "isSink": "no"
            },
            {
                "name": "getMessage",
                "isSink": "no"
            },
            {
                "name": "readLine",
                "isSink": "no"
            },
            {
                "name": "getRuntime",
                "isSink": "no"
            },
            {
                "name": "waitFor",
                "isSink": "no"
            },
            {
                "name": "exec",
                "isSink": "yes"
            }
        ]
    },
    {
        "fileName": "BAD_CredentialUpdater.java",
        "variables": [
            {
                "name": "errorReader",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "new BufferedReader(new InputStreamReader(process.getErrorStream()",
                        "type": "BufferedReader",
                        "context": "\r\n            if (exitCode != 0) {\r\n                BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n                String errorDetails = errorReader.readLine();\r\n                System.err.println(\"Failed to update credentials for \" + username + \": \" + errorDetails);\r\n",
                        "nextNode": "errorReader"
                    },
                    {
                        "name": "errorReader",
                        "type": "Dataflow from `new BufferedReader(...)` to `errorReader`\nDataflow from `new InputStreamReader(...)` to `errorReader`\nDataflow from `getErrorStream(...)` to `errorReader`",
                        "context": "            if (exitCode != 0) {\r\n                BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n                String errorDetails = errorReader.readLine();\r\n                System.err.println(\"Failed to update credentials for \" + username + \": \" + errorDetails);\r\n                response.getWriter().write(\"Failed to update credentials. Please contact system administrator.\");\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "request",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "password",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "request.getParameter(\"password\")",
                        "type": "String",
                        "context": "    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\r\n        String username = request.getParameter(\"username\");\r\n        String password = request.getParameter(\"password\");\r\n        String command = \"/usr/bin/updatePassword \" + username + \" \" + password;\r\n\r\n",
                        "nextNode": "password"
                    },
                    {
                        "name": "password",
                        "type": "Dataflow from `getParameter(...)` to `password`\nDataflow from `\"password\"` to `password`",
                        "context": "        String username = request.getParameter(\"username\");\r\n        String password = request.getParameter(\"password\");\r\n        String command = \"/usr/bin/updatePassword \" + username + \" \" + password;\r\n\r\n        try {\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "process",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "password",
                        "type": "String",
                        "context": "        String username = request.getParameter(\"username\");\r\n        String password = request.getParameter(\"password\");\r\n        String command = \"/usr/bin/updatePassword \" + username + \" \" + password;\r\n\r\n        try {\r\n |         String username = request.getParameter(\"username\");\r\n        String password = request.getParameter(\"password\");\r\n        String command = \"/usr/bin/updatePassword \" + username + \" \" + password;\r\n\r\n        try {\r\n",
                        "nextNode": "\"/usr/bin/updatePassword \" + username + \" \" + password"
                    },
                    {
                        "name": "\"/usr/bin/updatePassword \" + username + \" \" + password",
                        "type": "String",
                        "context": "        String username = request.getParameter(\"username\");\r\n        String password = request.getParameter(\"password\");\r\n        String command = \"/usr/bin/updatePassword \" + username + \" \" + password;\r\n\r\n        try {\r\n |         String username = request.getParameter(\"username\");\r\n        String password = request.getParameter(\"password\");\r\n        String command = \"/usr/bin/updatePassword \" + username + \" \" + password;\r\n\r\n        try {\r\n",
                        "nextNode": "command"
                    },
                    {
                        "name": "command",
                        "type": "String",
                        "context": "\r\n        try {\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            int exitCode = process.waitFor();\r\n\r\n | \r\n        try {\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            int exitCode = process.waitFor();\r\n\r\n",
                        "nextNode": "Runtime.getRuntime().exec(command)"
                    },
                    {
                        "name": "Runtime.getRuntime().exec(command)",
                        "type": "Process",
                        "context": "\r\n        try {\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            int exitCode = process.waitFor();\r\n\r\n | \r\n        try {\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            int exitCode = process.waitFor();\r\n\r\n",
                        "nextNode": "process"
                    },
                    {
                        "name": "process",
                        "type": "Dataflow from `password` to `process`\nDataflow from `username` to `process`\nDataflow from `command` to `process`\nDataflow from `getParameter(...)` to `process`\nDataflow from `getParameter(...)` to `process`\nDataflow from `\" \"` to `process`\nDataflow from `\"/usr/bin/updatePassword \"` to `process`\nDataflow from `exec(...)` to `process`\nDataflow from `\"username\"` to `process`\nDataflow from `\"password\"` to `process`",
                        "context": "        try {\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            int exitCode = process.waitFor();\r\n\r\n            if (exitCode != 0) {\r\n |         try {\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            int exitCode = process.waitFor();\r\n\r\n            if (exitCode != 0) {\r\n | \r\n            if (exitCode != 0) {\r\n                BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n                String errorDetails = errorReader.readLine();\r\n                System.err.println(\"Failed to update credentials for \" + username + \": \" + errorDetails);\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "e",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "response",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "exitCode",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "process.waitFor()",
                        "type": "Number",
                        "context": "        try {\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            int exitCode = process.waitFor();\r\n\r\n            if (exitCode != 0) {\r\n",
                        "nextNode": "exitCode"
                    },
                    {
                        "name": "exitCode",
                        "type": "Dataflow from `waitFor(...)` to `exitCode`",
                        "context": "            int exitCode = process.waitFor();\r\n\r\n            if (exitCode != 0) {\r\n                BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n                String errorDetails = errorReader.readLine();\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "command",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "password",
                        "type": "String",
                        "context": "        String username = request.getParameter(\"username\");\r\n        String password = request.getParameter(\"password\");\r\n        String command = \"/usr/bin/updatePassword \" + username + \" \" + password;\r\n\r\n        try {\r\n",
                        "nextNode": "\"/usr/bin/updatePassword \" + username + \" \" + password"
                    },
                    {
                        "name": "\"/usr/bin/updatePassword \" + username + \" \" + password",
                        "type": "String",
                        "context": "        String username = request.getParameter(\"username\");\r\n        String password = request.getParameter(\"password\");\r\n        String command = \"/usr/bin/updatePassword \" + username + \" \" + password;\r\n\r\n        try {\r\n",
                        "nextNode": "command"
                    },
                    {
                        "name": "command",
                        "type": "Dataflow from `password` to `command`\nDataflow from `username` to `command`\nDataflow from `getParameter(...)` to `command`\nDataflow from `getParameter(...)` to `command`\nDataflow from `\" \"` to `command`\nDataflow from `\"/usr/bin/updatePassword \"` to `command`\nDataflow from `\"username\"` to `command`\nDataflow from `\"password\"` to `command`",
                        "context": "\r\n        try {\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            int exitCode = process.waitFor();\r\n\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "username",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "request.getParameter(\"username\")",
                        "type": "String",
                        "context": "\r\n    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\r\n        String username = request.getParameter(\"username\");\r\n        String password = request.getParameter(\"password\");\r\n        String command = \"/usr/bin/updatePassword \" + username + \" \" + password;\r\n | \r\n    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\r\n        String username = request.getParameter(\"username\");\r\n        String password = request.getParameter(\"password\");\r\n        String command = \"/usr/bin/updatePassword \" + username + \" \" + password;\r\n",
                        "nextNode": "username"
                    },
                    {
                        "name": "username",
                        "type": "Dataflow from `getParameter(...)` to `username`\nDataflow from `\"username\"` to `username`",
                        "context": "        String username = request.getParameter(\"username\");\r\n        String password = request.getParameter(\"password\");\r\n        String command = \"/usr/bin/updatePassword \" + username + \" \" + password;\r\n\r\n        try {\r\n |         String username = request.getParameter(\"username\");\r\n        String password = request.getParameter(\"password\");\r\n        String command = \"/usr/bin/updatePassword \" + username + \" \" + password;\r\n\r\n        try {\r\n |                 BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n                String errorDetails = errorReader.readLine();\r\n                System.err.println(\"Failed to update credentials for \" + username + \": \" + errorDetails);\r\n                response.getWriter().write(\"Failed to update credentials. Please contact system administrator.\");\r\n            }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "errorDetails",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "errorReader",
                        "type": "BufferedReader",
                        "context": "            if (exitCode != 0) {\r\n                BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n                String errorDetails = errorReader.readLine();\r\n                System.err.println(\"Failed to update credentials for \" + username + \": \" + errorDetails);\r\n                response.getWriter().write(\"Failed to update credentials. Please contact system administrator.\");\r\n",
                        "nextNode": "errorReader.readLine()"
                    },
                    {
                        "name": "errorReader.readLine()",
                        "type": "String",
                        "context": "            if (exitCode != 0) {\r\n                BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n                String errorDetails = errorReader.readLine();\r\n                System.err.println(\"Failed to update credentials for \" + username + \": \" + errorDetails);\r\n                response.getWriter().write(\"Failed to update credentials. Please contact system administrator.\");\r\n",
                        "nextNode": "errorDetails"
                    },
                    {
                        "name": "errorDetails",
                        "type": "Dataflow from `errorReader` to `errorDetails`\nDataflow from `readLine(...)` to `errorDetails`\nDataflow from `new BufferedReader(...)` to `errorDetails`\nDataflow from `new InputStreamReader(...)` to `errorDetails`\nDataflow from `getErrorStream(...)` to `errorDetails`",
                        "context": "                BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n                String errorDetails = errorReader.readLine();\r\n                System.err.println(\"Failed to update credentials for \" + username + \": \" + errorDetails);\r\n                response.getWriter().write(\"Failed to update credentials. Please contact system administrator.\");\r\n            }\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "Failed to update credentials. Please contact system administrator.",
                "isSensitive": "no"
            },
            {
                "name": "password",
                "isSensitive": "no"
            },
            {
                "name": "Error updating credentials:",
                "isSensitive": "no"
            },
            {
                "name": ":",
                "isSensitive": "no"
            },
            {
                "name": "/usr/bin/updatePassword",
                "isSensitive": "yes"
            },
            {
                "name": "Failed to update credentials for",
                "isSensitive": "no"
            },
            {
                "name": "username",
                "isSensitive": "no"
            }
        ],
        "comments": [],
        "sinks": [
            {
                "name": "println",
                "isSink": "yes"
            },
            {
                "name": "getErrorStream",
                "isSink": "no"
            },
            {
                "name": "getWriter",
                "isSink": "no"
            },
            {
                "name": "getMessage",
                "isSink": "no"
            },
            {
                "name": "readLine",
                "isSink": "no"
            },
            {
                "name": "getRuntime",
                "isSink": "no"
            },
            {
                "name": "waitFor",
                "isSink": "no"
            },
            {
                "name": "write",
                "isSink": "yes"
            },
            {
                "name": "setStatus",
                "isSink": "no"
            },
            {
                "name": "exec",
                "isSink": "yes"
            },
            {
                "name": "getParameter",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "BAD_DatabaseAccessLogger.java",
        "variables": [
            {
                "name": "errorReader",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "new BufferedReader(new InputStreamReader(process.getErrorStream()",
                        "type": "BufferedReader",
                        "context": "        try {\r\n            Process process = Runtime.getRuntime().exec(dbCommand + \" \" + connectionString);\r\n            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n            StringBuilder errorDetails = new StringBuilder();\r\n            String line;\r\n",
                        "nextNode": "errorReader"
                    },
                    {
                        "name": "errorReader",
                        "type": "Dataflow from `new BufferedReader(...)` to `errorReader`\nDataflow from `new InputStreamReader(...)` to `errorReader`\nDataflow from `getErrorStream(...)` to `errorReader`",
                        "context": "            String line;\r\n\r\n            while ((line = errorReader.readLine()) != null) {\r\n                errorDetails.append(line).append(\"\\n\");\r\n            }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "dbCommand",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "connectionString",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "process",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "connectionString",
                        "type": "String",
                        "context": "    public static void logDatabaseAccess(String dbCommand, String connectionString) {\r\n        try {\r\n            Process process = Runtime.getRuntime().exec(dbCommand + \" \" + connectionString);\r\n            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n            StringBuilder errorDetails = new StringBuilder();\r\n |     public static void logDatabaseAccess(String dbCommand, String connectionString) {\r\n        try {\r\n            Process process = Runtime.getRuntime().exec(dbCommand + \" \" + connectionString);\r\n            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n            StringBuilder errorDetails = new StringBuilder();\r\n",
                        "nextNode": "dbCommand + \" \" + connectionString"
                    },
                    {
                        "name": "dbCommand + \" \" + connectionString",
                        "type": "String",
                        "context": "    public static void logDatabaseAccess(String dbCommand, String connectionString) {\r\n        try {\r\n            Process process = Runtime.getRuntime().exec(dbCommand + \" \" + connectionString);\r\n            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n            StringBuilder errorDetails = new StringBuilder();\r\n |     public static void logDatabaseAccess(String dbCommand, String connectionString) {\r\n        try {\r\n            Process process = Runtime.getRuntime().exec(dbCommand + \" \" + connectionString);\r\n            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n            StringBuilder errorDetails = new StringBuilder();\r\n",
                        "nextNode": "Runtime.getRuntime().exec(dbCommand + \" \" + connectionString)"
                    },
                    {
                        "name": "Runtime.getRuntime().exec(dbCommand + \" \" + connectionString)",
                        "type": "Process",
                        "context": "    public static void logDatabaseAccess(String dbCommand, String connectionString) {\r\n        try {\r\n            Process process = Runtime.getRuntime().exec(dbCommand + \" \" + connectionString);\r\n            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n            StringBuilder errorDetails = new StringBuilder();\r\n |     public static void logDatabaseAccess(String dbCommand, String connectionString) {\r\n        try {\r\n            Process process = Runtime.getRuntime().exec(dbCommand + \" \" + connectionString);\r\n            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n            StringBuilder errorDetails = new StringBuilder();\r\n",
                        "nextNode": "process"
                    },
                    {
                        "name": "process",
                        "type": "Dataflow from `connectionString` to `process`\nDataflow from `dbCommand` to `process`\nDataflow from `exec(...)` to `process`\nDataflow from `\" \"` to `process`",
                        "context": "        try {\r\n            Process process = Runtime.getRuntime().exec(dbCommand + \" \" + connectionString);\r\n            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n            StringBuilder errorDetails = new StringBuilder();\r\n            String line;\r\n |         try {\r\n            Process process = Runtime.getRuntime().exec(dbCommand + \" \" + connectionString);\r\n            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n            StringBuilder errorDetails = new StringBuilder();\r\n            String line;\r\n |             }\r\n\r\n            if (process.waitFor() != 0) {\r\n                System.err.println(\"Database access attempt failed with connection string \" + connectionString + \": \" + errorDetails.toString());\r\n            }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "e",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "line",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "errorReader",
                        "type": "BufferedReader",
                        "context": "            String line;\r\n\r\n            while ((line = errorReader.readLine()) != null) {\r\n                errorDetails.append(line).append(\"\\n\");\r\n            }\r\n",
                        "nextNode": "errorReader.readLine()"
                    },
                    {
                        "name": "errorReader.readLine()",
                        "type": "String",
                        "context": "            String line;\r\n\r\n            while ((line = errorReader.readLine()) != null) {\r\n                errorDetails.append(line).append(\"\\n\");\r\n            }\r\n",
                        "nextNode": "line"
                    },
                    {
                        "name": "line",
                        "type": "Dataflow from `errorReader` to `line`\nDataflow from `readLine(...)` to `line`\nDataflow from `new BufferedReader(...)` to `line`\nDataflow from `new InputStreamReader(...)` to `line`\nDataflow from `getErrorStream(...)` to `line`",
                        "context": "\r\n            while ((line = errorReader.readLine()) != null) {\r\n                errorDetails.append(line).append(\"\\n\");\r\n            }\r\n\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "errorDetails",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "errorReader",
                        "type": "BufferedReader",
                        "context": "            String line;\r\n\r\n            while ((line = errorReader.readLine()) != null) {\r\n                errorDetails.append(line).append(\"\\n\");\r\n            }\r\n |             String line;\r\n\r\n            while ((line = errorReader.readLine()) != null) {\r\n                errorDetails.append(line).append(\"\\n\");\r\n            }\r\n",
                        "nextNode": "errorReader.readLine()"
                    },
                    {
                        "name": "errorReader.readLine()",
                        "type": "String",
                        "context": "            String line;\r\n\r\n            while ((line = errorReader.readLine()) != null) {\r\n                errorDetails.append(line).append(\"\\n\");\r\n            }\r\n |             String line;\r\n\r\n            while ((line = errorReader.readLine()) != null) {\r\n                errorDetails.append(line).append(\"\\n\");\r\n            }\r\n",
                        "nextNode": "line"
                    },
                    {
                        "name": "line",
                        "type": "String",
                        "context": "\r\n            while ((line = errorReader.readLine()) != null) {\r\n                errorDetails.append(line).append(\"\\n\");\r\n            }\r\n\r\n | \r\n            while ((line = errorReader.readLine()) != null) {\r\n                errorDetails.append(line).append(\"\\n\");\r\n            }\r\n\r\n",
                        "nextNode": "errorDetails"
                    },
                    {
                        "name": "errorDetails",
                        "type": "StringBuilder",
                        "context": "\r\n            while ((line = errorReader.readLine()) != null) {\r\n                errorDetails.append(line).append(\"\\n\");\r\n            }\r\n\r\n | \r\n            while ((line = errorReader.readLine()) != null) {\r\n                errorDetails.append(line).append(\"\\n\");\r\n            }\r\n\r\n | \r\n            while ((line = errorReader.readLine()) != null) {\r\n                errorDetails.append(line).append(\"\\n\");\r\n            }\r\n\r\n | \r\n            if (process.waitFor() != 0) {\r\n                System.err.println(\"Database access attempt failed with connection string \" + connectionString + \": \" + errorDetails.toString());\r\n            }\r\n        } catch (IOException | InterruptedException e) {\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": ":",
                "isSensitive": "no"
            },
            {
                "name": "Database access attempt failed with connection string",
                "isSensitive": "no"
            },
            {
                "name": "Database operation failed with connection string",
                "isSensitive": "no"
            },
            {
                "name": "n",
                "isSensitive": "no"
            }
        ],
        "comments": [],
        "sinks": [
            {
                "name": "println",
                "isSink": "yes"
            },
            {
                "name": "getErrorStream",
                "isSink": "no"
            },
            {
                "name": "getMessage",
                "isSink": "no"
            },
            {
                "name": "toString",
                "isSink": "no"
            },
            {
                "name": "readLine",
                "isSink": "no"
            },
            {
                "name": "getRuntime",
                "isSink": "no"
            },
            {
                "name": "waitFor",
                "isSink": "no"
            },
            {
                "name": "exec",
                "isSink": "yes"
            },
            {
                "name": "append",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "BAD_DatabaseCredentialsReset.java",
        "variables": [
            {
                "name": "errorReader",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "new BufferedReader(new InputStreamReader(process.getErrorStream()",
                        "type": "BufferedReader",
                        "context": "            String command = dbCommand + \" --user \" + username + \" --password \" + newPassword;\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n            String errorOutput = errorReader.readLine();\r\n\r\n",
                        "nextNode": "errorReader"
                    },
                    {
                        "name": "errorReader",
                        "type": "Dataflow from `new BufferedReader(...)` to `errorReader`\nDataflow from `new InputStreamReader(...)` to `errorReader`\nDataflow from `getErrorStream(...)` to `errorReader`",
                        "context": "            Process process = Runtime.getRuntime().exec(command);\r\n            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n            String errorOutput = errorReader.readLine();\r\n\r\n            if (process.waitFor() != 0) {\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "dbCommand",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "process",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "newPassword",
                        "type": "String",
                        "context": "    public static void resetDBPassword(String dbCommand, String username, String newPassword) {\r\n        try {\r\n            String command = dbCommand + \" --user \" + username + \" --password \" + newPassword;\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n |     public static void resetDBPassword(String dbCommand, String username, String newPassword) {\r\n        try {\r\n            String command = dbCommand + \" --user \" + username + \" --password \" + newPassword;\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n",
                        "nextNode": "dbCommand + \" --user \" + username + \" --password \" + newPassword"
                    },
                    {
                        "name": "dbCommand + \" --user \" + username + \" --password \" + newPassword",
                        "type": "String",
                        "context": "    public static void resetDBPassword(String dbCommand, String username, String newPassword) {\r\n        try {\r\n            String command = dbCommand + \" --user \" + username + \" --password \" + newPassword;\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n |     public static void resetDBPassword(String dbCommand, String username, String newPassword) {\r\n        try {\r\n            String command = dbCommand + \" --user \" + username + \" --password \" + newPassword;\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n",
                        "nextNode": "command"
                    },
                    {
                        "name": "command",
                        "type": "String",
                        "context": "        try {\r\n            String command = dbCommand + \" --user \" + username + \" --password \" + newPassword;\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n            String errorOutput = errorReader.readLine();\r\n |         try {\r\n            String command = dbCommand + \" --user \" + username + \" --password \" + newPassword;\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n            String errorOutput = errorReader.readLine();\r\n",
                        "nextNode": "Runtime.getRuntime().exec(command)"
                    },
                    {
                        "name": "Runtime.getRuntime().exec(command)",
                        "type": "Process",
                        "context": "        try {\r\n            String command = dbCommand + \" --user \" + username + \" --password \" + newPassword;\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n            String errorOutput = errorReader.readLine();\r\n |         try {\r\n            String command = dbCommand + \" --user \" + username + \" --password \" + newPassword;\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n            String errorOutput = errorReader.readLine();\r\n",
                        "nextNode": "process"
                    },
                    {
                        "name": "process",
                        "type": "Dataflow from `newPassword` to `process`\nDataflow from `username` to `process`\nDataflow from `dbCommand` to `process`\nDataflow from `command` to `process`\nDataflow from `\" --password \"` to `process`\nDataflow from `\" --user \"` to `process`\nDataflow from `exec(...)` to `process`",
                        "context": "            String command = dbCommand + \" --user \" + username + \" --password \" + newPassword;\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n            String errorOutput = errorReader.readLine();\r\n\r\n |             String command = dbCommand + \" --user \" + username + \" --password \" + newPassword;\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n            String errorOutput = errorReader.readLine();\r\n\r\n |             String errorOutput = errorReader.readLine();\r\n\r\n            if (process.waitFor() != 0) {\r\n                System.err.println(\"Failed to reset database password: \" + errorOutput + \". Command: \" + command);\r\n            }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "e",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "newPassword",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "command",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "newPassword",
                        "type": "String",
                        "context": "    public static void resetDBPassword(String dbCommand, String username, String newPassword) {\r\n        try {\r\n            String command = dbCommand + \" --user \" + username + \" --password \" + newPassword;\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n |     public static void resetDBPassword(String dbCommand, String username, String newPassword) {\r\n        try {\r\n            String command = dbCommand + \" --user \" + username + \" --password \" + newPassword;\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n",
                        "nextNode": "dbCommand + \" --user \" + username + \" --password \" + newPassword"
                    },
                    {
                        "name": "dbCommand + \" --user \" + username + \" --password \" + newPassword",
                        "type": "String",
                        "context": "    public static void resetDBPassword(String dbCommand, String username, String newPassword) {\r\n        try {\r\n            String command = dbCommand + \" --user \" + username + \" --password \" + newPassword;\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n |     public static void resetDBPassword(String dbCommand, String username, String newPassword) {\r\n        try {\r\n            String command = dbCommand + \" --user \" + username + \" --password \" + newPassword;\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n",
                        "nextNode": "command"
                    },
                    {
                        "name": "command",
                        "type": "Dataflow from `newPassword` to `command`\nDataflow from `username` to `command`\nDataflow from `dbCommand` to `command`\nDataflow from `\" --password \"` to `command`\nDataflow from `\" --user \"` to `command`",
                        "context": "        try {\r\n            String command = dbCommand + \" --user \" + username + \" --password \" + newPassword;\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n            String errorOutput = errorReader.readLine();\r\n |         try {\r\n            String command = dbCommand + \" --user \" + username + \" --password \" + newPassword;\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n            String errorOutput = errorReader.readLine();\r\n | \r\n            if (process.waitFor() != 0) {\r\n                System.err.println(\"Failed to reset database password: \" + errorOutput + \". Command: \" + command);\r\n            }\r\n        } catch (IOException | InterruptedException e) {\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "errorOutput",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "errorReader",
                        "type": "BufferedReader",
                        "context": "            Process process = Runtime.getRuntime().exec(command);\r\n            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n            String errorOutput = errorReader.readLine();\r\n\r\n            if (process.waitFor() != 0) {\r\n",
                        "nextNode": "errorReader.readLine()"
                    },
                    {
                        "name": "errorReader.readLine()",
                        "type": "String",
                        "context": "            Process process = Runtime.getRuntime().exec(command);\r\n            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n            String errorOutput = errorReader.readLine();\r\n\r\n            if (process.waitFor() != 0) {\r\n",
                        "nextNode": "errorOutput"
                    },
                    {
                        "name": "errorOutput",
                        "type": "Dataflow from `errorReader` to `errorOutput`\nDataflow from `readLine(...)` to `errorOutput`\nDataflow from `new BufferedReader(...)` to `errorOutput`\nDataflow from `new InputStreamReader(...)` to `errorOutput`\nDataflow from `getErrorStream(...)` to `errorOutput`",
                        "context": "\r\n            if (process.waitFor() != 0) {\r\n                System.err.println(\"Failed to reset database password: \" + errorOutput + \". Command: \" + command);\r\n            }\r\n        } catch (IOException | InterruptedException e) {\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "username",
                "isSensitive": "yes",
                "graph": []
            }
        ],
        "strings": [
            {
                "name": "--user",
                "isSensitive": "no"
            },
            {
                "name": "--password",
                "isSensitive": "no"
            },
            {
                "name": ". Command:",
                "isSensitive": "no"
            },
            {
                "name": "Failed to reset database password:",
                "isSensitive": "no"
            },
            {
                "name": "Error resetting database credentials:",
                "isSensitive": "no"
            }
        ],
        "comments": [],
        "sinks": [
            {
                "name": "println",
                "isSink": "yes"
            },
            {
                "name": "getErrorStream",
                "isSink": "no"
            },
            {
                "name": "getMessage",
                "isSink": "no"
            },
            {
                "name": "readLine",
                "isSink": "no"
            },
            {
                "name": "getRuntime",
                "isSink": "no"
            },
            {
                "name": "waitFor",
                "isSink": "no"
            },
            {
                "name": "exec",
                "isSink": "yes"
            }
        ]
    },
    {
        "fileName": "BAD_FirewallConfigurationServlet.java",
        "variables": [
            {
                "name": "errorReader",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "new BufferedReader(new InputStreamReader(process.getErrorStream()",
                        "type": "BufferedReader",
                        "context": "\r\n            if (exitCode != 0) {\r\n                BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n                String errorDetails = errorReader.readLine();\r\n                System.err.println(\"Failed to update firewall rules: \" + errorDetails);\r\n",
                        "nextNode": "errorReader"
                    },
                    {
                        "name": "errorReader",
                        "type": "Dataflow from `new BufferedReader(...)` to `errorReader`\nDataflow from `new InputStreamReader(...)` to `errorReader`\nDataflow from `getErrorStream(...)` to `errorReader`",
                        "context": "            if (exitCode != 0) {\r\n                BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n                String errorDetails = errorReader.readLine();\r\n                System.err.println(\"Failed to update firewall rules: \" + errorDetails);\r\n                response.getWriter().write(\"Failed to update firewall rules. Please contact system administrator.\");\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "request",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "process",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "firewallRule",
                        "type": "String",
                        "context": "    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\r\n        String firewallRule = request.getParameter(\"rule\");\r\n        String command = \"/usr/bin/updateFirewall \" + firewallRule;\r\n\r\n        try {\r\n |     protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\r\n        String firewallRule = request.getParameter(\"rule\");\r\n        String command = \"/usr/bin/updateFirewall \" + firewallRule;\r\n\r\n        try {\r\n",
                        "nextNode": "\"/usr/bin/updateFirewall \" + firewallRule"
                    },
                    {
                        "name": "\"/usr/bin/updateFirewall \" + firewallRule",
                        "type": "String",
                        "context": "    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\r\n        String firewallRule = request.getParameter(\"rule\");\r\n        String command = \"/usr/bin/updateFirewall \" + firewallRule;\r\n\r\n        try {\r\n |     protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\r\n        String firewallRule = request.getParameter(\"rule\");\r\n        String command = \"/usr/bin/updateFirewall \" + firewallRule;\r\n\r\n        try {\r\n",
                        "nextNode": "command"
                    },
                    {
                        "name": "command",
                        "type": "String",
                        "context": "\r\n        try {\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            int exitCode = process.waitFor();\r\n\r\n | \r\n        try {\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            int exitCode = process.waitFor();\r\n\r\n",
                        "nextNode": "Runtime.getRuntime().exec(command)"
                    },
                    {
                        "name": "Runtime.getRuntime().exec(command)",
                        "type": "Process",
                        "context": "\r\n        try {\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            int exitCode = process.waitFor();\r\n\r\n | \r\n        try {\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            int exitCode = process.waitFor();\r\n\r\n",
                        "nextNode": "process"
                    },
                    {
                        "name": "process",
                        "type": "Dataflow from `firewallRule` to `process`\nDataflow from `command` to `process`\nDataflow from `getParameter(...)` to `process`\nDataflow from `\"/usr/bin/updateFirewall \"` to `process`\nDataflow from `exec(...)` to `process`\nDataflow from `\"rule\"` to `process`",
                        "context": "        try {\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            int exitCode = process.waitFor();\r\n\r\n            if (exitCode != 0) {\r\n |         try {\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            int exitCode = process.waitFor();\r\n\r\n            if (exitCode != 0) {\r\n | \r\n            if (exitCode != 0) {\r\n                BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n                String errorDetails = errorReader.readLine();\r\n                System.err.println(\"Failed to update firewall rules: \" + errorDetails);\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "e",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "response",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "exitCode",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "process.waitFor()",
                        "type": "Number",
                        "context": "        try {\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            int exitCode = process.waitFor();\r\n\r\n            if (exitCode != 0) {\r\n",
                        "nextNode": "exitCode"
                    },
                    {
                        "name": "exitCode",
                        "type": "Dataflow from `waitFor(...)` to `exitCode`",
                        "context": "            int exitCode = process.waitFor();\r\n\r\n            if (exitCode != 0) {\r\n                BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n                String errorDetails = errorReader.readLine();\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "firewallRule",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "request.getParameter(\"rule\")",
                        "type": "String",
                        "context": "\r\n    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\r\n        String firewallRule = request.getParameter(\"rule\");\r\n        String command = \"/usr/bin/updateFirewall \" + firewallRule;\r\n\r\n",
                        "nextNode": "firewallRule"
                    },
                    {
                        "name": "firewallRule",
                        "type": "Dataflow from `getParameter(...)` to `firewallRule`\nDataflow from `\"rule\"` to `firewallRule`",
                        "context": "    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\r\n        String firewallRule = request.getParameter(\"rule\");\r\n        String command = \"/usr/bin/updateFirewall \" + firewallRule;\r\n\r\n        try {\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "command",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "firewallRule",
                        "type": "String",
                        "context": "    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\r\n        String firewallRule = request.getParameter(\"rule\");\r\n        String command = \"/usr/bin/updateFirewall \" + firewallRule;\r\n\r\n        try {\r\n",
                        "nextNode": "\"/usr/bin/updateFirewall \" + firewallRule"
                    },
                    {
                        "name": "\"/usr/bin/updateFirewall \" + firewallRule",
                        "type": "String",
                        "context": "    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\r\n        String firewallRule = request.getParameter(\"rule\");\r\n        String command = \"/usr/bin/updateFirewall \" + firewallRule;\r\n\r\n        try {\r\n",
                        "nextNode": "command"
                    },
                    {
                        "name": "command",
                        "type": "Dataflow from `firewallRule` to `command`\nDataflow from `getParameter(...)` to `command`\nDataflow from `\"/usr/bin/updateFirewall \"` to `command`\nDataflow from `\"rule\"` to `command`",
                        "context": "\r\n        try {\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            int exitCode = process.waitFor();\r\n\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "errorDetails",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "errorReader",
                        "type": "BufferedReader",
                        "context": "            if (exitCode != 0) {\r\n                BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n                String errorDetails = errorReader.readLine();\r\n                System.err.println(\"Failed to update firewall rules: \" + errorDetails);\r\n                response.getWriter().write(\"Failed to update firewall rules. Please contact system administrator.\");\r\n",
                        "nextNode": "errorReader.readLine()"
                    },
                    {
                        "name": "errorReader.readLine()",
                        "type": "String",
                        "context": "            if (exitCode != 0) {\r\n                BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n                String errorDetails = errorReader.readLine();\r\n                System.err.println(\"Failed to update firewall rules: \" + errorDetails);\r\n                response.getWriter().write(\"Failed to update firewall rules. Please contact system administrator.\");\r\n",
                        "nextNode": "errorDetails"
                    },
                    {
                        "name": "errorDetails",
                        "type": "Dataflow from `errorReader` to `errorDetails`\nDataflow from `readLine(...)` to `errorDetails`\nDataflow from `new BufferedReader(...)` to `errorDetails`\nDataflow from `new InputStreamReader(...)` to `errorDetails`\nDataflow from `getErrorStream(...)` to `errorDetails`",
                        "context": "                BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n                String errorDetails = errorReader.readLine();\r\n                System.err.println(\"Failed to update firewall rules: \" + errorDetails);\r\n                response.getWriter().write(\"Failed to update firewall rules. Please contact system administrator.\");\r\n            }\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "Error updating firewall:",
                "isSensitive": "no"
            },
            {
                "name": "Failed to update firewall rules:",
                "isSensitive": "no"
            },
            {
                "name": "Failed to update firewall rules. Please contact system administrator.",
                "isSensitive": "no"
            },
            {
                "name": "rule",
                "isSensitive": "no"
            },
            {
                "name": "/usr/bin/updateFirewall",
                "isSensitive": "yes"
            }
        ],
        "comments": [],
        "sinks": [
            {
                "name": "println",
                "isSink": "yes"
            },
            {
                "name": "getErrorStream",
                "isSink": "no"
            },
            {
                "name": "getWriter",
                "isSink": "no"
            },
            {
                "name": "getMessage",
                "isSink": "no"
            },
            {
                "name": "readLine",
                "isSink": "no"
            },
            {
                "name": "getRuntime",
                "isSink": "no"
            },
            {
                "name": "waitFor",
                "isSink": "no"
            },
            {
                "name": "write",
                "isSink": "yes"
            },
            {
                "name": "setStatus",
                "isSink": "no"
            },
            {
                "name": "exec",
                "isSink": "yes"
            },
            {
                "name": "getParameter",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "BAD_MisconfiguredPermissions.java",
        "variables": [
            {
                "name": "scriptPath",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "\"/home/user/private/scripts/deploy.sh\"",
                        "type": "String",
                        "context": "    public static void main(String[] args) {\r\n        try {\r\n            String scriptPath = \"/home/user/private/scripts/deploy.sh\";\r\n            ProcessBuilder pb = new ProcessBuilder(\"bash\", scriptPath);\r\n            Process process = pb.start();\r\n",
                        "nextNode": "scriptPath"
                    },
                    {
                        "name": "scriptPath",
                        "type": "Dataflow from `\"/home/user/private/scripts/deploy.sh\"` to `scriptPath`",
                        "context": "        try {\r\n            String scriptPath = \"/home/user/private/scripts/deploy.sh\";\r\n            ProcessBuilder pb = new ProcessBuilder(\"bash\", scriptPath);\r\n            Process process = pb.start();\r\n            process.waitFor();\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "args",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "pb",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "scriptPath",
                        "type": "String",
                        "context": "        try {\r\n            String scriptPath = \"/home/user/private/scripts/deploy.sh\";\r\n            ProcessBuilder pb = new ProcessBuilder(\"bash\", scriptPath);\r\n            Process process = pb.start();\r\n            process.waitFor();\r\n",
                        "nextNode": "new ProcessBuilder(\"bash\", scriptPath)"
                    },
                    {
                        "name": "new ProcessBuilder(\"bash\", scriptPath)",
                        "type": "ProcessBuilder",
                        "context": "        try {\r\n            String scriptPath = \"/home/user/private/scripts/deploy.sh\";\r\n            ProcessBuilder pb = new ProcessBuilder(\"bash\", scriptPath);\r\n            Process process = pb.start();\r\n            process.waitFor();\r\n",
                        "nextNode": "pb"
                    },
                    {
                        "name": "pb",
                        "type": "Dataflow from `scriptPath` to `pb`\nDataflow from `\"/home/user/private/scripts/deploy.sh\"` to `pb`\nDataflow from `new ProcessBuilder(...)` to `pb`\nDataflow from `\"bash\"` to `pb`",
                        "context": "            String scriptPath = \"/home/user/private/scripts/deploy.sh\";\r\n            ProcessBuilder pb = new ProcessBuilder(\"bash\", scriptPath);\r\n            Process process = pb.start();\r\n            process.waitFor();\r\n\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "process",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "pb.start()",
                        "type": "Process",
                        "context": "            String scriptPath = \"/home/user/private/scripts/deploy.sh\";\r\n            ProcessBuilder pb = new ProcessBuilder(\"bash\", scriptPath);\r\n            Process process = pb.start();\r\n            process.waitFor();\r\n\r\n |             String scriptPath = \"/home/user/private/scripts/deploy.sh\";\r\n            ProcessBuilder pb = new ProcessBuilder(\"bash\", scriptPath);\r\n            Process process = pb.start();\r\n            process.waitFor();\r\n\r\n",
                        "nextNode": "process"
                    },
                    {
                        "name": "process",
                        "type": "Dataflow from `start(...)` to `process`",
                        "context": "            ProcessBuilder pb = new ProcessBuilder(\"bash\", scriptPath);\r\n            Process process = pb.start();\r\n            process.waitFor();\r\n\r\n            System.out.println(\"Error Output: \" + new String(process.getErrorStream().readAllBytes()));\r\n |             ProcessBuilder pb = new ProcessBuilder(\"bash\", scriptPath);\r\n            Process process = pb.start();\r\n            process.waitFor();\r\n\r\n            System.out.println(\"Error Output: \" + new String(process.getErrorStream().readAllBytes()));\r\n |             process.waitFor();\r\n\r\n            System.out.println(\"Error Output: \" + new String(process.getErrorStream().readAllBytes()));\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "e",
                "isSensitive": "yes",
                "graph": []
            }
        ],
        "strings": [
            {
                "name": "Error Output:",
                "isSensitive": "no"
            },
            {
                "name": "bash",
                "isSensitive": "no"
            },
            {
                "name": "/home/user/private/scripts/deploy.sh",
                "isSensitive": "yes"
            }
        ],
        "comments": [],
        "sinks": [
            {
                "name": "println",
                "isSink": "yes"
            },
            {
                "name": "getErrorStream",
                "isSink": "no"
            },
            {
                "name": "printStackTrace",
                "isSink": "yes"
            },
            {
                "name": "start",
                "isSink": "yes"
            },
            {
                "name": "readAllBytes",
                "isSink": "no"
            },
            {
                "name": "waitFor",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "BAD_SecretFileDecryptor.java",
        "variables": [
            {
                "name": "errorReader",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "new BufferedReader(new InputStreamReader(process.getErrorStream()",
                        "type": "BufferedReader",
                        "context": "        try {\r\n            Process process = Runtime.getRuntime().exec(decryptionToolPath + \" \" + encryptedFilePath);\r\n            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n            String error = errorReader.readLine();\r\n\r\n",
                        "nextNode": "errorReader"
                    },
                    {
                        "name": "errorReader",
                        "type": "Dataflow from `new BufferedReader(...)` to `errorReader`\nDataflow from `new InputStreamReader(...)` to `errorReader`\nDataflow from `getErrorStream(...)` to `errorReader`",
                        "context": "            Process process = Runtime.getRuntime().exec(decryptionToolPath + \" \" + encryptedFilePath);\r\n            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n            String error = errorReader.readLine();\r\n\r\n            if (process.waitFor() != 0) {\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "process",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "encryptedFilePath",
                        "type": "String",
                        "context": "    public static void decryptFile(String decryptionToolPath, String encryptedFilePath) {\r\n        try {\r\n            Process process = Runtime.getRuntime().exec(decryptionToolPath + \" \" + encryptedFilePath);\r\n            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n            String error = errorReader.readLine();\r\n |     public static void decryptFile(String decryptionToolPath, String encryptedFilePath) {\r\n        try {\r\n            Process process = Runtime.getRuntime().exec(decryptionToolPath + \" \" + encryptedFilePath);\r\n            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n            String error = errorReader.readLine();\r\n",
                        "nextNode": "decryptionToolPath + \" \" + encryptedFilePath"
                    },
                    {
                        "name": "decryptionToolPath + \" \" + encryptedFilePath",
                        "type": "String",
                        "context": "    public static void decryptFile(String decryptionToolPath, String encryptedFilePath) {\r\n        try {\r\n            Process process = Runtime.getRuntime().exec(decryptionToolPath + \" \" + encryptedFilePath);\r\n            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n            String error = errorReader.readLine();\r\n |     public static void decryptFile(String decryptionToolPath, String encryptedFilePath) {\r\n        try {\r\n            Process process = Runtime.getRuntime().exec(decryptionToolPath + \" \" + encryptedFilePath);\r\n            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n            String error = errorReader.readLine();\r\n",
                        "nextNode": "Runtime.getRuntime().exec(decryptionToolPath + \" \" + encryptedFilePath)"
                    },
                    {
                        "name": "Runtime.getRuntime().exec(decryptionToolPath + \" \" + encryptedFilePath)",
                        "type": "Process",
                        "context": "    public static void decryptFile(String decryptionToolPath, String encryptedFilePath) {\r\n        try {\r\n            Process process = Runtime.getRuntime().exec(decryptionToolPath + \" \" + encryptedFilePath);\r\n            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n            String error = errorReader.readLine();\r\n |     public static void decryptFile(String decryptionToolPath, String encryptedFilePath) {\r\n        try {\r\n            Process process = Runtime.getRuntime().exec(decryptionToolPath + \" \" + encryptedFilePath);\r\n            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n            String error = errorReader.readLine();\r\n",
                        "nextNode": "process"
                    },
                    {
                        "name": "process",
                        "type": "Dataflow from `encryptedFilePath` to `process`\nDataflow from `decryptionToolPath` to `process`\nDataflow from `exec(...)` to `process`\nDataflow from `\" \"` to `process`",
                        "context": "        try {\r\n            Process process = Runtime.getRuntime().exec(decryptionToolPath + \" \" + encryptedFilePath);\r\n            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n            String error = errorReader.readLine();\r\n\r\n |         try {\r\n            Process process = Runtime.getRuntime().exec(decryptionToolPath + \" \" + encryptedFilePath);\r\n            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n            String error = errorReader.readLine();\r\n\r\n |             String error = errorReader.readLine();\r\n\r\n            if (process.waitFor() != 0) {\r\n                System.err.println(\"Decryption failed for file: \" + encryptedFilePath + \", Error: \" + error);\r\n            }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "decryptionToolPath",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "e",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "encryptedFilePath",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "error",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "errorReader",
                        "type": "BufferedReader",
                        "context": "            Process process = Runtime.getRuntime().exec(decryptionToolPath + \" \" + encryptedFilePath);\r\n            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n            String error = errorReader.readLine();\r\n\r\n            if (process.waitFor() != 0) {\r\n",
                        "nextNode": "errorReader.readLine()"
                    },
                    {
                        "name": "errorReader.readLine()",
                        "type": "String",
                        "context": "            Process process = Runtime.getRuntime().exec(decryptionToolPath + \" \" + encryptedFilePath);\r\n            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n            String error = errorReader.readLine();\r\n\r\n            if (process.waitFor() != 0) {\r\n",
                        "nextNode": "error"
                    },
                    {
                        "name": "error",
                        "type": "Dataflow from `errorReader` to `error`\nDataflow from `readLine(...)` to `error`\nDataflow from `new BufferedReader(...)` to `error`\nDataflow from `new InputStreamReader(...)` to `error`\nDataflow from `getErrorStream(...)` to `error`",
                        "context": "\r\n            if (process.waitFor() != 0) {\r\n                System.err.println(\"Decryption failed for file: \" + encryptedFilePath + \", Error: \" + error);\r\n            }\r\n        } catch (IOException | InterruptedException e) {\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": ", Error:",
                "isSensitive": "no"
            },
            {
                "name": "Decryption failed for file:",
                "isSensitive": "no"
            },
            {
                "name": "Decryption process error:",
                "isSensitive": "no"
            }
        ],
        "comments": [],
        "sinks": [
            {
                "name": "println",
                "isSink": "yes"
            },
            {
                "name": "getErrorStream",
                "isSink": "no"
            },
            {
                "name": "getMessage",
                "isSink": "no"
            },
            {
                "name": "readLine",
                "isSink": "no"
            },
            {
                "name": "getRuntime",
                "isSink": "no"
            },
            {
                "name": "waitFor",
                "isSink": "no"
            },
            {
                "name": "exec",
                "isSink": "yes"
            }
        ]
    },
    {
        "fileName": "BAD_SensitiveInfoExposureViaShellError.java",
        "variables": [
            {
                "name": "args",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "process",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "command",
                        "type": "String[]",
                        "context": "        try {\r\n            String[] command = {\"/bin/sh\", \"-c\", \"somecommand --password=GoldenSunrise2023\"};\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            process.waitFor();\r\n\r\n |         try {\r\n            String[] command = {\"/bin/sh\", \"-c\", \"somecommand --password=GoldenSunrise2023\"};\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            process.waitFor();\r\n\r\n",
                        "nextNode": "Runtime.getRuntime().exec(command)"
                    },
                    {
                        "name": "Runtime.getRuntime().exec(command)",
                        "type": "Process",
                        "context": "        try {\r\n            String[] command = {\"/bin/sh\", \"-c\", \"somecommand --password=GoldenSunrise2023\"};\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            process.waitFor();\r\n\r\n |         try {\r\n            String[] command = {\"/bin/sh\", \"-c\", \"somecommand --password=GoldenSunrise2023\"};\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            process.waitFor();\r\n\r\n",
                        "nextNode": "process"
                    },
                    {
                        "name": "process",
                        "type": "Process",
                        "context": "            String[] command = {\"/bin/sh\", \"-c\", \"somecommand --password=GoldenSunrise2023\"};\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            process.waitFor();\r\n\r\n            BufferedReader reader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n |             process.waitFor();\r\n\r\n            BufferedReader reader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n            String line = \"\";\r\n            while ((line = reader.readLine()) != null) {\r\n |             String[] command = {\"/bin/sh\", \"-c\", \"somecommand --password=GoldenSunrise2023\"};\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            process.waitFor();\r\n\r\n            BufferedReader reader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "e",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "reader",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "new BufferedReader(new InputStreamReader(process.getErrorStream()",
                        "type": "BufferedReader",
                        "context": "            process.waitFor();\r\n\r\n            BufferedReader reader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n            String line = \"\";\r\n            while ((line = reader.readLine()) != null) {\r\n",
                        "nextNode": "reader"
                    },
                    {
                        "name": "reader",
                        "type": "Dataflow from `new BufferedReader(...)` to `reader`\nDataflow from `new InputStreamReader(...)` to `reader`\nDataflow from `getErrorStream(...)` to `reader`",
                        "context": "            BufferedReader reader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n            String line = \"\";\r\n            while ((line = reader.readLine()) != null) {\r\n                System.out.println(line);\r\n            }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "line",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "reader",
                        "type": "BufferedReader",
                        "context": "            BufferedReader reader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n            String line = \"\";\r\n            while ((line = reader.readLine()) != null) {\r\n                System.out.println(line);\r\n            }\r\n",
                        "nextNode": "reader.readLine()"
                    },
                    {
                        "name": "reader.readLine()",
                        "type": "String",
                        "context": "            BufferedReader reader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n            String line = \"\";\r\n            while ((line = reader.readLine()) != null) {\r\n                System.out.println(line);\r\n            }\r\n",
                        "nextNode": "line"
                    },
                    {
                        "name": "line",
                        "type": "Dataflow from `reader` to `line`\nDataflow from `readLine(...)` to `line`\nDataflow from `new BufferedReader(...)` to `line`\nDataflow from `new InputStreamReader(...)` to `line`\nDataflow from `getErrorStream(...)` to `line`",
                        "context": "            String line = \"\";\r\n            while ((line = reader.readLine()) != null) {\r\n                System.out.println(line);\r\n            }\r\n        } catch (Exception e) {\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "command",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "\"/bin/sh\"",
                        "type": "String",
                        "context": "    public static void main(String[] args) {\r\n        try {\r\n            String[] command = {\"/bin/sh\", \"-c\", \"somecommand --password=GoldenSunrise2023\"};\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            process.waitFor();\r\n",
                        "nextNode": "{\"/bin/sh\", \"-c\", \"somecommand --password=GoldenSunrise2023\"}"
                    },
                    {
                        "name": "{\"/bin/sh\", \"-c\", \"somecommand --password=GoldenSunrise2023\"}",
                        "type": "String",
                        "context": "    public static void main(String[] args) {\r\n        try {\r\n            String[] command = {\"/bin/sh\", \"-c\", \"somecommand --password=GoldenSunrise2023\"};\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            process.waitFor();\r\n |     public static void main(String[] args) {\r\n        try {\r\n            String[] command = {\"/bin/sh\", \"-c\", \"somecommand --password=GoldenSunrise2023\"};\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            process.waitFor();\r\n",
                        "nextNode": "command"
                    },
                    {
                        "name": "command",
                        "type": "String",
                        "context": "        try {\r\n            String[] command = {\"/bin/sh\", \"-c\", \"somecommand --password=GoldenSunrise2023\"};\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            process.waitFor();\r\n\r\n |         try {\r\n            String[] command = {\"/bin/sh\", \"-c\", \"somecommand --password=GoldenSunrise2023\"};\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            process.waitFor();\r\n\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "/bin/sh",
                "isSensitive": "no"
            },
            {
                "name": "-c",
                "isSensitive": "no"
            },
            {
                "name": "somecommand --password=GoldenSunrise2023",
                "isSensitive": "yes"
            }
        ],
        "comments": [],
        "sinks": [
            {
                "name": "println",
                "isSink": "yes"
            },
            {
                "name": "getErrorStream",
                "isSink": "no"
            },
            {
                "name": "printStackTrace",
                "isSink": "yes"
            },
            {
                "name": "readLine",
                "isSink": "no"
            },
            {
                "name": "getRuntime",
                "isSink": "no"
            },
            {
                "name": "waitFor",
                "isSink": "no"
            },
            {
                "name": "exec",
                "isSink": "yes"
            }
        ]
    },
    {
        "fileName": "BAD_ShellCommandExposure.java",
        "variables": [
            {
                "name": "args",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "process",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "command",
                        "type": "String[]",
                        "context": "        try {\r\n            String[] command = {\"sh\", \"-c\", \"cp /var/backups/financeapp/data/2024-07-25/backup.tar.gz\"};\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            int exitCode = process.waitFor();\r\n\r\n |         try {\r\n            String[] command = {\"sh\", \"-c\", \"cp /var/backups/financeapp/data/2024-07-25/backup.tar.gz\"};\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            int exitCode = process.waitFor();\r\n\r\n",
                        "nextNode": "Runtime.getRuntime().exec(command)"
                    },
                    {
                        "name": "Runtime.getRuntime().exec(command)",
                        "type": "Process",
                        "context": "        try {\r\n            String[] command = {\"sh\", \"-c\", \"cp /var/backups/financeapp/data/2024-07-25/backup.tar.gz\"};\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            int exitCode = process.waitFor();\r\n\r\n |         try {\r\n            String[] command = {\"sh\", \"-c\", \"cp /var/backups/financeapp/data/2024-07-25/backup.tar.gz\"};\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            int exitCode = process.waitFor();\r\n\r\n",
                        "nextNode": "process"
                    },
                    {
                        "name": "process",
                        "type": "Dataflow from `command` to `process`\nDataflow from `\"sh\"` to `process`\nDataflow from `\"-c\"` to `process`\nDataflow from `\"cp /var/backups/financeapp/data/2024-07-25/backup.tar.gz\"` to `process`\nDataflow from `exec(...)` to `process`",
                        "context": "            String[] command = {\"sh\", \"-c\", \"cp /var/backups/financeapp/data/2024-07-25/backup.tar.gz\"};\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            int exitCode = process.waitFor();\r\n\r\n            if (exitCode != 0) {\r\n |             String[] command = {\"sh\", \"-c\", \"cp /var/backups/financeapp/data/2024-07-25/backup.tar.gz\"};\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            int exitCode = process.waitFor();\r\n\r\n            if (exitCode != 0) {\r\n | \r\n            if (exitCode != 0) {\r\n                System.out.println(\"Error occurred: \" + new String(process.getErrorStream().readAllBytes()));\r\n            }\r\n        } catch (Exception e) {\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "e",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "exitCode",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "process.waitFor()",
                        "type": "Number",
                        "context": "            String[] command = {\"sh\", \"-c\", \"cp /var/backups/financeapp/data/2024-07-25/backup.tar.gz\"};\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            int exitCode = process.waitFor();\r\n\r\n            if (exitCode != 0) {\r\n",
                        "nextNode": "exitCode"
                    },
                    {
                        "name": "exitCode",
                        "type": "Dataflow from `waitFor(...)` to `exitCode`",
                        "context": "            int exitCode = process.waitFor();\r\n\r\n            if (exitCode != 0) {\r\n                System.out.println(\"Error occurred: \" + new String(process.getErrorStream().readAllBytes()));\r\n            }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "command",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "\"sh\"",
                        "type": "String",
                        "context": "    public static void main(String[] args) {\r\n        try {\r\n            String[] command = {\"sh\", \"-c\", \"cp /var/backups/financeapp/data/2024-07-25/backup.tar.gz\"};\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            int exitCode = process.waitFor();\r\n",
                        "nextNode": "{\"sh\", \"-c\", \"cp /var/backups/financeapp/data/2024-07-25/backup.tar.gz\"}"
                    },
                    {
                        "name": "{\"sh\", \"-c\", \"cp /var/backups/financeapp/data/2024-07-25/backup.tar.gz\"}",
                        "type": "String",
                        "context": "    public static void main(String[] args) {\r\n        try {\r\n            String[] command = {\"sh\", \"-c\", \"cp /var/backups/financeapp/data/2024-07-25/backup.tar.gz\"};\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            int exitCode = process.waitFor();\r\n |     public static void main(String[] args) {\r\n        try {\r\n            String[] command = {\"sh\", \"-c\", \"cp /var/backups/financeapp/data/2024-07-25/backup.tar.gz\"};\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            int exitCode = process.waitFor();\r\n",
                        "nextNode": "command"
                    },
                    {
                        "name": "command",
                        "type": "String",
                        "context": "        try {\r\n            String[] command = {\"sh\", \"-c\", \"cp /var/backups/financeapp/data/2024-07-25/backup.tar.gz\"};\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            int exitCode = process.waitFor();\r\n\r\n |         try {\r\n            String[] command = {\"sh\", \"-c\", \"cp /var/backups/financeapp/data/2024-07-25/backup.tar.gz\"};\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            int exitCode = process.waitFor();\r\n\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "cp /var/backups/financeapp/data/2024-07-25/backup.tar.gz",
                "isSensitive": "yes"
            },
            {
                "name": "sh",
                "isSensitive": "no"
            },
            {
                "name": "Error occurred:",
                "isSensitive": "no"
            },
            {
                "name": "-c",
                "isSensitive": "no"
            }
        ],
        "comments": [],
        "sinks": [
            {
                "name": "println",
                "isSink": "yes"
            },
            {
                "name": "getErrorStream",
                "isSink": "no"
            },
            {
                "name": "printStackTrace",
                "isSink": "yes"
            },
            {
                "name": "readAllBytes",
                "isSink": "no"
            },
            {
                "name": "getRuntime",
                "isSink": "no"
            },
            {
                "name": "waitFor",
                "isSink": "no"
            },
            {
                "name": "exec",
                "isSink": "yes"
            }
        ]
    },
    {
        "fileName": "BAD_BackupServiceCustomSink.java",
        "variables": [
            {
                "name": "errorReader",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "new BufferedReader(new InputStreamReader(process.getErrorStream()",
                        "type": "BufferedReader",
                        "context": "        try {\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n            String error;\r\n\r\n",
                        "nextNode": "errorReader"
                    },
                    {
                        "name": "errorReader",
                        "type": "Dataflow from `new BufferedReader(...)` to `errorReader`\nDataflow from `new InputStreamReader(...)` to `errorReader`\nDataflow from `getErrorStream(...)` to `errorReader`",
                        "context": "            String error;\r\n\r\n            while ((error = errorReader.readLine()) != null) {\r\n                OutputToDisplay.output(\"Backup error: \" + error);\r\n            }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "args",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "process",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "backupLocation",
                        "type": "String",
                        "context": "\r\n    public static void performBackup(String backupLocation) {\r\n        String command = \"perform_backup --location \" + backupLocation;\r\n\r\n        try {\r\n | \r\n    public static void performBackup(String backupLocation) {\r\n        String command = \"perform_backup --location \" + backupLocation;\r\n\r\n        try {\r\n",
                        "nextNode": "\"perform_backup --location \" + backupLocation"
                    },
                    {
                        "name": "\"perform_backup --location \" + backupLocation",
                        "type": "String",
                        "context": "\r\n    public static void performBackup(String backupLocation) {\r\n        String command = \"perform_backup --location \" + backupLocation;\r\n\r\n        try {\r\n | \r\n    public static void performBackup(String backupLocation) {\r\n        String command = \"perform_backup --location \" + backupLocation;\r\n\r\n        try {\r\n",
                        "nextNode": "command"
                    },
                    {
                        "name": "command",
                        "type": "String",
                        "context": "\r\n        try {\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n            String error;\r\n | \r\n        try {\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n            String error;\r\n",
                        "nextNode": "Runtime.getRuntime().exec(command)"
                    },
                    {
                        "name": "Runtime.getRuntime().exec(command)",
                        "type": "Process",
                        "context": "\r\n        try {\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n            String error;\r\n | \r\n        try {\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n            String error;\r\n",
                        "nextNode": "process"
                    },
                    {
                        "name": "process",
                        "type": "Dataflow from `backupLocation` to `process`\nDataflow from `command` to `process`\nDataflow from `\"perform_backup --location \"` to `process`\nDataflow from `exec(...)` to `process`\nDataflow from `\"/private/secure/backup\"` to `process`",
                        "context": "        try {\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n            String error;\r\n\r\n |         try {\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n            String error;\r\n\r\n |             }\r\n\r\n            if (process.waitFor() != 0) {\r\n                OutputToDisplay.output(\"Backup failed, see logs for details.\");\r\n            }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "e",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "backupLocation",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "\"/private/secure/backup\"",
                        "type": "String",
                        "context": "\r\n    public static void main(String[] args) {\r\n        performBackup(\"/private/secure/backup\");\r\n    }\r\n}\r\n",
                        "nextNode": "String backupLocation"
                    },
                    {
                        "name": "String backupLocation",
                        "type": "String",
                        "context": "public class BAD_BackupServiceCustomSink {\r\n\r\n    public static void performBackup(String backupLocation) {\r\n        String command = \"perform_backup --location \" + backupLocation;\r\n\r\n",
                        "nextNode": "backupLocation"
                    },
                    {
                        "name": "backupLocation",
                        "type": "Dataflow from `\"/private/secure/backup\"` to `backupLocation`",
                        "context": "\r\n    public static void performBackup(String backupLocation) {\r\n        String command = \"perform_backup --location \" + backupLocation;\r\n\r\n        try {\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "error",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "errorReader",
                        "type": "BufferedReader",
                        "context": "            String error;\r\n\r\n            while ((error = errorReader.readLine()) != null) {\r\n                OutputToDisplay.output(\"Backup error: \" + error);\r\n            }\r\n",
                        "nextNode": "errorReader.readLine()"
                    },
                    {
                        "name": "errorReader.readLine()",
                        "type": "String",
                        "context": "            String error;\r\n\r\n            while ((error = errorReader.readLine()) != null) {\r\n                OutputToDisplay.output(\"Backup error: \" + error);\r\n            }\r\n",
                        "nextNode": "error"
                    },
                    {
                        "name": "error",
                        "type": "Dataflow from `errorReader` to `error`\nDataflow from `readLine(...)` to `error`\nDataflow from `new BufferedReader(...)` to `error`\nDataflow from `new InputStreamReader(...)` to `error`\nDataflow from `getErrorStream(...)` to `error`",
                        "context": "\r\n            while ((error = errorReader.readLine()) != null) {\r\n                OutputToDisplay.output(\"Backup error: \" + error);\r\n            }\r\n\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "command",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "backupLocation",
                        "type": "String",
                        "context": "\r\n    public static void performBackup(String backupLocation) {\r\n        String command = \"perform_backup --location \" + backupLocation;\r\n\r\n        try {\r\n",
                        "nextNode": "\"perform_backup --location \" + backupLocation"
                    },
                    {
                        "name": "\"perform_backup --location \" + backupLocation",
                        "type": "String",
                        "context": "\r\n    public static void performBackup(String backupLocation) {\r\n        String command = \"perform_backup --location \" + backupLocation;\r\n\r\n        try {\r\n",
                        "nextNode": "command"
                    },
                    {
                        "name": "command",
                        "type": "Dataflow from `backupLocation` to `command`\nDataflow from `\"perform_backup --location \"` to `command`\nDataflow from `\"/private/secure/backup\"` to `command`",
                        "context": "\r\n        try {\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n            String error;\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "Backup error:",
                "isSensitive": "no"
            },
            {
                "name": "Backup operation failed:",
                "isSensitive": "no"
            },
            {
                "name": "Backup failed, see logs for details.",
                "isSensitive": "no"
            },
            {
                "name": "/private/secure/backup",
                "isSensitive": "yes"
            },
            {
                "name": "perform_backup --location",
                "isSensitive": "no"
            }
        ],
        "comments": [],
        "sinks": [
            {
                "name": "output",
                "isSink": "yes"
            },
            {
                "name": "performBackup",
                "isSink": "no"
            },
            {
                "name": "getErrorStream",
                "isSink": "no"
            },
            {
                "name": "getMessage",
                "isSink": "no"
            },
            {
                "name": "readLine",
                "isSink": "no"
            },
            {
                "name": "getRuntime",
                "isSink": "no"
            },
            {
                "name": "waitFor",
                "isSink": "no"
            },
            {
                "name": "exec",
                "isSink": "yes"
            }
        ]
    },
    {
        "fileName": "BAD_DatabaseConnectorCustomSink.java",
        "variables": [
            {
                "name": "errorReader",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "new BufferedReader(new InputStreamReader(process.getErrorStream()",
                        "type": "BufferedReader",
                        "context": "        try {\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n            String error;\r\n\r\n",
                        "nextNode": "errorReader"
                    },
                    {
                        "name": "errorReader",
                        "type": "Dataflow from `new BufferedReader(...)` to `errorReader`\nDataflow from `new InputStreamReader(...)` to `errorReader`\nDataflow from `getErrorStream(...)` to `errorReader`",
                        "context": "            String error;\r\n\r\n            while ((error = errorReader.readLine()) != null) {\r\n                PrintToConsole.print(\"Database connection error: \" + error);\r\n            }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "args",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "process",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "dbConnectionString",
                        "type": "String",
                        "context": "\r\n    public static void connectToDatabase(String dbConnectionString) {\r\n        String command = \"connect_db --connection-string \" + dbConnectionString;\r\n\r\n        try {\r\n | \r\n    public static void connectToDatabase(String dbConnectionString) {\r\n        String command = \"connect_db --connection-string \" + dbConnectionString;\r\n\r\n        try {\r\n",
                        "nextNode": "\"connect_db --connection-string \" + dbConnectionString"
                    },
                    {
                        "name": "\"connect_db --connection-string \" + dbConnectionString",
                        "type": "String",
                        "context": "\r\n    public static void connectToDatabase(String dbConnectionString) {\r\n        String command = \"connect_db --connection-string \" + dbConnectionString;\r\n\r\n        try {\r\n | \r\n    public static void connectToDatabase(String dbConnectionString) {\r\n        String command = \"connect_db --connection-string \" + dbConnectionString;\r\n\r\n        try {\r\n",
                        "nextNode": "command"
                    },
                    {
                        "name": "command",
                        "type": "String",
                        "context": "\r\n        try {\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n            String error;\r\n | \r\n        try {\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n            String error;\r\n",
                        "nextNode": "Runtime.getRuntime().exec(command)"
                    },
                    {
                        "name": "Runtime.getRuntime().exec(command)",
                        "type": "Process",
                        "context": "\r\n        try {\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n            String error;\r\n | \r\n        try {\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n            String error;\r\n",
                        "nextNode": "process"
                    },
                    {
                        "name": "process",
                        "type": "Dataflow from `dbConnectionString` to `process`\nDataflow from `command` to `process`\nDataflow from `\"connect_db --connection-string \"` to `process`\nDataflow from `exec(...)` to `process`\nDataflow from `\"jdbc:mysql://mydb.abcdefghijklmnop.us-west-2.rds.amazonaws.com:3306/mydb?user=admin&password=secret\"` to `process`",
                        "context": "        try {\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n            String error;\r\n\r\n |         try {\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n            String error;\r\n\r\n |             }\r\n\r\n            if (process.waitFor() != 0) {\r\n                PrintToConsole.print(\"Database connection failed, see logs for details.\");\r\n            }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "e",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "dbConnectionString",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "\"jdbc:mysql://mydb.abcdefghijklmnop.us-west-2.rds.amazonaws.com:3306/mydb?user=admin&password=secret\"",
                        "type": "String",
                        "context": "\r\n    public static void main(String[] args) {\r\n        connectToDatabase(\"jdbc:mysql://mydb.abcdefghijklmnop.us-west-2.rds.amazonaws.com:3306/mydb?user=admin&password=secret\");\r\n    }\r\n}\r\n",
                        "nextNode": "String dbConnectionString"
                    },
                    {
                        "name": "String dbConnectionString",
                        "type": "String",
                        "context": "public class BAD_DatabaseConnectorCustomSink {\r\n\r\n    public static void connectToDatabase(String dbConnectionString) {\r\n        String command = \"connect_db --connection-string \" + dbConnectionString;\r\n\r\n",
                        "nextNode": "dbConnectionString"
                    },
                    {
                        "name": "dbConnectionString",
                        "type": "Dataflow from `\"jdbc:mysql://mydb.abcdefghijklmnop.us-west-2.rds.amazonaws.com:3306/mydb?user=admin&password=secret\"` to `dbConnectionString`",
                        "context": "\r\n    public static void connectToDatabase(String dbConnectionString) {\r\n        String command = \"connect_db --connection-string \" + dbConnectionString;\r\n\r\n        try {\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "error",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "errorReader",
                        "type": "BufferedReader",
                        "context": "            String error;\r\n\r\n            while ((error = errorReader.readLine()) != null) {\r\n                PrintToConsole.print(\"Database connection error: \" + error);\r\n            }\r\n",
                        "nextNode": "errorReader.readLine()"
                    },
                    {
                        "name": "errorReader.readLine()",
                        "type": "String",
                        "context": "            String error;\r\n\r\n            while ((error = errorReader.readLine()) != null) {\r\n                PrintToConsole.print(\"Database connection error: \" + error);\r\n            }\r\n",
                        "nextNode": "error"
                    },
                    {
                        "name": "error",
                        "type": "Dataflow from `errorReader` to `error`\nDataflow from `readLine(...)` to `error`\nDataflow from `new BufferedReader(...)` to `error`\nDataflow from `new InputStreamReader(...)` to `error`\nDataflow from `getErrorStream(...)` to `error`",
                        "context": "\r\n            while ((error = errorReader.readLine()) != null) {\r\n                PrintToConsole.print(\"Database connection error: \" + error);\r\n            }\r\n\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "command",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "dbConnectionString",
                        "type": "String",
                        "context": "\r\n    public static void connectToDatabase(String dbConnectionString) {\r\n        String command = \"connect_db --connection-string \" + dbConnectionString;\r\n\r\n        try {\r\n",
                        "nextNode": "\"connect_db --connection-string \" + dbConnectionString"
                    },
                    {
                        "name": "\"connect_db --connection-string \" + dbConnectionString",
                        "type": "String",
                        "context": "\r\n    public static void connectToDatabase(String dbConnectionString) {\r\n        String command = \"connect_db --connection-string \" + dbConnectionString;\r\n\r\n        try {\r\n",
                        "nextNode": "command"
                    },
                    {
                        "name": "command",
                        "type": "Dataflow from `dbConnectionString` to `command`\nDataflow from `\"connect_db --connection-string \"` to `command`\nDataflow from `\"jdbc:mysql://mydb.abcdefghijklmnop.us-west-2.rds.amazonaws.com:3306/mydb?user=admin&password=secret\"` to `command`",
                        "context": "\r\n        try {\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n            String error;\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "Database connection failed, see logs for details.",
                "isSensitive": "no"
            },
            {
                "name": "Database connection error:",
                "isSensitive": "no"
            },
            {
                "name": "connect_db --connection-string",
                "isSensitive": "no"
            },
            {
                "name": "jdbc:mysql://mydb.abcdefghijklmnop.us-west-2.rds.amazonaws.com:3306/mydb?user=admin&password=secret",
                "isSensitive": "yes"
            },
            {
                "name": "Connection operation failed:",
                "isSensitive": "no"
            }
        ],
        "comments": [],
        "sinks": [
            {
                "name": "print",
                "isSink": "yes"
            },
            {
                "name": "connectToDatabase",
                "isSink": "yes"
            },
            {
                "name": "getErrorStream",
                "isSink": "no"
            },
            {
                "name": "getMessage",
                "isSink": "no"
            },
            {
                "name": "readLine",
                "isSink": "no"
            },
            {
                "name": "getRuntime",
                "isSink": "no"
            },
            {
                "name": "waitFor",
                "isSink": "no"
            },
            {
                "name": "exec",
                "isSink": "yes"
            }
        ]
    },
    {
        "fileName": "BAD_FileProcessorCustomSink.java",
        "variables": [
            {
                "name": "errorReader",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "new BufferedReader(new InputStreamReader(process.getErrorStream()",
                        "type": "BufferedReader",
                        "context": "        try {\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n            String error;\r\n\r\n",
                        "nextNode": "errorReader"
                    },
                    {
                        "name": "errorReader",
                        "type": "Dataflow from `new BufferedReader(...)` to `errorReader`\nDataflow from `new InputStreamReader(...)` to `errorReader`\nDataflow from `getErrorStream(...)` to `errorReader`",
                        "context": "            String error;\r\n\r\n            while ((error = errorReader.readLine()) != null) {\r\n                PrintErrorMessage.print(\"File processing error: \" + error);\r\n            }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "args",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "process",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "filePath",
                        "type": "String",
                        "context": "\r\n    public static void processFile(String filePath) {\r\n        String command = \"process_file --path \" + filePath;\r\n\r\n        try {\r\n | \r\n    public static void processFile(String filePath) {\r\n        String command = \"process_file --path \" + filePath;\r\n\r\n        try {\r\n",
                        "nextNode": "\"process_file --path \" + filePath"
                    },
                    {
                        "name": "\"process_file --path \" + filePath",
                        "type": "String",
                        "context": "\r\n    public static void processFile(String filePath) {\r\n        String command = \"process_file --path \" + filePath;\r\n\r\n        try {\r\n | \r\n    public static void processFile(String filePath) {\r\n        String command = \"process_file --path \" + filePath;\r\n\r\n        try {\r\n",
                        "nextNode": "command"
                    },
                    {
                        "name": "command",
                        "type": "String",
                        "context": "\r\n        try {\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n            String error;\r\n | \r\n        try {\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n            String error;\r\n",
                        "nextNode": "Runtime.getRuntime().exec(command)"
                    },
                    {
                        "name": "Runtime.getRuntime().exec(command)",
                        "type": "Process",
                        "context": "\r\n        try {\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n            String error;\r\n | \r\n        try {\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n            String error;\r\n",
                        "nextNode": "process"
                    },
                    {
                        "name": "process",
                        "type": "Dataflow from `filePath` to `process`\nDataflow from `command` to `process`\nDataflow from `\"process_file --path \"` to `process`\nDataflow from `exec(...)` to `process`\nDataflow from `\"/home/user/documents/financial_report_2024.txt\"` to `process`",
                        "context": "        try {\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n            String error;\r\n\r\n |         try {\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n            String error;\r\n\r\n |             }\r\n\r\n            if (process.waitFor() != 0) {\r\n                PrintErrorMessage.print(\"File processing failed, see logs for details.\");\r\n            }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "e",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "filePath",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "\"/home/user/documents/financial_report_2024.txt\"",
                        "type": "String",
                        "context": "\r\n    public static void main(String[] args) {\r\n        processFile(\"/home/user/documents/financial_report_2024.txt\");\r\n    }\r\n}\r\n",
                        "nextNode": "String filePath"
                    },
                    {
                        "name": "String filePath",
                        "type": "String",
                        "context": "public class BAD_FileProcessorCustomSink {\r\n\r\n    public static void processFile(String filePath) {\r\n        String command = \"process_file --path \" + filePath;\r\n\r\n",
                        "nextNode": "filePath"
                    },
                    {
                        "name": "filePath",
                        "type": "Dataflow from `\"/home/user/documents/financial_report_2024.txt\"` to `filePath`",
                        "context": "\r\n    public static void processFile(String filePath) {\r\n        String command = \"process_file --path \" + filePath;\r\n\r\n        try {\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "error",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "errorReader",
                        "type": "BufferedReader",
                        "context": "            String error;\r\n\r\n            while ((error = errorReader.readLine()) != null) {\r\n                PrintErrorMessage.print(\"File processing error: \" + error);\r\n            }\r\n",
                        "nextNode": "errorReader.readLine()"
                    },
                    {
                        "name": "errorReader.readLine()",
                        "type": "String",
                        "context": "            String error;\r\n\r\n            while ((error = errorReader.readLine()) != null) {\r\n                PrintErrorMessage.print(\"File processing error: \" + error);\r\n            }\r\n",
                        "nextNode": "error"
                    },
                    {
                        "name": "error",
                        "type": "Dataflow from `errorReader` to `error`\nDataflow from `readLine(...)` to `error`\nDataflow from `new BufferedReader(...)` to `error`\nDataflow from `new InputStreamReader(...)` to `error`\nDataflow from `getErrorStream(...)` to `error`",
                        "context": "\r\n            while ((error = errorReader.readLine()) != null) {\r\n                PrintErrorMessage.print(\"File processing error: \" + error);\r\n            }\r\n\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "command",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "filePath",
                        "type": "String",
                        "context": "\r\n    public static void processFile(String filePath) {\r\n        String command = \"process_file --path \" + filePath;\r\n\r\n        try {\r\n",
                        "nextNode": "\"process_file --path \" + filePath"
                    },
                    {
                        "name": "\"process_file --path \" + filePath",
                        "type": "String",
                        "context": "\r\n    public static void processFile(String filePath) {\r\n        String command = \"process_file --path \" + filePath;\r\n\r\n        try {\r\n",
                        "nextNode": "command"
                    },
                    {
                        "name": "command",
                        "type": "Dataflow from `filePath` to `command`\nDataflow from `\"process_file --path \"` to `command`\nDataflow from `\"/home/user/documents/financial_report_2024.txt\"` to `command`",
                        "context": "\r\n        try {\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n            String error;\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "File processing error:",
                "isSensitive": "no"
            },
            {
                "name": "/home/user/documents/financial_report_2024.txt",
                "isSensitive": "yes"
            },
            {
                "name": "File processing failed, see logs for details.",
                "isSensitive": "no"
            },
            {
                "name": "process_file --path",
                "isSensitive": "no"
            },
            {
                "name": "Processing operation failed:",
                "isSensitive": "no"
            }
        ],
        "comments": [],
        "sinks": [
            {
                "name": "processFile",
                "isSink": "no"
            },
            {
                "name": "print",
                "isSink": "yes"
            },
            {
                "name": "getErrorStream",
                "isSink": "no"
            },
            {
                "name": "getMessage",
                "isSink": "no"
            },
            {
                "name": "readLine",
                "isSink": "no"
            },
            {
                "name": "getRuntime",
                "isSink": "no"
            },
            {
                "name": "waitFor",
                "isSink": "no"
            },
            {
                "name": "exec",
                "isSink": "yes"
            }
        ]
    },
    {
        "fileName": "BAD_NetworkConfiguratorCustomSink.java",
        "variables": [
            {
                "name": "errorReader",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "new BufferedReader(new InputStreamReader(process.getErrorStream()",
                        "type": "BufferedReader",
                        "context": "        try {\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n            String error;\r\n\r\n",
                        "nextNode": "errorReader"
                    },
                    {
                        "name": "errorReader",
                        "type": "Dataflow from `new BufferedReader(...)` to `errorReader`\nDataflow from `new InputStreamReader(...)` to `errorReader`\nDataflow from `getErrorStream(...)` to `errorReader`",
                        "context": "            String error;\r\n\r\n            while ((error = errorReader.readLine()) != null) {\r\n                DisplayOnScreen.display(\"Network configuration error: \" + error);\r\n            }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "args",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "process",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "networkConfig",
                        "type": "String",
                        "context": "\r\n    public static void configureNetwork(String networkConfig) {\r\n        String command = \"configure_network --config \" + networkConfig;\r\n\r\n        try {\r\n | \r\n    public static void configureNetwork(String networkConfig) {\r\n        String command = \"configure_network --config \" + networkConfig;\r\n\r\n        try {\r\n",
                        "nextNode": "\"configure_network --config \" + networkConfig"
                    },
                    {
                        "name": "\"configure_network --config \" + networkConfig",
                        "type": "String",
                        "context": "\r\n    public static void configureNetwork(String networkConfig) {\r\n        String command = \"configure_network --config \" + networkConfig;\r\n\r\n        try {\r\n | \r\n    public static void configureNetwork(String networkConfig) {\r\n        String command = \"configure_network --config \" + networkConfig;\r\n\r\n        try {\r\n",
                        "nextNode": "command"
                    },
                    {
                        "name": "command",
                        "type": "String",
                        "context": "\r\n        try {\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n            String error;\r\n | \r\n        try {\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n            String error;\r\n",
                        "nextNode": "Runtime.getRuntime().exec(command)"
                    },
                    {
                        "name": "Runtime.getRuntime().exec(command)",
                        "type": "Process",
                        "context": "\r\n        try {\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n            String error;\r\n | \r\n        try {\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n            String error;\r\n",
                        "nextNode": "process"
                    },
                    {
                        "name": "process",
                        "type": "Dataflow from `networkConfig` to `process`\nDataflow from `command` to `process`\nDataflow from `\"configure_network --config \"` to `process`\nDataflow from `exec(...)` to `process`\nDataflow from `\"{{ \\\"ip\\\": \\\"192.168.1.1\\\", \\\"gateway\\\": \\\"192.168.1.254\\\" }}\"` to `process`",
                        "context": "        try {\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n            String error;\r\n\r\n |         try {\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n            String error;\r\n\r\n |             }\r\n\r\n            if (process.waitFor() != 0) {\r\n                DisplayOnScreen.display(\"Network configuration failed, see logs for details.\");\r\n            }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "e",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "networkConfig",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "\"{ \\\"ip\\\": \\\"192.168.1.1\\\", \\\"gateway\\\": \\\"192.168.1.254\\\" }\"",
                        "type": "String",
                        "context": "\r\n    public static void main(String[] args) {\r\n        configureNetwork(\"{ \\\"ip\\\": \\\"192.168.1.1\\\", \\\"gateway\\\": \\\"192.168.1.254\\\" }\");\r\n    }\r\n}\r\n",
                        "nextNode": "String networkConfig"
                    },
                    {
                        "name": "String networkConfig",
                        "type": "String",
                        "context": "public class BAD_NetworkConfiguratorCustomSink {\r\n\r\n    public static void configureNetwork(String networkConfig) {\r\n        String command = \"configure_network --config \" + networkConfig;\r\n\r\n",
                        "nextNode": "networkConfig"
                    },
                    {
                        "name": "networkConfig",
                        "type": "Dataflow from `\"{{ \\\"ip\\\": \\\"192.168.1.1\\\", \\\"gateway\\\": \\\"192.168.1.254\\\" }}\"` to `networkConfig`",
                        "context": "\r\n    public static void configureNetwork(String networkConfig) {\r\n        String command = \"configure_network --config \" + networkConfig;\r\n\r\n        try {\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "error",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "errorReader",
                        "type": "BufferedReader",
                        "context": "            String error;\r\n\r\n            while ((error = errorReader.readLine()) != null) {\r\n                DisplayOnScreen.display(\"Network configuration error: \" + error);\r\n            }\r\n",
                        "nextNode": "errorReader.readLine()"
                    },
                    {
                        "name": "errorReader.readLine()",
                        "type": "String",
                        "context": "            String error;\r\n\r\n            while ((error = errorReader.readLine()) != null) {\r\n                DisplayOnScreen.display(\"Network configuration error: \" + error);\r\n            }\r\n",
                        "nextNode": "error"
                    },
                    {
                        "name": "error",
                        "type": "Dataflow from `errorReader` to `error`\nDataflow from `readLine(...)` to `error`\nDataflow from `new BufferedReader(...)` to `error`\nDataflow from `new InputStreamReader(...)` to `error`\nDataflow from `getErrorStream(...)` to `error`",
                        "context": "\r\n            while ((error = errorReader.readLine()) != null) {\r\n                DisplayOnScreen.display(\"Network configuration error: \" + error);\r\n            }\r\n\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "command",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "networkConfig",
                        "type": "String",
                        "context": "\r\n    public static void configureNetwork(String networkConfig) {\r\n        String command = \"configure_network --config \" + networkConfig;\r\n\r\n        try {\r\n",
                        "nextNode": "\"configure_network --config \" + networkConfig"
                    },
                    {
                        "name": "\"configure_network --config \" + networkConfig",
                        "type": "String",
                        "context": "\r\n    public static void configureNetwork(String networkConfig) {\r\n        String command = \"configure_network --config \" + networkConfig;\r\n\r\n        try {\r\n",
                        "nextNode": "command"
                    },
                    {
                        "name": "command",
                        "type": "Dataflow from `networkConfig` to `command`\nDataflow from `\"configure_network --config \"` to `command`\nDataflow from `\"{{ \\\"ip\\\": \\\"192.168.1.1\\\", \\\"gateway\\\": \\\"192.168.1.254\\\" }}\"` to `command`",
                        "context": "\r\n        try {\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n            String error;\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "Configuration operation failed:",
                "isSensitive": "no"
            },
            {
                "name": "configure_network --config",
                "isSensitive": "no"
            },
            {
                "name": "{ \"ip\": \"192.168.1.1\", \"gateway\": \"192.168.1.254\" }",
                "isSensitive": "yes"
            },
            {
                "name": "Network configuration error:",
                "isSensitive": "no"
            },
            {
                "name": "Network configuration failed, see logs for details.",
                "isSensitive": "no"
            }
        ],
        "comments": [],
        "sinks": [
            {
                "name": "configureNetwork",
                "isSink": "no"
            },
            {
                "name": "getErrorStream",
                "isSink": "no"
            },
            {
                "name": "display",
                "isSink": "yes"
            },
            {
                "name": "getMessage",
                "isSink": "no"
            },
            {
                "name": "readLine",
                "isSink": "no"
            },
            {
                "name": "getRuntime",
                "isSink": "no"
            },
            {
                "name": "waitFor",
                "isSink": "no"
            },
            {
                "name": "exec",
                "isSink": "yes"
            }
        ]
    },
    {
        "fileName": "BAD_UserProfileManagerCustomSink.java",
        "variables": [
            {
                "name": "errorReader",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "new BufferedReader(new InputStreamReader(process.getErrorStream()",
                        "type": "BufferedReader",
                        "context": "        try {\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n            String error;\r\n\r\n",
                        "nextNode": "errorReader"
                    },
                    {
                        "name": "errorReader",
                        "type": "Dataflow from `new BufferedReader(...)` to `errorReader`\nDataflow from `new InputStreamReader(...)` to `errorReader`\nDataflow from `getErrorStream(...)` to `errorReader`",
                        "context": "            String error;\r\n\r\n            while ((error = errorReader.readLine()) != null) {\r\n                ShowMessage.show(\"User profile update error for user \" + userId + \": \" + error);\r\n            }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "args",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "process",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "profileData",
                        "type": "String",
                        "context": "\r\n    public static void updateUserProfile(String userId, String profileData) {\r\n        String command = \"update_user_profile --user-id \" + userId + \" --data \" + profileData;\r\n\r\n        try {\r\n | \r\n    public static void updateUserProfile(String userId, String profileData) {\r\n        String command = \"update_user_profile --user-id \" + userId + \" --data \" + profileData;\r\n\r\n        try {\r\n",
                        "nextNode": "\"update_user_profile --user-id \" + userId + \" --data \" + profileData"
                    },
                    {
                        "name": "\"update_user_profile --user-id \" + userId + \" --data \" + profileData",
                        "type": "String",
                        "context": "\r\n    public static void updateUserProfile(String userId, String profileData) {\r\n        String command = \"update_user_profile --user-id \" + userId + \" --data \" + profileData;\r\n\r\n        try {\r\n | \r\n    public static void updateUserProfile(String userId, String profileData) {\r\n        String command = \"update_user_profile --user-id \" + userId + \" --data \" + profileData;\r\n\r\n        try {\r\n",
                        "nextNode": "command"
                    },
                    {
                        "name": "command",
                        "type": "String",
                        "context": "\r\n        try {\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n            String error;\r\n | \r\n        try {\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n            String error;\r\n",
                        "nextNode": "Runtime.getRuntime().exec(command)"
                    },
                    {
                        "name": "Runtime.getRuntime().exec(command)",
                        "type": "Process",
                        "context": "\r\n        try {\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n            String error;\r\n | \r\n        try {\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n            String error;\r\n",
                        "nextNode": "process"
                    },
                    {
                        "name": "process",
                        "type": "Dataflow from `profileData` to `process`\nDataflow from `userId` to `process`\nDataflow from `command` to `process`\nDataflow from `\" --data \"` to `process`\nDataflow from `\"update_user_profile --user-id \"` to `process`\nDataflow from `exec(...)` to `process`\nDataflow from `\"user123\"` to `process`\nDataflow from `\"{{ \\\"name\\\": \\\"John Doe\\\", \\\"email\\\": \\\"john.doe@example.com\\\" }}\"` to `process`",
                        "context": "        try {\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n            String error;\r\n\r\n |         try {\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n            String error;\r\n\r\n |             }\r\n\r\n            if (process.waitFor() != 0) {\r\n                ShowMessage.show(\"User profile update failed for user \" + userId + \", see logs for details.\");\r\n            }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "e",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "error",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "errorReader",
                        "type": "BufferedReader",
                        "context": "            String error;\r\n\r\n            while ((error = errorReader.readLine()) != null) {\r\n                ShowMessage.show(\"User profile update error for user \" + userId + \": \" + error);\r\n            }\r\n",
                        "nextNode": "errorReader.readLine()"
                    },
                    {
                        "name": "errorReader.readLine()",
                        "type": "String",
                        "context": "            String error;\r\n\r\n            while ((error = errorReader.readLine()) != null) {\r\n                ShowMessage.show(\"User profile update error for user \" + userId + \": \" + error);\r\n            }\r\n",
                        "nextNode": "error"
                    },
                    {
                        "name": "error",
                        "type": "Dataflow from `errorReader` to `error`\nDataflow from `readLine(...)` to `error`\nDataflow from `new BufferedReader(...)` to `error`\nDataflow from `new InputStreamReader(...)` to `error`\nDataflow from `getErrorStream(...)` to `error`",
                        "context": "\r\n            while ((error = errorReader.readLine()) != null) {\r\n                ShowMessage.show(\"User profile update error for user \" + userId + \": \" + error);\r\n            }\r\n\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "profileData",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "\"{ \\\"name\\\": \\\"John Doe\\\", \\\"email\\\": \\\"john.doe@example.com\\\" }\"",
                        "type": "String",
                        "context": "\r\n    public static void main(String[] args) {\r\n        updateUserProfile(\"user123\", \"{ \\\"name\\\": \\\"John Doe\\\", \\\"email\\\": \\\"john.doe@example.com\\\" }\");\r\n    }\r\n}\r\n",
                        "nextNode": "String profileData"
                    },
                    {
                        "name": "String profileData",
                        "type": "String",
                        "context": "public class BAD_UserProfileManagerCustomSink {\r\n\r\n    public static void updateUserProfile(String userId, String profileData) {\r\n        String command = \"update_user_profile --user-id \" + userId + \" --data \" + profileData;\r\n\r\n",
                        "nextNode": "profileData"
                    },
                    {
                        "name": "profileData",
                        "type": "Dataflow from `\"{{ \\\"name\\\": \\\"John Doe\\\", \\\"email\\\": \\\"john.doe@example.com\\\" }}\"` to `profileData`",
                        "context": "\r\n    public static void updateUserProfile(String userId, String profileData) {\r\n        String command = \"update_user_profile --user-id \" + userId + \" --data \" + profileData;\r\n\r\n        try {\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "userId",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "\"user123\"",
                        "type": "String",
                        "context": "\r\n    public static void main(String[] args) {\r\n        updateUserProfile(\"user123\", \"{ \\\"name\\\": \\\"John Doe\\\", \\\"email\\\": \\\"john.doe@example.com\\\" }\");\r\n    }\r\n}\r\n | \r\n    public static void main(String[] args) {\r\n        updateUserProfile(\"user123\", \"{ \\\"name\\\": \\\"John Doe\\\", \\\"email\\\": \\\"john.doe@example.com\\\" }\");\r\n    }\r\n}\r\n | \r\n    public static void main(String[] args) {\r\n        updateUserProfile(\"user123\", \"{ \\\"name\\\": \\\"John Doe\\\", \\\"email\\\": \\\"john.doe@example.com\\\" }\");\r\n    }\r\n}\r\n | \r\n    public static void main(String[] args) {\r\n        updateUserProfile(\"user123\", \"{ \\\"name\\\": \\\"John Doe\\\", \\\"email\\\": \\\"john.doe@example.com\\\" }\");\r\n    }\r\n}\r\n",
                        "nextNode": "String userId"
                    },
                    {
                        "name": "String userId",
                        "type": "String",
                        "context": "public class BAD_UserProfileManagerCustomSink {\r\n\r\n    public static void updateUserProfile(String userId, String profileData) {\r\n        String command = \"update_user_profile --user-id \" + userId + \" --data \" + profileData;\r\n\r\n | public class BAD_UserProfileManagerCustomSink {\r\n\r\n    public static void updateUserProfile(String userId, String profileData) {\r\n        String command = \"update_user_profile --user-id \" + userId + \" --data \" + profileData;\r\n\r\n | public class BAD_UserProfileManagerCustomSink {\r\n\r\n    public static void updateUserProfile(String userId, String profileData) {\r\n        String command = \"update_user_profile --user-id \" + userId + \" --data \" + profileData;\r\n\r\n | public class BAD_UserProfileManagerCustomSink {\r\n\r\n    public static void updateUserProfile(String userId, String profileData) {\r\n        String command = \"update_user_profile --user-id \" + userId + \" --data \" + profileData;\r\n\r\n",
                        "nextNode": "userId"
                    },
                    {
                        "name": "userId",
                        "type": "Dataflow from `\"user123\"` to `userId`",
                        "context": "\r\n    public static void updateUserProfile(String userId, String profileData) {\r\n        String command = \"update_user_profile --user-id \" + userId + \" --data \" + profileData;\r\n\r\n        try {\r\n | \r\n    public static void updateUserProfile(String userId, String profileData) {\r\n        String command = \"update_user_profile --user-id \" + userId + \" --data \" + profileData;\r\n\r\n        try {\r\n | \r\n            while ((error = errorReader.readLine()) != null) {\r\n                ShowMessage.show(\"User profile update error for user \" + userId + \": \" + error);\r\n            }\r\n\r\n | \r\n    public static void updateUserProfile(String userId, String profileData) {\r\n        String command = \"update_user_profile --user-id \" + userId + \" --data \" + profileData;\r\n\r\n        try {\r\n | \r\n            if (process.waitFor() != 0) {\r\n                ShowMessage.show(\"User profile update failed for user \" + userId + \", see logs for details.\");\r\n            }\r\n        } catch (IOException | InterruptedException e) {\r\n | \r\n    public static void updateUserProfile(String userId, String profileData) {\r\n        String command = \"update_user_profile --user-id \" + userId + \" --data \" + profileData;\r\n\r\n        try {\r\n |             }\r\n        } catch (IOException | InterruptedException e) {\r\n            ShowMessage.show(\"Update operation failed for user \" + userId + \": \" + e.getMessage());\r\n        }\r\n    }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "command",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "profileData",
                        "type": "String",
                        "context": "\r\n    public static void updateUserProfile(String userId, String profileData) {\r\n        String command = \"update_user_profile --user-id \" + userId + \" --data \" + profileData;\r\n\r\n        try {\r\n",
                        "nextNode": "\"update_user_profile --user-id \" + userId + \" --data \" + profileData"
                    },
                    {
                        "name": "\"update_user_profile --user-id \" + userId + \" --data \" + profileData",
                        "type": "String",
                        "context": "\r\n    public static void updateUserProfile(String userId, String profileData) {\r\n        String command = \"update_user_profile --user-id \" + userId + \" --data \" + profileData;\r\n\r\n        try {\r\n",
                        "nextNode": "command"
                    },
                    {
                        "name": "command",
                        "type": "Dataflow from `profileData` to `command`\nDataflow from `userId` to `command`\nDataflow from `\" --data \"` to `command`\nDataflow from `\"update_user_profile --user-id \"` to `command`\nDataflow from `\"user123\"` to `command`\nDataflow from `\"{{ \\\"name\\\": \\\"John Doe\\\", \\\"email\\\": \\\"john.doe@example.com\\\" }}\"` to `command`",
                        "context": "\r\n        try {\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n            String error;\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "update_user_profile --user-id",
                "isSensitive": "no"
            },
            {
                "name": "User profile update failed for user",
                "isSensitive": "no"
            },
            {
                "name": "User profile update error for user",
                "isSensitive": "no"
            },
            {
                "name": "Update operation failed for user",
                "isSensitive": "no"
            },
            {
                "name": "--data",
                "isSensitive": "no"
            },
            {
                "name": ":",
                "isSensitive": "no"
            },
            {
                "name": ", see logs for details.",
                "isSensitive": "no"
            },
            {
                "name": "user123",
                "isSensitive": "yes"
            },
            {
                "name": "{ \"name\": \"John Doe\", \"email\": \"john.doe@example.com\" }",
                "isSensitive": "yes"
            }
        ],
        "comments": [],
        "sinks": [
            {
                "name": "getErrorStream",
                "isSink": "no"
            },
            {
                "name": "updateUserProfile",
                "isSink": "no"
            },
            {
                "name": "show",
                "isSink": "yes"
            },
            {
                "name": "getMessage",
                "isSink": "no"
            },
            {
                "name": "readLine",
                "isSink": "no"
            },
            {
                "name": "getRuntime",
                "isSink": "no"
            },
            {
                "name": "waitFor",
                "isSink": "no"
            },
            {
                "name": "exec",
                "isSink": "yes"
            }
        ]
    },
    {
        "fileName": "GOOD_APIKeyUpdater.java",
        "variables": [
            {
                "name": "errorReader",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "process",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "apiKey",
                        "type": "String",
                        "context": "    public static void updateAPIKey(String updateCommand, String apiKey) {\r\n        try {\r\n            Process process = Runtime.getRuntime().exec(updateCommand + \" \" + apiKey);\r\n            int exitCode = process.waitFor();\r\n            if (exitCode != 0) {\r\n |     public static void updateAPIKey(String updateCommand, String apiKey) {\r\n        try {\r\n            Process process = Runtime.getRuntime().exec(updateCommand + \" \" + apiKey);\r\n            int exitCode = process.waitFor();\r\n            if (exitCode != 0) {\r\n",
                        "nextNode": "updateCommand + \" \" + apiKey"
                    },
                    {
                        "name": "updateCommand + \" \" + apiKey",
                        "type": "String",
                        "context": "    public static void updateAPIKey(String updateCommand, String apiKey) {\r\n        try {\r\n            Process process = Runtime.getRuntime().exec(updateCommand + \" \" + apiKey);\r\n            int exitCode = process.waitFor();\r\n            if (exitCode != 0) {\r\n |     public static void updateAPIKey(String updateCommand, String apiKey) {\r\n        try {\r\n            Process process = Runtime.getRuntime().exec(updateCommand + \" \" + apiKey);\r\n            int exitCode = process.waitFor();\r\n            if (exitCode != 0) {\r\n",
                        "nextNode": "Runtime.getRuntime().exec(updateCommand + \" \" + apiKey)"
                    },
                    {
                        "name": "Runtime.getRuntime().exec(updateCommand + \" \" + apiKey)",
                        "type": "Process",
                        "context": "    public static void updateAPIKey(String updateCommand, String apiKey) {\r\n        try {\r\n            Process process = Runtime.getRuntime().exec(updateCommand + \" \" + apiKey);\r\n            int exitCode = process.waitFor();\r\n            if (exitCode != 0) {\r\n |     public static void updateAPIKey(String updateCommand, String apiKey) {\r\n        try {\r\n            Process process = Runtime.getRuntime().exec(updateCommand + \" \" + apiKey);\r\n            int exitCode = process.waitFor();\r\n            if (exitCode != 0) {\r\n",
                        "nextNode": "process"
                    },
                    {
                        "name": "process",
                        "type": "Dataflow from `apiKey` to `process`\nDataflow from `updateCommand` to `process`\nDataflow from `exec(...)` to `process`\nDataflow from `\" \"` to `process`",
                        "context": "        try {\r\n            Process process = Runtime.getRuntime().exec(updateCommand + \" \" + apiKey);\r\n            int exitCode = process.waitFor();\r\n            if (exitCode != 0) {\r\n                BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n |         try {\r\n            Process process = Runtime.getRuntime().exec(updateCommand + \" \" + apiKey);\r\n            int exitCode = process.waitFor();\r\n            if (exitCode != 0) {\r\n                BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n |             int exitCode = process.waitFor();\r\n            if (exitCode != 0) {\r\n                BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n                System.err.println(\"API Key update failed.\");\r\n            }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "apiKey",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "e",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "exitCode",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "process.waitFor()",
                        "type": "Number",
                        "context": "        try {\r\n            Process process = Runtime.getRuntime().exec(updateCommand + \" \" + apiKey);\r\n            int exitCode = process.waitFor();\r\n            if (exitCode != 0) {\r\n                BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n",
                        "nextNode": "exitCode"
                    },
                    {
                        "name": "exitCode",
                        "type": "Dataflow from `waitFor(...)` to `exitCode`",
                        "context": "            Process process = Runtime.getRuntime().exec(updateCommand + \" \" + apiKey);\r\n            int exitCode = process.waitFor();\r\n            if (exitCode != 0) {\r\n                BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n                System.err.println(\"API Key update failed.\");\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "updateCommand",
                "isSensitive": "yes",
                "graph": []
            }
        ],
        "strings": [
            {
                "name": "Error updating API key.",
                "isSensitive": "no"
            },
            {
                "name": "API Key update failed.",
                "isSensitive": "no"
            }
        ],
        "comments": [],
        "sinks": [
            {
                "name": "println",
                "isSink": "yes"
            },
            {
                "name": "getErrorStream",
                "isSink": "no"
            },
            {
                "name": "getRuntime",
                "isSink": "no"
            },
            {
                "name": "waitFor",
                "isSink": "no"
            },
            {
                "name": "exec",
                "isSink": "yes"
            }
        ]
    },
    {
        "fileName": "GOOD_CredentialUpdater.java",
        "variables": [
            {
                "name": "errorReader",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "new BufferedReader(new InputStreamReader(process.getErrorStream()",
                        "type": "BufferedReader",
                        "context": "\r\n            if (exitCode != 0) {\r\n                BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n                String errorDetails = errorReader.readLine();\r\n                logger.error(\"Failed to update credentials.\");\r\n",
                        "nextNode": "errorReader"
                    },
                    {
                        "name": "errorReader",
                        "type": "Dataflow from `new BufferedReader(...)` to `errorReader`\nDataflow from `new InputStreamReader(...)` to `errorReader`\nDataflow from `getErrorStream(...)` to `errorReader`",
                        "context": "            if (exitCode != 0) {\r\n                BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n                String errorDetails = errorReader.readLine();\r\n                logger.error(\"Failed to update credentials.\");\r\n                response.getWriter().write(\"Failed to update credentials. Please contact system administrator.\");\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "request",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "password",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "request.getParameter(\"password\")",
                        "type": "String",
                        "context": "    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\r\n        String username = request.getParameter(\"username\");\r\n        String password = request.getParameter(\"password\");\r\n        String command = \"/usr/bin/updatePassword \" + username + \" \" + password;\r\n\r\n",
                        "nextNode": "password"
                    },
                    {
                        "name": "password",
                        "type": "Dataflow from `getParameter(...)` to `password`\nDataflow from `\"password\"` to `password`",
                        "context": "        String username = request.getParameter(\"username\");\r\n        String password = request.getParameter(\"password\");\r\n        String command = \"/usr/bin/updatePassword \" + username + \" \" + password;\r\n\r\n        try {\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "process",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "password",
                        "type": "String",
                        "context": "        String username = request.getParameter(\"username\");\r\n        String password = request.getParameter(\"password\");\r\n        String command = \"/usr/bin/updatePassword \" + username + \" \" + password;\r\n\r\n        try {\r\n |         String username = request.getParameter(\"username\");\r\n        String password = request.getParameter(\"password\");\r\n        String command = \"/usr/bin/updatePassword \" + username + \" \" + password;\r\n\r\n        try {\r\n",
                        "nextNode": "\"/usr/bin/updatePassword \" + username + \" \" + password"
                    },
                    {
                        "name": "\"/usr/bin/updatePassword \" + username + \" \" + password",
                        "type": "String",
                        "context": "        String username = request.getParameter(\"username\");\r\n        String password = request.getParameter(\"password\");\r\n        String command = \"/usr/bin/updatePassword \" + username + \" \" + password;\r\n\r\n        try {\r\n |         String username = request.getParameter(\"username\");\r\n        String password = request.getParameter(\"password\");\r\n        String command = \"/usr/bin/updatePassword \" + username + \" \" + password;\r\n\r\n        try {\r\n",
                        "nextNode": "command"
                    },
                    {
                        "name": "command",
                        "type": "String",
                        "context": "\r\n        try {\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            int exitCode = process.waitFor();\r\n\r\n | \r\n        try {\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            int exitCode = process.waitFor();\r\n\r\n",
                        "nextNode": "Runtime.getRuntime().exec(command)"
                    },
                    {
                        "name": "Runtime.getRuntime().exec(command)",
                        "type": "Process",
                        "context": "\r\n        try {\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            int exitCode = process.waitFor();\r\n\r\n | \r\n        try {\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            int exitCode = process.waitFor();\r\n\r\n",
                        "nextNode": "process"
                    },
                    {
                        "name": "process",
                        "type": "Dataflow from `password` to `process`\nDataflow from `username` to `process`\nDataflow from `command` to `process`\nDataflow from `getParameter(...)` to `process`\nDataflow from `getParameter(...)` to `process`\nDataflow from `\" \"` to `process`\nDataflow from `\"/usr/bin/updatePassword \"` to `process`\nDataflow from `exec(...)` to `process`\nDataflow from `\"username\"` to `process`\nDataflow from `\"password\"` to `process`",
                        "context": "        try {\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            int exitCode = process.waitFor();\r\n\r\n            if (exitCode != 0) {\r\n |         try {\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            int exitCode = process.waitFor();\r\n\r\n            if (exitCode != 0) {\r\n | \r\n            if (exitCode != 0) {\r\n                BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n                String errorDetails = errorReader.readLine();\r\n                logger.error(\"Failed to update credentials.\");\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "e",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "response",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "logger",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "LogManager.getLogger(GOOD_CredentialUpdater.class)",
                        "type": "Logger",
                        "context": "\r\npublic class GOOD_CredentialUpdater extends HttpServlet {\r\n    private static final Logger logger = LogManager.getLogger(GOOD_CredentialUpdater.class);\r\n\r\n    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\r\n | \r\npublic class GOOD_CredentialUpdater extends HttpServlet {\r\n    private static final Logger logger = LogManager.getLogger(GOOD_CredentialUpdater.class);\r\n\r\n    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\r\n",
                        "nextNode": "logger"
                    },
                    {
                        "name": "logger",
                        "type": "Logger",
                        "context": "\r\npublic class GOOD_CredentialUpdater extends HttpServlet {\r\n    private static final Logger logger = LogManager.getLogger(GOOD_CredentialUpdater.class);\r\n\r\n    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\r\n |                 BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n                String errorDetails = errorReader.readLine();\r\n                logger.error(\"Failed to update credentials.\");\r\n                response.getWriter().write(\"Failed to update credentials. Please contact system administrator.\");\r\n            }\r\n | \r\npublic class GOOD_CredentialUpdater extends HttpServlet {\r\n    private static final Logger logger = LogManager.getLogger(GOOD_CredentialUpdater.class);\r\n\r\n    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\r\n |             }\r\n        } catch (InterruptedException | IOException e) {\r\n            logger.error(\"Exception when updating credentials.\");\r\n            response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);\r\n        }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "exitCode",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "process.waitFor()",
                        "type": "Number",
                        "context": "        try {\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            int exitCode = process.waitFor();\r\n\r\n            if (exitCode != 0) {\r\n",
                        "nextNode": "exitCode"
                    },
                    {
                        "name": "exitCode",
                        "type": "Dataflow from `waitFor(...)` to `exitCode`",
                        "context": "            int exitCode = process.waitFor();\r\n\r\n            if (exitCode != 0) {\r\n                BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n                String errorDetails = errorReader.readLine();\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "command",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "password",
                        "type": "String",
                        "context": "        String username = request.getParameter(\"username\");\r\n        String password = request.getParameter(\"password\");\r\n        String command = \"/usr/bin/updatePassword \" + username + \" \" + password;\r\n\r\n        try {\r\n",
                        "nextNode": "\"/usr/bin/updatePassword \" + username + \" \" + password"
                    },
                    {
                        "name": "\"/usr/bin/updatePassword \" + username + \" \" + password",
                        "type": "String",
                        "context": "        String username = request.getParameter(\"username\");\r\n        String password = request.getParameter(\"password\");\r\n        String command = \"/usr/bin/updatePassword \" + username + \" \" + password;\r\n\r\n        try {\r\n",
                        "nextNode": "command"
                    },
                    {
                        "name": "command",
                        "type": "Dataflow from `password` to `command`\nDataflow from `username` to `command`\nDataflow from `getParameter(...)` to `command`\nDataflow from `getParameter(...)` to `command`\nDataflow from `\" \"` to `command`\nDataflow from `\"/usr/bin/updatePassword \"` to `command`\nDataflow from `\"username\"` to `command`\nDataflow from `\"password\"` to `command`",
                        "context": "\r\n        try {\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            int exitCode = process.waitFor();\r\n\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "username",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "request.getParameter(\"username\")",
                        "type": "String",
                        "context": "\r\n    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\r\n        String username = request.getParameter(\"username\");\r\n        String password = request.getParameter(\"password\");\r\n        String command = \"/usr/bin/updatePassword \" + username + \" \" + password;\r\n",
                        "nextNode": "username"
                    },
                    {
                        "name": "username",
                        "type": "Dataflow from `getParameter(...)` to `username`\nDataflow from `\"username\"` to `username`",
                        "context": "        String username = request.getParameter(\"username\");\r\n        String password = request.getParameter(\"password\");\r\n        String command = \"/usr/bin/updatePassword \" + username + \" \" + password;\r\n\r\n        try {\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "errorDetails",
                "isSensitive": "yes",
                "graph": []
            }
        ],
        "strings": [
            {
                "name": "Failed to update credentials. Please contact system administrator.",
                "isSensitive": "no"
            },
            {
                "name": "password",
                "isSensitive": "no"
            },
            {
                "name": "Exception when updating credentials.",
                "isSensitive": "no"
            },
            {
                "name": "/usr/bin/updatePassword",
                "isSensitive": "no"
            },
            {
                "name": "username",
                "isSensitive": "no"
            },
            {
                "name": "Failed to update credentials.",
                "isSensitive": "no"
            }
        ],
        "comments": [],
        "sinks": [
            {
                "name": "getErrorStream",
                "isSink": "no"
            },
            {
                "name": "getWriter",
                "isSink": "no"
            },
            {
                "name": "getLogger",
                "isSink": "no"
            },
            {
                "name": "error",
                "isSink": "yes"
            },
            {
                "name": "readLine",
                "isSink": "no"
            },
            {
                "name": "getRuntime",
                "isSink": "no"
            },
            {
                "name": "waitFor",
                "isSink": "no"
            },
            {
                "name": "write",
                "isSink": "yes"
            },
            {
                "name": "setStatus",
                "isSink": "yes"
            },
            {
                "name": "exec",
                "isSink": "yes"
            },
            {
                "name": "getParameter",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "GOOD_DatabaseAccessLogger.java",
        "variables": [
            {
                "name": "errorReader",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "new BufferedReader(new InputStreamReader(process.getErrorStream()",
                        "type": "BufferedReader",
                        "context": "        try {\r\n            Process process = Runtime.getRuntime().exec(dbCommand + \" \" + connectionString);\r\n            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n            StringBuilder errorDetails = new StringBuilder();\r\n            String line;\r\n",
                        "nextNode": "errorReader"
                    },
                    {
                        "name": "errorReader",
                        "type": "Dataflow from `new BufferedReader(...)` to `errorReader`\nDataflow from `new InputStreamReader(...)` to `errorReader`\nDataflow from `getErrorStream(...)` to `errorReader`",
                        "context": "            String line;\r\n\r\n            while ((line = errorReader.readLine()) != null) {\r\n                errorDetails.append(line).append(\"\\n\");\r\n            }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "dbCommand",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "connectionString",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "process",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "connectionString",
                        "type": "String",
                        "context": "    public static void logDatabaseAccess(String dbCommand, String connectionString) {\r\n        try {\r\n            Process process = Runtime.getRuntime().exec(dbCommand + \" \" + connectionString);\r\n            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n            StringBuilder errorDetails = new StringBuilder();\r\n |     public static void logDatabaseAccess(String dbCommand, String connectionString) {\r\n        try {\r\n            Process process = Runtime.getRuntime().exec(dbCommand + \" \" + connectionString);\r\n            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n            StringBuilder errorDetails = new StringBuilder();\r\n",
                        "nextNode": "dbCommand + \" \" + connectionString"
                    },
                    {
                        "name": "dbCommand + \" \" + connectionString",
                        "type": "String",
                        "context": "    public static void logDatabaseAccess(String dbCommand, String connectionString) {\r\n        try {\r\n            Process process = Runtime.getRuntime().exec(dbCommand + \" \" + connectionString);\r\n            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n            StringBuilder errorDetails = new StringBuilder();\r\n |     public static void logDatabaseAccess(String dbCommand, String connectionString) {\r\n        try {\r\n            Process process = Runtime.getRuntime().exec(dbCommand + \" \" + connectionString);\r\n            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n            StringBuilder errorDetails = new StringBuilder();\r\n",
                        "nextNode": "Runtime.getRuntime().exec(dbCommand + \" \" + connectionString)"
                    },
                    {
                        "name": "Runtime.getRuntime().exec(dbCommand + \" \" + connectionString)",
                        "type": "Process",
                        "context": "    public static void logDatabaseAccess(String dbCommand, String connectionString) {\r\n        try {\r\n            Process process = Runtime.getRuntime().exec(dbCommand + \" \" + connectionString);\r\n            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n            StringBuilder errorDetails = new StringBuilder();\r\n |     public static void logDatabaseAccess(String dbCommand, String connectionString) {\r\n        try {\r\n            Process process = Runtime.getRuntime().exec(dbCommand + \" \" + connectionString);\r\n            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n            StringBuilder errorDetails = new StringBuilder();\r\n",
                        "nextNode": "process"
                    },
                    {
                        "name": "process",
                        "type": "Dataflow from `connectionString` to `process`\nDataflow from `dbCommand` to `process`\nDataflow from `exec(...)` to `process`\nDataflow from `\" \"` to `process`",
                        "context": "        try {\r\n            Process process = Runtime.getRuntime().exec(dbCommand + \" \" + connectionString);\r\n            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n            StringBuilder errorDetails = new StringBuilder();\r\n            String line;\r\n |         try {\r\n            Process process = Runtime.getRuntime().exec(dbCommand + \" \" + connectionString);\r\n            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n            StringBuilder errorDetails = new StringBuilder();\r\n            String line;\r\n |             }\r\n\r\n            if (process.waitFor() != 0) {\r\n                logger.error(\"Database access attempt failed with connection string.\");\r\n            }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "e",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "line",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "errorReader",
                        "type": "BufferedReader",
                        "context": "            String line;\r\n\r\n            while ((line = errorReader.readLine()) != null) {\r\n                errorDetails.append(line).append(\"\\n\");\r\n            }\r\n",
                        "nextNode": "errorReader.readLine()"
                    },
                    {
                        "name": "errorReader.readLine()",
                        "type": "String",
                        "context": "            String line;\r\n\r\n            while ((line = errorReader.readLine()) != null) {\r\n                errorDetails.append(line).append(\"\\n\");\r\n            }\r\n",
                        "nextNode": "line"
                    },
                    {
                        "name": "line",
                        "type": "Dataflow from `errorReader` to `line`\nDataflow from `readLine(...)` to `line`\nDataflow from `new BufferedReader(...)` to `line`\nDataflow from `new InputStreamReader(...)` to `line`\nDataflow from `getErrorStream(...)` to `line`",
                        "context": "\r\n            while ((line = errorReader.readLine()) != null) {\r\n                errorDetails.append(line).append(\"\\n\");\r\n            }\r\n\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "logger",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "LogManager.getLogger(GOOD_DatabaseAccessLogger.class)",
                        "type": "Logger",
                        "context": "\r\npublic class GOOD_DatabaseAccessLogger {\r\n    private static final Logger logger = LogManager.getLogger(GOOD_DatabaseAccessLogger.class);\r\n\r\n    public static void logDatabaseAccess(String dbCommand, String connectionString) {\r\n | \r\npublic class GOOD_DatabaseAccessLogger {\r\n    private static final Logger logger = LogManager.getLogger(GOOD_DatabaseAccessLogger.class);\r\n\r\n    public static void logDatabaseAccess(String dbCommand, String connectionString) {\r\n",
                        "nextNode": "logger"
                    },
                    {
                        "name": "logger",
                        "type": "Logger",
                        "context": "\r\npublic class GOOD_DatabaseAccessLogger {\r\n    private static final Logger logger = LogManager.getLogger(GOOD_DatabaseAccessLogger.class);\r\n\r\n    public static void logDatabaseAccess(String dbCommand, String connectionString) {\r\n | \r\n            if (process.waitFor() != 0) {\r\n                logger.error(\"Database access attempt failed with connection string.\");\r\n            }\r\n        } catch (IOException | InterruptedException e) {\r\n | \r\npublic class GOOD_DatabaseAccessLogger {\r\n    private static final Logger logger = LogManager.getLogger(GOOD_DatabaseAccessLogger.class);\r\n\r\n    public static void logDatabaseAccess(String dbCommand, String connectionString) {\r\n |             }\r\n        } catch (IOException | InterruptedException e) {\r\n            logger.error(\"Database operation failed.\");\r\n        }\r\n    }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "errorDetails",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "errorReader",
                        "type": "BufferedReader",
                        "context": "            String line;\r\n\r\n            while ((line = errorReader.readLine()) != null) {\r\n                errorDetails.append(line).append(\"\\n\");\r\n            }\r\n",
                        "nextNode": "errorReader.readLine()"
                    },
                    {
                        "name": "errorReader.readLine()",
                        "type": "String",
                        "context": "            String line;\r\n\r\n            while ((line = errorReader.readLine()) != null) {\r\n                errorDetails.append(line).append(\"\\n\");\r\n            }\r\n",
                        "nextNode": "line"
                    },
                    {
                        "name": "line",
                        "type": "String",
                        "context": "\r\n            while ((line = errorReader.readLine()) != null) {\r\n                errorDetails.append(line).append(\"\\n\");\r\n            }\r\n\r\n",
                        "nextNode": "errorDetails"
                    },
                    {
                        "name": "errorDetails",
                        "type": "StringBuilder",
                        "context": "\r\n            while ((line = errorReader.readLine()) != null) {\r\n                errorDetails.append(line).append(\"\\n\");\r\n            }\r\n\r\n | \r\n            while ((line = errorReader.readLine()) != null) {\r\n                errorDetails.append(line).append(\"\\n\");\r\n            }\r\n\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "Database operation failed.",
                "isSensitive": "no"
            },
            {
                "name": "Database access attempt failed with connection string.",
                "isSensitive": "no"
            },
            {
                "name": "n",
                "isSensitive": "no"
            }
        ],
        "comments": [],
        "sinks": [
            {
                "name": "getErrorStream",
                "isSink": "no"
            },
            {
                "name": "getLogger",
                "isSink": "no"
            },
            {
                "name": "error",
                "isSink": "yes"
            },
            {
                "name": "readLine",
                "isSink": "no"
            },
            {
                "name": "getRuntime",
                "isSink": "no"
            },
            {
                "name": "waitFor",
                "isSink": "no"
            },
            {
                "name": "exec",
                "isSink": "yes"
            },
            {
                "name": "append",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "GOOD_DatabaseCredentialsReset.java",
        "variables": [
            {
                "name": "errorReader",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "new BufferedReader(new InputStreamReader(process.getErrorStream()",
                        "type": "BufferedReader",
                        "context": "            String command = dbCommand + \" --user \" + username + \" --password \" + newPassword;\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n            String errorOutput = errorReader.readLine();\r\n\r\n",
                        "nextNode": "errorReader"
                    },
                    {
                        "name": "errorReader",
                        "type": "Dataflow from `new BufferedReader(...)` to `errorReader`\nDataflow from `new InputStreamReader(...)` to `errorReader`\nDataflow from `getErrorStream(...)` to `errorReader`",
                        "context": "            Process process = Runtime.getRuntime().exec(command);\r\n            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n            String errorOutput = errorReader.readLine();\r\n\r\n            if (process.waitFor() != 0) {\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "dbCommand",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "process",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "newPassword",
                        "type": "String",
                        "context": "    public static void resetDBPassword(String dbCommand, String username, String newPassword) {\r\n        try {\r\n            String command = dbCommand + \" --user \" + username + \" --password \" + newPassword;\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n |     public static void resetDBPassword(String dbCommand, String username, String newPassword) {\r\n        try {\r\n            String command = dbCommand + \" --user \" + username + \" --password \" + newPassword;\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n",
                        "nextNode": "dbCommand + \" --user \" + username + \" --password \" + newPassword"
                    },
                    {
                        "name": "dbCommand + \" --user \" + username + \" --password \" + newPassword",
                        "type": "String",
                        "context": "    public static void resetDBPassword(String dbCommand, String username, String newPassword) {\r\n        try {\r\n            String command = dbCommand + \" --user \" + username + \" --password \" + newPassword;\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n |     public static void resetDBPassword(String dbCommand, String username, String newPassword) {\r\n        try {\r\n            String command = dbCommand + \" --user \" + username + \" --password \" + newPassword;\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n",
                        "nextNode": "command"
                    },
                    {
                        "name": "command",
                        "type": "String",
                        "context": "        try {\r\n            String command = dbCommand + \" --user \" + username + \" --password \" + newPassword;\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n            String errorOutput = errorReader.readLine();\r\n |         try {\r\n            String command = dbCommand + \" --user \" + username + \" --password \" + newPassword;\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n            String errorOutput = errorReader.readLine();\r\n",
                        "nextNode": "Runtime.getRuntime().exec(command)"
                    },
                    {
                        "name": "Runtime.getRuntime().exec(command)",
                        "type": "Process",
                        "context": "        try {\r\n            String command = dbCommand + \" --user \" + username + \" --password \" + newPassword;\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n            String errorOutput = errorReader.readLine();\r\n |         try {\r\n            String command = dbCommand + \" --user \" + username + \" --password \" + newPassword;\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n            String errorOutput = errorReader.readLine();\r\n",
                        "nextNode": "process"
                    },
                    {
                        "name": "process",
                        "type": "Dataflow from `newPassword` to `process`\nDataflow from `username` to `process`\nDataflow from `dbCommand` to `process`\nDataflow from `command` to `process`\nDataflow from `\" --password \"` to `process`\nDataflow from `\" --user \"` to `process`\nDataflow from `exec(...)` to `process`",
                        "context": "            String command = dbCommand + \" --user \" + username + \" --password \" + newPassword;\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n            String errorOutput = errorReader.readLine();\r\n\r\n |             String command = dbCommand + \" --user \" + username + \" --password \" + newPassword;\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n            String errorOutput = errorReader.readLine();\r\n\r\n |             String errorOutput = errorReader.readLine();\r\n\r\n            if (process.waitFor() != 0) {\r\n                System.err.println(\"Failed to reset database password.\");\r\n            }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "e",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "newPassword",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "command",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "newPassword",
                        "type": "String",
                        "context": "    public static void resetDBPassword(String dbCommand, String username, String newPassword) {\r\n        try {\r\n            String command = dbCommand + \" --user \" + username + \" --password \" + newPassword;\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n",
                        "nextNode": "dbCommand + \" --user \" + username + \" --password \" + newPassword"
                    },
                    {
                        "name": "dbCommand + \" --user \" + username + \" --password \" + newPassword",
                        "type": "String",
                        "context": "    public static void resetDBPassword(String dbCommand, String username, String newPassword) {\r\n        try {\r\n            String command = dbCommand + \" --user \" + username + \" --password \" + newPassword;\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n",
                        "nextNode": "command"
                    },
                    {
                        "name": "command",
                        "type": "Dataflow from `newPassword` to `command`\nDataflow from `username` to `command`\nDataflow from `dbCommand` to `command`\nDataflow from `\" --password \"` to `command`\nDataflow from `\" --user \"` to `command`",
                        "context": "        try {\r\n            String command = dbCommand + \" --user \" + username + \" --password \" + newPassword;\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n            String errorOutput = errorReader.readLine();\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "errorOutput",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "username",
                "isSensitive": "yes",
                "graph": []
            }
        ],
        "strings": [
            {
                "name": "--user",
                "isSensitive": "no"
            },
            {
                "name": "--password",
                "isSensitive": "no"
            },
            {
                "name": "Error resetting database credentials.",
                "isSensitive": "no"
            },
            {
                "name": "Failed to reset database password.",
                "isSensitive": "no"
            }
        ],
        "comments": [],
        "sinks": [
            {
                "name": "println",
                "isSink": "yes"
            },
            {
                "name": "getErrorStream",
                "isSink": "no"
            },
            {
                "name": "readLine",
                "isSink": "no"
            },
            {
                "name": "getRuntime",
                "isSink": "no"
            },
            {
                "name": "waitFor",
                "isSink": "no"
            },
            {
                "name": "exec",
                "isSink": "yes"
            }
        ]
    },
    {
        "fileName": "GOOD_EncapsulatedSecurityContext.java",
        "variables": [
            {
                "name": "sanitizedError",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "errorOutput",
                        "type": "String",
                        "context": "\r\n    private static String sanitizeErrorOutput(String errorOutput) {\r\n        return errorOutput.replaceAll(\"sensitivePattern\", \"[REDACTED]\");\r\n    }\r\n}\r\n",
                        "nextNode": "errorOutput.replaceAll(\"sensitivePattern\", \"[REDACTED]\")"
                    },
                    {
                        "name": "errorOutput.replaceAll(\"sensitivePattern\", \"[REDACTED]\")",
                        "type": "String",
                        "context": "\r\n    private static String sanitizeErrorOutput(String errorOutput) {\r\n        return errorOutput.replaceAll(\"sensitivePattern\", \"[REDACTED]\");\r\n    }\r\n}\r\n",
                        "nextNode": "sanitizeErrorOutput(errorOutput)"
                    },
                    {
                        "name": "sanitizeErrorOutput(errorOutput)",
                        "type": "String",
                        "context": "            String errorOutput = new String(process.getErrorStream().readAllBytes());\r\n\r\n            String sanitizedError = sanitizeErrorOutput(errorOutput);\r\n\r\n            System.out.println(\"Sanitized Error: \" + sanitizedError);\r\n",
                        "nextNode": "sanitizedError"
                    },
                    {
                        "name": "sanitizedError",
                        "type": "Dataflow from `errorOutput` to `sanitizedError`\nDataflow from `readAllBytes(...)` to `sanitizedError`\nDataflow from `getErrorStream(...)` to `sanitizedError`\nDataflow from `replaceAll(...)` to `sanitizedError`\nDataflow from `\"\\[REDACTED\\]\"` to `sanitizedError`\nDataflow from `new String(...)` to `sanitizedError`\nDataflow from `sanitizeErrorOutput(...)` to `sanitizedError`\nDataflow from `errorOutput` to `sanitizedError`\nDataflow from `\"sensitivePattern\"` to `sanitizedError`",
                        "context": "            String sanitizedError = sanitizeErrorOutput(errorOutput);\r\n\r\n            System.out.println(\"Sanitized Error: \" + sanitizedError);\r\n        } catch (Exception e) {\r\n            System.out.println(\"An error occurred, please try again.\");\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "args",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "pb",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "command",
                        "type": "String[]",
                        "context": "        try {\r\n            String[] command = {\"sh\", \"-c\", \"bin/user/connectToServer.sh\"};\r\n            ProcessBuilder pb = new ProcessBuilder(command);\r\n            Process process = pb.start();\r\n\r\n",
                        "nextNode": "new ProcessBuilder(command)"
                    },
                    {
                        "name": "new ProcessBuilder(command)",
                        "type": "ProcessBuilder",
                        "context": "        try {\r\n            String[] command = {\"sh\", \"-c\", \"bin/user/connectToServer.sh\"};\r\n            ProcessBuilder pb = new ProcessBuilder(command);\r\n            Process process = pb.start();\r\n\r\n",
                        "nextNode": "pb"
                    },
                    {
                        "name": "pb",
                        "type": "Dataflow from `command` to `pb`\nDataflow from `\"sh\"` to `pb`\nDataflow from `\"-c\"` to `pb`\nDataflow from `\"bin/user/connectToServer.sh\"` to `pb`\nDataflow from `new ProcessBuilder(...)` to `pb`",
                        "context": "            String[] command = {\"sh\", \"-c\", \"bin/user/connectToServer.sh\"};\r\n            ProcessBuilder pb = new ProcessBuilder(command);\r\n            Process process = pb.start();\r\n\r\n            String errorOutput = new String(process.getErrorStream().readAllBytes());\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "process",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "pb.start()",
                        "type": "Process",
                        "context": "            String[] command = {\"sh\", \"-c\", \"bin/user/connectToServer.sh\"};\r\n            ProcessBuilder pb = new ProcessBuilder(command);\r\n            Process process = pb.start();\r\n\r\n            String errorOutput = new String(process.getErrorStream().readAllBytes());\r\n",
                        "nextNode": "process"
                    },
                    {
                        "name": "process",
                        "type": "Dataflow from `start(...)` to `process`",
                        "context": "            Process process = pb.start();\r\n\r\n            String errorOutput = new String(process.getErrorStream().readAllBytes());\r\n\r\n            String sanitizedError = sanitizeErrorOutput(errorOutput);\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "e",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "command",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "\"sh\"",
                        "type": "String",
                        "context": "    public static void main(String[] args) {\r\n        try {\r\n            String[] command = {\"sh\", \"-c\", \"bin/user/connectToServer.sh\"};\r\n            ProcessBuilder pb = new ProcessBuilder(command);\r\n            Process process = pb.start();\r\n",
                        "nextNode": "{\"sh\", \"-c\", \"bin/user/connectToServer.sh\"}"
                    },
                    {
                        "name": "{\"sh\", \"-c\", \"bin/user/connectToServer.sh\"}",
                        "type": "String",
                        "context": "    public static void main(String[] args) {\r\n        try {\r\n            String[] command = {\"sh\", \"-c\", \"bin/user/connectToServer.sh\"};\r\n            ProcessBuilder pb = new ProcessBuilder(command);\r\n            Process process = pb.start();\r\n |     public static void main(String[] args) {\r\n        try {\r\n            String[] command = {\"sh\", \"-c\", \"bin/user/connectToServer.sh\"};\r\n            ProcessBuilder pb = new ProcessBuilder(command);\r\n            Process process = pb.start();\r\n",
                        "nextNode": "command"
                    },
                    {
                        "name": "command",
                        "type": "String",
                        "context": "        try {\r\n            String[] command = {\"sh\", \"-c\", \"bin/user/connectToServer.sh\"};\r\n            ProcessBuilder pb = new ProcessBuilder(command);\r\n            Process process = pb.start();\r\n\r\n |         try {\r\n            String[] command = {\"sh\", \"-c\", \"bin/user/connectToServer.sh\"};\r\n            ProcessBuilder pb = new ProcessBuilder(command);\r\n            Process process = pb.start();\r\n\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "errorOutput",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "process.getErrorStream().readAllBytes()",
                        "type": "byte[]",
                        "context": "            Process process = pb.start();\r\n\r\n            String errorOutput = new String(process.getErrorStream().readAllBytes());\r\n\r\n            String sanitizedError = sanitizeErrorOutput(errorOutput);\r\n |             Process process = pb.start();\r\n\r\n            String errorOutput = new String(process.getErrorStream().readAllBytes());\r\n\r\n            String sanitizedError = sanitizeErrorOutput(errorOutput);\r\n",
                        "nextNode": "new String(process.getErrorStream().readAllBytes()"
                    },
                    {
                        "name": "new String(process.getErrorStream().readAllBytes()",
                        "type": "String",
                        "context": "            Process process = pb.start();\r\n\r\n            String errorOutput = new String(process.getErrorStream().readAllBytes());\r\n\r\n            String sanitizedError = sanitizeErrorOutput(errorOutput);\r\n |             Process process = pb.start();\r\n\r\n            String errorOutput = new String(process.getErrorStream().readAllBytes());\r\n\r\n            String sanitizedError = sanitizeErrorOutput(errorOutput);\r\n",
                        "nextNode": "errorOutput"
                    },
                    {
                        "name": "String errorOutput",
                        "type": "String",
                        "context": "    }\r\n\r\n    private static String sanitizeErrorOutput(String errorOutput) {\r\n        return errorOutput.replaceAll(\"sensitivePattern\", \"[REDACTED]\");\r\n    }\r\n",
                        "nextNode": "errorOutput"
                    },
                    {
                        "name": "errorOutput",
                        "type": "Dataflow from `readAllBytes(...)` to `errorOutput`\nDataflow from `getErrorStream(...)` to `errorOutput`\nDataflow from `new String(...)` to `errorOutput`",
                        "context": "            String errorOutput = new String(process.getErrorStream().readAllBytes());\r\n\r\n            String sanitizedError = sanitizeErrorOutput(errorOutput);\r\n\r\n            System.out.println(\"Sanitized Error: \" + sanitizedError);\r\n |             String errorOutput = new String(process.getErrorStream().readAllBytes());\r\n\r\n            String sanitizedError = sanitizeErrorOutput(errorOutput);\r\n\r\n            System.out.println(\"Sanitized Error: \" + sanitizedError);\r\n | \r\n    private static String sanitizeErrorOutput(String errorOutput) {\r\n        return errorOutput.replaceAll(\"sensitivePattern\", \"[REDACTED]\");\r\n    }\r\n}\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "bin/user/connectToServer.sh",
                "isSensitive": "yes"
            },
            {
                "name": "[REDACTED]",
                "isSensitive": "no"
            },
            {
                "name": "sh",
                "isSensitive": "no"
            },
            {
                "name": "-c",
                "isSensitive": "no"
            },
            {
                "name": "An error occurred, please try again.",
                "isSensitive": "no"
            },
            {
                "name": "sensitivePattern",
                "isSensitive": "no"
            },
            {
                "name": "Sanitized Error:",
                "isSensitive": "no"
            }
        ],
        "comments": [],
        "sinks": [
            {
                "name": "println",
                "isSink": "yes"
            },
            {
                "name": "getErrorStream",
                "isSink": "no"
            },
            {
                "name": "start",
                "isSink": "yes"
            },
            {
                "name": "readAllBytes",
                "isSink": "no"
            },
            {
                "name": "replaceAll",
                "isSink": "no"
            },
            {
                "name": "sanitizeErrorOutput",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "GOOD_FirewallConfigurationServlet.java",
        "variables": [
            {
                "name": "errorReader",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "new BufferedReader(new InputStreamReader(process.getErrorStream()",
                        "type": "BufferedReader",
                        "context": "\r\n            if (exitCode != 0) {\r\n                BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n                String errorDetails = errorReader.readLine();\r\n                logger.error(\"Failed to update firewall rules.\"); // safe logging\r\n",
                        "nextNode": "errorReader"
                    },
                    {
                        "name": "errorReader",
                        "type": "Dataflow from `new BufferedReader(...)` to `errorReader`\nDataflow from `new InputStreamReader(...)` to `errorReader`\nDataflow from `getErrorStream(...)` to `errorReader`",
                        "context": "            if (exitCode != 0) {\r\n                BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n                String errorDetails = errorReader.readLine();\r\n                logger.error(\"Failed to update firewall rules.\"); // safe logging\r\n                response.getWriter().write(\"Failed to update firewall rules. Please contact system administrator.\");\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "request",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "process",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "firewallRule",
                        "type": "String",
                        "context": "    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\r\n        String firewallRule = request.getParameter(\"rule\");\r\n        String command = \"/usr/bin/updateFirewall \" + firewallRule;\r\n\r\n        try {\r\n |     protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\r\n        String firewallRule = request.getParameter(\"rule\");\r\n        String command = \"/usr/bin/updateFirewall \" + firewallRule;\r\n\r\n        try {\r\n",
                        "nextNode": "\"/usr/bin/updateFirewall \" + firewallRule"
                    },
                    {
                        "name": "\"/usr/bin/updateFirewall \" + firewallRule",
                        "type": "String",
                        "context": "    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\r\n        String firewallRule = request.getParameter(\"rule\");\r\n        String command = \"/usr/bin/updateFirewall \" + firewallRule;\r\n\r\n        try {\r\n |     protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\r\n        String firewallRule = request.getParameter(\"rule\");\r\n        String command = \"/usr/bin/updateFirewall \" + firewallRule;\r\n\r\n        try {\r\n",
                        "nextNode": "command"
                    },
                    {
                        "name": "command",
                        "type": "String",
                        "context": "\r\n        try {\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            int exitCode = process.waitFor();\r\n\r\n | \r\n        try {\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            int exitCode = process.waitFor();\r\n\r\n",
                        "nextNode": "Runtime.getRuntime().exec(command)"
                    },
                    {
                        "name": "Runtime.getRuntime().exec(command)",
                        "type": "Process",
                        "context": "\r\n        try {\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            int exitCode = process.waitFor();\r\n\r\n | \r\n        try {\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            int exitCode = process.waitFor();\r\n\r\n",
                        "nextNode": "process"
                    },
                    {
                        "name": "process",
                        "type": "Dataflow from `firewallRule` to `process`\nDataflow from `command` to `process`\nDataflow from `getParameter(...)` to `process`\nDataflow from `\"/usr/bin/updateFirewall \"` to `process`\nDataflow from `exec(...)` to `process`\nDataflow from `\"rule\"` to `process`",
                        "context": "        try {\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            int exitCode = process.waitFor();\r\n\r\n            if (exitCode != 0) {\r\n |         try {\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            int exitCode = process.waitFor();\r\n\r\n            if (exitCode != 0) {\r\n | \r\n            if (exitCode != 0) {\r\n                BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n                String errorDetails = errorReader.readLine();\r\n                logger.error(\"Failed to update firewall rules.\"); // safe logging\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "e",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "response",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "logger",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "LogManager.getLogger(GOOD_FirewallConfigurationServlet.class)",
                        "type": "Logger",
                        "context": "\r\npublic class GOOD_FirewallConfigurationServlet extends HttpServlet {\r\n    private static final Logger logger = LogManager.getLogger(GOOD_FirewallConfigurationServlet.class);\r\n\r\n    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\r\n | \r\npublic class GOOD_FirewallConfigurationServlet extends HttpServlet {\r\n    private static final Logger logger = LogManager.getLogger(GOOD_FirewallConfigurationServlet.class);\r\n\r\n    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\r\n",
                        "nextNode": "logger"
                    },
                    {
                        "name": "logger",
                        "type": "Logger",
                        "context": "\r\npublic class GOOD_FirewallConfigurationServlet extends HttpServlet {\r\n    private static final Logger logger = LogManager.getLogger(GOOD_FirewallConfigurationServlet.class);\r\n\r\n    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\r\n |                 BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n                String errorDetails = errorReader.readLine();\r\n                logger.error(\"Failed to update firewall rules.\"); // safe logging\r\n                response.getWriter().write(\"Failed to update firewall rules. Please contact system administrator.\");\r\n            }\r\n | \r\npublic class GOOD_FirewallConfigurationServlet extends HttpServlet {\r\n    private static final Logger logger = LogManager.getLogger(GOOD_FirewallConfigurationServlet.class);\r\n\r\n    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\r\n |             }\r\n        } catch (InterruptedException | IOException e) {\r\n            logger.error(\"Exception when updating firewall.\");\r\n            response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);\r\n        }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "exitCode",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "process.waitFor()",
                        "type": "Number",
                        "context": "        try {\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            int exitCode = process.waitFor();\r\n\r\n            if (exitCode != 0) {\r\n",
                        "nextNode": "exitCode"
                    },
                    {
                        "name": "exitCode",
                        "type": "Dataflow from `waitFor(...)` to `exitCode`",
                        "context": "            int exitCode = process.waitFor();\r\n\r\n            if (exitCode != 0) {\r\n                BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n                String errorDetails = errorReader.readLine();\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "firewallRule",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "request.getParameter(\"rule\")",
                        "type": "String",
                        "context": "\r\n    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\r\n        String firewallRule = request.getParameter(\"rule\");\r\n        String command = \"/usr/bin/updateFirewall \" + firewallRule;\r\n\r\n",
                        "nextNode": "firewallRule"
                    },
                    {
                        "name": "firewallRule",
                        "type": "Dataflow from `getParameter(...)` to `firewallRule`\nDataflow from `\"rule\"` to `firewallRule`",
                        "context": "    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\r\n        String firewallRule = request.getParameter(\"rule\");\r\n        String command = \"/usr/bin/updateFirewall \" + firewallRule;\r\n\r\n        try {\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "command",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "firewallRule",
                        "type": "String",
                        "context": "    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\r\n        String firewallRule = request.getParameter(\"rule\");\r\n        String command = \"/usr/bin/updateFirewall \" + firewallRule;\r\n\r\n        try {\r\n",
                        "nextNode": "\"/usr/bin/updateFirewall \" + firewallRule"
                    },
                    {
                        "name": "\"/usr/bin/updateFirewall \" + firewallRule",
                        "type": "String",
                        "context": "    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\r\n        String firewallRule = request.getParameter(\"rule\");\r\n        String command = \"/usr/bin/updateFirewall \" + firewallRule;\r\n\r\n        try {\r\n",
                        "nextNode": "command"
                    },
                    {
                        "name": "command",
                        "type": "Dataflow from `firewallRule` to `command`\nDataflow from `getParameter(...)` to `command`\nDataflow from `\"/usr/bin/updateFirewall \"` to `command`\nDataflow from `\"rule\"` to `command`",
                        "context": "\r\n        try {\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            int exitCode = process.waitFor();\r\n\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "errorDetails",
                "isSensitive": "yes",
                "graph": []
            }
        ],
        "strings": [
            {
                "name": "Failed to update firewall rules. Please contact system administrator.",
                "isSensitive": "no"
            },
            {
                "name": "Exception when updating firewall.",
                "isSensitive": "no"
            },
            {
                "name": "rule",
                "isSensitive": "no"
            },
            {
                "name": "Failed to update firewall rules.",
                "isSensitive": "no"
            },
            {
                "name": "/usr/bin/updateFirewall",
                "isSensitive": "no"
            }
        ],
        "comments": [
            {
                "name": "safe logging",
                "isSensitive": "no"
            }
        ],
        "sinks": [
            {
                "name": "getErrorStream",
                "isSink": "no"
            },
            {
                "name": "getWriter",
                "isSink": "no"
            },
            {
                "name": "getLogger",
                "isSink": "no"
            },
            {
                "name": "error",
                "isSink": "yes"
            },
            {
                "name": "readLine",
                "isSink": "no"
            },
            {
                "name": "getRuntime",
                "isSink": "no"
            },
            {
                "name": "waitFor",
                "isSink": "no"
            },
            {
                "name": "write",
                "isSink": "yes"
            },
            {
                "name": "setStatus",
                "isSink": "yes"
            },
            {
                "name": "exec",
                "isSink": "yes"
            },
            {
                "name": "getParameter",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "GOOD_MisconfiguredPermissions.java",
        "variables": [
            {
                "name": "scriptPath",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "\"/usr/local/scripts/script.sh\"",
                        "type": "String",
                        "context": "    public static void main(String[] args) {\r\n        try {\r\n            String scriptPath = \"/usr/local/scripts/script.sh\";\r\n            ProcessBuilder pb = new ProcessBuilder(\"bash\", scriptPath);\r\n            Process process = pb.start();\r\n",
                        "nextNode": "scriptPath"
                    },
                    {
                        "name": "scriptPath",
                        "type": "Dataflow from `\"/usr/local/scripts/script.sh\"` to `scriptPath`",
                        "context": "        try {\r\n            String scriptPath = \"/usr/local/scripts/script.sh\";\r\n            ProcessBuilder pb = new ProcessBuilder(\"bash\", scriptPath);\r\n            Process process = pb.start();\r\n            process.waitFor();\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "args",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "pb",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "scriptPath",
                        "type": "String",
                        "context": "        try {\r\n            String scriptPath = \"/usr/local/scripts/script.sh\";\r\n            ProcessBuilder pb = new ProcessBuilder(\"bash\", scriptPath);\r\n            Process process = pb.start();\r\n            process.waitFor();\r\n",
                        "nextNode": "new ProcessBuilder(\"bash\", scriptPath)"
                    },
                    {
                        "name": "new ProcessBuilder(\"bash\", scriptPath)",
                        "type": "ProcessBuilder",
                        "context": "        try {\r\n            String scriptPath = \"/usr/local/scripts/script.sh\";\r\n            ProcessBuilder pb = new ProcessBuilder(\"bash\", scriptPath);\r\n            Process process = pb.start();\r\n            process.waitFor();\r\n",
                        "nextNode": "pb"
                    },
                    {
                        "name": "pb",
                        "type": "Dataflow from `scriptPath` to `pb`\nDataflow from `\"/usr/local/scripts/script.sh\"` to `pb`\nDataflow from `new ProcessBuilder(...)` to `pb`\nDataflow from `\"bash\"` to `pb`",
                        "context": "            String scriptPath = \"/usr/local/scripts/script.sh\";\r\n            ProcessBuilder pb = new ProcessBuilder(\"bash\", scriptPath);\r\n            Process process = pb.start();\r\n            process.waitFor();\r\n\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "process",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "pb.start()",
                        "type": "Process",
                        "context": "            String scriptPath = \"/usr/local/scripts/script.sh\";\r\n            ProcessBuilder pb = new ProcessBuilder(\"bash\", scriptPath);\r\n            Process process = pb.start();\r\n            process.waitFor();\r\n\r\n",
                        "nextNode": "process"
                    },
                    {
                        "name": "process",
                        "type": "Dataflow from `start(...)` to `process`",
                        "context": "            ProcessBuilder pb = new ProcessBuilder(\"bash\", scriptPath);\r\n            Process process = pb.start();\r\n            process.waitFor();\r\n\r\n            System.out.println(\"Error.\");\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "e",
                "isSensitive": "yes",
                "graph": []
            }
        ],
        "strings": [
            {
                "name": "/usr/local/scripts/script.sh",
                "isSensitive": "yes"
            },
            {
                "name": "An error has occured",
                "isSensitive": "no"
            },
            {
                "name": "bash",
                "isSensitive": "no"
            },
            {
                "name": "Error.",
                "isSensitive": "no"
            }
        ],
        "comments": [],
        "sinks": [
            {
                "name": "println",
                "isSink": "yes"
            },
            {
                "name": "start",
                "isSink": "yes"
            },
            {
                "name": "waitFor",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "GOOD_SecretFileDecryptor.java",
        "variables": [
            {
                "name": "errorReader",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "new BufferedReader(new InputStreamReader(process.getErrorStream()",
                        "type": "BufferedReader",
                        "context": "        try {\r\n            Process process = Runtime.getRuntime().exec(decryptionToolPath + \" \" + encryptedFilePath);\r\n            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n            String error = errorReader.readLine();\r\n\r\n",
                        "nextNode": "errorReader"
                    },
                    {
                        "name": "errorReader",
                        "type": "Dataflow from `new BufferedReader(...)` to `errorReader`\nDataflow from `new InputStreamReader(...)` to `errorReader`\nDataflow from `getErrorStream(...)` to `errorReader`",
                        "context": "            Process process = Runtime.getRuntime().exec(decryptionToolPath + \" \" + encryptedFilePath);\r\n            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n            String error = errorReader.readLine();\r\n\r\n            if (process.waitFor() != 0) {\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "process",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "encryptedFilePath",
                        "type": "String",
                        "context": "    public static void decryptFile(String decryptionToolPath, String encryptedFilePath) {\r\n        try {\r\n            Process process = Runtime.getRuntime().exec(decryptionToolPath + \" \" + encryptedFilePath);\r\n            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n            String error = errorReader.readLine();\r\n |     public static void decryptFile(String decryptionToolPath, String encryptedFilePath) {\r\n        try {\r\n            Process process = Runtime.getRuntime().exec(decryptionToolPath + \" \" + encryptedFilePath);\r\n            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n            String error = errorReader.readLine();\r\n",
                        "nextNode": "decryptionToolPath + \" \" + encryptedFilePath"
                    },
                    {
                        "name": "decryptionToolPath + \" \" + encryptedFilePath",
                        "type": "String",
                        "context": "    public static void decryptFile(String decryptionToolPath, String encryptedFilePath) {\r\n        try {\r\n            Process process = Runtime.getRuntime().exec(decryptionToolPath + \" \" + encryptedFilePath);\r\n            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n            String error = errorReader.readLine();\r\n |     public static void decryptFile(String decryptionToolPath, String encryptedFilePath) {\r\n        try {\r\n            Process process = Runtime.getRuntime().exec(decryptionToolPath + \" \" + encryptedFilePath);\r\n            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n            String error = errorReader.readLine();\r\n",
                        "nextNode": "Runtime.getRuntime().exec(decryptionToolPath + \" \" + encryptedFilePath)"
                    },
                    {
                        "name": "Runtime.getRuntime().exec(decryptionToolPath + \" \" + encryptedFilePath)",
                        "type": "Process",
                        "context": "    public static void decryptFile(String decryptionToolPath, String encryptedFilePath) {\r\n        try {\r\n            Process process = Runtime.getRuntime().exec(decryptionToolPath + \" \" + encryptedFilePath);\r\n            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n            String error = errorReader.readLine();\r\n |     public static void decryptFile(String decryptionToolPath, String encryptedFilePath) {\r\n        try {\r\n            Process process = Runtime.getRuntime().exec(decryptionToolPath + \" \" + encryptedFilePath);\r\n            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n            String error = errorReader.readLine();\r\n",
                        "nextNode": "process"
                    },
                    {
                        "name": "process",
                        "type": "Dataflow from `encryptedFilePath` to `process`\nDataflow from `decryptionToolPath` to `process`\nDataflow from `exec(...)` to `process`\nDataflow from `\" \"` to `process`",
                        "context": "        try {\r\n            Process process = Runtime.getRuntime().exec(decryptionToolPath + \" \" + encryptedFilePath);\r\n            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n            String error = errorReader.readLine();\r\n\r\n |         try {\r\n            Process process = Runtime.getRuntime().exec(decryptionToolPath + \" \" + encryptedFilePath);\r\n            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n            String error = errorReader.readLine();\r\n\r\n |             String error = errorReader.readLine();\r\n\r\n            if (process.waitFor() != 0) {\r\n                System.err.println(\"Decryption failed.\");\r\n            }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "decryptionToolPath",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "e",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "encryptedFilePath",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "error",
                "isSensitive": "yes",
                "graph": []
            }
        ],
        "strings": [
            {
                "name": "Decryption process error.",
                "isSensitive": "no"
            },
            {
                "name": "Decryption failed.",
                "isSensitive": "no"
            }
        ],
        "comments": [],
        "sinks": [
            {
                "name": "println",
                "isSink": "yes"
            },
            {
                "name": "getErrorStream",
                "isSink": "no"
            },
            {
                "name": "readLine",
                "isSink": "no"
            },
            {
                "name": "getRuntime",
                "isSink": "no"
            },
            {
                "name": "waitFor",
                "isSink": "no"
            },
            {
                "name": "exec",
                "isSink": "yes"
            }
        ]
    },
    {
        "fileName": "GOOD_SecureShellCommandHandling.java",
        "variables": [
            {
                "name": "args",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "process",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "command",
                        "type": "String[]",
                        "context": "        try {\r\n            String[] command = {\"sh\", \"-c\", \"cp /path/to/sensitive/file /backup/location\"};\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            int exitCode = process.waitFor();\r\n\r\n",
                        "nextNode": "Runtime.getRuntime().exec(command)"
                    },
                    {
                        "name": "Runtime.getRuntime().exec(command)",
                        "type": "Process",
                        "context": "        try {\r\n            String[] command = {\"sh\", \"-c\", \"cp /path/to/sensitive/file /backup/location\"};\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            int exitCode = process.waitFor();\r\n\r\n",
                        "nextNode": "process"
                    },
                    {
                        "name": "process",
                        "type": "Dataflow from `command` to `process`\nDataflow from `\"sh\"` to `process`\nDataflow from `\"-c\"` to `process`\nDataflow from `\"cp /path/to/sensitive/file /backup/location\"` to `process`\nDataflow from `exec(...)` to `process`",
                        "context": "            String[] command = {\"sh\", \"-c\", \"cp /path/to/sensitive/file /backup/location\"};\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            int exitCode = process.waitFor();\r\n\r\n            if (exitCode != 0) {\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "e",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "exitCode",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "process.waitFor()",
                        "type": "Number",
                        "context": "            String[] command = {\"sh\", \"-c\", \"cp /path/to/sensitive/file /backup/location\"};\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            int exitCode = process.waitFor();\r\n\r\n            if (exitCode != 0) {\r\n",
                        "nextNode": "exitCode"
                    },
                    {
                        "name": "exitCode",
                        "type": "Dataflow from `waitFor(...)` to `exitCode`",
                        "context": "            int exitCode = process.waitFor();\r\n\r\n            if (exitCode != 0) {\r\n                logErrorSecurely(\"Backup operation failed. Please check system logs.\");\r\n            }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "message",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "\"Backup operation failed. Please check system logs.\"",
                        "type": "String",
                        "context": "\r\n            if (exitCode != 0) {\r\n                logErrorSecurely(\"Backup operation failed. Please check system logs.\");\r\n            }\r\n        } catch (Exception e) {\r\n",
                        "nextNode": "String message"
                    },
                    {
                        "name": "String message",
                        "type": "String",
                        "context": "    }\r\n\r\n    private static void logErrorSecurely(String message) {\r\n        System.out.println(message);\r\n    }\r\n",
                        "nextNode": "message"
                    },
                    {
                        "name": "message",
                        "type": "Dataflow from `\"Backup operation failed. Please check system logs.\"` to `message`\nDataflow from `\"Exception in executing backup command.\"` to `message`",
                        "context": "\r\n    private static void logErrorSecurely(String message) {\r\n        System.out.println(message);\r\n    }\r\n}\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "command",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "\"sh\"",
                        "type": "String",
                        "context": "    public static void main(String[] args) {\r\n        try {\r\n            String[] command = {\"sh\", \"-c\", \"cp /path/to/sensitive/file /backup/location\"};\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            int exitCode = process.waitFor();\r\n",
                        "nextNode": "{\"sh\", \"-c\", \"cp /path/to/sensitive/file /backup/location\"}"
                    },
                    {
                        "name": "{\"sh\", \"-c\", \"cp /path/to/sensitive/file /backup/location\"}",
                        "type": "String",
                        "context": "    public static void main(String[] args) {\r\n        try {\r\n            String[] command = {\"sh\", \"-c\", \"cp /path/to/sensitive/file /backup/location\"};\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            int exitCode = process.waitFor();\r\n |     public static void main(String[] args) {\r\n        try {\r\n            String[] command = {\"sh\", \"-c\", \"cp /path/to/sensitive/file /backup/location\"};\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            int exitCode = process.waitFor();\r\n",
                        "nextNode": "command"
                    },
                    {
                        "name": "command",
                        "type": "String",
                        "context": "        try {\r\n            String[] command = {\"sh\", \"-c\", \"cp /path/to/sensitive/file /backup/location\"};\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            int exitCode = process.waitFor();\r\n\r\n |         try {\r\n            String[] command = {\"sh\", \"-c\", \"cp /path/to/sensitive/file /backup/location\"};\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            int exitCode = process.waitFor();\r\n\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "sh",
                "isSensitive": "no"
            },
            {
                "name": "-c",
                "isSensitive": "no"
            },
            {
                "name": "Backup operation failed. Please check system logs.",
                "isSensitive": "no"
            },
            {
                "name": "cp /path/to/sensitive/file /backup/location",
                "isSensitive": "yes"
            },
            {
                "name": "Exception in executing backup command.",
                "isSensitive": "no"
            }
        ],
        "comments": [],
        "sinks": [
            {
                "name": "println",
                "isSink": "yes"
            },
            {
                "name": "logErrorSecurely",
                "isSink": "no"
            },
            {
                "name": "getRuntime",
                "isSink": "no"
            },
            {
                "name": "waitFor",
                "isSink": "no"
            },
            {
                "name": "exec",
                "isSink": "yes"
            }
        ]
    },
    {
        "fileName": "GOOD_SensitiveInfoExposureViaShellError.java",
        "variables": [
            {
                "name": "args",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "process",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "command",
                        "type": "String[]",
                        "context": "        try {\r\n            String[] command = {\"/bin/sh\", \"-c\", \"somecommand --password=SunnyVale2025\"};\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            process.waitFor();\r\n\r\n |         try {\r\n            String[] command = {\"/bin/sh\", \"-c\", \"somecommand --password=SunnyVale2025\"};\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            process.waitFor();\r\n\r\n",
                        "nextNode": "Runtime.getRuntime().exec(command)"
                    },
                    {
                        "name": "Runtime.getRuntime().exec(command)",
                        "type": "Process",
                        "context": "        try {\r\n            String[] command = {\"/bin/sh\", \"-c\", \"somecommand --password=SunnyVale2025\"};\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            process.waitFor();\r\n\r\n |         try {\r\n            String[] command = {\"/bin/sh\", \"-c\", \"somecommand --password=SunnyVale2025\"};\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            process.waitFor();\r\n\r\n",
                        "nextNode": "process"
                    },
                    {
                        "name": "process",
                        "type": "Process",
                        "context": "            String[] command = {\"/bin/sh\", \"-c\", \"somecommand --password=SunnyVale2025\"};\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            process.waitFor();\r\n\r\n            BufferedReader reader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n |             process.waitFor();\r\n\r\n            BufferedReader reader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n          System.err.println(\"An error occurred.\");\r\n        } catch (Exception e) {\r\n |             String[] command = {\"/bin/sh\", \"-c\", \"somecommand --password=SunnyVale2025\"};\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            process.waitFor();\r\n\r\n            BufferedReader reader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "e",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "reader",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "command",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "\"/bin/sh\"",
                        "type": "String",
                        "context": "    public static void main(String[] args) {\r\n        try {\r\n            String[] command = {\"/bin/sh\", \"-c\", \"somecommand --password=SunnyVale2025\"};\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            process.waitFor();\r\n",
                        "nextNode": "{\"/bin/sh\", \"-c\", \"somecommand --password=SunnyVale2025\"}"
                    },
                    {
                        "name": "{\"/bin/sh\", \"-c\", \"somecommand --password=SunnyVale2025\"}",
                        "type": "String",
                        "context": "    public static void main(String[] args) {\r\n        try {\r\n            String[] command = {\"/bin/sh\", \"-c\", \"somecommand --password=SunnyVale2025\"};\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            process.waitFor();\r\n |     public static void main(String[] args) {\r\n        try {\r\n            String[] command = {\"/bin/sh\", \"-c\", \"somecommand --password=SunnyVale2025\"};\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            process.waitFor();\r\n",
                        "nextNode": "command"
                    },
                    {
                        "name": "command",
                        "type": "String",
                        "context": "        try {\r\n            String[] command = {\"/bin/sh\", \"-c\", \"somecommand --password=SunnyVale2025\"};\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            process.waitFor();\r\n\r\n |         try {\r\n            String[] command = {\"/bin/sh\", \"-c\", \"somecommand --password=SunnyVale2025\"};\r\n            Process process = Runtime.getRuntime().exec(command);\r\n            process.waitFor();\r\n\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "/bin/sh",
                "isSensitive": "no"
            },
            {
                "name": "-c",
                "isSensitive": "no"
            },
            {
                "name": "An error occurred.",
                "isSensitive": "no"
            },
            {
                "name": "somecommand --password=SunnyVale2025",
                "isSensitive": "yes"
            }
        ],
        "comments": [],
        "sinks": [
            {
                "name": "println",
                "isSink": "yes"
            },
            {
                "name": "getErrorStream",
                "isSink": "no"
            },
            {
                "name": "getRuntime",
                "isSink": "no"
            },
            {
                "name": "waitFor",
                "isSink": "no"
            },
            {
                "name": "exec",
                "isSink": "yes"
            }
        ]
    },
    {
        "fileName": "DisplayOnScreen.java",
        "variables": [
            {
                "name": "message",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "errorReader",
                        "type": "BufferedReader",
                        "context": "            String error;\r\n\r\n            while ((error = errorReader.readLine()) != null) {\r\n                DisplayOnScreen.display(\"Network configuration error: \" + error);\r\n            }\r\n",
                        "nextNode": "errorReader.readLine()"
                    },
                    {
                        "name": "errorReader.readLine()",
                        "type": "String",
                        "context": "            String error;\r\n\r\n            while ((error = errorReader.readLine()) != null) {\r\n                DisplayOnScreen.display(\"Network configuration error: \" + error);\r\n            }\r\n",
                        "nextNode": "error"
                    },
                    {
                        "name": "error",
                        "type": "String",
                        "context": "\r\n            while ((error = errorReader.readLine()) != null) {\r\n                DisplayOnScreen.display(\"Network configuration error: \" + error);\r\n            }\r\n\r\n",
                        "nextNode": "\"Network configuration error: \" + error"
                    },
                    {
                        "name": "\"Network configuration error: \" + error",
                        "type": "String",
                        "context": "\r\n            while ((error = errorReader.readLine()) != null) {\r\n                DisplayOnScreen.display(\"Network configuration error: \" + error);\r\n            }\r\n\r\n",
                        "nextNode": "String message"
                    },
                    {
                        "name": "String message",
                        "type": "String",
                        "context": "public class DisplayOnScreen {\r\n\r\n    public static void display(String message) {\r\n        // Simple implementation: display on screen (console)\r\n        System.err.println(message);\r\n",
                        "nextNode": "message"
                    },
                    {
                        "name": "message",
                        "type": "Dataflow from `errorReader` to `message`\nDataflow from `error` to `message`\nDataflow from `readLine(...)` to `message`\nDataflow from `new BufferedReader(...)` to `message`\nDataflow from `new InputStreamReader(...)` to `message`\nDataflow from `getErrorStream(...)` to `message`\nDataflow from `\"Network configuration error: \"` to `message`\nDataflow from `\"Network configuration failed, see logs for details.\"` to `message`\nDataflow from `\"Configuration operation failed: \"` to `message`\nDataflow from `getMessage(...)` to `message`",
                        "context": "    public static void display(String message) {\r\n        // Simple implementation: display on screen (console)\r\n        System.err.println(message);\r\n    }\r\n}\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [],
        "comments": [
            {
                "name": "Simple implementation: display on screen (console)",
                "isSensitive": "no"
            }
        ],
        "sinks": [
            {
                "name": "println",
                "isSink": "yes"
            }
        ]
    },
    {
        "fileName": "OutputToDisplay.java",
        "variables": [
            {
                "name": "message",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "errorReader",
                        "type": "BufferedReader",
                        "context": "            String error;\r\n\r\n            while ((error = errorReader.readLine()) != null) {\r\n                OutputToDisplay.output(\"Backup error: \" + error);\r\n            }\r\n",
                        "nextNode": "errorReader.readLine()"
                    },
                    {
                        "name": "errorReader.readLine()",
                        "type": "String",
                        "context": "            String error;\r\n\r\n            while ((error = errorReader.readLine()) != null) {\r\n                OutputToDisplay.output(\"Backup error: \" + error);\r\n            }\r\n",
                        "nextNode": "error"
                    },
                    {
                        "name": "error",
                        "type": "String",
                        "context": "\r\n            while ((error = errorReader.readLine()) != null) {\r\n                OutputToDisplay.output(\"Backup error: \" + error);\r\n            }\r\n\r\n",
                        "nextNode": "\"Backup error: \" + error"
                    },
                    {
                        "name": "\"Backup error: \" + error",
                        "type": "String",
                        "context": "\r\n            while ((error = errorReader.readLine()) != null) {\r\n                OutputToDisplay.output(\"Backup error: \" + error);\r\n            }\r\n\r\n",
                        "nextNode": "String message"
                    },
                    {
                        "name": "String message",
                        "type": "String",
                        "context": "public class OutputToDisplay {\r\n\r\n    public static void output(String message) {\r\n        // Simple implementation: output to display\r\n        System.err.println(message);\r\n",
                        "nextNode": "message"
                    },
                    {
                        "name": "message",
                        "type": "Dataflow from `errorReader` to `message`\nDataflow from `error` to `message`\nDataflow from `readLine(...)` to `message`\nDataflow from `new BufferedReader(...)` to `message`\nDataflow from `new InputStreamReader(...)` to `message`\nDataflow from `getErrorStream(...)` to `message`\nDataflow from `\"Backup error: \"` to `message`\nDataflow from `\"Backup failed, see logs for details.\"` to `message`\nDataflow from `\"Backup operation failed: \"` to `message`\nDataflow from `getMessage(...)` to `message`",
                        "context": "    public static void output(String message) {\r\n        // Simple implementation: output to display\r\n        System.err.println(message);\r\n    }\r\n}\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [],
        "comments": [
            {
                "name": "Simple implementation: output to display",
                "isSensitive": "no"
            }
        ],
        "sinks": [
            {
                "name": "println",
                "isSink": "yes"
            }
        ]
    },
    {
        "fileName": "PrintErrorMessage.java",
        "variables": [
            {
                "name": "message",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "errorReader",
                        "type": "BufferedReader",
                        "context": "            String error;\r\n\r\n            while ((error = errorReader.readLine()) != null) {\r\n                PrintErrorMessage.print(\"File processing error: \" + error);\r\n            }\r\n",
                        "nextNode": "errorReader.readLine()"
                    },
                    {
                        "name": "errorReader.readLine()",
                        "type": "String",
                        "context": "            String error;\r\n\r\n            while ((error = errorReader.readLine()) != null) {\r\n                PrintErrorMessage.print(\"File processing error: \" + error);\r\n            }\r\n",
                        "nextNode": "error"
                    },
                    {
                        "name": "error",
                        "type": "String",
                        "context": "\r\n            while ((error = errorReader.readLine()) != null) {\r\n                PrintErrorMessage.print(\"File processing error: \" + error);\r\n            }\r\n\r\n",
                        "nextNode": "\"File processing error: \" + error"
                    },
                    {
                        "name": "\"File processing error: \" + error",
                        "type": "String",
                        "context": "\r\n            while ((error = errorReader.readLine()) != null) {\r\n                PrintErrorMessage.print(\"File processing error: \" + error);\r\n            }\r\n\r\n",
                        "nextNode": "String message"
                    },
                    {
                        "name": "String message",
                        "type": "String",
                        "context": "public class PrintErrorMessage {\r\n\r\n    public static void print(String message) {\r\n        // Simple implementation: print error message\r\n        System.err.println(message);\r\n",
                        "nextNode": "message"
                    },
                    {
                        "name": "message",
                        "type": "Dataflow from `errorReader` to `message`\nDataflow from `error` to `message`\nDataflow from `readLine(...)` to `message`\nDataflow from `new BufferedReader(...)` to `message`\nDataflow from `new InputStreamReader(...)` to `message`\nDataflow from `getErrorStream(...)` to `message`\nDataflow from `\"File processing error: \"` to `message`\nDataflow from `\"File processing failed, see logs for details.\"` to `message`\nDataflow from `\"Processing operation failed: \"` to `message`\nDataflow from `getMessage(...)` to `message`",
                        "context": "    public static void print(String message) {\r\n        // Simple implementation: print error message\r\n        System.err.println(message);\r\n    }\r\n}\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [],
        "comments": [
            {
                "name": "Simple implementation: print error message",
                "isSensitive": "no"
            }
        ],
        "sinks": [
            {
                "name": "println",
                "isSink": "yes"
            }
        ]
    },
    {
        "fileName": "PrintToConsole.java",
        "variables": [
            {
                "name": "message",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "errorReader",
                        "type": "BufferedReader",
                        "context": "            String error;\r\n\r\n            while ((error = errorReader.readLine()) != null) {\r\n                PrintToConsole.print(\"Database connection error: \" + error);\r\n            }\r\n",
                        "nextNode": "errorReader.readLine()"
                    },
                    {
                        "name": "errorReader.readLine()",
                        "type": "String",
                        "context": "            String error;\r\n\r\n            while ((error = errorReader.readLine()) != null) {\r\n                PrintToConsole.print(\"Database connection error: \" + error);\r\n            }\r\n",
                        "nextNode": "error"
                    },
                    {
                        "name": "error",
                        "type": "String",
                        "context": "\r\n            while ((error = errorReader.readLine()) != null) {\r\n                PrintToConsole.print(\"Database connection error: \" + error);\r\n            }\r\n\r\n",
                        "nextNode": "\"Database connection error: \" + error"
                    },
                    {
                        "name": "\"Database connection error: \" + error",
                        "type": "String",
                        "context": "\r\n            while ((error = errorReader.readLine()) != null) {\r\n                PrintToConsole.print(\"Database connection error: \" + error);\r\n            }\r\n\r\n",
                        "nextNode": "String message"
                    },
                    {
                        "name": "String message",
                        "type": "String",
                        "context": "public class PrintToConsole {\r\n\r\n    public static void print(String message) {\r\n        // Simple implementation: print to console\r\n        System.err.println(message);\r\n",
                        "nextNode": "message"
                    },
                    {
                        "name": "message",
                        "type": "Dataflow from `errorReader` to `message`\nDataflow from `error` to `message`\nDataflow from `readLine(...)` to `message`\nDataflow from `new BufferedReader(...)` to `message`\nDataflow from `new InputStreamReader(...)` to `message`\nDataflow from `getErrorStream(...)` to `message`\nDataflow from `\"Database connection error: \"` to `message`\nDataflow from `\"Database connection failed, see logs for details.\"` to `message`\nDataflow from `\"Connection operation failed: \"` to `message`\nDataflow from `getMessage(...)` to `message`",
                        "context": "    public static void print(String message) {\r\n        // Simple implementation: print to console\r\n        System.err.println(message);\r\n    }\r\n}\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [],
        "comments": [
            {
                "name": "Simple implementation: print to console",
                "isSensitive": "no"
            }
        ],
        "sinks": [
            {
                "name": "println",
                "isSink": "yes"
            }
        ]
    },
    {
        "fileName": "ShowMessage.java",
        "variables": [
            {
                "name": "message",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "userId",
                        "type": "String",
                        "context": "\r\n    public static void updateUserProfile(String userId, String profileData) {\r\n        String command = \"update_user_profile --user-id \" + userId + \" --data \" + profileData;\r\n\r\n        try {\r\n | \r\n            if (process.waitFor() != 0) {\r\n                ShowMessage.show(\"User profile update failed for user \" + userId + \", see logs for details.\");\r\n            }\r\n        } catch (IOException | InterruptedException e) {\r\n",
                        "nextNode": "\"User profile update failed for user \" + userId"
                    },
                    {
                        "name": "\"User profile update failed for user \" + userId",
                        "type": "String",
                        "context": "\r\n            if (process.waitFor() != 0) {\r\n                ShowMessage.show(\"User profile update failed for user \" + userId + \", see logs for details.\");\r\n            }\r\n        } catch (IOException | InterruptedException e) {\r\n",
                        "nextNode": "\"User profile update failed for user \" + userId + \", see logs for details.\""
                    },
                    {
                        "name": "\"User profile update failed for user \" + userId + \", see logs for details.\"",
                        "type": "String",
                        "context": "\r\n            if (process.waitFor() != 0) {\r\n                ShowMessage.show(\"User profile update failed for user \" + userId + \", see logs for details.\");\r\n            }\r\n        } catch (IOException | InterruptedException e) {\r\n",
                        "nextNode": "String message"
                    },
                    {
                        "name": "String message",
                        "type": "String",
                        "context": "public class ShowMessage {\r\n\r\n    public static void show(String message) {\r\n        // Simple implementation: show message\r\n        System.err.println(message);\r\n",
                        "nextNode": "message"
                    },
                    {
                        "name": "message",
                        "type": "Dataflow from `userId` to `message`\nDataflow from `errorReader` to `message`\nDataflow from `error` to `message`\nDataflow from `userId` to `message`\nDataflow from `userId` to `message`\nDataflow from `userId` to `message`\nDataflow from `readLine(...)` to `message`\nDataflow from `new BufferedReader(...)` to `message`\nDataflow from `new InputStreamReader(...)` to `message`\nDataflow from `getErrorStream(...)` to `message`\nDataflow from `\": \"` to `message`\nDataflow from `\"User profile update error for user \"` to `message`\nDataflow from `\", see logs for details.\"` to `message`\nDataflow from `\"User profile update failed for user \"` to `message`\nDataflow from `getMessage(...)` to `message`\nDataflow from `\": \"` to `message`\nDataflow from `\"Update operation failed for user \"` to `message`\nDataflow from `\"user123\"` to `message`",
                        "context": "    public static void show(String message) {\r\n        // Simple implementation: show message\r\n        System.err.println(message);\r\n    }\r\n}\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [],
        "comments": [
            {
                "name": "Simple implementation: show message",
                "isSensitive": "no"
            }
        ],
        "sinks": [
            {
                "name": "println",
                "isSink": "yes"
            }
        ]
    },
    {
        "fileName": "BAD_AccountBalanceServlet.java",
        "variables": [
            {
                "name": "accountId",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "request.getParameter(\"accountId\")",
                        "type": "String",
                        "context": "public class BAD_AccountBalanceServlet extends HttpServlet {\r\n    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws IOException {\r\n        String accountId = request.getParameter(\"accountId\");\r\n        try {\r\n            retrieveAccountBalance(accountId);\r\n | public class BAD_AccountBalanceServlet extends HttpServlet {\r\n    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws IOException {\r\n        String accountId = request.getParameter(\"accountId\");\r\n        try {\r\n            retrieveAccountBalance(accountId);\r\n | public class BAD_AccountBalanceServlet extends HttpServlet {\r\n    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws IOException {\r\n        String accountId = request.getParameter(\"accountId\");\r\n        try {\r\n            retrieveAccountBalance(accountId);\r\n",
                        "nextNode": "accountId"
                    },
                    {
                        "name": "String accountId",
                        "type": "String",
                        "context": "    }\r\n\r\n    private void retrieveAccountBalance(String accountId) throws ServletException {\r\n        // Supposed database call that fails\r\n        throw new ServletException(\"Query failed for account: \" + accountId);\r\n",
                        "nextNode": "accountId"
                    },
                    {
                        "name": "accountId",
                        "type": "Dataflow from `getParameter(...)` to `accountId`\nDataflow from `\"accountId\"` to `accountId`",
                        "context": "        String accountId = request.getParameter(\"accountId\");\r\n        try {\r\n            retrieveAccountBalance(accountId);\r\n        } catch (ServletException e) {\r\n            // Directly using account ID from the exception's context\r\n |         String accountId = request.getParameter(\"accountId\");\r\n        try {\r\n            retrieveAccountBalance(accountId);\r\n        } catch (ServletException e) {\r\n            // Directly using account ID from the exception's context\r\n |         } catch (ServletException e) {\r\n            // Directly using account ID from the exception's context\r\n            response.getWriter().println(\"Unable to retrieve balance for account ID: \" + accountId);\r\n        }\r\n    }\r\n |         String accountId = request.getParameter(\"accountId\");\r\n        try {\r\n            retrieveAccountBalance(accountId);\r\n        } catch (ServletException e) {\r\n            // Directly using account ID from the exception's context\r\n |     private void retrieveAccountBalance(String accountId) throws ServletException {\r\n        // Supposed database call that fails\r\n        throw new ServletException(\"Query failed for account: \" + accountId);\r\n    }\r\n}\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "request",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "e",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "response",
                "isSensitive": "no",
                "graph": []
            }
        ],
        "strings": [
            {
                "name": "accountId",
                "isSensitive": "no"
            },
            {
                "name": "Query failed for account:",
                "isSensitive": "no"
            },
            {
                "name": "Unable to retrieve balance for account ID:",
                "isSensitive": "no"
            }
        ],
        "comments": [
            {
                "name": "Directly using account ID from the exception's context",
                "isSensitive": "no"
            },
            {
                "name": "Supposed database call that fails",
                "isSensitive": "no"
            }
        ],
        "sinks": [
            {
                "name": "println",
                "isSink": "yes"
            },
            {
                "name": "getWriter",
                "isSink": "no"
            },
            {
                "name": "retrieveAccountBalance",
                "isSink": "no"
            },
            {
                "name": "getParameter",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "BAD_ApiKeyManagementServlet.java",
        "variables": [
            {
                "name": "request",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "apiKey",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "request.getParameter(\"apiKey\")",
                        "type": "String",
                        "context": "public class BAD_ApiKeyManagementServlet extends HttpServlet {\r\n    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\r\n        String apiKey = request.getParameter(\"apiKey\");\r\n        try{\r\n            if (apiKey == \"apiKey\" || apiKey.isEmpty()) {\r\n | public class BAD_ApiKeyManagementServlet extends HttpServlet {\r\n    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\r\n        String apiKey = request.getParameter(\"apiKey\");\r\n        try{\r\n            if (apiKey == \"apiKey\" || apiKey.isEmpty()) {\r\n | public class BAD_ApiKeyManagementServlet extends HttpServlet {\r\n    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\r\n        String apiKey = request.getParameter(\"apiKey\");\r\n        try{\r\n            if (apiKey == \"apiKey\" || apiKey.isEmpty()) {\r\n | public class BAD_ApiKeyManagementServlet extends HttpServlet {\r\n    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\r\n        String apiKey = request.getParameter(\"apiKey\");\r\n        try{\r\n            if (apiKey == \"apiKey\" || apiKey.isEmpty()) {\r\n",
                        "nextNode": "apiKey"
                    },
                    {
                        "name": "apiKey",
                        "type": "Dataflow from `getParameter(...)` to `apiKey`\nDataflow from `\"apiKey\"` to `apiKey`",
                        "context": "        String apiKey = request.getParameter(\"apiKey\");\r\n        try{\r\n            if (apiKey == \"apiKey\" || apiKey.isEmpty()) {\r\n                throw new ServletException(\"Invalid API key \" + apiKey + \" provided.\");\r\n            }\r\n |         String apiKey = request.getParameter(\"apiKey\");\r\n        try{\r\n            if (apiKey == \"apiKey\" || apiKey.isEmpty()) {\r\n                throw new ServletException(\"Invalid API key \" + apiKey + \" provided.\");\r\n            }\r\n |         String apiKey = request.getParameter(\"apiKey\");\r\n        try{\r\n            if (apiKey == \"apiKey\" || apiKey.isEmpty()) {\r\n                throw new ServletException(\"Invalid API key \" + apiKey + \" provided.\");\r\n            }\r\n |         String apiKey = request.getParameter(\"apiKey\");\r\n        try{\r\n            if (apiKey == \"apiKey\" || apiKey.isEmpty()) {\r\n                throw new ServletException(\"Invalid API key \" + apiKey + \" provided.\");\r\n            }\r\n |         try{\r\n            if (apiKey == \"apiKey\" || apiKey.isEmpty()) {\r\n                throw new ServletException(\"Invalid API key \" + apiKey + \" provided.\");\r\n            }\r\n        }\r\n |         String apiKey = request.getParameter(\"apiKey\");\r\n        try{\r\n            if (apiKey == \"apiKey\" || apiKey.isEmpty()) {\r\n                throw new ServletException(\"Invalid API key \" + apiKey + \" provided.\");\r\n            }\r\n |         try{\r\n            if (apiKey == \"apiKey\" || apiKey.isEmpty()) {\r\n                throw new ServletException(\"Invalid API key \" + apiKey + \" provided.\");\r\n            }\r\n        }\r\n |         }\r\n        catch(ServletException e){\r\n            System.err.println(\"Invalid API key \" + apiKey + \" provided.\");\r\n            response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, \"An error occurred while processing the request: \" + e.getMessage());\r\n        }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "e",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "response",
                "isSensitive": "no",
                "graph": []
            }
        ],
        "strings": [
            {
                "name": "An error occurred while processing the request:",
                "isSensitive": "no"
            },
            {
                "name": "apiKey",
                "isSensitive": "yes"
            },
            {
                "name": "provided.",
                "isSensitive": "no"
            },
            {
                "name": "Invalid API key",
                "isSensitive": "no"
            }
        ],
        "comments": [],
        "sinks": [
            {
                "name": "println",
                "isSink": "yes"
            },
            {
                "name": "sendError",
                "isSink": "yes"
            },
            {
                "name": "isEmpty",
                "isSink": "no"
            },
            {
                "name": "getMessage",
                "isSink": "no"
            },
            {
                "name": "getParameter",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "BAD_DbConnectionErrorServlet.java",
        "variables": [
            {
                "name": "dbPass",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "request.getParameter(\"dbPass\")",
                        "type": "String",
                        "context": "        String dbUrl = request.getParameter(\"dbUrl\");\r\n        String dbUser = request.getParameter(\"dbUser\");\r\n        String dbPass = request.getParameter(\"dbPass\");\r\n        Connection conn = null;\r\n\r\n |         String dbUrl = request.getParameter(\"dbUrl\");\r\n        String dbUser = request.getParameter(\"dbUser\");\r\n        String dbPass = request.getParameter(\"dbPass\");\r\n        Connection conn = null;\r\n\r\n |         String dbUrl = request.getParameter(\"dbUrl\");\r\n        String dbUser = request.getParameter(\"dbUser\");\r\n        String dbPass = request.getParameter(\"dbPass\");\r\n        Connection conn = null;\r\n\r\n",
                        "nextNode": "dbPass"
                    },
                    {
                        "name": "dbPass",
                        "type": "Dataflow from `getParameter(...)` to `dbPass`\nDataflow from `\"dbPass\"` to `dbPass`",
                        "context": "\r\n        try {\r\n            if (dbUrl == null || dbUser == null || dbPass == null) {\r\n                throw new ServletException();\r\n            }\r\n | \r\n        try {\r\n            if (dbUrl == null || dbUser == null || dbPass == null) {\r\n                throw new ServletException();\r\n            }\r\n |             }\r\n            // Attempt to establish a database connection\r\n            conn = DriverManager.getConnection(dbUrl, dbUser, dbPass);\r\n            // Assuming a successful connection\r\n            // Perform database operations...\r\n |         catch (ServletException e) {\r\n            // Catch the ServletException and send an error response\r\n            System.err.println(\"Invalid database connection parameters\" + dbUrl + dbUser + dbPass);\r\n        }\r\n        \r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "args",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "request",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "conn",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "dbUrl",
                        "type": "String",
                        "context": "\r\n        try {\r\n            if (dbUrl == null || dbUser == null || dbPass == null) {\r\n                throw new ServletException();\r\n            }\r\n |             }\r\n            // Attempt to establish a database connection\r\n            conn = DriverManager.getConnection(dbUrl, dbUser, dbPass);\r\n            // Assuming a successful connection\r\n            // Perform database operations...\r\n | \r\n        try {\r\n            if (dbUrl == null || dbUser == null || dbPass == null) {\r\n                throw new ServletException();\r\n            }\r\n |             }\r\n            // Attempt to establish a database connection\r\n            conn = DriverManager.getConnection(dbUrl, dbUser, dbPass);\r\n            // Assuming a successful connection\r\n            // Perform database operations...\r\n",
                        "nextNode": "DriverManager.getConnection(dbUrl, dbUser, dbPass)"
                    },
                    {
                        "name": "DriverManager.getConnection(dbUrl, dbUser, dbPass)",
                        "type": "Connection",
                        "context": "            }\r\n            // Attempt to establish a database connection\r\n            conn = DriverManager.getConnection(dbUrl, dbUser, dbPass);\r\n            // Assuming a successful connection\r\n            // Perform database operations...\r\n |             }\r\n            // Attempt to establish a database connection\r\n            conn = DriverManager.getConnection(dbUrl, dbUser, dbPass);\r\n            // Assuming a successful connection\r\n            // Perform database operations...\r\n",
                        "nextNode": "conn"
                    },
                    {
                        "name": "conn",
                        "type": "Dataflow from `dbUrl` to `conn`\nDataflow from `dbUser` to `conn`\nDataflow from `dbPass` to `conn`\nDataflow from `dbUrl` to `conn`\nDataflow from `dbUser` to `conn`\nDataflow from `dbPass` to `conn`\nDataflow from `getParameter(...)` to `conn`\nDataflow from `getParameter(...)` to `conn`\nDataflow from `getParameter(...)` to `conn`\nDataflow from `null` to `conn`\nDataflow from `getConnection(...)` to `conn`\nDataflow from `\"dbUrl\"` to `conn`\nDataflow from `\"dbUser\"` to `conn`\nDataflow from `\"dbPass\"` to `conn`",
                        "context": "            try {\r\n                // Ensure the connection is closed\r\n                if (conn != null) conn.close();\r\n            } catch (SQLException e) {\r\n                System.err.println(\"Error closing the connection: \" + e.getMessage());\r\n |             try {\r\n                // Ensure the connection is closed\r\n                if (conn != null) conn.close();\r\n            } catch (SQLException e) {\r\n                System.err.println(\"Error closing the connection: \" + e.getMessage());\r\n |             try {\r\n                // Ensure the connection is closed\r\n                if (conn != null) conn.close();\r\n            } catch (SQLException e) {\r\n                System.err.println(\"Error closing the connection: \" + e.getMessage());\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "e",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "response",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "dbUser",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "request.getParameter(\"dbUser\")",
                        "type": "String",
                        "context": "\r\n        String dbUrl = request.getParameter(\"dbUrl\");\r\n        String dbUser = request.getParameter(\"dbUser\");\r\n        String dbPass = request.getParameter(\"dbPass\");\r\n        Connection conn = null;\r\n | \r\n        String dbUrl = request.getParameter(\"dbUrl\");\r\n        String dbUser = request.getParameter(\"dbUser\");\r\n        String dbPass = request.getParameter(\"dbPass\");\r\n        Connection conn = null;\r\n | \r\n        String dbUrl = request.getParameter(\"dbUrl\");\r\n        String dbUser = request.getParameter(\"dbUser\");\r\n        String dbPass = request.getParameter(\"dbPass\");\r\n        Connection conn = null;\r\n",
                        "nextNode": "dbUser"
                    },
                    {
                        "name": "dbUser",
                        "type": "Dataflow from `getParameter(...)` to `dbUser`\nDataflow from `\"dbUser\"` to `dbUser`",
                        "context": "\r\n        try {\r\n            if (dbUrl == null || dbUser == null || dbPass == null) {\r\n                throw new ServletException();\r\n            }\r\n | \r\n        try {\r\n            if (dbUrl == null || dbUser == null || dbPass == null) {\r\n                throw new ServletException();\r\n            }\r\n |             }\r\n            // Attempt to establish a database connection\r\n            conn = DriverManager.getConnection(dbUrl, dbUser, dbPass);\r\n            // Assuming a successful connection\r\n            // Perform database operations...\r\n |         catch (ServletException e) {\r\n            // Catch the ServletException and send an error response\r\n            System.err.println(\"Invalid database connection parameters\" + dbUrl + dbUser + dbPass);\r\n        }\r\n        \r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "badServlet",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "new BAD_DbConnectionErrorServlet()",
                        "type": "BAD_DbConnectionErrorServlet",
                        "context": "        try {\r\n            // Create an instance of BAD_DbConnectionErrorServlet\r\n            BAD_DbConnectionErrorServlet badServlet = new BAD_DbConnectionErrorServlet();\r\n            // Call the doGet method of BAD_DbConnectionErrorServlet\r\n            badServlet.doGet(request, response);\r\n",
                        "nextNode": "badServlet"
                    },
                    {
                        "name": "badServlet",
                        "type": "Dataflow from `new BAD_DbConnectionErrorServlet(...)` to `badServlet`",
                        "context": "            BAD_DbConnectionErrorServlet badServlet = new BAD_DbConnectionErrorServlet();\r\n            // Call the doGet method of BAD_DbConnectionErrorServlet\r\n            badServlet.doGet(request, response);\r\n        } catch (ServletException e) {\r\n            // Catch the ServletException and send an error response\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "dbUrl",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "request.getParameter(\"dbUrl\")",
                        "type": "String",
                        "context": "        response.setContentType(\"text/html\");\r\n\r\n        String dbUrl = request.getParameter(\"dbUrl\");\r\n        String dbUser = request.getParameter(\"dbUser\");\r\n        String dbPass = request.getParameter(\"dbPass\");\r\n |         response.setContentType(\"text/html\");\r\n\r\n        String dbUrl = request.getParameter(\"dbUrl\");\r\n        String dbUser = request.getParameter(\"dbUser\");\r\n        String dbPass = request.getParameter(\"dbPass\");\r\n |         response.setContentType(\"text/html\");\r\n\r\n        String dbUrl = request.getParameter(\"dbUrl\");\r\n        String dbUser = request.getParameter(\"dbUser\");\r\n        String dbPass = request.getParameter(\"dbPass\");\r\n",
                        "nextNode": "dbUrl"
                    },
                    {
                        "name": "dbUrl",
                        "type": "Dataflow from `getParameter(...)` to `dbUrl`\nDataflow from `\"dbUrl\"` to `dbUrl`",
                        "context": "\r\n        try {\r\n            if (dbUrl == null || dbUser == null || dbPass == null) {\r\n                throw new ServletException();\r\n            }\r\n | \r\n        try {\r\n            if (dbUrl == null || dbUser == null || dbPass == null) {\r\n                throw new ServletException();\r\n            }\r\n |             }\r\n            // Attempt to establish a database connection\r\n            conn = DriverManager.getConnection(dbUrl, dbUser, dbPass);\r\n            // Assuming a successful connection\r\n            // Perform database operations...\r\n | \r\n        try {\r\n            if (dbUrl == null || dbUser == null || dbPass == null) {\r\n                throw new ServletException();\r\n            }\r\n |         catch (ServletException e) {\r\n            // Catch the ServletException and send an error response\r\n            System.err.println(\"Invalid database connection parameters\" + dbUrl + dbUser + dbPass);\r\n        }\r\n        \r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "dbPass",
                "isSensitive": "no"
            },
            {
                "name": "An error occurred while processing the request:",
                "isSensitive": "no"
            },
            {
                "name": "Failed to connect to the database:",
                "isSensitive": "no"
            },
            {
                "name": "text/html",
                "isSensitive": "no"
            },
            {
                "name": "Invalid database connection parameters",
                "isSensitive": "no"
            },
            {
                "name": "dbUser",
                "isSensitive": "no"
            },
            {
                "name": "Error closing the connection:",
                "isSensitive": "no"
            },
            {
                "name": "dbUrl",
                "isSensitive": "no"
            }
        ],
        "comments": [
            {
                "name": "Perform database operations...",
                "isSensitive": "no"
            },
            {
                "name": "This is just a placeholder for testing. In real scenarios, the servlet container handles requests.",
                "isSensitive": "no"
            },
            {
                "name": "Catch the IOException and send an error response",
                "isSensitive": "no"
            },
            {
                "name": "Create an instance of BAD_DbConnectionErrorServlet",
                "isSensitive": "no"
            },
            {
                "name": "Call the doGet method of BAD_DbConnectionErrorServlet",
                "isSensitive": "no"
            },
            {
                "name": "Catch the ServletException and send an error response",
                "isSensitive": "no"
            },
            {
                "name": "To test this in a standalone application, you would need to simulate a servlet environment.",
                "isSensitive": "no"
            },
            {
                "name": "Ensure the connection is closed",
                "isSensitive": "no"
            },
            {
                "name": "Assuming a successful connection",
                "isSensitive": "no"
            },
            {
                "name": "Attempt to establish a database connection",
                "isSensitive": "no"
            }
        ],
        "sinks": [
            {
                "name": "getConnection",
                "isSink": "yes"
            },
            {
                "name": "println",
                "isSink": "yes"
            },
            {
                "name": "sendError",
                "isSink": "yes"
            },
            {
                "name": "getMessage",
                "isSink": "no"
            },
            {
                "name": "setContentType",
                "isSink": "no"
            },
            {
                "name": "close",
                "isSink": "no"
            },
            {
                "name": "getParameter",
                "isSink": "no"
            },
            {
                "name": "doGet",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "BAD_ExternalServiceErrorServlet.java",
        "variables": [
            {
                "name": "request",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "e",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "response",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "connection",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "url.openConnection()",
                        "type": "URLConnection",
                        "context": "        try {\r\n            URL url = new URL(\"https://api.example.com/data\");\r\n            HttpsURLConnection connection = (HttpsURLConnection) url.openConnection();\r\n            // Assume connection setup and request...\r\n\r\n",
                        "nextNode": "(HttpsURLConnection) url.openConnection()"
                    },
                    {
                        "name": "(HttpsURLConnection) url.openConnection()",
                        "type": "HttpsURLConnection",
                        "context": "        try {\r\n            URL url = new URL(\"https://api.example.com/data\");\r\n            HttpsURLConnection connection = (HttpsURLConnection) url.openConnection();\r\n            // Assume connection setup and request...\r\n\r\n",
                        "nextNode": "connection"
                    },
                    {
                        "name": "connection",
                        "type": "Dataflow from `openConnection(...)` to `connection`",
                        "context": "            // Assume connection setup and request...\r\n\r\n            responseCode = connection.getResponseCode();\r\n            if (responseCode != HttpsURLConnection.HTTP_OK) {\r\n                throw new ServletException();\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "url",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "new URL(\"https://api.example.com/data\")",
                        "type": "URL",
                        "context": "        int responseCode = 0;\r\n        try {\r\n            URL url = new URL(\"https://api.example.com/data\");\r\n            HttpsURLConnection connection = (HttpsURLConnection) url.openConnection();\r\n            // Assume connection setup and request...\r\n",
                        "nextNode": "url"
                    },
                    {
                        "name": "url",
                        "type": "Dataflow from `new URL(...)` to `url`\nDataflow from `\"https://api.example.com/data\"` to `url`",
                        "context": "        try {\r\n            URL url = new URL(\"https://api.example.com/data\");\r\n            HttpsURLConnection connection = (HttpsURLConnection) url.openConnection();\r\n            // Assume connection setup and request...\r\n\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "responseCode",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "connection.getResponseCode()",
                        "type": "Number",
                        "context": "            // Assume connection setup and request...\r\n\r\n            responseCode = connection.getResponseCode();\r\n            if (responseCode != HttpsURLConnection.HTTP_OK) {\r\n                throw new ServletException();\r\n |             // Assume connection setup and request...\r\n\r\n            responseCode = connection.getResponseCode();\r\n            if (responseCode != HttpsURLConnection.HTTP_OK) {\r\n                throw new ServletException();\r\n",
                        "nextNode": "responseCode"
                    },
                    {
                        "name": "responseCode",
                        "type": "Dataflow from `getResponseCode(...)` to `responseCode`",
                        "context": "\r\n            responseCode = connection.getResponseCode();\r\n            if (responseCode != HttpsURLConnection.HTTP_OK) {\r\n                throw new ServletException();\r\n            }\r\n | \r\n            responseCode = connection.getResponseCode();\r\n            if (responseCode != HttpsURLConnection.HTTP_OK) {\r\n                throw new ServletException();\r\n            }\r\n |             }\r\n        } catch (ServletException e) {\r\n            System.err.println(\"Failed to fetch data from API: HTTP \" + responseCode);\r\n        }\r\n    }\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "https://api.example.com/data",
                "isSensitive": "no"
            },
            {
                "name": "Failed to fetch data from API: HTTP",
                "isSensitive": "no"
            }
        ],
        "comments": [
            {
                "name": "Assume connection setup and request...",
                "isSensitive": "no"
            }
        ],
        "sinks": [
            {
                "name": "println",
                "isSink": "yes"
            },
            {
                "name": "openConnection",
                "isSink": "yes"
            },
            {
                "name": "getResponseCode",
                "isSink": "yes"
            }
        ]
    },
    {
        "fileName": "BAD_FileReadErrorServlet.java",
        "variables": [
            {
                "name": "fis",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "filename",
                        "type": "String",
                        "context": "    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {\r\n        String filename = request.getParameter(\"filename\");\r\n        File file = new File(\"/var/www/data/\" + filename);\r\n\r\n        try (FileInputStream fis = new FileInputStream(file);\r\n",
                        "nextNode": "\"/var/www/data/\" + filename"
                    },
                    {
                        "name": "\"/var/www/data/\" + filename",
                        "type": "String",
                        "context": "    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {\r\n        String filename = request.getParameter(\"filename\");\r\n        File file = new File(\"/var/www/data/\" + filename);\r\n\r\n        try (FileInputStream fis = new FileInputStream(file);\r\n",
                        "nextNode": "new File(\"/var/www/data/\" + filename)"
                    },
                    {
                        "name": "new File(\"/var/www/data/\" + filename)",
                        "type": "File",
                        "context": "    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {\r\n        String filename = request.getParameter(\"filename\");\r\n        File file = new File(\"/var/www/data/\" + filename);\r\n\r\n        try (FileInputStream fis = new FileInputStream(file);\r\n",
                        "nextNode": "file"
                    },
                    {
                        "name": "file",
                        "type": "File",
                        "context": "        File file = new File(\"/var/www/data/\" + filename);\r\n\r\n        try (FileInputStream fis = new FileInputStream(file);\r\n             BufferedReader reader = new BufferedReader(new InputStreamReader(fis))) {\r\n            // Example condition to throw ServletException\r\n",
                        "nextNode": "new FileInputStream(file)"
                    },
                    {
                        "name": "new FileInputStream(file)",
                        "type": "FileInputStream",
                        "context": "        File file = new File(\"/var/www/data/\" + filename);\r\n\r\n        try (FileInputStream fis = new FileInputStream(file);\r\n             BufferedReader reader = new BufferedReader(new InputStreamReader(fis))) {\r\n            // Example condition to throw ServletException\r\n",
                        "nextNode": "fis"
                    },
                    {
                        "name": "fis",
                        "type": "Dataflow from `filename` to `fis`\nDataflow from `file` to `fis`\nDataflow from `new File(...)` to `fis`\nDataflow from `getParameter(...)` to `fis`\nDataflow from `\"/var/www/data/\"` to `fis`\nDataflow from `new FileInputStream(...)` to `fis`\nDataflow from `\"filename\"` to `fis`",
                        "context": "\r\n        try (FileInputStream fis = new FileInputStream(file);\r\n             BufferedReader reader = new BufferedReader(new InputStreamReader(fis))) {\r\n            // Example condition to throw ServletException\r\n            if (file.length() == 0) {\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "request",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "filename",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "request.getParameter(\"filename\")",
                        "type": "String",
                        "context": "    @Override\r\n    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {\r\n        String filename = request.getParameter(\"filename\");\r\n        File file = new File(\"/var/www/data/\" + filename);\r\n\r\n",
                        "nextNode": "filename"
                    },
                    {
                        "name": "filename",
                        "type": "Dataflow from `getParameter(...)` to `filename`\nDataflow from `\"filename\"` to `filename`",
                        "context": "    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {\r\n        String filename = request.getParameter(\"filename\");\r\n        File file = new File(\"/var/www/data/\" + filename);\r\n\r\n        try (FileInputStream fis = new FileInputStream(file);\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "file",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "filename",
                        "type": "String",
                        "context": "    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {\r\n        String filename = request.getParameter(\"filename\");\r\n        File file = new File(\"/var/www/data/\" + filename);\r\n\r\n        try (FileInputStream fis = new FileInputStream(file);\r\n |     protected void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {\r\n        String filename = request.getParameter(\"filename\");\r\n        File file = new File(\"/var/www/data/\" + filename);\r\n\r\n        try (FileInputStream fis = new FileInputStream(file);\r\n |     protected void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {\r\n        String filename = request.getParameter(\"filename\");\r\n        File file = new File(\"/var/www/data/\" + filename);\r\n\r\n        try (FileInputStream fis = new FileInputStream(file);\r\n |     protected void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {\r\n        String filename = request.getParameter(\"filename\");\r\n        File file = new File(\"/var/www/data/\" + filename);\r\n\r\n        try (FileInputStream fis = new FileInputStream(file);\r\n |     protected void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {\r\n        String filename = request.getParameter(\"filename\");\r\n        File file = new File(\"/var/www/data/\" + filename);\r\n\r\n        try (FileInputStream fis = new FileInputStream(file);\r\n",
                        "nextNode": "\"/var/www/data/\" + filename"
                    },
                    {
                        "name": "\"/var/www/data/\" + filename",
                        "type": "String",
                        "context": "    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {\r\n        String filename = request.getParameter(\"filename\");\r\n        File file = new File(\"/var/www/data/\" + filename);\r\n\r\n        try (FileInputStream fis = new FileInputStream(file);\r\n |     protected void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {\r\n        String filename = request.getParameter(\"filename\");\r\n        File file = new File(\"/var/www/data/\" + filename);\r\n\r\n        try (FileInputStream fis = new FileInputStream(file);\r\n |     protected void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {\r\n        String filename = request.getParameter(\"filename\");\r\n        File file = new File(\"/var/www/data/\" + filename);\r\n\r\n        try (FileInputStream fis = new FileInputStream(file);\r\n |     protected void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {\r\n        String filename = request.getParameter(\"filename\");\r\n        File file = new File(\"/var/www/data/\" + filename);\r\n\r\n        try (FileInputStream fis = new FileInputStream(file);\r\n |     protected void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {\r\n        String filename = request.getParameter(\"filename\");\r\n        File file = new File(\"/var/www/data/\" + filename);\r\n\r\n        try (FileInputStream fis = new FileInputStream(file);\r\n",
                        "nextNode": "new File(\"/var/www/data/\" + filename)"
                    },
                    {
                        "name": "new File(\"/var/www/data/\" + filename)",
                        "type": "File",
                        "context": "    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {\r\n        String filename = request.getParameter(\"filename\");\r\n        File file = new File(\"/var/www/data/\" + filename);\r\n\r\n        try (FileInputStream fis = new FileInputStream(file);\r\n |     protected void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {\r\n        String filename = request.getParameter(\"filename\");\r\n        File file = new File(\"/var/www/data/\" + filename);\r\n\r\n        try (FileInputStream fis = new FileInputStream(file);\r\n |     protected void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {\r\n        String filename = request.getParameter(\"filename\");\r\n        File file = new File(\"/var/www/data/\" + filename);\r\n\r\n        try (FileInputStream fis = new FileInputStream(file);\r\n |     protected void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {\r\n        String filename = request.getParameter(\"filename\");\r\n        File file = new File(\"/var/www/data/\" + filename);\r\n\r\n        try (FileInputStream fis = new FileInputStream(file);\r\n |     protected void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {\r\n        String filename = request.getParameter(\"filename\");\r\n        File file = new File(\"/var/www/data/\" + filename);\r\n\r\n        try (FileInputStream fis = new FileInputStream(file);\r\n",
                        "nextNode": "file"
                    },
                    {
                        "name": "file",
                        "type": "Dataflow from `filename` to `file`\nDataflow from `new File(...)` to `file`\nDataflow from `getParameter(...)` to `file`\nDataflow from `\"/var/www/data/\"` to `file`\nDataflow from `\"filename\"` to `file`",
                        "context": "        File file = new File(\"/var/www/data/\" + filename);\r\n\r\n        try (FileInputStream fis = new FileInputStream(file);\r\n             BufferedReader reader = new BufferedReader(new InputStreamReader(fis))) {\r\n            // Example condition to throw ServletException\r\n |         File file = new File(\"/var/www/data/\" + filename);\r\n\r\n        try (FileInputStream fis = new FileInputStream(file);\r\n             BufferedReader reader = new BufferedReader(new InputStreamReader(fis))) {\r\n            // Example condition to throw ServletException\r\n |              BufferedReader reader = new BufferedReader(new InputStreamReader(fis))) {\r\n            // Example condition to throw ServletException\r\n            if (file.length() == 0) {\r\n                throw new ServletException(\"File is empty: \" + file.getAbsolutePath());\r\n            }\r\n |         File file = new File(\"/var/www/data/\" + filename);\r\n\r\n        try (FileInputStream fis = new FileInputStream(file);\r\n             BufferedReader reader = new BufferedReader(new InputStreamReader(fis))) {\r\n            // Example condition to throw ServletException\r\n |              BufferedReader reader = new BufferedReader(new InputStreamReader(fis))) {\r\n            // Example condition to throw ServletException\r\n            if (file.length() == 0) {\r\n                throw new ServletException(\"File is empty: \" + file.getAbsolutePath());\r\n            }\r\n |             // Example condition to throw ServletException\r\n            if (file.length() == 0) {\r\n                throw new ServletException(\"File is empty: \" + file.getAbsolutePath());\r\n            }\r\n            // Process file...\r\n |         File file = new File(\"/var/www/data/\" + filename);\r\n\r\n        try (FileInputStream fis = new FileInputStream(file);\r\n             BufferedReader reader = new BufferedReader(new InputStreamReader(fis))) {\r\n            // Example condition to throw ServletException\r\n |             // Process file...\r\n        } catch (IOException e) {\r\n            response.getWriter().write(\"Error reading file: \" + file.getAbsolutePath());\r\n        } catch (ServletException e) {\r\n            response.getWriter().write(\"Servlet error: \" + file.getAbsolutePath());\r\n |         File file = new File(\"/var/www/data/\" + filename);\r\n\r\n        try (FileInputStream fis = new FileInputStream(file);\r\n             BufferedReader reader = new BufferedReader(new InputStreamReader(fis))) {\r\n            // Example condition to throw ServletException\r\n |              BufferedReader reader = new BufferedReader(new InputStreamReader(fis))) {\r\n            // Example condition to throw ServletException\r\n            if (file.length() == 0) {\r\n                throw new ServletException(\"File is empty: \" + file.getAbsolutePath());\r\n            }\r\n |             // Example condition to throw ServletException\r\n            if (file.length() == 0) {\r\n                throw new ServletException(\"File is empty: \" + file.getAbsolutePath());\r\n            }\r\n            // Process file...\r\n |             response.getWriter().write(\"Error reading file: \" + file.getAbsolutePath());\r\n        } catch (ServletException e) {\r\n            response.getWriter().write(\"Servlet error: \" + file.getAbsolutePath());\r\n        }\r\n    }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "e",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "reader",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "response",
                "isSensitive": "yes",
                "graph": []
            }
        ],
        "strings": [
            {
                "name": "filename",
                "isSensitive": "no"
            },
            {
                "name": "File is empty:",
                "isSensitive": "no"
            },
            {
                "name": "/var/www/data/",
                "isSensitive": "yes"
            },
            {
                "name": "Error reading file:",
                "isSensitive": "no"
            },
            {
                "name": "Servlet error:",
                "isSensitive": "no"
            }
        ],
        "comments": [
            {
                "name": "Process file...",
                "isSensitive": "no"
            },
            {
                "name": "Example condition to throw ServletException",
                "isSensitive": "no"
            }
        ],
        "sinks": [
            {
                "name": "getAbsolutePath",
                "isSink": "no"
            },
            {
                "name": "getWriter",
                "isSink": "no"
            },
            {
                "name": "length",
                "isSink": "no"
            },
            {
                "name": "write",
                "isSink": "yes"
            },
            {
                "name": "getParameter",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "BAD_IoTDeviceFirmwareUpdateServlet.java",
        "variables": [
            {
                "name": "request",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "e",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "response",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "logger",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "firmwareVersion",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "request.getParameter(\"firmwareVersion\")",
                        "type": "String",
                        "context": "    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\r\n        String deviceId = request.getParameter(\"deviceId\");\r\n        String firmwareVersion = request.getParameter(\"firmwareVersion\");\r\n        try {\r\n            deployFirmwareUpdate(deviceId, firmwareVersion);\r\n |     protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\r\n        String deviceId = request.getParameter(\"deviceId\");\r\n        String firmwareVersion = request.getParameter(\"firmwareVersion\");\r\n        try {\r\n            deployFirmwareUpdate(deviceId, firmwareVersion);\r\n |     protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\r\n        String deviceId = request.getParameter(\"deviceId\");\r\n        String firmwareVersion = request.getParameter(\"firmwareVersion\");\r\n        try {\r\n            deployFirmwareUpdate(deviceId, firmwareVersion);\r\n |     protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\r\n        String deviceId = request.getParameter(\"deviceId\");\r\n        String firmwareVersion = request.getParameter(\"firmwareVersion\");\r\n        try {\r\n            deployFirmwareUpdate(deviceId, firmwareVersion);\r\n",
                        "nextNode": "firmwareVersion"
                    },
                    {
                        "name": "String firmwareVersion",
                        "type": "String",
                        "context": "    }\r\n\r\n    private void deployFirmwareUpdate(String deviceId, String firmwareVersion) throws ServletException {\r\n        // Logic to deploy firmware which might fail and needs careful exception handling\r\n        if (firmwareVersion.equals(\"0.23Beta\")) { \r\n |     }\r\n\r\n    private void deployFirmwareUpdate(String deviceId, String firmwareVersion) throws ServletException {\r\n        // Logic to deploy firmware which might fail and needs careful exception handling\r\n        if (firmwareVersion.equals(\"0.23Beta\")) { \r\n",
                        "nextNode": "firmwareVersion"
                    },
                    {
                        "name": "firmwareVersion",
                        "type": "Dataflow from `getParameter(...)` to `firmwareVersion`\nDataflow from `\"firmwareVersion\"` to `firmwareVersion`",
                        "context": "        String firmwareVersion = request.getParameter(\"firmwareVersion\");\r\n        try {\r\n            deployFirmwareUpdate(deviceId, firmwareVersion);\r\n        } catch (ServletException e) {\r\n            response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, \"Failed to deploy firmware update for device ID: \" + deviceId + \" with firmware version: \" + firmwareVersion);\r\n |         String firmwareVersion = request.getParameter(\"firmwareVersion\");\r\n        try {\r\n            deployFirmwareUpdate(deviceId, firmwareVersion);\r\n        } catch (ServletException e) {\r\n            response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, \"Failed to deploy firmware update for device ID: \" + deviceId + \" with firmware version: \" + firmwareVersion);\r\n |             deployFirmwareUpdate(deviceId, firmwareVersion);\r\n        } catch (ServletException e) {\r\n            response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, \"Failed to deploy firmware update for device ID: \" + deviceId + \" with firmware version: \" + firmwareVersion);\r\n        }\r\n    }\r\n |         String firmwareVersion = request.getParameter(\"firmwareVersion\");\r\n        try {\r\n            deployFirmwareUpdate(deviceId, firmwareVersion);\r\n        } catch (ServletException e) {\r\n            response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, \"Failed to deploy firmware update for device ID: \" + deviceId + \" with firmware version: \" + firmwareVersion);\r\n |     private void deployFirmwareUpdate(String deviceId, String firmwareVersion) throws ServletException {\r\n        // Logic to deploy firmware which might fail and needs careful exception handling\r\n        if (firmwareVersion.equals(\"0.23Beta\")) { \r\n            throw new ServletException(\"Firmware version \" + firmwareVersion + \" has known issues with device ID: \" + deviceId);\r\n        }\r\n |         String firmwareVersion = request.getParameter(\"firmwareVersion\");\r\n        try {\r\n            deployFirmwareUpdate(deviceId, firmwareVersion);\r\n        } catch (ServletException e) {\r\n            response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, \"Failed to deploy firmware update for device ID: \" + deviceId + \" with firmware version: \" + firmwareVersion);\r\n |     private void deployFirmwareUpdate(String deviceId, String firmwareVersion) throws ServletException {\r\n        // Logic to deploy firmware which might fail and needs careful exception handling\r\n        if (firmwareVersion.equals(\"0.23Beta\")) { \r\n            throw new ServletException(\"Firmware version \" + firmwareVersion + \" has known issues with device ID: \" + deviceId);\r\n        }\r\n |         // Logic to deploy firmware which might fail and needs careful exception handling\r\n        if (firmwareVersion.equals(\"0.23Beta\")) { \r\n            throw new ServletException(\"Firmware version \" + firmwareVersion + \" has known issues with device ID: \" + deviceId);\r\n        }\r\n        // Assume more update logic here that could fail\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "deviceId",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "request.getParameter(\"deviceId\")",
                        "type": "String",
                        "context": "\r\n    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\r\n        String deviceId = request.getParameter(\"deviceId\");\r\n        String firmwareVersion = request.getParameter(\"firmwareVersion\");\r\n        try {\r\n | \r\n    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\r\n        String deviceId = request.getParameter(\"deviceId\");\r\n        String firmwareVersion = request.getParameter(\"firmwareVersion\");\r\n        try {\r\n | \r\n    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\r\n        String deviceId = request.getParameter(\"deviceId\");\r\n        String firmwareVersion = request.getParameter(\"firmwareVersion\");\r\n        try {\r\n",
                        "nextNode": "deviceId"
                    },
                    {
                        "name": "String deviceId",
                        "type": "String",
                        "context": "    }\r\n\r\n    private void deployFirmwareUpdate(String deviceId, String firmwareVersion) throws ServletException {\r\n        // Logic to deploy firmware which might fail and needs careful exception handling\r\n        if (firmwareVersion.equals(\"0.23Beta\")) { \r\n",
                        "nextNode": "deviceId"
                    },
                    {
                        "name": "deviceId",
                        "type": "Dataflow from `getParameter(...)` to `deviceId`\nDataflow from `\"deviceId\"` to `deviceId`",
                        "context": "        String firmwareVersion = request.getParameter(\"firmwareVersion\");\r\n        try {\r\n            deployFirmwareUpdate(deviceId, firmwareVersion);\r\n        } catch (ServletException e) {\r\n            response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, \"Failed to deploy firmware update for device ID: \" + deviceId + \" with firmware version: \" + firmwareVersion);\r\n |         String firmwareVersion = request.getParameter(\"firmwareVersion\");\r\n        try {\r\n            deployFirmwareUpdate(deviceId, firmwareVersion);\r\n        } catch (ServletException e) {\r\n            response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, \"Failed to deploy firmware update for device ID: \" + deviceId + \" with firmware version: \" + firmwareVersion);\r\n |             deployFirmwareUpdate(deviceId, firmwareVersion);\r\n        } catch (ServletException e) {\r\n            response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, \"Failed to deploy firmware update for device ID: \" + deviceId + \" with firmware version: \" + firmwareVersion);\r\n        }\r\n    }\r\n |         String firmwareVersion = request.getParameter(\"firmwareVersion\");\r\n        try {\r\n            deployFirmwareUpdate(deviceId, firmwareVersion);\r\n        } catch (ServletException e) {\r\n            response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, \"Failed to deploy firmware update for device ID: \" + deviceId + \" with firmware version: \" + firmwareVersion);\r\n |         // Logic to deploy firmware which might fail and needs careful exception handling\r\n        if (firmwareVersion.equals(\"0.23Beta\")) { \r\n            throw new ServletException(\"Firmware version \" + firmwareVersion + \" has known issues with device ID: \" + deviceId);\r\n        }\r\n        // Assume more update logic here that could fail\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "Failed to deploy firmware update for device ID:",
                "isSensitive": "no"
            },
            {
                "name": "with firmware version:",
                "isSensitive": "no"
            },
            {
                "name": "0.23Beta",
                "isSensitive": "yes"
            },
            {
                "name": "has known issues with device ID:",
                "isSensitive": "no"
            },
            {
                "name": "Firmware version",
                "isSensitive": "no"
            },
            {
                "name": "firmwareVersion",
                "isSensitive": "no"
            },
            {
                "name": "deviceId",
                "isSensitive": "no"
            }
        ],
        "comments": [
            {
                "name": "Logic to deploy firmware which might fail and needs careful exception handling",
                "isSensitive": "no"
            },
            {
                "name": "Assume more update logic here that could fail",
                "isSensitive": "no"
            }
        ],
        "sinks": [
            {
                "name": "equals",
                "isSink": "no"
            },
            {
                "name": "sendError",
                "isSink": "yes"
            },
            {
                "name": "getLogger",
                "isSink": "no"
            },
            {
                "name": "deployFirmwareUpdate",
                "isSink": "no"
            },
            {
                "name": "getParameter",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "BAD_PaymentProcessingServlet.java",
        "variables": [
            {
                "name": "request",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "e",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "paymentId",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "request.getParameter(\"paymentId\")",
                        "type": "String",
                        "context": "public class BAD_PaymentProcessingServlet extends HttpServlet {\r\n    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\r\n        String paymentId = request.getParameter(\"paymentId\");\r\n        try {\r\n            processPayment(paymentId);\r\n | public class BAD_PaymentProcessingServlet extends HttpServlet {\r\n    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\r\n        String paymentId = request.getParameter(\"paymentId\");\r\n        try {\r\n            processPayment(paymentId);\r\n",
                        "nextNode": "paymentId"
                    },
                    {
                        "name": "paymentId",
                        "type": "Dataflow from `getParameter(...)` to `paymentId`\nDataflow from `\"paymentId\"` to `paymentId`",
                        "context": "        String paymentId = request.getParameter(\"paymentId\");\r\n        try {\r\n            processPayment(paymentId);\r\n        }catch (ServletException e) {\r\n            response.getWriter().println(\"Payment processing failed for payment ID: \" + paymentId);\r\n |         String paymentId = request.getParameter(\"paymentId\");\r\n        try {\r\n            processPayment(paymentId);\r\n        }catch (ServletException e) {\r\n            response.getWriter().println(\"Payment processing failed for payment ID: \" + paymentId);\r\n |             processPayment(paymentId);\r\n        }catch (ServletException e) {\r\n            response.getWriter().println(\"Payment processing failed for payment ID: \" + paymentId);\r\n        }\r\n    }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "response",
                "isSensitive": "no",
                "graph": []
            }
        ],
        "strings": [
            {
                "name": "paymentId",
                "isSensitive": "no"
            },
            {
                "name": "Payment processing failed for payment ID:",
                "isSensitive": "no"
            }
        ],
        "comments": [
            {
                "name": "Simulation of a failed payment process",
                "isSensitive": "no"
            }
        ],
        "sinks": [
            {
                "name": "println",
                "isSink": "yes"
            },
            {
                "name": "getWriter",
                "isSink": "no"
            },
            {
                "name": "processPayment",
                "isSink": "no"
            },
            {
                "name": "getParameter",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "BAD_ProfileUpdateServlet.java",
        "variables": [
            {
                "name": "request",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "e",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "response",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "userId",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "request.getParameter(\"userId\")",
                        "type": "String",
                        "context": "public class BAD_ProfileUpdateServlet extends HttpServlet {\r\n    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\r\n        String userId = request.getParameter(\"userId\");\r\n        String email = request.getParameter(\"email\");\r\n        updateEmail(userId, email);\r\n",
                        "nextNode": "userId"
                    },
                    {
                        "name": "userId",
                        "type": "Dataflow from `getParameter(...)` to `userId`\nDataflow from `\"userId\"` to `userId`",
                        "context": "        String userId = request.getParameter(\"userId\");\r\n        String email = request.getParameter(\"email\");\r\n        updateEmail(userId, email);\r\n\r\n        try{\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "email",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "request.getParameter(\"email\")",
                        "type": "String",
                        "context": "    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\r\n        String userId = request.getParameter(\"userId\");\r\n        String email = request.getParameter(\"email\");\r\n        updateEmail(userId, email);\r\n\r\n",
                        "nextNode": "email"
                    },
                    {
                        "name": "email",
                        "type": "Dataflow from `getParameter(...)` to `email`\nDataflow from `\"email\"` to `email`",
                        "context": "        String userId = request.getParameter(\"userId\");\r\n        String email = request.getParameter(\"email\");\r\n        updateEmail(userId, email);\r\n\r\n        try{\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "Error updating email for user ID:",
                "isSensitive": "no"
            },
            {
                "name": "userId",
                "isSensitive": "no"
            },
            {
                "name": "email",
                "isSensitive": "no"
            }
        ],
        "comments": [
            {
                "name": "Email update logic that might fail",
                "isSensitive": "no"
            }
        ],
        "sinks": [
            {
                "name": "println",
                "isSink": "yes"
            },
            {
                "name": "updateEmail",
                "isSink": "no"
            },
            {
                "name": "getWriter",
                "isSink": "no"
            },
            {
                "name": "getParameter",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "BAD_TransactionServlet.java",
        "variables": [
            {
                "name": "request",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "e",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "response",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "transactionId",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "request.getParameter(\"transactionId\")",
                        "type": "String",
                        "context": "    protected void doPost(HttpServletRequest request, HttpServletResponse response)\r\n            throws ServletException, IOException {\r\n        String transactionId = request.getParameter(\"transactionId\");\r\n        try {\r\n            processTransaction(transactionId);\r\n |     protected void doPost(HttpServletRequest request, HttpServletResponse response)\r\n            throws ServletException, IOException {\r\n        String transactionId = request.getParameter(\"transactionId\");\r\n        try {\r\n            processTransaction(transactionId);\r\n |     protected void doPost(HttpServletRequest request, HttpServletResponse response)\r\n            throws ServletException, IOException {\r\n        String transactionId = request.getParameter(\"transactionId\");\r\n        try {\r\n            processTransaction(transactionId);\r\n",
                        "nextNode": "transactionId"
                    },
                    {
                        "name": "String transactionId",
                        "type": "String",
                        "context": "    }\r\n\r\n    private void processTransaction(String transactionId) throws ServletException {\r\n        // Transaction processing logic can throw exception\r\n        throw new ServletException(\"Processing error for transaction ID: \" + transactionId);\r\n",
                        "nextNode": "transactionId"
                    },
                    {
                        "name": "transactionId",
                        "type": "Dataflow from `getParameter(...)` to `transactionId`\nDataflow from `\"transactionId\"` to `transactionId`",
                        "context": "        String transactionId = request.getParameter(\"transactionId\");\r\n        try {\r\n            processTransaction(transactionId);\r\n        } catch (ServletException e) {\r\n            response.getWriter().println(\"Transaction processing failed for transaction ID: \" + transactionId);\r\n |         String transactionId = request.getParameter(\"transactionId\");\r\n        try {\r\n            processTransaction(transactionId);\r\n        } catch (ServletException e) {\r\n            response.getWriter().println(\"Transaction processing failed for transaction ID: \" + transactionId);\r\n |             processTransaction(transactionId);\r\n        } catch (ServletException e) {\r\n            response.getWriter().println(\"Transaction processing failed for transaction ID: \" + transactionId);\r\n        }\r\n    }\r\n |         String transactionId = request.getParameter(\"transactionId\");\r\n        try {\r\n            processTransaction(transactionId);\r\n        } catch (ServletException e) {\r\n            response.getWriter().println(\"Transaction processing failed for transaction ID: \" + transactionId);\r\n |     private void processTransaction(String transactionId) throws ServletException {\r\n        // Transaction processing logic can throw exception\r\n        throw new ServletException(\"Processing error for transaction ID: \" + transactionId);\r\n    }\r\n}\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "Processing error for transaction ID:",
                "isSensitive": "no"
            },
            {
                "name": "Transaction processing failed for transaction ID:",
                "isSensitive": "no"
            },
            {
                "name": "transactionId",
                "isSensitive": "no"
            }
        ],
        "comments": [
            {
                "name": "Transaction processing logic can throw exception",
                "isSensitive": "no"
            }
        ],
        "sinks": [
            {
                "name": "println",
                "isSink": "yes"
            },
            {
                "name": "getWriter",
                "isSink": "no"
            },
            {
                "name": "processTransaction",
                "isSink": "no"
            },
            {
                "name": "getParameter",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "BAD_UserProfileServlet.java",
        "variables": [
            {
                "name": "request",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "e",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "response",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "userId",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "request.getParameter(\"userId\")",
                        "type": "String",
                        "context": "public class BAD_UserProfileServlet extends HttpServlet {\r\n    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\r\n        String userId = request.getParameter(\"userId\");\r\n        try{\r\n            fetchUserProfile(userId);\r\n | public class BAD_UserProfileServlet extends HttpServlet {\r\n    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\r\n        String userId = request.getParameter(\"userId\");\r\n        try{\r\n            fetchUserProfile(userId);\r\n",
                        "nextNode": "userId"
                    },
                    {
                        "name": "userId",
                        "type": "Dataflow from `getParameter(...)` to `userId`\nDataflow from `\"userId\"` to `userId`",
                        "context": "        String userId = request.getParameter(\"userId\");\r\n        try{\r\n            fetchUserProfile(userId);\r\n        } catch (ServletException e) {\r\n            response.getWriter().println(\"Error fetching user profile for user ID: \" + userId);\r\n |         String userId = request.getParameter(\"userId\");\r\n        try{\r\n            fetchUserProfile(userId);\r\n        } catch (ServletException e) {\r\n            response.getWriter().println(\"Error fetching user profile for user ID: \" + userId);\r\n |             fetchUserProfile(userId);\r\n        } catch (ServletException e) {\r\n            response.getWriter().println(\"Error fetching user profile for user ID: \" + userId);\r\n        }\r\n    }\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "Error fetching user profile for user ID:",
                "isSensitive": "no"
            },
            {
                "name": "userId",
                "isSensitive": "no"
            }
        ],
        "comments": [
            {
                "name": "Logic to retrieve user profile that might throw ServletException",
                "isSensitive": "no"
            }
        ],
        "sinks": [
            {
                "name": "println",
                "isSink": "yes"
            },
            {
                "name": "getWriter",
                "isSink": "no"
            },
            {
                "name": "fetchUserProfile",
                "isSink": "no"
            },
            {
                "name": "getParameter",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "GOOD_AccountBalanceServlet.java",
        "variables": [
            {
                "name": "accountId",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "request.getParameter(\"accountId\")",
                        "type": "String",
                        "context": "public class GOOD_AccountBalanceServlet extends HttpServlet {\r\n    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\r\n        String accountId = request.getParameter(\"accountId\");\r\n        try {\r\n            retrieveAccountBalance(accountId);\r\n",
                        "nextNode": "accountId"
                    },
                    {
                        "name": "accountId",
                        "type": "Dataflow from `getParameter(...)` to `accountId`\nDataflow from `\"accountId\"` to `accountId`",
                        "context": "        String accountId = request.getParameter(\"accountId\");\r\n        try {\r\n            retrieveAccountBalance(accountId);\r\n        } catch (ServletException e) {\r\n            response.getWriter().println(\"Unable to retrieve balance.\");\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "request",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "e",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "response",
                "isSensitive": "yes",
                "graph": []
            }
        ],
        "strings": [
            {
                "name": "Unable to retrieve balance.",
                "isSensitive": "no"
            },
            {
                "name": "accountId",
                "isSensitive": "no"
            },
            {
                "name": "Query failed.",
                "isSensitive": "no"
            }
        ],
        "comments": [
            {
                "name": "Supposed database call that fails",
                "isSensitive": "no"
            }
        ],
        "sinks": [
            {
                "name": "println",
                "isSink": "yes"
            },
            {
                "name": "getWriter",
                "isSink": "no"
            },
            {
                "name": "retrieveAccountBalance",
                "isSink": "no"
            },
            {
                "name": "getParameter",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "GOOD_ApiKeyManagementServlet.java",
        "variables": [
            {
                "name": "request",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "apiKey",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "request.getParameter(\"apiKey\")",
                        "type": "String",
                        "context": "\r\n    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\r\n        String apiKey = request.getParameter(\"apiKey\");\r\n        try {\r\n            validateApiKey(apiKey);\r\n | \r\n    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\r\n        String apiKey = request.getParameter(\"apiKey\");\r\n        try {\r\n            validateApiKey(apiKey);\r\n | \r\n    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\r\n        String apiKey = request.getParameter(\"apiKey\");\r\n        try {\r\n            validateApiKey(apiKey);\r\n",
                        "nextNode": "apiKey"
                    },
                    {
                        "name": "String apiKey",
                        "type": "String",
                        "context": "    }\r\n\r\n    private void validateApiKey(String apiKey) throws ServletException {\r\n        // Simulate API key validation logic that might fail\r\n        if (apiKey == null || apiKey.isEmpty()) {\r\n |     }\r\n\r\n    private void validateApiKey(String apiKey) throws ServletException {\r\n        // Simulate API key validation logic that might fail\r\n        if (apiKey == null || apiKey.isEmpty()) {\r\n",
                        "nextNode": "apiKey"
                    },
                    {
                        "name": "apiKey",
                        "type": "Dataflow from `getParameter(...)` to `apiKey`\nDataflow from `\"apiKey\"` to `apiKey`",
                        "context": "        String apiKey = request.getParameter(\"apiKey\");\r\n        try {\r\n            validateApiKey(apiKey);\r\n        } catch (ServletException e) {\r\n            logger.error(\"Failed to validate API key.\");\r\n |         String apiKey = request.getParameter(\"apiKey\");\r\n        try {\r\n            validateApiKey(apiKey);\r\n        } catch (ServletException e) {\r\n            logger.error(\"Failed to validate API key.\");\r\n |     private void validateApiKey(String apiKey) throws ServletException {\r\n        // Simulate API key validation logic that might fail\r\n        if (apiKey == null || apiKey.isEmpty()) {\r\n            throw new ServletException(\"Invalid API key provided.\");\r\n        }\r\n |         String apiKey = request.getParameter(\"apiKey\");\r\n        try {\r\n            validateApiKey(apiKey);\r\n        } catch (ServletException e) {\r\n            logger.error(\"Failed to validate API key.\");\r\n |     private void validateApiKey(String apiKey) throws ServletException {\r\n        // Simulate API key validation logic that might fail\r\n        if (apiKey == null || apiKey.isEmpty()) {\r\n            throw new ServletException(\"Invalid API key provided.\");\r\n        }\r\n |     private void validateApiKey(String apiKey) throws ServletException {\r\n        // Simulate API key validation logic that might fail\r\n        if (apiKey == null || apiKey.isEmpty()) {\r\n            throw new ServletException(\"Invalid API key provided.\");\r\n        }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "e",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "response",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "logger",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "LogManager.getLogger(GOOD_ApiKeyManagementServlet.class)",
                        "type": "Logger",
                        "context": "\r\npublic class GOOD_ApiKeyManagementServlet extends HttpServlet {\r\n    private static final Logger logger = LogManager.getLogger(GOOD_ApiKeyManagementServlet.class);\r\n\r\n    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\r\n",
                        "nextNode": "logger"
                    },
                    {
                        "name": "logger",
                        "type": "Logger",
                        "context": "\r\npublic class GOOD_ApiKeyManagementServlet extends HttpServlet {\r\n    private static final Logger logger = LogManager.getLogger(GOOD_ApiKeyManagementServlet.class);\r\n\r\n    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\r\n |             validateApiKey(apiKey);\r\n        } catch (ServletException e) {\r\n            logger.error(\"Failed to validate API key.\");\r\n            response.getWriter().println(\"API key validation failed. Please contact support.\");\r\n        }\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "Invalid API key provided.",
                "isSensitive": "no"
            },
            {
                "name": "apiKey",
                "isSensitive": "no"
            },
            {
                "name": "API key validation failed. Please contact support.",
                "isSensitive": "no"
            },
            {
                "name": "Failed to validate API key.",
                "isSensitive": "no"
            }
        ],
        "comments": [
            {
                "name": "More validation logic could go here",
                "isSensitive": "no"
            },
            {
                "name": "Simulate API key validation logic that might fail",
                "isSensitive": "no"
            }
        ],
        "sinks": [
            {
                "name": "println",
                "isSink": "yes"
            },
            {
                "name": "getWriter",
                "isSink": "no"
            },
            {
                "name": "isEmpty",
                "isSink": "no"
            },
            {
                "name": "getLogger",
                "isSink": "no"
            },
            {
                "name": "validateApiKey",
                "isSink": "no"
            },
            {
                "name": "error",
                "isSink": "yes"
            },
            {
                "name": "getParameter",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "GOOD_DbConnectionErrorServlet.java",
        "variables": [
            {
                "name": "request",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "conn",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "e",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "response",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "ioException",
                "isSensitive": "yes",
                "graph": []
            }
        ],
        "strings": [
            {
                "name": "Failed to connect to database.",
                "isSensitive": "no"
            },
            {
                "name": "MySQL driver not found.",
                "isSensitive": "no"
            },
            {
                "name": "admin",
                "isSensitive": "yes"
            },
            {
                "name": "jdbc:mysql://db.mycompany.com:3306/production_db",
                "isSensitive": "yes"
            },
            {
                "name": "tacosAreTasty",
                "isSensitive": "yes"
            },
            {
                "name": "com.mysql.jdbc.Driver",
                "isSensitive": "no"
            },
            {
                "name": "ServletException caught.",
                "isSensitive": "no"
            }
        ],
        "comments": [
            {
                "name": "Perform database operations...",
                "isSensitive": "no"
            },
            {
                "name": "Handle IOException separately if needed",
                "isSensitive": "no"
            }
        ],
        "sinks": [
            {
                "name": "getConnection",
                "isSink": "yes"
            },
            {
                "name": "init",
                "isSink": "no"
            },
            {
                "name": "println",
                "isSink": "yes"
            },
            {
                "name": "forName",
                "isSink": "no"
            },
            {
                "name": "printStackTrace",
                "isSink": "yes"
            },
            {
                "name": "getWriter",
                "isSink": "no"
            },
            {
                "name": "write",
                "isSink": "yes"
            },
            {
                "name": "doGet",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "GOOD_ExternalServiceErrorServlet.java",
        "variables": [
            {
                "name": "request",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "e",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "response",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "LOGGER",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "LogManager.getLogger(GOOD_ExternalServiceErrorServlet.class)",
                        "type": "Logger",
                        "context": "public class GOOD_ExternalServiceErrorServlet extends HttpServlet {\r\n    // Setup Log4j Logger\r\n    private static final Logger LOGGER = LogManager.getLogger(GOOD_ExternalServiceErrorServlet.class);\r\n\r\n    @Override\r\n | public class GOOD_ExternalServiceErrorServlet extends HttpServlet {\r\n    // Setup Log4j Logger\r\n    private static final Logger LOGGER = LogManager.getLogger(GOOD_ExternalServiceErrorServlet.class);\r\n\r\n    @Override\r\n | public class GOOD_ExternalServiceErrorServlet extends HttpServlet {\r\n    // Setup Log4j Logger\r\n    private static final Logger LOGGER = LogManager.getLogger(GOOD_ExternalServiceErrorServlet.class);\r\n\r\n    @Override\r\n",
                        "nextNode": "LOGGER"
                    },
                    {
                        "name": "LOGGER",
                        "type": "Logger",
                        "context": "public class GOOD_ExternalServiceErrorServlet extends HttpServlet {\r\n    // Setup Log4j Logger\r\n    private static final Logger LOGGER = LogManager.getLogger(GOOD_ExternalServiceErrorServlet.class);\r\n\r\n    @Override\r\n |         } catch (ServletException e) {\r\n            try {\r\n                LOGGER.warn(\"Caught ServletException.\");\r\n                response.getWriter().println(\"An error occurred. Please try again later.\");\r\n            } catch (IOException ioException) {\r\n | public class GOOD_ExternalServiceErrorServlet extends HttpServlet {\r\n    // Setup Log4j Logger\r\n    private static final Logger LOGGER = LogManager.getLogger(GOOD_ExternalServiceErrorServlet.class);\r\n\r\n    @Override\r\n |                 response.getWriter().println(\"An error occurred. Please try again later.\");\r\n            } catch (IOException ioException) {\r\n                LOGGER.error(\"Failed to write to response.\");\r\n            }\r\n        } catch (IOException e) {\r\n | public class GOOD_ExternalServiceErrorServlet extends HttpServlet {\r\n    // Setup Log4j Logger\r\n    private static final Logger LOGGER = LogManager.getLogger(GOOD_ExternalServiceErrorServlet.class);\r\n\r\n    @Override\r\n |         } catch (IOException e) {\r\n            // Log general I/O errors\r\n            LOGGER.warn(\"General I/O error.\");\r\n        }\r\n    }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "connection",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "url.openConnection()",
                        "type": "URLConnection",
                        "context": "        try {\r\n            URL url = new URL(\"https://api.companydata.com/v1/userinfo?auth_token=09876zyxwv54321\");\r\n            HttpsURLConnection connection = (HttpsURLConnection) url.openConnection();\r\n            // Assume connection setup and request...\r\n\r\n",
                        "nextNode": "(HttpsURLConnection) url.openConnection()"
                    },
                    {
                        "name": "(HttpsURLConnection) url.openConnection()",
                        "type": "HttpsURLConnection",
                        "context": "        try {\r\n            URL url = new URL(\"https://api.companydata.com/v1/userinfo?auth_token=09876zyxwv54321\");\r\n            HttpsURLConnection connection = (HttpsURLConnection) url.openConnection();\r\n            // Assume connection setup and request...\r\n\r\n",
                        "nextNode": "connection"
                    },
                    {
                        "name": "connection",
                        "type": "Dataflow from `openConnection(...)` to `connection`",
                        "context": "            // Assume connection setup and request...\r\n\r\n            int responseCode = connection.getResponseCode();\r\n            if (responseCode != HttpsURLConnection.HTTP_OK) {\r\n                throw new ServletException(\"Failed to fetch data from API: HTTP \" + responseCode);\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "url",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "new URL(\"https://api.companydata.com/v1/userinfo?auth_token=09876zyxwv54321\")",
                        "type": "URL",
                        "context": "    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\r\n        try {\r\n            URL url = new URL(\"https://api.companydata.com/v1/userinfo?auth_token=09876zyxwv54321\");\r\n            HttpsURLConnection connection = (HttpsURLConnection) url.openConnection();\r\n            // Assume connection setup and request...\r\n",
                        "nextNode": "url"
                    },
                    {
                        "name": "url",
                        "type": "Dataflow from `new URL(...)` to `url`\nDataflow from `\"https://api.companydata.com/v1/userinfo?auth_token=09876zyxwv54321\"` to `url`",
                        "context": "        try {\r\n            URL url = new URL(\"https://api.companydata.com/v1/userinfo?auth_token=09876zyxwv54321\");\r\n            HttpsURLConnection connection = (HttpsURLConnection) url.openConnection();\r\n            // Assume connection setup and request...\r\n\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "ioException",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "responseCode",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "connection.getResponseCode()",
                        "type": "Number",
                        "context": "            // Assume connection setup and request...\r\n\r\n            int responseCode = connection.getResponseCode();\r\n            if (responseCode != HttpsURLConnection.HTTP_OK) {\r\n                throw new ServletException(\"Failed to fetch data from API: HTTP \" + responseCode);\r\n |             // Assume connection setup and request...\r\n\r\n            int responseCode = connection.getResponseCode();\r\n            if (responseCode != HttpsURLConnection.HTTP_OK) {\r\n                throw new ServletException(\"Failed to fetch data from API: HTTP \" + responseCode);\r\n",
                        "nextNode": "responseCode"
                    },
                    {
                        "name": "responseCode",
                        "type": "Dataflow from `getResponseCode(...)` to `responseCode`",
                        "context": "\r\n            int responseCode = connection.getResponseCode();\r\n            if (responseCode != HttpsURLConnection.HTTP_OK) {\r\n                throw new ServletException(\"Failed to fetch data from API: HTTP \" + responseCode);\r\n            }\r\n | \r\n            int responseCode = connection.getResponseCode();\r\n            if (responseCode != HttpsURLConnection.HTTP_OK) {\r\n                throw new ServletException(\"Failed to fetch data from API: HTTP \" + responseCode);\r\n            }\r\n |             int responseCode = connection.getResponseCode();\r\n            if (responseCode != HttpsURLConnection.HTTP_OK) {\r\n                throw new ServletException(\"Failed to fetch data from API: HTTP \" + responseCode);\r\n            }\r\n        } catch (IOException e) {\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "General I/O error.",
                "isSensitive": "no"
            },
            {
                "name": "https://api.companydata.com/v1/userinfo?auth_token=09876zyxwv54321",
                "isSensitive": "yes"
            },
            {
                "name": "Caught ServletException.",
                "isSensitive": "no"
            },
            {
                "name": "Failed to write to response.",
                "isSensitive": "no"
            },
            {
                "name": "Service error while fetching data.",
                "isSensitive": "no"
            },
            {
                "name": "Failed to fetch data from API: HTTP",
                "isSensitive": "no"
            },
            {
                "name": "An error occurred. Please try again later.",
                "isSensitive": "no"
            }
        ],
        "comments": [
            {
                "name": "Assume connection setup and request...",
                "isSensitive": "no"
            },
            {
                "name": "Function to call doGet and handle ServletException, logging details",
                "isSensitive": "no"
            },
            {
                "name": "Log general I/O errors",
                "isSensitive": "no"
            },
            {
                "name": "Setup Log4j Logger",
                "isSensitive": "no"
            }
        ],
        "sinks": [
            {
                "name": "warn",
                "isSink": "yes"
            },
            {
                "name": "println",
                "isSink": "yes"
            },
            {
                "name": "openConnection",
                "isSink": "yes"
            },
            {
                "name": "getWriter",
                "isSink": "no"
            },
            {
                "name": "getResponseCode",
                "isSink": "yes"
            },
            {
                "name": "getLogger",
                "isSink": "no"
            },
            {
                "name": "error",
                "isSink": "yes"
            },
            {
                "name": "doGet",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "GOOD_FileReadErrorServlet.java",
        "variables": [
            {
                "name": "fis",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "filename",
                        "type": "String",
                        "context": "    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\r\n        String filename = request.getParameter(\"filename\");\r\n        File file = new File(\"/var/www/data/\" + filename);\r\n\r\n        try (FileInputStream fis = new FileInputStream(file);\r\n",
                        "nextNode": "\"/var/www/data/\" + filename"
                    },
                    {
                        "name": "\"/var/www/data/\" + filename",
                        "type": "String",
                        "context": "    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\r\n        String filename = request.getParameter(\"filename\");\r\n        File file = new File(\"/var/www/data/\" + filename);\r\n\r\n        try (FileInputStream fis = new FileInputStream(file);\r\n",
                        "nextNode": "new File(\"/var/www/data/\" + filename)"
                    },
                    {
                        "name": "new File(\"/var/www/data/\" + filename)",
                        "type": "File",
                        "context": "    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\r\n        String filename = request.getParameter(\"filename\");\r\n        File file = new File(\"/var/www/data/\" + filename);\r\n\r\n        try (FileInputStream fis = new FileInputStream(file);\r\n",
                        "nextNode": "file"
                    },
                    {
                        "name": "file",
                        "type": "File",
                        "context": "        File file = new File(\"/var/www/data/\" + filename);\r\n\r\n        try (FileInputStream fis = new FileInputStream(file);\r\n             BufferedReader reader = new BufferedReader(new InputStreamReader(fis))) {\r\n            // Process file...\r\n",
                        "nextNode": "new FileInputStream(file)"
                    },
                    {
                        "name": "new FileInputStream(file)",
                        "type": "FileInputStream",
                        "context": "        File file = new File(\"/var/www/data/\" + filename);\r\n\r\n        try (FileInputStream fis = new FileInputStream(file);\r\n             BufferedReader reader = new BufferedReader(new InputStreamReader(fis))) {\r\n            // Process file...\r\n",
                        "nextNode": "fis"
                    },
                    {
                        "name": "fis",
                        "type": "Dataflow from `filename` to `fis`\nDataflow from `file` to `fis`\nDataflow from `new File(...)` to `fis`\nDataflow from `getParameter(...)` to `fis`\nDataflow from `\"/var/www/data/\"` to `fis`\nDataflow from `new FileInputStream(...)` to `fis`\nDataflow from `\"filename\"` to `fis`",
                        "context": "\r\n        try (FileInputStream fis = new FileInputStream(file);\r\n             BufferedReader reader = new BufferedReader(new InputStreamReader(fis))) {\r\n            // Process file...\r\n        } catch (FileNotFoundException e) {\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "request",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "filename",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "request.getParameter(\"filename\")",
                        "type": "String",
                        "context": "    @Override\r\n    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\r\n        String filename = request.getParameter(\"filename\");\r\n        File file = new File(\"/var/www/data/\" + filename);\r\n\r\n",
                        "nextNode": "filename"
                    },
                    {
                        "name": "filename",
                        "type": "Dataflow from `getParameter(...)` to `filename`\nDataflow from `\"filename\"` to `filename`",
                        "context": "    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\r\n        String filename = request.getParameter(\"filename\");\r\n        File file = new File(\"/var/www/data/\" + filename);\r\n\r\n        try (FileInputStream fis = new FileInputStream(file);\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "file",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "filename",
                        "type": "String",
                        "context": "    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\r\n        String filename = request.getParameter(\"filename\");\r\n        File file = new File(\"/var/www/data/\" + filename);\r\n\r\n        try (FileInputStream fis = new FileInputStream(file);\r\n",
                        "nextNode": "\"/var/www/data/\" + filename"
                    },
                    {
                        "name": "\"/var/www/data/\" + filename",
                        "type": "String",
                        "context": "    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\r\n        String filename = request.getParameter(\"filename\");\r\n        File file = new File(\"/var/www/data/\" + filename);\r\n\r\n        try (FileInputStream fis = new FileInputStream(file);\r\n",
                        "nextNode": "new File(\"/var/www/data/\" + filename)"
                    },
                    {
                        "name": "new File(\"/var/www/data/\" + filename)",
                        "type": "File",
                        "context": "    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\r\n        String filename = request.getParameter(\"filename\");\r\n        File file = new File(\"/var/www/data/\" + filename);\r\n\r\n        try (FileInputStream fis = new FileInputStream(file);\r\n",
                        "nextNode": "file"
                    },
                    {
                        "name": "file",
                        "type": "Dataflow from `filename` to `file`\nDataflow from `new File(...)` to `file`\nDataflow from `getParameter(...)` to `file`\nDataflow from `\"/var/www/data/\"` to `file`\nDataflow from `\"filename\"` to `file`",
                        "context": "        File file = new File(\"/var/www/data/\" + filename);\r\n\r\n        try (FileInputStream fis = new FileInputStream(file);\r\n             BufferedReader reader = new BufferedReader(new InputStreamReader(fis))) {\r\n            // Process file...\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "ex",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "e",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "reader",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "response",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "ioException",
                "isSensitive": "yes",
                "graph": []
            }
        ],
        "strings": [
            {
                "name": "filename",
                "isSensitive": "no"
            },
            {
                "name": "/var/www/data/",
                "isSensitive": "no"
            },
            {
                "name": "A general error occurred.",
                "isSensitive": "no"
            },
            {
                "name": "Error reading file.",
                "isSensitive": "no"
            },
            {
                "name": "An internal error occurred.",
                "isSensitive": "no"
            }
        ],
        "comments": [
            {
                "name": "Handle other IOExceptions that might be thrown by the response.getWriter()",
                "isSensitive": "no"
            },
            {
                "name": "Additional function to handle doGet and catch ServletException",
                "isSensitive": "no"
            },
            {
                "name": "Process file...",
                "isSensitive": "no"
            }
        ],
        "sinks": [
            {
                "name": "println",
                "isSink": "yes"
            },
            {
                "name": "getWriter",
                "isSink": "no"
            },
            {
                "name": "write",
                "isSink": "yes"
            },
            {
                "name": "getParameter",
                "isSink": "no"
            },
            {
                "name": "doGet",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "GOOD_GenericErrorWithLoggingServlet.java",
        "variables": [
            {
                "name": "request",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "e",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "response",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "LOGGER",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "Logger.getLogger(GOOD_GenericErrorWithLoggingServlet.class.getName()",
                        "type": "Logger",
                        "context": "\r\npublic class GOOD_GenericErrorWithLoggingServlet extends HttpServlet {\r\n    private static final Logger LOGGER = Logger.getLogger(GOOD_GenericErrorWithLoggingServlet.class.getName());\r\n\r\n    @Override\r\n",
                        "nextNode": "LOGGER"
                    },
                    {
                        "name": "LOGGER",
                        "type": "Logger",
                        "context": "\r\npublic class GOOD_GenericErrorWithLoggingServlet extends HttpServlet {\r\n    private static final Logger LOGGER = Logger.getLogger(GOOD_GenericErrorWithLoggingServlet.class.getName());\r\n\r\n    @Override\r\n |             // Sensitive operation that might fail\r\n        } catch (Exception e) {\r\n            LOGGER.log(Level.SEVERE, \"An error occurred\", e);\r\n            response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, \"Internal server error. Please try again later.\");\r\n        }\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "Internal server error. Please try again later.",
                "isSensitive": "no"
            },
            {
                "name": "An error occurred",
                "isSensitive": "no"
            }
        ],
        "comments": [
            {
                "name": "Sensitive operation that might fail",
                "isSensitive": "no"
            }
        ],
        "sinks": [
            {
                "name": "getName",
                "isSink": "no"
            },
            {
                "name": "log",
                "isSink": "yes"
            },
            {
                "name": "sendError",
                "isSink": "yes"
            },
            {
                "name": "getLogger",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "GOOD_IoTDeviceFirmwareUpdateServlet.java",
        "variables": [
            {
                "name": "request",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "e",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "response",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "logger",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "LogManager.getLogger(GOOD_IoTDeviceFirmwareUpdateServlet.class)",
                        "type": "Logger",
                        "context": "\r\npublic class GOOD_IoTDeviceFirmwareUpdateServlet extends HttpServlet {\r\n    private static final Logger logger = LogManager.getLogger(GOOD_IoTDeviceFirmwareUpdateServlet.class);\r\n\r\n    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\r\n | \r\npublic class GOOD_IoTDeviceFirmwareUpdateServlet extends HttpServlet {\r\n    private static final Logger logger = LogManager.getLogger(GOOD_IoTDeviceFirmwareUpdateServlet.class);\r\n\r\n    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\r\n",
                        "nextNode": "logger"
                    },
                    {
                        "name": "logger",
                        "type": "Logger",
                        "context": "\r\npublic class GOOD_IoTDeviceFirmwareUpdateServlet extends HttpServlet {\r\n    private static final Logger logger = LogManager.getLogger(GOOD_IoTDeviceFirmwareUpdateServlet.class);\r\n\r\n    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\r\n |             deployFirmwareUpdate(deviceId, firmwareVersion);\r\n        } catch (ServletException e) {\r\n            logger.error(\"Failed firmware update failed.\");\r\n            response.getWriter().println(\"Firmware update process encountered an error. Please check device status.\");\r\n            notifyTechSupport(deviceId, firmwareVersion, e.getMessage());\r\n | \r\npublic class GOOD_IoTDeviceFirmwareUpdateServlet extends HttpServlet {\r\n    private static final Logger logger = LogManager.getLogger(GOOD_IoTDeviceFirmwareUpdateServlet.class);\r\n\r\n    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\r\n |     private void notifyTechSupport(String deviceId, String firmwareVersion, String error) {\r\n        // Notifying technical support with detailed error info, could log sensitive information if not properly managed\r\n        logger.info(\"Tech support notified.\");\r\n    }\r\n}\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "firmwareVersion",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "request.getParameter(\"firmwareVersion\")",
                        "type": "String",
                        "context": "    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\r\n        String deviceId = request.getParameter(\"deviceId\");\r\n        String firmwareVersion = request.getParameter(\"firmwareVersion\");\r\n        try {\r\n            deployFirmwareUpdate(deviceId, firmwareVersion);\r\n |     protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\r\n        String deviceId = request.getParameter(\"deviceId\");\r\n        String firmwareVersion = request.getParameter(\"firmwareVersion\");\r\n        try {\r\n            deployFirmwareUpdate(deviceId, firmwareVersion);\r\n |     protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\r\n        String deviceId = request.getParameter(\"deviceId\");\r\n        String firmwareVersion = request.getParameter(\"firmwareVersion\");\r\n        try {\r\n            deployFirmwareUpdate(deviceId, firmwareVersion);\r\n",
                        "nextNode": "firmwareVersion"
                    },
                    {
                        "name": "String firmwareVersion",
                        "type": "String",
                        "context": "    }\r\n\r\n    private void deployFirmwareUpdate(String deviceId, String firmwareVersion) throws ServletException {\r\n        // Logic to deploy firmware which might fail and needs careful exception handling\r\n        if (firmwareVersion.equals(\"0.23Beta\")) {\r\n",
                        "nextNode": "firmwareVersion"
                    },
                    {
                        "name": "firmwareVersion",
                        "type": "Dataflow from `getParameter(...)` to `firmwareVersion`\nDataflow from `\"firmwareVersion\"` to `firmwareVersion`",
                        "context": "        String firmwareVersion = request.getParameter(\"firmwareVersion\");\r\n        try {\r\n            deployFirmwareUpdate(deviceId, firmwareVersion);\r\n        } catch (ServletException e) {\r\n            logger.error(\"Failed firmware update failed.\");\r\n |         String firmwareVersion = request.getParameter(\"firmwareVersion\");\r\n        try {\r\n            deployFirmwareUpdate(deviceId, firmwareVersion);\r\n        } catch (ServletException e) {\r\n            logger.error(\"Failed firmware update failed.\");\r\n |             logger.error(\"Failed firmware update failed.\");\r\n            response.getWriter().println(\"Firmware update process encountered an error. Please check device status.\");\r\n            notifyTechSupport(deviceId, firmwareVersion, e.getMessage());\r\n        }\r\n    }\r\n |         String firmwareVersion = request.getParameter(\"firmwareVersion\");\r\n        try {\r\n            deployFirmwareUpdate(deviceId, firmwareVersion);\r\n        } catch (ServletException e) {\r\n            logger.error(\"Failed firmware update failed.\");\r\n |     private void deployFirmwareUpdate(String deviceId, String firmwareVersion) throws ServletException {\r\n        // Logic to deploy firmware which might fail and needs careful exception handling\r\n        if (firmwareVersion.equals(\"0.23Beta\")) {\r\n            throw new ServletException(\"Firmware version has known issues with this device.\");\r\n        }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "error",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "deviceId",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "request.getParameter(\"deviceId\")",
                        "type": "String",
                        "context": "\r\n    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\r\n        String deviceId = request.getParameter(\"deviceId\");\r\n        String firmwareVersion = request.getParameter(\"firmwareVersion\");\r\n        try {\r\n | \r\n    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\r\n        String deviceId = request.getParameter(\"deviceId\");\r\n        String firmwareVersion = request.getParameter(\"firmwareVersion\");\r\n        try {\r\n",
                        "nextNode": "deviceId"
                    },
                    {
                        "name": "deviceId",
                        "type": "Dataflow from `getParameter(...)` to `deviceId`\nDataflow from `\"deviceId\"` to `deviceId`",
                        "context": "        String firmwareVersion = request.getParameter(\"firmwareVersion\");\r\n        try {\r\n            deployFirmwareUpdate(deviceId, firmwareVersion);\r\n        } catch (ServletException e) {\r\n            logger.error(\"Failed firmware update failed.\");\r\n |         String firmwareVersion = request.getParameter(\"firmwareVersion\");\r\n        try {\r\n            deployFirmwareUpdate(deviceId, firmwareVersion);\r\n        } catch (ServletException e) {\r\n            logger.error(\"Failed firmware update failed.\");\r\n |             logger.error(\"Failed firmware update failed.\");\r\n            response.getWriter().println(\"Firmware update process encountered an error. Please check device status.\");\r\n            notifyTechSupport(deviceId, firmwareVersion, e.getMessage());\r\n        }\r\n    }\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "Failed firmware update failed.",
                "isSensitive": "no"
            },
            {
                "name": "0.23Beta",
                "isSensitive": "yes"
            },
            {
                "name": "Firmware version has known issues with this device.",
                "isSensitive": "no"
            },
            {
                "name": "firmwareVersion",
                "isSensitive": "no"
            },
            {
                "name": "deviceId",
                "isSensitive": "no"
            },
            {
                "name": "Tech support notified.",
                "isSensitive": "no"
            },
            {
                "name": "Firmware update process encountered an error. Please check device status.",
                "isSensitive": "no"
            }
        ],
        "comments": [
            {
                "name": "Logic to deploy firmware which might fail and needs careful exception handling",
                "isSensitive": "no"
            },
            {
                "name": "Notifying technical support with detailed error info, could log sensitive information if not properly managed",
                "isSensitive": "no"
            },
            {
                "name": "Assume more update logic here that could fail",
                "isSensitive": "no"
            }
        ],
        "sinks": [
            {
                "name": "println",
                "isSink": "yes"
            },
            {
                "name": "getWriter",
                "isSink": "no"
            },
            {
                "name": "equals",
                "isSink": "no"
            },
            {
                "name": "getLogger",
                "isSink": "no"
            },
            {
                "name": "getMessage",
                "isSink": "no"
            },
            {
                "name": "deployFirmwareUpdate",
                "isSink": "no"
            },
            {
                "name": "error",
                "isSink": "yes"
            },
            {
                "name": "notifyTechSupport",
                "isSink": "no"
            },
            {
                "name": "getParameter",
                "isSink": "no"
            },
            {
                "name": "info",
                "isSink": "yes"
            }
        ]
    },
    {
        "fileName": "GOOD_PaymentProcessingServlet.java",
        "variables": [
            {
                "name": "request",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "e",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "paymentId",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "request.getParameter(\"paymentId\")",
                        "type": "String",
                        "context": "public class GOOD_PaymentProcessingServlet extends HttpServlet {\r\n    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\r\n        String paymentId = request.getParameter(\"paymentId\");\r\n        try {\r\n            processPayment(paymentId);\r\n",
                        "nextNode": "paymentId"
                    },
                    {
                        "name": "paymentId",
                        "type": "Dataflow from `getParameter(...)` to `paymentId`\nDataflow from `\"paymentId\"` to `paymentId`",
                        "context": "        String paymentId = request.getParameter(\"paymentId\");\r\n        try {\r\n            processPayment(paymentId);\r\n        } catch (ServletException e) {\r\n            response.getWriter().println(\"Payment processing failed.\");\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "response",
                "isSensitive": "yes",
                "graph": []
            }
        ],
        "strings": [
            {
                "name": "paymentId",
                "isSensitive": "no"
            },
            {
                "name": "Transaction error.",
                "isSensitive": "no"
            },
            {
                "name": "Payment processing failed.",
                "isSensitive": "no"
            }
        ],
        "comments": [
            {
                "name": "Simulation of a failed payment process",
                "isSensitive": "no"
            }
        ],
        "sinks": [
            {
                "name": "println",
                "isSink": "yes"
            },
            {
                "name": "getWriter",
                "isSink": "no"
            },
            {
                "name": "processPayment",
                "isSink": "no"
            },
            {
                "name": "getParameter",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "GOOD_ProfileUpdateServlet.java",
        "variables": [
            {
                "name": "request",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "e",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "response",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "userId",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "request.getParameter(\"userId\")",
                        "type": "String",
                        "context": "public class GOOD_ProfileUpdateServlet extends HttpServlet {\r\n    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\r\n        String userId = request.getParameter(\"userId\");\r\n        String email = request.getParameter(\"email\"); \r\n        try {\r\n",
                        "nextNode": "userId"
                    },
                    {
                        "name": "userId",
                        "type": "Dataflow from `getParameter(...)` to `userId`\nDataflow from `\"userId\"` to `userId`",
                        "context": "        String email = request.getParameter(\"email\"); \r\n        try {\r\n            updateEmail(userId, email);\r\n        } catch (ServletException e) {\r\n            response.getWriter().println(\"Failed to update email for user. Please retry or check system logs.\");\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "email",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "request.getParameter(\"email\")",
                        "type": "String",
                        "context": "    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\r\n        String userId = request.getParameter(\"userId\");\r\n        String email = request.getParameter(\"email\"); \r\n        try {\r\n            updateEmail(userId, email);\r\n",
                        "nextNode": "email"
                    },
                    {
                        "name": "email",
                        "type": "Dataflow from `getParameter(...)` to `email`\nDataflow from `\"email\"` to `email`",
                        "context": "        String email = request.getParameter(\"email\"); \r\n        try {\r\n            updateEmail(userId, email);\r\n        } catch (ServletException e) {\r\n            response.getWriter().println(\"Failed to update email for user. Please retry or check system logs.\");\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "Failed to update email for user. Please retry or check system logs.",
                "isSensitive": "no"
            },
            {
                "name": "Email format error or email already in use.",
                "isSensitive": "no"
            },
            {
                "name": "userId",
                "isSensitive": "no"
            },
            {
                "name": "email",
                "isSensitive": "no"
            },
            {
                "name": "Update failed",
                "isSensitive": "no"
            }
        ],
        "comments": [
            {
                "name": "Email update logic that might fail",
                "isSensitive": "no"
            }
        ],
        "sinks": [
            {
                "name": "println",
                "isSink": "yes"
            },
            {
                "name": "updateEmail",
                "isSink": "no"
            },
            {
                "name": "getServletContext",
                "isSink": "no"
            },
            {
                "name": "log",
                "isSink": "yes"
            },
            {
                "name": "getWriter",
                "isSink": "no"
            },
            {
                "name": "getParameter",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "GOOD_SecureFileAccessServlet.java",
        "variables": [
            {
                "name": "request",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "filename",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "request.getParameter(\"filename\")",
                        "type": "String",
                        "context": "    @Override\r\n    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\r\n        String filename = request.getParameter(\"filename\");\r\n        if (!isValidFilename(filename)) {\r\n            response.sendError(HttpServletResponse.SC_BAD_REQUEST, \"Invalid file request.\");\r\n |     @Override\r\n    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\r\n        String filename = request.getParameter(\"filename\");\r\n        if (!isValidFilename(filename)) {\r\n            response.sendError(HttpServletResponse.SC_BAD_REQUEST, \"Invalid file request.\");\r\n |     @Override\r\n    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\r\n        String filename = request.getParameter(\"filename\");\r\n        if (!isValidFilename(filename)) {\r\n            response.sendError(HttpServletResponse.SC_BAD_REQUEST, \"Invalid file request.\");\r\n |     @Override\r\n    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\r\n        String filename = request.getParameter(\"filename\");\r\n        if (!isValidFilename(filename)) {\r\n            response.sendError(HttpServletResponse.SC_BAD_REQUEST, \"Invalid file request.\");\r\n",
                        "nextNode": "filename"
                    },
                    {
                        "name": "String filename",
                        "type": "String",
                        "context": "    }\r\n\r\n    private boolean isValidFilename(String filename) {\r\n        // Implement validation logic to prevent directory traversal, etc.\r\n        return filename != null && filename.matches(\"[\\\\w,\\\\s-]+\\\\.[A-Za-z]{3}\");\r\n |     }\r\n\r\n    private boolean isValidFilename(String filename) {\r\n        // Implement validation logic to prevent directory traversal, etc.\r\n        return filename != null && filename.matches(\"[\\\\w,\\\\s-]+\\\\.[A-Za-z]{3}\");\r\n",
                        "nextNode": "filename"
                    },
                    {
                        "name": "filename",
                        "type": "String",
                        "context": "    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\r\n        String filename = request.getParameter(\"filename\");\r\n        if (!isValidFilename(filename)) {\r\n            response.sendError(HttpServletResponse.SC_BAD_REQUEST, \"Invalid file request.\");\r\n            return;\r\n |         }\r\n\r\n        File file = new File(\"/secure/data/\" + filename);\r\n        if (!file.exists()) {\r\n            response.sendError(HttpServletResponse.SC_NOT_FOUND, \"File not found.\");\r\n |     protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\r\n        String filename = request.getParameter(\"filename\");\r\n        if (!isValidFilename(filename)) {\r\n            response.sendError(HttpServletResponse.SC_BAD_REQUEST, \"Invalid file request.\");\r\n            return;\r\n |     protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\r\n        String filename = request.getParameter(\"filename\");\r\n        if (!isValidFilename(filename)) {\r\n            response.sendError(HttpServletResponse.SC_BAD_REQUEST, \"Invalid file request.\");\r\n            return;\r\n |     private boolean isValidFilename(String filename) {\r\n        // Implement validation logic to prevent directory traversal, etc.\r\n        return filename != null && filename.matches(\"[\\\\w,\\\\s-]+\\\\.[A-Za-z]{3}\");\r\n    }\r\n}\r\n |     protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\r\n        String filename = request.getParameter(\"filename\");\r\n        if (!isValidFilename(filename)) {\r\n            response.sendError(HttpServletResponse.SC_BAD_REQUEST, \"Invalid file request.\");\r\n            return;\r\n |     private boolean isValidFilename(String filename) {\r\n        // Implement validation logic to prevent directory traversal, etc.\r\n        return filename != null && filename.matches(\"[\\\\w,\\\\s-]+\\\\.[A-Za-z]{3}\");\r\n    }\r\n}\r\n |     private boolean isValidFilename(String filename) {\r\n        // Implement validation logic to prevent directory traversal, etc.\r\n        return filename != null && filename.matches(\"[\\\\w,\\\\s-]+\\\\.[A-Za-z]{3}\");\r\n    }\r\n}\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "file",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "filename",
                        "type": "String",
                        "context": "        }\r\n\r\n        File file = new File(\"/secure/data/\" + filename);\r\n        if (!file.exists()) {\r\n            response.sendError(HttpServletResponse.SC_NOT_FOUND, \"File not found.\");\r\n",
                        "nextNode": "\"/secure/data/\" + filename"
                    },
                    {
                        "name": "\"/secure/data/\" + filename",
                        "type": "String",
                        "context": "        }\r\n\r\n        File file = new File(\"/secure/data/\" + filename);\r\n        if (!file.exists()) {\r\n            response.sendError(HttpServletResponse.SC_NOT_FOUND, \"File not found.\");\r\n",
                        "nextNode": "new File(\"/secure/data/\" + filename)"
                    },
                    {
                        "name": "new File(\"/secure/data/\" + filename)",
                        "type": "File",
                        "context": "        }\r\n\r\n        File file = new File(\"/secure/data/\" + filename);\r\n        if (!file.exists()) {\r\n            response.sendError(HttpServletResponse.SC_NOT_FOUND, \"File not found.\");\r\n",
                        "nextNode": "file"
                    },
                    {
                        "name": "file",
                        "type": "Dataflow from `filename` to `file`\nDataflow from `filename` to `file`\nDataflow from `new File(...)` to `file`\nDataflow from `getParameter(...)` to `file`\nDataflow from `\"/secure/data/\"` to `file`\nDataflow from `\"filename\"` to `file`",
                        "context": "\r\n        File file = new File(\"/secure/data/\" + filename);\r\n        if (!file.exists()) {\r\n            response.sendError(HttpServletResponse.SC_NOT_FOUND, \"File not found.\");\r\n            return;\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "response",
                "isSensitive": "yes",
                "graph": []
            }
        ],
        "strings": [
            {
                "name": "filename",
                "isSensitive": "no"
            },
            {
                "name": "File not found.",
                "isSensitive": "no"
            },
            {
                "name": "[w,s-]+.[A-Za-z]{3}",
                "isSensitive": "no"
            },
            {
                "name": "Invalid file request.",
                "isSensitive": "no"
            },
            {
                "name": "/secure/data/",
                "isSensitive": "no"
            }
        ],
        "comments": [
            {
                "name": "Implement validation logic to prevent directory traversal, etc.",
                "isSensitive": "no"
            }
        ],
        "sinks": [
            {
                "name": "isValidFilename",
                "isSink": "no"
            },
            {
                "name": "sendError",
                "isSink": "yes"
            },
            {
                "name": "exists",
                "isSink": "no"
            },
            {
                "name": "matches",
                "isSink": "no"
            },
            {
                "name": "getParameter",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "BAD_BufferOverflowException.java",
        "variables": [
            {
                "name": "args",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "e",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "dataBuffer",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "bufferSize",
                        "type": "Number",
                        "context": "\r\n    public BAD_BufferOverflowException(int bufferSize) throws RuntimeException{\r\n        dataBuffer = ByteBuffer.allocate(bufferSize);\r\n    }\r\n\r\n",
                        "nextNode": "ByteBuffer.allocate(bufferSize)"
                    },
                    {
                        "name": "ByteBuffer.allocate(bufferSize)",
                        "type": "ByteBuffer",
                        "context": "\r\n    public BAD_BufferOverflowException(int bufferSize) throws RuntimeException{\r\n        dataBuffer = ByteBuffer.allocate(bufferSize);\r\n    }\r\n\r\n",
                        "nextNode": "dataBuffer"
                    },
                    {
                        "name": "allocateSpace()",
                        "type": "ByteBuffer",
                        "context": "    }\r\n\r\n    public void allocateSpace(byte[] AWSKey) {\r\n        try{\r\n            dataBuffer.put(AWSKey);\r\n",
                        "nextNode": "dataBuffer"
                    },
                    {
                        "name": "dataBuffer",
                        "type": "ByteBuffer",
                        "context": "\r\n    public BAD_BufferOverflowException(int bufferSize) throws RuntimeException{\r\n        dataBuffer = ByteBuffer.allocate(bufferSize);\r\n    }\r\n\r\n |     public void allocateSpace(byte[] AWSKey) {\r\n        try{\r\n            dataBuffer.put(AWSKey);\r\n        }\r\n        catch (RuntimeException e){\r\n |     public void allocateSpace(byte[] AWSKey) {\r\n        try{\r\n            dataBuffer.put(AWSKey);\r\n        }\r\n        catch (RuntimeException e){\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "AWSKey",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "\"ABCED123\".getBytes()",
                        "type": "byte[]",
                        "context": "    public static void main(String[] args) {\r\n        BAD_BufferOverflowException buffer = new BAD_BufferOverflowException(256); // Small buffer size for demonstration\r\n        byte[] AWSKey = \"ABCED123\".getBytes();\r\n        buffer.allocateSpace(AWSKey); // This might cause a buffer overflow due to large data size\r\n    }\r\n |     public static void main(String[] args) {\r\n        BAD_BufferOverflowException buffer = new BAD_BufferOverflowException(256); // Small buffer size for demonstration\r\n        byte[] AWSKey = \"ABCED123\".getBytes();\r\n        buffer.allocateSpace(AWSKey); // This might cause a buffer overflow due to large data size\r\n    }\r\n |     public static void main(String[] args) {\r\n        BAD_BufferOverflowException buffer = new BAD_BufferOverflowException(256); // Small buffer size for demonstration\r\n        byte[] AWSKey = \"ABCED123\".getBytes();\r\n        buffer.allocateSpace(AWSKey); // This might cause a buffer overflow due to large data size\r\n    }\r\n",
                        "nextNode": "AWSKey"
                    },
                    {
                        "name": "byte[] AWSKey",
                        "type": "byte[]",
                        "context": "    }\r\n\r\n    public void allocateSpace(byte[] AWSKey) {\r\n        try{\r\n            dataBuffer.put(AWSKey);\r\n |     }\r\n\r\n    public void allocateSpace(byte[] AWSKey) {\r\n        try{\r\n            dataBuffer.put(AWSKey);\r\n",
                        "nextNode": "AWSKey"
                    },
                    {
                        "name": "AWSKey",
                        "type": "byte[]",
                        "context": "        BAD_BufferOverflowException buffer = new BAD_BufferOverflowException(256); // Small buffer size for demonstration\r\n        byte[] AWSKey = \"ABCED123\".getBytes();\r\n        buffer.allocateSpace(AWSKey); // This might cause a buffer overflow due to large data size\r\n    }\r\n}\r\n |     public void allocateSpace(byte[] AWSKey) {\r\n        try{\r\n            dataBuffer.put(AWSKey);\r\n        }\r\n        catch (RuntimeException e){\r\n |         BAD_BufferOverflowException buffer = new BAD_BufferOverflowException(256); // Small buffer size for demonstration\r\n        byte[] AWSKey = \"ABCED123\".getBytes();\r\n        buffer.allocateSpace(AWSKey); // This might cause a buffer overflow due to large data size\r\n    }\r\n}\r\n |     public void allocateSpace(byte[] AWSKey) {\r\n        try{\r\n            dataBuffer.put(AWSKey);\r\n        }\r\n        catch (RuntimeException e){\r\n |         }\r\n        catch (RuntimeException e){\r\n            System.out.println(\"Buffer overflow detected, failed to save AWS Key\" + AWSKey);\r\n        }\r\n    }\r\n |         BAD_BufferOverflowException buffer = new BAD_BufferOverflowException(256); // Small buffer size for demonstration\r\n        byte[] AWSKey = \"ABCED123\".getBytes();\r\n        buffer.allocateSpace(AWSKey); // This might cause a buffer overflow due to large data size\r\n    }\r\n}\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "buffer",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "new BAD_BufferOverflowException(256)",
                        "type": "BAD_BufferOverflowException",
                        "context": "    }\r\n    public static void main(String[] args) {\r\n        BAD_BufferOverflowException buffer = new BAD_BufferOverflowException(256); // Small buffer size for demonstration\r\n        byte[] AWSKey = \"ABCED123\".getBytes();\r\n        buffer.allocateSpace(AWSKey); // This might cause a buffer overflow due to large data size\r\n",
                        "nextNode": "buffer"
                    },
                    {
                        "name": "buffer",
                        "type": "Dataflow from `new BAD_BufferOverflowException(...)` to `buffer`\nDataflow from `256` to `buffer`",
                        "context": "        BAD_BufferOverflowException buffer = new BAD_BufferOverflowException(256); // Small buffer size for demonstration\r\n        byte[] AWSKey = \"ABCED123\".getBytes();\r\n        buffer.allocateSpace(AWSKey); // This might cause a buffer overflow due to large data size\r\n    }\r\n}\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "bufferSize",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "256",
                        "type": "Number",
                        "context": "    }\r\n    public static void main(String[] args) {\r\n        BAD_BufferOverflowException buffer = new BAD_BufferOverflowException(256); // Small buffer size for demonstration\r\n        byte[] AWSKey = \"ABCED123\".getBytes();\r\n        buffer.allocateSpace(AWSKey); // This might cause a buffer overflow due to large data size\r\n",
                        "nextNode": "int bufferSize"
                    },
                    {
                        "name": "int bufferSize",
                        "type": "Number",
                        "context": "    private ByteBuffer dataBuffer;\r\n\r\n    public BAD_BufferOverflowException(int bufferSize) throws RuntimeException{\r\n        dataBuffer = ByteBuffer.allocate(bufferSize);\r\n    }\r\n",
                        "nextNode": "bufferSize"
                    },
                    {
                        "name": "bufferSize",
                        "type": "Dataflow from `256` to `bufferSize`",
                        "context": "\r\n    public BAD_BufferOverflowException(int bufferSize) throws RuntimeException{\r\n        dataBuffer = ByteBuffer.allocate(bufferSize);\r\n    }\r\n\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "ABCED123",
                "isSensitive": "yes"
            },
            {
                "name": "Buffer overflow detected, failed to save AWS Key",
                "isSensitive": "no"
            }
        ],
        "comments": [
            {
                "name": "This might cause a buffer overflow due to large data size",
                "isSensitive": "no"
            },
            {
                "name": "Small buffer size for demonstration",
                "isSensitive": "no"
            }
        ],
        "sinks": [
            {
                "name": "println",
                "isSink": "yes"
            },
            {
                "name": "allocate",
                "isSink": "yes"
            },
            {
                "name": "allocateSpace",
                "isSink": "yes"
            },
            {
                "name": "put",
                "isSink": "no"
            },
            {
                "name": "getBytes",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "BAD_FileNotFoundException.java",
        "variables": [
            {
                "name": "e",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "reader",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "filePath",
                        "type": "String",
                        "context": "    public void processFile(String filePath) {\r\n        try {\r\n            FileReader reader = new FileReader(filePath);\r\n            reader.close();\r\n        } catch (IOException e) {\r\n",
                        "nextNode": "new FileReader(filePath)"
                    },
                    {
                        "name": "new FileReader(filePath)",
                        "type": "FileReader",
                        "context": "    public void processFile(String filePath) {\r\n        try {\r\n            FileReader reader = new FileReader(filePath);\r\n            reader.close();\r\n        } catch (IOException e) {\r\n",
                        "nextNode": "reader"
                    },
                    {
                        "name": "reader",
                        "type": "Dataflow from `filePath` to `reader`\nDataflow from `new FileReader(...)` to `reader`",
                        "context": "        try {\r\n            FileReader reader = new FileReader(filePath);\r\n            reader.close();\r\n        } catch (IOException e) {\r\n            // Handle or log the IOException\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "filePath",
                "isSensitive": "yes",
                "graph": []
            }
        ],
        "strings": [
            {
                "name": "An I/O error occurred while trying to access",
                "isSensitive": "no"
            }
        ],
        "comments": [
            {
                "name": "Handle or log the IOException",
                "isSensitive": "no"
            }
        ],
        "sinks": [
            {
                "name": "println",
                "isSink": "yes"
            },
            {
                "name": "close",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "BAD_IllegalArgumentException.java",
        "variables": [
            {
                "name": "password",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "e",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "email",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "username",
                "isSensitive": "yes",
                "graph": []
            }
        ],
        "strings": [
            {
                "name": "@",
                "isSensitive": "no"
            },
            {
                "name": "An error occurred while registering user with email:",
                "isSensitive": "no"
            },
            {
                "name": ". Please provide a valid email address.",
                "isSensitive": "no"
            },
            {
                "name": "User registered successfully.",
                "isSensitive": "no"
            }
        ],
        "comments": [],
        "sinks": [
            {
                "name": "println",
                "isSink": "yes"
            },
            {
                "name": "contains",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "BAD_IllegalStateException.java",
        "variables": [
            {
                "name": "password",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "e",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "success",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "username",
                "isSensitive": "yes",
                "graph": []
            }
        ],
        "strings": [
            {
                "name": "Login attempt for",
                "isSensitive": "no"
            },
            {
                "name": "Login attempt logged successfully for",
                "isSensitive": "no"
            },
            {
                "name": "with password",
                "isSensitive": "no"
            },
            {
                "name": "was",
                "isSensitive": "no"
            },
            {
                "name": "unsuccessful",
                "isSensitive": "no"
            },
            {
                "name": "successful",
                "isSensitive": "no"
            }
        ],
        "comments": [
            {
                "name": "Continue with the login attempt logging if no exception is thrown",
                "isSensitive": "no"
            }
        ],
        "sinks": [
            {
                "name": "println",
                "isSink": "yes"
            }
        ]
    },
    {
        "fileName": "BAD_IndexOutofBoundsInfoExposure.java",
        "variables": [
            {
                "name": "args",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "data",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "e",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "dataMap",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "index",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "2",
                        "type": "Number",
                        "context": "    public static void main(String[] args) {\r\n        String[] dataMap = {\"MistyMountain2020\", \"medicalRecords\"};\r\n        int index = 2;\r\n\r\n        try {\r\n |     public static void main(String[] args) {\r\n        String[] dataMap = {\"MistyMountain2020\", \"medicalRecords\"};\r\n        int index = 2;\r\n\r\n        try {\r\n |     public static void main(String[] args) {\r\n        String[] dataMap = {\"MistyMountain2020\", \"medicalRecords\"};\r\n        int index = 2;\r\n\r\n        try {\r\n |     public static void main(String[] args) {\r\n        String[] dataMap = {\"MistyMountain2020\", \"medicalRecords\"};\r\n        int index = 2;\r\n\r\n        try {\r\n",
                        "nextNode": "index"
                    },
                    {
                        "name": "index",
                        "type": "Dataflow from `2` to `index`",
                        "context": "\r\n        try {\r\n            if (index < 0 || index >= dataMap.length) {\r\n                throw new IndexOutOfBoundsException();\r\n            } else {\r\n | \r\n        try {\r\n            if (index < 0 || index >= dataMap.length) {\r\n                throw new IndexOutOfBoundsException();\r\n            } else {\r\n | \r\n        try {\r\n            if (index < 0 || index >= dataMap.length) {\r\n                throw new IndexOutOfBoundsException();\r\n            } else {\r\n | \r\n        try {\r\n            if (index < 0 || index >= dataMap.length) {\r\n                throw new IndexOutOfBoundsException();\r\n            } else {\r\n |             }\r\n        } catch (IndexOutOfBoundsException e) {\r\n            System.err.println(\"Index \" + index + \" is out of bounds for the array\" + dataMap[index]);\r\n        }\r\n    }\r\n | \r\n        try {\r\n            if (index < 0 || index >= dataMap.length) {\r\n                throw new IndexOutOfBoundsException();\r\n            } else {\r\n |             }\r\n        } catch (IndexOutOfBoundsException e) {\r\n            System.err.println(\"Index \" + index + \" is out of bounds for the array\" + dataMap[index]);\r\n        }\r\n    }\r\n",
                        "nextNode": "index]"
                    },
                    {
                        "name": "index]",
                        "type": "Dataflow from `2` to `index`",
                        "context": "            }\r\n        } catch (IndexOutOfBoundsException e) {\r\n            System.err.println(\"Index \" + index + \" is out of bounds for the array\" + dataMap[index]);\r\n        }\r\n    }\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "is out of bounds for the array",
                "isSensitive": "no"
            },
            {
                "name": "MistyMountain2020",
                "isSensitive": "yes"
            },
            {
                "name": "medicalRecords",
                "isSensitive": "yes"
            },
            {
                "name": "Index",
                "isSensitive": "no"
            },
            {
                "name": "Data:",
                "isSensitive": "no"
            }
        ],
        "comments": [],
        "sinks": [
            {
                "name": "println",
                "isSink": "yes"
            }
        ]
    },
    {
        "fileName": "BAD_NegativeArraySizeException.java",
        "variables": [
            {
                "name": "medicalRecords",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "e",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "records",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "medicalRecords",
                        "type": "Map",
                        "context": "            } else {\r\n                String[] storage = new String[arraySize];\r\n                Collection<String> records = medicalRecords.values();\r\n                storage = records.toArray(storage);\r\n                System.out.println(\"Records saved successfully.\");\r\n",
                        "nextNode": "medicalRecords.values()"
                    },
                    {
                        "name": "medicalRecords.values()",
                        "type": "Object",
                        "context": "            } else {\r\n                String[] storage = new String[arraySize];\r\n                Collection<String> records = medicalRecords.values();\r\n                storage = records.toArray(storage);\r\n                System.out.println(\"Records saved successfully.\");\r\n",
                        "nextNode": "records"
                    },
                    {
                        "name": "records",
                        "type": "Object",
                        "context": "                String[] storage = new String[arraySize];\r\n                Collection<String> records = medicalRecords.values();\r\n                storage = records.toArray(storage);\r\n                System.out.println(\"Records saved successfully.\");\r\n            }\r\n |                 String[] storage = new String[arraySize];\r\n                Collection<String> records = medicalRecords.values();\r\n                storage = records.toArray(storage);\r\n                System.out.println(\"Records saved successfully.\");\r\n            }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "arraySize",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "storage",
                "isSensitive": "yes",
                "graph": []
            }
        ],
        "strings": [
            {
                "name": "Cannot save records for:",
                "isSensitive": "no"
            },
            {
                "name": "Records saved successfully.",
                "isSensitive": "no"
            }
        ],
        "comments": [],
        "sinks": [
            {
                "name": "println",
                "isSink": "yes"
            },
            {
                "name": "values",
                "isSink": "no"
            },
            {
                "name": "toArray",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "BAD_NoSuchElementException.java",
        "variables": [
            {
                "name": "args",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "e",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "config",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "properties",
                        "type": "Properties",
                        "context": "        // Simulation of loading configuration properties\r\n        Properties properties = new Properties();\r\n        properties.put(\"username\", \"user1\");\r\n        properties.put(\"password\", \"pass123\"); \r\n        return properties;\r\n |         Properties properties = new Properties();\r\n        properties.put(\"username\", \"user1\");\r\n        properties.put(\"password\", \"pass123\"); \r\n        return properties;\r\n    }\r\n |         properties.put(\"username\", \"user1\");\r\n        properties.put(\"password\", \"pass123\"); \r\n        return properties;\r\n    }\r\n\r\n |         // Simulation of loading configuration properties\r\n        Properties properties = new Properties();\r\n        properties.put(\"username\", \"user1\");\r\n        properties.put(\"password\", \"pass123\"); \r\n        return properties;\r\n |         Properties properties = new Properties();\r\n        properties.put(\"username\", \"user1\");\r\n        properties.put(\"password\", \"pass123\"); \r\n        return properties;\r\n    }\r\n |         properties.put(\"username\", \"user1\");\r\n        properties.put(\"password\", \"pass123\"); \r\n        return properties;\r\n    }\r\n\r\n",
                        "nextNode": "loadConfig()"
                    },
                    {
                        "name": "loadConfig()",
                        "type": "Properties",
                        "context": "public class BAD_NoSuchElementException {\r\n    public String getConfigValue(String key) {\r\n        Properties config = loadConfig();\r\n\r\n        try {\r\n | public class BAD_NoSuchElementException {\r\n    public String getConfigValue(String key) {\r\n        Properties config = loadConfig();\r\n\r\n        try {\r\n",
                        "nextNode": "config"
                    },
                    {
                        "name": "config",
                        "type": "Dataflow from `properties` to `config`\nDataflow from `properties` to `config`\nDataflow from `properties` to `config`\nDataflow from `loadConfig(...)` to `config`\nDataflow from `new Properties(...)` to `config`\nDataflow from `\"user1\"` to `config`\nDataflow from `\"pass123\"` to `config`",
                        "context": "\r\n        try {\r\n            if (config.getProperty(key) == null) {\r\n                throw new NoSuchElementException();\r\n            } else {\r\n | \r\n        try {\r\n            if (config.getProperty(key) == null) {\r\n                throw new NoSuchElementException();\r\n            } else {\r\n |                 throw new NoSuchElementException();\r\n            } else {\r\n                return config.getProperty(key);\r\n            }\r\n        } catch (NoSuchElementException e) {\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "key",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "\"username\"",
                        "type": "String",
                        "context": "        BAD_NoSuchElementException example = new BAD_NoSuchElementException();\r\n\r\n        System.out.println(\"Username: \" + example.getConfigValue(\"username\"));\r\n        System.out.println(\"Password: \" + example.getConfigValue(\"password\"));\r\n        System.out.println(\"Non-existent key: \" + example.getConfigValue(\"nonExistentKey\"));\r\n |         BAD_NoSuchElementException example = new BAD_NoSuchElementException();\r\n\r\n        System.out.println(\"Username: \" + example.getConfigValue(\"username\"));\r\n        System.out.println(\"Password: \" + example.getConfigValue(\"password\"));\r\n        System.out.println(\"Non-existent key: \" + example.getConfigValue(\"nonExistentKey\"));\r\n |         BAD_NoSuchElementException example = new BAD_NoSuchElementException();\r\n\r\n        System.out.println(\"Username: \" + example.getConfigValue(\"username\"));\r\n        System.out.println(\"Password: \" + example.getConfigValue(\"password\"));\r\n        System.out.println(\"Non-existent key: \" + example.getConfigValue(\"nonExistentKey\"));\r\n",
                        "nextNode": "String key"
                    },
                    {
                        "name": "String key",
                        "type": "String",
                        "context": "\r\npublic class BAD_NoSuchElementException {\r\n    public String getConfigValue(String key) {\r\n        Properties config = loadConfig();\r\n\r\n | \r\npublic class BAD_NoSuchElementException {\r\n    public String getConfigValue(String key) {\r\n        Properties config = loadConfig();\r\n\r\n | \r\npublic class BAD_NoSuchElementException {\r\n    public String getConfigValue(String key) {\r\n        Properties config = loadConfig();\r\n\r\n",
                        "nextNode": "key"
                    },
                    {
                        "name": "key",
                        "type": "Dataflow from `\"username\"` to `key`\nDataflow from `\"password\"` to `key`\nDataflow from `\"nonExistentKey\"` to `key`",
                        "context": "\r\n        try {\r\n            if (config.getProperty(key) == null) {\r\n                throw new NoSuchElementException();\r\n            } else {\r\n | \r\n        try {\r\n            if (config.getProperty(key) == null) {\r\n                throw new NoSuchElementException();\r\n            } else {\r\n |                 throw new NoSuchElementException();\r\n            } else {\r\n                return config.getProperty(key);\r\n            }\r\n        } catch (NoSuchElementException e) {\r\n | \r\n        try {\r\n            if (config.getProperty(key) == null) {\r\n                throw new NoSuchElementException();\r\n            } else {\r\n |             }\r\n        } catch (NoSuchElementException e) {\r\n            System.err.println(\"Config key not found: \" + key);\r\n            return null;\r\n        }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "properties",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "new Properties()",
                        "type": "Properties",
                        "context": "    private Properties loadConfig() {\r\n        // Simulation of loading configuration properties\r\n        Properties properties = new Properties();\r\n        properties.put(\"username\", \"user1\");\r\n        properties.put(\"password\", \"pass123\"); \r\n |     private Properties loadConfig() {\r\n        // Simulation of loading configuration properties\r\n        Properties properties = new Properties();\r\n        properties.put(\"username\", \"user1\");\r\n        properties.put(\"password\", \"pass123\"); \r\n |     private Properties loadConfig() {\r\n        // Simulation of loading configuration properties\r\n        Properties properties = new Properties();\r\n        properties.put(\"username\", \"user1\");\r\n        properties.put(\"password\", \"pass123\"); \r\n",
                        "nextNode": "properties"
                    },
                    {
                        "name": "properties",
                        "type": "Dataflow from `new Properties(...)` to `properties`",
                        "context": "        // Simulation of loading configuration properties\r\n        Properties properties = new Properties();\r\n        properties.put(\"username\", \"user1\");\r\n        properties.put(\"password\", \"pass123\"); \r\n        return properties;\r\n |         // Simulation of loading configuration properties\r\n        Properties properties = new Properties();\r\n        properties.put(\"username\", \"user1\");\r\n        properties.put(\"password\", \"pass123\"); \r\n        return properties;\r\n |         Properties properties = new Properties();\r\n        properties.put(\"username\", \"user1\");\r\n        properties.put(\"password\", \"pass123\"); \r\n        return properties;\r\n    }\r\n |         // Simulation of loading configuration properties\r\n        Properties properties = new Properties();\r\n        properties.put(\"username\", \"user1\");\r\n        properties.put(\"password\", \"pass123\"); \r\n        return properties;\r\n |         Properties properties = new Properties();\r\n        properties.put(\"username\", \"user1\");\r\n        properties.put(\"password\", \"pass123\"); \r\n        return properties;\r\n    }\r\n |         properties.put(\"username\", \"user1\");\r\n        properties.put(\"password\", \"pass123\"); \r\n        return properties;\r\n    }\r\n\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "example",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "new BAD_NoSuchElementException()",
                        "type": "BAD_NoSuchElementException",
                        "context": "\r\n    public static void main(String[] args) {\r\n        BAD_NoSuchElementException example = new BAD_NoSuchElementException();\r\n\r\n        System.out.println(\"Username: \" + example.getConfigValue(\"username\"));\r\n | \r\n    public static void main(String[] args) {\r\n        BAD_NoSuchElementException example = new BAD_NoSuchElementException();\r\n\r\n        System.out.println(\"Username: \" + example.getConfigValue(\"username\"));\r\n | \r\n    public static void main(String[] args) {\r\n        BAD_NoSuchElementException example = new BAD_NoSuchElementException();\r\n\r\n        System.out.println(\"Username: \" + example.getConfigValue(\"username\"));\r\n",
                        "nextNode": "example"
                    },
                    {
                        "name": "example",
                        "type": "Dataflow from `new BAD_NoSuchElementException(...)` to `example`",
                        "context": "        BAD_NoSuchElementException example = new BAD_NoSuchElementException();\r\n\r\n        System.out.println(\"Username: \" + example.getConfigValue(\"username\"));\r\n        System.out.println(\"Password: \" + example.getConfigValue(\"password\"));\r\n        System.out.println(\"Non-existent key: \" + example.getConfigValue(\"nonExistentKey\"));\r\n |         BAD_NoSuchElementException example = new BAD_NoSuchElementException();\r\n\r\n        System.out.println(\"Username: \" + example.getConfigValue(\"username\"));\r\n        System.out.println(\"Password: \" + example.getConfigValue(\"password\"));\r\n        System.out.println(\"Non-existent key: \" + example.getConfigValue(\"nonExistentKey\"));\r\n | \r\n        System.out.println(\"Username: \" + example.getConfigValue(\"username\"));\r\n        System.out.println(\"Password: \" + example.getConfigValue(\"password\"));\r\n        System.out.println(\"Non-existent key: \" + example.getConfigValue(\"nonExistentKey\"));\r\n    }\r\n |         BAD_NoSuchElementException example = new BAD_NoSuchElementException();\r\n\r\n        System.out.println(\"Username: \" + example.getConfigValue(\"username\"));\r\n        System.out.println(\"Password: \" + example.getConfigValue(\"password\"));\r\n        System.out.println(\"Non-existent key: \" + example.getConfigValue(\"nonExistentKey\"));\r\n | \r\n        System.out.println(\"Username: \" + example.getConfigValue(\"username\"));\r\n        System.out.println(\"Password: \" + example.getConfigValue(\"password\"));\r\n        System.out.println(\"Non-existent key: \" + example.getConfigValue(\"nonExistentKey\"));\r\n    }\r\n |         System.out.println(\"Username: \" + example.getConfigValue(\"username\"));\r\n        System.out.println(\"Password: \" + example.getConfigValue(\"password\"));\r\n        System.out.println(\"Non-existent key: \" + example.getConfigValue(\"nonExistentKey\"));\r\n    }\r\n}\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "user1",
                "isSensitive": "yes"
            },
            {
                "name": "Password:",
                "isSensitive": "no"
            },
            {
                "name": "password",
                "isSensitive": "no"
            },
            {
                "name": "Non-existent key:",
                "isSensitive": "no"
            },
            {
                "name": "nonExistentKey",
                "isSensitive": "no"
            },
            {
                "name": "Config key not found:",
                "isSensitive": "no"
            },
            {
                "name": "pass123",
                "isSensitive": "yes"
            },
            {
                "name": "Username:",
                "isSensitive": "no"
            },
            {
                "name": "username",
                "isSensitive": "no"
            }
        ],
        "comments": [
            {
                "name": "Simulation of loading configuration properties",
                "isSensitive": "no"
            }
        ],
        "sinks": [
            {
                "name": "println",
                "isSink": "yes"
            },
            {
                "name": "getProperty",
                "isSink": "no"
            },
            {
                "name": "getConfigValue",
                "isSink": "no"
            },
            {
                "name": "loadConfig",
                "isSink": "no"
            },
            {
                "name": "put",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "BAD_SalaryDivisionExceptionHandling.java",
        "variables": [
            {
                "name": "args",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "totalSalary",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "getNumberOfEmployees()",
                        "type": "Number",
                        "context": "    public static void main(String[] args) {\r\n        int hoursWorked = getConfidentialBaseSalary();\r\n        int totalSalary = getNumberOfEmployees();\r\n        String employeeID = getEmployeeID();\r\n\r\n",
                        "nextNode": "totalSalary"
                    },
                    {
                        "name": "totalSalary",
                        "type": "Dataflow from `getNumberOfEmployees(...)` to `totalSalary`\nDataflow from `0` to `totalSalary`",
                        "context": "                throw new ArithmeticException();\r\n            } else {\r\n                int hourlyRate = totalSalary / hoursWorked;\r\n                System.out.println(\"Hourly rate for employee \" + employeeID + \" is: \" + hourlyRate);\r\n            }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "e",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "employeeID",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "getEmployeeID()",
                        "type": "String",
                        "context": "        int hoursWorked = getConfidentialBaseSalary();\r\n        int totalSalary = getNumberOfEmployees();\r\n        String employeeID = getEmployeeID();\r\n\r\n        try {\r\n |         int hoursWorked = getConfidentialBaseSalary();\r\n        int totalSalary = getNumberOfEmployees();\r\n        String employeeID = getEmployeeID();\r\n\r\n        try {\r\n",
                        "nextNode": "employeeID"
                    },
                    {
                        "name": "employeeID",
                        "type": "Dataflow from `getEmployeeID(...)` to `employeeID`\nDataflow from `\"329\"` to `employeeID`",
                        "context": "            } else {\r\n                int hourlyRate = totalSalary / hoursWorked;\r\n                System.out.println(\"Hourly rate for employee \" + employeeID + \" is: \" + hourlyRate);\r\n            }\r\n        } catch (ArithmeticException e) {\r\n |             }\r\n        } catch (ArithmeticException e) {\r\n            System.err.println(\"Attempt to divide by zero - confidential payroll calculation cannot be completed for employee: \" + employeeID);\r\n        }\r\n    }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "hourlyRate",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "hoursWorked",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "getConfidentialBaseSalary()",
                        "type": "Number",
                        "context": "public class BAD_SalaryDivisionExceptionHandling {\r\n    public static void main(String[] args) {\r\n        int hoursWorked = getConfidentialBaseSalary();\r\n        int totalSalary = getNumberOfEmployees();\r\n        String employeeID = getEmployeeID();\r\n | public class BAD_SalaryDivisionExceptionHandling {\r\n    public static void main(String[] args) {\r\n        int hoursWorked = getConfidentialBaseSalary();\r\n        int totalSalary = getNumberOfEmployees();\r\n        String employeeID = getEmployeeID();\r\n",
                        "nextNode": "hoursWorked"
                    },
                    {
                        "name": "hoursWorked",
                        "type": "Dataflow from `getConfidentialBaseSalary(...)` to `hoursWorked`\nDataflow from `50000` to `hoursWorked`",
                        "context": "\r\n        try {\r\n            if (hoursWorked == 0) {\r\n                throw new ArithmeticException();\r\n            } else {\r\n | \r\n        try {\r\n            if (hoursWorked == 0) {\r\n                throw new ArithmeticException();\r\n            } else {\r\n |                 throw new ArithmeticException();\r\n            } else {\r\n                int hourlyRate = totalSalary / hoursWorked;\r\n                System.out.println(\"Hourly rate for employee \" + employeeID + \" is: \" + hourlyRate);\r\n            }\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "Hourly rate for employee",
                "isSensitive": "no"
            },
            {
                "name": "is:",
                "isSensitive": "no"
            },
            {
                "name": "Attempt to divide by zero - confidential payroll calculation cannot be completed for employee:",
                "isSensitive": "no"
            },
            {
                "name": "329",
                "isSensitive": "no"
            }
        ],
        "comments": [
            {
                "name": "Simulate retrieving the number of employees",
                "isSensitive": "no"
            },
            {
                "name": "Example of a critical input issue, possibly leading to division by zero",
                "isSensitive": "no"
            },
            {
                "name": "Example: $50,000 total payroll",
                "isSensitive": "no"
            }
        ],
        "sinks": [
            {
                "name": "getNumberOfEmployees",
                "isSink": "no"
            },
            {
                "name": "println",
                "isSink": "yes"
            },
            {
                "name": "getEmployeeID",
                "isSink": "no"
            },
            {
                "name": "getConfidentialBaseSalary",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "BAD_SecurityException.java",
        "variables": [
            {
                "name": "e",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "requestData",
                "isSensitive": "yes",
                "graph": []
            }
        ],
        "strings": [
            {
                "name": "is not authorized. Please provide valid request data.",
                "isSensitive": "no"
            },
            {
                "name": "Your request",
                "isSensitive": "no"
            }
        ],
        "comments": [
            {
                "name": "Process the request",
                "isSensitive": "no"
            }
        ],
        "sinks": [
            {
                "name": "println",
                "isSink": "yes"
            },
            {
                "name": "processRequest",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "BAD_SensitiveNullPointerExceptionHandling.java",
        "variables": [
            {
                "name": "request",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "e",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "response",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "accountKey",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "null",
                        "type": "Object",
                        "context": "    @Override\r\n    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\r\n        String accountKey = null;\r\n\r\n        try {\r\n",
                        "nextNode": "accountKey"
                    },
                    {
                        "name": "accountKey",
                        "type": "Dataflow from `null` to `accountKey`",
                        "context": "            // Process the account key\r\n        } catch (NullPointerException e) {\r\n            response.sendError(HttpServletResponse.SC_BAD_REQUEST, accountKey + \" is null.\");\r\n        }\r\n    }\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "secretKey",
                "isSensitive": "no"
            },
            {
                "name": "Secret key is missing in the request.",
                "isSensitive": "no"
            },
            {
                "name": "is null.",
                "isSensitive": "no"
            }
        ],
        "comments": [
            {
                "name": "Simulate a failure in secret key retrieval",
                "isSensitive": "no"
            },
            {
                "name": "Process the account key",
                "isSensitive": "no"
            }
        ],
        "sinks": [
            {
                "name": "sendError",
                "isSink": "yes"
            },
            {
                "name": "getParameter",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "GOOD_ArithmeticException.java",
        "variables": [
            {
                "name": "result",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "args",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "e",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "sensitiveMultiplier",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "getSensitiveMultiplier()",
                        "type": "Number",
                        "context": "    public static void main(String[] args) {\r\n        try {\r\n            int sensitiveMultiplier = getSensitiveMultiplier();\r\n            // Potential division by zero error\r\n            int result = 100 / sensitiveMultiplier; \r\n",
                        "nextNode": "sensitiveMultiplier"
                    },
                    {
                        "name": "sensitiveMultiplier",
                        "type": "Dataflow from `getSensitiveMultiplier(...)` to `sensitiveMultiplier`\nDataflow from `0` to `sensitiveMultiplier`",
                        "context": "            int sensitiveMultiplier = getSensitiveMultiplier();\r\n            // Potential division by zero error\r\n            int result = 100 / sensitiveMultiplier; \r\n        } catch (ArithmeticException e) {\r\n            System.err.println(\"Failed to calculate due to an arithmetic error.\");\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "Failed to calculate due to an arithmetic error.",
                "isSensitive": "no"
            },
            {
                "name": "This occurred while using a sensitive business multiplier.",
                "isSensitive": "no"
            }
        ],
        "comments": [
            {
                "name": "Simulate retrieving a sensitive multiplier that is mistakenly zero",
                "isSensitive": "no"
            },
            {
                "name": "Potential division by zero error",
                "isSensitive": "no"
            }
        ],
        "sinks": [
            {
                "name": "println",
                "isSink": "yes"
            },
            {
                "name": "getSensitiveMultiplier",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "GOOD_FileNotFoundException.java",
        "variables": [
            {
                "name": "e",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "filePath",
                "isSensitive": "yes",
                "graph": []
            }
        ],
        "strings": [
            {
                "name": "File not found",
                "isSensitive": "no"
            },
            {
                "name": "File processing failed.",
                "isSensitive": "no"
            }
        ],
        "comments": [],
        "sinks": [
            {
                "name": "println",
                "isSink": "yes"
            }
        ]
    },
    {
        "fileName": "GOOD_IllegalArgumentException.java",
        "variables": [
            {
                "name": "password",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "e",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "email",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "username",
                "isSensitive": "yes",
                "graph": []
            }
        ],
        "strings": [
            {
                "name": "@",
                "isSensitive": "no"
            },
            {
                "name": "Email format is incorrect.",
                "isSensitive": "no"
            },
            {
                "name": "Invalid email format.",
                "isSensitive": "no"
            },
            {
                "name": "Registration attempt failed.",
                "isSensitive": "no"
            }
        ],
        "comments": [
            {
                "name": "Logic to register user",
                "isSensitive": "no"
            }
        ],
        "sinks": [
            {
                "name": "println",
                "isSink": "yes"
            },
            {
                "name": "contains",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "GOOD_IllegalStateException.java",
        "variables": [
            {
                "name": "password",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "e",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "success",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "username",
                "isSensitive": "yes",
                "graph": []
            }
        ],
        "strings": [
            {
                "name": "Failed to login attempt due to missing credentials.",
                "isSensitive": "no"
            },
            {
                "name": "Logging error.",
                "isSensitive": "no"
            },
            {
                "name": "Username or password cannot be null.",
                "isSensitive": "no"
            }
        ],
        "comments": [],
        "sinks": [
            {
                "name": "println",
                "isSink": "yes"
            }
        ]
    },
    {
        "fileName": "GOOD_IndexOutofBoundsInfoExposure.java",
        "variables": [
            {
                "name": "args",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "taxData",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "data",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "e",
                "isSensitive": "yes",
                "graph": []
            }
        ],
        "strings": [
            {
                "name": "Caught an exception while accessing data.",
                "isSensitive": "no"
            },
            {
                "name": "taxRecords.csv",
                "isSensitive": "yes"
            },
            {
                "name": "This array should only be accessed within its bounds.",
                "isSensitive": "no"
            },
            {
                "name": "CalmSeas2022",
                "isSensitive": "yes"
            }
        ],
        "comments": [
            {
                "name": "This will throw IndexOutOfBoundsException",
                "isSensitive": "no"
            },
            {
                "name": "Attempting to access an index that does not exist",
                "isSensitive": "no"
            }
        ],
        "sinks": [
            {
                "name": "println",
                "isSink": "yes"
            }
        ]
    },
    {
        "fileName": "GOOD_NoSuchElementException.java",
        "variables": [
            {
                "name": "e",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "config",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "properties",
                        "type": "Properties",
                        "context": "        // Simulation of loading configuration properties\r\n        Properties properties = new Properties();\r\n        properties.put(\"username\", \"user1\");\r\n        properties.put(\"password\", \"pass123\"); \r\n        return properties;\r\n |         Properties properties = new Properties();\r\n        properties.put(\"username\", \"user1\");\r\n        properties.put(\"password\", \"pass123\"); \r\n        return properties;\r\n    }\r\n |         properties.put(\"username\", \"user1\");\r\n        properties.put(\"password\", \"pass123\"); \r\n        return properties;\r\n    }\r\n}\r\n",
                        "nextNode": "loadConfig()"
                    },
                    {
                        "name": "loadConfig()",
                        "type": "Properties",
                        "context": "    public String getConfigValue(String key) {\r\n        try {\r\n            Properties config = loadConfig();\r\n            return config.getProperty(key);  // Throws NoSuchElementException if the key is not found\r\n        } catch (NoSuchElementException e) {\r\n",
                        "nextNode": "config"
                    },
                    {
                        "name": "config",
                        "type": "Dataflow from `properties` to `config`\nDataflow from `properties` to `config`\nDataflow from `properties` to `config`\nDataflow from `loadConfig(...)` to `config`\nDataflow from `new Properties(...)` to `config`\nDataflow from `\"user1\"` to `config`\nDataflow from `\"pass123\"` to `config`",
                        "context": "        try {\r\n            Properties config = loadConfig();\r\n            return config.getProperty(key);  // Throws NoSuchElementException if the key is not found\r\n        } catch (NoSuchElementException e) {\r\n            System.out.println(\"Config key not found.\");\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "key",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "properties",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "new Properties()",
                        "type": "Properties",
                        "context": "    private Properties loadConfig() {\r\n        // Simulation of loading configuration properties\r\n        Properties properties = new Properties();\r\n        properties.put(\"username\", \"user1\");\r\n        properties.put(\"password\", \"pass123\"); \r\n |     private Properties loadConfig() {\r\n        // Simulation of loading configuration properties\r\n        Properties properties = new Properties();\r\n        properties.put(\"username\", \"user1\");\r\n        properties.put(\"password\", \"pass123\"); \r\n |     private Properties loadConfig() {\r\n        // Simulation of loading configuration properties\r\n        Properties properties = new Properties();\r\n        properties.put(\"username\", \"user1\");\r\n        properties.put(\"password\", \"pass123\"); \r\n",
                        "nextNode": "properties"
                    },
                    {
                        "name": "properties",
                        "type": "Dataflow from `new Properties(...)` to `properties`",
                        "context": "        // Simulation of loading configuration properties\r\n        Properties properties = new Properties();\r\n        properties.put(\"username\", \"user1\");\r\n        properties.put(\"password\", \"pass123\"); \r\n        return properties;\r\n |         // Simulation of loading configuration properties\r\n        Properties properties = new Properties();\r\n        properties.put(\"username\", \"user1\");\r\n        properties.put(\"password\", \"pass123\"); \r\n        return properties;\r\n |         Properties properties = new Properties();\r\n        properties.put(\"username\", \"user1\");\r\n        properties.put(\"password\", \"pass123\"); \r\n        return properties;\r\n    }\r\n |         // Simulation of loading configuration properties\r\n        Properties properties = new Properties();\r\n        properties.put(\"username\", \"user1\");\r\n        properties.put(\"password\", \"pass123\"); \r\n        return properties;\r\n |         Properties properties = new Properties();\r\n        properties.put(\"username\", \"user1\");\r\n        properties.put(\"password\", \"pass123\"); \r\n        return properties;\r\n    }\r\n |         properties.put(\"username\", \"user1\");\r\n        properties.put(\"password\", \"pass123\"); \r\n        return properties;\r\n    }\r\n}\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "user1",
                "isSensitive": "yes"
            },
            {
                "name": "password",
                "isSensitive": "no"
            },
            {
                "name": "pass123",
                "isSensitive": "yes"
            },
            {
                "name": "Config key not found.",
                "isSensitive": "no"
            },
            {
                "name": "Config key not found",
                "isSensitive": "no"
            },
            {
                "name": "username",
                "isSensitive": "no"
            }
        ],
        "comments": [
            {
                "name": "Simulation of loading configuration properties",
                "isSensitive": "no"
            },
            {
                "name": "Throws NoSuchElementException if the key is not found",
                "isSensitive": "no"
            }
        ],
        "sinks": [
            {
                "name": "println",
                "isSink": "yes"
            },
            {
                "name": "getProperty",
                "isSink": "no"
            },
            {
                "name": "loadConfig",
                "isSink": "no"
            },
            {
                "name": "put",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "GOOD_SecurityException.java",
        "variables": [
            {
                "name": "e",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "requestData",
                "isSensitive": "yes",
                "graph": []
            }
        ],
        "strings": [
            {
                "name": "Request data cannot be null.",
                "isSensitive": "no"
            },
            {
                "name": "Error processing request.",
                "isSensitive": "no"
            }
        ],
        "comments": [
            {
                "name": "Process the request",
                "isSensitive": "no"
            }
        ],
        "sinks": []
    },
    {
        "fileName": "GOOD_SensitiveConcurrentModificationHandling.java",
        "variables": [
            {
                "name": "args",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "item",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "changesList",
                        "type": "ArrayList",
                        "context": "        List<String> changesList = new ArrayList<>(Arrays.asList(\"EmeraldIsle77\", \"GalacticVoyager42\", \"confidentialInfo\"));\r\n        try {\r\n            for (String item : changesList) {\r\n                if (item.equals(\"EmeraldIsle77\")) {\r\n                    // Modifying the list during iteration, which is not allowed\r\n |         List<String> changesList = new ArrayList<>(Arrays.asList(\"EmeraldIsle77\", \"GalacticVoyager42\", \"confidentialInfo\"));\r\n        try {\r\n            for (String item : changesList) {\r\n                if (item.equals(\"EmeraldIsle77\")) {\r\n                    // Modifying the list during iteration, which is not allowed\r\n",
                        "nextNode": "item"
                    },
                    {
                        "name": "item",
                        "type": "Dataflow from `changesList` to `item`\nDataflow from `new ArrayList<String>(...)` to `item`\nDataflow from `asList(...)` to `item`\nDataflow from `\"EmeraldIsle77\"` to `item`\nDataflow from `\"GalacticVoyager42\"` to `item`\nDataflow from `\"confidentialInfo\"` to `item`",
                        "context": "        try {\r\n            for (String item : changesList) {\r\n                if (item.equals(\"EmeraldIsle77\")) {\r\n                    // Modifying the list during iteration, which is not allowed\r\n                    changesList.remove(item);\r\n |         try {\r\n            for (String item : changesList) {\r\n                if (item.equals(\"EmeraldIsle77\")) {\r\n                    // Modifying the list during iteration, which is not allowed\r\n                    changesList.remove(item);\r\n |                 if (item.equals(\"EmeraldIsle77\")) {\r\n                    // Modifying the list during iteration, which is not allowed\r\n                    changesList.remove(item);\r\n                }\r\n            }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "e",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "changesList",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "new ArrayList<>(Arrays.asList(\"EmeraldIsle77\", \"GalacticVoyager42\", \"confidentialInfo\")",
                        "type": "ArrayList",
                        "context": "public class GOOD_SensitiveConcurrentModificationHandling {\r\n    public static void main(String[] args) {\r\n        List<String> changesList = new ArrayList<>(Arrays.asList(\"EmeraldIsle77\", \"GalacticVoyager42\", \"confidentialInfo\"));\r\n        try {\r\n            for (String item : changesList) {\r\n | public class GOOD_SensitiveConcurrentModificationHandling {\r\n    public static void main(String[] args) {\r\n        List<String> changesList = new ArrayList<>(Arrays.asList(\"EmeraldIsle77\", \"GalacticVoyager42\", \"confidentialInfo\"));\r\n        try {\r\n            for (String item : changesList) {\r\n",
                        "nextNode": "changesList"
                    },
                    {
                        "name": "changesList",
                        "type": "Dataflow from `new ArrayList<String>(...)` to `changesList`\nDataflow from `asList(...)` to `changesList`\nDataflow from `\"EmeraldIsle77\"` to `changesList`\nDataflow from `\"GalacticVoyager42\"` to `changesList`\nDataflow from `\"confidentialInfo\"` to `changesList`",
                        "context": "        List<String> changesList = new ArrayList<>(Arrays.asList(\"EmeraldIsle77\", \"GalacticVoyager42\", \"confidentialInfo\"));\r\n        try {\r\n            for (String item : changesList) {\r\n                if (item.equals(\"EmeraldIsle77\")) {\r\n                    // Modifying the list during iteration, which is not allowed\r\n |         List<String> changesList = new ArrayList<>(Arrays.asList(\"EmeraldIsle77\", \"GalacticVoyager42\", \"confidentialInfo\"));\r\n        try {\r\n            for (String item : changesList) {\r\n                if (item.equals(\"EmeraldIsle77\")) {\r\n                    // Modifying the list during iteration, which is not allowed\r\n |                 if (item.equals(\"EmeraldIsle77\")) {\r\n                    // Modifying the list during iteration, which is not allowed\r\n                    changesList.remove(item);\r\n                }\r\n            }\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "confidentialInfo",
                "isSensitive": "yes"
            },
            {
                "name": "Modification error during iteration.",
                "isSensitive": "no"
            },
            {
                "name": "GalacticVoyager42",
                "isSensitive": "yes"
            },
            {
                "name": "EmeraldIsle77",
                "isSensitive": "yes"
            }
        ],
        "comments": [
            {
                "name": "Modifying the list during iteration, which is not allowed",
                "isSensitive": "no"
            }
        ],
        "sinks": [
            {
                "name": "println",
                "isSink": "yes"
            },
            {
                "name": "equals",
                "isSink": "no"
            },
            {
                "name": "asList",
                "isSink": "no"
            },
            {
                "name": "remove",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "GOOD_SensitiveNullPointerExceptionHandling.java",
        "variables": [
            {
                "name": "request",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "creditCardPin",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "getSecretKey()",
                        "type": "String",
                        "context": "        try {\r\n            // Simulate retrieving a secret key from a method that returns null\r\n            creditCardPin = getSecretKey();\r\n            // Attempting to use the secret key which is null\r\n            int length = creditCardPin.length(); // This will throw NullPointerException\r\n",
                        "nextNode": "creditCardPin"
                    },
                    {
                        "name": "creditCardPin",
                        "type": "Dataflow from `getSecretKey(...)` to `creditCardPin`\nDataflow from `null` to `creditCardPin`",
                        "context": "            creditCardPin = getSecretKey();\r\n            // Attempting to use the secret key which is null\r\n            int length = creditCardPin.length(); // This will throw NullPointerException\r\n        } catch (NullPointerException e) {\r\n            response.sendError(HttpServletResponse.SC_BAD_REQUEST, \"Failed to handle secret key properly.\");\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "e",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "response",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "length",
                "isSensitive": "yes",
                "graph": []
            }
        ],
        "strings": [
            {
                "name": "Failed to handle secret key properly.",
                "isSensitive": "no"
            }
        ],
        "comments": [
            {
                "name": "Simulate a failure in secret key retrieval",
                "isSensitive": "no"
            },
            {
                "name": "Attempting to use the secret key which is null",
                "isSensitive": "no"
            },
            {
                "name": "Simulate retrieving a secret key from a method that returns null",
                "isSensitive": "no"
            },
            {
                "name": "This will throw NullPointerException",
                "isSensitive": "no"
            }
        ],
        "sinks": [
            {
                "name": "getSecretKey",
                "isSink": "no"
            },
            {
                "name": "sendError",
                "isSink": "yes"
            },
            {
                "name": "length",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "GOOD_SensitiveTypeNotPresentExceptionHandling.java",
        "variables": [
            {
                "name": "args",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "e",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "sensitiveClass",
                "isSensitive": "yes",
                "graph": []
            }
        ],
        "strings": [
            {
                "name": "Class not found",
                "isSensitive": "no"
            },
            {
                "name": "com.secret.config.SensitiveConfiguration",
                "isSensitive": "no"
            },
            {
                "name": "Failed to find required class",
                "isSensitive": "no"
            }
        ],
        "comments": [
            {
                "name": "Attempting to access a type by its name which might not be present",
                "isSensitive": "no"
            }
        ],
        "sinks": [
            {
                "name": "println",
                "isSink": "yes"
            },
            {
                "name": "forName",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "BAD_TempDirUsageVulnerable.java",
        "variables": [
            {
                "name": "tempDirChildDir",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "new File(System.getProperty(\"java.io.tmpdir\"), \"/child-dir\")",
                        "type": "File",
                        "context": "        Files.createFile(tempDirChildFile.toPath());\r\n\r\n        File tempDirChildDir = new File(System.getProperty(\"java.io.tmpdir\"), \"/child-dir\");\r\n        tempDirChildDir.mkdir(); \r\n        Files.createDirectory(tempDirChildDir.toPath()); \r\n |         Files.createFile(tempDirChildFile.toPath());\r\n\r\n        File tempDirChildDir = new File(System.getProperty(\"java.io.tmpdir\"), \"/child-dir\");\r\n        tempDirChildDir.mkdir(); \r\n        Files.createDirectory(tempDirChildDir.toPath()); \r\n",
                        "nextNode": "tempDirChildDir"
                    },
                    {
                        "name": "tempDirChildDir",
                        "type": "Dataflow from `new File(...)` to `tempDirChildDir`\nDataflow from `getProperty(...)` to `tempDirChildDir`\nDataflow from `\"/child-dir\"` to `tempDirChildDir`\nDataflow from `\"java.io.tmpdir\"` to `tempDirChildDir`",
                        "context": "\r\n        File tempDirChildDir = new File(System.getProperty(\"java.io.tmpdir\"), \"/child-dir\");\r\n        tempDirChildDir.mkdir(); \r\n        Files.createDirectory(tempDirChildDir.toPath()); \r\n    }\r\n | \r\n        File tempDirChildDir = new File(System.getProperty(\"java.io.tmpdir\"), \"/child-dir\");\r\n        tempDirChildDir.mkdir(); \r\n        Files.createDirectory(tempDirChildDir.toPath()); \r\n    }\r\n |         File tempDirChildDir = new File(System.getProperty(\"java.io.tmpdir\"), \"/child-dir\");\r\n        tempDirChildDir.mkdir(); \r\n        Files.createDirectory(tempDirChildDir.toPath()); \r\n    }\r\n}\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "tempDirChildFile",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "new File(System.getProperty(\"java.io.tmpdir\"), \"/child-create-file.txt\")",
                        "type": "File",
                        "context": "\r\n        new File(System.getProperty(\"java.io.tmpdir\"), \"/child\").mkdir(); \r\n        File tempDirChildFile = new File(System.getProperty(\"java.io.tmpdir\"), \"/child-create-file.txt\");\r\n        Files.createFile(tempDirChildFile.toPath());\r\n\r\n",
                        "nextNode": "tempDirChildFile"
                    },
                    {
                        "name": "tempDirChildFile",
                        "type": "Dataflow from `new File(...)` to `tempDirChildFile`\nDataflow from `getProperty(...)` to `tempDirChildFile`\nDataflow from `\"/child-create-file.txt\"` to `tempDirChildFile`\nDataflow from `\"java.io.tmpdir\"` to `tempDirChildFile`",
                        "context": "        new File(System.getProperty(\"java.io.tmpdir\"), \"/child\").mkdir(); \r\n        File tempDirChildFile = new File(System.getProperty(\"java.io.tmpdir\"), \"/child-create-file.txt\");\r\n        Files.createFile(tempDirChildFile.toPath());\r\n\r\n        File tempDirChildDir = new File(System.getProperty(\"java.io.tmpdir\"), \"/child-dir\");\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "systemTempDir",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "new File(System.getProperty(\"java.io.tmpdir\")",
                        "type": "File",
                        "context": "        File temp2 = File.createTempFile(\"random\", \"file\", null); \r\n\r\n        File systemTempDir = new File(System.getProperty(\"java.io.tmpdir\"));\r\n        File temp3 = File.createTempFile(\"random\", \"file\", systemTempDir); \r\n\r\n",
                        "nextNode": "systemTempDir"
                    },
                    {
                        "name": "systemTempDir",
                        "type": "Dataflow from `new File(...)` to `systemTempDir`\nDataflow from `getProperty(...)` to `systemTempDir`\nDataflow from `\"java.io.tmpdir\"` to `systemTempDir`",
                        "context": "\r\n        File systemTempDir = new File(System.getProperty(\"java.io.tmpdir\"));\r\n        File temp3 = File.createTempFile(\"random\", \"file\", systemTempDir); \r\n\r\n        new File(System.getProperty(\"java.io.tmpdir\"), \"/child\").mkdir(); \r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "temp2",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "temp3",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "temp1",
                "isSensitive": "yes",
                "graph": []
            }
        ],
        "strings": [
            {
                "name": "/child-dir",
                "isSensitive": "no"
            },
            {
                "name": "random",
                "isSensitive": "no"
            },
            {
                "name": "java.io.tmpdir",
                "isSensitive": "no"
            },
            {
                "name": "file",
                "isSensitive": "no"
            },
            {
                "name": ".txt",
                "isSensitive": "no"
            },
            {
                "name": "/child-create-file.txt",
                "isSensitive": "no"
            },
            {
                "name": "/child",
                "isSensitive": "no"
            }
        ],
        "comments": [],
        "sinks": [
            {
                "name": "getProperty",
                "isSink": "no"
            },
            {
                "name": "toPath",
                "isSink": "no"
            },
            {
                "name": "createTempFile",
                "isSink": "yes"
            },
            {
                "name": "createDirectory",
                "isSink": "yes"
            },
            {
                "name": "mkdir",
                "isSink": "yes"
            },
            {
                "name": "createFile",
                "isSink": "yes"
            }
        ]
    },
    {
        "fileName": "GOOD_TempDirUsageSafe.java",
        "variables": [
            {
                "name": "exception",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "tempDirChildDir",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "new File(System.getProperty(\"java.io.tmpdir\"), \"/child-dir\")",
                        "type": "File",
                        "context": "\r\n    void exampleSafeWithWindowsSupportDirectory() {\r\n        File tempDirChildDir = new File(System.getProperty(\"java.io.tmpdir\"), \"/child-dir\");\r\n        createTempDirectories(tempDirChildDir.toPath()); \r\n    }\r\n",
                        "nextNode": "tempDirChildDir"
                    },
                    {
                        "name": "tempDirChildDir",
                        "type": "Dataflow from `new File(...)` to `tempDirChildDir`\nDataflow from `getProperty(...)` to `tempDirChildDir`\nDataflow from `\"/child-dir\"` to `tempDirChildDir`\nDataflow from `\"java.io.tmpdir\"` to `tempDirChildDir`",
                        "context": "    void exampleSafeWithWindowsSupportDirectory() {\r\n        File tempDirChildDir = new File(System.getProperty(\"java.io.tmpdir\"), \"/child-dir\");\r\n        createTempDirectories(tempDirChildDir.toPath()); \r\n    }\r\n\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "tempChildFile",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "new File(System.getProperty(\"java.io.tmpdir\"), \"/child-create-file.txt\")",
                        "type": "File",
                        "context": "\r\n        // Creating a temporary file with a non-randomly generated name\r\n        File tempChildFile = new File(System.getProperty(\"java.io.tmpdir\"), \"/child-create-file.txt\");\r\n        // Warning: This will fail on windows as it doesn't support PosixFilePermissions.\r\n        // See `exampleSafeWithWindowsSupportFile` if your code needs to support windows and unix-like systems.\r\n |     void exampleSafeWithWindowsSupportFile() {\r\n        // Creating a temporary file with a non-randomly generated name\r\n        File tempChildFile = new File(System.getProperty(\"java.io.tmpdir\"), \"/child-create-file.txt\");\r\n        createTempFile(tempChildFile.toPath()); \r\n    }\r\n",
                        "nextNode": "tempChildFile"
                    },
                    {
                        "name": "tempChildFile",
                        "type": "Dataflow from `new File(...)` to `tempChildFile`\nDataflow from `getProperty(...)` to `tempChildFile`\nDataflow from `\"/child-create-file.txt\"` to `tempChildFile`\nDataflow from `\"java.io.tmpdir\"` to `tempChildFile`",
                        "context": "        // See `exampleSafeWithWindowsSupportFile` if your code needs to support windows and unix-like systems.\r\n        Files.createFile(\r\n            tempChildFile.toPath(),\r\n            PosixFilePermissions.asFileAttribute(EnumSet.of(PosixFilePermission.OWNER_READ, PosixFilePermission.OWNER_WRITE))\r\n        ); \r\n |         // Creating a temporary file with a non-randomly generated name\r\n        File tempChildFile = new File(System.getProperty(\"java.io.tmpdir\"), \"/child-create-file.txt\");\r\n        createTempFile(tempChildFile.toPath()); \r\n    }\r\n\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "tempDirChild",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "tempChildFile",
                        "type": "File",
                        "context": "        // Creating a temporary file with a non-randomly generated name\r\n        File tempChildFile = new File(System.getProperty(\"java.io.tmpdir\"), \"/child-create-file.txt\");\r\n        createTempFile(tempChildFile.toPath()); \r\n    }\r\n\r\n |         // Creating a temporary file with a non-randomly generated name\r\n        File tempChildFile = new File(System.getProperty(\"java.io.tmpdir\"), \"/child-create-file.txt\");\r\n        createTempFile(tempChildFile.toPath()); \r\n    }\r\n\r\n |         // Creating a temporary file with a non-randomly generated name\r\n        File tempChildFile = new File(System.getProperty(\"java.io.tmpdir\"), \"/child-create-file.txt\");\r\n        createTempFile(tempChildFile.toPath()); \r\n    }\r\n\r\n |         // Creating a temporary file with a non-randomly generated name\r\n        File tempChildFile = new File(System.getProperty(\"java.io.tmpdir\"), \"/child-create-file.txt\");\r\n        createTempFile(tempChildFile.toPath()); \r\n    }\r\n\r\n |         // Creating a temporary file with a non-randomly generated name\r\n        File tempChildFile = new File(System.getProperty(\"java.io.tmpdir\"), \"/child-create-file.txt\");\r\n        createTempFile(tempChildFile.toPath()); \r\n    }\r\n\r\n |         // Creating a temporary file with a non-randomly generated name\r\n        File tempChildFile = new File(System.getProperty(\"java.io.tmpdir\"), \"/child-create-file.txt\");\r\n        createTempFile(tempChildFile.toPath()); \r\n    }\r\n\r\n",
                        "nextNode": "tempChildFile.toPath()"
                    },
                    {
                        "name": "tempChildFile.toPath()",
                        "type": "Path",
                        "context": "        // Creating a temporary file with a non-randomly generated name\r\n        File tempChildFile = new File(System.getProperty(\"java.io.tmpdir\"), \"/child-create-file.txt\");\r\n        createTempFile(tempChildFile.toPath()); \r\n    }\r\n\r\n |         // Creating a temporary file with a non-randomly generated name\r\n        File tempChildFile = new File(System.getProperty(\"java.io.tmpdir\"), \"/child-create-file.txt\");\r\n        createTempFile(tempChildFile.toPath()); \r\n    }\r\n\r\n |         // Creating a temporary file with a non-randomly generated name\r\n        File tempChildFile = new File(System.getProperty(\"java.io.tmpdir\"), \"/child-create-file.txt\");\r\n        createTempFile(tempChildFile.toPath()); \r\n    }\r\n\r\n |         // Creating a temporary file with a non-randomly generated name\r\n        File tempChildFile = new File(System.getProperty(\"java.io.tmpdir\"), \"/child-create-file.txt\");\r\n        createTempFile(tempChildFile.toPath()); \r\n    }\r\n\r\n |         // Creating a temporary file with a non-randomly generated name\r\n        File tempChildFile = new File(System.getProperty(\"java.io.tmpdir\"), \"/child-create-file.txt\");\r\n        createTempFile(tempChildFile.toPath()); \r\n    }\r\n\r\n |         // Creating a temporary file with a non-randomly generated name\r\n        File tempChildFile = new File(System.getProperty(\"java.io.tmpdir\"), \"/child-create-file.txt\");\r\n        createTempFile(tempChildFile.toPath()); \r\n    }\r\n\r\n",
                        "nextNode": "Path tempDirChild"
                    },
                    {
                        "name": "tempDirChildDir.toPath()",
                        "type": "Path",
                        "context": "    void exampleSafeWithWindowsSupportDirectory() {\r\n        File tempDirChildDir = new File(System.getProperty(\"java.io.tmpdir\"), \"/child-dir\");\r\n        createTempDirectories(tempDirChildDir.toPath()); \r\n    }\r\n\r\n |     void exampleSafeWithWindowsSupportDirectory() {\r\n        File tempDirChildDir = new File(System.getProperty(\"java.io.tmpdir\"), \"/child-dir\");\r\n        createTempDirectories(tempDirChildDir.toPath()); \r\n    }\r\n\r\n |     void exampleSafeWithWindowsSupportDirectory() {\r\n        File tempDirChildDir = new File(System.getProperty(\"java.io.tmpdir\"), \"/child-dir\");\r\n        createTempDirectories(tempDirChildDir.toPath()); \r\n    }\r\n\r\n |     void exampleSafeWithWindowsSupportDirectory() {\r\n        File tempDirChildDir = new File(System.getProperty(\"java.io.tmpdir\"), \"/child-dir\");\r\n        createTempDirectories(tempDirChildDir.toPath()); \r\n    }\r\n\r\n |     void exampleSafeWithWindowsSupportDirectory() {\r\n        File tempDirChildDir = new File(System.getProperty(\"java.io.tmpdir\"), \"/child-dir\");\r\n        createTempDirectories(tempDirChildDir.toPath()); \r\n    }\r\n\r\n |     void exampleSafeWithWindowsSupportDirectory() {\r\n        File tempDirChildDir = new File(System.getProperty(\"java.io.tmpdir\"), \"/child-dir\");\r\n        createTempDirectories(tempDirChildDir.toPath()); \r\n    }\r\n\r\n",
                        "nextNode": "Path tempDirChild"
                    },
                    {
                        "name": "Path tempDirChild",
                        "type": "Path",
                        "context": "    }\r\n\r\n    static void createTempFile(Path tempDirChild) {\r\n        try {\r\n            if (tempDirChild.getFileSystem().supportedFileAttributeViews().contains(\"posix\")) {\r\n |     }\r\n\r\n    static void createTempFile(Path tempDirChild) {\r\n        try {\r\n            if (tempDirChild.getFileSystem().supportedFileAttributeViews().contains(\"posix\")) {\r\n |     }\r\n\r\n    static void createTempFile(Path tempDirChild) {\r\n        try {\r\n            if (tempDirChild.getFileSystem().supportedFileAttributeViews().contains(\"posix\")) {\r\n |     }\r\n\r\n    static void createTempFile(Path tempDirChild) {\r\n        try {\r\n            if (tempDirChild.getFileSystem().supportedFileAttributeViews().contains(\"posix\")) {\r\n |     }\r\n\r\n    static void createTempFile(Path tempDirChild) {\r\n        try {\r\n            if (tempDirChild.getFileSystem().supportedFileAttributeViews().contains(\"posix\")) {\r\n |     }\r\n\r\n    static void createTempFile(Path tempDirChild) {\r\n        try {\r\n            if (tempDirChild.getFileSystem().supportedFileAttributeViews().contains(\"posix\")) {\r\n |     }\r\n\r\n    static void createTempDirectories(Path tempDirChild) {\r\n        try {\r\n            if (tempDirChild.getFileSystem().supportedFileAttributeViews().contains(\"posix\")) {\r\n |     }\r\n\r\n    static void createTempDirectories(Path tempDirChild) {\r\n        try {\r\n            if (tempDirChild.getFileSystem().supportedFileAttributeViews().contains(\"posix\")) {\r\n |     }\r\n\r\n    static void createTempDirectories(Path tempDirChild) {\r\n        try {\r\n            if (tempDirChild.getFileSystem().supportedFileAttributeViews().contains(\"posix\")) {\r\n |     }\r\n\r\n    static void createTempDirectories(Path tempDirChild) {\r\n        try {\r\n            if (tempDirChild.getFileSystem().supportedFileAttributeViews().contains(\"posix\")) {\r\n |     }\r\n\r\n    static void createTempDirectories(Path tempDirChild) {\r\n        try {\r\n            if (tempDirChild.getFileSystem().supportedFileAttributeViews().contains(\"posix\")) {\r\n |     }\r\n\r\n    static void createTempDirectories(Path tempDirChild) {\r\n        try {\r\n            if (tempDirChild.getFileSystem().supportedFileAttributeViews().contains(\"posix\")) {\r\n",
                        "nextNode": "tempDirChild"
                    },
                    {
                        "name": "tempDirChild",
                        "type": "Dataflow from `tempChildFile` to `tempDirChild`\nDataflow from `toPath(...)` to `tempDirChild`\nDataflow from `new File(...)` to `tempDirChild`\nDataflow from `getProperty(...)` to `tempDirChild`\nDataflow from `\"/child-create-file.txt\"` to `tempDirChild`\nDataflow from `\"java.io.tmpdir\"` to `tempDirChild`",
                        "context": "    static void createTempFile(Path tempDirChild) {\r\n        try {\r\n            if (tempDirChild.getFileSystem().supportedFileAttributeViews().contains(\"posix\")) {\r\n                // Explicit permissions setting is only required on unix-like systems because\r\n                // the temporary directory is shared between all users.\r\n |     static void createTempFile(Path tempDirChild) {\r\n        try {\r\n            if (tempDirChild.getFileSystem().supportedFileAttributeViews().contains(\"posix\")) {\r\n                // Explicit permissions setting is only required on unix-like systems because\r\n                // the temporary directory is shared between all users.\r\n |                             PosixFilePermission.OWNER_WRITE\r\n                        );\r\n                if (!Files.exists(tempDirChild)) {\r\n                    Files.createFile(\r\n                        tempDirChild,\r\n |     static void createTempFile(Path tempDirChild) {\r\n        try {\r\n            if (tempDirChild.getFileSystem().supportedFileAttributeViews().contains(\"posix\")) {\r\n                // Explicit permissions setting is only required on unix-like systems because\r\n                // the temporary directory is shared between all users.\r\n |                             PosixFilePermission.OWNER_WRITE\r\n                        );\r\n                if (!Files.exists(tempDirChild)) {\r\n                    Files.createFile(\r\n                        tempDirChild,\r\n |                 if (!Files.exists(tempDirChild)) {\r\n                    Files.createFile(\r\n                        tempDirChild,\r\n                        PosixFilePermissions.asFileAttribute(posixFilePermissions)\r\n                    ); \r\n |     static void createTempFile(Path tempDirChild) {\r\n        try {\r\n            if (tempDirChild.getFileSystem().supportedFileAttributeViews().contains(\"posix\")) {\r\n                // Explicit permissions setting is only required on unix-like systems because\r\n                // the temporary directory is shared between all users.\r\n |                             PosixFilePermission.OWNER_WRITE\r\n                        );\r\n                if (!Files.exists(tempDirChild)) {\r\n                    Files.createFile(\r\n                        tempDirChild,\r\n |                 } else {\r\n                    Files.setPosixFilePermissions(\r\n                            tempDirChild,\r\n                            posixFilePermissions\r\n                    ); \r\n |     static void createTempFile(Path tempDirChild) {\r\n        try {\r\n            if (tempDirChild.getFileSystem().supportedFileAttributeViews().contains(\"posix\")) {\r\n                // Explicit permissions setting is only required on unix-like systems because\r\n                // the temporary directory is shared between all users.\r\n |                     ); \r\n                }\r\n            } else if (!Files.exists(tempDirChild)) {\r\n                // On Windows, we still need to create the directory, when it doesn't already exist.\r\n                Files.createDirectory(tempDirChild); \r\n |     static void createTempFile(Path tempDirChild) {\r\n        try {\r\n            if (tempDirChild.getFileSystem().supportedFileAttributeViews().contains(\"posix\")) {\r\n                // Explicit permissions setting is only required on unix-like systems because\r\n                // the temporary directory is shared between all users.\r\n |                     ); \r\n                }\r\n            } else if (!Files.exists(tempDirChild)) {\r\n                // On Windows, we still need to create the directory, when it doesn't already exist.\r\n                Files.createDirectory(tempDirChild); \r\n |             } else if (!Files.exists(tempDirChild)) {\r\n                // On Windows, we still need to create the directory, when it doesn't already exist.\r\n                Files.createDirectory(tempDirChild); \r\n            }\r\n        } catch (IOException exception) {\r\n |     static void createTempDirectories(Path tempDirChild) {\r\n        try {\r\n            if (tempDirChild.getFileSystem().supportedFileAttributeViews().contains(\"posix\")) {\r\n                // Explicit permissions setting is only required on unix-like systems because\r\n                // the temporary directory is shared between all users.\r\n |     static void createTempDirectories(Path tempDirChild) {\r\n        try {\r\n            if (tempDirChild.getFileSystem().supportedFileAttributeViews().contains(\"posix\")) {\r\n                // Explicit permissions setting is only required on unix-like systems because\r\n                // the temporary directory is shared between all users.\r\n |                             PosixFilePermission.OWNER_EXECUTE\r\n                        );\r\n                if (!Files.exists(tempDirChild)) {\r\n                    Files.createDirectories(\r\n                        tempDirChild,\r\n |     static void createTempDirectories(Path tempDirChild) {\r\n        try {\r\n            if (tempDirChild.getFileSystem().supportedFileAttributeViews().contains(\"posix\")) {\r\n                // Explicit permissions setting is only required on unix-like systems because\r\n                // the temporary directory is shared between all users.\r\n |                             PosixFilePermission.OWNER_EXECUTE\r\n                        );\r\n                if (!Files.exists(tempDirChild)) {\r\n                    Files.createDirectories(\r\n                        tempDirChild,\r\n |                 if (!Files.exists(tempDirChild)) {\r\n                    Files.createDirectories(\r\n                        tempDirChild,\r\n                        PosixFilePermissions.asFileAttribute(posixFilePermissions)\r\n                    ); \r\n |     static void createTempDirectories(Path tempDirChild) {\r\n        try {\r\n            if (tempDirChild.getFileSystem().supportedFileAttributeViews().contains(\"posix\")) {\r\n                // Explicit permissions setting is only required on unix-like systems because\r\n                // the temporary directory is shared between all users.\r\n |                             PosixFilePermission.OWNER_EXECUTE\r\n                        );\r\n                if (!Files.exists(tempDirChild)) {\r\n                    Files.createDirectories(\r\n                        tempDirChild,\r\n |                 } else {\r\n                    Files.setPosixFilePermissions(\r\n                            tempDirChild,\r\n                            posixFilePermissions\r\n                    ); \r\n |     static void createTempDirectories(Path tempDirChild) {\r\n        try {\r\n            if (tempDirChild.getFileSystem().supportedFileAttributeViews().contains(\"posix\")) {\r\n                // Explicit permissions setting is only required on unix-like systems because\r\n                // the temporary directory is shared between all users.\r\n |                     ); \r\n                }\r\n            } else if (!Files.exists(tempDirChild)) {\r\n                // On Windows, we still need to create the directory, when it doesn't already exist.\r\n                Files.createDirectories(tempDirChild); \r\n |     static void createTempDirectories(Path tempDirChild) {\r\n        try {\r\n            if (tempDirChild.getFileSystem().supportedFileAttributeViews().contains(\"posix\")) {\r\n                // Explicit permissions setting is only required on unix-like systems because\r\n                // the temporary directory is shared between all users.\r\n |                     ); \r\n                }\r\n            } else if (!Files.exists(tempDirChild)) {\r\n                // On Windows, we still need to create the directory, when it doesn't already exist.\r\n                Files.createDirectories(tempDirChild); \r\n |             } else if (!Files.exists(tempDirChild)) {\r\n                // On Windows, we still need to create the directory, when it doesn't already exist.\r\n                Files.createDirectories(tempDirChild); \r\n            }\r\n        } catch (IOException exception) {\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "posixFilePermissions",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "PosixFilePermission.OWNER_READ",
                        "type": "PosixFilePermission",
                        "context": "                final EnumSet<PosixFilePermission> posixFilePermissions =\r\n                        EnumSet.of(\r\n                            PosixFilePermission.OWNER_READ,\r\n                            PosixFilePermission.OWNER_WRITE\r\n                        );\r\n |                 final EnumSet<PosixFilePermission> posixFilePermissions =\r\n                        EnumSet.of(\r\n                            PosixFilePermission.OWNER_READ,\r\n                            PosixFilePermission.OWNER_WRITE\r\n                        );\r\n |                 final EnumSet<PosixFilePermission> posixFilePermissions =\r\n                        EnumSet.of(\r\n                            PosixFilePermission.OWNER_READ,\r\n                            PosixFilePermission.OWNER_WRITE,\r\n                            PosixFilePermission.OWNER_EXECUTE\r\n |                 final EnumSet<PosixFilePermission> posixFilePermissions =\r\n                        EnumSet.of(\r\n                            PosixFilePermission.OWNER_READ,\r\n                            PosixFilePermission.OWNER_WRITE,\r\n                            PosixFilePermission.OWNER_EXECUTE\r\n",
                        "nextNode": "En"
                    },
                    {
                        "name": "En",
                        "type": "EnumSet",
                        "context": "                // This is not necessary on Windows, each user has their own temp directory\r\n                final EnumSet<PosixFilePermission> posixFilePermissions =\r\n                        EnumSet.of(\r\n                            PosixFilePermission.OWNER_READ,\r\n                            PosixFilePermission.OWNER_WRITE\r\n                        );\r\n                if (!Files.exists(tempDirChild)) {\r\n                    Files.createFile(\r\n |                 // This is not necessary on Windows, each user has their own temp directory\r\n                final EnumSet<PosixFilePermission> posixFilePermissions =\r\n                        EnumSet.of(\r\n                            PosixFilePermission.OWNER_READ,\r\n                            PosixFilePermission.OWNER_WRITE\r\n                        );\r\n                if (!Files.exists(tempDirChild)) {\r\n                    Files.createFile(\r\n |                 // This is not necessary on Windows, each user has their own temp directory\r\n                final EnumSet<PosixFilePermission> posixFilePermissions =\r\n                        EnumSet.of(\r\n                            PosixFilePermission.OWNER_READ,\r\n                            PosixFilePermission.OWNER_WRITE,\r\n                            PosixFilePermission.OWNER_EXECUTE\r\n                        );\r\n                if (!Files.exists(tempDirChild)) {\r\n                    Files.createDirectories(\r\n |                 // This is not necessary on Windows, each user has their own temp directory\r\n                final EnumSet<PosixFilePermission> posixFilePermissions =\r\n                        EnumSet.of(\r\n                            PosixFilePermission.OWNER_READ,\r\n                            PosixFilePermission.OWNER_WRITE,\r\n                            PosixFilePermission.OWNER_EXECUTE\r\n                        );\r\n                if (!Files.exists(tempDirChild)) {\r\n                    Files.createDirectories(\r\n",
                        "nextNode": "posixFilePermissions"
                    },
                    {
                        "name": "posixFilePermissions",
                        "type": "Dataflow from `PosixFilePermission.OWNER_READ` to `posixFilePermissions`\nDataflow from `PosixFilePermission.OWNER_WRITE` to `posixFilePermissions`\nDataflow from `of(...)` to `posixFilePermissions`",
                        "context": "                    Files.createFile(\r\n                        tempDirChild,\r\n                        PosixFilePermissions.asFileAttribute(posixFilePermissions)\r\n                    ); \r\n                } else {\r\n |                     Files.setPosixFilePermissions(\r\n                            tempDirChild,\r\n                            posixFilePermissions\r\n                    ); \r\n                }\r\n |                     Files.createDirectories(\r\n                        tempDirChild,\r\n                        PosixFilePermissions.asFileAttribute(posixFilePermissions)\r\n                    ); \r\n                } else {\r\n |                     Files.setPosixFilePermissions(\r\n                            tempDirChild,\r\n                            posixFilePermissions\r\n                    ); \r\n                }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "temp2",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "temp1",
                "isSensitive": "yes",
                "graph": []
            }
        ],
        "strings": [
            {
                "name": "random-directory",
                "isSensitive": "no"
            },
            {
                "name": "Failed to create temp file",
                "isSensitive": "no"
            },
            {
                "name": "/child-dir",
                "isSensitive": "no"
            },
            {
                "name": "random",
                "isSensitive": "no"
            },
            {
                "name": "java.io.tmpdir",
                "isSensitive": "no"
            },
            {
                "name": ".txt",
                "isSensitive": "no"
            },
            {
                "name": "/child-create-file.txt",
                "isSensitive": "yes"
            },
            {
                "name": "Failed to create temp dir",
                "isSensitive": "no"
            },
            {
                "name": "posix",
                "isSensitive": "no"
            }
        ],
        "comments": [
            {
                "name": "Warning: This will fail on windows as it doesn't support PosixFilePermissions.",
                "isSensitive": "no"
            },
            {
                "name": "Explicit permissions setting is only required on unix-like systems because",
                "isSensitive": "no"
            },
            {
                "name": "See `exampleSafeWithWindowsSupportFile` if your code needs to support windows and unix-like systems.",
                "isSensitive": "no"
            },
            {
                "name": "the temporary directory is shared between all users.",
                "isSensitive": "no"
            },
            {
                "name": "This is not necessary on Windows, each user has their own temp directory",
                "isSensitive": "no"
            },
            {
                "name": "Creating a temporary file with a non-randomly generated name",
                "isSensitive": "no"
            },
            {
                "name": "On Windows, we still need to create the directory, when it doesn't already exist.",
                "isSensitive": "no"
            },
            {
                "name": "* An example of a safe use of createFile or createDirectory if your code must support windows and unix-like systems.",
                "isSensitive": "no"
            }
        ],
        "sinks": [
            {
                "name": "createTempDirectories",
                "isSink": "no"
            },
            {
                "name": "getProperty",
                "isSink": "no"
            },
            {
                "name": "createTempDirectory",
                "isSink": "yes"
            },
            {
                "name": "supportedFileAttributeViews",
                "isSink": "no"
            },
            {
                "name": "createTempFile",
                "isSink": "yes"
            },
            {
                "name": "asFileAttribute",
                "isSink": "no"
            },
            {
                "name": "getFileSystem",
                "isSink": "no"
            },
            {
                "name": "createFile",
                "isSink": "yes"
            },
            {
                "name": "contains",
                "isSink": "no"
            },
            {
                "name": "toPath",
                "isSink": "no"
            },
            {
                "name": "setPosixFilePermissions",
                "isSink": "yes"
            },
            {
                "name": "of",
                "isSink": "no"
            },
            {
                "name": "exists",
                "isSink": "no"
            },
            {
                "name": "createDirectory",
                "isSink": "yes"
            },
            {
                "name": "createDirectories",
                "isSink": "yes"
            }
        ]
    },
    {
        "fileName": "BAD_ApiClient.java",
        "variables": [
            {
                "name": "conn",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "url.openConnection()",
                        "type": "URLConnection",
                        "context": "    public void sendData() throws Exception {\r\n        URL url = new URL(\"https://api.globexcorp.com/data\");\r\n        HttpURLConnection conn = (HttpURLConnection) url.openConnection();\r\n        conn.setRequestProperty(\"Authorization\", \"Bearer \" + API_KEY);\r\n        conn.setRequestMethod(\"GET\");\r\n |     public void sendData() throws Exception {\r\n        URL url = new URL(\"https://api.globexcorp.com/data\");\r\n        HttpURLConnection conn = (HttpURLConnection) url.openConnection();\r\n        conn.setRequestProperty(\"Authorization\", \"Bearer \" + API_KEY);\r\n        conn.setRequestMethod(\"GET\");\r\n",
                        "nextNode": "(HttpURLConnection) url.openConnection()"
                    },
                    {
                        "name": "(HttpURLConnection) url.openConnection()",
                        "type": "HttpURLConnection",
                        "context": "    public void sendData() throws Exception {\r\n        URL url = new URL(\"https://api.globexcorp.com/data\");\r\n        HttpURLConnection conn = (HttpURLConnection) url.openConnection();\r\n        conn.setRequestProperty(\"Authorization\", \"Bearer \" + API_KEY);\r\n        conn.setRequestMethod(\"GET\");\r\n |     public void sendData() throws Exception {\r\n        URL url = new URL(\"https://api.globexcorp.com/data\");\r\n        HttpURLConnection conn = (HttpURLConnection) url.openConnection();\r\n        conn.setRequestProperty(\"Authorization\", \"Bearer \" + API_KEY);\r\n        conn.setRequestMethod(\"GET\");\r\n",
                        "nextNode": "conn"
                    },
                    {
                        "name": "conn",
                        "type": "Dataflow from `openConnection(...)` to `conn`",
                        "context": "        URL url = new URL(\"https://api.globexcorp.com/data\");\r\n        HttpURLConnection conn = (HttpURLConnection) url.openConnection();\r\n        conn.setRequestProperty(\"Authorization\", \"Bearer \" + API_KEY);\r\n        conn.setRequestMethod(\"GET\");\r\n        // Process the response\r\n |         URL url = new URL(\"https://api.globexcorp.com/data\");\r\n        HttpURLConnection conn = (HttpURLConnection) url.openConnection();\r\n        conn.setRequestProperty(\"Authorization\", \"Bearer \" + API_KEY);\r\n        conn.setRequestMethod(\"GET\");\r\n        // Process the response\r\n |         HttpURLConnection conn = (HttpURLConnection) url.openConnection();\r\n        conn.setRequestProperty(\"Authorization\", \"Bearer \" + API_KEY);\r\n        conn.setRequestMethod(\"GET\");\r\n        // Process the response\r\n    }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "API_KEY",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "\"ZXY1234WVU5678QRST9012\"",
                        "type": "String",
                        "context": "\r\npublic class BAD_ApiClient {\r\n    private static final String API_KEY = \"ZXY1234WVU5678QRST9012\";  \r\n\r\n    public void sendData() throws Exception {\r\n",
                        "nextNode": "API_KEY"
                    },
                    {
                        "name": "API_KEY",
                        "type": "String",
                        "context": "\r\npublic class BAD_ApiClient {\r\n    private static final String API_KEY = \"ZXY1234WVU5678QRST9012\";  \r\n\r\n    public void sendData() throws Exception {\r\n |         URL url = new URL(\"https://api.globexcorp.com/data\");\r\n        HttpURLConnection conn = (HttpURLConnection) url.openConnection();\r\n        conn.setRequestProperty(\"Authorization\", \"Bearer \" + API_KEY);\r\n        conn.setRequestMethod(\"GET\");\r\n        // Process the response\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "url",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "new URL(\"https://api.globexcorp.com/data\")",
                        "type": "URL",
                        "context": "\r\n    public void sendData() throws Exception {\r\n        URL url = new URL(\"https://api.globexcorp.com/data\");\r\n        HttpURLConnection conn = (HttpURLConnection) url.openConnection();\r\n        conn.setRequestProperty(\"Authorization\", \"Bearer \" + API_KEY);\r\n",
                        "nextNode": "url"
                    },
                    {
                        "name": "url",
                        "type": "Dataflow from `new URL(...)` to `url`\nDataflow from `\"https://api.globexcorp.com/data\"` to `url`",
                        "context": "    public void sendData() throws Exception {\r\n        URL url = new URL(\"https://api.globexcorp.com/data\");\r\n        HttpURLConnection conn = (HttpURLConnection) url.openConnection();\r\n        conn.setRequestProperty(\"Authorization\", \"Bearer \" + API_KEY);\r\n        conn.setRequestMethod(\"GET\");\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "Authorization",
                "isSensitive": "no"
            },
            {
                "name": "ZXY1234WVU5678QRST9012",
                "isSensitive": "yes"
            },
            {
                "name": "GET",
                "isSensitive": "no"
            },
            {
                "name": "https://api.globexcorp.com/data",
                "isSensitive": "yes"
            },
            {
                "name": "Bearer",
                "isSensitive": "no"
            }
        ],
        "comments": [
            {
                "name": "Process the response",
                "isSensitive": "no"
            }
        ],
        "sinks": [
            {
                "name": "setRequestMethod",
                "isSink": "yes"
            },
            {
                "name": "setRequestProperty",
                "isSink": "yes"
            },
            {
                "name": "openConnection",
                "isSink": "yes"
            }
        ]
    },
    {
        "fileName": "BAD_ApiKeyEmbedded.java",
        "variables": [
            {
                "name": "args",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "conn",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "url.openConnection()",
                        "type": "URLConnection",
                        "context": "        try {\r\n            URL url = new URL(\"https://api.acmehealth.com/v1/patientdata?key=mnop3456qrst7890uvwx1234&api_key=\" + SERVICE_API_KEY);\r\n            HttpURLConnection conn = (HttpURLConnection) url.openConnection();\r\n            conn.setRequestMethod(\"GET\");\r\n\r\n |         try {\r\n            URL url = new URL(\"https://api.acmehealth.com/v1/patientdata?key=mnop3456qrst7890uvwx1234&api_key=\" + SERVICE_API_KEY);\r\n            HttpURLConnection conn = (HttpURLConnection) url.openConnection();\r\n            conn.setRequestMethod(\"GET\");\r\n\r\n",
                        "nextNode": "(HttpURLConnection) url.openConnection()"
                    },
                    {
                        "name": "(HttpURLConnection) url.openConnection()",
                        "type": "HttpURLConnection",
                        "context": "        try {\r\n            URL url = new URL(\"https://api.acmehealth.com/v1/patientdata?key=mnop3456qrst7890uvwx1234&api_key=\" + SERVICE_API_KEY);\r\n            HttpURLConnection conn = (HttpURLConnection) url.openConnection();\r\n            conn.setRequestMethod(\"GET\");\r\n\r\n |         try {\r\n            URL url = new URL(\"https://api.acmehealth.com/v1/patientdata?key=mnop3456qrst7890uvwx1234&api_key=\" + SERVICE_API_KEY);\r\n            HttpURLConnection conn = (HttpURLConnection) url.openConnection();\r\n            conn.setRequestMethod(\"GET\");\r\n\r\n",
                        "nextNode": "conn"
                    },
                    {
                        "name": "conn",
                        "type": "Dataflow from `openConnection(...)` to `conn`",
                        "context": "            URL url = new URL(\"https://api.acmehealth.com/v1/patientdata?key=mnop3456qrst7890uvwx1234&api_key=\" + SERVICE_API_KEY);\r\n            HttpURLConnection conn = (HttpURLConnection) url.openConnection();\r\n            conn.setRequestMethod(\"GET\");\r\n\r\n            // Check the HTTP response code, etc...\r\n |             URL url = new URL(\"https://api.acmehealth.com/v1/patientdata?key=mnop3456qrst7890uvwx1234&api_key=\" + SERVICE_API_KEY);\r\n            HttpURLConnection conn = (HttpURLConnection) url.openConnection();\r\n            conn.setRequestMethod(\"GET\");\r\n\r\n            // Check the HTTP response code, etc...\r\n | \r\n            // Check the HTTP response code, etc...\r\n            System.out.println(\"Response Code: \" + conn.getResponseCode());\r\n            // Further processing...\r\n        } catch (Exception e) {\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "e",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "SERVICE_API_KEY",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "\"ABCD1234EFGH5678\"",
                        "type": "String",
                        "context": "\r\npublic class BAD_ApiKeyEmbedded {\r\n    private static final String SERVICE_API_KEY = \"ABCD1234EFGH5678\";\r\n\r\n    public static void callExternalService() {\r\n",
                        "nextNode": "SERVICE_API_KEY"
                    },
                    {
                        "name": "SERVICE_API_KEY",
                        "type": "String",
                        "context": "\r\npublic class BAD_ApiKeyEmbedded {\r\n    private static final String SERVICE_API_KEY = \"ABCD1234EFGH5678\";\r\n\r\n    public static void callExternalService() {\r\n |     public static void callExternalService() {\r\n        try {\r\n            URL url = new URL(\"https://api.acmehealth.com/v1/patientdata?key=mnop3456qrst7890uvwx1234&api_key=\" + SERVICE_API_KEY);\r\n            HttpURLConnection conn = (HttpURLConnection) url.openConnection();\r\n            conn.setRequestMethod(\"GET\");\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "url",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "SERVICE_API_KEY",
                        "type": "String",
                        "context": "    public static void callExternalService() {\r\n        try {\r\n            URL url = new URL(\"https://api.acmehealth.com/v1/patientdata?key=mnop3456qrst7890uvwx1234&api_key=\" + SERVICE_API_KEY);\r\n            HttpURLConnection conn = (HttpURLConnection) url.openConnection();\r\n            conn.setRequestMethod(\"GET\");\r\n",
                        "nextNode": "\"https://api.acmehealth.com/v1/patientdata?key=mnop3456qrst7890uvwx1234&api_key=\" + SERVICE_API_KEY"
                    },
                    {
                        "name": "\"https://api.acmehealth.com/v1/patientdata?key=mnop3456qrst7890uvwx1234&api_key=\" + SERVICE_API_KEY",
                        "type": "String",
                        "context": "    public static void callExternalService() {\r\n        try {\r\n            URL url = new URL(\"https://api.acmehealth.com/v1/patientdata?key=mnop3456qrst7890uvwx1234&api_key=\" + SERVICE_API_KEY);\r\n            HttpURLConnection conn = (HttpURLConnection) url.openConnection();\r\n            conn.setRequestMethod(\"GET\");\r\n",
                        "nextNode": "new URL(\"https://api.acmehealth.com/v1/patientdata?key=mnop3456qrst7890uvwx1234&api_key=\" + SERVICE_API_KEY)"
                    },
                    {
                        "name": "new URL(\"https://api.acmehealth.com/v1/patientdata?key=mnop3456qrst7890uvwx1234&api_key=\" + SERVICE_API_KEY)",
                        "type": "URL",
                        "context": "    public static void callExternalService() {\r\n        try {\r\n            URL url = new URL(\"https://api.acmehealth.com/v1/patientdata?key=mnop3456qrst7890uvwx1234&api_key=\" + SERVICE_API_KEY);\r\n            HttpURLConnection conn = (HttpURLConnection) url.openConnection();\r\n            conn.setRequestMethod(\"GET\");\r\n",
                        "nextNode": "url"
                    },
                    {
                        "name": "url",
                        "type": "Dataflow from `SERVICE_API_KEY` to `url`\nDataflow from `new URL(...)` to `url`\nDataflow from `\"ABCD1234EFGH5678\"` to `url`\nDataflow from `\"https://api.acmehealth.com/v1/patientdata?key=mnop3456qrst7890uvwx1234&api_key=\"` to `url`",
                        "context": "        try {\r\n            URL url = new URL(\"https://api.acmehealth.com/v1/patientdata?key=mnop3456qrst7890uvwx1234&api_key=\" + SERVICE_API_KEY);\r\n            HttpURLConnection conn = (HttpURLConnection) url.openConnection();\r\n            conn.setRequestMethod(\"GET\");\r\n\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "https://api.acmehealth.com/v1/patientdata?key=mnop3456qrst7890uvwx1234&api_key=",
                "isSensitive": "yes"
            },
            {
                "name": "GET",
                "isSensitive": "no"
            },
            {
                "name": "ABCD1234EFGH5678",
                "isSensitive": "yes"
            },
            {
                "name": "Response Code:",
                "isSensitive": "no"
            }
        ],
        "comments": [
            {
                "name": "Further processing...",
                "isSensitive": "no"
            },
            {
                "name": "Check the HTTP response code, etc...",
                "isSensitive": "no"
            }
        ],
        "sinks": [
            {
                "name": "callExternalService",
                "isSink": "no"
            },
            {
                "name": "println",
                "isSink": "yes"
            },
            {
                "name": "setRequestMethod",
                "isSink": "yes"
            },
            {
                "name": "printStackTrace",
                "isSink": "yes"
            },
            {
                "name": "openConnection",
                "isSink": "yes"
            },
            {
                "name": "getResponseCode",
                "isSink": "yes"
            }
        ]
    },
    {
        "fileName": "BAD_AwsService.java",
        "variables": [
            {
                "name": "AWS_ACCESS_KEY",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "\"DesertRose56\"",
                        "type": "String",
                        "context": "public class BAD_AwsService {\r\n    private static final String AWS_ACCESS_KEY = \"DesertRose56\";\r\n\r\n    public void accessAwsService() {\r\n",
                        "nextNode": "AWS_ACCESS_KEY"
                    },
                    {
                        "name": "AWS_ACCESS_KEY",
                        "type": "String",
                        "context": "public class BAD_AwsService {\r\n    private static final String AWS_ACCESS_KEY = \"DesertRose56\";\r\n\r\n    public void accessAwsService() {\r\n | \r\n    public void accessAwsService() {\r\n        System.out.println(\"Accessing AWS with secret key: \" + AWS_ACCESS_KEY);\r\n    }\r\n}\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "DesertRose56",
                "isSensitive": "yes"
            },
            {
                "name": "Accessing AWS with secret key:",
                "isSensitive": "no"
            }
        ],
        "comments": [],
        "sinks": [
            {
                "name": "println",
                "isSink": "yes"
            }
        ]
    },
    {
        "fileName": "BAD_ClientCredentials.java",
        "variables": [
            {
                "name": "CLIENT_PASSWORD",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "\"ThunderStrike88\"",
                        "type": "String",
                        "context": "public class BAD_ClientCredentials {\r\n    public static final String CLIENT_ID = \"client-id-1234\";\r\n    public static final String CLIENT_PASSWORD = \"ThunderStrike88\";\r\n\r\n    public void authenticate() {\r\n",
                        "nextNode": "CLIENT_PASSWORD"
                    },
                    {
                        "name": "CLIENT_PASSWORD",
                        "type": "String",
                        "context": "public class BAD_ClientCredentials {\r\n    public static final String CLIENT_ID = \"client-id-1234\";\r\n    public static final String CLIENT_PASSWORD = \"ThunderStrike88\";\r\n\r\n    public void authenticate() {\r\n | \r\n    public void authenticate() {\r\n        System.out.println(\"Authenticating with client ID: \" + CLIENT_ID + \" and secret: \" + CLIENT_PASSWORD);\r\n    }\r\n}\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "CLIENT_ID",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "\"client-id-1234\"",
                        "type": "String",
                        "context": "public class BAD_ClientCredentials {\r\n    public static final String CLIENT_ID = \"client-id-1234\";\r\n    public static final String CLIENT_PASSWORD = \"ThunderStrike88\";\r\n\r\n",
                        "nextNode": "CLIENT_ID"
                    },
                    {
                        "name": "CLIENT_ID",
                        "type": "String",
                        "context": "public class BAD_ClientCredentials {\r\n    public static final String CLIENT_ID = \"client-id-1234\";\r\n    public static final String CLIENT_PASSWORD = \"ThunderStrike88\";\r\n\r\n | \r\n    public void authenticate() {\r\n        System.out.println(\"Authenticating with client ID: \" + CLIENT_ID + \" and secret: \" + CLIENT_PASSWORD);\r\n    }\r\n}\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "Authenticating with client ID:",
                "isSensitive": "no"
            },
            {
                "name": "and secret:",
                "isSensitive": "no"
            },
            {
                "name": "ThunderStrike88",
                "isSensitive": "yes"
            },
            {
                "name": "client-id-1234",
                "isSensitive": "yes"
            }
        ],
        "comments": [],
        "sinks": [
            {
                "name": "println",
                "isSink": "yes"
            }
        ]
    },
    {
        "fileName": "BAD_DatabaseAccess.java",
        "variables": [
            {
                "name": "CONNECTION_STRING",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "\"Server=db1.corporate.netDatabase=mainDBUser Id=dbadminPassword=Ultra789#\"",
                        "type": "String",
                        "context": "\r\npublic class BAD_DatabaseAccess {\r\n    private static final String CONNECTION_STRING = \"Server=db1.corporate.net;Database=mainDB;User Id=dbadmin;Password=Ultra789#\";\r\n\r\n    public Connection connectToDatabase() throws SQLException {\r\n",
                        "nextNode": "CONNECTION_STRING"
                    },
                    {
                        "name": "CONNECTION_STRING",
                        "type": "String",
                        "context": "\r\npublic class BAD_DatabaseAccess {\r\n    private static final String CONNECTION_STRING = \"Server=db1.corporate.net;Database=mainDB;User Id=dbadmin;Password=Ultra789#\";\r\n\r\n    public Connection connectToDatabase() throws SQLException {\r\n | \r\n    public Connection connectToDatabase() throws SQLException {\r\n        return DriverManager.getConnection(CONNECTION_STRING);\r\n    }\r\n}\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "Server=db1.corporate.net;Database=mainDB;User Id=dbadmin;Password=Ultra789#",
                "isSensitive": "no"
            }
        ],
        "comments": [],
        "sinks": [
            {
                "name": "getConnection",
                "isSink": "yes"
            }
        ]
    },
    {
        "fileName": "BAD_DatabaseConnector.java",
        "variables": [
            {
                "name": "DATABASE_URL",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "\"jdbc:mysql://db.productionserver.com:3306/myapp\"",
                        "type": "String",
                        "context": "\r\npublic class BAD_DatabaseConnector {\r\n    private static final String DATABASE_URL = \"jdbc:mysql://db.productionserver.com:3306/myapp\";\r\n    private static final String USERNAME = \"admin\";\r\n    private static final String PASSWORD = \"password123\";\r\n",
                        "nextNode": "DATABASE_URL"
                    },
                    {
                        "name": "DATABASE_URL",
                        "type": "String",
                        "context": "\r\npublic class BAD_DatabaseConnector {\r\n    private static final String DATABASE_URL = \"jdbc:mysql://db.productionserver.com:3306/myapp\";\r\n    private static final String USERNAME = \"admin\";\r\n    private static final String PASSWORD = \"password123\";\r\n | \r\n    public Connection connect() throws SQLException {\r\n        return DriverManager.getConnection(DATABASE_URL, USERNAME, PASSWORD);\r\n    }\r\n}\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "PASSWORD",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "\"password123\"",
                        "type": "String",
                        "context": "    private static final String DATABASE_URL = \"jdbc:mysql://db.productionserver.com:3306/myapp\";\r\n    private static final String USERNAME = \"admin\";\r\n    private static final String PASSWORD = \"password123\";\r\n\r\n    public Connection connect() throws SQLException {\r\n",
                        "nextNode": "PASSWORD"
                    },
                    {
                        "name": "PASSWORD",
                        "type": "String",
                        "context": "    private static final String DATABASE_URL = \"jdbc:mysql://db.productionserver.com:3306/myapp\";\r\n    private static final String USERNAME = \"admin\";\r\n    private static final String PASSWORD = \"password123\";\r\n\r\n    public Connection connect() throws SQLException {\r\n | \r\n    public Connection connect() throws SQLException {\r\n        return DriverManager.getConnection(DATABASE_URL, USERNAME, PASSWORD);\r\n    }\r\n}\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "USERNAME",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "\"admin\"",
                        "type": "String",
                        "context": "public class BAD_DatabaseConnector {\r\n    private static final String DATABASE_URL = \"jdbc:mysql://db.productionserver.com:3306/myapp\";\r\n    private static final String USERNAME = \"admin\";\r\n    private static final String PASSWORD = \"password123\";\r\n\r\n",
                        "nextNode": "USERNAME"
                    },
                    {
                        "name": "USERNAME",
                        "type": "String",
                        "context": "public class BAD_DatabaseConnector {\r\n    private static final String DATABASE_URL = \"jdbc:mysql://db.productionserver.com:3306/myapp\";\r\n    private static final String USERNAME = \"admin\";\r\n    private static final String PASSWORD = \"password123\";\r\n\r\n | \r\n    public Connection connect() throws SQLException {\r\n        return DriverManager.getConnection(DATABASE_URL, USERNAME, PASSWORD);\r\n    }\r\n}\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "admin",
                "isSensitive": "yes"
            },
            {
                "name": "password123",
                "isSensitive": "yes"
            },
            {
                "name": "jdbc:mysql://db.productionserver.com:3306/myapp",
                "isSensitive": "no"
            }
        ],
        "comments": [],
        "sinks": [
            {
                "name": "getConnection",
                "isSink": "yes"
            }
        ]
    },
    {
        "fileName": "BAD_EncryptionUtil.java",
        "variables": [
            {
                "name": "keyBytes",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "PRIVATE_KEY",
                        "type": "String",
                        "context": "\r\n    public PrivateKey getPrivateKey() throws Exception {\r\n        byte[] keyBytes = Base64.getDecoder().decode(PRIVATE_KEY.getBytes());\r\n        PKCS8EncodedKeySpec spec = new PKCS8EncodedKeySpec(keyBytes);\r\n        KeyFactory kf = KeyFactory.getInstance(\"RSA\");\r\n",
                        "nextNode": "PRIVATE_KEY.getBytes()"
                    },
                    {
                        "name": "PRIVATE_KEY.getBytes()",
                        "type": "byte[]",
                        "context": "\r\n    public PrivateKey getPrivateKey() throws Exception {\r\n        byte[] keyBytes = Base64.getDecoder().decode(PRIVATE_KEY.getBytes());\r\n        PKCS8EncodedKeySpec spec = new PKCS8EncodedKeySpec(keyBytes);\r\n        KeyFactory kf = KeyFactory.getInstance(\"RSA\");\r\n",
                        "nextNode": "Base64.getDecoder().decode(PRIVATE_KEY.getBytes()"
                    },
                    {
                        "name": "Base64.getDecoder().decode(PRIVATE_KEY.getBytes()",
                        "type": "byte[]",
                        "context": "\r\n    public PrivateKey getPrivateKey() throws Exception {\r\n        byte[] keyBytes = Base64.getDecoder().decode(PRIVATE_KEY.getBytes());\r\n        PKCS8EncodedKeySpec spec = new PKCS8EncodedKeySpec(keyBytes);\r\n        KeyFactory kf = KeyFactory.getInstance(\"RSA\");\r\n",
                        "nextNode": "keyBytes"
                    },
                    {
                        "name": "keyBytes",
                        "type": "Dataflow from `PRIVATE_KEY` to `keyBytes`\nDataflow from `getBytes(...)` to `keyBytes`\nDataflow from `decode(...)` to `keyBytes`\nDataflow from `\"-----BEGIN PRIVATE KEY-----MIICeAIBADANBgkqhkiG9w0BAQEFAASC... -----END PRIVATE KEY-----\"` to `keyBytes`",
                        "context": "    public PrivateKey getPrivateKey() throws Exception {\r\n        byte[] keyBytes = Base64.getDecoder().decode(PRIVATE_KEY.getBytes());\r\n        PKCS8EncodedKeySpec spec = new PKCS8EncodedKeySpec(keyBytes);\r\n        KeyFactory kf = KeyFactory.getInstance(\"RSA\");\r\n        return kf.generatePrivate(spec);\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "PRIVATE_KEY",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "\"-----BEGIN PRIVATE KEY-----MIICeAIBADANBgkqhkiG9w0BAQEFAASC... -----END PRIVATE KEY-----\"",
                        "type": "String",
                        "context": "\r\npublic class BAD_EncryptionUtil {\r\n    private static final String PRIVATE_KEY = \"-----BEGIN PRIVATE KEY-----MIICeAIBADANBgkqhkiG9w0BAQEFAASC... -----END PRIVATE KEY-----\"; \r\n\r\n    public PrivateKey getPrivateKey() throws Exception {\r\n",
                        "nextNode": "PRIVATE_KEY"
                    },
                    {
                        "name": "PRIVATE_KEY",
                        "type": "String",
                        "context": "\r\npublic class BAD_EncryptionUtil {\r\n    private static final String PRIVATE_KEY = \"-----BEGIN PRIVATE KEY-----MIICeAIBADANBgkqhkiG9w0BAQEFAASC... -----END PRIVATE KEY-----\"; \r\n\r\n    public PrivateKey getPrivateKey() throws Exception {\r\n | \r\n    public PrivateKey getPrivateKey() throws Exception {\r\n        byte[] keyBytes = Base64.getDecoder().decode(PRIVATE_KEY.getBytes());\r\n        PKCS8EncodedKeySpec spec = new PKCS8EncodedKeySpec(keyBytes);\r\n        KeyFactory kf = KeyFactory.getInstance(\"RSA\");\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "kf",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "KeyFactory.getInstance(\"RSA\")",
                        "type": "KeyFactory",
                        "context": "        byte[] keyBytes = Base64.getDecoder().decode(PRIVATE_KEY.getBytes());\r\n        PKCS8EncodedKeySpec spec = new PKCS8EncodedKeySpec(keyBytes);\r\n        KeyFactory kf = KeyFactory.getInstance(\"RSA\");\r\n        return kf.generatePrivate(spec);\r\n    }\r\n",
                        "nextNode": "kf"
                    },
                    {
                        "name": "kf",
                        "type": "Dataflow from `getInstance(...)` to `kf`\nDataflow from `\"RSA\"` to `kf`",
                        "context": "        PKCS8EncodedKeySpec spec = new PKCS8EncodedKeySpec(keyBytes);\r\n        KeyFactory kf = KeyFactory.getInstance(\"RSA\");\r\n        return kf.generatePrivate(spec);\r\n    }\r\n}\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "spec",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "PRIVATE_KEY",
                        "type": "String",
                        "context": "\r\n    public PrivateKey getPrivateKey() throws Exception {\r\n        byte[] keyBytes = Base64.getDecoder().decode(PRIVATE_KEY.getBytes());\r\n        PKCS8EncodedKeySpec spec = new PKCS8EncodedKeySpec(keyBytes);\r\n        KeyFactory kf = KeyFactory.getInstance(\"RSA\");\r\n",
                        "nextNode": "PRIVATE_KEY.getBytes()"
                    },
                    {
                        "name": "PRIVATE_KEY.getBytes()",
                        "type": "byte[]",
                        "context": "\r\n    public PrivateKey getPrivateKey() throws Exception {\r\n        byte[] keyBytes = Base64.getDecoder().decode(PRIVATE_KEY.getBytes());\r\n        PKCS8EncodedKeySpec spec = new PKCS8EncodedKeySpec(keyBytes);\r\n        KeyFactory kf = KeyFactory.getInstance(\"RSA\");\r\n",
                        "nextNode": "Base64.getDecoder().decode(PRIVATE_KEY.getBytes()"
                    },
                    {
                        "name": "Base64.getDecoder().decode(PRIVATE_KEY.getBytes()",
                        "type": "byte[]",
                        "context": "\r\n    public PrivateKey getPrivateKey() throws Exception {\r\n        byte[] keyBytes = Base64.getDecoder().decode(PRIVATE_KEY.getBytes());\r\n        PKCS8EncodedKeySpec spec = new PKCS8EncodedKeySpec(keyBytes);\r\n        KeyFactory kf = KeyFactory.getInstance(\"RSA\");\r\n",
                        "nextNode": "keyBytes"
                    },
                    {
                        "name": "keyBytes",
                        "type": "byte[]",
                        "context": "    public PrivateKey getPrivateKey() throws Exception {\r\n        byte[] keyBytes = Base64.getDecoder().decode(PRIVATE_KEY.getBytes());\r\n        PKCS8EncodedKeySpec spec = new PKCS8EncodedKeySpec(keyBytes);\r\n        KeyFactory kf = KeyFactory.getInstance(\"RSA\");\r\n        return kf.generatePrivate(spec);\r\n",
                        "nextNode": "new PKCS8EncodedKeySpec(keyBytes)"
                    },
                    {
                        "name": "new PKCS8EncodedKeySpec(keyBytes)",
                        "type": "PKCS8EncodedKeySpec",
                        "context": "    public PrivateKey getPrivateKey() throws Exception {\r\n        byte[] keyBytes = Base64.getDecoder().decode(PRIVATE_KEY.getBytes());\r\n        PKCS8EncodedKeySpec spec = new PKCS8EncodedKeySpec(keyBytes);\r\n        KeyFactory kf = KeyFactory.getInstance(\"RSA\");\r\n        return kf.generatePrivate(spec);\r\n",
                        "nextNode": "spec"
                    },
                    {
                        "name": "spec",
                        "type": "Dataflow from `PRIVATE_KEY` to `spec`\nDataflow from `keyBytes` to `spec`\nDataflow from `getBytes(...)` to `spec`\nDataflow from `decode(...)` to `spec`\nDataflow from `\"-----BEGIN PRIVATE KEY-----MIICeAIBADANBgkqhkiG9w0BAQEFAASC... -----END PRIVATE KEY-----\"` to `spec`\nDataflow from `new PKCS8EncodedKeySpec(...)` to `spec`",
                        "context": "        PKCS8EncodedKeySpec spec = new PKCS8EncodedKeySpec(keyBytes);\r\n        KeyFactory kf = KeyFactory.getInstance(\"RSA\");\r\n        return kf.generatePrivate(spec);\r\n    }\r\n}\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "RSA",
                "isSensitive": "no"
            },
            {
                "name": "-----BEGIN PRIVATE KEY-----MIICeAIBADANBgkqhkiG9w0BAQEFAASC... -----END PRIVATE KEY-----",
                "isSensitive": "no"
            }
        ],
        "comments": [],
        "sinks": [
            {
                "name": "getDecoder",
                "isSink": "no"
            },
            {
                "name": "generatePrivate",
                "isSink": "no"
            },
            {
                "name": "getInstance",
                "isSink": "no"
            },
            {
                "name": "decode",
                "isSink": "no"
            },
            {
                "name": "getBytes",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "BAD_HardcodedCredentials.java",
        "variables": [
            {
                "name": "args",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "DATABASE_URL",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "\"jdbc:mysql://localhost:3306/myapp\"",
                        "type": "String",
                        "context": "public class BAD_HardcodedCredentials {\r\n    // Sensitive information hardcoded directly in the source code\r\n    private static final String DATABASE_URL = \"jdbc:mysql://localhost:3306/myapp\";\r\n    private static final String DATABASE_USER = \"admin\";\r\n    private static final String DATABASE_PASSWORD = \"password123\";\r\n",
                        "nextNode": "DATABASE_URL"
                    },
                    {
                        "name": "DATABASE_URL",
                        "type": "String",
                        "context": "public class BAD_HardcodedCredentials {\r\n    // Sensitive information hardcoded directly in the source code\r\n    private static final String DATABASE_URL = \"jdbc:mysql://localhost:3306/myapp\";\r\n    private static final String DATABASE_USER = \"admin\";\r\n    private static final String DATABASE_PASSWORD = \"password123\";\r\n | \r\n    public static Connection getConnection() throws SQLException {\r\n        return DriverManager.getConnection(DATABASE_URL, DATABASE_USER, DATABASE_PASSWORD);\r\n    }\r\n\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "e",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "connection",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "DATABASE_USER",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "\"admin\"",
                        "type": "String",
                        "context": "    // Sensitive information hardcoded directly in the source code\r\n    private static final String DATABASE_URL = \"jdbc:mysql://localhost:3306/myapp\";\r\n    private static final String DATABASE_USER = \"admin\";\r\n    private static final String DATABASE_PASSWORD = \"password123\";\r\n\r\n",
                        "nextNode": "DATABASE_USER"
                    },
                    {
                        "name": "DATABASE_USER",
                        "type": "String",
                        "context": "    // Sensitive information hardcoded directly in the source code\r\n    private static final String DATABASE_URL = \"jdbc:mysql://localhost:3306/myapp\";\r\n    private static final String DATABASE_USER = \"admin\";\r\n    private static final String DATABASE_PASSWORD = \"password123\";\r\n\r\n | \r\n    public static Connection getConnection() throws SQLException {\r\n        return DriverManager.getConnection(DATABASE_URL, DATABASE_USER, DATABASE_PASSWORD);\r\n    }\r\n\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "DATABASE_PASSWORD",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "\"password123\"",
                        "type": "String",
                        "context": "    private static final String DATABASE_URL = \"jdbc:mysql://localhost:3306/myapp\";\r\n    private static final String DATABASE_USER = \"admin\";\r\n    private static final String DATABASE_PASSWORD = \"password123\";\r\n\r\n    public static Connection getConnection() throws SQLException {\r\n",
                        "nextNode": "DATABASE_PASSWORD"
                    },
                    {
                        "name": "DATABASE_PASSWORD",
                        "type": "String",
                        "context": "    private static final String DATABASE_URL = \"jdbc:mysql://localhost:3306/myapp\";\r\n    private static final String DATABASE_USER = \"admin\";\r\n    private static final String DATABASE_PASSWORD = \"password123\";\r\n\r\n    public static Connection getConnection() throws SQLException {\r\n | \r\n    public static Connection getConnection() throws SQLException {\r\n        return DriverManager.getConnection(DATABASE_URL, DATABASE_USER, DATABASE_PASSWORD);\r\n    }\r\n\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "jdbc:mysql://localhost:3306/myapp",
                "isSensitive": "yes"
            },
            {
                "name": "Connected to the database successfully.",
                "isSensitive": "no"
            },
            {
                "name": "admin",
                "isSensitive": "yes"
            },
            {
                "name": "password123",
                "isSensitive": "yes"
            },
            {
                "name": "Database connection failed:",
                "isSensitive": "no"
            }
        ],
        "comments": [
            {
                "name": "Sensitive information hardcoded directly in the source code",
                "isSensitive": "no"
            },
            {
                "name": "Proceed with database operations...",
                "isSensitive": "no"
            }
        ],
        "sinks": [
            {
                "name": "getConnection",
                "isSink": "yes"
            },
            {
                "name": "println",
                "isSink": "yes"
            },
            {
                "name": "getMessage",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "BAD_HardcodedSecretInConfig.java",
        "variables": [
            {
                "name": "args",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "appConfig",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "new HashMap<>()",
                        "type": "HashMap",
                        "context": "\r\npublic class BAD_HardcodedSecretInConfig {\r\n    private static final Map<String, String> appConfig = new HashMap<>();\r\n\r\n    static {\r\n | \r\npublic class BAD_HardcodedSecretInConfig {\r\n    private static final Map<String, String> appConfig = new HashMap<>();\r\n\r\n    static {\r\n | \r\npublic class BAD_HardcodedSecretInConfig {\r\n    private static final Map<String, String> appConfig = new HashMap<>();\r\n\r\n    static {\r\n | \r\npublic class BAD_HardcodedSecretInConfig {\r\n    private static final Map<String, String> appConfig = new HashMap<>();\r\n\r\n    static {\r\n",
                        "nextNode": "appConfig"
                    },
                    {
                        "name": "appConfig",
                        "type": "Dataflow from `new HashMap<String,String>(...)` to `appConfig`",
                        "context": "\r\n    static {\r\n        appConfig.put(\"apiBaseUrl\", \"https://api.example.com\");\r\n        appConfig.put(\"apiKey\", \"key12345\");\r\n        appConfig.put(\"encryptionKey\", \"0123456789abcdef\"); \r\n | \r\n    static {\r\n        appConfig.put(\"apiBaseUrl\", \"https://api.example.com\");\r\n        appConfig.put(\"apiKey\", \"key12345\");\r\n        appConfig.put(\"encryptionKey\", \"0123456789abcdef\"); \r\n |     static {\r\n        appConfig.put(\"apiBaseUrl\", \"https://api.example.com\");\r\n        appConfig.put(\"apiKey\", \"key12345\");\r\n        appConfig.put(\"encryptionKey\", \"0123456789abcdef\"); \r\n    }\r\n | \r\n    static {\r\n        appConfig.put(\"apiBaseUrl\", \"https://api.example.com\");\r\n        appConfig.put(\"apiKey\", \"key12345\");\r\n        appConfig.put(\"encryptionKey\", \"0123456789abcdef\"); \r\n |     static {\r\n        appConfig.put(\"apiBaseUrl\", \"https://api.example.com\");\r\n        appConfig.put(\"apiKey\", \"key12345\");\r\n        appConfig.put(\"encryptionKey\", \"0123456789abcdef\"); \r\n    }\r\n |         appConfig.put(\"apiBaseUrl\", \"https://api.example.com\");\r\n        appConfig.put(\"apiKey\", \"key12345\");\r\n        appConfig.put(\"encryptionKey\", \"0123456789abcdef\"); \r\n    }\r\n\r\n | \r\npublic class BAD_HardcodedSecretInConfig {\r\n    private static final Map<String, String> appConfig = new HashMap<>();\r\n\r\n    static {\r\n |     public static void main(String[] args) {\r\n        // Application logic that uses appConfig for operations\r\n        System.out.println(\"API Base URL: \" + appConfig.get(\"apiBaseUrl\"));\r\n    }\r\n}\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "apiBaseUrl",
                "isSensitive": "no"
            },
            {
                "name": "API Base URL:",
                "isSensitive": "no"
            },
            {
                "name": "key12345",
                "isSensitive": "yes"
            },
            {
                "name": "apiKey",
                "isSensitive": "no"
            },
            {
                "name": "https://api.example.com",
                "isSensitive": "yes"
            },
            {
                "name": "encryptionKey",
                "isSensitive": "no"
            },
            {
                "name": "0123456789abcdef",
                "isSensitive": "yes"
            }
        ],
        "comments": [
            {
                "name": "Application logic that uses appConfig for operations",
                "isSensitive": "no"
            }
        ],
        "sinks": [
            {
                "name": "println",
                "isSink": "yes"
            },
            {
                "name": "get",
                "isSink": "no"
            },
            {
                "name": "put",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "BAD_SSHConnectionHandler.java",
        "variables": [
            {
                "name": "SSH_USER",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "\"admin\"",
                        "type": "String",
                        "context": "\r\npublic class BAD_SSHConnectionHandler {\r\n    private static final String SSH_USER = \"admin\";\r\n    private static final String SSH_PASSWORD = \"adminPass\";\r\n\r\n",
                        "nextNode": "SSH_USER"
                    },
                    {
                        "name": "SSH_USER",
                        "type": "String",
                        "context": "\r\npublic class BAD_SSHConnectionHandler {\r\n    private static final String SSH_USER = \"admin\";\r\n    private static final String SSH_PASSWORD = \"adminPass\";\r\n\r\n |     public Session createSSHSession(String host) throws Exception {\r\n        JSch jsch = new JSch();\r\n        Session session = jsch.getSession(SSH_USER, host, 22);\r\n        session.setPassword(SSH_PASSWORD);\r\n        session.setConfig(\"StrictHostKeyChecking\", \"no\");\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "session",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "SSH_USER",
                        "type": "String",
                        "context": "    public Session createSSHSession(String host) throws Exception {\r\n        JSch jsch = new JSch();\r\n        Session session = jsch.getSession(SSH_USER, host, 22);\r\n        session.setPassword(SSH_PASSWORD);\r\n        session.setConfig(\"StrictHostKeyChecking\", \"no\");\r\n |     public Session createSSHSession(String host) throws Exception {\r\n        JSch jsch = new JSch();\r\n        Session session = jsch.getSession(SSH_USER, host, 22);\r\n        session.setPassword(SSH_PASSWORD);\r\n        session.setConfig(\"StrictHostKeyChecking\", \"no\");\r\n |     public Session createSSHSession(String host) throws Exception {\r\n        JSch jsch = new JSch();\r\n        Session session = jsch.getSession(SSH_USER, host, 22);\r\n        session.setPassword(SSH_PASSWORD);\r\n        session.setConfig(\"StrictHostKeyChecking\", \"no\");\r\n |     public Session createSSHSession(String host) throws Exception {\r\n        JSch jsch = new JSch();\r\n        Session session = jsch.getSession(SSH_USER, host, 22);\r\n        session.setPassword(SSH_PASSWORD);\r\n        session.setConfig(\"StrictHostKeyChecking\", \"no\");\r\n",
                        "nextNode": "jsch.getSession(SSH_USER, host, 22)"
                    },
                    {
                        "name": "jsch.getSession(SSH_USER, host, 22)",
                        "type": "Session",
                        "context": "    public Session createSSHSession(String host) throws Exception {\r\n        JSch jsch = new JSch();\r\n        Session session = jsch.getSession(SSH_USER, host, 22);\r\n        session.setPassword(SSH_PASSWORD);\r\n        session.setConfig(\"StrictHostKeyChecking\", \"no\");\r\n |     public Session createSSHSession(String host) throws Exception {\r\n        JSch jsch = new JSch();\r\n        Session session = jsch.getSession(SSH_USER, host, 22);\r\n        session.setPassword(SSH_PASSWORD);\r\n        session.setConfig(\"StrictHostKeyChecking\", \"no\");\r\n |     public Session createSSHSession(String host) throws Exception {\r\n        JSch jsch = new JSch();\r\n        Session session = jsch.getSession(SSH_USER, host, 22);\r\n        session.setPassword(SSH_PASSWORD);\r\n        session.setConfig(\"StrictHostKeyChecking\", \"no\");\r\n |     public Session createSSHSession(String host) throws Exception {\r\n        JSch jsch = new JSch();\r\n        Session session = jsch.getSession(SSH_USER, host, 22);\r\n        session.setPassword(SSH_PASSWORD);\r\n        session.setConfig(\"StrictHostKeyChecking\", \"no\");\r\n",
                        "nextNode": "session"
                    },
                    {
                        "name": "session",
                        "type": "Dataflow from `SSH_USER` to `session`\nDataflow from `host` to `session`\nDataflow from `\"admin\"` to `session`\nDataflow from `getSession(...)` to `session`\nDataflow from `22` to `session`",
                        "context": "        JSch jsch = new JSch();\r\n        Session session = jsch.getSession(SSH_USER, host, 22);\r\n        session.setPassword(SSH_PASSWORD);\r\n        session.setConfig(\"StrictHostKeyChecking\", \"no\");\r\n        session.connect();\r\n |         JSch jsch = new JSch();\r\n        Session session = jsch.getSession(SSH_USER, host, 22);\r\n        session.setPassword(SSH_PASSWORD);\r\n        session.setConfig(\"StrictHostKeyChecking\", \"no\");\r\n        session.connect();\r\n |         Session session = jsch.getSession(SSH_USER, host, 22);\r\n        session.setPassword(SSH_PASSWORD);\r\n        session.setConfig(\"StrictHostKeyChecking\", \"no\");\r\n        session.connect();\r\n        return session;\r\n |         JSch jsch = new JSch();\r\n        Session session = jsch.getSession(SSH_USER, host, 22);\r\n        session.setPassword(SSH_PASSWORD);\r\n        session.setConfig(\"StrictHostKeyChecking\", \"no\");\r\n        session.connect();\r\n |         Session session = jsch.getSession(SSH_USER, host, 22);\r\n        session.setPassword(SSH_PASSWORD);\r\n        session.setConfig(\"StrictHostKeyChecking\", \"no\");\r\n        session.connect();\r\n        return session;\r\n |         session.setPassword(SSH_PASSWORD);\r\n        session.setConfig(\"StrictHostKeyChecking\", \"no\");\r\n        session.connect();\r\n        return session;\r\n    }\r\n |         JSch jsch = new JSch();\r\n        Session session = jsch.getSession(SSH_USER, host, 22);\r\n        session.setPassword(SSH_PASSWORD);\r\n        session.setConfig(\"StrictHostKeyChecking\", \"no\");\r\n        session.connect();\r\n |         Session session = jsch.getSession(SSH_USER, host, 22);\r\n        session.setPassword(SSH_PASSWORD);\r\n        session.setConfig(\"StrictHostKeyChecking\", \"no\");\r\n        session.connect();\r\n        return session;\r\n |         session.setPassword(SSH_PASSWORD);\r\n        session.setConfig(\"StrictHostKeyChecking\", \"no\");\r\n        session.connect();\r\n        return session;\r\n    }\r\n |         session.setConfig(\"StrictHostKeyChecking\", \"no\");\r\n        session.connect();\r\n        return session;\r\n    }\r\n}\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "host",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "SSH_PASSWORD",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "\"adminPass\"",
                        "type": "String",
                        "context": "public class BAD_SSHConnectionHandler {\r\n    private static final String SSH_USER = \"admin\";\r\n    private static final String SSH_PASSWORD = \"adminPass\";\r\n\r\n    public Session createSSHSession(String host) throws Exception {\r\n",
                        "nextNode": "SSH_PASSWORD"
                    },
                    {
                        "name": "SSH_PASSWORD",
                        "type": "String",
                        "context": "public class BAD_SSHConnectionHandler {\r\n    private static final String SSH_USER = \"admin\";\r\n    private static final String SSH_PASSWORD = \"adminPass\";\r\n\r\n    public Session createSSHSession(String host) throws Exception {\r\n |         JSch jsch = new JSch();\r\n        Session session = jsch.getSession(SSH_USER, host, 22);\r\n        session.setPassword(SSH_PASSWORD);\r\n        session.setConfig(\"StrictHostKeyChecking\", \"no\");\r\n        session.connect();\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "jsch",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "new JSch()",
                        "type": "JSch",
                        "context": "\r\n    public Session createSSHSession(String host) throws Exception {\r\n        JSch jsch = new JSch();\r\n        Session session = jsch.getSession(SSH_USER, host, 22);\r\n        session.setPassword(SSH_PASSWORD);\r\n",
                        "nextNode": "jsch"
                    },
                    {
                        "name": "jsch",
                        "type": "Dataflow from `new JSch(...)` to `jsch`",
                        "context": "    public Session createSSHSession(String host) throws Exception {\r\n        JSch jsch = new JSch();\r\n        Session session = jsch.getSession(SSH_USER, host, 22);\r\n        session.setPassword(SSH_PASSWORD);\r\n        session.setConfig(\"StrictHostKeyChecking\", \"no\");\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "no",
                "isSensitive": "no"
            },
            {
                "name": "StrictHostKeyChecking",
                "isSensitive": "no"
            },
            {
                "name": "admin",
                "isSensitive": "yes"
            },
            {
                "name": "adminPass",
                "isSensitive": "yes"
            }
        ],
        "comments": [],
        "sinks": [
            {
                "name": "setPassword",
                "isSink": "no"
            },
            {
                "name": "getSession",
                "isSink": "no"
            },
            {
                "name": "connect",
                "isSink": "yes"
            },
            {
                "name": "setConfig",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "GOOD_ApiConnector.java",
        "variables": [
            {
                "name": "apiUrl",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "apiKey",
                "isSensitive": "yes",
                "graph": []
            }
        ],
        "strings": [
            {
                "name": "API_URL",
                "isSensitive": "no"
            },
            {
                "name": "API_KEY",
                "isSensitive": "no"
            },
            {
                "name": "with API key:",
                "isSensitive": "no"
            },
            {
                "name": "Connecting to API at:",
                "isSensitive": "no"
            }
        ],
        "comments": [],
        "sinks": [
            {
                "name": "println",
                "isSink": "yes"
            },
            {
                "name": "getenv",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "GOOD_ApplicationSettings.java",
        "variables": [
            {
                "name": "accessKey",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "serviceEndpoint",
                "isSensitive": "yes",
                "graph": []
            }
        ],
        "strings": [
            {
                "name": "SERVICE_ENDPOINT",
                "isSensitive": "no"
            },
            {
                "name": "Calling service at.",
                "isSensitive": "no"
            },
            {
                "name": "ACCESS_KEY",
                "isSensitive": "no"
            }
        ],
        "comments": [],
        "sinks": [
            {
                "name": "println",
                "isSink": "yes"
            },
            {
                "name": "getenv",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "GOOD_ClientCredentials.java",
        "variables": [
            {
                "name": "clientId",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "clientPass",
                "isSensitive": "yes",
                "graph": []
            }
        ],
        "strings": [
            {
                "name": "CLIENT_SECRET",
                "isSensitive": "no"
            },
            {
                "name": "CLIENT_ID",
                "isSensitive": "no"
            },
            {
                "name": "Authenticating with client ID and secret from environment.",
                "isSensitive": "no"
            }
        ],
        "comments": [],
        "sinks": [
            {
                "name": "println",
                "isSink": "yes"
            },
            {
                "name": "getenv",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "GOOD_ConfigurationLoader.java",
        "variables": [
            {
                "name": "resource",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "resourcePath",
                        "type": "String",
                        "context": "\r\n    public Properties loadProperties(String resourcePath) throws IOException {\r\n        Resource resource = resourceLoader.getResource(resourcePath);\r\n        Properties props = new Properties();\r\n        try (InputStream is = (InputStream) resource.getInputStream()) {\r\n",
                        "nextNode": "resourceLoader.getResource(resourcePath)"
                    },
                    {
                        "name": "resourceLoader.getResource(resourcePath)",
                        "type": "Resource",
                        "context": "\r\n    public Properties loadProperties(String resourcePath) throws IOException {\r\n        Resource resource = resourceLoader.getResource(resourcePath);\r\n        Properties props = new Properties();\r\n        try (InputStream is = (InputStream) resource.getInputStream()) {\r\n",
                        "nextNode": "resource"
                    },
                    {
                        "name": "resource",
                        "type": "Dataflow from `resourcePath` to `resource`\nDataflow from `getResource(...)` to `resource`",
                        "context": "        Resource resource = resourceLoader.getResource(resourcePath);\r\n        Properties props = new Properties();\r\n        try (InputStream is = (InputStream) resource.getInputStream()) {\r\n            props.load(is);\r\n        }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "resourcePath",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "is",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "resource.getInputStream()",
                        "type": "InputStream",
                        "context": "        Resource resource = resourceLoader.getResource(resourcePath);\r\n        Properties props = new Properties();\r\n        try (InputStream is = (InputStream) resource.getInputStream()) {\r\n            props.load(is);\r\n        }\r\n",
                        "nextNode": "(InputStream) resource.getInputStream()"
                    },
                    {
                        "name": "(InputStream) resource.getInputStream()",
                        "type": "InputStream",
                        "context": "        Resource resource = resourceLoader.getResource(resourcePath);\r\n        Properties props = new Properties();\r\n        try (InputStream is = (InputStream) resource.getInputStream()) {\r\n            props.load(is);\r\n        }\r\n",
                        "nextNode": "is"
                    },
                    {
                        "name": "is",
                        "type": "Dataflow from `getInputStream(...)` to `is`",
                        "context": "        Properties props = new Properties();\r\n        try (InputStream is = (InputStream) resource.getInputStream()) {\r\n            props.load(is);\r\n        }\r\n        return props;\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "resourceLoader",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "props",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "new Properties()",
                        "type": "Properties",
                        "context": "    public Properties loadProperties(String resourcePath) throws IOException {\r\n        Resource resource = resourceLoader.getResource(resourcePath);\r\n        Properties props = new Properties();\r\n        try (InputStream is = (InputStream) resource.getInputStream()) {\r\n            props.load(is);\r\n |     public Properties loadProperties(String resourcePath) throws IOException {\r\n        Resource resource = resourceLoader.getResource(resourcePath);\r\n        Properties props = new Properties();\r\n        try (InputStream is = (InputStream) resource.getInputStream()) {\r\n            props.load(is);\r\n",
                        "nextNode": "props"
                    },
                    {
                        "name": "props",
                        "type": "Dataflow from `new Properties(...)` to `props`",
                        "context": "        Properties props = new Properties();\r\n        try (InputStream is = (InputStream) resource.getInputStream()) {\r\n            props.load(is);\r\n        }\r\n        return props;\r\n |         Properties props = new Properties();\r\n        try (InputStream is = (InputStream) resource.getInputStream()) {\r\n            props.load(is);\r\n        }\r\n        return props;\r\n |             props.load(is);\r\n        }\r\n        return props;\r\n    }\r\n}\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [],
        "comments": [],
        "sinks": [
            {
                "name": "getResource",
                "isSink": "no"
            },
            {
                "name": "load",
                "isSink": "no"
            },
            {
                "name": "getInputStream",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "GOOD_CryptoKeyStorage.java",
        "variables": [
            {
                "name": "decodedKey",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "encodedKey",
                        "type": "String",
                        "context": "    public Key getEncryptionKey() {\r\n        String encodedKey = System.getenv(\"ENCRYPTION_KEY\");\r\n        byte[] decodedKey = Base64.getDecoder().decode(encodedKey);\r\n        return new SecretKeySpec(decodedKey, \"AES\");\r\n    }\r\n",
                        "nextNode": "Base64.getDecoder().decode(encodedKey)"
                    },
                    {
                        "name": "Base64.getDecoder().decode(encodedKey)",
                        "type": "byte[]",
                        "context": "    public Key getEncryptionKey() {\r\n        String encodedKey = System.getenv(\"ENCRYPTION_KEY\");\r\n        byte[] decodedKey = Base64.getDecoder().decode(encodedKey);\r\n        return new SecretKeySpec(decodedKey, \"AES\");\r\n    }\r\n",
                        "nextNode": "decodedKey"
                    },
                    {
                        "name": "decodedKey",
                        "type": "Dataflow from `encodedKey` to `decodedKey`\nDataflow from `decode(...)` to `decodedKey`\nDataflow from `getenv(...)` to `decodedKey`\nDataflow from `\"ENCRYPTION_KEY\"` to `decodedKey`",
                        "context": "        String encodedKey = System.getenv(\"ENCRYPTION_KEY\");\r\n        byte[] decodedKey = Base64.getDecoder().decode(encodedKey);\r\n        return new SecretKeySpec(decodedKey, \"AES\");\r\n    }\r\n}\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "encodedKey",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "System.getenv(\"ENCRYPTION_KEY\")",
                        "type": "String",
                        "context": "public class GOOD_CryptoKeyStorage {\r\n    public Key getEncryptionKey() {\r\n        String encodedKey = System.getenv(\"ENCRYPTION_KEY\");\r\n        byte[] decodedKey = Base64.getDecoder().decode(encodedKey);\r\n        return new SecretKeySpec(decodedKey, \"AES\");\r\n",
                        "nextNode": "encodedKey"
                    },
                    {
                        "name": "encodedKey",
                        "type": "Dataflow from `getenv(...)` to `encodedKey`\nDataflow from `\"ENCRYPTION_KEY\"` to `encodedKey`",
                        "context": "    public Key getEncryptionKey() {\r\n        String encodedKey = System.getenv(\"ENCRYPTION_KEY\");\r\n        byte[] decodedKey = Base64.getDecoder().decode(encodedKey);\r\n        return new SecretKeySpec(decodedKey, \"AES\");\r\n    }\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "ENCRYPTION_KEY",
                "isSensitive": "no"
            },
            {
                "name": "AES",
                "isSensitive": "yes"
            }
        ],
        "comments": [],
        "sinks": [
            {
                "name": "getDecoder",
                "isSink": "no"
            },
            {
                "name": "decode",
                "isSink": "no"
            },
            {
                "name": "getenv",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "GOOD_ExternalizeSensitiveConfig.java",
        "variables": [
            {
                "name": "databaseUser",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "prop",
                        "type": "Properties",
                        "context": "\r\n            // Retrieve database configuration properties\r\n            String databaseUrl = prop.getProperty(\"db.url\");\r\n            String databaseUser = prop.getProperty(\"db.user\");\r\n            String databasePassword = prop.getProperty(\"db.password\");\r\n |             // Retrieve database configuration properties\r\n            String databaseUrl = prop.getProperty(\"db.url\");\r\n            String databaseUser = prop.getProperty(\"db.user\");\r\n            String databasePassword = prop.getProperty(\"db.password\");\r\n\r\n",
                        "nextNode": "prop.getProperty(\"db.user\")"
                    },
                    {
                        "name": "prop.getProperty(\"db.user\")",
                        "type": "String",
                        "context": "            // Retrieve database configuration properties\r\n            String databaseUrl = prop.getProperty(\"db.url\");\r\n            String databaseUser = prop.getProperty(\"db.user\");\r\n            String databasePassword = prop.getProperty(\"db.password\");\r\n\r\n",
                        "nextNode": "databaseUser"
                    },
                    {
                        "name": "databaseUser",
                        "type": "Dataflow from `prop` to `databaseUser`\nDataflow from `prop` to `databaseUser`\nDataflow from `prop` to `databaseUser`\nDataflow from `getProperty(...)` to `databaseUser`\nDataflow from `new Properties(...)` to `databaseUser`\nDataflow from `\"db.user\"` to `databaseUser`",
                        "context": "            String databasePassword = prop.getProperty(\"db.password\");\r\n\r\n            connection = DriverManager.getConnection(databaseUrl, databaseUser, databasePassword);\r\n            System.out.println(\"Successfully connected to the database.\");\r\n\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "args",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "e",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "prop",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "new Properties()",
                        "type": "Properties",
                        "context": "\r\n    public static void main(String[] args) {\r\n        Properties prop = new Properties();\r\n        Connection connection = null;\r\n        try {\r\n | \r\n    public static void main(String[] args) {\r\n        Properties prop = new Properties();\r\n        Connection connection = null;\r\n        try {\r\n | \r\n    public static void main(String[] args) {\r\n        Properties prop = new Properties();\r\n        Connection connection = null;\r\n        try {\r\n | \r\n    public static void main(String[] args) {\r\n        Properties prop = new Properties();\r\n        Connection connection = null;\r\n        try {\r\n",
                        "nextNode": "prop"
                    },
                    {
                        "name": "prop",
                        "type": "Properties",
                        "context": "        Connection connection = null;\r\n        try {\r\n            prop.load(new FileInputStream(\"config/application.properties\"));\r\n\r\n            // Retrieve database configuration properties\r\n | \r\n            // Retrieve database configuration properties\r\n            String databaseUrl = prop.getProperty(\"db.url\");\r\n            String databaseUser = prop.getProperty(\"db.user\");\r\n            String databasePassword = prop.getProperty(\"db.password\");\r\n |         Connection connection = null;\r\n        try {\r\n            prop.load(new FileInputStream(\"config/application.properties\"));\r\n\r\n            // Retrieve database configuration properties\r\n | \r\n            // Retrieve database configuration properties\r\n            String databaseUrl = prop.getProperty(\"db.url\");\r\n            String databaseUser = prop.getProperty(\"db.user\");\r\n            String databasePassword = prop.getProperty(\"db.password\");\r\n |             // Retrieve database configuration properties\r\n            String databaseUrl = prop.getProperty(\"db.url\");\r\n            String databaseUser = prop.getProperty(\"db.user\");\r\n            String databasePassword = prop.getProperty(\"db.password\");\r\n\r\n |         Connection connection = null;\r\n        try {\r\n            prop.load(new FileInputStream(\"config/application.properties\"));\r\n\r\n            // Retrieve database configuration properties\r\n | \r\n            // Retrieve database configuration properties\r\n            String databaseUrl = prop.getProperty(\"db.url\");\r\n            String databaseUser = prop.getProperty(\"db.user\");\r\n            String databasePassword = prop.getProperty(\"db.password\");\r\n |             // Retrieve database configuration properties\r\n            String databaseUrl = prop.getProperty(\"db.url\");\r\n            String databaseUser = prop.getProperty(\"db.user\");\r\n            String databasePassword = prop.getProperty(\"db.password\");\r\n\r\n |             String databaseUrl = prop.getProperty(\"db.url\");\r\n            String databaseUser = prop.getProperty(\"db.user\");\r\n            String databasePassword = prop.getProperty(\"db.password\");\r\n\r\n            connection = DriverManager.getConnection(databaseUrl, databaseUser, databasePassword);\r\n |         Connection connection = null;\r\n        try {\r\n            prop.load(new FileInputStream(\"config/application.properties\"));\r\n\r\n            // Retrieve database configuration properties\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "connection",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "prop",
                        "type": "Properties",
                        "context": "\r\n            // Retrieve database configuration properties\r\n            String databaseUrl = prop.getProperty(\"db.url\");\r\n            String databaseUser = prop.getProperty(\"db.user\");\r\n            String databasePassword = prop.getProperty(\"db.password\");\r\n | \r\n            // Retrieve database configuration properties\r\n            String databaseUrl = prop.getProperty(\"db.url\");\r\n            String databaseUser = prop.getProperty(\"db.user\");\r\n            String databasePassword = prop.getProperty(\"db.password\");\r\n | \r\n            // Retrieve database configuration properties\r\n            String databaseUrl = prop.getProperty(\"db.url\");\r\n            String databaseUser = prop.getProperty(\"db.user\");\r\n            String databasePassword = prop.getProperty(\"db.password\");\r\n",
                        "nextNode": "prop.getProperty(\"db.url\")"
                    },
                    {
                        "name": "prop.getProperty(\"db.url\")",
                        "type": "String",
                        "context": "\r\n            // Retrieve database configuration properties\r\n            String databaseUrl = prop.getProperty(\"db.url\");\r\n            String databaseUser = prop.getProperty(\"db.user\");\r\n            String databasePassword = prop.getProperty(\"db.password\");\r\n | \r\n            // Retrieve database configuration properties\r\n            String databaseUrl = prop.getProperty(\"db.url\");\r\n            String databaseUser = prop.getProperty(\"db.user\");\r\n            String databasePassword = prop.getProperty(\"db.password\");\r\n | \r\n            // Retrieve database configuration properties\r\n            String databaseUrl = prop.getProperty(\"db.url\");\r\n            String databaseUser = prop.getProperty(\"db.user\");\r\n            String databasePassword = prop.getProperty(\"db.password\");\r\n",
                        "nextNode": "databaseUrl"
                    },
                    {
                        "name": "databaseUrl",
                        "type": "String",
                        "context": "            String databasePassword = prop.getProperty(\"db.password\");\r\n\r\n            connection = DriverManager.getConnection(databaseUrl, databaseUser, databasePassword);\r\n            System.out.println(\"Successfully connected to the database.\");\r\n\r\n |             String databasePassword = prop.getProperty(\"db.password\");\r\n\r\n            connection = DriverManager.getConnection(databaseUrl, databaseUser, databasePassword);\r\n            System.out.println(\"Successfully connected to the database.\");\r\n\r\n |             String databasePassword = prop.getProperty(\"db.password\");\r\n\r\n            connection = DriverManager.getConnection(databaseUrl, databaseUser, databasePassword);\r\n            System.out.println(\"Successfully connected to the database.\");\r\n\r\n",
                        "nextNode": "DriverManager.getConnection(databaseUrl, databaseUser, databasePassword)"
                    },
                    {
                        "name": "DriverManager.getConnection(databaseUrl, databaseUser, databasePassword)",
                        "type": "Connection",
                        "context": "            String databasePassword = prop.getProperty(\"db.password\");\r\n\r\n            connection = DriverManager.getConnection(databaseUrl, databaseUser, databasePassword);\r\n            System.out.println(\"Successfully connected to the database.\");\r\n\r\n |             String databasePassword = prop.getProperty(\"db.password\");\r\n\r\n            connection = DriverManager.getConnection(databaseUrl, databaseUser, databasePassword);\r\n            System.out.println(\"Successfully connected to the database.\");\r\n\r\n |             String databasePassword = prop.getProperty(\"db.password\");\r\n\r\n            connection = DriverManager.getConnection(databaseUrl, databaseUser, databasePassword);\r\n            System.out.println(\"Successfully connected to the database.\");\r\n\r\n",
                        "nextNode": "connection"
                    },
                    {
                        "name": "connection",
                        "type": "Dataflow from `prop` to `connection`\nDataflow from `prop` to `connection`\nDataflow from `prop` to `connection`\nDataflow from `prop` to `connection`\nDataflow from `databaseUrl` to `connection`\nDataflow from `databaseUser` to `connection`\nDataflow from `databasePassword` to `connection`\nDataflow from `getProperty(...)` to `connection`\nDataflow from `getProperty(...)` to `connection`\nDataflow from `getProperty(...)` to `connection`\nDataflow from `new Properties(...)` to `connection`\nDataflow from `null` to `connection`\nDataflow from `getConnection(...)` to `connection`\nDataflow from `\"db.url\"` to `connection`\nDataflow from `\"db.user\"` to `connection`\nDataflow from `\"db.password\"` to `connection`",
                        "context": "        } finally {\r\n            try {\r\n                if (connection != null && !connection.isClosed()) {\r\n                    connection.close();\r\n                    System.out.println(\"Database connection closed.\");\r\n |         } finally {\r\n            try {\r\n                if (connection != null && !connection.isClosed()) {\r\n                    connection.close();\r\n                    System.out.println(\"Database connection closed.\");\r\n |         } finally {\r\n            try {\r\n                if (connection != null && !connection.isClosed()) {\r\n                    connection.close();\r\n                    System.out.println(\"Database connection closed.\");\r\n |         } finally {\r\n            try {\r\n                if (connection != null && !connection.isClosed()) {\r\n                    connection.close();\r\n                    System.out.println(\"Database connection closed.\");\r\n |         } finally {\r\n            try {\r\n                if (connection != null && !connection.isClosed()) {\r\n                    connection.close();\r\n                    System.out.println(\"Database connection closed.\");\r\n |             try {\r\n                if (connection != null && !connection.isClosed()) {\r\n                    connection.close();\r\n                    System.out.println(\"Database connection closed.\");\r\n                }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "databasePassword",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "prop",
                        "type": "Properties",
                        "context": "\r\n            // Retrieve database configuration properties\r\n            String databaseUrl = prop.getProperty(\"db.url\");\r\n            String databaseUser = prop.getProperty(\"db.user\");\r\n            String databasePassword = prop.getProperty(\"db.password\");\r\n |             // Retrieve database configuration properties\r\n            String databaseUrl = prop.getProperty(\"db.url\");\r\n            String databaseUser = prop.getProperty(\"db.user\");\r\n            String databasePassword = prop.getProperty(\"db.password\");\r\n\r\n |             String databaseUrl = prop.getProperty(\"db.url\");\r\n            String databaseUser = prop.getProperty(\"db.user\");\r\n            String databasePassword = prop.getProperty(\"db.password\");\r\n\r\n            connection = DriverManager.getConnection(databaseUrl, databaseUser, databasePassword);\r\n",
                        "nextNode": "prop.getProperty(\"db.password\")"
                    },
                    {
                        "name": "prop.getProperty(\"db.password\")",
                        "type": "String",
                        "context": "            String databaseUrl = prop.getProperty(\"db.url\");\r\n            String databaseUser = prop.getProperty(\"db.user\");\r\n            String databasePassword = prop.getProperty(\"db.password\");\r\n\r\n            connection = DriverManager.getConnection(databaseUrl, databaseUser, databasePassword);\r\n",
                        "nextNode": "databasePassword"
                    },
                    {
                        "name": "databasePassword",
                        "type": "Dataflow from `prop` to `databasePassword`\nDataflow from `prop` to `databasePassword`\nDataflow from `prop` to `databasePassword`\nDataflow from `prop` to `databasePassword`\nDataflow from `getProperty(...)` to `databasePassword`\nDataflow from `new Properties(...)` to `databasePassword`\nDataflow from `\"db.password\"` to `databasePassword`",
                        "context": "            String databasePassword = prop.getProperty(\"db.password\");\r\n\r\n            connection = DriverManager.getConnection(databaseUrl, databaseUser, databasePassword);\r\n            System.out.println(\"Successfully connected to the database.\");\r\n\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "databaseUrl",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "prop",
                        "type": "Properties",
                        "context": "\r\n            // Retrieve database configuration properties\r\n            String databaseUrl = prop.getProperty(\"db.url\");\r\n            String databaseUser = prop.getProperty(\"db.user\");\r\n            String databasePassword = prop.getProperty(\"db.password\");\r\n",
                        "nextNode": "prop.getProperty(\"db.url\")"
                    },
                    {
                        "name": "prop.getProperty(\"db.url\")",
                        "type": "String",
                        "context": "\r\n            // Retrieve database configuration properties\r\n            String databaseUrl = prop.getProperty(\"db.url\");\r\n            String databaseUser = prop.getProperty(\"db.user\");\r\n            String databasePassword = prop.getProperty(\"db.password\");\r\n",
                        "nextNode": "databaseUrl"
                    },
                    {
                        "name": "databaseUrl",
                        "type": "Dataflow from `prop` to `databaseUrl`\nDataflow from `prop` to `databaseUrl`\nDataflow from `getProperty(...)` to `databaseUrl`\nDataflow from `new Properties(...)` to `databaseUrl`\nDataflow from `\"db.url\"` to `databaseUrl`",
                        "context": "            String databasePassword = prop.getProperty(\"db.password\");\r\n\r\n            connection = DriverManager.getConnection(databaseUrl, databaseUser, databasePassword);\r\n            System.out.println(\"Successfully connected to the database.\");\r\n\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "config/application.properties",
                "isSensitive": "no"
            },
            {
                "name": "db.user",
                "isSensitive": "no"
            },
            {
                "name": "Successfully connected to the database.",
                "isSensitive": "no"
            },
            {
                "name": "Failed to close database connection.",
                "isSensitive": "no"
            },
            {
                "name": "db.password",
                "isSensitive": "no"
            },
            {
                "name": "Database connection failed.",
                "isSensitive": "no"
            },
            {
                "name": "Failed to load configuration properties file.",
                "isSensitive": "no"
            },
            {
                "name": "Database connection closed.",
                "isSensitive": "no"
            },
            {
                "name": "db.url",
                "isSensitive": "no"
            }
        ],
        "comments": [
            {
                "name": "Perform database operations...",
                "isSensitive": "no"
            },
            {
                "name": "Retrieve database configuration properties",
                "isSensitive": "no"
            }
        ],
        "sinks": [
            {
                "name": "getConnection",
                "isSink": "yes"
            },
            {
                "name": "println",
                "isSink": "yes"
            },
            {
                "name": "getProperty",
                "isSink": "no"
            },
            {
                "name": "isClosed",
                "isSink": "no"
            },
            {
                "name": "load",
                "isSink": "no"
            },
            {
                "name": "close",
                "isSink": "yes"
            }
        ]
    },
    {
        "fileName": "GOOD_FileStorageService.java",
        "variables": [
            {
                "name": "fileName",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "data",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "filePath",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "storagePath",
                        "type": "Path",
                        "context": "\r\n    public void saveFile(byte[] data, String fileName) {\r\n        Path filePath = storagePath.resolve(fileName);\r\n        System.out.println(\"Saving file to: \" + filePath);\r\n        // Assume this method would actually save the file to disk\r\n",
                        "nextNode": "storagePath.resolve(fileName)"
                    },
                    {
                        "name": "storagePath.resolve(fileName)",
                        "type": "Path",
                        "context": "\r\n    public void saveFile(byte[] data, String fileName) {\r\n        Path filePath = storagePath.resolve(fileName);\r\n        System.out.println(\"Saving file to: \" + filePath);\r\n        // Assume this method would actually save the file to disk\r\n",
                        "nextNode": "filePath"
                    },
                    {
                        "name": "filePath",
                        "type": "Dataflow from `storagePath` to `filePath`\nDataflow from `fileName` to `filePath`\nDataflow from `resolve(...)` to `filePath`",
                        "context": "    public void saveFile(byte[] data, String fileName) {\r\n        Path filePath = storagePath.resolve(fileName);\r\n        System.out.println(\"Saving file to: \" + filePath);\r\n        // Assume this method would actually save the file to disk\r\n    }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "storagePath",
                "isSensitive": "yes",
                "graph": []
            }
        ],
        "strings": [
            {
                "name": "STORAGE_PATH",
                "isSensitive": "no"
            },
            {
                "name": "Saving file to:",
                "isSensitive": "no"
            }
        ],
        "comments": [
            {
                "name": "Assume this method would actually save the file to disk",
                "isSensitive": "no"
            },
            {
                "name": "Load storage path from environment variable",
                "isSensitive": "no"
            }
        ],
        "sinks": [
            {
                "name": "println",
                "isSink": "yes"
            },
            {
                "name": "resolve",
                "isSink": "no"
            },
            {
                "name": "get",
                "isSink": "no"
            },
            {
                "name": "getenv",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "GOOD_PaymentProcessor.java",
        "variables": [
            {
                "name": "amount",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "paymentServiceUrl",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "System.getenv(\"PAYMENT_SERVICE_URL\")",
                        "type": "String",
                        "context": "public class GOOD_PaymentProcessor {\r\n    public void processPayment(String amount) {\r\n        String paymentServiceUrl = System.getenv(\"PAYMENT_SERVICE_URL\");\r\n        String serviceApiKey = System.getenv(\"SERVICE_API_KEY\");\r\n\r\n",
                        "nextNode": "paymentServiceUrl"
                    },
                    {
                        "name": "paymentServiceUrl",
                        "type": "Dataflow from `getenv(...)` to `paymentServiceUrl`\nDataflow from `\"PAYMENT_SERVICE_URL\"` to `paymentServiceUrl`",
                        "context": "        String serviceApiKey = System.getenv(\"SERVICE_API_KEY\");\r\n\r\n        System.out.println(\"Processing payment of \" + amount + \" to \" + paymentServiceUrl + \" with API key \" + serviceApiKey);\r\n        // Actual payment processing logic would be here\r\n    }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "serviceApiKey",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "System.getenv(\"SERVICE_API_KEY\")",
                        "type": "String",
                        "context": "    public void processPayment(String amount) {\r\n        String paymentServiceUrl = System.getenv(\"PAYMENT_SERVICE_URL\");\r\n        String serviceApiKey = System.getenv(\"SERVICE_API_KEY\");\r\n\r\n        System.out.println(\"Processing payment of \" + amount + \" to \" + paymentServiceUrl + \" with API key \" + serviceApiKey);\r\n",
                        "nextNode": "serviceApiKey"
                    },
                    {
                        "name": "serviceApiKey",
                        "type": "Dataflow from `getenv(...)` to `serviceApiKey`\nDataflow from `\"SERVICE_API_KEY\"` to `serviceApiKey`",
                        "context": "        String serviceApiKey = System.getenv(\"SERVICE_API_KEY\");\r\n\r\n        System.out.println(\"Processing payment of \" + amount + \" to \" + paymentServiceUrl + \" with API key \" + serviceApiKey);\r\n        // Actual payment processing logic would be here\r\n    }\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "PAYMENT_SERVICE_URL",
                "isSensitive": "no"
            },
            {
                "name": "Processing payment of",
                "isSensitive": "no"
            },
            {
                "name": "with API key",
                "isSensitive": "no"
            },
            {
                "name": "SERVICE_API_KEY",
                "isSensitive": "no"
            },
            {
                "name": "to",
                "isSensitive": "no"
            }
        ],
        "comments": [
            {
                "name": "Actual payment processing logic would be here",
                "isSensitive": "no"
            }
        ],
        "sinks": [
            {
                "name": "println",
                "isSink": "yes"
            },
            {
                "name": "getenv",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "GOOD_PropertyLoader.java",
        "variables": [
            {
                "name": "fis",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "filePath",
                        "type": "String",
                        "context": "    public Properties loadProperties(String filePath) throws IOException {\r\n        Properties props = new Properties();\r\n        try (FileInputStream fis = new FileInputStream(filePath)) {\r\n            props.load(fis);\r\n        }\r\n",
                        "nextNode": "new FileInputStream(filePath)"
                    },
                    {
                        "name": "new FileInputStream(filePath)",
                        "type": "FileInputStream",
                        "context": "    public Properties loadProperties(String filePath) throws IOException {\r\n        Properties props = new Properties();\r\n        try (FileInputStream fis = new FileInputStream(filePath)) {\r\n            props.load(fis);\r\n        }\r\n",
                        "nextNode": "fis"
                    },
                    {
                        "name": "fis",
                        "type": "Dataflow from `filePath` to `fis`\nDataflow from `new FileInputStream(...)` to `fis`",
                        "context": "        Properties props = new Properties();\r\n        try (FileInputStream fis = new FileInputStream(filePath)) {\r\n            props.load(fis);\r\n        }\r\n        return props;\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "filePath",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "props",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "new Properties()",
                        "type": "Properties",
                        "context": "public class GOOD_PropertyLoader {\r\n    public Properties loadProperties(String filePath) throws IOException {\r\n        Properties props = new Properties();\r\n        try (FileInputStream fis = new FileInputStream(filePath)) {\r\n            props.load(fis);\r\n | public class GOOD_PropertyLoader {\r\n    public Properties loadProperties(String filePath) throws IOException {\r\n        Properties props = new Properties();\r\n        try (FileInputStream fis = new FileInputStream(filePath)) {\r\n            props.load(fis);\r\n",
                        "nextNode": "props"
                    },
                    {
                        "name": "props",
                        "type": "Dataflow from `new Properties(...)` to `props`",
                        "context": "        Properties props = new Properties();\r\n        try (FileInputStream fis = new FileInputStream(filePath)) {\r\n            props.load(fis);\r\n        }\r\n        return props;\r\n |         Properties props = new Properties();\r\n        try (FileInputStream fis = new FileInputStream(filePath)) {\r\n            props.load(fis);\r\n        }\r\n        return props;\r\n |             props.load(fis);\r\n        }\r\n        return props;\r\n    }\r\n}\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [],
        "comments": [],
        "sinks": [
            {
                "name": "load",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "GOOD_UseEnvVarsForCredentials.java",
        "variables": [
            {
                "name": "databaseUser",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "System.getenv(\"DB_USER\")",
                        "type": "String",
                        "context": "        // Fetching sensitive information from environment variables instead of hardcoding\r\n        String databaseUrl = System.getenv(\"DB_URL\");\r\n        String databaseUser = System.getenv(\"DB_USER\");\r\n        String databasePassword = System.getenv(\"DB_PASSWORD\");\r\n\r\n",
                        "nextNode": "databaseUser"
                    },
                    {
                        "name": "databaseUser",
                        "type": "Dataflow from `getenv(...)` to `databaseUser`\nDataflow from `\"DB_USER\"` to `databaseUser`",
                        "context": "        String databasePassword = System.getenv(\"DB_PASSWORD\");\r\n\r\n        return DriverManager.getConnection(databaseUrl, databaseUser, databasePassword);\r\n    }\r\n\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "args",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "e",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "connection",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "databasePassword",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "System.getenv(\"DB_PASSWORD\")",
                        "type": "String",
                        "context": "        String databaseUrl = System.getenv(\"DB_URL\");\r\n        String databaseUser = System.getenv(\"DB_USER\");\r\n        String databasePassword = System.getenv(\"DB_PASSWORD\");\r\n\r\n        return DriverManager.getConnection(databaseUrl, databaseUser, databasePassword);\r\n",
                        "nextNode": "databasePassword"
                    },
                    {
                        "name": "databasePassword",
                        "type": "Dataflow from `getenv(...)` to `databasePassword`\nDataflow from `\"DB_PASSWORD\"` to `databasePassword`",
                        "context": "        String databasePassword = System.getenv(\"DB_PASSWORD\");\r\n\r\n        return DriverManager.getConnection(databaseUrl, databaseUser, databasePassword);\r\n    }\r\n\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "databaseUrl",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "System.getenv(\"DB_URL\")",
                        "type": "String",
                        "context": "    public static Connection getConnection() throws SQLException {\r\n        // Fetching sensitive information from environment variables instead of hardcoding\r\n        String databaseUrl = System.getenv(\"DB_URL\");\r\n        String databaseUser = System.getenv(\"DB_USER\");\r\n        String databasePassword = System.getenv(\"DB_PASSWORD\");\r\n",
                        "nextNode": "databaseUrl"
                    },
                    {
                        "name": "databaseUrl",
                        "type": "Dataflow from `getenv(...)` to `databaseUrl`\nDataflow from `\"DB_URL\"` to `databaseUrl`",
                        "context": "        String databasePassword = System.getenv(\"DB_PASSWORD\");\r\n\r\n        return DriverManager.getConnection(databaseUrl, databaseUser, databasePassword);\r\n    }\r\n\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "Connected to the database successfully.",
                "isSensitive": "no"
            },
            {
                "name": "DB_URL",
                "isSensitive": "no"
            },
            {
                "name": "DB_USER",
                "isSensitive": "no"
            },
            {
                "name": "Database connection failed.",
                "isSensitive": "no"
            },
            {
                "name": "DB_PASSWORD",
                "isSensitive": "no"
            }
        ],
        "comments": [
            {
                "name": "Proceed with database operations...",
                "isSensitive": "no"
            },
            {
                "name": "Fetching sensitive information from environment variables instead of hardcoding",
                "isSensitive": "no"
            }
        ],
        "sinks": [
            {
                "name": "getConnection",
                "isSink": "yes"
            },
            {
                "name": "println",
                "isSink": "yes"
            },
            {
                "name": "getenv",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "BAD_DocumentDirectoryListingServlet.java",
        "variables": [
            {
                "name": "request",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "file",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "documentPath",
                        "type": "String",
                        "context": "    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\r\n        String documentPath = \"/uploaded-documents\";\r\n        File directory = new File(getServletContext().getRealPath(documentPath));\r\n        PrintWriter out = response.getWriter();\r\n\r\n |     protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\r\n        String documentPath = \"/uploaded-documents\";\r\n        File directory = new File(getServletContext().getRealPath(documentPath));\r\n        PrintWriter out = response.getWriter();\r\n\r\n",
                        "nextNode": "getServletContext().getRealPath(documentPath)"
                    },
                    {
                        "name": "getServletContext().getRealPath(documentPath)",
                        "type": "String",
                        "context": "    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\r\n        String documentPath = \"/uploaded-documents\";\r\n        File directory = new File(getServletContext().getRealPath(documentPath));\r\n        PrintWriter out = response.getWriter();\r\n\r\n |     protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\r\n        String documentPath = \"/uploaded-documents\";\r\n        File directory = new File(getServletContext().getRealPath(documentPath));\r\n        PrintWriter out = response.getWriter();\r\n\r\n",
                        "nextNode": "new File(getServletContext().getRealPath(documentPath)"
                    },
                    {
                        "name": "new File(getServletContext().getRealPath(documentPath)",
                        "type": "File",
                        "context": "    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\r\n        String documentPath = \"/uploaded-documents\";\r\n        File directory = new File(getServletContext().getRealPath(documentPath));\r\n        PrintWriter out = response.getWriter();\r\n\r\n |     protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\r\n        String documentPath = \"/uploaded-documents\";\r\n        File directory = new File(getServletContext().getRealPath(documentPath));\r\n        PrintWriter out = response.getWriter();\r\n\r\n",
                        "nextNode": "directory"
                    },
                    {
                        "name": "directory",
                        "type": "File",
                        "context": "\r\n        // Listing all files and directories within the uploaded documents directory\r\n        for (File file : directory.listFiles()) {\r\n            // Generating a clickable link for each file/directory\r\n            out.println(\"<li><a href='\" + documentPath + \"/\" + file.getName() + \"'>\" + file.getName() + \"</a></li>\");\r\n | \r\n        // Listing all files and directories within the uploaded documents directory\r\n        for (File file : directory.listFiles()) {\r\n            // Generating a clickable link for each file/directory\r\n            out.println(\"<li><a href='\" + documentPath + \"/\" + file.getName() + \"'>\" + file.getName() + \"</a></li>\");\r\n",
                        "nextNode": "directory.listFiles()"
                    },
                    {
                        "name": "directory.listFiles()",
                        "type": "File[]",
                        "context": "\r\n        // Listing all files and directories within the uploaded documents directory\r\n        for (File file : directory.listFiles()) {\r\n            // Generating a clickable link for each file/directory\r\n            out.println(\"<li><a href='\" + documentPath + \"/\" + file.getName() + \"'>\" + file.getName() + \"</a></li>\");\r\n | \r\n        // Listing all files and directories within the uploaded documents directory\r\n        for (File file : directory.listFiles()) {\r\n            // Generating a clickable link for each file/directory\r\n            out.println(\"<li><a href='\" + documentPath + \"/\" + file.getName() + \"'>\" + file.getName() + \"</a></li>\");\r\n",
                        "nextNode": "file"
                    },
                    {
                        "name": "file",
                        "type": "Dataflow from `documentPath` to `file`\nDataflow from `directory` to `file`\nDataflow from `listFiles(...)` to `file`\nDataflow from `\"/uploaded-documents\"` to `file`\nDataflow from `new File(...)` to `file`\nDataflow from `getRealPath(...)` to `file`",
                        "context": "        for (File file : directory.listFiles()) {\r\n            // Generating a clickable link for each file/directory\r\n            out.println(\"<li><a href='\" + documentPath + \"/\" + file.getName() + \"'>\" + file.getName() + \"</a></li>\");\r\n        }\r\n\r\n |         for (File file : directory.listFiles()) {\r\n            // Generating a clickable link for each file/directory\r\n            out.println(\"<li><a href='\" + documentPath + \"/\" + file.getName() + \"'>\" + file.getName() + \"</a></li>\");\r\n        }\r\n\r\n |         for (File file : directory.listFiles()) {\r\n            // Generating a clickable link for each file/directory\r\n            out.println(\"<li><a href='\" + documentPath + \"/\" + file.getName() + \"'>\" + file.getName() + \"</a></li>\");\r\n        }\r\n\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "response",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "directory",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "documentPath",
                        "type": "String",
                        "context": "    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\r\n        String documentPath = \"/uploaded-documents\";\r\n        File directory = new File(getServletContext().getRealPath(documentPath));\r\n        PrintWriter out = response.getWriter();\r\n\r\n",
                        "nextNode": "getServletContext().getRealPath(documentPath)"
                    },
                    {
                        "name": "getServletContext().getRealPath(documentPath)",
                        "type": "String",
                        "context": "    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\r\n        String documentPath = \"/uploaded-documents\";\r\n        File directory = new File(getServletContext().getRealPath(documentPath));\r\n        PrintWriter out = response.getWriter();\r\n\r\n",
                        "nextNode": "new File(getServletContext().getRealPath(documentPath)"
                    },
                    {
                        "name": "new File(getServletContext().getRealPath(documentPath)",
                        "type": "File",
                        "context": "    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\r\n        String documentPath = \"/uploaded-documents\";\r\n        File directory = new File(getServletContext().getRealPath(documentPath));\r\n        PrintWriter out = response.getWriter();\r\n\r\n",
                        "nextNode": "directory"
                    },
                    {
                        "name": "directory",
                        "type": "Dataflow from `documentPath` to `directory`\nDataflow from `\"/uploaded-documents\"` to `directory`\nDataflow from `new File(...)` to `directory`\nDataflow from `getRealPath(...)` to `directory`",
                        "context": "\r\n        // Listing all files and directories within the uploaded documents directory\r\n        for (File file : directory.listFiles()) {\r\n            // Generating a clickable link for each file/directory\r\n            out.println(\"<li><a href='\" + documentPath + \"/\" + file.getName() + \"'>\" + file.getName() + \"</a></li>\");\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "documentPath",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "\"/uploaded-documents\"",
                        "type": "String",
                        "context": "public class BAD_DocumentDirectoryListingServlet extends HttpServlet {\r\n    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\r\n        String documentPath = \"/uploaded-documents\";\r\n        File directory = new File(getServletContext().getRealPath(documentPath));\r\n        PrintWriter out = response.getWriter();\r\n | public class BAD_DocumentDirectoryListingServlet extends HttpServlet {\r\n    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\r\n        String documentPath = \"/uploaded-documents\";\r\n        File directory = new File(getServletContext().getRealPath(documentPath));\r\n        PrintWriter out = response.getWriter();\r\n",
                        "nextNode": "documentPath"
                    },
                    {
                        "name": "documentPath",
                        "type": "Dataflow from `\"/uploaded-documents\"` to `documentPath`",
                        "context": "    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\r\n        String documentPath = \"/uploaded-documents\";\r\n        File directory = new File(getServletContext().getRealPath(documentPath));\r\n        PrintWriter out = response.getWriter();\r\n\r\n |     protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\r\n        String documentPath = \"/uploaded-documents\";\r\n        File directory = new File(getServletContext().getRealPath(documentPath));\r\n        PrintWriter out = response.getWriter();\r\n\r\n |         for (File file : directory.listFiles()) {\r\n            // Generating a clickable link for each file/directory\r\n            out.println(\"<li><a href='\" + documentPath + \"/\" + file.getName() + \"'>\" + file.getName() + \"</a></li>\");\r\n        }\r\n\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "out",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "response.getWriter()",
                        "type": "PrintWriter",
                        "context": "        String documentPath = \"/uploaded-documents\";\r\n        File directory = new File(getServletContext().getRealPath(documentPath));\r\n        PrintWriter out = response.getWriter();\r\n\r\n        response.setContentType(\"text/html\");\r\n |         String documentPath = \"/uploaded-documents\";\r\n        File directory = new File(getServletContext().getRealPath(documentPath));\r\n        PrintWriter out = response.getWriter();\r\n\r\n        response.setContentType(\"text/html\");\r\n |         String documentPath = \"/uploaded-documents\";\r\n        File directory = new File(getServletContext().getRealPath(documentPath));\r\n        PrintWriter out = response.getWriter();\r\n\r\n        response.setContentType(\"text/html\");\r\n |         String documentPath = \"/uploaded-documents\";\r\n        File directory = new File(getServletContext().getRealPath(documentPath));\r\n        PrintWriter out = response.getWriter();\r\n\r\n        response.setContentType(\"text/html\");\r\n",
                        "nextNode": "out"
                    },
                    {
                        "name": "out",
                        "type": "Dataflow from `getWriter(...)` to `out`",
                        "context": "\r\n        response.setContentType(\"text/html\");\r\n        out.println(\"<h2>Document Directory Listing:</h2>\");\r\n        out.println(\"<ul>\");\r\n\r\n | \r\n        response.setContentType(\"text/html\");\r\n        out.println(\"<h2>Document Directory Listing:</h2>\");\r\n        out.println(\"<ul>\");\r\n\r\n |         response.setContentType(\"text/html\");\r\n        out.println(\"<h2>Document Directory Listing:</h2>\");\r\n        out.println(\"<ul>\");\r\n\r\n        // Listing all files and directories within the uploaded documents directory\r\n | \r\n        response.setContentType(\"text/html\");\r\n        out.println(\"<h2>Document Directory Listing:</h2>\");\r\n        out.println(\"<ul>\");\r\n\r\n |         response.setContentType(\"text/html\");\r\n        out.println(\"<h2>Document Directory Listing:</h2>\");\r\n        out.println(\"<ul>\");\r\n\r\n        // Listing all files and directories within the uploaded documents directory\r\n |         for (File file : directory.listFiles()) {\r\n            // Generating a clickable link for each file/directory\r\n            out.println(\"<li><a href='\" + documentPath + \"/\" + file.getName() + \"'>\" + file.getName() + \"</a></li>\");\r\n        }\r\n\r\n | \r\n        response.setContentType(\"text/html\");\r\n        out.println(\"<h2>Document Directory Listing:</h2>\");\r\n        out.println(\"<ul>\");\r\n\r\n |         response.setContentType(\"text/html\");\r\n        out.println(\"<h2>Document Directory Listing:</h2>\");\r\n        out.println(\"<ul>\");\r\n\r\n        // Listing all files and directories within the uploaded documents directory\r\n |         }\r\n\r\n        out.println(\"</ul>\");\r\n    }\r\n}\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "</a></li>",
                "isSensitive": "no"
            },
            {
                "name": "</ul>",
                "isSensitive": "no"
            },
            {
                "name": "<li><a href=",
                "isSensitive": "no"
            },
            {
                "name": "text/html",
                "isSensitive": "no"
            },
            {
                "name": "/uploaded-documents",
                "isSensitive": "no"
            },
            {
                "name": "<h2>Document Directory Listing:</h2>",
                "isSensitive": "no"
            },
            {
                "name": "<ul>",
                "isSensitive": "no"
            },
            {
                "name": ">",
                "isSensitive": "no"
            },
            {
                "name": "/",
                "isSensitive": "no"
            }
        ],
        "comments": [
            {
                "name": "Listing all files and directories within the uploaded documents directory",
                "isSensitive": "no"
            },
            {
                "name": "Generating a clickable link for each file/directory",
                "isSensitive": "no"
            }
        ],
        "sinks": [
            {
                "name": "println",
                "isSink": "yes"
            },
            {
                "name": "getName",
                "isSink": "no"
            },
            {
                "name": "getServletContext",
                "isSink": "no"
            },
            {
                "name": "getWriter",
                "isSink": "no"
            },
            {
                "name": "getRealPath",
                "isSink": "no"
            },
            {
                "name": "setContentType",
                "isSink": "no"
            },
            {
                "name": "listFiles",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "BAD_InsecureDirectoryListingServlet.java",
        "variables": [
            {
                "name": "path",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "this.getServletContext().getRealPath(\"/uploads\")",
                        "type": "String",
                        "context": "public class BAD_InsecureDirectoryListingServlet extends HttpServlet {\r\n    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\r\n        String path = this.getServletContext().getRealPath(\"/uploads\");\r\n        File directory = new File(path);\r\n        PrintWriter out = response.getWriter();\r\n",
                        "nextNode": "path"
                    },
                    {
                        "name": "path",
                        "type": "Dataflow from `getRealPath(...)` to `path`\nDataflow from `\"/uploads\"` to `path`",
                        "context": "    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\r\n        String path = this.getServletContext().getRealPath(\"/uploads\");\r\n        File directory = new File(path);\r\n        PrintWriter out = response.getWriter();\r\n\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "request",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "file",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "path",
                        "type": "String",
                        "context": "    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\r\n        String path = this.getServletContext().getRealPath(\"/uploads\");\r\n        File directory = new File(path);\r\n        PrintWriter out = response.getWriter();\r\n\r\n",
                        "nextNode": "new File(path)"
                    },
                    {
                        "name": "new File(path)",
                        "type": "File",
                        "context": "    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\r\n        String path = this.getServletContext().getRealPath(\"/uploads\");\r\n        File directory = new File(path);\r\n        PrintWriter out = response.getWriter();\r\n\r\n",
                        "nextNode": "directory"
                    },
                    {
                        "name": "directory",
                        "type": "File",
                        "context": "        PrintWriter out = response.getWriter();\r\n\r\n        for (File file : directory.listFiles()) {\r\n            out.println(file.getName());\r\n        }\r\n",
                        "nextNode": "directory.listFiles()"
                    },
                    {
                        "name": "directory.listFiles()",
                        "type": "File[]",
                        "context": "        PrintWriter out = response.getWriter();\r\n\r\n        for (File file : directory.listFiles()) {\r\n            out.println(file.getName());\r\n        }\r\n",
                        "nextNode": "file"
                    },
                    {
                        "name": "file",
                        "type": "Dataflow from `path` to `file`\nDataflow from `directory` to `file`\nDataflow from `new File(...)` to `file`\nDataflow from `listFiles(...)` to `file`\nDataflow from `getRealPath(...)` to `file`\nDataflow from `\"/uploads\"` to `file`",
                        "context": "\r\n        for (File file : directory.listFiles()) {\r\n            out.println(file.getName());\r\n        }\r\n    }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "response",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "directory",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "path",
                        "type": "String",
                        "context": "    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\r\n        String path = this.getServletContext().getRealPath(\"/uploads\");\r\n        File directory = new File(path);\r\n        PrintWriter out = response.getWriter();\r\n\r\n",
                        "nextNode": "new File(path)"
                    },
                    {
                        "name": "new File(path)",
                        "type": "File",
                        "context": "    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\r\n        String path = this.getServletContext().getRealPath(\"/uploads\");\r\n        File directory = new File(path);\r\n        PrintWriter out = response.getWriter();\r\n\r\n",
                        "nextNode": "directory"
                    },
                    {
                        "name": "directory",
                        "type": "Dataflow from `path` to `directory`\nDataflow from `new File(...)` to `directory`\nDataflow from `getRealPath(...)` to `directory`\nDataflow from `\"/uploads\"` to `directory`",
                        "context": "        PrintWriter out = response.getWriter();\r\n\r\n        for (File file : directory.listFiles()) {\r\n            out.println(file.getName());\r\n        }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "out",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "response.getWriter()",
                        "type": "PrintWriter",
                        "context": "        String path = this.getServletContext().getRealPath(\"/uploads\");\r\n        File directory = new File(path);\r\n        PrintWriter out = response.getWriter();\r\n\r\n        for (File file : directory.listFiles()) {\r\n",
                        "nextNode": "out"
                    },
                    {
                        "name": "out",
                        "type": "Dataflow from `getWriter(...)` to `out`",
                        "context": "\r\n        for (File file : directory.listFiles()) {\r\n            out.println(file.getName());\r\n        }\r\n    }\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "/uploads",
                "isSensitive": "no"
            }
        ],
        "comments": [],
        "sinks": [
            {
                "name": "println",
                "isSink": "yes"
            },
            {
                "name": "getName",
                "isSink": "no"
            },
            {
                "name": "getServletContext",
                "isSink": "no"
            },
            {
                "name": "getWriter",
                "isSink": "no"
            },
            {
                "name": "getRealPath",
                "isSink": "no"
            },
            {
                "name": "listFiles",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "BAD_LogDirectoryPaths.java",
        "variables": [
            {
                "name": "args",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "file",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "directoryPath",
                        "type": "String",
                        "context": "\r\n    public void processFilesInDirectory(String directoryPath) {\r\n        File directory = new File(directoryPath);\r\n        \r\n        logger.info(\"Processing files in directory: \" + directoryPath);\r\n | \r\n    public void processFilesInDirectory(String directoryPath) {\r\n        File directory = new File(directoryPath);\r\n        \r\n        logger.info(\"Processing files in directory: \" + directoryPath);\r\n | \r\n    public void processFilesInDirectory(String directoryPath) {\r\n        File directory = new File(directoryPath);\r\n        \r\n        logger.info(\"Processing files in directory: \" + directoryPath);\r\n | \r\n    public void processFilesInDirectory(String directoryPath) {\r\n        File directory = new File(directoryPath);\r\n        \r\n        logger.info(\"Processing files in directory: \" + directoryPath);\r\n | \r\n    public void processFilesInDirectory(String directoryPath) {\r\n        File directory = new File(directoryPath);\r\n        \r\n        logger.info(\"Processing files in directory: \" + directoryPath);\r\n",
                        "nextNode": "new File(directoryPath)"
                    },
                    {
                        "name": "new File(directoryPath)",
                        "type": "File",
                        "context": "\r\n    public void processFilesInDirectory(String directoryPath) {\r\n        File directory = new File(directoryPath);\r\n        \r\n        logger.info(\"Processing files in directory: \" + directoryPath);\r\n | \r\n    public void processFilesInDirectory(String directoryPath) {\r\n        File directory = new File(directoryPath);\r\n        \r\n        logger.info(\"Processing files in directory: \" + directoryPath);\r\n | \r\n    public void processFilesInDirectory(String directoryPath) {\r\n        File directory = new File(directoryPath);\r\n        \r\n        logger.info(\"Processing files in directory: \" + directoryPath);\r\n | \r\n    public void processFilesInDirectory(String directoryPath) {\r\n        File directory = new File(directoryPath);\r\n        \r\n        logger.info(\"Processing files in directory: \" + directoryPath);\r\n | \r\n    public void processFilesInDirectory(String directoryPath) {\r\n        File directory = new File(directoryPath);\r\n        \r\n        logger.info(\"Processing files in directory: \" + directoryPath);\r\n",
                        "nextNode": "directory"
                    },
                    {
                        "name": "directory",
                        "type": "File",
                        "context": "\r\n        // Check if directory exists and is indeed a directory\r\n        if (directory.exists() && directory.isDirectory()) {\r\n            File[] files = directory.listFiles();\r\n\r\n | \r\n        // Check if directory exists and is indeed a directory\r\n        if (directory.exists() && directory.isDirectory()) {\r\n            File[] files = directory.listFiles();\r\n\r\n |         // Check if directory exists and is indeed a directory\r\n        if (directory.exists() && directory.isDirectory()) {\r\n            File[] files = directory.listFiles();\r\n\r\n            if (files != null) {\r\n | \r\n        // Check if directory exists and is indeed a directory\r\n        if (directory.exists() && directory.isDirectory()) {\r\n            File[] files = directory.listFiles();\r\n\r\n | \r\n        // Check if directory exists and is indeed a directory\r\n        if (directory.exists() && directory.isDirectory()) {\r\n            File[] files = directory.listFiles();\r\n\r\n |         // Check if directory exists and is indeed a directory\r\n        if (directory.exists() && directory.isDirectory()) {\r\n            File[] files = directory.listFiles();\r\n\r\n            if (files != null) {\r\n | \r\n        // Check if directory exists and is indeed a directory\r\n        if (directory.exists() && directory.isDirectory()) {\r\n            File[] files = directory.listFiles();\r\n\r\n | \r\n        // Check if directory exists and is indeed a directory\r\n        if (directory.exists() && directory.isDirectory()) {\r\n            File[] files = directory.listFiles();\r\n\r\n |         // Check if directory exists and is indeed a directory\r\n        if (directory.exists() && directory.isDirectory()) {\r\n            File[] files = directory.listFiles();\r\n\r\n            if (files != null) {\r\n | \r\n        // Check if directory exists and is indeed a directory\r\n        if (directory.exists() && directory.isDirectory()) {\r\n            File[] files = directory.listFiles();\r\n\r\n | \r\n        // Check if directory exists and is indeed a directory\r\n        if (directory.exists() && directory.isDirectory()) {\r\n            File[] files = directory.listFiles();\r\n\r\n |         // Check if directory exists and is indeed a directory\r\n        if (directory.exists() && directory.isDirectory()) {\r\n            File[] files = directory.listFiles();\r\n\r\n            if (files != null) {\r\n | \r\n        // Check if directory exists and is indeed a directory\r\n        if (directory.exists() && directory.isDirectory()) {\r\n            File[] files = directory.listFiles();\r\n\r\n | \r\n        // Check if directory exists and is indeed a directory\r\n        if (directory.exists() && directory.isDirectory()) {\r\n            File[] files = directory.listFiles();\r\n\r\n |         // Check if directory exists and is indeed a directory\r\n        if (directory.exists() && directory.isDirectory()) {\r\n            File[] files = directory.listFiles();\r\n\r\n            if (files != null) {\r\n",
                        "nextNode": "directory.listFiles()"
                    },
                    {
                        "name": "directory.listFiles()",
                        "type": "File[]",
                        "context": "        // Check if directory exists and is indeed a directory\r\n        if (directory.exists() && directory.isDirectory()) {\r\n            File[] files = directory.listFiles();\r\n\r\n            if (files != null) {\r\n |         // Check if directory exists and is indeed a directory\r\n        if (directory.exists() && directory.isDirectory()) {\r\n            File[] files = directory.listFiles();\r\n\r\n            if (files != null) {\r\n |         // Check if directory exists and is indeed a directory\r\n        if (directory.exists() && directory.isDirectory()) {\r\n            File[] files = directory.listFiles();\r\n\r\n            if (files != null) {\r\n |         // Check if directory exists and is indeed a directory\r\n        if (directory.exists() && directory.isDirectory()) {\r\n            File[] files = directory.listFiles();\r\n\r\n            if (files != null) {\r\n |         // Check if directory exists and is indeed a directory\r\n        if (directory.exists() && directory.isDirectory()) {\r\n            File[] files = directory.listFiles();\r\n\r\n            if (files != null) {\r\n",
                        "nextNode": "files"
                    },
                    {
                        "name": "files",
                        "type": "File[]",
                        "context": "            File[] files = directory.listFiles();\r\n\r\n            if (files != null) {\r\n                for (File file : files) {\r\n                    // Simulate processing each file (e.g., reading, moving, or updating files)\r\n | \r\n            if (files != null) {\r\n                for (File file : files) {\r\n                    // Simulate processing each file (e.g., reading, moving, or updating files)\r\n                    logger.info(\"Processing file: \" + file.getName()); \r\n |             File[] files = directory.listFiles();\r\n\r\n            if (files != null) {\r\n                for (File file : files) {\r\n                    // Simulate processing each file (e.g., reading, moving, or updating files)\r\n | \r\n            if (files != null) {\r\n                for (File file : files) {\r\n                    // Simulate processing each file (e.g., reading, moving, or updating files)\r\n                    logger.info(\"Processing file: \" + file.getName()); \r\n |             File[] files = directory.listFiles();\r\n\r\n            if (files != null) {\r\n                for (File file : files) {\r\n                    // Simulate processing each file (e.g., reading, moving, or updating files)\r\n | \r\n            if (files != null) {\r\n                for (File file : files) {\r\n                    // Simulate processing each file (e.g., reading, moving, or updating files)\r\n                    logger.info(\"Processing file: \" + file.getName()); \r\n |             File[] files = directory.listFiles();\r\n\r\n            if (files != null) {\r\n                for (File file : files) {\r\n                    // Simulate processing each file (e.g., reading, moving, or updating files)\r\n | \r\n            if (files != null) {\r\n                for (File file : files) {\r\n                    // Simulate processing each file (e.g., reading, moving, or updating files)\r\n                    logger.info(\"Processing file: \" + file.getName()); \r\n |             File[] files = directory.listFiles();\r\n\r\n            if (files != null) {\r\n                for (File file : files) {\r\n                    // Simulate processing each file (e.g., reading, moving, or updating files)\r\n | \r\n            if (files != null) {\r\n                for (File file : files) {\r\n                    // Simulate processing each file (e.g., reading, moving, or updating files)\r\n                    logger.info(\"Processing file: \" + file.getName()); \r\n",
                        "nextNode": "file"
                    },
                    {
                        "name": "file",
                        "type": "Dataflow from `directoryPath` to `file`\nDataflow from `directory` to `file`\nDataflow from `directory` to `file`\nDataflow from `directory` to `file`\nDataflow from `files` to `file`\nDataflow from `files` to `file`\nDataflow from `new File(...)` to `file`\nDataflow from `listFiles(...)` to `file`\nDataflow from `\"/usr/local/photos\"` to `file`",
                        "context": "                for (File file : files) {\r\n                    // Simulate processing each file (e.g., reading, moving, or updating files)\r\n                    logger.info(\"Processing file: \" + file.getName()); \r\n                    \r\n                    if (file.isFile()) {\r\n |                 for (File file : files) {\r\n                    // Simulate processing each file (e.g., reading, moving, or updating files)\r\n                    logger.info(\"Processing file: \" + file.getName()); \r\n                    \r\n                    if (file.isFile()) {\r\n |                     logger.info(\"Processing file: \" + file.getName()); \r\n                    \r\n                    if (file.isFile()) {\r\n                        logger.debug(\"File size (bytes): \" + file.length());\r\n                    } else if (file.isDirectory()) {\r\n |                 for (File file : files) {\r\n                    // Simulate processing each file (e.g., reading, moving, or updating files)\r\n                    logger.info(\"Processing file: \" + file.getName()); \r\n                    \r\n                    if (file.isFile()) {\r\n |                     logger.info(\"Processing file: \" + file.getName()); \r\n                    \r\n                    if (file.isFile()) {\r\n                        logger.debug(\"File size (bytes): \" + file.length());\r\n                    } else if (file.isDirectory()) {\r\n |                     \r\n                    if (file.isFile()) {\r\n                        logger.debug(\"File size (bytes): \" + file.length());\r\n                    } else if (file.isDirectory()) {\r\n                        logger.debug(\"Encountered nested directory: \" + file.getName());\r\n |                 for (File file : files) {\r\n                    // Simulate processing each file (e.g., reading, moving, or updating files)\r\n                    logger.info(\"Processing file: \" + file.getName()); \r\n                    \r\n                    if (file.isFile()) {\r\n |                     logger.info(\"Processing file: \" + file.getName()); \r\n                    \r\n                    if (file.isFile()) {\r\n                        logger.debug(\"File size (bytes): \" + file.length());\r\n                    } else if (file.isDirectory()) {\r\n |                     if (file.isFile()) {\r\n                        logger.debug(\"File size (bytes): \" + file.length());\r\n                    } else if (file.isDirectory()) {\r\n                        logger.debug(\"Encountered nested directory: \" + file.getName());\r\n                    }\r\n |                 for (File file : files) {\r\n                    // Simulate processing each file (e.g., reading, moving, or updating files)\r\n                    logger.info(\"Processing file: \" + file.getName()); \r\n                    \r\n                    if (file.isFile()) {\r\n |                     logger.info(\"Processing file: \" + file.getName()); \r\n                    \r\n                    if (file.isFile()) {\r\n                        logger.debug(\"File size (bytes): \" + file.length());\r\n                    } else if (file.isDirectory()) {\r\n |                     if (file.isFile()) {\r\n                        logger.debug(\"File size (bytes): \" + file.length());\r\n                    } else if (file.isDirectory()) {\r\n                        logger.debug(\"Encountered nested directory: \" + file.getName());\r\n                    }\r\n |                         logger.debug(\"File size (bytes): \" + file.length());\r\n                    } else if (file.isDirectory()) {\r\n                        logger.debug(\"Encountered nested directory: \" + file.getName());\r\n                    }\r\n                    \r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "directoryPath",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "\"/usr/local/photos\"",
                        "type": "String",
                        "context": "\r\n    public static void main(String[] args) {\r\n        new BAD_LogDirectoryPaths().processFilesInDirectory(\"/usr/local/photos\");\r\n    }\r\n}\r\n | \r\n    public static void main(String[] args) {\r\n        new BAD_LogDirectoryPaths().processFilesInDirectory(\"/usr/local/photos\");\r\n    }\r\n}\r\n | \r\n    public static void main(String[] args) {\r\n        new BAD_LogDirectoryPaths().processFilesInDirectory(\"/usr/local/photos\");\r\n    }\r\n}\r\n | \r\n    public static void main(String[] args) {\r\n        new BAD_LogDirectoryPaths().processFilesInDirectory(\"/usr/local/photos\");\r\n    }\r\n}\r\n",
                        "nextNode": "String directoryPath"
                    },
                    {
                        "name": "String directoryPath",
                        "type": "String",
                        "context": "    private static final Logger logger = LogManager.getLogger(BAD_LogDirectoryPaths.class);\r\n\r\n    public void processFilesInDirectory(String directoryPath) {\r\n        File directory = new File(directoryPath);\r\n        \r\n |     private static final Logger logger = LogManager.getLogger(BAD_LogDirectoryPaths.class);\r\n\r\n    public void processFilesInDirectory(String directoryPath) {\r\n        File directory = new File(directoryPath);\r\n        \r\n |     private static final Logger logger = LogManager.getLogger(BAD_LogDirectoryPaths.class);\r\n\r\n    public void processFilesInDirectory(String directoryPath) {\r\n        File directory = new File(directoryPath);\r\n        \r\n |     private static final Logger logger = LogManager.getLogger(BAD_LogDirectoryPaths.class);\r\n\r\n    public void processFilesInDirectory(String directoryPath) {\r\n        File directory = new File(directoryPath);\r\n        \r\n",
                        "nextNode": "directoryPath"
                    },
                    {
                        "name": "directoryPath",
                        "type": "Dataflow from `\"/usr/local/photos\"` to `directoryPath`",
                        "context": "\r\n    public void processFilesInDirectory(String directoryPath) {\r\n        File directory = new File(directoryPath);\r\n        \r\n        logger.info(\"Processing files in directory: \" + directoryPath);\r\n | \r\n    public void processFilesInDirectory(String directoryPath) {\r\n        File directory = new File(directoryPath);\r\n        \r\n        logger.info(\"Processing files in directory: \" + directoryPath);\r\n |         File directory = new File(directoryPath);\r\n        \r\n        logger.info(\"Processing files in directory: \" + directoryPath);\r\n\r\n        // Check if directory exists and is indeed a directory\r\n | \r\n    public void processFilesInDirectory(String directoryPath) {\r\n        File directory = new File(directoryPath);\r\n        \r\n        logger.info(\"Processing files in directory: \" + directoryPath);\r\n |         File directory = new File(directoryPath);\r\n        \r\n        logger.info(\"Processing files in directory: \" + directoryPath);\r\n\r\n        // Check if directory exists and is indeed a directory\r\n |                 }\r\n            } else {\r\n                logger.warn(\"No files found in directory: \" + directoryPath);\r\n            }\r\n        } else {\r\n | \r\n    public void processFilesInDirectory(String directoryPath) {\r\n        File directory = new File(directoryPath);\r\n        \r\n        logger.info(\"Processing files in directory: \" + directoryPath);\r\n |         File directory = new File(directoryPath);\r\n        \r\n        logger.info(\"Processing files in directory: \" + directoryPath);\r\n\r\n        // Check if directory exists and is indeed a directory\r\n |             }\r\n        } else {\r\n            logger.error(\"The path provided does not exist or is not a directory: \" + directoryPath);\r\n        }\r\n    }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "logger",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "LogManager.getLogger(BAD_LogDirectoryPaths.class)",
                        "type": "Logger",
                        "context": "\r\npublic class BAD_LogDirectoryPaths {\r\n    private static final Logger logger = LogManager.getLogger(BAD_LogDirectoryPaths.class);\r\n\r\n    public void processFilesInDirectory(String directoryPath) {\r\n | \r\npublic class BAD_LogDirectoryPaths {\r\n    private static final Logger logger = LogManager.getLogger(BAD_LogDirectoryPaths.class);\r\n\r\n    public void processFilesInDirectory(String directoryPath) {\r\n | \r\npublic class BAD_LogDirectoryPaths {\r\n    private static final Logger logger = LogManager.getLogger(BAD_LogDirectoryPaths.class);\r\n\r\n    public void processFilesInDirectory(String directoryPath) {\r\n | \r\npublic class BAD_LogDirectoryPaths {\r\n    private static final Logger logger = LogManager.getLogger(BAD_LogDirectoryPaths.class);\r\n\r\n    public void processFilesInDirectory(String directoryPath) {\r\n | \r\npublic class BAD_LogDirectoryPaths {\r\n    private static final Logger logger = LogManager.getLogger(BAD_LogDirectoryPaths.class);\r\n\r\n    public void processFilesInDirectory(String directoryPath) {\r\n | \r\npublic class BAD_LogDirectoryPaths {\r\n    private static final Logger logger = LogManager.getLogger(BAD_LogDirectoryPaths.class);\r\n\r\n    public void processFilesInDirectory(String directoryPath) {\r\n",
                        "nextNode": "logger"
                    },
                    {
                        "name": "logger",
                        "type": "Logger",
                        "context": "\r\npublic class BAD_LogDirectoryPaths {\r\n    private static final Logger logger = LogManager.getLogger(BAD_LogDirectoryPaths.class);\r\n\r\n    public void processFilesInDirectory(String directoryPath) {\r\n |         File directory = new File(directoryPath);\r\n        \r\n        logger.info(\"Processing files in directory: \" + directoryPath);\r\n\r\n        // Check if directory exists and is indeed a directory\r\n | \r\npublic class BAD_LogDirectoryPaths {\r\n    private static final Logger logger = LogManager.getLogger(BAD_LogDirectoryPaths.class);\r\n\r\n    public void processFilesInDirectory(String directoryPath) {\r\n |                 for (File file : files) {\r\n                    // Simulate processing each file (e.g., reading, moving, or updating files)\r\n                    logger.info(\"Processing file: \" + file.getName()); \r\n                    \r\n                    if (file.isFile()) {\r\n | \r\npublic class BAD_LogDirectoryPaths {\r\n    private static final Logger logger = LogManager.getLogger(BAD_LogDirectoryPaths.class);\r\n\r\n    public void processFilesInDirectory(String directoryPath) {\r\n |                     \r\n                    if (file.isFile()) {\r\n                        logger.debug(\"File size (bytes): \" + file.length());\r\n                    } else if (file.isDirectory()) {\r\n                        logger.debug(\"Encountered nested directory: \" + file.getName());\r\n | \r\npublic class BAD_LogDirectoryPaths {\r\n    private static final Logger logger = LogManager.getLogger(BAD_LogDirectoryPaths.class);\r\n\r\n    public void processFilesInDirectory(String directoryPath) {\r\n |                         logger.debug(\"File size (bytes): \" + file.length());\r\n                    } else if (file.isDirectory()) {\r\n                        logger.debug(\"Encountered nested directory: \" + file.getName());\r\n                    }\r\n                    \r\n | \r\npublic class BAD_LogDirectoryPaths {\r\n    private static final Logger logger = LogManager.getLogger(BAD_LogDirectoryPaths.class);\r\n\r\n    public void processFilesInDirectory(String directoryPath) {\r\n |                 }\r\n            } else {\r\n                logger.warn(\"No files found in directory: \" + directoryPath);\r\n            }\r\n        } else {\r\n | \r\npublic class BAD_LogDirectoryPaths {\r\n    private static final Logger logger = LogManager.getLogger(BAD_LogDirectoryPaths.class);\r\n\r\n    public void processFilesInDirectory(String directoryPath) {\r\n |             }\r\n        } else {\r\n            logger.error(\"The path provided does not exist or is not a directory: \" + directoryPath);\r\n        }\r\n    }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "files",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "directoryPath",
                        "type": "String",
                        "context": "\r\n    public void processFilesInDirectory(String directoryPath) {\r\n        File directory = new File(directoryPath);\r\n        \r\n        logger.info(\"Processing files in directory: \" + directoryPath);\r\n | \r\n    public void processFilesInDirectory(String directoryPath) {\r\n        File directory = new File(directoryPath);\r\n        \r\n        logger.info(\"Processing files in directory: \" + directoryPath);\r\n",
                        "nextNode": "new File(directoryPath)"
                    },
                    {
                        "name": "new File(directoryPath)",
                        "type": "File",
                        "context": "\r\n    public void processFilesInDirectory(String directoryPath) {\r\n        File directory = new File(directoryPath);\r\n        \r\n        logger.info(\"Processing files in directory: \" + directoryPath);\r\n | \r\n    public void processFilesInDirectory(String directoryPath) {\r\n        File directory = new File(directoryPath);\r\n        \r\n        logger.info(\"Processing files in directory: \" + directoryPath);\r\n",
                        "nextNode": "directory"
                    },
                    {
                        "name": "directory",
                        "type": "File",
                        "context": "\r\n        // Check if directory exists and is indeed a directory\r\n        if (directory.exists() && directory.isDirectory()) {\r\n            File[] files = directory.listFiles();\r\n\r\n | \r\n        // Check if directory exists and is indeed a directory\r\n        if (directory.exists() && directory.isDirectory()) {\r\n            File[] files = directory.listFiles();\r\n\r\n |         // Check if directory exists and is indeed a directory\r\n        if (directory.exists() && directory.isDirectory()) {\r\n            File[] files = directory.listFiles();\r\n\r\n            if (files != null) {\r\n | \r\n        // Check if directory exists and is indeed a directory\r\n        if (directory.exists() && directory.isDirectory()) {\r\n            File[] files = directory.listFiles();\r\n\r\n | \r\n        // Check if directory exists and is indeed a directory\r\n        if (directory.exists() && directory.isDirectory()) {\r\n            File[] files = directory.listFiles();\r\n\r\n |         // Check if directory exists and is indeed a directory\r\n        if (directory.exists() && directory.isDirectory()) {\r\n            File[] files = directory.listFiles();\r\n\r\n            if (files != null) {\r\n",
                        "nextNode": "directory.listFiles()"
                    },
                    {
                        "name": "directory.listFiles()",
                        "type": "File[]",
                        "context": "        // Check if directory exists and is indeed a directory\r\n        if (directory.exists() && directory.isDirectory()) {\r\n            File[] files = directory.listFiles();\r\n\r\n            if (files != null) {\r\n |         // Check if directory exists and is indeed a directory\r\n        if (directory.exists() && directory.isDirectory()) {\r\n            File[] files = directory.listFiles();\r\n\r\n            if (files != null) {\r\n",
                        "nextNode": "files"
                    },
                    {
                        "name": "files",
                        "type": "Dataflow from `directoryPath` to `files`\nDataflow from `directory` to `files`\nDataflow from `directory` to `files`\nDataflow from `directory` to `files`\nDataflow from `new File(...)` to `files`\nDataflow from `listFiles(...)` to `files`\nDataflow from `\"/usr/local/photos\"` to `files`",
                        "context": "            File[] files = directory.listFiles();\r\n\r\n            if (files != null) {\r\n                for (File file : files) {\r\n                    // Simulate processing each file (e.g., reading, moving, or updating files)\r\n |             File[] files = directory.listFiles();\r\n\r\n            if (files != null) {\r\n                for (File file : files) {\r\n                    // Simulate processing each file (e.g., reading, moving, or updating files)\r\n | \r\n            if (files != null) {\r\n                for (File file : files) {\r\n                    // Simulate processing each file (e.g., reading, moving, or updating files)\r\n                    logger.info(\"Processing file: \" + file.getName()); \r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "directory",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "directoryPath",
                        "type": "String",
                        "context": "\r\n    public void processFilesInDirectory(String directoryPath) {\r\n        File directory = new File(directoryPath);\r\n        \r\n        logger.info(\"Processing files in directory: \" + directoryPath);\r\n | \r\n    public void processFilesInDirectory(String directoryPath) {\r\n        File directory = new File(directoryPath);\r\n        \r\n        logger.info(\"Processing files in directory: \" + directoryPath);\r\n | \r\n    public void processFilesInDirectory(String directoryPath) {\r\n        File directory = new File(directoryPath);\r\n        \r\n        logger.info(\"Processing files in directory: \" + directoryPath);\r\n",
                        "nextNode": "new File(directoryPath)"
                    },
                    {
                        "name": "new File(directoryPath)",
                        "type": "File",
                        "context": "\r\n    public void processFilesInDirectory(String directoryPath) {\r\n        File directory = new File(directoryPath);\r\n        \r\n        logger.info(\"Processing files in directory: \" + directoryPath);\r\n | \r\n    public void processFilesInDirectory(String directoryPath) {\r\n        File directory = new File(directoryPath);\r\n        \r\n        logger.info(\"Processing files in directory: \" + directoryPath);\r\n | \r\n    public void processFilesInDirectory(String directoryPath) {\r\n        File directory = new File(directoryPath);\r\n        \r\n        logger.info(\"Processing files in directory: \" + directoryPath);\r\n",
                        "nextNode": "directory"
                    },
                    {
                        "name": "directory",
                        "type": "Dataflow from `directoryPath` to `directory`\nDataflow from `new File(...)` to `directory`\nDataflow from `\"/usr/local/photos\"` to `directory`",
                        "context": "\r\n        // Check if directory exists and is indeed a directory\r\n        if (directory.exists() && directory.isDirectory()) {\r\n            File[] files = directory.listFiles();\r\n\r\n | \r\n        // Check if directory exists and is indeed a directory\r\n        if (directory.exists() && directory.isDirectory()) {\r\n            File[] files = directory.listFiles();\r\n\r\n | \r\n        // Check if directory exists and is indeed a directory\r\n        if (directory.exists() && directory.isDirectory()) {\r\n            File[] files = directory.listFiles();\r\n\r\n | \r\n        // Check if directory exists and is indeed a directory\r\n        if (directory.exists() && directory.isDirectory()) {\r\n            File[] files = directory.listFiles();\r\n\r\n | \r\n        // Check if directory exists and is indeed a directory\r\n        if (directory.exists() && directory.isDirectory()) {\r\n            File[] files = directory.listFiles();\r\n\r\n |         // Check if directory exists and is indeed a directory\r\n        if (directory.exists() && directory.isDirectory()) {\r\n            File[] files = directory.listFiles();\r\n\r\n            if (files != null) {\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "No files found in directory:",
                "isSensitive": "no"
            },
            {
                "name": "File size (bytes):",
                "isSensitive": "no"
            },
            {
                "name": "/usr/local/photos",
                "isSensitive": "yes"
            },
            {
                "name": "Processing files in directory:",
                "isSensitive": "no"
            },
            {
                "name": "The path provided does not exist or is not a directory:",
                "isSensitive": "no"
            },
            {
                "name": "Encountered nested directory:",
                "isSensitive": "no"
            },
            {
                "name": "Processing file:",
                "isSensitive": "no"
            }
        ],
        "comments": [
            {
                "name": "Simulate processing each file (e.g., reading, moving, or updating files)",
                "isSensitive": "no"
            },
            {
                "name": "Check if directory exists and is indeed a directory",
                "isSensitive": "no"
            }
        ],
        "sinks": [
            {
                "name": "warn",
                "isSink": "yes"
            },
            {
                "name": "processFilesInDirectory",
                "isSink": "no"
            },
            {
                "name": "getName",
                "isSink": "no"
            },
            {
                "name": "debug",
                "isSink": "yes"
            },
            {
                "name": "isFile",
                "isSink": "no"
            },
            {
                "name": "length",
                "isSink": "no"
            },
            {
                "name": "getLogger",
                "isSink": "no"
            },
            {
                "name": "exists",
                "isSink": "no"
            },
            {
                "name": "error",
                "isSink": "yes"
            },
            {
                "name": "listFiles",
                "isSink": "no"
            },
            {
                "name": "isDirectory",
                "isSink": "no"
            },
            {
                "name": "info",
                "isSink": "yes"
            }
        ]
    },
    {
        "fileName": "GOOD_DocumentAccessServlet.java",
        "variables": [
            {
                "name": "request",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "response",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "filePath",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "requestedFileName",
                        "type": "String",
                        "context": "\r\n        // Validate the requested file name to prevent directory traversal attacks\r\n        if (requestedFileName != null && requestedFileName.matches(\"[a-zA-Z0-9_\\\\-\\\\.]+\")) {\r\n            Path fileDirectory = Paths.get(getServletContext().getRealPath(\"/uploaded-documents\"));\r\n            Path filePath = fileDirectory.resolve(requestedFileName).normalize();\r\n | \r\n        // Validate the requested file name to prevent directory traversal attacks\r\n        if (requestedFileName != null && requestedFileName.matches(\"[a-zA-Z0-9_\\\\-\\\\.]+\")) {\r\n            Path fileDirectory = Paths.get(getServletContext().getRealPath(\"/uploaded-documents\"));\r\n            Path filePath = fileDirectory.resolve(requestedFileName).normalize();\r\n |         if (requestedFileName != null && requestedFileName.matches(\"[a-zA-Z0-9_\\\\-\\\\.]+\")) {\r\n            Path fileDirectory = Paths.get(getServletContext().getRealPath(\"/uploaded-documents\"));\r\n            Path filePath = fileDirectory.resolve(requestedFileName).normalize();\r\n\r\n            // Ensure the requested file is within the safe directory and exists\r\n | \r\n        // Validate the requested file name to prevent directory traversal attacks\r\n        if (requestedFileName != null && requestedFileName.matches(\"[a-zA-Z0-9_\\\\-\\\\.]+\")) {\r\n            Path fileDirectory = Paths.get(getServletContext().getRealPath(\"/uploaded-documents\"));\r\n            Path filePath = fileDirectory.resolve(requestedFileName).normalize();\r\n | \r\n        // Validate the requested file name to prevent directory traversal attacks\r\n        if (requestedFileName != null && requestedFileName.matches(\"[a-zA-Z0-9_\\\\-\\\\.]+\")) {\r\n            Path fileDirectory = Paths.get(getServletContext().getRealPath(\"/uploaded-documents\"));\r\n            Path filePath = fileDirectory.resolve(requestedFileName).normalize();\r\n |         if (requestedFileName != null && requestedFileName.matches(\"[a-zA-Z0-9_\\\\-\\\\.]+\")) {\r\n            Path fileDirectory = Paths.get(getServletContext().getRealPath(\"/uploaded-documents\"));\r\n            Path filePath = fileDirectory.resolve(requestedFileName).normalize();\r\n\r\n            // Ensure the requested file is within the safe directory and exists\r\n | \r\n        // Validate the requested file name to prevent directory traversal attacks\r\n        if (requestedFileName != null && requestedFileName.matches(\"[a-zA-Z0-9_\\\\-\\\\.]+\")) {\r\n            Path fileDirectory = Paths.get(getServletContext().getRealPath(\"/uploaded-documents\"));\r\n            Path filePath = fileDirectory.resolve(requestedFileName).normalize();\r\n | \r\n        // Validate the requested file name to prevent directory traversal attacks\r\n        if (requestedFileName != null && requestedFileName.matches(\"[a-zA-Z0-9_\\\\-\\\\.]+\")) {\r\n            Path fileDirectory = Paths.get(getServletContext().getRealPath(\"/uploaded-documents\"));\r\n            Path filePath = fileDirectory.resolve(requestedFileName).normalize();\r\n |         if (requestedFileName != null && requestedFileName.matches(\"[a-zA-Z0-9_\\\\-\\\\.]+\")) {\r\n            Path fileDirectory = Paths.get(getServletContext().getRealPath(\"/uploaded-documents\"));\r\n            Path filePath = fileDirectory.resolve(requestedFileName).normalize();\r\n\r\n            // Ensure the requested file is within the safe directory and exists\r\n",
                        "nextNode": "fileDirectory.resolve(requestedFileName)"
                    },
                    {
                        "name": "fileDirectory.resolve(requestedFileName)",
                        "type": "Path",
                        "context": "        if (requestedFileName != null && requestedFileName.matches(\"[a-zA-Z0-9_\\\\-\\\\.]+\")) {\r\n            Path fileDirectory = Paths.get(getServletContext().getRealPath(\"/uploaded-documents\"));\r\n            Path filePath = fileDirectory.resolve(requestedFileName).normalize();\r\n\r\n            // Ensure the requested file is within the safe directory and exists\r\n |         if (requestedFileName != null && requestedFileName.matches(\"[a-zA-Z0-9_\\\\-\\\\.]+\")) {\r\n            Path fileDirectory = Paths.get(getServletContext().getRealPath(\"/uploaded-documents\"));\r\n            Path filePath = fileDirectory.resolve(requestedFileName).normalize();\r\n\r\n            // Ensure the requested file is within the safe directory and exists\r\n |         if (requestedFileName != null && requestedFileName.matches(\"[a-zA-Z0-9_\\\\-\\\\.]+\")) {\r\n            Path fileDirectory = Paths.get(getServletContext().getRealPath(\"/uploaded-documents\"));\r\n            Path filePath = fileDirectory.resolve(requestedFileName).normalize();\r\n\r\n            // Ensure the requested file is within the safe directory and exists\r\n",
                        "nextNode": "fileDirectory.resolve(requestedFileName).normalize()"
                    },
                    {
                        "name": "fileDirectory.resolve(requestedFileName).normalize()",
                        "type": "Path",
                        "context": "        if (requestedFileName != null && requestedFileName.matches(\"[a-zA-Z0-9_\\\\-\\\\.]+\")) {\r\n            Path fileDirectory = Paths.get(getServletContext().getRealPath(\"/uploaded-documents\"));\r\n            Path filePath = fileDirectory.resolve(requestedFileName).normalize();\r\n\r\n            // Ensure the requested file is within the safe directory and exists\r\n |         if (requestedFileName != null && requestedFileName.matches(\"[a-zA-Z0-9_\\\\-\\\\.]+\")) {\r\n            Path fileDirectory = Paths.get(getServletContext().getRealPath(\"/uploaded-documents\"));\r\n            Path filePath = fileDirectory.resolve(requestedFileName).normalize();\r\n\r\n            // Ensure the requested file is within the safe directory and exists\r\n |         if (requestedFileName != null && requestedFileName.matches(\"[a-zA-Z0-9_\\\\-\\\\.]+\")) {\r\n            Path fileDirectory = Paths.get(getServletContext().getRealPath(\"/uploaded-documents\"));\r\n            Path filePath = fileDirectory.resolve(requestedFileName).normalize();\r\n\r\n            // Ensure the requested file is within the safe directory and exists\r\n",
                        "nextNode": "filePath"
                    },
                    {
                        "name": "filePath",
                        "type": "Dataflow from `requestedFileName` to `filePath`\nDataflow from `requestedFileName` to `filePath`\nDataflow from `fileDirectory` to `filePath`\nDataflow from `requestedFileName` to `filePath`\nDataflow from `resolve(...)` to `filePath`\nDataflow from `normalize(...)` to `filePath`\nDataflow from `getParameter(...)` to `filePath`\nDataflow from `get(...)` to `filePath`\nDataflow from `getRealPath(...)` to `filePath`\nDataflow from `\"filename\"` to `filePath`\nDataflow from `\"/uploaded-documents\"` to `filePath`",
                        "context": "\r\n            // Ensure the requested file is within the safe directory and exists\r\n            if (filePath.startsWith(fileDirectory) && Files.exists(filePath)) {\r\n                response.setContentType(getServletContext().getMimeType(requestedFileName));\r\n                Files.copy(filePath, response.getOutputStream());\r\n | \r\n            // Ensure the requested file is within the safe directory and exists\r\n            if (filePath.startsWith(fileDirectory) && Files.exists(filePath)) {\r\n                response.setContentType(getServletContext().getMimeType(requestedFileName));\r\n                Files.copy(filePath, response.getOutputStream());\r\n | \r\n            // Ensure the requested file is within the safe directory and exists\r\n            if (filePath.startsWith(fileDirectory) && Files.exists(filePath)) {\r\n                response.setContentType(getServletContext().getMimeType(requestedFileName));\r\n                Files.copy(filePath, response.getOutputStream());\r\n | \r\n            // Ensure the requested file is within the safe directory and exists\r\n            if (filePath.startsWith(fileDirectory) && Files.exists(filePath)) {\r\n                response.setContentType(getServletContext().getMimeType(requestedFileName));\r\n                Files.copy(filePath, response.getOutputStream());\r\n | \r\n            // Ensure the requested file is within the safe directory and exists\r\n            if (filePath.startsWith(fileDirectory) && Files.exists(filePath)) {\r\n                response.setContentType(getServletContext().getMimeType(requestedFileName));\r\n                Files.copy(filePath, response.getOutputStream());\r\n |             if (filePath.startsWith(fileDirectory) && Files.exists(filePath)) {\r\n                response.setContentType(getServletContext().getMimeType(requestedFileName));\r\n                Files.copy(filePath, response.getOutputStream());\r\n            } else {\r\n                // File does not exist or attempting directory traversal\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "requestedFileName",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "request.getParameter(\"filename\")",
                        "type": "String",
                        "context": "public class GOOD_DocumentAccessServlet extends HttpServlet {\r\n    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\r\n        String requestedFileName = request.getParameter(\"filename\");\r\n\r\n        // Validate the requested file name to prevent directory traversal attacks\r\n | public class GOOD_DocumentAccessServlet extends HttpServlet {\r\n    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\r\n        String requestedFileName = request.getParameter(\"filename\");\r\n\r\n        // Validate the requested file name to prevent directory traversal attacks\r\n | public class GOOD_DocumentAccessServlet extends HttpServlet {\r\n    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\r\n        String requestedFileName = request.getParameter(\"filename\");\r\n\r\n        // Validate the requested file name to prevent directory traversal attacks\r\n | public class GOOD_DocumentAccessServlet extends HttpServlet {\r\n    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\r\n        String requestedFileName = request.getParameter(\"filename\");\r\n\r\n        // Validate the requested file name to prevent directory traversal attacks\r\n",
                        "nextNode": "requestedFileName"
                    },
                    {
                        "name": "requestedFileName",
                        "type": "Dataflow from `getParameter(...)` to `requestedFileName`\nDataflow from `\"filename\"` to `requestedFileName`",
                        "context": "\r\n        // Validate the requested file name to prevent directory traversal attacks\r\n        if (requestedFileName != null && requestedFileName.matches(\"[a-zA-Z0-9_\\\\-\\\\.]+\")) {\r\n            Path fileDirectory = Paths.get(getServletContext().getRealPath(\"/uploaded-documents\"));\r\n            Path filePath = fileDirectory.resolve(requestedFileName).normalize();\r\n | \r\n        // Validate the requested file name to prevent directory traversal attacks\r\n        if (requestedFileName != null && requestedFileName.matches(\"[a-zA-Z0-9_\\\\-\\\\.]+\")) {\r\n            Path fileDirectory = Paths.get(getServletContext().getRealPath(\"/uploaded-documents\"));\r\n            Path filePath = fileDirectory.resolve(requestedFileName).normalize();\r\n | \r\n        // Validate the requested file name to prevent directory traversal attacks\r\n        if (requestedFileName != null && requestedFileName.matches(\"[a-zA-Z0-9_\\\\-\\\\.]+\")) {\r\n            Path fileDirectory = Paths.get(getServletContext().getRealPath(\"/uploaded-documents\"));\r\n            Path filePath = fileDirectory.resolve(requestedFileName).normalize();\r\n | \r\n        // Validate the requested file name to prevent directory traversal attacks\r\n        if (requestedFileName != null && requestedFileName.matches(\"[a-zA-Z0-9_\\\\-\\\\.]+\")) {\r\n            Path fileDirectory = Paths.get(getServletContext().getRealPath(\"/uploaded-documents\"));\r\n            Path filePath = fileDirectory.resolve(requestedFileName).normalize();\r\n | \r\n        // Validate the requested file name to prevent directory traversal attacks\r\n        if (requestedFileName != null && requestedFileName.matches(\"[a-zA-Z0-9_\\\\-\\\\.]+\")) {\r\n            Path fileDirectory = Paths.get(getServletContext().getRealPath(\"/uploaded-documents\"));\r\n            Path filePath = fileDirectory.resolve(requestedFileName).normalize();\r\n |         if (requestedFileName != null && requestedFileName.matches(\"[a-zA-Z0-9_\\\\-\\\\.]+\")) {\r\n            Path fileDirectory = Paths.get(getServletContext().getRealPath(\"/uploaded-documents\"));\r\n            Path filePath = fileDirectory.resolve(requestedFileName).normalize();\r\n\r\n            // Ensure the requested file is within the safe directory and exists\r\n | \r\n        // Validate the requested file name to prevent directory traversal attacks\r\n        if (requestedFileName != null && requestedFileName.matches(\"[a-zA-Z0-9_\\\\-\\\\.]+\")) {\r\n            Path fileDirectory = Paths.get(getServletContext().getRealPath(\"/uploaded-documents\"));\r\n            Path filePath = fileDirectory.resolve(requestedFileName).normalize();\r\n | \r\n        // Validate the requested file name to prevent directory traversal attacks\r\n        if (requestedFileName != null && requestedFileName.matches(\"[a-zA-Z0-9_\\\\-\\\\.]+\")) {\r\n            Path fileDirectory = Paths.get(getServletContext().getRealPath(\"/uploaded-documents\"));\r\n            Path filePath = fileDirectory.resolve(requestedFileName).normalize();\r\n |         if (requestedFileName != null && requestedFileName.matches(\"[a-zA-Z0-9_\\\\-\\\\.]+\")) {\r\n            Path fileDirectory = Paths.get(getServletContext().getRealPath(\"/uploaded-documents\"));\r\n            Path filePath = fileDirectory.resolve(requestedFileName).normalize();\r\n\r\n            // Ensure the requested file is within the safe directory and exists\r\n |             // Ensure the requested file is within the safe directory and exists\r\n            if (filePath.startsWith(fileDirectory) && Files.exists(filePath)) {\r\n                response.setContentType(getServletContext().getMimeType(requestedFileName));\r\n                Files.copy(filePath, response.getOutputStream());\r\n            } else {\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "fileDirectory",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "Paths.get(getServletContext().getRealPath(\"/uploaded-documents\")",
                        "type": "Path",
                        "context": "        // Validate the requested file name to prevent directory traversal attacks\r\n        if (requestedFileName != null && requestedFileName.matches(\"[a-zA-Z0-9_\\\\-\\\\.]+\")) {\r\n            Path fileDirectory = Paths.get(getServletContext().getRealPath(\"/uploaded-documents\"));\r\n            Path filePath = fileDirectory.resolve(requestedFileName).normalize();\r\n\r\n |         // Validate the requested file name to prevent directory traversal attacks\r\n        if (requestedFileName != null && requestedFileName.matches(\"[a-zA-Z0-9_\\\\-\\\\.]+\")) {\r\n            Path fileDirectory = Paths.get(getServletContext().getRealPath(\"/uploaded-documents\"));\r\n            Path filePath = fileDirectory.resolve(requestedFileName).normalize();\r\n\r\n",
                        "nextNode": "fileDirectory"
                    },
                    {
                        "name": "fileDirectory",
                        "type": "Dataflow from `get(...)` to `fileDirectory`\nDataflow from `getRealPath(...)` to `fileDirectory`\nDataflow from `\"/uploaded-documents\"` to `fileDirectory`",
                        "context": "        if (requestedFileName != null && requestedFileName.matches(\"[a-zA-Z0-9_\\\\-\\\\.]+\")) {\r\n            Path fileDirectory = Paths.get(getServletContext().getRealPath(\"/uploaded-documents\"));\r\n            Path filePath = fileDirectory.resolve(requestedFileName).normalize();\r\n\r\n            // Ensure the requested file is within the safe directory and exists\r\n |         if (requestedFileName != null && requestedFileName.matches(\"[a-zA-Z0-9_\\\\-\\\\.]+\")) {\r\n            Path fileDirectory = Paths.get(getServletContext().getRealPath(\"/uploaded-documents\"));\r\n            Path filePath = fileDirectory.resolve(requestedFileName).normalize();\r\n\r\n            // Ensure the requested file is within the safe directory and exists\r\n | \r\n            // Ensure the requested file is within the safe directory and exists\r\n            if (filePath.startsWith(fileDirectory) && Files.exists(filePath)) {\r\n                response.setContentType(getServletContext().getMimeType(requestedFileName));\r\n                Files.copy(filePath, response.getOutputStream());\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "Invalid or missing file name.",
                "isSensitive": "no"
            },
            {
                "name": "filename",
                "isSensitive": "no"
            },
            {
                "name": "/uploaded-documents",
                "isSensitive": "no"
            },
            {
                "name": "[a-zA-Z0-9_-.]+",
                "isSensitive": "no"
            },
            {
                "name": "File not found or access denied.",
                "isSensitive": "no"
            }
        ],
        "comments": [
            {
                "name": "GOOD: Securely serves files without exposing directory listings.",
                "isSensitive": "no"
            },
            {
                "name": "File does not exist or attempting directory traversal",
                "isSensitive": "no"
            },
            {
                "name": "Invalid file request",
                "isSensitive": "no"
            },
            {
                "name": "Ensure the requested file is within the safe directory and exists",
                "isSensitive": "no"
            },
            {
                "name": "Validate the requested file name to prevent directory traversal attacks",
                "isSensitive": "no"
            }
        ],
        "sinks": [
            {
                "name": "getServletContext",
                "isSink": "no"
            },
            {
                "name": "resolve",
                "isSink": "no"
            },
            {
                "name": "getMimeType",
                "isSink": "no"
            },
            {
                "name": "sendError",
                "isSink": "yes"
            },
            {
                "name": "getRealPath",
                "isSink": "no"
            },
            {
                "name": "matches",
                "isSink": "no"
            },
            {
                "name": "get",
                "isSink": "no"
            },
            {
                "name": "normalize",
                "isSink": "no"
            },
            {
                "name": "exists",
                "isSink": "no"
            },
            {
                "name": "getOutputStream",
                "isSink": "yes"
            },
            {
                "name": "setContentType",
                "isSink": "no"
            },
            {
                "name": "copy",
                "isSink": "yes"
            },
            {
                "name": "getParameter",
                "isSink": "no"
            },
            {
                "name": "startsWith",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "GOOD_SecureBackendFileProcessingServlet.java",
        "variables": [
            {
                "name": "tempDirectory",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "tempFilesPath",
                        "type": "String",
                        "context": "        // Path to a directory containing temporary files\r\n        String tempFilesPath = getServletContext().getRealPath(\"/temp-files\");\r\n        File tempDirectory = new File(tempFilesPath);\r\n\r\n        // Verify the directory exists and is a directory\r\n |         // Path to a directory containing temporary files\r\n        String tempFilesPath = getServletContext().getRealPath(\"/temp-files\");\r\n        File tempDirectory = new File(tempFilesPath);\r\n\r\n        // Verify the directory exists and is a directory\r\n |         // Path to a directory containing temporary files\r\n        String tempFilesPath = getServletContext().getRealPath(\"/temp-files\");\r\n        File tempDirectory = new File(tempFilesPath);\r\n\r\n        // Verify the directory exists and is a directory\r\n",
                        "nextNode": "new File(tempFilesPath)"
                    },
                    {
                        "name": "new File(tempFilesPath)",
                        "type": "File",
                        "context": "        // Path to a directory containing temporary files\r\n        String tempFilesPath = getServletContext().getRealPath(\"/temp-files\");\r\n        File tempDirectory = new File(tempFilesPath);\r\n\r\n        // Verify the directory exists and is a directory\r\n |         // Path to a directory containing temporary files\r\n        String tempFilesPath = getServletContext().getRealPath(\"/temp-files\");\r\n        File tempDirectory = new File(tempFilesPath);\r\n\r\n        // Verify the directory exists and is a directory\r\n |         // Path to a directory containing temporary files\r\n        String tempFilesPath = getServletContext().getRealPath(\"/temp-files\");\r\n        File tempDirectory = new File(tempFilesPath);\r\n\r\n        // Verify the directory exists and is a directory\r\n",
                        "nextNode": "tempDirectory"
                    },
                    {
                        "name": "tempDirectory",
                        "type": "Dataflow from `tempFilesPath` to `tempDirectory`\nDataflow from `new File(...)` to `tempDirectory`\nDataflow from `getRealPath(...)` to `tempDirectory`\nDataflow from `\"/temp-files\"` to `tempDirectory`",
                        "context": "\r\n        // Verify the directory exists and is a directory\r\n        if (!tempDirectory.exists() || !tempDirectory.isDirectory()) {\r\n            System.err.println(\"Temporary files directory does not exist or is not a directory.\");\r\n            return;\r\n | \r\n        // Verify the directory exists and is a directory\r\n        if (!tempDirectory.exists() || !tempDirectory.isDirectory()) {\r\n            System.err.println(\"Temporary files directory does not exist or is not a directory.\");\r\n            return;\r\n | \r\n        // Verify the directory exists and is a directory\r\n        if (!tempDirectory.exists() || !tempDirectory.isDirectory()) {\r\n            System.err.println(\"Temporary files directory does not exist or is not a directory.\");\r\n            return;\r\n | \r\n        // Verify the directory exists and is a directory\r\n        if (!tempDirectory.exists() || !tempDirectory.isDirectory()) {\r\n            System.err.println(\"Temporary files directory does not exist or is not a directory.\");\r\n            return;\r\n | \r\n        // Verify the directory exists and is a directory\r\n        if (!tempDirectory.exists() || !tempDirectory.isDirectory()) {\r\n            System.err.println(\"Temporary files directory does not exist or is not a directory.\");\r\n            return;\r\n |         }\r\n\r\n        for (File file : tempDirectory.listFiles()) {\r\n            if (file.isFile() && isOlderThanOneDay(file.lastModified())) {\r\n                boolean deleted = file.delete();\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "request",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "deleted",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "file.delete()",
                        "type": "Boolean",
                        "context": "        for (File file : tempDirectory.listFiles()) {\r\n            if (file.isFile() && isOlderThanOneDay(file.lastModified())) {\r\n                boolean deleted = file.delete();\r\n                if (deleted) {\r\n                    System.out.println(\"Deleted old temporary file.\");\r\n",
                        "nextNode": "deleted"
                    },
                    {
                        "name": "deleted",
                        "type": "Dataflow from `delete(...)` to `deleted`",
                        "context": "            if (file.isFile() && isOlderThanOneDay(file.lastModified())) {\r\n                boolean deleted = file.delete();\r\n                if (deleted) {\r\n                    System.out.println(\"Deleted old temporary file.\");\r\n                } else {\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "file",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "tempFilesPath",
                        "type": "String",
                        "context": "        // Path to a directory containing temporary files\r\n        String tempFilesPath = getServletContext().getRealPath(\"/temp-files\");\r\n        File tempDirectory = new File(tempFilesPath);\r\n\r\n        // Verify the directory exists and is a directory\r\n |         // Path to a directory containing temporary files\r\n        String tempFilesPath = getServletContext().getRealPath(\"/temp-files\");\r\n        File tempDirectory = new File(tempFilesPath);\r\n\r\n        // Verify the directory exists and is a directory\r\n |         // Path to a directory containing temporary files\r\n        String tempFilesPath = getServletContext().getRealPath(\"/temp-files\");\r\n        File tempDirectory = new File(tempFilesPath);\r\n\r\n        // Verify the directory exists and is a directory\r\n",
                        "nextNode": "new File(tempFilesPath)"
                    },
                    {
                        "name": "new File(tempFilesPath)",
                        "type": "File",
                        "context": "        // Path to a directory containing temporary files\r\n        String tempFilesPath = getServletContext().getRealPath(\"/temp-files\");\r\n        File tempDirectory = new File(tempFilesPath);\r\n\r\n        // Verify the directory exists and is a directory\r\n |         // Path to a directory containing temporary files\r\n        String tempFilesPath = getServletContext().getRealPath(\"/temp-files\");\r\n        File tempDirectory = new File(tempFilesPath);\r\n\r\n        // Verify the directory exists and is a directory\r\n |         // Path to a directory containing temporary files\r\n        String tempFilesPath = getServletContext().getRealPath(\"/temp-files\");\r\n        File tempDirectory = new File(tempFilesPath);\r\n\r\n        // Verify the directory exists and is a directory\r\n",
                        "nextNode": "tempDirectory"
                    },
                    {
                        "name": "tempDirectory",
                        "type": "File",
                        "context": "\r\n        // Verify the directory exists and is a directory\r\n        if (!tempDirectory.exists() || !tempDirectory.isDirectory()) {\r\n            System.err.println(\"Temporary files directory does not exist or is not a directory.\");\r\n            return;\r\n | \r\n        // Verify the directory exists and is a directory\r\n        if (!tempDirectory.exists() || !tempDirectory.isDirectory()) {\r\n            System.err.println(\"Temporary files directory does not exist or is not a directory.\");\r\n            return;\r\n |         }\r\n\r\n        for (File file : tempDirectory.listFiles()) {\r\n            if (file.isFile() && isOlderThanOneDay(file.lastModified())) {\r\n                boolean deleted = file.delete();\r\n | \r\n        // Verify the directory exists and is a directory\r\n        if (!tempDirectory.exists() || !tempDirectory.isDirectory()) {\r\n            System.err.println(\"Temporary files directory does not exist or is not a directory.\");\r\n            return;\r\n | \r\n        // Verify the directory exists and is a directory\r\n        if (!tempDirectory.exists() || !tempDirectory.isDirectory()) {\r\n            System.err.println(\"Temporary files directory does not exist or is not a directory.\");\r\n            return;\r\n |         }\r\n\r\n        for (File file : tempDirectory.listFiles()) {\r\n            if (file.isFile() && isOlderThanOneDay(file.lastModified())) {\r\n                boolean deleted = file.delete();\r\n | \r\n        // Verify the directory exists and is a directory\r\n        if (!tempDirectory.exists() || !tempDirectory.isDirectory()) {\r\n            System.err.println(\"Temporary files directory does not exist or is not a directory.\");\r\n            return;\r\n | \r\n        // Verify the directory exists and is a directory\r\n        if (!tempDirectory.exists() || !tempDirectory.isDirectory()) {\r\n            System.err.println(\"Temporary files directory does not exist or is not a directory.\");\r\n            return;\r\n |         }\r\n\r\n        for (File file : tempDirectory.listFiles()) {\r\n            if (file.isFile() && isOlderThanOneDay(file.lastModified())) {\r\n                boolean deleted = file.delete();\r\n",
                        "nextNode": "tempDirectory.listFiles()"
                    },
                    {
                        "name": "tempDirectory.listFiles()",
                        "type": "File[]",
                        "context": "        }\r\n\r\n        for (File file : tempDirectory.listFiles()) {\r\n            if (file.isFile() && isOlderThanOneDay(file.lastModified())) {\r\n                boolean deleted = file.delete();\r\n |         }\r\n\r\n        for (File file : tempDirectory.listFiles()) {\r\n            if (file.isFile() && isOlderThanOneDay(file.lastModified())) {\r\n                boolean deleted = file.delete();\r\n |         }\r\n\r\n        for (File file : tempDirectory.listFiles()) {\r\n            if (file.isFile() && isOlderThanOneDay(file.lastModified())) {\r\n                boolean deleted = file.delete();\r\n",
                        "nextNode": "file"
                    },
                    {
                        "name": "file",
                        "type": "Dataflow from `tempFilesPath` to `file`\nDataflow from `tempDirectory` to `file`\nDataflow from `tempDirectory` to `file`\nDataflow from `tempDirectory` to `file`\nDataflow from `new File(...)` to `file`\nDataflow from `listFiles(...)` to `file`\nDataflow from `getRealPath(...)` to `file`\nDataflow from `\"/temp-files\"` to `file`",
                        "context": "\r\n        for (File file : tempDirectory.listFiles()) {\r\n            if (file.isFile() && isOlderThanOneDay(file.lastModified())) {\r\n                boolean deleted = file.delete();\r\n                if (deleted) {\r\n | \r\n        for (File file : tempDirectory.listFiles()) {\r\n            if (file.isFile() && isOlderThanOneDay(file.lastModified())) {\r\n                boolean deleted = file.delete();\r\n                if (deleted) {\r\n | \r\n        for (File file : tempDirectory.listFiles()) {\r\n            if (file.isFile() && isOlderThanOneDay(file.lastModified())) {\r\n                boolean deleted = file.delete();\r\n                if (deleted) {\r\n | \r\n        for (File file : tempDirectory.listFiles()) {\r\n            if (file.isFile() && isOlderThanOneDay(file.lastModified())) {\r\n                boolean deleted = file.delete();\r\n                if (deleted) {\r\n | \r\n        for (File file : tempDirectory.listFiles()) {\r\n            if (file.isFile() && isOlderThanOneDay(file.lastModified())) {\r\n                boolean deleted = file.delete();\r\n                if (deleted) {\r\n |         for (File file : tempDirectory.listFiles()) {\r\n            if (file.isFile() && isOlderThanOneDay(file.lastModified())) {\r\n                boolean deleted = file.delete();\r\n                if (deleted) {\r\n                    System.out.println(\"Deleted old temporary file.\");\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "tempFilesPath",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "getServletContext().getRealPath(\"/temp-files\")",
                        "type": "String",
                        "context": "    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\r\n        // Path to a directory containing temporary files\r\n        String tempFilesPath = getServletContext().getRealPath(\"/temp-files\");\r\n        File tempDirectory = new File(tempFilesPath);\r\n\r\n",
                        "nextNode": "tempFilesPath"
                    },
                    {
                        "name": "tempFilesPath",
                        "type": "Dataflow from `getRealPath(...)` to `tempFilesPath`\nDataflow from `\"/temp-files\"` to `tempFilesPath`",
                        "context": "        // Path to a directory containing temporary files\r\n        String tempFilesPath = getServletContext().getRealPath(\"/temp-files\");\r\n        File tempDirectory = new File(tempFilesPath);\r\n\r\n        // Verify the directory exists and is a directory\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "response",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "fileTimestamp",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "file.lastModified()",
                        "type": "Number",
                        "context": "\r\n        for (File file : tempDirectory.listFiles()) {\r\n            if (file.isFile() && isOlderThanOneDay(file.lastModified())) {\r\n                boolean deleted = file.delete();\r\n                if (deleted) {\r\n",
                        "nextNode": "long fileTimestamp"
                    },
                    {
                        "name": "long fileTimestamp",
                        "type": "Number",
                        "context": "    }\r\n\r\n    private boolean isOlderThanOneDay(long fileTimestamp) {\r\n        // Check if the file's last modified timestamp is older than one day\r\n        final long oneDayInMillis = 24 * 60 * 60 * 1000;\r\n",
                        "nextNode": "fileTimestamp"
                    },
                    {
                        "name": "fileTimestamp",
                        "type": "Dataflow from `lastModified(...)` to `fileTimestamp`",
                        "context": "        // Check if the file's last modified timestamp is older than one day\r\n        final long oneDayInMillis = 24 * 60 * 60 * 1000;\r\n        long age = new Date().getTime() - fileTimestamp;\r\n        return age > oneDayInMillis;\r\n    }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "oneDayInMillis",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "age",
                "isSensitive": "no",
                "graph": []
            }
        ],
        "strings": [
            {
                "name": "Temporary files directory does not exist or is not a directory.",
                "isSensitive": "no"
            },
            {
                "name": "Failed to delete temporary file.",
                "isSensitive": "no"
            },
            {
                "name": "Deleted old temporary file.",
                "isSensitive": "no"
            },
            {
                "name": "/temp-files",
                "isSensitive": "no"
            }
        ],
        "comments": [
            {
                "name": "Verify the directory exists and is a directory",
                "isSensitive": "no"
            },
            {
                "name": "Check if the file's last modified timestamp is older than one day",
                "isSensitive": "no"
            },
            {
                "name": "Path to a directory containing temporary files",
                "isSensitive": "no"
            }
        ],
        "sinks": [
            {
                "name": "println",
                "isSink": "yes"
            },
            {
                "name": "getServletContext",
                "isSink": "no"
            },
            {
                "name": "isFile",
                "isSink": "no"
            },
            {
                "name": "isOlderThanOneDay",
                "isSink": "no"
            },
            {
                "name": "getTime",
                "isSink": "no"
            },
            {
                "name": "exists",
                "isSink": "no"
            },
            {
                "name": "getRealPath",
                "isSink": "no"
            },
            {
                "name": "lastModified",
                "isSink": "no"
            },
            {
                "name": "delete",
                "isSink": "yes"
            },
            {
                "name": "listFiles",
                "isSink": "no"
            },
            {
                "name": "isDirectory",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "BAD_AuthenticationFailureServlet.java",
        "variables": [
            {
                "name": "request",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "password",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "request.getParameter(\"password\")",
                        "type": "String",
                        "context": "    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException {\r\n        try {\r\n            authenticateUser(request.getParameter(\"username\"), request.getParameter(\"password\"));\r\n        } catch (Exception e) {\r\n            response.getWriter().write(\"Authentication failed: \" + e.getMessage());\r\n",
                        "nextNode": "String password"
                    },
                    {
                        "name": "String password",
                        "type": "String",
                        "context": "    }\r\n\r\n    private void authenticateUser(String username, String password) throws Exception {\r\n        if (username == null || password == null) {\r\n            throw new Exception(\"Username or password is null\");\r\n",
                        "nextNode": "password"
                    },
                    {
                        "name": "password",
                        "type": "Dataflow from `getParameter(...)` to `password`\nDataflow from `\"password\"` to `password`",
                        "context": "\r\n    private void authenticateUser(String username, String password) throws Exception {\r\n        if (username == null || password == null) {\r\n            throw new Exception(\"Username or password is null\");\r\n        }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "e",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "response",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "username",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "request.getParameter(\"username\")",
                        "type": "String",
                        "context": "    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException {\r\n        try {\r\n            authenticateUser(request.getParameter(\"username\"), request.getParameter(\"password\"));\r\n        } catch (Exception e) {\r\n            response.getWriter().write(\"Authentication failed: \" + e.getMessage());\r\n |     protected void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException {\r\n        try {\r\n            authenticateUser(request.getParameter(\"username\"), request.getParameter(\"password\"));\r\n        } catch (Exception e) {\r\n            response.getWriter().write(\"Authentication failed: \" + e.getMessage());\r\n",
                        "nextNode": "String username"
                    },
                    {
                        "name": "String username",
                        "type": "String",
                        "context": "    }\r\n\r\n    private void authenticateUser(String username, String password) throws Exception {\r\n        if (username == null || password == null) {\r\n            throw new Exception(\"Username or password is null\");\r\n |     }\r\n\r\n    private void authenticateUser(String username, String password) throws Exception {\r\n        if (username == null || password == null) {\r\n            throw new Exception(\"Username or password is null\");\r\n",
                        "nextNode": "username"
                    },
                    {
                        "name": "username",
                        "type": "Dataflow from `getParameter(...)` to `username`\nDataflow from `\"username\"` to `username`",
                        "context": "\r\n    private void authenticateUser(String username, String password) throws Exception {\r\n        if (username == null || password == null) {\r\n            throw new Exception(\"Username or password is null\");\r\n        }\r\n | \r\n    private void authenticateUser(String username, String password) throws Exception {\r\n        if (username == null || password == null) {\r\n            throw new Exception(\"Username or password is null\");\r\n        }\r\n |         }\r\n        // Authentication logic that might fail\r\n        throw new Exception(\"Invalid credentials provided for user \" + username);\r\n    }\r\n}\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "Authentication failed:",
                "isSensitive": "no"
            },
            {
                "name": "password",
                "isSensitive": "no"
            },
            {
                "name": "Invalid credentials provided for user",
                "isSensitive": "no"
            },
            {
                "name": "Username or password is null",
                "isSensitive": "no"
            },
            {
                "name": "username",
                "isSensitive": "no"
            }
        ],
        "comments": [
            {
                "name": "Authentication logic that might fail",
                "isSensitive": "no"
            }
        ],
        "sinks": [
            {
                "name": "authenticateUser",
                "isSink": "no"
            },
            {
                "name": "getWriter",
                "isSink": "no"
            },
            {
                "name": "getMessage",
                "isSink": "no"
            },
            {
                "name": "write",
                "isSink": "yes"
            },
            {
                "name": "setStatus",
                "isSink": "yes"
            },
            {
                "name": "getParameter",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "BAD_CloudResourceErrorAPI.java",
        "variables": [
            {
                "name": "resourceID",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "resourseID",
                        "type": "String",
                        "context": "        try {\r\n            // Attempt to retrieve cloud resource that may fail\r\n            return getCloudResource(username, resourseID);\r\n        } catch (Exception e) {\r\n            throw new ResponseStatusException(HttpStatus.INTERNAL_SERVER_ERROR, \"Failed to retrieve cloud resource: \" + e.getMessage(), e);\r\n",
                        "nextNode": "String resourceID"
                    },
                    {
                        "name": "String resourceID",
                        "type": "String",
                        "context": "    }\r\n\r\n    private String getCloudResource(String username, String resourceID) throws Exception {\r\n        throw new Exception(\"Access denied for resource ID \" + resourceID +\", with username - \" + username + \", on AWS due to improper IAM permissions.\");\r\n    }\r\n",
                        "nextNode": "resourceID"
                    },
                    {
                        "name": "resourceID",
                        "type": "Dataflow from `resourseID` to `resourceID`\nDataflow from `\"12345\"` to `resourceID`",
                        "context": "\r\n    private String getCloudResource(String username, String resourceID) throws Exception {\r\n        throw new Exception(\"Access denied for resource ID \" + resourceID +\", with username - \" + username + \", on AWS due to improper IAM permissions.\");\r\n    }\r\n}\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "e",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "resourseID",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "\"12345\"",
                        "type": "String",
                        "context": "    public String getResourceDetails() {\r\n        String username = \"CWE-200-test\";\r\n        String resourseID = \"12345\";\r\n        try {\r\n            // Attempt to retrieve cloud resource that may fail\r\n",
                        "nextNode": "resourseID"
                    },
                    {
                        "name": "resourseID",
                        "type": "Dataflow from `\"12345\"` to `resourseID`",
                        "context": "        try {\r\n            // Attempt to retrieve cloud resource that may fail\r\n            return getCloudResource(username, resourseID);\r\n        } catch (Exception e) {\r\n            throw new ResponseStatusException(HttpStatus.INTERNAL_SERVER_ERROR, \"Failed to retrieve cloud resource: \" + e.getMessage(), e);\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "username",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "\"CWE-200-test\"",
                        "type": "String",
                        "context": "    @GetMapping(\"/api/resource\")\r\n    public String getResourceDetails() {\r\n        String username = \"CWE-200-test\";\r\n        String resourseID = \"12345\";\r\n        try {\r\n |     @GetMapping(\"/api/resource\")\r\n    public String getResourceDetails() {\r\n        String username = \"CWE-200-test\";\r\n        String resourseID = \"12345\";\r\n        try {\r\n",
                        "nextNode": "username"
                    },
                    {
                        "name": "String username",
                        "type": "String",
                        "context": "    }\r\n\r\n    private String getCloudResource(String username, String resourceID) throws Exception {\r\n        throw new Exception(\"Access denied for resource ID \" + resourceID +\", with username - \" + username + \", on AWS due to improper IAM permissions.\");\r\n    }\r\n",
                        "nextNode": "username"
                    },
                    {
                        "name": "username",
                        "type": "Dataflow from `\"CWE-200-test\"` to `username`",
                        "context": "        try {\r\n            // Attempt to retrieve cloud resource that may fail\r\n            return getCloudResource(username, resourseID);\r\n        } catch (Exception e) {\r\n            throw new ResponseStatusException(HttpStatus.INTERNAL_SERVER_ERROR, \"Failed to retrieve cloud resource: \" + e.getMessage(), e);\r\n |         try {\r\n            // Attempt to retrieve cloud resource that may fail\r\n            return getCloudResource(username, resourseID);\r\n        } catch (Exception e) {\r\n            throw new ResponseStatusException(HttpStatus.INTERNAL_SERVER_ERROR, \"Failed to retrieve cloud resource: \" + e.getMessage(), e);\r\n | \r\n    private String getCloudResource(String username, String resourceID) throws Exception {\r\n        throw new Exception(\"Access denied for resource ID \" + resourceID +\", with username - \" + username + \", on AWS due to improper IAM permissions.\");\r\n    }\r\n}\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "Failed to retrieve cloud resource:",
                "isSensitive": "no"
            },
            {
                "name": "CWE-200-test",
                "isSensitive": "yes"
            },
            {
                "name": ", on AWS due to improper IAM permissions.",
                "isSensitive": "no"
            },
            {
                "name": "Access denied for resource ID",
                "isSensitive": "no"
            },
            {
                "name": "/api/resource",
                "isSensitive": "no"
            },
            {
                "name": ", with username -",
                "isSensitive": "no"
            },
            {
                "name": "12345",
                "isSensitive": "yes"
            }
        ],
        "comments": [
            {
                "name": "Attempt to retrieve cloud resource that may fail",
                "isSensitive": "no"
            }
        ],
        "sinks": [
            {
                "name": "getCloudResource",
                "isSink": "no"
            },
            {
                "name": "getMessage",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "BAD_ConfigExposureServlet.java",
        "variables": [
            {
                "name": "request",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "e",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "response",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "filePath",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "\"/etc/myapp/config.xml\"",
                        "type": "String",
                        "context": "public class BAD_ConfigExposureServlet extends HttpServlet {\r\n    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws IOException {\r\n        String filePath = \"/etc/myapp/config.xml\";\r\n        try {\r\n            configureService(filePath);\r\n | public class BAD_ConfigExposureServlet extends HttpServlet {\r\n    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws IOException {\r\n        String filePath = \"/etc/myapp/config.xml\";\r\n        try {\r\n            configureService(filePath);\r\n",
                        "nextNode": "filePath"
                    },
                    {
                        "name": "String filePath",
                        "type": "String",
                        "context": "    }\r\n\r\n    private void configureService(String filePath) throws Exception {\r\n        throw new Exception(\"Error loading configuration for file: \" + filePath + \". Ensure the file exists and is accessible.\");\r\n    }\r\n",
                        "nextNode": "filePath"
                    },
                    {
                        "name": "filePath",
                        "type": "Dataflow from `\"/etc/myapp/config.xml\"` to `filePath`",
                        "context": "        String filePath = \"/etc/myapp/config.xml\";\r\n        try {\r\n            configureService(filePath);\r\n        } catch (Exception e) {\r\n            response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, \"Configuration error loading \" + e.getMessage());\r\n |         String filePath = \"/etc/myapp/config.xml\";\r\n        try {\r\n            configureService(filePath);\r\n        } catch (Exception e) {\r\n            response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, \"Configuration error loading \" + e.getMessage());\r\n | \r\n    private void configureService(String filePath) throws Exception {\r\n        throw new Exception(\"Error loading configuration for file: \" + filePath + \". Ensure the file exists and is accessible.\");\r\n    }\r\n}\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "/etc/myapp/config.xml",
                "isSensitive": "yes"
            },
            {
                "name": "Error loading configuration for file:",
                "isSensitive": "no"
            },
            {
                "name": ". Ensure the file exists and is accessible.",
                "isSensitive": "no"
            },
            {
                "name": "Configuration error loading",
                "isSensitive": "no"
            }
        ],
        "comments": [],
        "sinks": [
            {
                "name": "configureService",
                "isSink": "no"
            },
            {
                "name": "sendError",
                "isSink": "yes"
            },
            {
                "name": "getMessage",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "BAD_DatabaseErrorServlet.java",
        "variables": [
            {
                "name": "request",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "password",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "request.getParameter(\"password\")",
                        "type": "String",
                        "context": "public class BAD_DatabaseErrorServlet extends HttpServlet {\r\n    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException {\r\n        String password = request.getParameter(\"password\");\r\n        String email = request.getParameter(\"email\");\r\n        String url = request.getParameter(\"url\");\r\n | public class BAD_DatabaseErrorServlet extends HttpServlet {\r\n    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException {\r\n        String password = request.getParameter(\"password\");\r\n        String email = request.getParameter(\"email\");\r\n        String url = request.getParameter(\"url\");\r\n | public class BAD_DatabaseErrorServlet extends HttpServlet {\r\n    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException {\r\n        String password = request.getParameter(\"password\");\r\n        String email = request.getParameter(\"email\");\r\n        String url = request.getParameter(\"url\");\r\n",
                        "nextNode": "password"
                    },
                    {
                        "name": "String password",
                        "type": "String",
                        "context": "    }\r\n\r\n    private void establishDatabaseConnection(String email, String password, String url) throws SQLException {\r\n        Connection conn = DriverManager.getConnection(url, email, password);\r\n        // Additional database logic\r\n |     }\r\n\r\n    private void establishDatabaseConnection(String email, String password, String url) throws SQLException {\r\n        Connection conn = DriverManager.getConnection(url, email, password);\r\n        // Additional database logic\r\n",
                        "nextNode": "password"
                    },
                    {
                        "name": "password",
                        "type": "Dataflow from `getParameter(...)` to `password`\nDataflow from `\"password\"` to `password`",
                        "context": "\r\n        try {\r\n            establishDatabaseConnection(email, password, url);\r\n        } catch (SQLException e) {\r\n            response.getWriter().write(\"Failed to connect to database: \" + e.getMessage());\r\n | \r\n        try {\r\n            establishDatabaseConnection(email, password, url);\r\n        } catch (SQLException e) {\r\n            response.getWriter().write(\"Failed to connect to database: \" + e.getMessage());\r\n | \r\n    private void establishDatabaseConnection(String email, String password, String url) throws SQLException {\r\n        Connection conn = DriverManager.getConnection(url, email, password);\r\n        // Additional database logic\r\n        throw new SQLException(\"Could not establish connection to database using credentials: \" + email + \", \" + password + \", \" + url);\r\n | \r\n        try {\r\n            establishDatabaseConnection(email, password, url);\r\n        } catch (SQLException e) {\r\n            response.getWriter().write(\"Failed to connect to database: \" + e.getMessage());\r\n | \r\n    private void establishDatabaseConnection(String email, String password, String url) throws SQLException {\r\n        Connection conn = DriverManager.getConnection(url, email, password);\r\n        // Additional database logic\r\n        throw new SQLException(\"Could not establish connection to database using credentials: \" + email + \", \" + password + \", \" + url);\r\n |         Connection conn = DriverManager.getConnection(url, email, password);\r\n        // Additional database logic\r\n        throw new SQLException(\"Could not establish connection to database using credentials: \" + email + \", \" + password + \", \" + url);\r\n    }\r\n}\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "conn",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "e",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "response",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "email",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "request.getParameter(\"email\")",
                        "type": "String",
                        "context": "    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException {\r\n        String password = request.getParameter(\"password\");\r\n        String email = request.getParameter(\"email\");\r\n        String url = request.getParameter(\"url\");\r\n\r\n |     protected void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException {\r\n        String password = request.getParameter(\"password\");\r\n        String email = request.getParameter(\"email\");\r\n        String url = request.getParameter(\"url\");\r\n\r\n |     protected void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException {\r\n        String password = request.getParameter(\"password\");\r\n        String email = request.getParameter(\"email\");\r\n        String url = request.getParameter(\"url\");\r\n\r\n",
                        "nextNode": "email"
                    },
                    {
                        "name": "String email",
                        "type": "String",
                        "context": "    }\r\n\r\n    private void establishDatabaseConnection(String email, String password, String url) throws SQLException {\r\n        Connection conn = DriverManager.getConnection(url, email, password);\r\n        // Additional database logic\r\n |     }\r\n\r\n    private void establishDatabaseConnection(String email, String password, String url) throws SQLException {\r\n        Connection conn = DriverManager.getConnection(url, email, password);\r\n        // Additional database logic\r\n",
                        "nextNode": "email"
                    },
                    {
                        "name": "email",
                        "type": "Dataflow from `getParameter(...)` to `email`\nDataflow from `\"email\"` to `email`",
                        "context": "\r\n        try {\r\n            establishDatabaseConnection(email, password, url);\r\n        } catch (SQLException e) {\r\n            response.getWriter().write(\"Failed to connect to database: \" + e.getMessage());\r\n | \r\n        try {\r\n            establishDatabaseConnection(email, password, url);\r\n        } catch (SQLException e) {\r\n            response.getWriter().write(\"Failed to connect to database: \" + e.getMessage());\r\n | \r\n    private void establishDatabaseConnection(String email, String password, String url) throws SQLException {\r\n        Connection conn = DriverManager.getConnection(url, email, password);\r\n        // Additional database logic\r\n        throw new SQLException(\"Could not establish connection to database using credentials: \" + email + \", \" + password + \", \" + url);\r\n | \r\n        try {\r\n            establishDatabaseConnection(email, password, url);\r\n        } catch (SQLException e) {\r\n            response.getWriter().write(\"Failed to connect to database: \" + e.getMessage());\r\n | \r\n    private void establishDatabaseConnection(String email, String password, String url) throws SQLException {\r\n        Connection conn = DriverManager.getConnection(url, email, password);\r\n        // Additional database logic\r\n        throw new SQLException(\"Could not establish connection to database using credentials: \" + email + \", \" + password + \", \" + url);\r\n |         Connection conn = DriverManager.getConnection(url, email, password);\r\n        // Additional database logic\r\n        throw new SQLException(\"Could not establish connection to database using credentials: \" + email + \", \" + password + \", \" + url);\r\n    }\r\n}\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "url",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "request.getParameter(\"url\")",
                        "type": "String",
                        "context": "        String password = request.getParameter(\"password\");\r\n        String email = request.getParameter(\"email\");\r\n        String url = request.getParameter(\"url\");\r\n\r\n        try {\r\n |         String password = request.getParameter(\"password\");\r\n        String email = request.getParameter(\"email\");\r\n        String url = request.getParameter(\"url\");\r\n\r\n        try {\r\n |         String password = request.getParameter(\"password\");\r\n        String email = request.getParameter(\"email\");\r\n        String url = request.getParameter(\"url\");\r\n\r\n        try {\r\n",
                        "nextNode": "url"
                    },
                    {
                        "name": "String url",
                        "type": "String",
                        "context": "    }\r\n\r\n    private void establishDatabaseConnection(String email, String password, String url) throws SQLException {\r\n        Connection conn = DriverManager.getConnection(url, email, password);\r\n        // Additional database logic\r\n |     }\r\n\r\n    private void establishDatabaseConnection(String email, String password, String url) throws SQLException {\r\n        Connection conn = DriverManager.getConnection(url, email, password);\r\n        // Additional database logic\r\n",
                        "nextNode": "url"
                    },
                    {
                        "name": "url",
                        "type": "Dataflow from `getParameter(...)` to `url`\nDataflow from `\"url\"` to `url`",
                        "context": "\r\n        try {\r\n            establishDatabaseConnection(email, password, url);\r\n        } catch (SQLException e) {\r\n            response.getWriter().write(\"Failed to connect to database: \" + e.getMessage());\r\n | \r\n        try {\r\n            establishDatabaseConnection(email, password, url);\r\n        } catch (SQLException e) {\r\n            response.getWriter().write(\"Failed to connect to database: \" + e.getMessage());\r\n | \r\n    private void establishDatabaseConnection(String email, String password, String url) throws SQLException {\r\n        Connection conn = DriverManager.getConnection(url, email, password);\r\n        // Additional database logic\r\n        throw new SQLException(\"Could not establish connection to database using credentials: \" + email + \", \" + password + \", \" + url);\r\n | \r\n        try {\r\n            establishDatabaseConnection(email, password, url);\r\n        } catch (SQLException e) {\r\n            response.getWriter().write(\"Failed to connect to database: \" + e.getMessage());\r\n | \r\n    private void establishDatabaseConnection(String email, String password, String url) throws SQLException {\r\n        Connection conn = DriverManager.getConnection(url, email, password);\r\n        // Additional database logic\r\n        throw new SQLException(\"Could not establish connection to database using credentials: \" + email + \", \" + password + \", \" + url);\r\n |         Connection conn = DriverManager.getConnection(url, email, password);\r\n        // Additional database logic\r\n        throw new SQLException(\"Could not establish connection to database using credentials: \" + email + \", \" + password + \", \" + url);\r\n    }\r\n}\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "password",
                "isSensitive": "no"
            },
            {
                "name": "Failed to connect to database:",
                "isSensitive": "no"
            },
            {
                "name": ",",
                "isSensitive": "no"
            },
            {
                "name": "email",
                "isSensitive": "no"
            },
            {
                "name": "url",
                "isSensitive": "no"
            },
            {
                "name": "Could not establish connection to database using credentials:",
                "isSensitive": "no"
            }
        ],
        "comments": [
            {
                "name": "Additional database logic",
                "isSensitive": "no"
            }
        ],
        "sinks": [
            {
                "name": "getConnection",
                "isSink": "yes"
            },
            {
                "name": "getWriter",
                "isSink": "no"
            },
            {
                "name": "getMessage",
                "isSink": "no"
            },
            {
                "name": "establishDatabaseConnection",
                "isSink": "no"
            },
            {
                "name": "write",
                "isSink": "yes"
            },
            {
                "name": "getParameter",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "BAD_DetailedRuntimeExceptionServlet.java",
        "variables": [
            {
                "name": "request",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "e",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "response",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "userId",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "request.getParameter(\"userId\")",
                        "type": "String",
                        "context": "public class BAD_DetailedRuntimeExceptionServlet extends HttpServlet {\r\n    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException {\r\n        String userId = request.getParameter(\"userId\");\r\n        try {\r\n            // Some logic that can throw a runtime exception\r\n",
                        "nextNode": "userId"
                    },
                    {
                        "name": "userId",
                        "type": "Dataflow from `getParameter(...)` to `userId`\nDataflow from `\"userId\"` to `userId`",
                        "context": "        try {\r\n            // Some logic that can throw a runtime exception\r\n            throw new RuntimeException(\"Failed to process due to invalid state in \" + userId);\r\n        } catch (RuntimeException e) {\r\n            response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, \"An error occurred: \" + e.toString());\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "An error occurred:",
                "isSensitive": "no"
            },
            {
                "name": "userId",
                "isSensitive": "no"
            },
            {
                "name": "Failed to process due to invalid state in",
                "isSensitive": "no"
            }
        ],
        "comments": [
            {
                "name": "Some logic that can throw a runtime exception",
                "isSensitive": "no"
            }
        ],
        "sinks": [
            {
                "name": "sendError",
                "isSink": "yes"
            },
            {
                "name": "toString",
                "isSink": "no"
            },
            {
                "name": "getParameter",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "BAD_ExposedExceptionDetailsAPI.java",
        "variables": [
            {
                "name": "e",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "db_user",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "\"john_doe\"",
                        "type": "String",
                        "context": "    @GetMapping(\"/api/data\")\r\n    public String getData() {\r\n        String db_user = \"john_doe\";\r\n        try {\r\n            // Simulate an operation that may fail\r\n |     @GetMapping(\"/api/data\")\r\n    public String getData() {\r\n        String db_user = \"john_doe\";\r\n        try {\r\n            // Simulate an operation that may fail\r\n",
                        "nextNode": "db_user"
                    },
                    {
                        "name": "String db_user",
                        "type": "String",
                        "context": "    }\r\n\r\n    private void simulateDatabaseOperation(String db_user) throws Exception {\r\n        // Simulated failure point\r\n        throw new Exception(\"Database connection error: Credentials for \" + db_user + \" not valid or expired\");\r\n",
                        "nextNode": "db_user"
                    },
                    {
                        "name": "db_user",
                        "type": "Dataflow from `\"john_doe\"` to `db_user`",
                        "context": "        try {\r\n            // Simulate an operation that may fail\r\n            simulateDatabaseOperation(db_user);\r\n            return \"Data fetched successfully\";\r\n        } catch (Exception e) {\r\n |         try {\r\n            // Simulate an operation that may fail\r\n            simulateDatabaseOperation(db_user);\r\n            return \"Data fetched successfully\";\r\n        } catch (Exception e) {\r\n |     private void simulateDatabaseOperation(String db_user) throws Exception {\r\n        // Simulated failure point\r\n        throw new Exception(\"Database connection error: Credentials for \" + db_user + \" not valid or expired\");\r\n    }\r\n}\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "/api/data",
                "isSensitive": "no"
            },
            {
                "name": "Database connection error: Credentials for",
                "isSensitive": "no"
            },
            {
                "name": "john_doe",
                "isSensitive": "yes"
            },
            {
                "name": "Failed to fetch data:",
                "isSensitive": "no"
            },
            {
                "name": "Data fetched successfully",
                "isSensitive": "no"
            },
            {
                "name": "not valid or expired",
                "isSensitive": "no"
            }
        ],
        "comments": [
            {
                "name": "Simulated failure point",
                "isSensitive": "no"
            },
            {
                "name": "Simulate an operation that may fail",
                "isSensitive": "no"
            }
        ],
        "sinks": [
            {
                "name": "getMessage",
                "isSink": "no"
            },
            {
                "name": "simulateDatabaseOperation",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "BAD_FinancialTransactionAPI.java",
        "variables": [
            {
                "name": "amount",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "e",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "accountNumber",
                "isSensitive": "yes",
                "graph": []
            }
        ],
        "strings": [
            {
                "name": "amount",
                "isSensitive": "no"
            },
            {
                "name": "Transaction limit exceeded for single transaction.",
                "isSensitive": "no"
            },
            {
                "name": "Failed to process transaction for account",
                "isSensitive": "no"
            },
            {
                "name": "/api/transaction",
                "isSensitive": "no"
            },
            {
                "name": "with amount $",
                "isSensitive": "no"
            },
            {
                "name": "Transaction processed successfully",
                "isSensitive": "no"
            },
            {
                "name": ":",
                "isSensitive": "no"
            },
            {
                "name": "Insufficient funds in account",
                "isSensitive": "no"
            },
            {
                "name": "accountNumber",
                "isSensitive": "no"
            }
        ],
        "comments": [
            {
                "name": "Simulate a failure that could arise during transaction processing",
                "isSensitive": "no"
            }
        ],
        "sinks": [
            {
                "name": "executeTransaction",
                "isSink": "no"
            },
            {
                "name": "getMessage",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "BAD_InitializationErrorServlet.java",
        "variables": [
            {
                "name": "e",
                "isSensitive": "yes",
                "graph": []
            }
        ],
        "strings": [
            {
                "name": "Initialization failed due to configuration error in",
                "isSensitive": "no"
            },
            {
                "name": ":",
                "isSensitive": "no"
            },
            {
                "name": "/WEB-INF/config.properties",
                "isSensitive": "no"
            },
            {
                "name": "Configuration file missing.",
                "isSensitive": "no"
            }
        ],
        "comments": [
            {
                "name": "Configuration loading logic",
                "isSensitive": "no"
            }
        ],
        "sinks": [
            {
                "name": "loadConfiguration",
                "isSink": "no"
            },
            {
                "name": "println",
                "isSink": "yes"
            },
            {
                "name": "getServletContext",
                "isSink": "no"
            },
            {
                "name": "getMessage",
                "isSink": "no"
            },
            {
                "name": "getRealPath",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "BAD_PaymentErrorExposureServlet.java",
        "variables": [
            {
                "name": "request",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "amount",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "request.getParameter(\"amount\")",
                        "type": "String",
                        "context": "    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws IOException {\r\n        String creditCardNumber = request.getParameter(\"creditCardNumber\");\r\n        String amount = request.getParameter(\"amount\");\r\n        try {\r\n            processPayment(amount, creditCardNumber);\r\n |     protected void doPost(HttpServletRequest request, HttpServletResponse response) throws IOException {\r\n        String creditCardNumber = request.getParameter(\"creditCardNumber\");\r\n        String amount = request.getParameter(\"amount\");\r\n        try {\r\n            processPayment(amount, creditCardNumber);\r\n",
                        "nextNode": "amount"
                    },
                    {
                        "name": "String amount",
                        "type": "String",
                        "context": "    }\r\n\r\n    private void processPayment(String creditCardNumber, String amount) throws Exception {\r\n        if (creditCardNumber == null || amount == null) {\r\n            throw new Exception(\"Invalid payment data provided.\" + creditCardNumber + amount);\r\n |     }\r\n\r\n    private void processPayment(String creditCardNumber, String amount) throws Exception {\r\n        if (creditCardNumber == null || amount == null) {\r\n            throw new Exception(\"Invalid payment data provided.\" + creditCardNumber + amount);\r\n |     }\r\n\r\n    private void processPayment(String creditCardNumber, String amount) throws Exception {\r\n        if (creditCardNumber == null || amount == null) {\r\n            throw new Exception(\"Invalid payment data provided.\" + creditCardNumber + amount);\r\n",
                        "nextNode": "amount"
                    },
                    {
                        "name": "amount",
                        "type": "Dataflow from `getParameter(...)` to `amount`\nDataflow from `\"amount\"` to `amount`",
                        "context": "        String amount = request.getParameter(\"amount\");\r\n        try {\r\n            processPayment(amount, creditCardNumber);\r\n        } catch (Exception e) {\r\n            response.getWriter().write(\"Payment processing failed: \" + creditCardNumber + amount + e.getMessage());\r\n |         String amount = request.getParameter(\"amount\");\r\n        try {\r\n            processPayment(amount, creditCardNumber);\r\n        } catch (Exception e) {\r\n            response.getWriter().write(\"Payment processing failed: \" + creditCardNumber + amount + e.getMessage());\r\n |             processPayment(amount, creditCardNumber);\r\n        } catch (Exception e) {\r\n            response.getWriter().write(\"Payment processing failed: \" + creditCardNumber + amount + e.getMessage());\r\n            response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);\r\n        }\r\n | \r\n    private void processPayment(String creditCardNumber, String amount) throws Exception {\r\n        if (creditCardNumber == null || amount == null) {\r\n            throw new Exception(\"Invalid payment data provided.\" + creditCardNumber + amount);\r\n        }\r\n |     private void processPayment(String creditCardNumber, String amount) throws Exception {\r\n        if (creditCardNumber == null || amount == null) {\r\n            throw new Exception(\"Invalid payment data provided.\" + creditCardNumber + amount);\r\n        }\r\n        // Simulate a payment gateway failure\r\n | \r\n    private void processPayment(String creditCardNumber, String amount) throws Exception {\r\n        if (creditCardNumber == null || amount == null) {\r\n            throw new Exception(\"Invalid payment data provided.\" + creditCardNumber + amount);\r\n        }\r\n |         }\r\n        // Simulate a payment gateway failure\r\n        throw new Exception(\"Payment gateway timeout during transaction.\" + creditCardNumber + amount);\r\n    }\r\n}\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "e",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "creditCardNumber",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "request.getParameter(\"creditCardNumber\")",
                        "type": "String",
                        "context": "public class BAD_PaymentErrorExposureServlet extends HttpServlet {\r\n    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws IOException {\r\n        String creditCardNumber = request.getParameter(\"creditCardNumber\");\r\n        String amount = request.getParameter(\"amount\");\r\n        try {\r\n | public class BAD_PaymentErrorExposureServlet extends HttpServlet {\r\n    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws IOException {\r\n        String creditCardNumber = request.getParameter(\"creditCardNumber\");\r\n        String amount = request.getParameter(\"amount\");\r\n        try {\r\n",
                        "nextNode": "creditCardNumber"
                    },
                    {
                        "name": "String creditCardNumber",
                        "type": "String",
                        "context": "    }\r\n\r\n    private void processPayment(String creditCardNumber, String amount) throws Exception {\r\n        if (creditCardNumber == null || amount == null) {\r\n            throw new Exception(\"Invalid payment data provided.\" + creditCardNumber + amount);\r\n |     }\r\n\r\n    private void processPayment(String creditCardNumber, String amount) throws Exception {\r\n        if (creditCardNumber == null || amount == null) {\r\n            throw new Exception(\"Invalid payment data provided.\" + creditCardNumber + amount);\r\n |     }\r\n\r\n    private void processPayment(String creditCardNumber, String amount) throws Exception {\r\n        if (creditCardNumber == null || amount == null) {\r\n            throw new Exception(\"Invalid payment data provided.\" + creditCardNumber + amount);\r\n",
                        "nextNode": "creditCardNumber"
                    },
                    {
                        "name": "creditCardNumber",
                        "type": "Dataflow from `getParameter(...)` to `creditCardNumber`\nDataflow from `\"creditCardNumber\"` to `creditCardNumber`",
                        "context": "        String amount = request.getParameter(\"amount\");\r\n        try {\r\n            processPayment(amount, creditCardNumber);\r\n        } catch (Exception e) {\r\n            response.getWriter().write(\"Payment processing failed: \" + creditCardNumber + amount + e.getMessage());\r\n |         String amount = request.getParameter(\"amount\");\r\n        try {\r\n            processPayment(amount, creditCardNumber);\r\n        } catch (Exception e) {\r\n            response.getWriter().write(\"Payment processing failed: \" + creditCardNumber + amount + e.getMessage());\r\n |             processPayment(amount, creditCardNumber);\r\n        } catch (Exception e) {\r\n            response.getWriter().write(\"Payment processing failed: \" + creditCardNumber + amount + e.getMessage());\r\n            response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);\r\n        }\r\n | \r\n    private void processPayment(String creditCardNumber, String amount) throws Exception {\r\n        if (creditCardNumber == null || amount == null) {\r\n            throw new Exception(\"Invalid payment data provided.\" + creditCardNumber + amount);\r\n        }\r\n | \r\n    private void processPayment(String creditCardNumber, String amount) throws Exception {\r\n        if (creditCardNumber == null || amount == null) {\r\n            throw new Exception(\"Invalid payment data provided.\" + creditCardNumber + amount);\r\n        }\r\n |     private void processPayment(String creditCardNumber, String amount) throws Exception {\r\n        if (creditCardNumber == null || amount == null) {\r\n            throw new Exception(\"Invalid payment data provided.\" + creditCardNumber + amount);\r\n        }\r\n        // Simulate a payment gateway failure\r\n | \r\n    private void processPayment(String creditCardNumber, String amount) throws Exception {\r\n        if (creditCardNumber == null || amount == null) {\r\n            throw new Exception(\"Invalid payment data provided.\" + creditCardNumber + amount);\r\n        }\r\n |         }\r\n        // Simulate a payment gateway failure\r\n        throw new Exception(\"Payment gateway timeout during transaction.\" + creditCardNumber + amount);\r\n    }\r\n}\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "response",
                "isSensitive": "yes",
                "graph": []
            }
        ],
        "strings": [
            {
                "name": "Payment gateway timeout during transaction.",
                "isSensitive": "no"
            },
            {
                "name": "amount",
                "isSensitive": "no"
            },
            {
                "name": "Invalid payment data provided.",
                "isSensitive": "no"
            },
            {
                "name": "creditCardNumber",
                "isSensitive": "no"
            },
            {
                "name": "Payment processing failed:",
                "isSensitive": "no"
            }
        ],
        "comments": [
            {
                "name": "Simulate a payment gateway failure",
                "isSensitive": "no"
            }
        ],
        "sinks": [
            {
                "name": "getWriter",
                "isSink": "no"
            },
            {
                "name": "getMessage",
                "isSink": "no"
            },
            {
                "name": "processPayment",
                "isSink": "no"
            },
            {
                "name": "write",
                "isSink": "yes"
            },
            {
                "name": "setStatus",
                "isSink": "no"
            },
            {
                "name": "getParameter",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "BAD_UserDataHandlingAPI.java",
        "variables": [
            {
                "name": "userdata",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "userData",
                        "type": "String",
                        "context": "    public String updateUserProfile(String userData) {\r\n        try {\r\n            processUserData(userData);\r\n            return \"User profile updated successfully\";\r\n        } catch (Exception e) {\r\n",
                        "nextNode": "String userdata"
                    },
                    {
                        "name": "String userdata",
                        "type": "String",
                        "context": "    }\r\n\r\n    private void processUserData(String userdata) throws Exception {\r\n        throw new Exception(\"User data validation failed due to invalid credentials - \" + userdata + \"field in input data\");\r\n    }\r\n",
                        "nextNode": "userdata"
                    },
                    {
                        "name": "userdata",
                        "type": "Dataflow from `userData` to `userdata`",
                        "context": "\r\n    private void processUserData(String userdata) throws Exception {\r\n        throw new Exception(\"User data validation failed due to invalid credentials - \" + userdata + \"field in input data\");\r\n    }\r\n}\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "userData",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "e",
                "isSensitive": "yes",
                "graph": []
            }
        ],
        "strings": [
            {
                "name": "/api/users",
                "isSensitive": "no"
            },
            {
                "name": "User profile updated successfully",
                "isSensitive": "no"
            },
            {
                "name": "field in input data",
                "isSensitive": "no"
            },
            {
                "name": "Failed to update user profile:",
                "isSensitive": "no"
            },
            {
                "name": "User data validation failed due to invalid credentials -",
                "isSensitive": "no"
            }
        ],
        "comments": [],
        "sinks": [
            {
                "name": "processUserData",
                "isSink": "no"
            },
            {
                "name": "getMessage",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "GOOD_AuthenticationFailureServlet.java",
        "variables": [
            {
                "name": "request",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "password",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "request.getParameter(\"password\")",
                        "type": "String",
                        "context": "    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException {\r\n        try {\r\n            authenticateUser(request.getParameter(\"username\"), request.getParameter(\"password\"));\r\n        } catch (Exception e) {\r\n            // Insecure: Sending authentication failure details back to the client\r\n",
                        "nextNode": "String password"
                    },
                    {
                        "name": "String password",
                        "type": "String",
                        "context": "    }\r\n\r\n    private void authenticateUser(String username, String password) throws Exception {\r\n        if (username == null || password == null) {\r\n            throw new Exception(\"Username or password is null\");\r\n",
                        "nextNode": "password"
                    },
                    {
                        "name": "password",
                        "type": "Dataflow from `getParameter(...)` to `password`\nDataflow from `\"password\"` to `password`",
                        "context": "\r\n    private void authenticateUser(String username, String password) throws Exception {\r\n        if (username == null || password == null) {\r\n            throw new Exception(\"Username or password is null\");\r\n        }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "e",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "response",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "username",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "request.getParameter(\"username\")",
                        "type": "String",
                        "context": "    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException {\r\n        try {\r\n            authenticateUser(request.getParameter(\"username\"), request.getParameter(\"password\"));\r\n        } catch (Exception e) {\r\n            // Insecure: Sending authentication failure details back to the client\r\n",
                        "nextNode": "String username"
                    },
                    {
                        "name": "String username",
                        "type": "String",
                        "context": "    }\r\n\r\n    private void authenticateUser(String username, String password) throws Exception {\r\n        if (username == null || password == null) {\r\n            throw new Exception(\"Username or password is null\");\r\n",
                        "nextNode": "username"
                    },
                    {
                        "name": "username",
                        "type": "Dataflow from `getParameter(...)` to `username`\nDataflow from `\"username\"` to `username`",
                        "context": "\r\n    private void authenticateUser(String username, String password) throws Exception {\r\n        if (username == null || password == null) {\r\n            throw new Exception(\"Username or password is null\");\r\n        }\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "password",
                "isSensitive": "no"
            },
            {
                "name": "Invalid credentials provided.",
                "isSensitive": "no"
            },
            {
                "name": "Authentication failed.",
                "isSensitive": "no"
            },
            {
                "name": "Username or password is null",
                "isSensitive": "no"
            },
            {
                "name": "username",
                "isSensitive": "no"
            }
        ],
        "comments": [
            {
                "name": "Authentication logic that might fail",
                "isSensitive": "no"
            },
            {
                "name": "Insecure: Sending authentication failure details back to the client",
                "isSensitive": "no"
            }
        ],
        "sinks": [
            {
                "name": "authenticateUser",
                "isSink": "no"
            },
            {
                "name": "getWriter",
                "isSink": "no"
            },
            {
                "name": "write",
                "isSink": "yes"
            },
            {
                "name": "setStatus",
                "isSink": "no"
            },
            {
                "name": "getParameter",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "GOOD_CloudResourceErrorAPI.java",
        "variables": [
            {
                "name": "resourceID",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "e",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "resourseID",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "\"12345\"",
                        "type": "String",
                        "context": "    public String getResourceDetails() {\r\n        String username = \"CWE-200-test\";\r\n        String resourseID = \"12345\";\r\n        try {\r\n            // Attempt to retrieve cloud resource that may fail\r\n",
                        "nextNode": "resourseID"
                    },
                    {
                        "name": "resourseID",
                        "type": "Dataflow from `\"12345\"` to `resourseID`",
                        "context": "        try {\r\n            // Attempt to retrieve cloud resource that may fail\r\n            return getCloudResource(username, resourseID);\r\n        } catch (Exception e) {\r\n            throw new ResponseStatusException(HttpStatus.INTERNAL_SERVER_ERROR, \"Failed to retrieve cloud resource.\");\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "username",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "\"CWE-200-test\"",
                        "type": "String",
                        "context": "    @GetMapping(\"/api/resource\")\r\n    public String getResourceDetails() {\r\n        String username = \"CWE-200-test\";\r\n        String resourseID = \"12345\";\r\n        try {\r\n",
                        "nextNode": "username"
                    },
                    {
                        "name": "username",
                        "type": "Dataflow from `\"CWE-200-test\"` to `username`",
                        "context": "        try {\r\n            // Attempt to retrieve cloud resource that may fail\r\n            return getCloudResource(username, resourseID);\r\n        } catch (Exception e) {\r\n            throw new ResponseStatusException(HttpStatus.INTERNAL_SERVER_ERROR, \"Failed to retrieve cloud resource.\");\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "CWE-200-test",
                "isSensitive": "yes"
            },
            {
                "name": "/api/resource",
                "isSensitive": "no"
            },
            {
                "name": "12345",
                "isSensitive": "yes"
            },
            {
                "name": "Failed to retrieve cloud resource.",
                "isSensitive": "no"
            },
            {
                "name": "Access denied for resource on AWS due to improper IAM permissions.",
                "isSensitive": "no"
            }
        ],
        "comments": [
            {
                "name": "Attempt to retrieve cloud resource that may fail",
                "isSensitive": "no"
            }
        ],
        "sinks": [
            {
                "name": "getCloudResource",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "GOOD_ConfigExposureServlet.java",
        "variables": [
            {
                "name": "request",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "e",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "response",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "filePath",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "\"/etc/financeapp/settings.xml\"",
                        "type": "String",
                        "context": "public class GOOD_ConfigExposureServlet extends HttpServlet {\r\n    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws IOException {\r\n        String filePath = \"/etc/financeapp/settings.xml\";\r\n        try {\r\n            configureService(filePath);\r\n",
                        "nextNode": "filePath"
                    },
                    {
                        "name": "filePath",
                        "type": "Dataflow from `\"/etc/financeapp/settings.xml\"` to `filePath`",
                        "context": "        String filePath = \"/etc/financeapp/settings.xml\";\r\n        try {\r\n            configureService(filePath);\r\n        } catch (Exception e) {\r\n            response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, \"Configuration error loading.\");\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "Error loading configuration for file. Ensure the file exists and is accessible.",
                "isSensitive": "no"
            },
            {
                "name": "/etc/financeapp/settings.xml",
                "isSensitive": "yes"
            },
            {
                "name": "Configuration error loading.",
                "isSensitive": "no"
            }
        ],
        "comments": [],
        "sinks": [
            {
                "name": "configureService",
                "isSink": "no"
            },
            {
                "name": "sendError",
                "isSink": "yes"
            }
        ]
    },
    {
        "fileName": "GOOD_DatabaseErrorServlet.java",
        "variables": [
            {
                "name": "request",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "password",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "request.getParameter(\"password\")",
                        "type": "String",
                        "context": "public class GOOD_DatabaseErrorServlet extends HttpServlet {\r\n    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException {\r\n        String password = request.getParameter(\"password\");\r\n        String email = request.getParameter(\"email\");\r\n        String url = request.getParameter(\"url\");\r\n | public class GOOD_DatabaseErrorServlet extends HttpServlet {\r\n    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException {\r\n        String password = request.getParameter(\"password\");\r\n        String email = request.getParameter(\"email\");\r\n        String url = request.getParameter(\"url\");\r\n",
                        "nextNode": "password"
                    },
                    {
                        "name": "String password",
                        "type": "String",
                        "context": "    }\r\n\r\n    private void establishDatabaseConnection(String email, String password, String url) throws SQLException {\r\n        Connection conn = DriverManager.getConnection(url, email, password);\r\n        // Additional database logic\r\n",
                        "nextNode": "password"
                    },
                    {
                        "name": "password",
                        "type": "Dataflow from `getParameter(...)` to `password`\nDataflow from `\"password\"` to `password`",
                        "context": "\r\n        try {\r\n            establishDatabaseConnection(email, password, url);\r\n        } catch (SQLException e) {\r\n            response.getWriter().write(\"Failed to connect to database. \");\r\n | \r\n        try {\r\n            establishDatabaseConnection(email, password, url);\r\n        } catch (SQLException e) {\r\n            response.getWriter().write(\"Failed to connect to database. \");\r\n | \r\n    private void establishDatabaseConnection(String email, String password, String url) throws SQLException {\r\n        Connection conn = DriverManager.getConnection(url, email, password);\r\n        // Additional database logic\r\n        throw new SQLException(\"Could not establish connection to database.\");\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "conn",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "e",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "response",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "email",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "request.getParameter(\"email\")",
                        "type": "String",
                        "context": "    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException {\r\n        String password = request.getParameter(\"password\");\r\n        String email = request.getParameter(\"email\");\r\n        String url = request.getParameter(\"url\");\r\n\r\n |     protected void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException {\r\n        String password = request.getParameter(\"password\");\r\n        String email = request.getParameter(\"email\");\r\n        String url = request.getParameter(\"url\");\r\n\r\n",
                        "nextNode": "email"
                    },
                    {
                        "name": "String email",
                        "type": "String",
                        "context": "    }\r\n\r\n    private void establishDatabaseConnection(String email, String password, String url) throws SQLException {\r\n        Connection conn = DriverManager.getConnection(url, email, password);\r\n        // Additional database logic\r\n",
                        "nextNode": "email"
                    },
                    {
                        "name": "email",
                        "type": "Dataflow from `getParameter(...)` to `email`\nDataflow from `\"email\"` to `email`",
                        "context": "\r\n        try {\r\n            establishDatabaseConnection(email, password, url);\r\n        } catch (SQLException e) {\r\n            response.getWriter().write(\"Failed to connect to database. \");\r\n | \r\n        try {\r\n            establishDatabaseConnection(email, password, url);\r\n        } catch (SQLException e) {\r\n            response.getWriter().write(\"Failed to connect to database. \");\r\n | \r\n    private void establishDatabaseConnection(String email, String password, String url) throws SQLException {\r\n        Connection conn = DriverManager.getConnection(url, email, password);\r\n        // Additional database logic\r\n        throw new SQLException(\"Could not establish connection to database.\");\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "url",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "request.getParameter(\"url\")",
                        "type": "String",
                        "context": "        String password = request.getParameter(\"password\");\r\n        String email = request.getParameter(\"email\");\r\n        String url = request.getParameter(\"url\");\r\n\r\n        try {\r\n |         String password = request.getParameter(\"password\");\r\n        String email = request.getParameter(\"email\");\r\n        String url = request.getParameter(\"url\");\r\n\r\n        try {\r\n",
                        "nextNode": "url"
                    },
                    {
                        "name": "String url",
                        "type": "String",
                        "context": "    }\r\n\r\n    private void establishDatabaseConnection(String email, String password, String url) throws SQLException {\r\n        Connection conn = DriverManager.getConnection(url, email, password);\r\n        // Additional database logic\r\n",
                        "nextNode": "url"
                    },
                    {
                        "name": "url",
                        "type": "Dataflow from `getParameter(...)` to `url`\nDataflow from `\"url\"` to `url`",
                        "context": "\r\n        try {\r\n            establishDatabaseConnection(email, password, url);\r\n        } catch (SQLException e) {\r\n            response.getWriter().write(\"Failed to connect to database. \");\r\n | \r\n        try {\r\n            establishDatabaseConnection(email, password, url);\r\n        } catch (SQLException e) {\r\n            response.getWriter().write(\"Failed to connect to database. \");\r\n | \r\n    private void establishDatabaseConnection(String email, String password, String url) throws SQLException {\r\n        Connection conn = DriverManager.getConnection(url, email, password);\r\n        // Additional database logic\r\n        throw new SQLException(\"Could not establish connection to database.\");\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "Failed to connect to database.",
                "isSensitive": "no"
            },
            {
                "name": "password",
                "isSensitive": "no"
            },
            {
                "name": "Could not establish connection to database.",
                "isSensitive": "no"
            },
            {
                "name": "email",
                "isSensitive": "no"
            },
            {
                "name": "url",
                "isSensitive": "no"
            }
        ],
        "comments": [
            {
                "name": "Additional database logic",
                "isSensitive": "no"
            }
        ],
        "sinks": [
            {
                "name": "getConnection",
                "isSink": "yes"
            },
            {
                "name": "getWriter",
                "isSink": "no"
            },
            {
                "name": "establishDatabaseConnection",
                "isSink": "no"
            },
            {
                "name": "write",
                "isSink": "yes"
            },
            {
                "name": "getParameter",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "GOOD_DetailedRuntimeExceptionServlet.java",
        "variables": [
            {
                "name": "request",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "e",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "response",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "userId",
                "isSensitive": "yes",
                "graph": []
            }
        ],
        "strings": [
            {
                "name": "Failed to process due to invalid state.",
                "isSensitive": "no"
            },
            {
                "name": "An error occurred.",
                "isSensitive": "no"
            },
            {
                "name": "userId",
                "isSensitive": "no"
            }
        ],
        "comments": [
            {
                "name": "Some logic that can throw a runtime exception",
                "isSensitive": "no"
            }
        ],
        "sinks": [
            {
                "name": "sendError",
                "isSink": "yes"
            },
            {
                "name": "getParameter",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "GOOD_ExposedExceptionDetailsAPI.java",
        "variables": [
            {
                "name": "e",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "db_user",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "System.getenv(\"DB_USER\")",
                        "type": "String",
                        "context": "    @GetMapping(\"/api/data\")\r\n    public String getData() {\r\n        String db_user = System.getenv(\"DB_USER\");\r\n        try {\r\n            // Simulate an operation that may fail\r\n",
                        "nextNode": "db_user"
                    },
                    {
                        "name": "db_user",
                        "type": "Dataflow from `getenv(...)` to `db_user`\nDataflow from `\"DB_USER\"` to `db_user`",
                        "context": "        try {\r\n            // Simulate an operation that may fail\r\n            simulateDatabaseOperation(db_user);\r\n            return \"Data fetched successfully\";\r\n        } catch (Exception e) {\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "/api/data",
                "isSensitive": "no"
            },
            {
                "name": "DB_USER",
                "isSensitive": "no"
            },
            {
                "name": "Failed to fetch data.",
                "isSensitive": "no"
            },
            {
                "name": "Database connection error.",
                "isSensitive": "no"
            },
            {
                "name": "Data fetched successfully",
                "isSensitive": "no"
            }
        ],
        "comments": [
            {
                "name": "Simulated failure point",
                "isSensitive": "no"
            },
            {
                "name": "Simulate an operation that may fail",
                "isSensitive": "no"
            }
        ],
        "sinks": [
            {
                "name": "simulateDatabaseOperation",
                "isSink": "no"
            },
            {
                "name": "getenv",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "GOOD_FinancialTransactionAPI.java",
        "variables": [
            {
                "name": "amount",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "e",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "accountNumber",
                "isSensitive": "yes",
                "graph": []
            }
        ],
        "strings": [
            {
                "name": "amount",
                "isSensitive": "no"
            },
            {
                "name": "Transaction limit exceeded for single transaction.",
                "isSensitive": "no"
            },
            {
                "name": "/api/transaction",
                "isSensitive": "no"
            },
            {
                "name": "Failed to process transaction.",
                "isSensitive": "no"
            },
            {
                "name": "Transaction processed successfully",
                "isSensitive": "no"
            },
            {
                "name": "Insufficient funds in account.",
                "isSensitive": "no"
            },
            {
                "name": "accountNumber",
                "isSensitive": "no"
            }
        ],
        "comments": [
            {
                "name": "Simulate a failure that could arise during transaction processing",
                "isSensitive": "no"
            },
            {
                "name": "Process transaction that may include sensitive financial operations",
                "isSensitive": "no"
            }
        ],
        "sinks": [
            {
                "name": "executeTransaction",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "GOOD_GenericErrorHandling.java",
        "variables": [
            {
                "name": "request",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "e",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "response",
                "isSensitive": "no",
                "graph": []
            }
        ],
        "strings": [
            {
                "name": "An internal server error occurred. Please try again later.",
                "isSensitive": "no"
            },
            {
                "name": "Sensitive error message",
                "isSensitive": "no"
            }
        ],
        "comments": [
            {
                "name": "Some sensitive operation",
                "isSensitive": "no"
            }
        ],
        "sinks": [
            {
                "name": "sendError",
                "isSink": "yes"
            }
        ]
    },
    {
        "fileName": "GOOD_InitializationErrorServlet.java",
        "variables": [
            {
                "name": "e",
                "isSensitive": "yes",
                "graph": []
            }
        ],
        "strings": [
            {
                "name": "Initialization failed due to configuration error.",
                "isSensitive": "no"
            },
            {
                "name": "Configuration file missing.",
                "isSensitive": "no"
            }
        ],
        "comments": [
            {
                "name": "Configuration loading logic",
                "isSensitive": "no"
            }
        ],
        "sinks": [
            {
                "name": "loadConfiguration",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "GOOD_SecureErrorLogging2.java",
        "variables": [
            {
                "name": "args",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "e",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "logger",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "LoggerFactory.getLogger(GOOD_SecureErrorLogging2.class)",
                        "type": "Logger",
                        "context": "\r\npublic class GOOD_SecureErrorLogging2 {\r\n    private static final Logger logger = LoggerFactory.getLogger(GOOD_SecureErrorLogging2.class);\r\n\r\n    public static void main(String[] args) {\r\n",
                        "nextNode": "logger"
                    },
                    {
                        "name": "logger",
                        "type": "Logger",
                        "context": "\r\npublic class GOOD_SecureErrorLogging2 {\r\n    private static final Logger logger = LoggerFactory.getLogger(GOOD_SecureErrorLogging2.class);\r\n\r\n    public static void main(String[] args) {\r\n |             throw new Exception(\"Sensitive database connection failure\");\r\n        } catch (Exception e) {\r\n            logger.error(\"An internal error occurred\");\r\n            System.out.println(\"An error occurred. Please contact support if the problem persists.\");\r\n        }\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "An internal error occurred",
                "isSensitive": "no"
            },
            {
                "name": "An error occurred. Please contact support if the problem persists.",
                "isSensitive": "no"
            },
            {
                "name": "Sensitive database connection failure",
                "isSensitive": "no"
            }
        ],
        "comments": [
            {
                "name": "Some sensitive operation",
                "isSensitive": "no"
            }
        ],
        "sinks": [
            {
                "name": "println",
                "isSink": "yes"
            },
            {
                "name": "getLogger",
                "isSink": "no"
            },
            {
                "name": "error",
                "isSink": "yes"
            }
        ]
    },
    {
        "fileName": "BAD_ApiKeySubmissionGET.java",
        "variables": [
            {
                "name": "args",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "apiKey",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "\"abc12345-def67890-ghij1234-klmn5678\"",
                        "type": "String",
                        "context": "    \r\n    public static void main(String[] args) {\r\n        submitApiKey(\"abc12345-def67890-ghij1234-klmn5678\");\r\n    }\r\n}\r\n",
                        "nextNode": "String apiKey"
                    },
                    {
                        "name": "String apiKey",
                        "type": "String",
                        "context": "\r\npublic class BAD_ApiKeySubmissionGET {\r\n    public static void submitApiKey(String apiKey) {\r\n        try {\r\n            URI uri = new URI(\"http\", \"corporateportal.companydomain.com\", \"/api/submit\", \"apiKey=\" + apiKey, null);\r\n",
                        "nextNode": "apiKey"
                    },
                    {
                        "name": "apiKey",
                        "type": "Dataflow from `\"abc12345-def67890-ghij1234-klmn5678\"` to `apiKey`",
                        "context": "    public static void submitApiKey(String apiKey) {\r\n        try {\r\n            URI uri = new URI(\"http\", \"corporateportal.companydomain.com\", \"/api/submit\", \"apiKey=\" + apiKey, null);\r\n            URL url = uri.toURL();\r\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "e",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "connection",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "url.openConnection()",
                        "type": "URLConnection",
                        "context": "            URI uri = new URI(\"http\", \"corporateportal.companydomain.com\", \"/api/submit\", \"apiKey=\" + apiKey, null);\r\n            URL url = uri.toURL();\r\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n            connection.setRequestMethod(\"GET\");\r\n        } catch (Exception e) {\r\n",
                        "nextNode": "(HttpURLConnection) url.openConnection()"
                    },
                    {
                        "name": "(HttpURLConnection) url.openConnection()",
                        "type": "HttpURLConnection",
                        "context": "            URI uri = new URI(\"http\", \"corporateportal.companydomain.com\", \"/api/submit\", \"apiKey=\" + apiKey, null);\r\n            URL url = uri.toURL();\r\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n            connection.setRequestMethod(\"GET\");\r\n        } catch (Exception e) {\r\n",
                        "nextNode": "connection"
                    },
                    {
                        "name": "connection",
                        "type": "Dataflow from `openConnection(...)` to `connection`",
                        "context": "            URL url = uri.toURL();\r\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n            connection.setRequestMethod(\"GET\");\r\n        } catch (Exception e) {\r\n            System.err.println(\"Error occurred\");\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "uri",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "apiKey",
                        "type": "String",
                        "context": "    public static void submitApiKey(String apiKey) {\r\n        try {\r\n            URI uri = new URI(\"http\", \"corporateportal.companydomain.com\", \"/api/submit\", \"apiKey=\" + apiKey, null);\r\n            URL url = uri.toURL();\r\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n",
                        "nextNode": "\"apiKey=\" + apiKey"
                    },
                    {
                        "name": "\"apiKey=\" + apiKey",
                        "type": "String",
                        "context": "    public static void submitApiKey(String apiKey) {\r\n        try {\r\n            URI uri = new URI(\"http\", \"corporateportal.companydomain.com\", \"/api/submit\", \"apiKey=\" + apiKey, null);\r\n            URL url = uri.toURL();\r\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n",
                        "nextNode": "new URI(\"http\", \"corporateportal.companydomain.com\", \"/api/submit\", \"apiKey=\" + apiKey, null)"
                    },
                    {
                        "name": "new URI(\"http\", \"corporateportal.companydomain.com\", \"/api/submit\", \"apiKey=\" + apiKey, null)",
                        "type": "URI",
                        "context": "    public static void submitApiKey(String apiKey) {\r\n        try {\r\n            URI uri = new URI(\"http\", \"corporateportal.companydomain.com\", \"/api/submit\", \"apiKey=\" + apiKey, null);\r\n            URL url = uri.toURL();\r\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n",
                        "nextNode": "uri"
                    },
                    {
                        "name": "uri",
                        "type": "Dataflow from `apiKey` to `uri`\nDataflow from `new URI(...)` to `uri`\nDataflow from `\"abc12345-def67890-ghij1234-klmn5678\"` to `uri`\nDataflow from `\"http\"` to `uri`\nDataflow from `\"corporateportal.companydomain.com\"` to `uri`\nDataflow from `\"/api/submit\"` to `uri`\nDataflow from `null` to `uri`\nDataflow from `\"apiKey=\"` to `uri`",
                        "context": "        try {\r\n            URI uri = new URI(\"http\", \"corporateportal.companydomain.com\", \"/api/submit\", \"apiKey=\" + apiKey, null);\r\n            URL url = uri.toURL();\r\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n            connection.setRequestMethod(\"GET\");\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "url",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "apiKey",
                        "type": "String",
                        "context": "    public static void submitApiKey(String apiKey) {\r\n        try {\r\n            URI uri = new URI(\"http\", \"corporateportal.companydomain.com\", \"/api/submit\", \"apiKey=\" + apiKey, null);\r\n            URL url = uri.toURL();\r\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n",
                        "nextNode": "\"apiKey=\" + apiKey"
                    },
                    {
                        "name": "\"apiKey=\" + apiKey",
                        "type": "String",
                        "context": "    public static void submitApiKey(String apiKey) {\r\n        try {\r\n            URI uri = new URI(\"http\", \"corporateportal.companydomain.com\", \"/api/submit\", \"apiKey=\" + apiKey, null);\r\n            URL url = uri.toURL();\r\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n",
                        "nextNode": "new URI(\"http\", \"corporateportal.companydomain.com\", \"/api/submit\", \"apiKey=\" + apiKey, null)"
                    },
                    {
                        "name": "new URI(\"http\", \"corporateportal.companydomain.com\", \"/api/submit\", \"apiKey=\" + apiKey, null)",
                        "type": "URI",
                        "context": "    public static void submitApiKey(String apiKey) {\r\n        try {\r\n            URI uri = new URI(\"http\", \"corporateportal.companydomain.com\", \"/api/submit\", \"apiKey=\" + apiKey, null);\r\n            URL url = uri.toURL();\r\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n",
                        "nextNode": "uri"
                    },
                    {
                        "name": "uri",
                        "type": "URI",
                        "context": "        try {\r\n            URI uri = new URI(\"http\", \"corporateportal.companydomain.com\", \"/api/submit\", \"apiKey=\" + apiKey, null);\r\n            URL url = uri.toURL();\r\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n            connection.setRequestMethod(\"GET\");\r\n",
                        "nextNode": "uri.toURL()"
                    },
                    {
                        "name": "uri.toURL()",
                        "type": "URL",
                        "context": "        try {\r\n            URI uri = new URI(\"http\", \"corporateportal.companydomain.com\", \"/api/submit\", \"apiKey=\" + apiKey, null);\r\n            URL url = uri.toURL();\r\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n            connection.setRequestMethod(\"GET\");\r\n",
                        "nextNode": "url"
                    },
                    {
                        "name": "url",
                        "type": "Dataflow from `apiKey` to `url`\nDataflow from `uri` to `url`\nDataflow from `toURL(...)` to `url`\nDataflow from `new URI(...)` to `url`\nDataflow from `\"abc12345-def67890-ghij1234-klmn5678\"` to `url`\nDataflow from `\"http\"` to `url`\nDataflow from `\"corporateportal.companydomain.com\"` to `url`\nDataflow from `\"/api/submit\"` to `url`\nDataflow from `null` to `url`\nDataflow from `\"apiKey=\"` to `url`",
                        "context": "            URI uri = new URI(\"http\", \"corporateportal.companydomain.com\", \"/api/submit\", \"apiKey=\" + apiKey, null);\r\n            URL url = uri.toURL();\r\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n            connection.setRequestMethod(\"GET\");\r\n        } catch (Exception e) {\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "/api/submit",
                "isSensitive": "no"
            },
            {
                "name": "abc12345-def67890-ghij1234-klmn5678",
                "isSensitive": "yes"
            },
            {
                "name": "Error occurred",
                "isSensitive": "no"
            },
            {
                "name": "GET",
                "isSensitive": "no"
            },
            {
                "name": "http",
                "isSensitive": "no"
            },
            {
                "name": "corporateportal.companydomain.com",
                "isSensitive": "yes"
            },
            {
                "name": "apiKey=",
                "isSensitive": "no"
            }
        ],
        "comments": [],
        "sinks": [
            {
                "name": "println",
                "isSink": "yes"
            },
            {
                "name": "toURL",
                "isSink": "no"
            },
            {
                "name": "setRequestMethod",
                "isSink": "yes"
            },
            {
                "name": "openConnection",
                "isSink": "yes"
            },
            {
                "name": "submitApiKey",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "BAD_AuthenticationGET.java",
        "variables": [
            {
                "name": "args",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "e",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "responseStream",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "connection.getInputStream()",
                        "type": "InputStream",
                        "context": "            URL url = new URL(urlString);\r\n            URLConnection connection = url.openConnection();\r\n            InputStream responseStream = connection.getInputStream();\r\n            \r\n            responseStream.close();\r\n",
                        "nextNode": "responseStream"
                    },
                    {
                        "name": "responseStream",
                        "type": "Dataflow from `getInputStream(...)` to `responseStream`",
                        "context": "            InputStream responseStream = connection.getInputStream();\r\n            \r\n            responseStream.close();\r\n        } catch (Exception e) {\r\n            System.err.println(\"Error occurred\");\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "authToken",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "\"secureTokenXYZ\"",
                        "type": "String",
                        "context": "\r\n    public static void main(String[] args) {\r\n        authenticateUser(\"user123\", \"secureTokenXYZ\");\r\n    }\r\n}\r\n",
                        "nextNode": "String authToken"
                    },
                    {
                        "name": "String authToken",
                        "type": "String",
                        "context": "\r\npublic class BAD_AuthenticationGET {\r\n    public static void authenticateUser(String userId, String authToken) {\r\n        try {\r\n            String urlString = \"http://auth.companyportal.com/auth?userId\" + userId + \"&token=\" + authToken;\r\n",
                        "nextNode": "authToken"
                    },
                    {
                        "name": "authToken",
                        "type": "Dataflow from `\"secureTokenXYZ\"` to `authToken`",
                        "context": "    public static void authenticateUser(String userId, String authToken) {\r\n        try {\r\n            String urlString = \"http://auth.companyportal.com/auth?userId\" + userId + \"&token=\" + authToken;\r\n            URL url = new URL(urlString);\r\n            URLConnection connection = url.openConnection();\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "urlString",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "authToken",
                        "type": "String",
                        "context": "    public static void authenticateUser(String userId, String authToken) {\r\n        try {\r\n            String urlString = \"http://auth.companyportal.com/auth?userId\" + userId + \"&token=\" + authToken;\r\n            URL url = new URL(urlString);\r\n            URLConnection connection = url.openConnection();\r\n",
                        "nextNode": "\"http://auth.companyportal.com/auth?userId\" + userId + \"&token=\" + authToken"
                    },
                    {
                        "name": "\"http://auth.companyportal.com/auth?userId\" + userId + \"&token=\" + authToken",
                        "type": "String",
                        "context": "    public static void authenticateUser(String userId, String authToken) {\r\n        try {\r\n            String urlString = \"http://auth.companyportal.com/auth?userId\" + userId + \"&token=\" + authToken;\r\n            URL url = new URL(urlString);\r\n            URLConnection connection = url.openConnection();\r\n",
                        "nextNode": "urlString"
                    },
                    {
                        "name": "urlString",
                        "type": "Dataflow from `authToken` to `urlString`\nDataflow from `userId` to `urlString`\nDataflow from `\"&token=\"` to `urlString`\nDataflow from `\"http://auth.companyportal.com/auth?userId\"` to `urlString`\nDataflow from `\"user123\"` to `urlString`\nDataflow from `\"secureTokenXYZ\"` to `urlString`",
                        "context": "        try {\r\n            String urlString = \"http://auth.companyportal.com/auth?userId\" + userId + \"&token=\" + authToken;\r\n            URL url = new URL(urlString);\r\n            URLConnection connection = url.openConnection();\r\n            InputStream responseStream = connection.getInputStream();\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "connection",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "url.openConnection()",
                        "type": "URLConnection",
                        "context": "            String urlString = \"http://auth.companyportal.com/auth?userId\" + userId + \"&token=\" + authToken;\r\n            URL url = new URL(urlString);\r\n            URLConnection connection = url.openConnection();\r\n            InputStream responseStream = connection.getInputStream();\r\n            \r\n",
                        "nextNode": "connection"
                    },
                    {
                        "name": "connection",
                        "type": "Dataflow from `openConnection(...)` to `connection`",
                        "context": "            URL url = new URL(urlString);\r\n            URLConnection connection = url.openConnection();\r\n            InputStream responseStream = connection.getInputStream();\r\n            \r\n            responseStream.close();\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "userId",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "\"user123\"",
                        "type": "String",
                        "context": "\r\n    public static void main(String[] args) {\r\n        authenticateUser(\"user123\", \"secureTokenXYZ\");\r\n    }\r\n}\r\n",
                        "nextNode": "String userId"
                    },
                    {
                        "name": "String userId",
                        "type": "String",
                        "context": "\r\npublic class BAD_AuthenticationGET {\r\n    public static void authenticateUser(String userId, String authToken) {\r\n        try {\r\n            String urlString = \"http://auth.companyportal.com/auth?userId\" + userId + \"&token=\" + authToken;\r\n",
                        "nextNode": "userId"
                    },
                    {
                        "name": "userId",
                        "type": "Dataflow from `\"user123\"` to `userId`",
                        "context": "    public static void authenticateUser(String userId, String authToken) {\r\n        try {\r\n            String urlString = \"http://auth.companyportal.com/auth?userId\" + userId + \"&token=\" + authToken;\r\n            URL url = new URL(urlString);\r\n            URLConnection connection = url.openConnection();\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "url",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "authToken",
                        "type": "String",
                        "context": "    public static void authenticateUser(String userId, String authToken) {\r\n        try {\r\n            String urlString = \"http://auth.companyportal.com/auth?userId\" + userId + \"&token=\" + authToken;\r\n            URL url = new URL(urlString);\r\n            URLConnection connection = url.openConnection();\r\n",
                        "nextNode": "\"http://auth.companyportal.com/auth?userId\" + userId + \"&token=\" + authToken"
                    },
                    {
                        "name": "\"http://auth.companyportal.com/auth?userId\" + userId + \"&token=\" + authToken",
                        "type": "String",
                        "context": "    public static void authenticateUser(String userId, String authToken) {\r\n        try {\r\n            String urlString = \"http://auth.companyportal.com/auth?userId\" + userId + \"&token=\" + authToken;\r\n            URL url = new URL(urlString);\r\n            URLConnection connection = url.openConnection();\r\n",
                        "nextNode": "urlString"
                    },
                    {
                        "name": "urlString",
                        "type": "String",
                        "context": "        try {\r\n            String urlString = \"http://auth.companyportal.com/auth?userId\" + userId + \"&token=\" + authToken;\r\n            URL url = new URL(urlString);\r\n            URLConnection connection = url.openConnection();\r\n            InputStream responseStream = connection.getInputStream();\r\n",
                        "nextNode": "new URL(urlString)"
                    },
                    {
                        "name": "new URL(urlString)",
                        "type": "URL",
                        "context": "        try {\r\n            String urlString = \"http://auth.companyportal.com/auth?userId\" + userId + \"&token=\" + authToken;\r\n            URL url = new URL(urlString);\r\n            URLConnection connection = url.openConnection();\r\n            InputStream responseStream = connection.getInputStream();\r\n",
                        "nextNode": "url"
                    },
                    {
                        "name": "url",
                        "type": "Dataflow from `authToken` to `url`\nDataflow from `userId` to `url`\nDataflow from `urlString` to `url`\nDataflow from `new URL(...)` to `url`\nDataflow from `\"&token=\"` to `url`\nDataflow from `\"http://auth.companyportal.com/auth?userId\"` to `url`\nDataflow from `\"user123\"` to `url`\nDataflow from `\"secureTokenXYZ\"` to `url`",
                        "context": "            String urlString = \"http://auth.companyportal.com/auth?userId\" + userId + \"&token=\" + authToken;\r\n            URL url = new URL(urlString);\r\n            URLConnection connection = url.openConnection();\r\n            InputStream responseStream = connection.getInputStream();\r\n            \r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "Error occurred",
                "isSensitive": "no"
            },
            {
                "name": "&token=",
                "isSensitive": "no"
            },
            {
                "name": "secureTokenXYZ",
                "isSensitive": "yes"
            },
            {
                "name": "user123",
                "isSensitive": "no"
            },
            {
                "name": "http://auth.companyportal.com/auth?userId",
                "isSensitive": "yes"
            }
        ],
        "comments": [],
        "sinks": [
            {
                "name": "println",
                "isSink": "yes"
            },
            {
                "name": "authenticateUser",
                "isSink": "no"
            },
            {
                "name": "openConnection",
                "isSink": "yes"
            },
            {
                "name": "getInputStream",
                "isSink": "no"
            },
            {
                "name": "close",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "BAD_BankingTransactionQuery.java",
        "variables": [
            {
                "name": "args",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "httpClient",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "HttpClients.createDefault()",
                        "type": "CloseableHttpClient",
                        "context": "        try {\r\n            String url = \"http://services.bankcorp.com/transactions?accountNumber\" + accountNumber;\r\n            CloseableHttpClient httpClient = HttpClients.createDefault();\r\n            HttpGet httpGet = new HttpGet(url);\r\n            HttpResponse response = httpClient.execute(httpGet);\r\n |         try {\r\n            String url = \"http://services.bankcorp.com/transactions?accountNumber\" + accountNumber;\r\n            CloseableHttpClient httpClient = HttpClients.createDefault();\r\n            HttpGet httpGet = new HttpGet(url);\r\n            HttpResponse response = httpClient.execute(httpGet);\r\n",
                        "nextNode": "httpClient"
                    },
                    {
                        "name": "httpClient",
                        "type": "Dataflow from `createDefault(...)` to `httpClient`",
                        "context": "            CloseableHttpClient httpClient = HttpClients.createDefault();\r\n            HttpGet httpGet = new HttpGet(url);\r\n            HttpResponse response = httpClient.execute(httpGet);\r\n\r\n            httpClient.close();\r\n |             CloseableHttpClient httpClient = HttpClients.createDefault();\r\n            HttpGet httpGet = new HttpGet(url);\r\n            HttpResponse response = httpClient.execute(httpGet);\r\n\r\n            httpClient.close();\r\n |             HttpResponse response = httpClient.execute(httpGet);\r\n\r\n            httpClient.close();\r\n        } catch (Exception e) {\r\n            System.err.println(\"Error occurred\");\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "e",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "response",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "accountNumber",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "\"1234567890\"",
                        "type": "String",
                        "context": "\r\n    public static void main(String[] args) {\r\n        queryTransactionDetails(\"1234567890\"); \r\n    }\r\n}\r\n",
                        "nextNode": "String accountNumber"
                    },
                    {
                        "name": "String accountNumber",
                        "type": "String",
                        "context": "\r\npublic class BAD_BankingTransactionQuery {\r\n    public static void queryTransactionDetails(String accountNumber) {\r\n        try {\r\n            String url = \"http://services.bankcorp.com/transactions?accountNumber\" + accountNumber;\r\n",
                        "nextNode": "accountNumber"
                    },
                    {
                        "name": "accountNumber",
                        "type": "Dataflow from `\"1234567890\"` to `accountNumber`",
                        "context": "    public static void queryTransactionDetails(String accountNumber) {\r\n        try {\r\n            String url = \"http://services.bankcorp.com/transactions?accountNumber\" + accountNumber;\r\n            CloseableHttpClient httpClient = HttpClients.createDefault();\r\n            HttpGet httpGet = new HttpGet(url);\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "url",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "accountNumber",
                        "type": "String",
                        "context": "    public static void queryTransactionDetails(String accountNumber) {\r\n        try {\r\n            String url = \"http://services.bankcorp.com/transactions?accountNumber\" + accountNumber;\r\n            CloseableHttpClient httpClient = HttpClients.createDefault();\r\n            HttpGet httpGet = new HttpGet(url);\r\n",
                        "nextNode": "\"http://services.bankcorp.com/transactions?accountNumber\" + accountNumber"
                    },
                    {
                        "name": "\"http://services.bankcorp.com/transactions?accountNumber\" + accountNumber",
                        "type": "String",
                        "context": "    public static void queryTransactionDetails(String accountNumber) {\r\n        try {\r\n            String url = \"http://services.bankcorp.com/transactions?accountNumber\" + accountNumber;\r\n            CloseableHttpClient httpClient = HttpClients.createDefault();\r\n            HttpGet httpGet = new HttpGet(url);\r\n",
                        "nextNode": "url"
                    },
                    {
                        "name": "url",
                        "type": "Dataflow from `accountNumber` to `url`\nDataflow from `\"http://services.bankcorp.com/transactions?accountNumber\"` to `url`\nDataflow from `\"1234567890\"` to `url`",
                        "context": "            String url = \"http://services.bankcorp.com/transactions?accountNumber\" + accountNumber;\r\n            CloseableHttpClient httpClient = HttpClients.createDefault();\r\n            HttpGet httpGet = new HttpGet(url);\r\n            HttpResponse response = httpClient.execute(httpGet);\r\n\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "httpGet",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "accountNumber",
                        "type": "String",
                        "context": "    public static void queryTransactionDetails(String accountNumber) {\r\n        try {\r\n            String url = \"http://services.bankcorp.com/transactions?accountNumber\" + accountNumber;\r\n            CloseableHttpClient httpClient = HttpClients.createDefault();\r\n            HttpGet httpGet = new HttpGet(url);\r\n",
                        "nextNode": "\"http://services.bankcorp.com/transactions?accountNumber\" + accountNumber"
                    },
                    {
                        "name": "\"http://services.bankcorp.com/transactions?accountNumber\" + accountNumber",
                        "type": "String",
                        "context": "    public static void queryTransactionDetails(String accountNumber) {\r\n        try {\r\n            String url = \"http://services.bankcorp.com/transactions?accountNumber\" + accountNumber;\r\n            CloseableHttpClient httpClient = HttpClients.createDefault();\r\n            HttpGet httpGet = new HttpGet(url);\r\n",
                        "nextNode": "url"
                    },
                    {
                        "name": "url",
                        "type": "String",
                        "context": "            String url = \"http://services.bankcorp.com/transactions?accountNumber\" + accountNumber;\r\n            CloseableHttpClient httpClient = HttpClients.createDefault();\r\n            HttpGet httpGet = new HttpGet(url);\r\n            HttpResponse response = httpClient.execute(httpGet);\r\n\r\n",
                        "nextNode": "new HttpGet(url)"
                    },
                    {
                        "name": "new HttpGet(url)",
                        "type": "HttpGet",
                        "context": "            String url = \"http://services.bankcorp.com/transactions?accountNumber\" + accountNumber;\r\n            CloseableHttpClient httpClient = HttpClients.createDefault();\r\n            HttpGet httpGet = new HttpGet(url);\r\n            HttpResponse response = httpClient.execute(httpGet);\r\n\r\n",
                        "nextNode": "httpGet"
                    },
                    {
                        "name": "httpGet",
                        "type": "Dataflow from `accountNumber` to `httpGet`\nDataflow from `url` to `httpGet`\nDataflow from `\"http://services.bankcorp.com/transactions?accountNumber\"` to `httpGet`\nDataflow from `new HttpGet(...)` to `httpGet`\nDataflow from `\"1234567890\"` to `httpGet`",
                        "context": "            CloseableHttpClient httpClient = HttpClients.createDefault();\r\n            HttpGet httpGet = new HttpGet(url);\r\n            HttpResponse response = httpClient.execute(httpGet);\r\n\r\n            httpClient.close();\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "Error occurred",
                "isSensitive": "no"
            },
            {
                "name": "1234567890",
                "isSensitive": "yes"
            },
            {
                "name": "http://services.bankcorp.com/transactions?accountNumber",
                "isSensitive": "no"
            }
        ],
        "comments": [],
        "sinks": [
            {
                "name": "println",
                "isSink": "yes"
            },
            {
                "name": "queryTransactionDetails",
                "isSink": "no"
            },
            {
                "name": "execute",
                "isSink": "yes"
            },
            {
                "name": "close",
                "isSink": "no"
            },
            {
                "name": "createDefault",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "BAD_CreditCardSubmissionGET.java",
        "variables": [
            {
                "name": "expiryDate",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "\"12/23\"",
                        "type": "String",
                        "context": "    \r\n    public static void main(String[] args) {\r\n        submitCreditCard(\"1234567890123456\", \"12/23\", \"123\");\r\n    }\r\n}\r\n",
                        "nextNode": "String expiryDate"
                    },
                    {
                        "name": "String expiryDate",
                        "type": "String",
                        "context": "public class BAD_CreditCardSubmissionGET {\r\n    \r\n    public static void submitCreditCard(String cardNumber, String expiryDate, String cvv) {\r\n        try {\r\n            String urlString = \"http://payments.onlinebank.com/submitPayment?cardNumber=\" + cardNumber +\r\n",
                        "nextNode": "expiryDate"
                    },
                    {
                        "name": "expiryDate",
                        "type": "Dataflow from `\"12/23\"` to `expiryDate`",
                        "context": "        try {\r\n            String urlString = \"http://payments.onlinebank.com/submitPayment?cardNumber=\" + cardNumber +\r\n                               \"&expiryDate=\" + expiryDate + \"&cvv=\" + cvv; \r\n            URL url = new URL(urlString);\r\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "args",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "cvv",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "\"123\"",
                        "type": "String",
                        "context": "    \r\n    public static void main(String[] args) {\r\n        submitCreditCard(\"1234567890123456\", \"12/23\", \"123\");\r\n    }\r\n}\r\n",
                        "nextNode": "String cvv"
                    },
                    {
                        "name": "String cvv",
                        "type": "String",
                        "context": "public class BAD_CreditCardSubmissionGET {\r\n    \r\n    public static void submitCreditCard(String cardNumber, String expiryDate, String cvv) {\r\n        try {\r\n            String urlString = \"http://payments.onlinebank.com/submitPayment?cardNumber=\" + cardNumber +\r\n",
                        "nextNode": "cvv"
                    },
                    {
                        "name": "cvv",
                        "type": "Dataflow from `\"123\"` to `cvv`",
                        "context": "        try {\r\n            String urlString = \"http://payments.onlinebank.com/submitPayment?cardNumber=\" + cardNumber +\r\n                               \"&expiryDate=\" + expiryDate + \"&cvv=\" + cvv; \r\n            URL url = new URL(urlString);\r\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "e",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "urlString",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "cvv",
                        "type": "String",
                        "context": "        try {\r\n            String urlString = \"http://payments.onlinebank.com/submitPayment?cardNumber=\" + cardNumber +\r\n                               \"&expiryDate=\" + expiryDate + \"&cvv=\" + cvv; \r\n            URL url = new URL(urlString);\r\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n",
                        "nextNode": "\"http://payments.onlinebank.com/submitPaymen"
                    },
                    {
                        "name": "\"http://payments.onlinebank.com/submitPaymen",
                        "type": "String",
                        "context": "    public static void submitCreditCard(String cardNumber, String expiryDate, String cvv) {\r\n        try {\r\n            String urlString = \"http://payments.onlinebank.com/submitPayment?cardNumber=\" + cardNumber +\r\n                               \"&expiryDate=\" + expiryDate + \"&cvv=\" + cvv; \r\n            URL url = new URL(urlString);\r\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n",
                        "nextNode": "urlString"
                    },
                    {
                        "name": "urlString",
                        "type": "Dataflow from `cvv` to `urlString`\nDataflow from `expiryDate` to `urlString`\nDataflow from `cardNumber` to `urlString`\nDataflow from `\"&cvv=\"` to `urlString`\nDataflow from `\"&expiryDate=\"` to `urlString`\nDataflow from `\"http://payments.onlinebank.com/submitPayment?cardNumber=\"` to `urlString`\nDataflow from `\"1234567890123456\"` to `urlString`\nDataflow from `\"12/23\"` to `urlString`\nDataflow from `\"123\"` to `urlString`",
                        "context": "            String urlString = \"http://payments.onlinebank.com/submitPayment?cardNumber=\" + cardNumber +\r\n                               \"&expiryDate=\" + expiryDate + \"&cvv=\" + cvv; \r\n            URL url = new URL(urlString);\r\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n            connection.setRequestMethod(\"GET\");\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "connection",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "url.openConnection()",
                        "type": "URLConnection",
                        "context": "                               \"&expiryDate=\" + expiryDate + \"&cvv=\" + cvv; \r\n            URL url = new URL(urlString);\r\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n            connection.setRequestMethod(\"GET\");\r\n            \r\n",
                        "nextNode": "(HttpURLConnection) url.openConnection()"
                    },
                    {
                        "name": "(HttpURLConnection) url.openConnection()",
                        "type": "HttpURLConnection",
                        "context": "                               \"&expiryDate=\" + expiryDate + \"&cvv=\" + cvv; \r\n            URL url = new URL(urlString);\r\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n            connection.setRequestMethod(\"GET\");\r\n            \r\n",
                        "nextNode": "connection"
                    },
                    {
                        "name": "connection",
                        "type": "Dataflow from `openConnection(...)` to `connection`",
                        "context": "            URL url = new URL(urlString);\r\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n            connection.setRequestMethod(\"GET\");\r\n            \r\n        } catch (Exception e) {\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "url",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "cvv",
                        "type": "String",
                        "context": "        try {\r\n            String urlString = \"http://payments.onlinebank.com/submitPayment?cardNumber=\" + cardNumber +\r\n                               \"&expiryDate=\" + expiryDate + \"&cvv=\" + cvv; \r\n            URL url = new URL(urlString);\r\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n",
                        "nextNode": "\"http://payments.onlinebank.com/submitPaymen"
                    },
                    {
                        "name": "\"http://payments.onlinebank.com/submitPaymen",
                        "type": "String",
                        "context": "    public static void submitCreditCard(String cardNumber, String expiryDate, String cvv) {\r\n        try {\r\n            String urlString = \"http://payments.onlinebank.com/submitPayment?cardNumber=\" + cardNumber +\r\n                               \"&expiryDate=\" + expiryDate + \"&cvv=\" + cvv; \r\n            URL url = new URL(urlString);\r\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n",
                        "nextNode": "urlString"
                    },
                    {
                        "name": "urlString",
                        "type": "String",
                        "context": "            String urlString = \"http://payments.onlinebank.com/submitPayment?cardNumber=\" + cardNumber +\r\n                               \"&expiryDate=\" + expiryDate + \"&cvv=\" + cvv; \r\n            URL url = new URL(urlString);\r\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n            connection.setRequestMethod(\"GET\");\r\n",
                        "nextNode": "new URL(urlString)"
                    },
                    {
                        "name": "new URL(urlString)",
                        "type": "URL",
                        "context": "            String urlString = \"http://payments.onlinebank.com/submitPayment?cardNumber=\" + cardNumber +\r\n                               \"&expiryDate=\" + expiryDate + \"&cvv=\" + cvv; \r\n            URL url = new URL(urlString);\r\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n            connection.setRequestMethod(\"GET\");\r\n",
                        "nextNode": "url"
                    },
                    {
                        "name": "url",
                        "type": "Dataflow from `cvv` to `url`\nDataflow from `expiryDate` to `url`\nDataflow from `cardNumber` to `url`\nDataflow from `urlString` to `url`\nDataflow from `new URL(...)` to `url`\nDataflow from `\"&cvv=\"` to `url`\nDataflow from `\"&expiryDate=\"` to `url`\nDataflow from `\"http://payments.onlinebank.com/submitPayment?cardNumber=\"` to `url`\nDataflow from `\"1234567890123456\"` to `url`\nDataflow from `\"12/23\"` to `url`\nDataflow from `\"123\"` to `url`",
                        "context": "                               \"&expiryDate=\" + expiryDate + \"&cvv=\" + cvv; \r\n            URL url = new URL(urlString);\r\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n            connection.setRequestMethod(\"GET\");\r\n            \r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "cardNumber",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "\"1234567890123456\"",
                        "type": "String",
                        "context": "    \r\n    public static void main(String[] args) {\r\n        submitCreditCard(\"1234567890123456\", \"12/23\", \"123\");\r\n    }\r\n}\r\n",
                        "nextNode": "String cardNumber"
                    },
                    {
                        "name": "String cardNumber",
                        "type": "String",
                        "context": "public class BAD_CreditCardSubmissionGET {\r\n    \r\n    public static void submitCreditCard(String cardNumber, String expiryDate, String cvv) {\r\n        try {\r\n            String urlString = \"http://payments.onlinebank.com/submitPayment?cardNumber=\" + cardNumber +\r\n",
                        "nextNode": "cardNumber"
                    },
                    {
                        "name": "cardNumber",
                        "type": "Dataflow from `\"1234567890123456\"` to `cardNumber`",
                        "context": "    public static void submitCreditCard(String cardNumber, String expiryDate, String cvv) {\r\n        try {\r\n            String urlString = \"http://payments.onlinebank.com/submitPayment?cardNumber=\" + cardNumber +\r\n                               \"&expiryDate=\" + expiryDate + \"&cvv=\" + cvv; \r\n            URL url = new URL(urlString);\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "123",
                "isSensitive": "yes"
            },
            {
                "name": "Error occurred",
                "isSensitive": "no"
            },
            {
                "name": "1234567890123456",
                "isSensitive": "yes"
            },
            {
                "name": "http://payments.onlinebank.com/submitPayment?cardNumber=",
                "isSensitive": "yes"
            },
            {
                "name": "&cvv=",
                "isSensitive": "no"
            },
            {
                "name": "12/23",
                "isSensitive": "yes"
            },
            {
                "name": "GET",
                "isSensitive": "no"
            },
            {
                "name": "&expiryDate=",
                "isSensitive": "no"
            }
        ],
        "comments": [],
        "sinks": [
            {
                "name": "println",
                "isSink": "yes"
            },
            {
                "name": "setRequestMethod",
                "isSink": "yes"
            },
            {
                "name": "submitCreditCard",
                "isSink": "no"
            },
            {
                "name": "openConnection",
                "isSink": "yes"
            }
        ]
    },
    {
        "fileName": "BAD_FinancialDataGET.java",
        "variables": [
            {
                "name": "args",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "amount",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "\"100.00\"",
                        "type": "String",
                        "context": "\r\n    public static void main(String[] args) {\r\n        sendFinancialData(\"123456789\", \"100.00\");\r\n    }\r\n}\r\n",
                        "nextNode": "String amount"
                    },
                    {
                        "name": "String amount",
                        "type": "String",
                        "context": "\r\npublic class BAD_FinancialDataGET {\r\n    public static void sendFinancialData(String accountNumber, String amount) {\r\n        try {\r\n            String urlString = \"http://payments.fintechservice.com/processPayment?account=\" + accountNumber + \"&amount=\" + amount;\r\n",
                        "nextNode": "amount"
                    },
                    {
                        "name": "amount",
                        "type": "Dataflow from `\"100.00\"` to `amount`",
                        "context": "    public static void sendFinancialData(String accountNumber, String amount) {\r\n        try {\r\n            String urlString = \"http://payments.fintechservice.com/processPayment?account=\" + accountNumber + \"&amount=\" + amount;\r\n            URL url = new URL(urlString);\r\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "e",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "urlString",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "amount",
                        "type": "String",
                        "context": "    public static void sendFinancialData(String accountNumber, String amount) {\r\n        try {\r\n            String urlString = \"http://payments.fintechservice.com/processPayment?account=\" + accountNumber + \"&amount=\" + amount;\r\n            URL url = new URL(urlString);\r\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n",
                        "nextNode": "\"http://payments.fintechservice.com/processPayment?account=\" + accountNumber + \"&amount=\" + amount"
                    },
                    {
                        "name": "\"http://payments.fintechservice.com/processPayment?account=\" + accountNumber + \"&amount=\" + amount",
                        "type": "String",
                        "context": "    public static void sendFinancialData(String accountNumber, String amount) {\r\n        try {\r\n            String urlString = \"http://payments.fintechservice.com/processPayment?account=\" + accountNumber + \"&amount=\" + amount;\r\n            URL url = new URL(urlString);\r\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n",
                        "nextNode": "urlString"
                    },
                    {
                        "name": "urlString",
                        "type": "Dataflow from `amount` to `urlString`\nDataflow from `accountNumber` to `urlString`\nDataflow from `\"&amount=\"` to `urlString`\nDataflow from `\"http://payments.fintechservice.com/processPayment?account=\"` to `urlString`\nDataflow from `\"123456789\"` to `urlString`\nDataflow from `\"100.00\"` to `urlString`",
                        "context": "        try {\r\n            String urlString = \"http://payments.fintechservice.com/processPayment?account=\" + accountNumber + \"&amount=\" + amount;\r\n            URL url = new URL(urlString);\r\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n            connection.setRequestMethod(\"GET\");\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "connection",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "url.openConnection()",
                        "type": "URLConnection",
                        "context": "            String urlString = \"http://payments.fintechservice.com/processPayment?account=\" + accountNumber + \"&amount=\" + amount;\r\n            URL url = new URL(urlString);\r\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n            connection.setRequestMethod(\"GET\");\r\n            \r\n",
                        "nextNode": "(HttpURLConnection) url.openConnection()"
                    },
                    {
                        "name": "(HttpURLConnection) url.openConnection()",
                        "type": "HttpURLConnection",
                        "context": "            String urlString = \"http://payments.fintechservice.com/processPayment?account=\" + accountNumber + \"&amount=\" + amount;\r\n            URL url = new URL(urlString);\r\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n            connection.setRequestMethod(\"GET\");\r\n            \r\n",
                        "nextNode": "connection"
                    },
                    {
                        "name": "connection",
                        "type": "Dataflow from `openConnection(...)` to `connection`",
                        "context": "            URL url = new URL(urlString);\r\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n            connection.setRequestMethod(\"GET\");\r\n            \r\n        } catch (Exception e) {\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "accountNumber",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "\"123456789\"",
                        "type": "String",
                        "context": "\r\n    public static void main(String[] args) {\r\n        sendFinancialData(\"123456789\", \"100.00\");\r\n    }\r\n}\r\n",
                        "nextNode": "String accountNumber"
                    },
                    {
                        "name": "String accountNumber",
                        "type": "String",
                        "context": "\r\npublic class BAD_FinancialDataGET {\r\n    public static void sendFinancialData(String accountNumber, String amount) {\r\n        try {\r\n            String urlString = \"http://payments.fintechservice.com/processPayment?account=\" + accountNumber + \"&amount=\" + amount;\r\n",
                        "nextNode": "accountNumber"
                    },
                    {
                        "name": "accountNumber",
                        "type": "Dataflow from `\"123456789\"` to `accountNumber`",
                        "context": "    public static void sendFinancialData(String accountNumber, String amount) {\r\n        try {\r\n            String urlString = \"http://payments.fintechservice.com/processPayment?account=\" + accountNumber + \"&amount=\" + amount;\r\n            URL url = new URL(urlString);\r\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "url",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "amount",
                        "type": "String",
                        "context": "    public static void sendFinancialData(String accountNumber, String amount) {\r\n        try {\r\n            String urlString = \"http://payments.fintechservice.com/processPayment?account=\" + accountNumber + \"&amount=\" + amount;\r\n            URL url = new URL(urlString);\r\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n",
                        "nextNode": "\"http://payments.fintechservice.com/processPayment?account=\" + accountNumber + \"&amount=\" + amount"
                    },
                    {
                        "name": "\"http://payments.fintechservice.com/processPayment?account=\" + accountNumber + \"&amount=\" + amount",
                        "type": "String",
                        "context": "    public static void sendFinancialData(String accountNumber, String amount) {\r\n        try {\r\n            String urlString = \"http://payments.fintechservice.com/processPayment?account=\" + accountNumber + \"&amount=\" + amount;\r\n            URL url = new URL(urlString);\r\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n",
                        "nextNode": "urlString"
                    },
                    {
                        "name": "urlString",
                        "type": "String",
                        "context": "        try {\r\n            String urlString = \"http://payments.fintechservice.com/processPayment?account=\" + accountNumber + \"&amount=\" + amount;\r\n            URL url = new URL(urlString);\r\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n            connection.setRequestMethod(\"GET\");\r\n",
                        "nextNode": "new URL(urlString)"
                    },
                    {
                        "name": "new URL(urlString)",
                        "type": "URL",
                        "context": "        try {\r\n            String urlString = \"http://payments.fintechservice.com/processPayment?account=\" + accountNumber + \"&amount=\" + amount;\r\n            URL url = new URL(urlString);\r\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n            connection.setRequestMethod(\"GET\");\r\n",
                        "nextNode": "url"
                    },
                    {
                        "name": "url",
                        "type": "Dataflow from `amount` to `url`\nDataflow from `accountNumber` to `url`\nDataflow from `urlString` to `url`\nDataflow from `new URL(...)` to `url`\nDataflow from `\"&amount=\"` to `url`\nDataflow from `\"http://payments.fintechservice.com/processPayment?account=\"` to `url`\nDataflow from `\"123456789\"` to `url`\nDataflow from `\"100.00\"` to `url`",
                        "context": "            String urlString = \"http://payments.fintechservice.com/processPayment?account=\" + accountNumber + \"&amount=\" + amount;\r\n            URL url = new URL(urlString);\r\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n            connection.setRequestMethod(\"GET\");\r\n            \r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "&amount=",
                "isSensitive": "no"
            },
            {
                "name": "Error occurred",
                "isSensitive": "no"
            },
            {
                "name": "100.00",
                "isSensitive": "no"
            },
            {
                "name": "GET",
                "isSensitive": "no"
            },
            {
                "name": "123456789",
                "isSensitive": "yes"
            },
            {
                "name": "http://payments.fintechservice.com/processPayment?account=",
                "isSensitive": "yes"
            }
        ],
        "comments": [],
        "sinks": [
            {
                "name": "println",
                "isSink": "yes"
            },
            {
                "name": "setRequestMethod",
                "isSink": "yes"
            },
            {
                "name": "openConnection",
                "isSink": "yes"
            },
            {
                "name": "sendFinancialData",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "BAD_HealthInfoSubmissionGET.java",
        "variables": [
            {
                "name": "symptoms",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "\"Fever, cough, and shortness of breath\"",
                        "type": "String",
                        "context": "    \r\n    public static void main(String[] args) {\r\n        bookMedicalAppointment(\"12345\", \"Fever, cough, and shortness of breath\", \"DrJohnDoe\"); // Highly sensitive and insecure!\r\n    }\r\n}\r\n",
                        "nextNode": "String symptoms"
                    },
                    {
                        "name": "String symptoms",
                        "type": "String",
                        "context": "public class BAD_HealthInfoSubmissionGET {\r\n    \r\n    public static void bookMedicalAppointment(String patientId, String symptoms, String doctorId) {\r\n        try {\r\n            String encodedSymptoms = URLEncoder.encode(symptoms, StandardCharsets.UTF_8.toString());\r\n",
                        "nextNode": "symptoms"
                    },
                    {
                        "name": "symptoms",
                        "type": "Dataflow from `\"Fever, cough, and shortness of breath\"` to `symptoms`",
                        "context": "    public static void bookMedicalAppointment(String patientId, String symptoms, String doctorId) {\r\n        try {\r\n            String encodedSymptoms = URLEncoder.encode(symptoms, StandardCharsets.UTF_8.toString());\r\n\r\n            String urlString = \"http://healthcare.example.com/bookAppointment?patientId=\" + patientId +\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "args",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "e",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "patientId",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "\"12345\"",
                        "type": "String",
                        "context": "    \r\n    public static void main(String[] args) {\r\n        bookMedicalAppointment(\"12345\", \"Fever, cough, and shortness of breath\", \"DrJohnDoe\"); // Highly sensitive and insecure!\r\n    }\r\n}\r\n",
                        "nextNode": "String patientId"
                    },
                    {
                        "name": "String patientId",
                        "type": "String",
                        "context": "public class BAD_HealthInfoSubmissionGET {\r\n    \r\n    public static void bookMedicalAppointment(String patientId, String symptoms, String doctorId) {\r\n        try {\r\n            String encodedSymptoms = URLEncoder.encode(symptoms, StandardCharsets.UTF_8.toString());\r\n",
                        "nextNode": "patientId"
                    },
                    {
                        "name": "patientId",
                        "type": "Dataflow from `\"12345\"` to `patientId`",
                        "context": "            String encodedSymptoms = URLEncoder.encode(symptoms, StandardCharsets.UTF_8.toString());\r\n\r\n            String urlString = \"http://healthcare.example.com/bookAppointment?patientId=\" + patientId +\r\n                               \"&symptoms=\" + encodedSymptoms + \"&doctorId=\" + doctorId;\r\n            \r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "doctorId",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "\"DrJohnDoe\"",
                        "type": "String",
                        "context": "    \r\n    public static void main(String[] args) {\r\n        bookMedicalAppointment(\"12345\", \"Fever, cough, and shortness of breath\", \"DrJohnDoe\"); // Highly sensitive and insecure!\r\n    }\r\n}\r\n",
                        "nextNode": "String doctorId"
                    },
                    {
                        "name": "String doctorId",
                        "type": "String",
                        "context": "public class BAD_HealthInfoSubmissionGET {\r\n    \r\n    public static void bookMedicalAppointment(String patientId, String symptoms, String doctorId) {\r\n        try {\r\n            String encodedSymptoms = URLEncoder.encode(symptoms, StandardCharsets.UTF_8.toString());\r\n",
                        "nextNode": "doctorId"
                    },
                    {
                        "name": "doctorId",
                        "type": "Dataflow from `\"DrJohnDoe\"` to `doctorId`",
                        "context": "\r\n            String urlString = \"http://healthcare.example.com/bookAppointment?patientId=\" + patientId +\r\n                               \"&symptoms=\" + encodedSymptoms + \"&doctorId=\" + doctorId;\r\n            \r\n            URL url = new URL(urlString);\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "encodedSymptoms",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "symptoms",
                        "type": "String",
                        "context": "    public static void bookMedicalAppointment(String patientId, String symptoms, String doctorId) {\r\n        try {\r\n            String encodedSymptoms = URLEncoder.encode(symptoms, StandardCharsets.UTF_8.toString());\r\n\r\n            String urlString = \"http://healthcare.example.com/bookAppointment?patientId=\" + patientId +\r\n",
                        "nextNode": "URLEncoder.encode(symptoms, StandardCharsets.UTF_8.toString()"
                    },
                    {
                        "name": "URLEncoder.encode(symptoms, StandardCharsets.UTF_8.toString()",
                        "type": "String",
                        "context": "    public static void bookMedicalAppointment(String patientId, String symptoms, String doctorId) {\r\n        try {\r\n            String encodedSymptoms = URLEncoder.encode(symptoms, StandardCharsets.UTF_8.toString());\r\n\r\n            String urlString = \"http://healthcare.example.com/bookAppointment?patientId=\" + patientId +\r\n",
                        "nextNode": "encodedSymptoms"
                    },
                    {
                        "name": "encodedSymptoms",
                        "type": "Dataflow from `symptoms` to `encodedSymptoms`\nDataflow from `encode(...)` to `encodedSymptoms`\nDataflow from `toString(...)` to `encodedSymptoms`\nDataflow from `\"Fever, cough, and shortness of breath\"` to `encodedSymptoms`",
                        "context": "\r\n            String urlString = \"http://healthcare.example.com/bookAppointment?patientId=\" + patientId +\r\n                               \"&symptoms=\" + encodedSymptoms + \"&doctorId=\" + doctorId;\r\n            \r\n            URL url = new URL(urlString);\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "urlString",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "symptoms",
                        "type": "String",
                        "context": "    public static void bookMedicalAppointment(String patientId, String symptoms, String doctorId) {\r\n        try {\r\n            String encodedSymptoms = URLEncoder.encode(symptoms, StandardCharsets.UTF_8.toString());\r\n\r\n            String urlString = \"http://healthcare.example.com/bookAppointment?patientId=\" + patientId +\r\n",
                        "nextNode": "URLEncoder.encode(symptoms, StandardCharsets.UTF_8.toString()"
                    },
                    {
                        "name": "URLEncoder.encode(symptoms, StandardCharsets.UTF_8.toString()",
                        "type": "String",
                        "context": "    public static void bookMedicalAppointment(String patientId, String symptoms, String doctorId) {\r\n        try {\r\n            String encodedSymptoms = URLEncoder.encode(symptoms, StandardCharsets.UTF_8.toString());\r\n\r\n            String urlString = \"http://healthcare.example.com/bookAppointment?patientId=\" + patientId +\r\n",
                        "nextNode": "encodedSymptoms"
                    },
                    {
                        "name": "encodedSymptoms",
                        "type": "String",
                        "context": "\r\n            String urlString = \"http://healthcare.example.com/bookAppointment?patientId=\" + patientId +\r\n                               \"&symptoms=\" + encodedSymptoms + \"&doctorId=\" + doctorId;\r\n            \r\n            URL url = new URL(urlString);\r\n",
                        "nextNode": "\"http://healthcare.example.com/"
                    },
                    {
                        "name": "\"http://healthcare.example.com/",
                        "type": "String",
                        "context": "            String encodedSymptoms = URLEncoder.encode(symptoms, StandardCharsets.UTF_8.toString());\r\n\r\n            String urlString = \"http://healthcare.example.com/bookAppointment?patientId=\" + patientId +\r\n                               \"&symptoms=\" + encodedSymptoms + \"&doctorId=\" + doctorId;\r\n            \r\n            URL url = new URL(urlString);\r\n",
                        "nextNode": "\"http://healthcare.example.com/bookAppointment"
                    },
                    {
                        "name": "\"http://healthcare.example.com/bookAppointment",
                        "type": "String",
                        "context": "            String encodedSymptoms = URLEncoder.encode(symptoms, StandardCharsets.UTF_8.toString());\r\n\r\n            String urlString = \"http://healthcare.example.com/bookAppointment?patientId=\" + patientId +\r\n                               \"&symptoms=\" + encodedSymptoms + \"&doctorId=\" + doctorId;\r\n            \r\n            URL url = new URL(urlString);\r\n",
                        "nextNode": "\"http://healthcare.example.com/bookAppointment?patientId="
                    },
                    {
                        "name": "\"http://healthcare.example.com/bookAppointment?patientId=",
                        "type": "String",
                        "context": "            String encodedSymptoms = URLEncoder.encode(symptoms, StandardCharsets.UTF_8.toString());\r\n\r\n            String urlString = \"http://healthcare.example.com/bookAppointment?patientId=\" + patientId +\r\n                               \"&symptoms=\" + encodedSymptoms + \"&doctorId=\" + doctorId;\r\n            \r\n            URL url = new URL(urlString);\r\n",
                        "nextNode": "urlString"
                    },
                    {
                        "name": "urlString",
                        "type": "Dataflow from `symptoms` to `urlString`\nDataflow from `doctorId` to `urlString`\nDataflow from `encodedSymptoms` to `urlString`\nDataflow from `patientId` to `urlString`\nDataflow from `encode(...)` to `urlString`\nDataflow from `toString(...)` to `urlString`\nDataflow from `\"&doctorId=\"` to `urlString`\nDataflow from `\"&symptoms=\"` to `urlString`\nDataflow from `\"http://healthcare.example.com/bookAppointment?patientId=\"` to `urlString`\nDataflow from `\"12345\"` to `urlString`\nDataflow from `\"Fever, cough, and shortness of breath\"` to `urlString`\nDataflow from `\"DrJohnDoe\"` to `urlString`",
                        "context": "                               \"&symptoms=\" + encodedSymptoms + \"&doctorId=\" + doctorId;\r\n            \r\n            URL url = new URL(urlString);\r\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n            connection.setRequestMethod(\"GET\");\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "connection",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "url.openConnection()",
                        "type": "URLConnection",
                        "context": "            \r\n            URL url = new URL(urlString);\r\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n            connection.setRequestMethod(\"GET\");\r\n            \r\n",
                        "nextNode": "(HttpURLConnection) url.openConnection()"
                    },
                    {
                        "name": "(HttpURLConnection) url.openConnection()",
                        "type": "HttpURLConnection",
                        "context": "            \r\n            URL url = new URL(urlString);\r\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n            connection.setRequestMethod(\"GET\");\r\n            \r\n",
                        "nextNode": "connection"
                    },
                    {
                        "name": "connection",
                        "type": "Dataflow from `openConnection(...)` to `connection`",
                        "context": "            URL url = new URL(urlString);\r\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n            connection.setRequestMethod(\"GET\");\r\n            \r\n        } catch (Exception e) {\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "url",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "symptoms",
                        "type": "String",
                        "context": "    public static void bookMedicalAppointment(String patientId, String symptoms, String doctorId) {\r\n        try {\r\n            String encodedSymptoms = URLEncoder.encode(symptoms, StandardCharsets.UTF_8.toString());\r\n\r\n            String urlString = \"http://healthcare.example.com/bookAppointment?patientId=\" + patientId +\r\n",
                        "nextNode": "URLEncoder.encode(symptoms, StandardCharsets.UTF_8.toString()"
                    },
                    {
                        "name": "URLEncoder.encode(symptoms, StandardCharsets.UTF_8.toString()",
                        "type": "String",
                        "context": "    public static void bookMedicalAppointment(String patientId, String symptoms, String doctorId) {\r\n        try {\r\n            String encodedSymptoms = URLEncoder.encode(symptoms, StandardCharsets.UTF_8.toString());\r\n\r\n            String urlString = \"http://healthcare.example.com/bookAppointment?patientId=\" + patientId +\r\n",
                        "nextNode": "encodedSymptoms"
                    },
                    {
                        "name": "encodedSymptoms",
                        "type": "String",
                        "context": "\r\n            String urlString = \"http://healthcare.example.com/bookAppointment?patientId=\" + patientId +\r\n                               \"&symptoms=\" + encodedSymptoms + \"&doctorId=\" + doctorId;\r\n            \r\n            URL url = new URL(urlString);\r\n",
                        "nextNode": "\"http://healthcare.example.com/"
                    },
                    {
                        "name": "\"http://healthcare.example.com/",
                        "type": "String",
                        "context": "            String encodedSymptoms = URLEncoder.encode(symptoms, StandardCharsets.UTF_8.toString());\r\n\r\n            String urlString = \"http://healthcare.example.com/bookAppointment?patientId=\" + patientId +\r\n                               \"&symptoms=\" + encodedSymptoms + \"&doctorId=\" + doctorId;\r\n            \r\n            URL url = new URL(urlString);\r\n",
                        "nextNode": "\"http://healthcare.example.com/bookAppointment"
                    },
                    {
                        "name": "\"http://healthcare.example.com/bookAppointment",
                        "type": "String",
                        "context": "            String encodedSymptoms = URLEncoder.encode(symptoms, StandardCharsets.UTF_8.toString());\r\n\r\n            String urlString = \"http://healthcare.example.com/bookAppointment?patientId=\" + patientId +\r\n                               \"&symptoms=\" + encodedSymptoms + \"&doctorId=\" + doctorId;\r\n            \r\n            URL url = new URL(urlString);\r\n",
                        "nextNode": "\"http://healthcare.example.com/bookAppointment?patientId="
                    },
                    {
                        "name": "\"http://healthcare.example.com/bookAppointment?patientId=",
                        "type": "String",
                        "context": "            String encodedSymptoms = URLEncoder.encode(symptoms, StandardCharsets.UTF_8.toString());\r\n\r\n            String urlString = \"http://healthcare.example.com/bookAppointment?patientId=\" + patientId +\r\n                               \"&symptoms=\" + encodedSymptoms + \"&doctorId=\" + doctorId;\r\n            \r\n            URL url = new URL(urlString);\r\n",
                        "nextNode": "urlString"
                    },
                    {
                        "name": "urlString",
                        "type": "String",
                        "context": "                               \"&symptoms=\" + encodedSymptoms + \"&doctorId=\" + doctorId;\r\n            \r\n            URL url = new URL(urlString);\r\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n            connection.setRequestMethod(\"GET\");\r\n",
                        "nextNode": "new URL(urlString)"
                    },
                    {
                        "name": "new URL(urlString)",
                        "type": "URL",
                        "context": "                               \"&symptoms=\" + encodedSymptoms + \"&doctorId=\" + doctorId;\r\n            \r\n            URL url = new URL(urlString);\r\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n            connection.setRequestMethod(\"GET\");\r\n",
                        "nextNode": "url"
                    },
                    {
                        "name": "url",
                        "type": "Dataflow from `symptoms` to `url`\nDataflow from `doctorId` to `url`\nDataflow from `encodedSymptoms` to `url`\nDataflow from `patientId` to `url`\nDataflow from `urlString` to `url`\nDataflow from `new URL(...)` to `url`\nDataflow from `encode(...)` to `url`\nDataflow from `toString(...)` to `url`\nDataflow from `\"&doctorId=\"` to `url`\nDataflow from `\"&symptoms=\"` to `url`\nDataflow from `\"http://healthcare.example.com/bookAppointment?patientId=\"` to `url`\nDataflow from `\"12345\"` to `url`\nDataflow from `\"Fever, cough, and shortness of breath\"` to `url`\nDataflow from `\"DrJohnDoe\"` to `url`",
                        "context": "            \r\n            URL url = new URL(urlString);\r\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n            connection.setRequestMethod(\"GET\");\r\n            \r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "http://healthcare.example.com/bookAppointment?patientId=",
                "isSensitive": "yes"
            },
            {
                "name": "&symptoms=",
                "isSensitive": "no"
            },
            {
                "name": "Error occurred",
                "isSensitive": "no"
            },
            {
                "name": "Fever, cough, and shortness of breath",
                "isSensitive": "no"
            },
            {
                "name": "DrJohnDoe",
                "isSensitive": "no"
            },
            {
                "name": "GET",
                "isSensitive": "no"
            },
            {
                "name": "12345",
                "isSensitive": "no"
            },
            {
                "name": "&doctorId=",
                "isSensitive": "no"
            }
        ],
        "comments": [
            {
                "name": "Highly sensitive and insecure!",
                "isSensitive": "no"
            }
        ],
        "sinks": [
            {
                "name": "encode",
                "isSink": "no"
            },
            {
                "name": "println",
                "isSink": "yes"
            },
            {
                "name": "setRequestMethod",
                "isSink": "yes"
            },
            {
                "name": "openConnection",
                "isSink": "yes"
            },
            {
                "name": "bookMedicalAppointment",
                "isSink": "no"
            },
            {
                "name": "toString",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "BAD_MedicalRecordRequest.java",
        "variables": [
            {
                "name": "args",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "e",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "patientId",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "\"987654321\"",
                        "type": "String",
                        "context": "\r\n    public static void main(String[] args) {\r\n        requestMedicalRecord(\"987654321\");\r\n    }\r\n}\r\n",
                        "nextNode": "String patientId"
                    },
                    {
                        "name": "String patientId",
                        "type": "String",
                        "context": "\r\npublic class BAD_MedicalRecordRequest {\r\n    public static void requestMedicalRecord(String patientId) {\r\n        try {\r\n            String urlString = \"http://healthdata.hospitalsystem.com/medicalRecords?patientId\" + patientId;\r\n",
                        "nextNode": "patientId"
                    },
                    {
                        "name": "patientId",
                        "type": "Dataflow from `\"987654321\"` to `patientId`",
                        "context": "    public static void requestMedicalRecord(String patientId) {\r\n        try {\r\n            String urlString = \"http://healthdata.hospitalsystem.com/medicalRecords?patientId\" + patientId;\r\n            URL url = new URL(urlString);\r\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "urlString",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "patientId",
                        "type": "String",
                        "context": "    public static void requestMedicalRecord(String patientId) {\r\n        try {\r\n            String urlString = \"http://healthdata.hospitalsystem.com/medicalRecords?patientId\" + patientId;\r\n            URL url = new URL(urlString);\r\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n",
                        "nextNode": "\"http://healthdata.hospitalsystem.com/medicalRecords?patientId\" + patientId"
                    },
                    {
                        "name": "\"http://healthdata.hospitalsystem.com/medicalRecords?patientId\" + patientId",
                        "type": "String",
                        "context": "    public static void requestMedicalRecord(String patientId) {\r\n        try {\r\n            String urlString = \"http://healthdata.hospitalsystem.com/medicalRecords?patientId\" + patientId;\r\n            URL url = new URL(urlString);\r\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n",
                        "nextNode": "urlString"
                    },
                    {
                        "name": "urlString",
                        "type": "Dataflow from `patientId` to `urlString`\nDataflow from `\"http://healthdata.hospitalsystem.com/medicalRecords?patientId\"` to `urlString`\nDataflow from `\"987654321\"` to `urlString`",
                        "context": "        try {\r\n            String urlString = \"http://healthdata.hospitalsystem.com/medicalRecords?patientId\" + patientId;\r\n            URL url = new URL(urlString);\r\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n            connection.setRequestMethod(\"GET\");\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "connection",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "url.openConnection()",
                        "type": "URLConnection",
                        "context": "            String urlString = \"http://healthdata.hospitalsystem.com/medicalRecords?patientId\" + patientId;\r\n            URL url = new URL(urlString);\r\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n            connection.setRequestMethod(\"GET\");\r\n            \r\n",
                        "nextNode": "(HttpURLConnection) url.openConnection()"
                    },
                    {
                        "name": "(HttpURLConnection) url.openConnection()",
                        "type": "HttpURLConnection",
                        "context": "            String urlString = \"http://healthdata.hospitalsystem.com/medicalRecords?patientId\" + patientId;\r\n            URL url = new URL(urlString);\r\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n            connection.setRequestMethod(\"GET\");\r\n            \r\n",
                        "nextNode": "connection"
                    },
                    {
                        "name": "connection",
                        "type": "Dataflow from `openConnection(...)` to `connection`",
                        "context": "            URL url = new URL(urlString);\r\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n            connection.setRequestMethod(\"GET\");\r\n            \r\n        } catch (Exception e) {\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "url",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "patientId",
                        "type": "String",
                        "context": "    public static void requestMedicalRecord(String patientId) {\r\n        try {\r\n            String urlString = \"http://healthdata.hospitalsystem.com/medicalRecords?patientId\" + patientId;\r\n            URL url = new URL(urlString);\r\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n",
                        "nextNode": "\"http://healthdata.hospitalsystem.com/medicalRecords?patientId\" + patientId"
                    },
                    {
                        "name": "\"http://healthdata.hospitalsystem.com/medicalRecords?patientId\" + patientId",
                        "type": "String",
                        "context": "    public static void requestMedicalRecord(String patientId) {\r\n        try {\r\n            String urlString = \"http://healthdata.hospitalsystem.com/medicalRecords?patientId\" + patientId;\r\n            URL url = new URL(urlString);\r\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n",
                        "nextNode": "urlString"
                    },
                    {
                        "name": "urlString",
                        "type": "String",
                        "context": "        try {\r\n            String urlString = \"http://healthdata.hospitalsystem.com/medicalRecords?patientId\" + patientId;\r\n            URL url = new URL(urlString);\r\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n            connection.setRequestMethod(\"GET\");\r\n",
                        "nextNode": "new URL(urlString)"
                    },
                    {
                        "name": "new URL(urlString)",
                        "type": "URL",
                        "context": "        try {\r\n            String urlString = \"http://healthdata.hospitalsystem.com/medicalRecords?patientId\" + patientId;\r\n            URL url = new URL(urlString);\r\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n            connection.setRequestMethod(\"GET\");\r\n",
                        "nextNode": "url"
                    },
                    {
                        "name": "url",
                        "type": "Dataflow from `patientId` to `url`\nDataflow from `urlString` to `url`\nDataflow from `new URL(...)` to `url`\nDataflow from `\"http://healthdata.hospitalsystem.com/medicalRecords?patientId\"` to `url`\nDataflow from `\"987654321\"` to `url`",
                        "context": "            String urlString = \"http://healthdata.hospitalsystem.com/medicalRecords?patientId\" + patientId;\r\n            URL url = new URL(urlString);\r\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n            connection.setRequestMethod(\"GET\");\r\n            \r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "Error occurred",
                "isSensitive": "no"
            },
            {
                "name": "GET",
                "isSensitive": "no"
            },
            {
                "name": "http://healthdata.hospitalsystem.com/medicalRecords?patientId",
                "isSensitive": "yes"
            },
            {
                "name": "987654321",
                "isSensitive": "yes"
            }
        ],
        "comments": [],
        "sinks": [
            {
                "name": "println",
                "isSink": "yes"
            },
            {
                "name": "setRequestMethod",
                "isSink": "yes"
            },
            {
                "name": "requestMedicalRecord",
                "isSink": "no"
            },
            {
                "name": "openConnection",
                "isSink": "yes"
            }
        ]
    },
    {
        "fileName": "BAD_PasswordChangeGET.java",
        "variables": [
            {
                "name": "args",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "e",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "oldPassword",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "\"oldPass123\"",
                        "type": "String",
                        "context": "    \r\n    public static void main(String[] args) {\r\n        changePassword(\"user2\", \"oldPass123\", \"newPass456\");\r\n    }\r\n}\r\n",
                        "nextNode": "String oldPassword"
                    },
                    {
                        "name": "String oldPassword",
                        "type": "String",
                        "context": "public class BAD_PasswordChangeGET {\r\n    \r\n    public static void changePassword(String username, String oldPassword, String newPassword) {\r\n        try {\r\n            String urlString = \"http://secure.companyportal.com/changePassword?username=johndoe\" + username + \r\n",
                        "nextNode": "oldPassword"
                    },
                    {
                        "name": "oldPassword",
                        "type": "Dataflow from `\"oldPass123\"` to `oldPassword`",
                        "context": "        try {\r\n            String urlString = \"http://secure.companyportal.com/changePassword?username=johndoe\" + username + \r\n                               \"&oldPassword=\" + oldPassword + \"&newPassword=\" + newPassword;\r\n            URL url = new URL(urlString);\r\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "urlString",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "newPassword",
                        "type": "String",
                        "context": "        try {\r\n            String urlString = \"http://secure.companyportal.com/changePassword?username=johndoe\" + username + \r\n                               \"&oldPassword=\" + oldPassword + \"&newPassword=\" + newPassword;\r\n            URL url = new URL(urlString);\r\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n",
                        "nextNode": "\"http://secure.companyportal.com/changePassword?username=johnd"
                    },
                    {
                        "name": "\"http://secure.companyportal.com/changePassword?username=johnd",
                        "type": "String",
                        "context": "    public static void changePassword(String username, String oldPassword, String newPassword) {\r\n        try {\r\n            String urlString = \"http://secure.companyportal.com/changePassword?username=johndoe\" + username + \r\n                               \"&oldPassword=\" + oldPassword + \"&newPassword=\" + newPassword;\r\n            URL url = new URL(urlString);\r\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n",
                        "nextNode": "urlString"
                    },
                    {
                        "name": "urlString",
                        "type": "Dataflow from `newPassword` to `urlString`\nDataflow from `oldPassword` to `urlString`\nDataflow from `username` to `urlString`\nDataflow from `\"&newPassword=\"` to `urlString`\nDataflow from `\"&oldPassword=\"` to `urlString`\nDataflow from `\"http://secure.companyportal.com/changePassword?username=johndoe\"` to `urlString`\nDataflow from `\"user2\"` to `urlString`\nDataflow from `\"oldPass123\"` to `urlString`\nDataflow from `\"newPass456\"` to `urlString`",
                        "context": "            String urlString = \"http://secure.companyportal.com/changePassword?username=johndoe\" + username + \r\n                               \"&oldPassword=\" + oldPassword + \"&newPassword=\" + newPassword;\r\n            URL url = new URL(urlString);\r\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n            connection.setRequestMethod(\"GET\");\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "newPassword",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "\"newPass456\"",
                        "type": "String",
                        "context": "    \r\n    public static void main(String[] args) {\r\n        changePassword(\"user2\", \"oldPass123\", \"newPass456\");\r\n    }\r\n}\r\n",
                        "nextNode": "String newPassword"
                    },
                    {
                        "name": "String newPassword",
                        "type": "String",
                        "context": "public class BAD_PasswordChangeGET {\r\n    \r\n    public static void changePassword(String username, String oldPassword, String newPassword) {\r\n        try {\r\n            String urlString = \"http://secure.companyportal.com/changePassword?username=johndoe\" + username + \r\n",
                        "nextNode": "newPassword"
                    },
                    {
                        "name": "newPassword",
                        "type": "Dataflow from `\"newPass456\"` to `newPassword`",
                        "context": "        try {\r\n            String urlString = \"http://secure.companyportal.com/changePassword?username=johndoe\" + username + \r\n                               \"&oldPassword=\" + oldPassword + \"&newPassword=\" + newPassword;\r\n            URL url = new URL(urlString);\r\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "connection",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "url.openConnection()",
                        "type": "URLConnection",
                        "context": "                               \"&oldPassword=\" + oldPassword + \"&newPassword=\" + newPassword;\r\n            URL url = new URL(urlString);\r\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n            connection.setRequestMethod(\"GET\");\r\n            \r\n",
                        "nextNode": "(HttpURLConnection) url.openConnection()"
                    },
                    {
                        "name": "(HttpURLConnection) url.openConnection()",
                        "type": "HttpURLConnection",
                        "context": "                               \"&oldPassword=\" + oldPassword + \"&newPassword=\" + newPassword;\r\n            URL url = new URL(urlString);\r\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n            connection.setRequestMethod(\"GET\");\r\n            \r\n",
                        "nextNode": "connection"
                    },
                    {
                        "name": "connection",
                        "type": "Dataflow from `openConnection(...)` to `connection`",
                        "context": "            URL url = new URL(urlString);\r\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n            connection.setRequestMethod(\"GET\");\r\n            \r\n        } catch (Exception e) {\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "url",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "newPassword",
                        "type": "String",
                        "context": "        try {\r\n            String urlString = \"http://secure.companyportal.com/changePassword?username=johndoe\" + username + \r\n                               \"&oldPassword=\" + oldPassword + \"&newPassword=\" + newPassword;\r\n            URL url = new URL(urlString);\r\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n",
                        "nextNode": "\"http://secure.companyportal.com/changePassword?username=johnd"
                    },
                    {
                        "name": "\"http://secure.companyportal.com/changePassword?username=johnd",
                        "type": "String",
                        "context": "    public static void changePassword(String username, String oldPassword, String newPassword) {\r\n        try {\r\n            String urlString = \"http://secure.companyportal.com/changePassword?username=johndoe\" + username + \r\n                               \"&oldPassword=\" + oldPassword + \"&newPassword=\" + newPassword;\r\n            URL url = new URL(urlString);\r\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n",
                        "nextNode": "urlString"
                    },
                    {
                        "name": "urlString",
                        "type": "String",
                        "context": "            String urlString = \"http://secure.companyportal.com/changePassword?username=johndoe\" + username + \r\n                               \"&oldPassword=\" + oldPassword + \"&newPassword=\" + newPassword;\r\n            URL url = new URL(urlString);\r\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n            connection.setRequestMethod(\"GET\");\r\n",
                        "nextNode": "new URL(urlString)"
                    },
                    {
                        "name": "new URL(urlString)",
                        "type": "URL",
                        "context": "            String urlString = \"http://secure.companyportal.com/changePassword?username=johndoe\" + username + \r\n                               \"&oldPassword=\" + oldPassword + \"&newPassword=\" + newPassword;\r\n            URL url = new URL(urlString);\r\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n            connection.setRequestMethod(\"GET\");\r\n",
                        "nextNode": "url"
                    },
                    {
                        "name": "url",
                        "type": "Dataflow from `newPassword` to `url`\nDataflow from `oldPassword` to `url`\nDataflow from `username` to `url`\nDataflow from `urlString` to `url`\nDataflow from `new URL(...)` to `url`\nDataflow from `\"&newPassword=\"` to `url`\nDataflow from `\"&oldPassword=\"` to `url`\nDataflow from `\"http://secure.companyportal.com/changePassword?username=johndoe\"` to `url`\nDataflow from `\"user2\"` to `url`\nDataflow from `\"oldPass123\"` to `url`\nDataflow from `\"newPass456\"` to `url`",
                        "context": "                               \"&oldPassword=\" + oldPassword + \"&newPassword=\" + newPassword;\r\n            URL url = new URL(urlString);\r\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n            connection.setRequestMethod(\"GET\");\r\n            \r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "username",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "\"user2\"",
                        "type": "String",
                        "context": "    \r\n    public static void main(String[] args) {\r\n        changePassword(\"user2\", \"oldPass123\", \"newPass456\");\r\n    }\r\n}\r\n",
                        "nextNode": "String username"
                    },
                    {
                        "name": "String username",
                        "type": "String",
                        "context": "public class BAD_PasswordChangeGET {\r\n    \r\n    public static void changePassword(String username, String oldPassword, String newPassword) {\r\n        try {\r\n            String urlString = \"http://secure.companyportal.com/changePassword?username=johndoe\" + username + \r\n",
                        "nextNode": "username"
                    },
                    {
                        "name": "username",
                        "type": "Dataflow from `\"user2\"` to `username`",
                        "context": "    public static void changePassword(String username, String oldPassword, String newPassword) {\r\n        try {\r\n            String urlString = \"http://secure.companyportal.com/changePassword?username=johndoe\" + username + \r\n                               \"&oldPassword=\" + oldPassword + \"&newPassword=\" + newPassword;\r\n            URL url = new URL(urlString);\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "user2",
                "isSensitive": "yes"
            },
            {
                "name": "Error occurred",
                "isSensitive": "no"
            },
            {
                "name": "oldPass123",
                "isSensitive": "yes"
            },
            {
                "name": "&oldPassword=",
                "isSensitive": "yes"
            },
            {
                "name": "GET",
                "isSensitive": "no"
            },
            {
                "name": "newPass456",
                "isSensitive": "yes"
            },
            {
                "name": "http://secure.companyportal.com/changePassword?username=johndoe",
                "isSensitive": "yes"
            },
            {
                "name": "&newPassword=",
                "isSensitive": "yes"
            }
        ],
        "comments": [],
        "sinks": [
            {
                "name": "println",
                "isSink": "yes"
            },
            {
                "name": "setRequestMethod",
                "isSink": "yes"
            },
            {
                "name": "openConnection",
                "isSink": "yes"
            },
            {
                "name": "changePassword",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "BAD_PersonalDetailsGET.java",
        "variables": [
            {
                "name": "args",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "httpClient",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "HttpClients.createDefault()",
                        "type": "CloseableHttpClient",
                        "context": "        try {\r\n            String url = \"http://userportal.acmeinc.com/register?fullName=\" + fullName + \"&dob=\" + dateOfBirth;\r\n            CloseableHttpClient httpClient = HttpClients.createDefault();\r\n            HttpGet httpGet = new HttpGet(url);\r\n\r\n |         try {\r\n            String url = \"http://userportal.acmeinc.com/register?fullName=\" + fullName + \"&dob=\" + dateOfBirth;\r\n            CloseableHttpClient httpClient = HttpClients.createDefault();\r\n            HttpGet httpGet = new HttpGet(url);\r\n\r\n",
                        "nextNode": "httpClient"
                    },
                    {
                        "name": "httpClient",
                        "type": "Dataflow from `createDefault(...)` to `httpClient`",
                        "context": "            HttpGet httpGet = new HttpGet(url);\r\n\r\n            HttpResponse response = httpClient.execute(httpGet);\r\n\r\n            httpClient.close();\r\n |             HttpGet httpGet = new HttpGet(url);\r\n\r\n            HttpResponse response = httpClient.execute(httpGet);\r\n\r\n            httpClient.close();\r\n |             HttpResponse response = httpClient.execute(httpGet);\r\n\r\n            httpClient.close();\r\n        } catch (ClientProtocolException e) {\r\n            System.err.println(\"Error occurred\");\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "e",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "response",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "fullName",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "\"John Doe\"",
                        "type": "String",
                        "context": "\r\n    public static void main(String[] args) {\r\n        sendPersonalDetails(\"John Doe\", \"1980-01-01\");\r\n    }\r\n}\r\n",
                        "nextNode": "String fullName"
                    },
                    {
                        "name": "String fullName",
                        "type": "String",
                        "context": "\r\npublic class BAD_PersonalDetailsGET {\r\n    public static void sendPersonalDetails(String fullName, String dateOfBirth) {\r\n        try {\r\n            String url = \"http://userportal.acmeinc.com/register?fullName=\" + fullName + \"&dob=\" + dateOfBirth;\r\n",
                        "nextNode": "fullName"
                    },
                    {
                        "name": "fullName",
                        "type": "Dataflow from `\"John Doe\"` to `fullName`",
                        "context": "    public static void sendPersonalDetails(String fullName, String dateOfBirth) {\r\n        try {\r\n            String url = \"http://userportal.acmeinc.com/register?fullName=\" + fullName + \"&dob=\" + dateOfBirth;\r\n            CloseableHttpClient httpClient = HttpClients.createDefault();\r\n            HttpGet httpGet = new HttpGet(url);\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "dateOfBirth",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "\"1980-01-01\"",
                        "type": "String",
                        "context": "\r\n    public static void main(String[] args) {\r\n        sendPersonalDetails(\"John Doe\", \"1980-01-01\");\r\n    }\r\n}\r\n",
                        "nextNode": "String dateOfBirth"
                    },
                    {
                        "name": "String dateOfBirth",
                        "type": "String",
                        "context": "\r\npublic class BAD_PersonalDetailsGET {\r\n    public static void sendPersonalDetails(String fullName, String dateOfBirth) {\r\n        try {\r\n            String url = \"http://userportal.acmeinc.com/register?fullName=\" + fullName + \"&dob=\" + dateOfBirth;\r\n",
                        "nextNode": "dateOfBirth"
                    },
                    {
                        "name": "dateOfBirth",
                        "type": "Dataflow from `\"1980-01-01\"` to `dateOfBirth`",
                        "context": "    public static void sendPersonalDetails(String fullName, String dateOfBirth) {\r\n        try {\r\n            String url = \"http://userportal.acmeinc.com/register?fullName=\" + fullName + \"&dob=\" + dateOfBirth;\r\n            CloseableHttpClient httpClient = HttpClients.createDefault();\r\n            HttpGet httpGet = new HttpGet(url);\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "url",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "dateOfBirth",
                        "type": "String",
                        "context": "    public static void sendPersonalDetails(String fullName, String dateOfBirth) {\r\n        try {\r\n            String url = \"http://userportal.acmeinc.com/register?fullName=\" + fullName + \"&dob=\" + dateOfBirth;\r\n            CloseableHttpClient httpClient = HttpClients.createDefault();\r\n            HttpGet httpGet = new HttpGet(url);\r\n",
                        "nextNode": "\"http://userportal.acmeinc.com/register?fullName=\" + fullName + \"&dob=\" + dateOfBirth"
                    },
                    {
                        "name": "\"http://userportal.acmeinc.com/register?fullName=\" + fullName + \"&dob=\" + dateOfBirth",
                        "type": "String",
                        "context": "    public static void sendPersonalDetails(String fullName, String dateOfBirth) {\r\n        try {\r\n            String url = \"http://userportal.acmeinc.com/register?fullName=\" + fullName + \"&dob=\" + dateOfBirth;\r\n            CloseableHttpClient httpClient = HttpClients.createDefault();\r\n            HttpGet httpGet = new HttpGet(url);\r\n",
                        "nextNode": "url"
                    },
                    {
                        "name": "url",
                        "type": "Dataflow from `dateOfBirth` to `url`\nDataflow from `fullName` to `url`\nDataflow from `\"&dob=\"` to `url`\nDataflow from `\"http://userportal.acmeinc.com/register?fullName=\"` to `url`\nDataflow from `\"John Doe\"` to `url`\nDataflow from `\"1980-01-01\"` to `url`",
                        "context": "            String url = \"http://userportal.acmeinc.com/register?fullName=\" + fullName + \"&dob=\" + dateOfBirth;\r\n            CloseableHttpClient httpClient = HttpClients.createDefault();\r\n            HttpGet httpGet = new HttpGet(url);\r\n\r\n            HttpResponse response = httpClient.execute(httpGet);\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "httpGet",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "dateOfBirth",
                        "type": "String",
                        "context": "    public static void sendPersonalDetails(String fullName, String dateOfBirth) {\r\n        try {\r\n            String url = \"http://userportal.acmeinc.com/register?fullName=\" + fullName + \"&dob=\" + dateOfBirth;\r\n            CloseableHttpClient httpClient = HttpClients.createDefault();\r\n            HttpGet httpGet = new HttpGet(url);\r\n",
                        "nextNode": "\"http://userportal.acmeinc.com/register?fullName=\" + fullName + \"&dob=\" + dateOfBirth"
                    },
                    {
                        "name": "\"http://userportal.acmeinc.com/register?fullName=\" + fullName + \"&dob=\" + dateOfBirth",
                        "type": "String",
                        "context": "    public static void sendPersonalDetails(String fullName, String dateOfBirth) {\r\n        try {\r\n            String url = \"http://userportal.acmeinc.com/register?fullName=\" + fullName + \"&dob=\" + dateOfBirth;\r\n            CloseableHttpClient httpClient = HttpClients.createDefault();\r\n            HttpGet httpGet = new HttpGet(url);\r\n",
                        "nextNode": "url"
                    },
                    {
                        "name": "url",
                        "type": "String",
                        "context": "            String url = \"http://userportal.acmeinc.com/register?fullName=\" + fullName + \"&dob=\" + dateOfBirth;\r\n            CloseableHttpClient httpClient = HttpClients.createDefault();\r\n            HttpGet httpGet = new HttpGet(url);\r\n\r\n            HttpResponse response = httpClient.execute(httpGet);\r\n",
                        "nextNode": "new HttpGet(url)"
                    },
                    {
                        "name": "new HttpGet(url)",
                        "type": "HttpGet",
                        "context": "            String url = \"http://userportal.acmeinc.com/register?fullName=\" + fullName + \"&dob=\" + dateOfBirth;\r\n            CloseableHttpClient httpClient = HttpClients.createDefault();\r\n            HttpGet httpGet = new HttpGet(url);\r\n\r\n            HttpResponse response = httpClient.execute(httpGet);\r\n",
                        "nextNode": "httpGet"
                    },
                    {
                        "name": "httpGet",
                        "type": "Dataflow from `dateOfBirth` to `httpGet`\nDataflow from `fullName` to `httpGet`\nDataflow from `url` to `httpGet`\nDataflow from `\"&dob=\"` to `httpGet`\nDataflow from `\"http://userportal.acmeinc.com/register?fullName=\"` to `httpGet`\nDataflow from `new HttpGet(...)` to `httpGet`\nDataflow from `\"John Doe\"` to `httpGet`\nDataflow from `\"1980-01-01\"` to `httpGet`",
                        "context": "            HttpGet httpGet = new HttpGet(url);\r\n\r\n            HttpResponse response = httpClient.execute(httpGet);\r\n\r\n            httpClient.close();\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "Error occurred",
                "isSensitive": "no"
            },
            {
                "name": "John Doe",
                "isSensitive": "yes"
            },
            {
                "name": "http://userportal.acmeinc.com/register?fullName=",
                "isSensitive": "yes"
            },
            {
                "name": "&dob=",
                "isSensitive": "no"
            },
            {
                "name": "1980-01-01",
                "isSensitive": "yes"
            }
        ],
        "comments": [],
        "sinks": [
            {
                "name": "println",
                "isSink": "yes"
            },
            {
                "name": "sendPersonalDetails",
                "isSink": "no"
            },
            {
                "name": "execute",
                "isSink": "yes"
            },
            {
                "name": "close",
                "isSink": "no"
            },
            {
                "name": "createDefault",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "BAD_SessionTokenGET.java",
        "variables": [
            {
                "name": "args",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "e",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "urlString",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "sessionToken",
                        "type": "String",
                        "context": "    public static void retrieveData(String sessionToken) {\r\n        try {\r\n            String urlString = \"http://api.internalnetwork.com/data?sessionToken=\" + sessionToken;\r\n            URL url = new URL(urlString);\r\n            URLConnection connection = url.openConnection();\r\n",
                        "nextNode": "\"http://api.internalnetwork.com/data?sessionToken=\" + sessionToken"
                    },
                    {
                        "name": "\"http://api.internalnetwork.com/data?sessionToken=\" + sessionToken",
                        "type": "String",
                        "context": "    public static void retrieveData(String sessionToken) {\r\n        try {\r\n            String urlString = \"http://api.internalnetwork.com/data?sessionToken=\" + sessionToken;\r\n            URL url = new URL(urlString);\r\n            URLConnection connection = url.openConnection();\r\n",
                        "nextNode": "urlString"
                    },
                    {
                        "name": "urlString",
                        "type": "Dataflow from `sessionToken` to `urlString`\nDataflow from `\"http://api.internalnetwork.com/data?sessionToken=\"` to `urlString`\nDataflow from `\"abc123sessionToken\"` to `urlString`",
                        "context": "        try {\r\n            String urlString = \"http://api.internalnetwork.com/data?sessionToken=\" + sessionToken;\r\n            URL url = new URL(urlString);\r\n            URLConnection connection = url.openConnection();\r\n            \r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "sessionToken",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "\"abc123sessionToken\"",
                        "type": "String",
                        "context": "    \r\n    public static void main(String[] args) {\r\n        retrieveData(\"abc123sessionToken\");\r\n    }\r\n}\r\n",
                        "nextNode": "String sessionToken"
                    },
                    {
                        "name": "String sessionToken",
                        "type": "String",
                        "context": "\r\npublic class BAD_SessionTokenGET {\r\n    public static void retrieveData(String sessionToken) {\r\n        try {\r\n            String urlString = \"http://api.internalnetwork.com/data?sessionToken=\" + sessionToken;\r\n",
                        "nextNode": "sessionToken"
                    },
                    {
                        "name": "sessionToken",
                        "type": "Dataflow from `\"abc123sessionToken\"` to `sessionToken`",
                        "context": "    public static void retrieveData(String sessionToken) {\r\n        try {\r\n            String urlString = \"http://api.internalnetwork.com/data?sessionToken=\" + sessionToken;\r\n            URL url = new URL(urlString);\r\n            URLConnection connection = url.openConnection();\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "connection",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "url",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "sessionToken",
                        "type": "String",
                        "context": "    public static void retrieveData(String sessionToken) {\r\n        try {\r\n            String urlString = \"http://api.internalnetwork.com/data?sessionToken=\" + sessionToken;\r\n            URL url = new URL(urlString);\r\n            URLConnection connection = url.openConnection();\r\n",
                        "nextNode": "\"http://api.internalnetwork.com/data?sessionToken=\" + sessionToken"
                    },
                    {
                        "name": "\"http://api.internalnetwork.com/data?sessionToken=\" + sessionToken",
                        "type": "String",
                        "context": "    public static void retrieveData(String sessionToken) {\r\n        try {\r\n            String urlString = \"http://api.internalnetwork.com/data?sessionToken=\" + sessionToken;\r\n            URL url = new URL(urlString);\r\n            URLConnection connection = url.openConnection();\r\n",
                        "nextNode": "urlString"
                    },
                    {
                        "name": "urlString",
                        "type": "String",
                        "context": "        try {\r\n            String urlString = \"http://api.internalnetwork.com/data?sessionToken=\" + sessionToken;\r\n            URL url = new URL(urlString);\r\n            URLConnection connection = url.openConnection();\r\n            \r\n",
                        "nextNode": "new URL(urlString)"
                    },
                    {
                        "name": "new URL(urlString)",
                        "type": "URL",
                        "context": "        try {\r\n            String urlString = \"http://api.internalnetwork.com/data?sessionToken=\" + sessionToken;\r\n            URL url = new URL(urlString);\r\n            URLConnection connection = url.openConnection();\r\n            \r\n",
                        "nextNode": "url"
                    },
                    {
                        "name": "url",
                        "type": "Dataflow from `sessionToken` to `url`\nDataflow from `urlString` to `url`\nDataflow from `new URL(...)` to `url`\nDataflow from `\"http://api.internalnetwork.com/data?sessionToken=\"` to `url`\nDataflow from `\"abc123sessionToken\"` to `url`",
                        "context": "            String urlString = \"http://api.internalnetwork.com/data?sessionToken=\" + sessionToken;\r\n            URL url = new URL(urlString);\r\n            URLConnection connection = url.openConnection();\r\n            \r\n        } catch (Exception e) {\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "http://api.internalnetwork.com/data?sessionToken=",
                "isSensitive": "yes"
            },
            {
                "name": "Error occurred",
                "isSensitive": "no"
            },
            {
                "name": "abc123sessionToken",
                "isSensitive": "yes"
            }
        ],
        "comments": [],
        "sinks": [
            {
                "name": "println",
                "isSink": "yes"
            },
            {
                "name": "retrieveData",
                "isSink": "no"
            },
            {
                "name": "openConnection",
                "isSink": "yes"
            }
        ]
    },
    {
        "fileName": "GOOD_ApiKeySubmissionPOST.java",
        "variables": [
            {
                "name": "args",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "input",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "apiKey",
                        "type": "String",
                        "context": "\r\n            // JSON payload\r\n            String jsonInputString = \"{\\\"apiKey\\\": \\\"\" + apiKey + \"\\\"}\";\r\n\r\n            try (OutputStream os = connection.getOutputStream()) {\r\n | \r\n            // JSON payload\r\n            String jsonInputString = \"{\\\"apiKey\\\": \\\"\" + apiKey + \"\\\"}\";\r\n\r\n            try (OutputStream os = connection.getOutputStream()) {\r\n",
                        "nextNode": "\"{\\\"apiKey\\\": \\\"\" + apiKey"
                    },
                    {
                        "name": "\"{\\\"apiKey\\\": \\\"\" + apiKey",
                        "type": "String",
                        "context": "\r\n            // JSON payload\r\n            String jsonInputString = \"{\\\"apiKey\\\": \\\"\" + apiKey + \"\\\"}\";\r\n\r\n            try (OutputStream os = connection.getOutputStream()) {\r\n | \r\n            // JSON payload\r\n            String jsonInputString = \"{\\\"apiKey\\\": \\\"\" + apiKey + \"\\\"}\";\r\n\r\n            try (OutputStream os = connection.getOutputStream()) {\r\n",
                        "nextNode": "\"{\\\"apiKey\\\": \\\"\" + apiKey + \"\\\"}\""
                    },
                    {
                        "name": "\"{\\\"apiKey\\\": \\\"\" + apiKey + \"\\\"}\"",
                        "type": "String",
                        "context": "\r\n            // JSON payload\r\n            String jsonInputString = \"{\\\"apiKey\\\": \\\"\" + apiKey + \"\\\"}\";\r\n\r\n            try (OutputStream os = connection.getOutputStream()) {\r\n | \r\n            // JSON payload\r\n            String jsonInputString = \"{\\\"apiKey\\\": \\\"\" + apiKey + \"\\\"}\";\r\n\r\n            try (OutputStream os = connection.getOutputStream()) {\r\n",
                        "nextNode": "jsonInputString"
                    },
                    {
                        "name": "jsonInputString",
                        "type": "String",
                        "context": "\r\n            try (OutputStream os = connection.getOutputStream()) {\r\n                byte[] input = jsonInputString.getBytes(\"utf-8\");\r\n                os.write(input, 0, input.length); // Write data to the request body\r\n            }\r\n | \r\n            try (OutputStream os = connection.getOutputStream()) {\r\n                byte[] input = jsonInputString.getBytes(\"utf-8\");\r\n                os.write(input, 0, input.length); // Write data to the request body\r\n            }\r\n",
                        "nextNode": "jsonInputString.getBytes(\"utf-8\")"
                    },
                    {
                        "name": "jsonInputString.getBytes(\"utf-8\")",
                        "type": "byte[]",
                        "context": "\r\n            try (OutputStream os = connection.getOutputStream()) {\r\n                byte[] input = jsonInputString.getBytes(\"utf-8\");\r\n                os.write(input, 0, input.length); // Write data to the request body\r\n            }\r\n | \r\n            try (OutputStream os = connection.getOutputStream()) {\r\n                byte[] input = jsonInputString.getBytes(\"utf-8\");\r\n                os.write(input, 0, input.length); // Write data to the request body\r\n            }\r\n",
                        "nextNode": "input"
                    },
                    {
                        "name": "input",
                        "type": "Dataflow from `apiKey` to `input`\nDataflow from `jsonInputString` to `input`\nDataflow from `getBytes(...)` to `input`\nDataflow from `\"\\\"}}\"` to `input`\nDataflow from `\"{{\\\"apiKey\\\": \\\"\"` to `input`\nDataflow from `\"CrystalCave95\"` to `input`\nDataflow from `\"utf-8\"` to `input`",
                        "context": "            try (OutputStream os = connection.getOutputStream()) {\r\n                byte[] input = jsonInputString.getBytes(\"utf-8\");\r\n                os.write(input, 0, input.length); // Write data to the request body\r\n            }\r\n\r\n |             try (OutputStream os = connection.getOutputStream()) {\r\n                byte[] input = jsonInputString.getBytes(\"utf-8\");\r\n                os.write(input, 0, input.length); // Write data to the request body\r\n            }\r\n\r\n |             try (OutputStream os = connection.getOutputStream()) {\r\n                byte[] input = jsonInputString.getBytes(\"utf-8\");\r\n                os.write(input, 0, input.length); // Write data to the request body\r\n            }\r\n\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "os",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "connection.getOutputStream()",
                        "type": "OutputStream",
                        "context": "            String jsonInputString = \"{\\\"apiKey\\\": \\\"\" + apiKey + \"\\\"}\";\r\n\r\n            try (OutputStream os = connection.getOutputStream()) {\r\n                byte[] input = jsonInputString.getBytes(\"utf-8\");\r\n                os.write(input, 0, input.length); // Write data to the request body\r\n",
                        "nextNode": "os"
                    },
                    {
                        "name": "os",
                        "type": "Dataflow from `getOutputStream(...)` to `os`",
                        "context": "            try (OutputStream os = connection.getOutputStream()) {\r\n                byte[] input = jsonInputString.getBytes(\"utf-8\");\r\n                os.write(input, 0, input.length); // Write data to the request body\r\n            }\r\n\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "apiKey",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "\"CrystalCave95\"",
                        "type": "String",
                        "context": "\r\n    public static void main(String[] args) {\r\n        submitApiKey(\"CrystalCave95\");\r\n    }\r\n}\r\n",
                        "nextNode": "String apiKey"
                    },
                    {
                        "name": "String apiKey",
                        "type": "String",
                        "context": "\r\npublic class GOOD_ApiKeySubmissionPOST {\r\n    public static void submitApiKey(String apiKey) {\r\n        try {\r\n            URL url = new URL(\"https://corpapi.acmesystems.com/api/submit\"); // Ensure using HTTPS\r\n",
                        "nextNode": "apiKey"
                    },
                    {
                        "name": "apiKey",
                        "type": "Dataflow from `\"CrystalCave95\"` to `apiKey`",
                        "context": "\r\n            // JSON payload\r\n            String jsonInputString = \"{\\\"apiKey\\\": \\\"\" + apiKey + \"\\\"}\";\r\n\r\n            try (OutputStream os = connection.getOutputStream()) {\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "e",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "connection",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "url.openConnection()",
                        "type": "URLConnection",
                        "context": "        try {\r\n            URL url = new URL(\"https://corpapi.acmesystems.com/api/submit\"); // Ensure using HTTPS\r\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n            connection.setRequestMethod(\"POST\");\r\n            connection.setDoOutput(true); // Allows sending a request body\r\n |         try {\r\n            URL url = new URL(\"https://corpapi.acmesystems.com/api/submit\"); // Ensure using HTTPS\r\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n            connection.setRequestMethod(\"POST\");\r\n            connection.setDoOutput(true); // Allows sending a request body\r\n |         try {\r\n            URL url = new URL(\"https://corpapi.acmesystems.com/api/submit\"); // Ensure using HTTPS\r\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n            connection.setRequestMethod(\"POST\");\r\n            connection.setDoOutput(true); // Allows sending a request body\r\n |         try {\r\n            URL url = new URL(\"https://corpapi.acmesystems.com/api/submit\"); // Ensure using HTTPS\r\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n            connection.setRequestMethod(\"POST\");\r\n            connection.setDoOutput(true); // Allows sending a request body\r\n",
                        "nextNode": "(HttpURLConnection) url.openConnection()"
                    },
                    {
                        "name": "(HttpURLConnection) url.openConnection()",
                        "type": "HttpURLConnection",
                        "context": "        try {\r\n            URL url = new URL(\"https://corpapi.acmesystems.com/api/submit\"); // Ensure using HTTPS\r\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n            connection.setRequestMethod(\"POST\");\r\n            connection.setDoOutput(true); // Allows sending a request body\r\n |         try {\r\n            URL url = new URL(\"https://corpapi.acmesystems.com/api/submit\"); // Ensure using HTTPS\r\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n            connection.setRequestMethod(\"POST\");\r\n            connection.setDoOutput(true); // Allows sending a request body\r\n |         try {\r\n            URL url = new URL(\"https://corpapi.acmesystems.com/api/submit\"); // Ensure using HTTPS\r\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n            connection.setRequestMethod(\"POST\");\r\n            connection.setDoOutput(true); // Allows sending a request body\r\n |         try {\r\n            URL url = new URL(\"https://corpapi.acmesystems.com/api/submit\"); // Ensure using HTTPS\r\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n            connection.setRequestMethod(\"POST\");\r\n            connection.setDoOutput(true); // Allows sending a request body\r\n",
                        "nextNode": "connection"
                    },
                    {
                        "name": "connection",
                        "type": "Dataflow from `openConnection(...)` to `connection`",
                        "context": "            URL url = new URL(\"https://corpapi.acmesystems.com/api/submit\"); // Ensure using HTTPS\r\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n            connection.setRequestMethod(\"POST\");\r\n            connection.setDoOutput(true); // Allows sending a request body\r\n            connection.setRequestProperty(\"Content-Type\", \"application/json\"); // Set content type to JSON\r\n |             URL url = new URL(\"https://corpapi.acmesystems.com/api/submit\"); // Ensure using HTTPS\r\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n            connection.setRequestMethod(\"POST\");\r\n            connection.setDoOutput(true); // Allows sending a request body\r\n            connection.setRequestProperty(\"Content-Type\", \"application/json\"); // Set content type to JSON\r\n |             HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n            connection.setRequestMethod(\"POST\");\r\n            connection.setDoOutput(true); // Allows sending a request body\r\n            connection.setRequestProperty(\"Content-Type\", \"application/json\"); // Set content type to JSON\r\n\r\n |             URL url = new URL(\"https://corpapi.acmesystems.com/api/submit\"); // Ensure using HTTPS\r\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n            connection.setRequestMethod(\"POST\");\r\n            connection.setDoOutput(true); // Allows sending a request body\r\n            connection.setRequestProperty(\"Content-Type\", \"application/json\"); // Set content type to JSON\r\n |             HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n            connection.setRequestMethod(\"POST\");\r\n            connection.setDoOutput(true); // Allows sending a request body\r\n            connection.setRequestProperty(\"Content-Type\", \"application/json\"); // Set content type to JSON\r\n\r\n |             connection.setRequestMethod(\"POST\");\r\n            connection.setDoOutput(true); // Allows sending a request body\r\n            connection.setRequestProperty(\"Content-Type\", \"application/json\"); // Set content type to JSON\r\n\r\n            // JSON payload\r\n |             URL url = new URL(\"https://corpapi.acmesystems.com/api/submit\"); // Ensure using HTTPS\r\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n            connection.setRequestMethod(\"POST\");\r\n            connection.setDoOutput(true); // Allows sending a request body\r\n            connection.setRequestProperty(\"Content-Type\", \"application/json\"); // Set content type to JSON\r\n |             HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n            connection.setRequestMethod(\"POST\");\r\n            connection.setDoOutput(true); // Allows sending a request body\r\n            connection.setRequestProperty(\"Content-Type\", \"application/json\"); // Set content type to JSON\r\n\r\n |             connection.setRequestMethod(\"POST\");\r\n            connection.setDoOutput(true); // Allows sending a request body\r\n            connection.setRequestProperty(\"Content-Type\", \"application/json\"); // Set content type to JSON\r\n\r\n            // JSON payload\r\n |             String jsonInputString = \"{\\\"apiKey\\\": \\\"\" + apiKey + \"\\\"}\";\r\n\r\n            try (OutputStream os = connection.getOutputStream()) {\r\n                byte[] input = jsonInputString.getBytes(\"utf-8\");\r\n                os.write(input, 0, input.length); // Write data to the request body\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "url",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "new URL(\"https://corpapi.acmesystems.com/api/submit\")",
                        "type": "URL",
                        "context": "    public static void submitApiKey(String apiKey) {\r\n        try {\r\n            URL url = new URL(\"https://corpapi.acmesystems.com/api/submit\"); // Ensure using HTTPS\r\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n            connection.setRequestMethod(\"POST\");\r\n",
                        "nextNode": "url"
                    },
                    {
                        "name": "url",
                        "type": "Dataflow from `new URL(...)` to `url`\nDataflow from `\"https://corpapi.acmesystems.com/api/submit\"` to `url`",
                        "context": "        try {\r\n            URL url = new URL(\"https://corpapi.acmesystems.com/api/submit\"); // Ensure using HTTPS\r\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n            connection.setRequestMethod(\"POST\");\r\n            connection.setDoOutput(true); // Allows sending a request body\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "jsonInputString",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "apiKey",
                        "type": "String",
                        "context": "\r\n            // JSON payload\r\n            String jsonInputString = \"{\\\"apiKey\\\": \\\"\" + apiKey + \"\\\"}\";\r\n\r\n            try (OutputStream os = connection.getOutputStream()) {\r\n",
                        "nextNode": "\"{\\\"apiKey\\\": \\\"\" + apiKey"
                    },
                    {
                        "name": "\"{\\\"apiKey\\\": \\\"\" + apiKey",
                        "type": "String",
                        "context": "\r\n            // JSON payload\r\n            String jsonInputString = \"{\\\"apiKey\\\": \\\"\" + apiKey + \"\\\"}\";\r\n\r\n            try (OutputStream os = connection.getOutputStream()) {\r\n",
                        "nextNode": "\"{\\\"apiKey\\\": \\\"\" + apiKey + \"\\\"}\""
                    },
                    {
                        "name": "\"{\\\"apiKey\\\": \\\"\" + apiKey + \"\\\"}\"",
                        "type": "String",
                        "context": "\r\n            // JSON payload\r\n            String jsonInputString = \"{\\\"apiKey\\\": \\\"\" + apiKey + \"\\\"}\";\r\n\r\n            try (OutputStream os = connection.getOutputStream()) {\r\n",
                        "nextNode": "jsonInputString"
                    },
                    {
                        "name": "jsonInputString",
                        "type": "Dataflow from `apiKey` to `jsonInputString`\nDataflow from `\"\\\"}}\"` to `jsonInputString`\nDataflow from `\"{{\\\"apiKey\\\": \\\"\"` to `jsonInputString`\nDataflow from `\"CrystalCave95\"` to `jsonInputString`",
                        "context": "\r\n            try (OutputStream os = connection.getOutputStream()) {\r\n                byte[] input = jsonInputString.getBytes(\"utf-8\");\r\n                os.write(input, 0, input.length); // Write data to the request body\r\n            }\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "Error occurred",
                "isSensitive": "no"
            },
            {
                "name": "application/json",
                "isSensitive": "no"
            },
            {
                "name": "utf-8",
                "isSensitive": "no"
            },
            {
                "name": "POST",
                "isSensitive": "no"
            },
            {
                "name": "{\"apiKey\": \"",
                "isSensitive": "no"
            },
            {
                "name": "\"}",
                "isSensitive": "no"
            },
            {
                "name": "CrystalCave95",
                "isSensitive": "yes"
            },
            {
                "name": "https://corpapi.acmesystems.com/api/submit",
                "isSensitive": "yes"
            },
            {
                "name": "Content-Type",
                "isSensitive": "no"
            }
        ],
        "comments": [
            {
                "name": "Set content type to JSON",
                "isSensitive": "no"
            },
            {
                "name": "JSON payload",
                "isSensitive": "no"
            },
            {
                "name": "Allows sending a request body",
                "isSensitive": "no"
            },
            {
                "name": "Ensure using HTTPS",
                "isSensitive": "no"
            },
            {
                "name": "Write data to the request body",
                "isSensitive": "no"
            }
        ],
        "sinks": [
            {
                "name": "println",
                "isSink": "yes"
            },
            {
                "name": "setRequestMethod",
                "isSink": "yes"
            },
            {
                "name": "setRequestProperty",
                "isSink": "no"
            },
            {
                "name": "openConnection",
                "isSink": "yes"
            },
            {
                "name": "getOutputStream",
                "isSink": "yes"
            },
            {
                "name": "submitApiKey",
                "isSink": "no"
            },
            {
                "name": "write",
                "isSink": "yes"
            },
            {
                "name": "getBytes",
                "isSink": "no"
            },
            {
                "name": "setDoOutput",
                "isSink": "yes"
            }
        ]
    },
    {
        "fileName": "GOOD_AuthenticationPOST.java",
        "variables": [
            {
                "name": "cipher",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "Cipher.getInstance(\"AES\")",
                        "type": "Cipher",
                        "context": "\r\n    public static String encryptCredentials(String data) throws Exception {\r\n        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, authenticationKey);\r\n        byte[] encrypted = cipher.doFinal(data.getBytes());\r\n | \r\n    public static String encryptCredentials(String data) throws Exception {\r\n        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, authenticationKey);\r\n        byte[] encrypted = cipher.doFinal(data.getBytes());\r\n",
                        "nextNode": "cipher"
                    },
                    {
                        "name": "cipher",
                        "type": "Cipher",
                        "context": "    public static String encryptCredentials(String data) throws Exception {\r\n        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, authenticationKey);\r\n        byte[] encrypted = cipher.doFinal(data.getBytes());\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n |         Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, authenticationKey);\r\n        byte[] encrypted = cipher.doFinal(data.getBytes());\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n    }\r\n |     public static String encryptCredentials(String data) throws Exception {\r\n        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, authenticationKey);\r\n        byte[] encrypted = cipher.doFinal(data.getBytes());\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "data",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "userId",
                        "type": "String",
                        "context": "    public static void authenticateUser(String userId, String authToken) {\r\n        try {\r\n            userId = encryptCredentials(userId);\r\n            authToken = encryptCredentials(authToken);\r\n            URL url = new URL(\"https://auth.corporateaccess.com/login\"); // Use HTTPS\r\n",
                        "nextNode": "String data"
                    },
                    {
                        "name": "String data",
                        "type": "String",
                        "context": "    }\r\n\r\n    public static String encryptCredentials(String data) throws Exception {\r\n        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, authenticationKey);\r\n",
                        "nextNode": "data"
                    },
                    {
                        "name": "data",
                        "type": "Dataflow from `userId` to `data`\nDataflow from `authToken` to `data`\nDataflow from `\"user123\"` to `data`\nDataflow from `\"abc123def456ghi789jkl012mno345pqr678\"` to `data`",
                        "context": "        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, authenticationKey);\r\n        byte[] encrypted = cipher.doFinal(data.getBytes());\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n    }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "os",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "connection.getOutputStream()",
                        "type": "OutputStream",
                        "context": "            // Formulate the data to be sent in the POST body\r\n            String urlParameters = \"userId=\" + userId + \"&token=\" + authToken;\r\n            try (OutputStream os = connection.getOutputStream()) {\r\n                os.write(urlParameters.getBytes());\r\n                os.flush();\r\n",
                        "nextNode": "os"
                    },
                    {
                        "name": "urlParameters.getBytes()",
                        "type": "byte[]",
                        "context": "            String urlParameters = \"userId=\" + userId + \"&token=\" + authToken;\r\n            try (OutputStream os = connection.getOutputStream()) {\r\n                os.write(urlParameters.getBytes());\r\n                os.flush();\r\n            }\r\n",
                        "nextNode": "os"
                    },
                    {
                        "name": "os",
                        "type": "Dataflow from `getOutputStream(...)` to `os`",
                        "context": "            String urlParameters = \"userId=\" + userId + \"&token=\" + authToken;\r\n            try (OutputStream os = connection.getOutputStream()) {\r\n                os.write(urlParameters.getBytes());\r\n                os.flush();\r\n            }\r\n |             String urlParameters = \"userId=\" + userId + \"&token=\" + authToken;\r\n            try (OutputStream os = connection.getOutputStream()) {\r\n                os.write(urlParameters.getBytes());\r\n                os.flush();\r\n            }\r\n |             try (OutputStream os = connection.getOutputStream()) {\r\n                os.write(urlParameters.getBytes());\r\n                os.flush();\r\n            }\r\n            // Handling the response (omitted for brevity)\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "e",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "responseStream",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "authToken",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "data",
                        "type": "String",
                        "context": "        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, authenticationKey);\r\n        byte[] encrypted = cipher.doFinal(data.getBytes());\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n    }\r\n",
                        "nextNode": "data.getBytes()"
                    },
                    {
                        "name": "data.getBytes()",
                        "type": "byte[]",
                        "context": "        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, authenticationKey);\r\n        byte[] encrypted = cipher.doFinal(data.getBytes());\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n    }\r\n",
                        "nextNode": "cipher.doFinal(data.getBytes()"
                    },
                    {
                        "name": "cipher.doFinal(data.getBytes()",
                        "type": "byte[]",
                        "context": "        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, authenticationKey);\r\n        byte[] encrypted = cipher.doFinal(data.getBytes());\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n    }\r\n",
                        "nextNode": "encrypted"
                    },
                    {
                        "name": "encrypted",
                        "type": "byte[]",
                        "context": "        cipher.init(Cipher.ENCRYPT_MODE, authenticationKey);\r\n        byte[] encrypted = cipher.doFinal(data.getBytes());\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n    }\r\n\r\n",
                        "nextNode": "Base64.getEncoder().encodeToString(encrypted)"
                    },
                    {
                        "name": "Base64.getEncoder().encodeToString(encrypted)",
                        "type": "String",
                        "context": "        cipher.init(Cipher.ENCRYPT_MODE, authenticationKey);\r\n        byte[] encrypted = cipher.doFinal(data.getBytes());\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n    }\r\n\r\n",
                        "nextNode": "encryptCredentials(authToken)"
                    },
                    {
                        "name": "encryptCredentials(authToken)",
                        "type": "String",
                        "context": "        try {\r\n            userId = encryptCredentials(userId);\r\n            authToken = encryptCredentials(authToken);\r\n            URL url = new URL(\"https://auth.corporateaccess.com/login\"); // Use HTTPS\r\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n",
                        "nextNode": "authToken"
                    },
                    {
                        "name": "String authToken",
                        "type": "String",
                        "context": "    }\r\n\r\n    public static void authenticateUser(String userId, String authToken) {\r\n        try {\r\n            userId = encryptCredentials(userId);\r\n",
                        "nextNode": "authToken"
                    },
                    {
                        "name": "authToken",
                        "type": "Dataflow from `data` to `authToken`\nDataflow from `encrypted` to `authToken`\nDataflow from `doFinal(...)` to `authToken`\nDataflow from `getBytes(...)` to `authToken`\nDataflow from `encodeToString(...)` to `authToken`\nDataflow from `encryptCredentials(...)` to `authToken`\nDataflow from `\"abc123def456ghi789jkl012mno345pqr678\"` to `authToken`",
                        "context": "\r\n            // Formulate the data to be sent in the POST body\r\n            String urlParameters = \"userId=\" + userId + \"&token=\" + authToken;\r\n            try (OutputStream os = connection.getOutputStream()) {\r\n                os.write(urlParameters.getBytes());\r\n |         try {\r\n            userId = encryptCredentials(userId);\r\n            authToken = encryptCredentials(authToken);\r\n            URL url = new URL(\"https://auth.corporateaccess.com/login\"); // Use HTTPS\r\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "authenticationKey",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "keyGen.generateKey()",
                        "type": "SecretKey",
                        "context": "            KeyGenerator keyGen = KeyGenerator.getInstance(\"AES\");\r\n            keyGen.init(128); // AES 128-bit key\r\n            authenticationKey = keyGen.generateKey();\r\n        } catch (Exception e) {\r\n            System.err.println(\"Error occurred\");\r\n",
                        "nextNode": "authenticationKey"
                    },
                    {
                        "name": "authenticationKey",
                        "type": "SecretKey",
                        "context": "\r\npublic class GOOD_AuthenticationPOST {\r\n    private static SecretKey authenticationKey;\r\n\r\n    static {\r\n |     public static String encryptCredentials(String data) throws Exception {\r\n        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, authenticationKey);\r\n        byte[] encrypted = cipher.doFinal(data.getBytes());\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "keyGen",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "KeyGenerator.getInstance(\"AES\")",
                        "type": "KeyGenerator",
                        "context": "        try {\r\n            // Generate a key for encryption\r\n            KeyGenerator keyGen = KeyGenerator.getInstance(\"AES\");\r\n            keyGen.init(128); // AES 128-bit key\r\n            authenticationKey = keyGen.generateKey();\r\n |         try {\r\n            // Generate a key for encryption\r\n            KeyGenerator keyGen = KeyGenerator.getInstance(\"AES\");\r\n            keyGen.init(128); // AES 128-bit key\r\n            authenticationKey = keyGen.generateKey();\r\n",
                        "nextNode": "keyGen"
                    },
                    {
                        "name": "keyGen",
                        "type": "Dataflow from `getInstance(...)` to `keyGen`\nDataflow from `\"AES\"` to `keyGen`",
                        "context": "            // Generate a key for encryption\r\n            KeyGenerator keyGen = KeyGenerator.getInstance(\"AES\");\r\n            keyGen.init(128); // AES 128-bit key\r\n            authenticationKey = keyGen.generateKey();\r\n        } catch (Exception e) {\r\n |             // Generate a key for encryption\r\n            KeyGenerator keyGen = KeyGenerator.getInstance(\"AES\");\r\n            keyGen.init(128); // AES 128-bit key\r\n            authenticationKey = keyGen.generateKey();\r\n        } catch (Exception e) {\r\n |             KeyGenerator keyGen = KeyGenerator.getInstance(\"AES\");\r\n            keyGen.init(128); // AES 128-bit key\r\n            authenticationKey = keyGen.generateKey();\r\n        } catch (Exception e) {\r\n            System.err.println(\"Error occurred\");\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "userId",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "data",
                        "type": "String",
                        "context": "        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, authenticationKey);\r\n        byte[] encrypted = cipher.doFinal(data.getBytes());\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n    }\r\n",
                        "nextNode": "data.getBytes()"
                    },
                    {
                        "name": "data.getBytes()",
                        "type": "byte[]",
                        "context": "        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, authenticationKey);\r\n        byte[] encrypted = cipher.doFinal(data.getBytes());\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n    }\r\n",
                        "nextNode": "cipher.doFinal(data.getBytes()"
                    },
                    {
                        "name": "cipher.doFinal(data.getBytes()",
                        "type": "byte[]",
                        "context": "        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, authenticationKey);\r\n        byte[] encrypted = cipher.doFinal(data.getBytes());\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n    }\r\n",
                        "nextNode": "encrypted"
                    },
                    {
                        "name": "encrypted",
                        "type": "byte[]",
                        "context": "        cipher.init(Cipher.ENCRYPT_MODE, authenticationKey);\r\n        byte[] encrypted = cipher.doFinal(data.getBytes());\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n    }\r\n\r\n",
                        "nextNode": "Base64.getEncoder().encodeToString(encrypted)"
                    },
                    {
                        "name": "Base64.getEncoder().encodeToString(encrypted)",
                        "type": "String",
                        "context": "        cipher.init(Cipher.ENCRYPT_MODE, authenticationKey);\r\n        byte[] encrypted = cipher.doFinal(data.getBytes());\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n    }\r\n\r\n",
                        "nextNode": "encryptCredentials(userId)"
                    },
                    {
                        "name": "encryptCredentials(userId)",
                        "type": "String",
                        "context": "    public static void authenticateUser(String userId, String authToken) {\r\n        try {\r\n            userId = encryptCredentials(userId);\r\n            authToken = encryptCredentials(authToken);\r\n            URL url = new URL(\"https://auth.corporateaccess.com/login\"); // Use HTTPS\r\n",
                        "nextNode": "userId"
                    },
                    {
                        "name": "String userId",
                        "type": "String",
                        "context": "    }\r\n\r\n    public static void authenticateUser(String userId, String authToken) {\r\n        try {\r\n            userId = encryptCredentials(userId);\r\n",
                        "nextNode": "userId"
                    },
                    {
                        "name": "userId",
                        "type": "Dataflow from `data` to `userId`\nDataflow from `encrypted` to `userId`\nDataflow from `doFinal(...)` to `userId`\nDataflow from `getBytes(...)` to `userId`\nDataflow from `encodeToString(...)` to `userId`\nDataflow from `encryptCredentials(...)` to `userId`\nDataflow from `\"user123\"` to `userId`",
                        "context": "\r\n            // Formulate the data to be sent in the POST body\r\n            String urlParameters = \"userId=\" + userId + \"&token=\" + authToken;\r\n            try (OutputStream os = connection.getOutputStream()) {\r\n                os.write(urlParameters.getBytes());\r\n |     public static void authenticateUser(String userId, String authToken) {\r\n        try {\r\n            userId = encryptCredentials(userId);\r\n            authToken = encryptCredentials(authToken);\r\n            URL url = new URL(\"https://auth.corporateaccess.com/login\"); // Use HTTPS\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "url",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "new URL(\"https://auth.corporateaccess.com/login\")",
                        "type": "URL",
                        "context": "            userId = encryptCredentials(userId);\r\n            authToken = encryptCredentials(authToken);\r\n            URL url = new URL(\"https://auth.corporateaccess.com/login\"); // Use HTTPS\r\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n            connection.setRequestMethod(\"POST\");\r\n",
                        "nextNode": "url"
                    },
                    {
                        "name": "url",
                        "type": "Dataflow from `new URL(...)` to `url`\nDataflow from `\"https://auth.corporateaccess.com/login\"` to `url`",
                        "context": "            authToken = encryptCredentials(authToken);\r\n            URL url = new URL(\"https://auth.corporateaccess.com/login\"); // Use HTTPS\r\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n            connection.setRequestMethod(\"POST\");\r\n            connection.setDoOutput(true); // To send request content\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "args",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "encrypted",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "data",
                        "type": "String",
                        "context": "        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, authenticationKey);\r\n        byte[] encrypted = cipher.doFinal(data.getBytes());\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n    }\r\n",
                        "nextNode": "data.getBytes()"
                    },
                    {
                        "name": "data.getBytes()",
                        "type": "byte[]",
                        "context": "        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, authenticationKey);\r\n        byte[] encrypted = cipher.doFinal(data.getBytes());\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n    }\r\n",
                        "nextNode": "cipher.doFinal(data.getBytes()"
                    },
                    {
                        "name": "cipher.doFinal(data.getBytes()",
                        "type": "byte[]",
                        "context": "        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, authenticationKey);\r\n        byte[] encrypted = cipher.doFinal(data.getBytes());\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n    }\r\n",
                        "nextNode": "encrypted"
                    },
                    {
                        "name": "encrypted",
                        "type": "Dataflow from `data` to `encrypted`\nDataflow from `doFinal(...)` to `encrypted`\nDataflow from `getBytes(...)` to `encrypted`\nDataflow from `userId` to `encrypted`\nDataflow from `authToken` to `encrypted`\nDataflow from `\"user123\"` to `encrypted`\nDataflow from `\"abc123def456ghi789jkl012mno345pqr678\"` to `encrypted`",
                        "context": "        cipher.init(Cipher.ENCRYPT_MODE, authenticationKey);\r\n        byte[] encrypted = cipher.doFinal(data.getBytes());\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n    }\r\n\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "connection",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "url.openConnection()",
                        "type": "URLConnection",
                        "context": "            authToken = encryptCredentials(authToken);\r\n            URL url = new URL(\"https://auth.corporateaccess.com/login\"); // Use HTTPS\r\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n            connection.setRequestMethod(\"POST\");\r\n            connection.setDoOutput(true); // To send request content\r\n |             authToken = encryptCredentials(authToken);\r\n            URL url = new URL(\"https://auth.corporateaccess.com/login\"); // Use HTTPS\r\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n            connection.setRequestMethod(\"POST\");\r\n            connection.setDoOutput(true); // To send request content\r\n |             authToken = encryptCredentials(authToken);\r\n            URL url = new URL(\"https://auth.corporateaccess.com/login\"); // Use HTTPS\r\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n            connection.setRequestMethod(\"POST\");\r\n            connection.setDoOutput(true); // To send request content\r\n |             authToken = encryptCredentials(authToken);\r\n            URL url = new URL(\"https://auth.corporateaccess.com/login\"); // Use HTTPS\r\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n            connection.setRequestMethod(\"POST\");\r\n            connection.setDoOutput(true); // To send request content\r\n |             authToken = encryptCredentials(authToken);\r\n            URL url = new URL(\"https://auth.corporateaccess.com/login\"); // Use HTTPS\r\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n            connection.setRequestMethod(\"POST\");\r\n            connection.setDoOutput(true); // To send request content\r\n |             authToken = encryptCredentials(authToken);\r\n            URL url = new URL(\"https://auth.corporateaccess.com/login\"); // Use HTTPS\r\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n            connection.setRequestMethod(\"POST\");\r\n            connection.setDoOutput(true); // To send request content\r\n",
                        "nextNode": "(HttpURLConnection) url.openConnection()"
                    },
                    {
                        "name": "(HttpURLConnection) url.openConnection()",
                        "type": "HttpURLConnection",
                        "context": "            authToken = encryptCredentials(authToken);\r\n            URL url = new URL(\"https://auth.corporateaccess.com/login\"); // Use HTTPS\r\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n            connection.setRequestMethod(\"POST\");\r\n            connection.setDoOutput(true); // To send request content\r\n |             authToken = encryptCredentials(authToken);\r\n            URL url = new URL(\"https://auth.corporateaccess.com/login\"); // Use HTTPS\r\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n            connection.setRequestMethod(\"POST\");\r\n            connection.setDoOutput(true); // To send request content\r\n |             authToken = encryptCredentials(authToken);\r\n            URL url = new URL(\"https://auth.corporateaccess.com/login\"); // Use HTTPS\r\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n            connection.setRequestMethod(\"POST\");\r\n            connection.setDoOutput(true); // To send request content\r\n |             authToken = encryptCredentials(authToken);\r\n            URL url = new URL(\"https://auth.corporateaccess.com/login\"); // Use HTTPS\r\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n            connection.setRequestMethod(\"POST\");\r\n            connection.setDoOutput(true); // To send request content\r\n |             authToken = encryptCredentials(authToken);\r\n            URL url = new URL(\"https://auth.corporateaccess.com/login\"); // Use HTTPS\r\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n            connection.setRequestMethod(\"POST\");\r\n            connection.setDoOutput(true); // To send request content\r\n |             authToken = encryptCredentials(authToken);\r\n            URL url = new URL(\"https://auth.corporateaccess.com/login\"); // Use HTTPS\r\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n            connection.setRequestMethod(\"POST\");\r\n            connection.setDoOutput(true); // To send request content\r\n",
                        "nextNode": "connection"
                    },
                    {
                        "name": "connection",
                        "type": "Dataflow from `openConnection(...)` to `connection`",
                        "context": "            URL url = new URL(\"https://auth.corporateaccess.com/login\"); // Use HTTPS\r\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n            connection.setRequestMethod(\"POST\");\r\n            connection.setDoOutput(true); // To send request content\r\n            connection.setRequestProperty(\"Content-Type\", \"application/x-www-form-urlencoded\");\r\n |             URL url = new URL(\"https://auth.corporateaccess.com/login\"); // Use HTTPS\r\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n            connection.setRequestMethod(\"POST\");\r\n            connection.setDoOutput(true); // To send request content\r\n            connection.setRequestProperty(\"Content-Type\", \"application/x-www-form-urlencoded\");\r\n |             HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n            connection.setRequestMethod(\"POST\");\r\n            connection.setDoOutput(true); // To send request content\r\n            connection.setRequestProperty(\"Content-Type\", \"application/x-www-form-urlencoded\");\r\n\r\n |             URL url = new URL(\"https://auth.corporateaccess.com/login\"); // Use HTTPS\r\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n            connection.setRequestMethod(\"POST\");\r\n            connection.setDoOutput(true); // To send request content\r\n            connection.setRequestProperty(\"Content-Type\", \"application/x-www-form-urlencoded\");\r\n |             HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n            connection.setRequestMethod(\"POST\");\r\n            connection.setDoOutput(true); // To send request content\r\n            connection.setRequestProperty(\"Content-Type\", \"application/x-www-form-urlencoded\");\r\n\r\n |             connection.setRequestMethod(\"POST\");\r\n            connection.setDoOutput(true); // To send request content\r\n            connection.setRequestProperty(\"Content-Type\", \"application/x-www-form-urlencoded\");\r\n\r\n            // Formulate the data to be sent in the POST body\r\n |             URL url = new URL(\"https://auth.corporateaccess.com/login\"); // Use HTTPS\r\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n            connection.setRequestMethod(\"POST\");\r\n            connection.setDoOutput(true); // To send request content\r\n            connection.setRequestProperty(\"Content-Type\", \"application/x-www-form-urlencoded\");\r\n |             HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n            connection.setRequestMethod(\"POST\");\r\n            connection.setDoOutput(true); // To send request content\r\n            connection.setRequestProperty(\"Content-Type\", \"application/x-www-form-urlencoded\");\r\n\r\n |             connection.setRequestMethod(\"POST\");\r\n            connection.setDoOutput(true); // To send request content\r\n            connection.setRequestProperty(\"Content-Type\", \"application/x-www-form-urlencoded\");\r\n\r\n            // Formulate the data to be sent in the POST body\r\n |             // Formulate the data to be sent in the POST body\r\n            String urlParameters = \"userId=\" + userId + \"&token=\" + authToken;\r\n            try (OutputStream os = connection.getOutputStream()) {\r\n                os.write(urlParameters.getBytes());\r\n                os.flush();\r\n |             URL url = new URL(\"https://auth.corporateaccess.com/login\"); // Use HTTPS\r\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n            connection.setRequestMethod(\"POST\");\r\n            connection.setDoOutput(true); // To send request content\r\n            connection.setRequestProperty(\"Content-Type\", \"application/x-www-form-urlencoded\");\r\n |             HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n            connection.setRequestMethod(\"POST\");\r\n            connection.setDoOutput(true); // To send request content\r\n            connection.setRequestProperty(\"Content-Type\", \"application/x-www-form-urlencoded\");\r\n\r\n |             connection.setRequestMethod(\"POST\");\r\n            connection.setDoOutput(true); // To send request content\r\n            connection.setRequestProperty(\"Content-Type\", \"application/x-www-form-urlencoded\");\r\n\r\n            // Formulate the data to be sent in the POST body\r\n |             // Formulate the data to be sent in the POST body\r\n            String urlParameters = \"userId=\" + userId + \"&token=\" + authToken;\r\n            try (OutputStream os = connection.getOutputStream()) {\r\n                os.write(urlParameters.getBytes());\r\n                os.flush();\r\n |             }\r\n            // Handling the response (omitted for brevity)\r\n            if (connection.getResponseCode() == HttpURLConnection.HTTP_OK) {\r\n                try (InputStream responseStream = connection.getInputStream()) {\r\n                    // Process the response\r\n |             URL url = new URL(\"https://auth.corporateaccess.com/login\"); // Use HTTPS\r\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n            connection.setRequestMethod(\"POST\");\r\n            connection.setDoOutput(true); // To send request content\r\n            connection.setRequestProperty(\"Content-Type\", \"application/x-www-form-urlencoded\");\r\n |             HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n            connection.setRequestMethod(\"POST\");\r\n            connection.setDoOutput(true); // To send request content\r\n            connection.setRequestProperty(\"Content-Type\", \"application/x-www-form-urlencoded\");\r\n\r\n |             connection.setRequestMethod(\"POST\");\r\n            connection.setDoOutput(true); // To send request content\r\n            connection.setRequestProperty(\"Content-Type\", \"application/x-www-form-urlencoded\");\r\n\r\n            // Formulate the data to be sent in the POST body\r\n |             // Formulate the data to be sent in the POST body\r\n            String urlParameters = \"userId=\" + userId + \"&token=\" + authToken;\r\n            try (OutputStream os = connection.getOutputStream()) {\r\n                os.write(urlParameters.getBytes());\r\n                os.flush();\r\n |             }\r\n            // Handling the response (omitted for brevity)\r\n            if (connection.getResponseCode() == HttpURLConnection.HTTP_OK) {\r\n                try (InputStream responseStream = connection.getInputStream()) {\r\n                    // Process the response\r\n |             // Handling the response (omitted for brevity)\r\n            if (connection.getResponseCode() == HttpURLConnection.HTTP_OK) {\r\n                try (InputStream responseStream = connection.getInputStream()) {\r\n                    // Process the response\r\n                }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "urlParameters",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "data",
                        "type": "String",
                        "context": "        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, authenticationKey);\r\n        byte[] encrypted = cipher.doFinal(data.getBytes());\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n    }\r\n",
                        "nextNode": "data.getBytes()"
                    },
                    {
                        "name": "data.getBytes()",
                        "type": "byte[]",
                        "context": "        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, authenticationKey);\r\n        byte[] encrypted = cipher.doFinal(data.getBytes());\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n    }\r\n",
                        "nextNode": "cipher.doFinal(data.getBytes()"
                    },
                    {
                        "name": "cipher.doFinal(data.getBytes()",
                        "type": "byte[]",
                        "context": "        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, authenticationKey);\r\n        byte[] encrypted = cipher.doFinal(data.getBytes());\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n    }\r\n",
                        "nextNode": "encrypted"
                    },
                    {
                        "name": "encrypted",
                        "type": "byte[]",
                        "context": "        cipher.init(Cipher.ENCRYPT_MODE, authenticationKey);\r\n        byte[] encrypted = cipher.doFinal(data.getBytes());\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n    }\r\n\r\n",
                        "nextNode": "Base64.getEncoder().encodeToString(encrypted)"
                    },
                    {
                        "name": "Base64.getEncoder().encodeToString(encrypted)",
                        "type": "String",
                        "context": "        cipher.init(Cipher.ENCRYPT_MODE, authenticationKey);\r\n        byte[] encrypted = cipher.doFinal(data.getBytes());\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n    }\r\n\r\n",
                        "nextNode": "encryptCredentials(authToken)"
                    },
                    {
                        "name": "encryptCredentials(authToken)",
                        "type": "String",
                        "context": "        try {\r\n            userId = encryptCredentials(userId);\r\n            authToken = encryptCredentials(authToken);\r\n            URL url = new URL(\"https://auth.corporateaccess.com/login\"); // Use HTTPS\r\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n",
                        "nextNode": "authToken"
                    },
                    {
                        "name": "authToken",
                        "type": "String",
                        "context": "\r\n            // Formulate the data to be sent in the POST body\r\n            String urlParameters = \"userId=\" + userId + \"&token=\" + authToken;\r\n            try (OutputStream os = connection.getOutputStream()) {\r\n                os.write(urlParameters.getBytes());\r\n",
                        "nextNode": "\"userId=\" + userId + \"&token=\" + authToken"
                    },
                    {
                        "name": "\"userId=\" + userId + \"&token=\" + authToken",
                        "type": "String",
                        "context": "\r\n            // Formulate the data to be sent in the POST body\r\n            String urlParameters = \"userId=\" + userId + \"&token=\" + authToken;\r\n            try (OutputStream os = connection.getOutputStream()) {\r\n                os.write(urlParameters.getBytes());\r\n",
                        "nextNode": "urlParameters"
                    },
                    {
                        "name": "urlParameters",
                        "type": "Dataflow from `data` to `urlParameters`\nDataflow from `encrypted` to `urlParameters`\nDataflow from `authToken` to `urlParameters`\nDataflow from `userId` to `urlParameters`\nDataflow from `doFinal(...)` to `urlParameters`\nDataflow from `getBytes(...)` to `urlParameters`\nDataflow from `encodeToString(...)` to `urlParameters`\nDataflow from `\"&token=\"` to `urlParameters`\nDataflow from `\"userId=\"` to `urlParameters`\nDataflow from `encryptCredentials(...)` to `urlParameters`\nDataflow from `userId` to `urlParameters`\nDataflow from `encryptCredentials(...)` to `urlParameters`\nDataflow from `authToken` to `urlParameters`\nDataflow from `\"user123\"` to `urlParameters`\nDataflow from `\"abc123def456ghi789jkl012mno345pqr678\"` to `urlParameters`",
                        "context": "            String urlParameters = \"userId=\" + userId + \"&token=\" + authToken;\r\n            try (OutputStream os = connection.getOutputStream()) {\r\n                os.write(urlParameters.getBytes());\r\n                os.flush();\r\n            }\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "Error occurred",
                "isSensitive": "no"
            },
            {
                "name": "POST",
                "isSensitive": "no"
            },
            {
                "name": "&token=",
                "isSensitive": "no"
            },
            {
                "name": "https://auth.corporateaccess.com/login",
                "isSensitive": "yes"
            },
            {
                "name": "application/x-www-form-urlencoded",
                "isSensitive": "no"
            },
            {
                "name": "userId=",
                "isSensitive": "no"
            },
            {
                "name": "user123",
                "isSensitive": "yes"
            },
            {
                "name": "AES",
                "isSensitive": "yes"
            },
            {
                "name": "Content-Type",
                "isSensitive": "no"
            },
            {
                "name": "abc123def456ghi789jkl012mno345pqr678",
                "isSensitive": "yes"
            }
        ],
        "comments": [
            {
                "name": "To send request content",
                "isSensitive": "no"
            },
            {
                "name": "Handling the response (omitted for brevity)",
                "isSensitive": "no"
            },
            {
                "name": "Formulate the data to be sent in the POST body",
                "isSensitive": "no"
            },
            {
                "name": "Process the response",
                "isSensitive": "no"
            },
            {
                "name": "Use HTTPS",
                "isSensitive": "no"
            },
            {
                "name": "Generate a key for encryption",
                "isSensitive": "no"
            },
            {
                "name": "AES 128-bit key",
                "isSensitive": "yes"
            }
        ],
        "sinks": [
            {
                "name": "init",
                "isSink": "no"
            },
            {
                "name": "setRequestMethod",
                "isSink": "yes"
            },
            {
                "name": "encryptCredentials",
                "isSink": "no"
            },
            {
                "name": "openConnection",
                "isSink": "yes"
            },
            {
                "name": "encodeToString",
                "isSink": "no"
            },
            {
                "name": "getInputStream",
                "isSink": "no"
            },
            {
                "name": "getBytes",
                "isSink": "no"
            },
            {
                "name": "doFinal",
                "isSink": "no"
            },
            {
                "name": "generateKey",
                "isSink": "no"
            },
            {
                "name": "println",
                "isSink": "yes"
            },
            {
                "name": "flush",
                "isSink": "yes"
            },
            {
                "name": "setRequestProperty",
                "isSink": "yes"
            },
            {
                "name": "authenticateUser",
                "isSink": "no"
            },
            {
                "name": "getResponseCode",
                "isSink": "no"
            },
            {
                "name": "getEncoder",
                "isSink": "no"
            },
            {
                "name": "getOutputStream",
                "isSink": "no"
            },
            {
                "name": "getInstance",
                "isSink": "no"
            },
            {
                "name": "write",
                "isSink": "yes"
            },
            {
                "name": "setDoOutput",
                "isSink": "yes"
            }
        ]
    },
    {
        "fileName": "GOOD_BankingTransactionQuery.java",
        "variables": [
            {
                "name": "cipher",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "Cipher.getInstance(\"AES\")",
                        "type": "Cipher",
                        "context": "\r\n    public static String encryptAccountNumber(String accountNumber) throws Exception {\r\n        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, transactionKey);\r\n        byte[] encrypted = cipher.doFinal(accountNumber.getBytes());\r\n | \r\n    public static String encryptAccountNumber(String accountNumber) throws Exception {\r\n        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, transactionKey);\r\n        byte[] encrypted = cipher.doFinal(accountNumber.getBytes());\r\n",
                        "nextNode": "cipher"
                    },
                    {
                        "name": "cipher",
                        "type": "Cipher",
                        "context": "    public static String encryptAccountNumber(String accountNumber) throws Exception {\r\n        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, transactionKey);\r\n        byte[] encrypted = cipher.doFinal(accountNumber.getBytes());\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n |         Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, transactionKey);\r\n        byte[] encrypted = cipher.doFinal(accountNumber.getBytes());\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n    }\r\n |     public static String encryptAccountNumber(String accountNumber) throws Exception {\r\n        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, transactionKey);\r\n        byte[] encrypted = cipher.doFinal(accountNumber.getBytes());\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "httpClient",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "HttpClients.createDefault()",
                        "type": "CloseableHttpClient",
                        "context": "            accountNumber = encryptAccountNumber(accountNumber);\r\n            String url = \"https://example.com/transactions\"; // Use HTTPS\r\n            CloseableHttpClient httpClient = HttpClients.createDefault();\r\n            HttpPost httpPost = new HttpPost(url);\r\n\r\n |             accountNumber = encryptAccountNumber(accountNumber);\r\n            String url = \"https://example.com/transactions\"; // Use HTTPS\r\n            CloseableHttpClient httpClient = HttpClients.createDefault();\r\n            HttpPost httpPost = new HttpPost(url);\r\n\r\n",
                        "nextNode": "httpClient"
                    },
                    {
                        "name": "httpClient",
                        "type": "Dataflow from `createDefault(...)` to `httpClient`",
                        "context": "            httpPost.setEntity(entity);\r\n\r\n            HttpResponse response = httpClient.execute(httpPost);\r\n            httpClient.close();\r\n        } catch (Exception e) {\r\n |             httpPost.setEntity(entity);\r\n\r\n            HttpResponse response = httpClient.execute(httpPost);\r\n            httpClient.close();\r\n        } catch (Exception e) {\r\n | \r\n            HttpResponse response = httpClient.execute(httpPost);\r\n            httpClient.close();\r\n        } catch (Exception e) {\r\n            System.err.println(\"Error occurred\");\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "e",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "httpPost",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "url",
                        "type": "String",
                        "context": "            String url = \"https://example.com/transactions\"; // Use HTTPS\r\n            CloseableHttpClient httpClient = HttpClients.createDefault();\r\n            HttpPost httpPost = new HttpPost(url);\r\n\r\n            // Setting the Request headers\r\n |             String url = \"https://example.com/transactions\"; // Use HTTPS\r\n            CloseableHttpClient httpClient = HttpClients.createDefault();\r\n            HttpPost httpPost = new HttpPost(url);\r\n\r\n            // Setting the Request headers\r\n |             String url = \"https://example.com/transactions\"; // Use HTTPS\r\n            CloseableHttpClient httpClient = HttpClients.createDefault();\r\n            HttpPost httpPost = new HttpPost(url);\r\n\r\n            // Setting the Request headers\r\n",
                        "nextNode": "new HttpPost(url)"
                    },
                    {
                        "name": "new HttpPost(url)",
                        "type": "HttpPost",
                        "context": "            String url = \"https://example.com/transactions\"; // Use HTTPS\r\n            CloseableHttpClient httpClient = HttpClients.createDefault();\r\n            HttpPost httpPost = new HttpPost(url);\r\n\r\n            // Setting the Request headers\r\n |             String url = \"https://example.com/transactions\"; // Use HTTPS\r\n            CloseableHttpClient httpClient = HttpClients.createDefault();\r\n            HttpPost httpPost = new HttpPost(url);\r\n\r\n            // Setting the Request headers\r\n |             String url = \"https://example.com/transactions\"; // Use HTTPS\r\n            CloseableHttpClient httpClient = HttpClients.createDefault();\r\n            HttpPost httpPost = new HttpPost(url);\r\n\r\n            // Setting the Request headers\r\n",
                        "nextNode": "httpPost"
                    },
                    {
                        "name": "httpPost",
                        "type": "HttpPost",
                        "context": "\r\n            // Setting the Request headers\r\n            httpPost.setHeader(\"Content-Type\", \"application/json\");\r\n            // Construct JSON payload\r\n            String jsonPayload = \"{\\\"accountNumber\\\":\\\"\" + accountNumber + \"\\\"}\";\r\n |             String jsonPayload = \"{\\\"accountNumber\\\":\\\"\" + accountNumber + \"\\\"}\";\r\n            StringEntity entity = new StringEntity(jsonPayload);\r\n            httpPost.setEntity(entity);\r\n\r\n            HttpResponse response = httpClient.execute(httpPost);\r\n |             httpPost.setEntity(entity);\r\n\r\n            HttpResponse response = httpClient.execute(httpPost);\r\n            httpClient.close();\r\n        } catch (Exception e) {\r\n | \r\n            // Setting the Request headers\r\n            httpPost.setHeader(\"Content-Type\", \"application/json\");\r\n            // Construct JSON payload\r\n            String jsonPayload = \"{\\\"accountNumber\\\":\\\"\" + accountNumber + \"\\\"}\";\r\n | \r\n            // Setting the Request headers\r\n            httpPost.setHeader(\"Content-Type\", \"application/json\");\r\n            // Construct JSON payload\r\n            String jsonPayload = \"{\\\"accountNumber\\\":\\\"\" + accountNumber + \"\\\"}\";\r\n |             String jsonPayload = \"{\\\"accountNumber\\\":\\\"\" + accountNumber + \"\\\"}\";\r\n            StringEntity entity = new StringEntity(jsonPayload);\r\n            httpPost.setEntity(entity);\r\n\r\n            HttpResponse response = httpClient.execute(httpPost);\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "keyGen",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "KeyGenerator.getInstance(\"AES\")",
                        "type": "KeyGenerator",
                        "context": "    static {\r\n        try {\r\n            KeyGenerator keyGen = KeyGenerator.getInstance(\"AES\");\r\n            keyGen.init(128); // AES 128-bit key\r\n            transactionKey = keyGen.generateKey();\r\n |     static {\r\n        try {\r\n            KeyGenerator keyGen = KeyGenerator.getInstance(\"AES\");\r\n            keyGen.init(128); // AES 128-bit key\r\n            transactionKey = keyGen.generateKey();\r\n",
                        "nextNode": "keyGen"
                    },
                    {
                        "name": "keyGen",
                        "type": "Dataflow from `getInstance(...)` to `keyGen`\nDataflow from `\"AES\"` to `keyGen`",
                        "context": "        try {\r\n            KeyGenerator keyGen = KeyGenerator.getInstance(\"AES\");\r\n            keyGen.init(128); // AES 128-bit key\r\n            transactionKey = keyGen.generateKey();\r\n        } catch (Exception e) {\r\n |         try {\r\n            KeyGenerator keyGen = KeyGenerator.getInstance(\"AES\");\r\n            keyGen.init(128); // AES 128-bit key\r\n            transactionKey = keyGen.generateKey();\r\n        } catch (Exception e) {\r\n |             KeyGenerator keyGen = KeyGenerator.getInstance(\"AES\");\r\n            keyGen.init(128); // AES 128-bit key\r\n            transactionKey = keyGen.generateKey();\r\n        } catch (Exception e) {\r\n            System.err.println(\"Error occurred\");\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "accountNumber",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "\"1234567890\"",
                        "type": "String",
                        "context": "\r\n    public static void main(String[] args) {\r\n        queryTransactionDetails(\"1234567890\"); \r\n    }\r\n}\r\n | \r\n    public static void main(String[] args) {\r\n        queryTransactionDetails(\"1234567890\"); \r\n    }\r\n}\r\n",
                        "nextNode": "String accountNumber"
                    },
                    {
                        "name": "String accountNumber",
                        "type": "String",
                        "context": "    }\r\n\r\n    public static void queryTransactionDetails(String accountNumber) {\r\n        try {\r\n            accountNumber = encryptAccountNumber(accountNumber);\r\n |     }\r\n\r\n    public static String encryptAccountNumber(String accountNumber) throws Exception {\r\n        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, transactionKey);\r\n |     }\r\n\r\n    public static void queryTransactionDetails(String accountNumber) {\r\n        try {\r\n            accountNumber = encryptAccountNumber(accountNumber);\r\n",
                        "nextNode": "accountNumber"
                    },
                    {
                        "name": "encryptAccountNumber(accountNumber)",
                        "type": "String",
                        "context": "    public static void queryTransactionDetails(String accountNumber) {\r\n        try {\r\n            accountNumber = encryptAccountNumber(accountNumber);\r\n            String url = \"https://example.com/transactions\"; // Use HTTPS\r\n            CloseableHttpClient httpClient = HttpClients.createDefault();\r\n",
                        "nextNode": "accountNumber"
                    },
                    {
                        "name": "accountNumber",
                        "type": "String",
                        "context": "    public static void queryTransactionDetails(String accountNumber) {\r\n        try {\r\n            accountNumber = encryptAccountNumber(accountNumber);\r\n            String url = \"https://example.com/transactions\"; // Use HTTPS\r\n            CloseableHttpClient httpClient = HttpClients.createDefault();\r\n |         Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, transactionKey);\r\n        byte[] encrypted = cipher.doFinal(accountNumber.getBytes());\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n    }\r\n |             httpPost.setHeader(\"Content-Type\", \"application/json\");\r\n            // Construct JSON payload\r\n            String jsonPayload = \"{\\\"accountNumber\\\":\\\"\" + accountNumber + \"\\\"}\";\r\n            StringEntity entity = new StringEntity(jsonPayload);\r\n            httpPost.setEntity(entity);\r\n |     public static void queryTransactionDetails(String accountNumber) {\r\n        try {\r\n            accountNumber = encryptAccountNumber(accountNumber);\r\n            String url = \"https://example.com/transactions\"; // Use HTTPS\r\n            CloseableHttpClient httpClient = HttpClients.createDefault();\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "url",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "\"https://example.com/transactions\"",
                        "type": "String",
                        "context": "        try {\r\n            accountNumber = encryptAccountNumber(accountNumber);\r\n            String url = \"https://example.com/transactions\"; // Use HTTPS\r\n            CloseableHttpClient httpClient = HttpClients.createDefault();\r\n            HttpPost httpPost = new HttpPost(url);\r\n",
                        "nextNode": "url"
                    },
                    {
                        "name": "url",
                        "type": "Dataflow from `\"https://example.com/transactions\"` to `url`",
                        "context": "            String url = \"https://example.com/transactions\"; // Use HTTPS\r\n            CloseableHttpClient httpClient = HttpClients.createDefault();\r\n            HttpPost httpPost = new HttpPost(url);\r\n\r\n            // Setting the Request headers\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "args",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "encrypted",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "accountNumber",
                        "type": "String",
                        "context": "        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, transactionKey);\r\n        byte[] encrypted = cipher.doFinal(accountNumber.getBytes());\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n    }\r\n",
                        "nextNode": "accountNumber.getBytes()"
                    },
                    {
                        "name": "accountNumber.getBytes()",
                        "type": "byte[]",
                        "context": "        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, transactionKey);\r\n        byte[] encrypted = cipher.doFinal(accountNumber.getBytes());\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n    }\r\n",
                        "nextNode": "cipher.doFinal(accountNumber.getBytes()"
                    },
                    {
                        "name": "cipher.doFinal(accountNumber.getBytes()",
                        "type": "byte[]",
                        "context": "        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, transactionKey);\r\n        byte[] encrypted = cipher.doFinal(accountNumber.getBytes());\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n    }\r\n",
                        "nextNode": "encrypted"
                    },
                    {
                        "name": "encrypted",
                        "type": "Dataflow from `accountNumber` to `encrypted`\nDataflow from `doFinal(...)` to `encrypted`\nDataflow from `getBytes(...)` to `encrypted`\nDataflow from `accountNumber` to `encrypted`\nDataflow from `\"1234567890\"` to `encrypted`",
                        "context": "        cipher.init(Cipher.ENCRYPT_MODE, transactionKey);\r\n        byte[] encrypted = cipher.doFinal(accountNumber.getBytes());\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n    }\r\n\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "response",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "jsonPayload",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "accountNumber",
                        "type": "String",
                        "context": "        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, transactionKey);\r\n        byte[] encrypted = cipher.doFinal(accountNumber.getBytes());\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n    }\r\n |             httpPost.setHeader(\"Content-Type\", \"application/json\");\r\n            // Construct JSON payload\r\n            String jsonPayload = \"{\\\"accountNumber\\\":\\\"\" + accountNumber + \"\\\"}\";\r\n            StringEntity entity = new StringEntity(jsonPayload);\r\n            httpPost.setEntity(entity);\r\n",
                        "nextNode": "\"{\\\"accountNumber\\\":\\\"\" + accountNumber"
                    },
                    {
                        "name": "accountNumber.getBytes()",
                        "type": "byte[]",
                        "context": "        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, transactionKey);\r\n        byte[] encrypted = cipher.doFinal(accountNumber.getBytes());\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n    }\r\n",
                        "nextNode": "cipher.doFinal(accountNumber.getBytes()"
                    },
                    {
                        "name": "cipher.doFinal(accountNumber.getBytes()",
                        "type": "byte[]",
                        "context": "        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, transactionKey);\r\n        byte[] encrypted = cipher.doFinal(accountNumber.getBytes());\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n    }\r\n",
                        "nextNode": "encrypted"
                    },
                    {
                        "name": "encrypted",
                        "type": "byte[]",
                        "context": "        cipher.init(Cipher.ENCRYPT_MODE, transactionKey);\r\n        byte[] encrypted = cipher.doFinal(accountNumber.getBytes());\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n    }\r\n\r\n",
                        "nextNode": "Base64.getEncoder().encodeToString(encrypted)"
                    },
                    {
                        "name": "Base64.getEncoder().encodeToString(encrypted)",
                        "type": "String",
                        "context": "        cipher.init(Cipher.ENCRYPT_MODE, transactionKey);\r\n        byte[] encrypted = cipher.doFinal(accountNumber.getBytes());\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n    }\r\n\r\n",
                        "nextNode": "encryptAccountNumber(accountNumber)"
                    },
                    {
                        "name": "encryptAccountNumber(accountNumber)",
                        "type": "String",
                        "context": "    public static void queryTransactionDetails(String accountNumber) {\r\n        try {\r\n            accountNumber = encryptAccountNumber(accountNumber);\r\n            String url = \"https://example.com/transactions\"; // Use HTTPS\r\n            CloseableHttpClient httpClient = HttpClients.createDefault();\r\n",
                        "nextNode": "accountNumber"
                    },
                    {
                        "name": "\"{\\\"accountNumber\\\":\\\"\" + accountNumber",
                        "type": "String",
                        "context": "            httpPost.setHeader(\"Content-Type\", \"application/json\");\r\n            // Construct JSON payload\r\n            String jsonPayload = \"{\\\"accountNumber\\\":\\\"\" + accountNumber + \"\\\"}\";\r\n            StringEntity entity = new StringEntity(jsonPayload);\r\n            httpPost.setEntity(entity);\r\n",
                        "nextNode": "\"{\\\"accountNumber\\\":\\\"\" + accountNumber + \"\\\"}\""
                    },
                    {
                        "name": "\"{\\\"accountNumber\\\":\\\"\" + accountNumber + \"\\\"}\"",
                        "type": "String",
                        "context": "            httpPost.setHeader(\"Content-Type\", \"application/json\");\r\n            // Construct JSON payload\r\n            String jsonPayload = \"{\\\"accountNumber\\\":\\\"\" + accountNumber + \"\\\"}\";\r\n            StringEntity entity = new StringEntity(jsonPayload);\r\n            httpPost.setEntity(entity);\r\n",
                        "nextNode": "jsonPayload"
                    },
                    {
                        "name": "jsonPayload",
                        "type": "Dataflow from `accountNumber` to `jsonPayload`\nDataflow from `encrypted` to `jsonPayload`\nDataflow from `accountNumber` to `jsonPayload`\nDataflow from `doFinal(...)` to `jsonPayload`\nDataflow from `getBytes(...)` to `jsonPayload`\nDataflow from `encodeToString(...)` to `jsonPayload`\nDataflow from `\"\\\"}}\"` to `jsonPayload`\nDataflow from `\"{{\\\"accountNumber\\\":\\\"\"` to `jsonPayload`\nDataflow from `encryptAccountNumber(...)` to `jsonPayload`\nDataflow from `accountNumber` to `jsonPayload`\nDataflow from `\"1234567890\"` to `jsonPayload`",
                        "context": "            // Construct JSON payload\r\n            String jsonPayload = \"{\\\"accountNumber\\\":\\\"\" + accountNumber + \"\\\"}\";\r\n            StringEntity entity = new StringEntity(jsonPayload);\r\n            httpPost.setEntity(entity);\r\n\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "transactionKey",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "keyGen.generateKey()",
                        "type": "SecretKey",
                        "context": "            KeyGenerator keyGen = KeyGenerator.getInstance(\"AES\");\r\n            keyGen.init(128); // AES 128-bit key\r\n            transactionKey = keyGen.generateKey();\r\n        } catch (Exception e) {\r\n            System.err.println(\"Error occurred\");\r\n",
                        "nextNode": "transactionKey"
                    },
                    {
                        "name": "transactionKey",
                        "type": "SecretKey",
                        "context": "\r\npublic class GOOD_BankingTransactionQuery {\r\n    private static SecretKey transactionKey;\r\n\r\n    static {\r\n |     public static String encryptAccountNumber(String accountNumber) throws Exception {\r\n        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, transactionKey);\r\n        byte[] encrypted = cipher.doFinal(accountNumber.getBytes());\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "entity",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "accountNumber",
                        "type": "String",
                        "context": "        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, transactionKey);\r\n        byte[] encrypted = cipher.doFinal(accountNumber.getBytes());\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n    }\r\n |             httpPost.setHeader(\"Content-Type\", \"application/json\");\r\n            // Construct JSON payload\r\n            String jsonPayload = \"{\\\"accountNumber\\\":\\\"\" + accountNumber + \"\\\"}\";\r\n            StringEntity entity = new StringEntity(jsonPayload);\r\n            httpPost.setEntity(entity);\r\n",
                        "nextNode": "\"{\\\"accountNumber\\\":\\\"\" + accountNumber"
                    },
                    {
                        "name": "accountNumber.getBytes()",
                        "type": "byte[]",
                        "context": "        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, transactionKey);\r\n        byte[] encrypted = cipher.doFinal(accountNumber.getBytes());\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n    }\r\n",
                        "nextNode": "cipher.doFinal(accountNumber.getBytes()"
                    },
                    {
                        "name": "cipher.doFinal(accountNumber.getBytes()",
                        "type": "byte[]",
                        "context": "        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, transactionKey);\r\n        byte[] encrypted = cipher.doFinal(accountNumber.getBytes());\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n    }\r\n",
                        "nextNode": "encrypted"
                    },
                    {
                        "name": "encrypted",
                        "type": "byte[]",
                        "context": "        cipher.init(Cipher.ENCRYPT_MODE, transactionKey);\r\n        byte[] encrypted = cipher.doFinal(accountNumber.getBytes());\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n    }\r\n\r\n",
                        "nextNode": "Base64.getEncoder().encodeToString(encrypted)"
                    },
                    {
                        "name": "Base64.getEncoder().encodeToString(encrypted)",
                        "type": "String",
                        "context": "        cipher.init(Cipher.ENCRYPT_MODE, transactionKey);\r\n        byte[] encrypted = cipher.doFinal(accountNumber.getBytes());\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n    }\r\n\r\n",
                        "nextNode": "encryptAccountNumber(accountNumber)"
                    },
                    {
                        "name": "encryptAccountNumber(accountNumber)",
                        "type": "String",
                        "context": "    public static void queryTransactionDetails(String accountNumber) {\r\n        try {\r\n            accountNumber = encryptAccountNumber(accountNumber);\r\n            String url = \"https://example.com/transactions\"; // Use HTTPS\r\n            CloseableHttpClient httpClient = HttpClients.createDefault();\r\n",
                        "nextNode": "accountNumber"
                    },
                    {
                        "name": "\"{\\\"accountNumber\\\":\\\"\" + accountNumber",
                        "type": "String",
                        "context": "            httpPost.setHeader(\"Content-Type\", \"application/json\");\r\n            // Construct JSON payload\r\n            String jsonPayload = \"{\\\"accountNumber\\\":\\\"\" + accountNumber + \"\\\"}\";\r\n            StringEntity entity = new StringEntity(jsonPayload);\r\n            httpPost.setEntity(entity);\r\n",
                        "nextNode": "\"{\\\"accountNumber\\\":\\\"\" + accountNumber + \"\\\"}\""
                    },
                    {
                        "name": "\"{\\\"accountNumber\\\":\\\"\" + accountNumber + \"\\\"}\"",
                        "type": "String",
                        "context": "            httpPost.setHeader(\"Content-Type\", \"application/json\");\r\n            // Construct JSON payload\r\n            String jsonPayload = \"{\\\"accountNumber\\\":\\\"\" + accountNumber + \"\\\"}\";\r\n            StringEntity entity = new StringEntity(jsonPayload);\r\n            httpPost.setEntity(entity);\r\n",
                        "nextNode": "jsonPayload"
                    },
                    {
                        "name": "jsonPayload",
                        "type": "String",
                        "context": "            // Construct JSON payload\r\n            String jsonPayload = \"{\\\"accountNumber\\\":\\\"\" + accountNumber + \"\\\"}\";\r\n            StringEntity entity = new StringEntity(jsonPayload);\r\n            httpPost.setEntity(entity);\r\n\r\n",
                        "nextNode": "new StringEntity(jsonPayload)"
                    },
                    {
                        "name": "new StringEntity(jsonPayload)",
                        "type": "StringEntity",
                        "context": "            // Construct JSON payload\r\n            String jsonPayload = \"{\\\"accountNumber\\\":\\\"\" + accountNumber + \"\\\"}\";\r\n            StringEntity entity = new StringEntity(jsonPayload);\r\n            httpPost.setEntity(entity);\r\n\r\n",
                        "nextNode": "entity"
                    },
                    {
                        "name": "entity",
                        "type": "Dataflow from `accountNumber` to `entity`\nDataflow from `encrypted` to `entity`\nDataflow from `accountNumber` to `entity`\nDataflow from `jsonPayload` to `entity`\nDataflow from `new StringEntity(...)` to `entity`\nDataflow from `doFinal(...)` to `entity`\nDataflow from `getBytes(...)` to `entity`\nDataflow from `encodeToString(...)` to `entity`\nDataflow from `\"\\\"}}\"` to `entity`\nDataflow from `\"{{\\\"accountNumber\\\":\\\"\"` to `entity`\nDataflow from `encryptAccountNumber(...)` to `entity`\nDataflow from `accountNumber` to `entity`\nDataflow from `\"1234567890\"` to `entity`",
                        "context": "            String jsonPayload = \"{\\\"accountNumber\\\":\\\"\" + accountNumber + \"\\\"}\";\r\n            StringEntity entity = new StringEntity(jsonPayload);\r\n            httpPost.setEntity(entity);\r\n\r\n            HttpResponse response = httpClient.execute(httpPost);\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "Error occurred",
                "isSensitive": "no"
            },
            {
                "name": "application/json",
                "isSensitive": "no"
            },
            {
                "name": "1234567890",
                "isSensitive": "yes"
            },
            {
                "name": "https://example.com/transactions",
                "isSensitive": "no"
            },
            {
                "name": "{\"accountNumber\":\"",
                "isSensitive": "no"
            },
            {
                "name": "\"}",
                "isSensitive": "no"
            },
            {
                "name": "AES",
                "isSensitive": "yes"
            },
            {
                "name": "Content-Type",
                "isSensitive": "no"
            }
        ],
        "comments": [
            {
                "name": "Construct JSON payload",
                "isSensitive": "no"
            },
            {
                "name": "Setting the Request headers",
                "isSensitive": "no"
            },
            {
                "name": "Use HTTPS",
                "isSensitive": "no"
            },
            {
                "name": "AES 128-bit key",
                "isSensitive": "yes"
            }
        ],
        "sinks": [
            {
                "name": "init",
                "isSink": "no"
            },
            {
                "name": "encodeToString",
                "isSink": "no"
            },
            {
                "name": "execute",
                "isSink": "yes"
            },
            {
                "name": "getBytes",
                "isSink": "no"
            },
            {
                "name": "setHeader",
                "isSink": "no"
            },
            {
                "name": "doFinal",
                "isSink": "no"
            },
            {
                "name": "setEntity",
                "isSink": "no"
            },
            {
                "name": "generateKey",
                "isSink": "no"
            },
            {
                "name": "println",
                "isSink": "yes"
            },
            {
                "name": "queryTransactionDetails",
                "isSink": "no"
            },
            {
                "name": "getEncoder",
                "isSink": "no"
            },
            {
                "name": "encryptAccountNumber",
                "isSink": "no"
            },
            {
                "name": "getInstance",
                "isSink": "no"
            },
            {
                "name": "close",
                "isSink": "yes"
            },
            {
                "name": "createDefault",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "GOOD_CreditCardSubmissionPOST_Encrypted.java",
        "variables": [
            {
                "name": "cipher",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "Cipher.getInstance(\"AES\")",
                        "type": "Cipher",
                        "context": "\r\n    public static String encrypt(String data) throws Exception {\r\n        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, paymentKey);\r\n        byte[] encrypted = cipher.doFinal(data.getBytes());\r\n | \r\n    public static String encrypt(String data) throws Exception {\r\n        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, paymentKey);\r\n        byte[] encrypted = cipher.doFinal(data.getBytes());\r\n",
                        "nextNode": "cipher"
                    },
                    {
                        "name": "cipher",
                        "type": "Cipher",
                        "context": "    public static String encrypt(String data) throws Exception {\r\n        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, paymentKey);\r\n        byte[] encrypted = cipher.doFinal(data.getBytes());\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n |         Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, paymentKey);\r\n        byte[] encrypted = cipher.doFinal(data.getBytes());\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n    }\r\n |     public static String encrypt(String data) throws Exception {\r\n        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, paymentKey);\r\n        byte[] encrypted = cipher.doFinal(data.getBytes());\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "cvv",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "data",
                        "type": "String",
                        "context": "        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, paymentKey);\r\n        byte[] encrypted = cipher.doFinal(data.getBytes());\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n    }\r\n",
                        "nextNode": "data.getBytes()"
                    },
                    {
                        "name": "data.getBytes()",
                        "type": "byte[]",
                        "context": "        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, paymentKey);\r\n        byte[] encrypted = cipher.doFinal(data.getBytes());\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n    }\r\n",
                        "nextNode": "cipher.doFinal(data.getBytes()"
                    },
                    {
                        "name": "cipher.doFinal(data.getBytes()",
                        "type": "byte[]",
                        "context": "        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, paymentKey);\r\n        byte[] encrypted = cipher.doFinal(data.getBytes());\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n    }\r\n",
                        "nextNode": "encrypted"
                    },
                    {
                        "name": "encrypted",
                        "type": "byte[]",
                        "context": "        cipher.init(Cipher.ENCRYPT_MODE, paymentKey);\r\n        byte[] encrypted = cipher.doFinal(data.getBytes());\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n    }\r\n\r\n",
                        "nextNode": "Base64.getEncoder().encodeToString(encrypted)"
                    },
                    {
                        "name": "Base64.getEncoder().encodeToString(encrypted)",
                        "type": "String",
                        "context": "        cipher.init(Cipher.ENCRYPT_MODE, paymentKey);\r\n        byte[] encrypted = cipher.doFinal(data.getBytes());\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n    }\r\n\r\n",
                        "nextNode": "encrypt(cvv)"
                    },
                    {
                        "name": "encrypt(cvv)",
                        "type": "String",
                        "context": "            cardNumber = encrypt(cardNumber);\r\n            expiryDate = encrypt(expiryDate);\r\n            cvv = encrypt(cvv);\r\n\r\n            URL url = new URL(\"https://bankingAmerica.com/submitPayment\");\r\n",
                        "nextNode": "cvv"
                    },
                    {
                        "name": "String cvv",
                        "type": "String",
                        "context": "    }\r\n\r\n    public static void submitCreditCard(String cardNumber, String expiryDate, String cvv) {\r\n        try {\r\n            cardNumber = encrypt(cardNumber);\r\n",
                        "nextNode": "cvv"
                    },
                    {
                        "name": "cvv",
                        "type": "Dataflow from `data` to `cvv`\nDataflow from `encrypted` to `cvv`\nDataflow from `doFinal(...)` to `cvv`\nDataflow from `getBytes(...)` to `cvv`\nDataflow from `encodeToString(...)` to `cvv`\nDataflow from `encrypt(...)` to `cvv`\nDataflow from `\"123\"` to `cvv`",
                        "context": "            String urlParameters = \"cardNumber=\" + URLEncoder.encode(cardNumber, \"UTF-8\") +\r\n                                   \"&expiryDate=\" + URLEncoder.encode(expiryDate, \"UTF-8\") +\r\n                                   \"&cvv=\" + URLEncoder.encode(cvv, \"UTF-8\");\r\n\r\n            try (OutputStream os = connection.getOutputStream()) {\r\n |             cardNumber = encrypt(cardNumber);\r\n            expiryDate = encrypt(expiryDate);\r\n            cvv = encrypt(cvv);\r\n\r\n            URL url = new URL(\"https://bankingAmerica.com/submitPayment\");\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "data",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "cardNumber",
                        "type": "String",
                        "context": "    public static void submitCreditCard(String cardNumber, String expiryDate, String cvv) {\r\n        try {\r\n            cardNumber = encrypt(cardNumber);\r\n            expiryDate = encrypt(expiryDate);\r\n            cvv = encrypt(cvv);\r\n",
                        "nextNode": "String data"
                    },
                    {
                        "name": "String data",
                        "type": "String",
                        "context": "    }\r\n\r\n    public static String encrypt(String data) throws Exception {\r\n        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, paymentKey);\r\n",
                        "nextNode": "data"
                    },
                    {
                        "name": "data",
                        "type": "Dataflow from `cardNumber` to `data`\nDataflow from `expiryDate` to `data`\nDataflow from `cvv` to `data`\nDataflow from `\"1234567890123456\"` to `data`\nDataflow from `\"12/23\"` to `data`\nDataflow from `\"123\"` to `data`",
                        "context": "        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, paymentKey);\r\n        byte[] encrypted = cipher.doFinal(data.getBytes());\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n    }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "os",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "connection.getOutputStream()",
                        "type": "OutputStream",
                        "context": "                                   \"&cvv=\" + URLEncoder.encode(cvv, \"UTF-8\");\r\n\r\n            try (OutputStream os = connection.getOutputStream()) {\r\n                os.write(urlParameters.getBytes());\r\n                os.flush();\r\n",
                        "nextNode": "os"
                    },
                    {
                        "name": "urlParameters.getBytes()",
                        "type": "byte[]",
                        "context": "\r\n            try (OutputStream os = connection.getOutputStream()) {\r\n                os.write(urlParameters.getBytes());\r\n                os.flush();\r\n            }\r\n",
                        "nextNode": "os"
                    },
                    {
                        "name": "os",
                        "type": "Dataflow from `getOutputStream(...)` to `os`",
                        "context": "\r\n            try (OutputStream os = connection.getOutputStream()) {\r\n                os.write(urlParameters.getBytes());\r\n                os.flush();\r\n            }\r\n | \r\n            try (OutputStream os = connection.getOutputStream()) {\r\n                os.write(urlParameters.getBytes());\r\n                os.flush();\r\n            }\r\n |             try (OutputStream os = connection.getOutputStream()) {\r\n                os.write(urlParameters.getBytes());\r\n                os.flush();\r\n            }\r\n\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "e",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "keyGen",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "KeyGenerator.getInstance(\"AES\")",
                        "type": "KeyGenerator",
                        "context": "    static {\r\n        try {\r\n            KeyGenerator keyGen = KeyGenerator.getInstance(\"AES\");\r\n            keyGen.init(128); // Using AES with 128-bit keys.\r\n            paymentKey = keyGen.generateKey();\r\n |     static {\r\n        try {\r\n            KeyGenerator keyGen = KeyGenerator.getInstance(\"AES\");\r\n            keyGen.init(128); // Using AES with 128-bit keys.\r\n            paymentKey = keyGen.generateKey();\r\n",
                        "nextNode": "keyGen"
                    },
                    {
                        "name": "keyGen",
                        "type": "Dataflow from `getInstance(...)` to `keyGen`\nDataflow from `\"AES\"` to `keyGen`",
                        "context": "        try {\r\n            KeyGenerator keyGen = KeyGenerator.getInstance(\"AES\");\r\n            keyGen.init(128); // Using AES with 128-bit keys.\r\n            paymentKey = keyGen.generateKey();\r\n        } catch (Exception e) {\r\n |         try {\r\n            KeyGenerator keyGen = KeyGenerator.getInstance(\"AES\");\r\n            keyGen.init(128); // Using AES with 128-bit keys.\r\n            paymentKey = keyGen.generateKey();\r\n        } catch (Exception e) {\r\n |             KeyGenerator keyGen = KeyGenerator.getInstance(\"AES\");\r\n            keyGen.init(128); // Using AES with 128-bit keys.\r\n            paymentKey = keyGen.generateKey();\r\n        } catch (Exception e) {\r\n            System.err.println(\"Error occurred\");\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "url",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "new URL(\"https://bankingAmerica.com/submitPayment\")",
                        "type": "URL",
                        "context": "            cvv = encrypt(cvv);\r\n\r\n            URL url = new URL(\"https://bankingAmerica.com/submitPayment\");\r\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n            connection.setRequestMethod(\"POST\");\r\n",
                        "nextNode": "url"
                    },
                    {
                        "name": "url",
                        "type": "Dataflow from `new URL(...)` to `url`\nDataflow from `\"https://bankingAmerica.com/submitPayment\"` to `url`",
                        "context": "\r\n            URL url = new URL(\"https://bankingAmerica.com/submitPayment\");\r\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n            connection.setRequestMethod(\"POST\");\r\n            connection.setDoOutput(true);  // Necessary for POST\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "expiryDate",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "data",
                        "type": "String",
                        "context": "        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, paymentKey);\r\n        byte[] encrypted = cipher.doFinal(data.getBytes());\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n    }\r\n",
                        "nextNode": "data.getBytes()"
                    },
                    {
                        "name": "data.getBytes()",
                        "type": "byte[]",
                        "context": "        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, paymentKey);\r\n        byte[] encrypted = cipher.doFinal(data.getBytes());\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n    }\r\n",
                        "nextNode": "cipher.doFinal(data.getBytes()"
                    },
                    {
                        "name": "cipher.doFinal(data.getBytes()",
                        "type": "byte[]",
                        "context": "        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, paymentKey);\r\n        byte[] encrypted = cipher.doFinal(data.getBytes());\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n    }\r\n",
                        "nextNode": "encrypted"
                    },
                    {
                        "name": "encrypted",
                        "type": "byte[]",
                        "context": "        cipher.init(Cipher.ENCRYPT_MODE, paymentKey);\r\n        byte[] encrypted = cipher.doFinal(data.getBytes());\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n    }\r\n\r\n",
                        "nextNode": "Base64.getEncoder().encodeToString(encrypted)"
                    },
                    {
                        "name": "Base64.getEncoder().encodeToString(encrypted)",
                        "type": "String",
                        "context": "        cipher.init(Cipher.ENCRYPT_MODE, paymentKey);\r\n        byte[] encrypted = cipher.doFinal(data.getBytes());\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n    }\r\n\r\n",
                        "nextNode": "encrypt(expiryDate)"
                    },
                    {
                        "name": "encrypt(expiryDate)",
                        "type": "String",
                        "context": "        try {\r\n            cardNumber = encrypt(cardNumber);\r\n            expiryDate = encrypt(expiryDate);\r\n            cvv = encrypt(cvv);\r\n\r\n",
                        "nextNode": "expiryDate"
                    },
                    {
                        "name": "String expiryDate",
                        "type": "String",
                        "context": "    }\r\n\r\n    public static void submitCreditCard(String cardNumber, String expiryDate, String cvv) {\r\n        try {\r\n            cardNumber = encrypt(cardNumber);\r\n",
                        "nextNode": "expiryDate"
                    },
                    {
                        "name": "expiryDate",
                        "type": "Dataflow from `data` to `expiryDate`\nDataflow from `encrypted` to `expiryDate`\nDataflow from `doFinal(...)` to `expiryDate`\nDataflow from `getBytes(...)` to `expiryDate`\nDataflow from `encodeToString(...)` to `expiryDate`\nDataflow from `encrypt(...)` to `expiryDate`\nDataflow from `\"12/23\"` to `expiryDate`",
                        "context": "            // Constructing the data to be sent\r\n            String urlParameters = \"cardNumber=\" + URLEncoder.encode(cardNumber, \"UTF-8\") +\r\n                                   \"&expiryDate=\" + URLEncoder.encode(expiryDate, \"UTF-8\") +\r\n                                   \"&cvv=\" + URLEncoder.encode(cvv, \"UTF-8\");\r\n\r\n |         try {\r\n            cardNumber = encrypt(cardNumber);\r\n            expiryDate = encrypt(expiryDate);\r\n            cvv = encrypt(cvv);\r\n\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "args",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "encrypted",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "data",
                        "type": "String",
                        "context": "        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, paymentKey);\r\n        byte[] encrypted = cipher.doFinal(data.getBytes());\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n    }\r\n",
                        "nextNode": "data.getBytes()"
                    },
                    {
                        "name": "data.getBytes()",
                        "type": "byte[]",
                        "context": "        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, paymentKey);\r\n        byte[] encrypted = cipher.doFinal(data.getBytes());\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n    }\r\n",
                        "nextNode": "cipher.doFinal(data.getBytes()"
                    },
                    {
                        "name": "cipher.doFinal(data.getBytes()",
                        "type": "byte[]",
                        "context": "        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, paymentKey);\r\n        byte[] encrypted = cipher.doFinal(data.getBytes());\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n    }\r\n",
                        "nextNode": "encrypted"
                    },
                    {
                        "name": "encrypted",
                        "type": "Dataflow from `data` to `encrypted`\nDataflow from `doFinal(...)` to `encrypted`\nDataflow from `getBytes(...)` to `encrypted`\nDataflow from `cardNumber` to `encrypted`\nDataflow from `expiryDate` to `encrypted`\nDataflow from `cvv` to `encrypted`\nDataflow from `\"1234567890123456\"` to `encrypted`\nDataflow from `\"12/23\"` to `encrypted`\nDataflow from `\"123\"` to `encrypted`",
                        "context": "        cipher.init(Cipher.ENCRYPT_MODE, paymentKey);\r\n        byte[] encrypted = cipher.doFinal(data.getBytes());\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n    }\r\n\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "connection",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "url.openConnection()",
                        "type": "URLConnection",
                        "context": "\r\n            URL url = new URL(\"https://bankingAmerica.com/submitPayment\");\r\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n            connection.setRequestMethod(\"POST\");\r\n            connection.setDoOutput(true);  // Necessary for POST\r\n | \r\n            URL url = new URL(\"https://bankingAmerica.com/submitPayment\");\r\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n            connection.setRequestMethod(\"POST\");\r\n            connection.setDoOutput(true);  // Necessary for POST\r\n | \r\n            URL url = new URL(\"https://bankingAmerica.com/submitPayment\");\r\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n            connection.setRequestMethod(\"POST\");\r\n            connection.setDoOutput(true);  // Necessary for POST\r\n | \r\n            URL url = new URL(\"https://bankingAmerica.com/submitPayment\");\r\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n            connection.setRequestMethod(\"POST\");\r\n            connection.setDoOutput(true);  // Necessary for POST\r\n",
                        "nextNode": "(HttpURLConnection) url.openConnection()"
                    },
                    {
                        "name": "(HttpURLConnection) url.openConnection()",
                        "type": "HttpURLConnection",
                        "context": "\r\n            URL url = new URL(\"https://bankingAmerica.com/submitPayment\");\r\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n            connection.setRequestMethod(\"POST\");\r\n            connection.setDoOutput(true);  // Necessary for POST\r\n | \r\n            URL url = new URL(\"https://bankingAmerica.com/submitPayment\");\r\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n            connection.setRequestMethod(\"POST\");\r\n            connection.setDoOutput(true);  // Necessary for POST\r\n | \r\n            URL url = new URL(\"https://bankingAmerica.com/submitPayment\");\r\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n            connection.setRequestMethod(\"POST\");\r\n            connection.setDoOutput(true);  // Necessary for POST\r\n | \r\n            URL url = new URL(\"https://bankingAmerica.com/submitPayment\");\r\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n            connection.setRequestMethod(\"POST\");\r\n            connection.setDoOutput(true);  // Necessary for POST\r\n",
                        "nextNode": "connection"
                    },
                    {
                        "name": "connection",
                        "type": "Dataflow from `openConnection(...)` to `connection`",
                        "context": "            URL url = new URL(\"https://bankingAmerica.com/submitPayment\");\r\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n            connection.setRequestMethod(\"POST\");\r\n            connection.setDoOutput(true);  // Necessary for POST\r\n            connection.setRequestProperty(\"Content-Type\", \"application/x-www-form-urlencoded\");\r\n |             URL url = new URL(\"https://bankingAmerica.com/submitPayment\");\r\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n            connection.setRequestMethod(\"POST\");\r\n            connection.setDoOutput(true);  // Necessary for POST\r\n            connection.setRequestProperty(\"Content-Type\", \"application/x-www-form-urlencoded\");\r\n |             HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n            connection.setRequestMethod(\"POST\");\r\n            connection.setDoOutput(true);  // Necessary for POST\r\n            connection.setRequestProperty(\"Content-Type\", \"application/x-www-form-urlencoded\");\r\n\r\n |             URL url = new URL(\"https://bankingAmerica.com/submitPayment\");\r\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n            connection.setRequestMethod(\"POST\");\r\n            connection.setDoOutput(true);  // Necessary for POST\r\n            connection.setRequestProperty(\"Content-Type\", \"application/x-www-form-urlencoded\");\r\n |             HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n            connection.setRequestMethod(\"POST\");\r\n            connection.setDoOutput(true);  // Necessary for POST\r\n            connection.setRequestProperty(\"Content-Type\", \"application/x-www-form-urlencoded\");\r\n\r\n |             connection.setRequestMethod(\"POST\");\r\n            connection.setDoOutput(true);  // Necessary for POST\r\n            connection.setRequestProperty(\"Content-Type\", \"application/x-www-form-urlencoded\");\r\n\r\n            // Constructing the data to be sent\r\n |             URL url = new URL(\"https://bankingAmerica.com/submitPayment\");\r\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n            connection.setRequestMethod(\"POST\");\r\n            connection.setDoOutput(true);  // Necessary for POST\r\n            connection.setRequestProperty(\"Content-Type\", \"application/x-www-form-urlencoded\");\r\n |             HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n            connection.setRequestMethod(\"POST\");\r\n            connection.setDoOutput(true);  // Necessary for POST\r\n            connection.setRequestProperty(\"Content-Type\", \"application/x-www-form-urlencoded\");\r\n\r\n |             connection.setRequestMethod(\"POST\");\r\n            connection.setDoOutput(true);  // Necessary for POST\r\n            connection.setRequestProperty(\"Content-Type\", \"application/x-www-form-urlencoded\");\r\n\r\n            // Constructing the data to be sent\r\n |                                    \"&cvv=\" + URLEncoder.encode(cvv, \"UTF-8\");\r\n\r\n            try (OutputStream os = connection.getOutputStream()) {\r\n                os.write(urlParameters.getBytes());\r\n                os.flush();\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "paymentKey",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "keyGen.generateKey()",
                        "type": "SecretKey",
                        "context": "            KeyGenerator keyGen = KeyGenerator.getInstance(\"AES\");\r\n            keyGen.init(128); // Using AES with 128-bit keys.\r\n            paymentKey = keyGen.generateKey();\r\n        } catch (Exception e) {\r\n            System.err.println(\"Error occurred\");\r\n",
                        "nextNode": "paymentKey"
                    },
                    {
                        "name": "paymentKey",
                        "type": "SecretKey",
                        "context": "public class GOOD_CreditCardSubmissionPOST_Encrypted {\r\n\r\n    private static SecretKey paymentKey;\r\n\r\n    static {\r\n |     public static String encrypt(String data) throws Exception {\r\n        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, paymentKey);\r\n        byte[] encrypted = cipher.doFinal(data.getBytes());\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "urlParameters",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "data",
                        "type": "String",
                        "context": "        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, paymentKey);\r\n        byte[] encrypted = cipher.doFinal(data.getBytes());\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n    }\r\n",
                        "nextNode": "data.getBytes()"
                    },
                    {
                        "name": "data.getBytes()",
                        "type": "byte[]",
                        "context": "        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, paymentKey);\r\n        byte[] encrypted = cipher.doFinal(data.getBytes());\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n    }\r\n",
                        "nextNode": "cipher.doFinal(data.getBytes()"
                    },
                    {
                        "name": "cipher.doFinal(data.getBytes()",
                        "type": "byte[]",
                        "context": "        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, paymentKey);\r\n        byte[] encrypted = cipher.doFinal(data.getBytes());\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n    }\r\n",
                        "nextNode": "encrypted"
                    },
                    {
                        "name": "encrypted",
                        "type": "byte[]",
                        "context": "        cipher.init(Cipher.ENCRYPT_MODE, paymentKey);\r\n        byte[] encrypted = cipher.doFinal(data.getBytes());\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n    }\r\n\r\n",
                        "nextNode": "Base64.getEncoder().encodeToString(encrypted)"
                    },
                    {
                        "name": "Base64.getEncoder().encodeToString(encrypted)",
                        "type": "String",
                        "context": "        cipher.init(Cipher.ENCRYPT_MODE, paymentKey);\r\n        byte[] encrypted = cipher.doFinal(data.getBytes());\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n    }\r\n\r\n",
                        "nextNode": "encrypt(cvv)"
                    },
                    {
                        "name": "encrypt(cvv)",
                        "type": "String",
                        "context": "            cardNumber = encrypt(cardNumber);\r\n            expiryDate = encrypt(expiryDate);\r\n            cvv = encrypt(cvv);\r\n\r\n            URL url = new URL(\"https://bankingAmerica.com/submitPayment\");\r\n",
                        "nextNode": "cvv"
                    },
                    {
                        "name": "cvv",
                        "type": "String",
                        "context": "            String urlParameters = \"cardNumber=\" + URLEncoder.encode(cardNumber, \"UTF-8\") +\r\n                                   \"&expiryDate=\" + URLEncoder.encode(expiryDate, \"UTF-8\") +\r\n                                   \"&cvv=\" + URLEncoder.encode(cvv, \"UTF-8\");\r\n\r\n            try (OutputStream os = connection.getOutputStream()) {\r\n",
                        "nextNode": "URLEncoder.encode(cvv, \"UTF-8\")"
                    },
                    {
                        "name": "URLEncoder.encode(cvv, \"UTF-8\")",
                        "type": "String",
                        "context": "            String urlParameters = \"cardNumber=\" + URLEncoder.encode(cardNumber, \"UTF-8\") +\r\n                                   \"&expiryDate=\" + URLEncoder.encode(expiryDate, \"UTF-8\") +\r\n                                   \"&cvv=\" + URLEncoder.encode(cvv, \"UTF-8\");\r\n\r\n            try (OutputStream os = connection.getOutputStream()) {\r\n",
                        "nextNode": "\"cardNumber=\" + URLEncoder.encode(cardNumb)"
                    },
                    {
                        "name": "\"cardNumber=\" + URLEncoder.encode(cardNumb)",
                        "type": "String",
                        "context": "\r\n            // Constructing the data to be sent\r\n            String urlParameters = \"cardNumber=\" + URLEncoder.encode(cardNumber, \"UTF-8\") +\r\n                                   \"&expiryDate=\" + URLEncoder.encode(expiryDate, \"UTF-8\") +\r\n                                   \"&cvv=\" + URLEncoder.encode(cvv, \"UTF-8\");\r\n\r\n            try (OutputStream os = connection.getOutputStream()) {\r\n",
                        "nextNode": "urlParameters"
                    },
                    {
                        "name": "urlParameters",
                        "type": "Dataflow from `data` to `urlParameters`\nDataflow from `encrypted` to `urlParameters`\nDataflow from `cardNumber` to `urlParameters`\nDataflow from `expiryDate` to `urlParameters`\nDataflow from `cvv` to `urlParameters`\nDataflow from `doFinal(...)` to `urlParameters`\nDataflow from `getBytes(...)` to `urlParameters`\nDataflow from `encodeToString(...)` to `urlParameters`\nDataflow from `encode(...)` to `urlParameters`\nDataflow from `\"&cvv=\"` to `urlParameters`\nDataflow from `encode(...)` to `urlParameters`\nDataflow from `\"&expiryDate=\"` to `urlParameters`\nDataflow from `\"cardNumber=\"` to `urlParameters`\nDataflow from `encode(...)` to `urlParameters`\nDataflow from `encrypt(...)` to `urlParameters`\nDataflow from `cardNumber` to `urlParameters`\nDataflow from `encrypt(...)` to `urlParameters`\nDataflow from `expiryDate` to `urlParameters`\nDataflow from `encrypt(...)` to `urlParameters`\nDataflow from `cvv` to `urlParameters`\nDataflow from `\"1234567890123456\"` to `urlParameters`\nDataflow from `\"12/23\"` to `urlParameters`\nDataflow from `\"123\"` to `urlParameters`\nDataflow from `\"UTF-8\"` to `urlParameters`\nDataflow from `\"UTF-8\"` to `urlParameters`\nDataflow from `\"UTF-8\"` to `urlParameters`",
                        "context": "\r\n            try (OutputStream os = connection.getOutputStream()) {\r\n                os.write(urlParameters.getBytes());\r\n                os.flush();\r\n            }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "cardNumber",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "data",
                        "type": "String",
                        "context": "        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, paymentKey);\r\n        byte[] encrypted = cipher.doFinal(data.getBytes());\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n    }\r\n",
                        "nextNode": "data.getBytes()"
                    },
                    {
                        "name": "data.getBytes()",
                        "type": "byte[]",
                        "context": "        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, paymentKey);\r\n        byte[] encrypted = cipher.doFinal(data.getBytes());\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n    }\r\n",
                        "nextNode": "cipher.doFinal(data.getBytes()"
                    },
                    {
                        "name": "cipher.doFinal(data.getBytes()",
                        "type": "byte[]",
                        "context": "        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, paymentKey);\r\n        byte[] encrypted = cipher.doFinal(data.getBytes());\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n    }\r\n",
                        "nextNode": "encrypted"
                    },
                    {
                        "name": "encrypted",
                        "type": "byte[]",
                        "context": "        cipher.init(Cipher.ENCRYPT_MODE, paymentKey);\r\n        byte[] encrypted = cipher.doFinal(data.getBytes());\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n    }\r\n\r\n",
                        "nextNode": "Base64.getEncoder().encodeToString(encrypted)"
                    },
                    {
                        "name": "Base64.getEncoder().encodeToString(encrypted)",
                        "type": "String",
                        "context": "        cipher.init(Cipher.ENCRYPT_MODE, paymentKey);\r\n        byte[] encrypted = cipher.doFinal(data.getBytes());\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n    }\r\n\r\n",
                        "nextNode": "encrypt(cardNumber)"
                    },
                    {
                        "name": "encrypt(cardNumber)",
                        "type": "String",
                        "context": "    public static void submitCreditCard(String cardNumber, String expiryDate, String cvv) {\r\n        try {\r\n            cardNumber = encrypt(cardNumber);\r\n            expiryDate = encrypt(expiryDate);\r\n            cvv = encrypt(cvv);\r\n",
                        "nextNode": "cardNumber"
                    },
                    {
                        "name": "String cardNumber",
                        "type": "String",
                        "context": "    }\r\n\r\n    public static void submitCreditCard(String cardNumber, String expiryDate, String cvv) {\r\n        try {\r\n            cardNumber = encrypt(cardNumber);\r\n",
                        "nextNode": "cardNumber"
                    },
                    {
                        "name": "cardNumber",
                        "type": "Dataflow from `data` to `cardNumber`\nDataflow from `encrypted` to `cardNumber`\nDataflow from `doFinal(...)` to `cardNumber`\nDataflow from `getBytes(...)` to `cardNumber`\nDataflow from `encodeToString(...)` to `cardNumber`\nDataflow from `encrypt(...)` to `cardNumber`\nDataflow from `\"1234567890123456\"` to `cardNumber`",
                        "context": "\r\n            // Constructing the data to be sent\r\n            String urlParameters = \"cardNumber=\" + URLEncoder.encode(cardNumber, \"UTF-8\") +\r\n                                   \"&expiryDate=\" + URLEncoder.encode(expiryDate, \"UTF-8\") +\r\n                                   \"&cvv=\" + URLEncoder.encode(cvv, \"UTF-8\");\r\n |     public static void submitCreditCard(String cardNumber, String expiryDate, String cvv) {\r\n        try {\r\n            cardNumber = encrypt(cardNumber);\r\n            expiryDate = encrypt(expiryDate);\r\n            cvv = encrypt(cvv);\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "POST",
                "isSensitive": "no"
            },
            {
                "name": "1234567890123456",
                "isSensitive": "yes"
            },
            {
                "name": "&cvv=",
                "isSensitive": "no"
            },
            {
                "name": "12/23",
                "isSensitive": "yes"
            },
            {
                "name": "UTF-8",
                "isSensitive": "no"
            },
            {
                "name": "&expiryDate=",
                "isSensitive": "no"
            },
            {
                "name": "application/x-www-form-urlencoded",
                "isSensitive": "no"
            },
            {
                "name": "cardNumber=",
                "isSensitive": "no"
            },
            {
                "name": "AES",
                "isSensitive": "yes"
            },
            {
                "name": "123",
                "isSensitive": "yes"
            },
            {
                "name": "Error occurred",
                "isSensitive": "no"
            },
            {
                "name": "https://bankingAmerica.com/submitPayment",
                "isSensitive": "yes"
            },
            {
                "name": "Content-Type",
                "isSensitive": "no"
            }
        ],
        "comments": [
            {
                "name": "Using AES with 128-bit keys.",
                "isSensitive": "yes"
            },
            {
                "name": "Constructing the data to be sent",
                "isSensitive": "no"
            },
            {
                "name": "Necessary for POST",
                "isSensitive": "no"
            }
        ],
        "sinks": [
            {
                "name": "encode",
                "isSink": "no"
            },
            {
                "name": "init",
                "isSink": "no"
            },
            {
                "name": "setRequestMethod",
                "isSink": "yes"
            },
            {
                "name": "submitCreditCard",
                "isSink": "no"
            },
            {
                "name": "openConnection",
                "isSink": "yes"
            },
            {
                "name": "encodeToString",
                "isSink": "no"
            },
            {
                "name": "getBytes",
                "isSink": "no"
            },
            {
                "name": "doFinal",
                "isSink": "no"
            },
            {
                "name": "generateKey",
                "isSink": "no"
            },
            {
                "name": "println",
                "isSink": "yes"
            },
            {
                "name": "flush",
                "isSink": "yes"
            },
            {
                "name": "setRequestProperty",
                "isSink": "yes"
            },
            {
                "name": "encrypt",
                "isSink": "no"
            },
            {
                "name": "getEncoder",
                "isSink": "no"
            },
            {
                "name": "getOutputStream",
                "isSink": "yes"
            },
            {
                "name": "getInstance",
                "isSink": "no"
            },
            {
                "name": "write",
                "isSink": "yes"
            },
            {
                "name": "setDoOutput",
                "isSink": "yes"
            }
        ]
    },
    {
        "fileName": "GOOD_FetchPublicData.java",
        "variables": [
            {
                "name": "args",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "e",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "urlString",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "category",
                        "type": "String",
                        "context": "    public static void submitSportsCategory(String category) {\r\n        try {\r\n            String urlString = \"http://sports.com/stats?sport=\" + category;\r\n                               \r\n            URL url = new URL(urlString);\r\n",
                        "nextNode": "\"http://sports.com/stats?sport=\" + category"
                    },
                    {
                        "name": "\"http://sports.com/stats?sport=\" + category",
                        "type": "String",
                        "context": "    public static void submitSportsCategory(String category) {\r\n        try {\r\n            String urlString = \"http://sports.com/stats?sport=\" + category;\r\n                               \r\n            URL url = new URL(urlString);\r\n",
                        "nextNode": "urlString"
                    },
                    {
                        "name": "urlString",
                        "type": "Dataflow from `category` to `urlString`\nDataflow from `\"http://sports.com/stats?sport=\"` to `urlString`\nDataflow from `\"Football\"` to `urlString`",
                        "context": "            String urlString = \"http://sports.com/stats?sport=\" + category;\r\n                               \r\n            URL url = new URL(urlString);\r\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n            connection.setRequestMethod(\"GET\");\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "connection",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "url.openConnection()",
                        "type": "URLConnection",
                        "context": "                               \r\n            URL url = new URL(urlString);\r\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n            connection.setRequestMethod(\"GET\");\r\n \r\n",
                        "nextNode": "(HttpURLConnection) url.openConnection()"
                    },
                    {
                        "name": "(HttpURLConnection) url.openConnection()",
                        "type": "HttpURLConnection",
                        "context": "                               \r\n            URL url = new URL(urlString);\r\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n            connection.setRequestMethod(\"GET\");\r\n \r\n",
                        "nextNode": "connection"
                    },
                    {
                        "name": "connection",
                        "type": "Dataflow from `openConnection(...)` to `connection`",
                        "context": "            URL url = new URL(urlString);\r\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n            connection.setRequestMethod(\"GET\");\r\n \r\n        } catch (Exception e) {\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "category",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "\"Football\"",
                        "type": "String",
                        "context": "    \r\n    public static void main(String[] args) {\r\n        submitSportsCategory(\"Football\");\r\n    }\r\n}\r\n",
                        "nextNode": "String category"
                    },
                    {
                        "name": "String category",
                        "type": "String",
                        "context": "public class GOOD_FetchPublicData {\r\n    \r\n    public static void submitSportsCategory(String category) {\r\n        try {\r\n            String urlString = \"http://sports.com/stats?sport=\" + category;\r\n",
                        "nextNode": "category"
                    },
                    {
                        "name": "category",
                        "type": "Dataflow from `\"Football\"` to `category`",
                        "context": "    public static void submitSportsCategory(String category) {\r\n        try {\r\n            String urlString = \"http://sports.com/stats?sport=\" + category;\r\n                               \r\n            URL url = new URL(urlString);\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "url",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "category",
                        "type": "String",
                        "context": "    public static void submitSportsCategory(String category) {\r\n        try {\r\n            String urlString = \"http://sports.com/stats?sport=\" + category;\r\n                               \r\n            URL url = new URL(urlString);\r\n",
                        "nextNode": "\"http://sports.com/stats?sport=\" + category"
                    },
                    {
                        "name": "\"http://sports.com/stats?sport=\" + category",
                        "type": "String",
                        "context": "    public static void submitSportsCategory(String category) {\r\n        try {\r\n            String urlString = \"http://sports.com/stats?sport=\" + category;\r\n                               \r\n            URL url = new URL(urlString);\r\n",
                        "nextNode": "urlString"
                    },
                    {
                        "name": "urlString",
                        "type": "String",
                        "context": "            String urlString = \"http://sports.com/stats?sport=\" + category;\r\n                               \r\n            URL url = new URL(urlString);\r\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n            connection.setRequestMethod(\"GET\");\r\n",
                        "nextNode": "new URL(urlString)"
                    },
                    {
                        "name": "new URL(urlString)",
                        "type": "URL",
                        "context": "            String urlString = \"http://sports.com/stats?sport=\" + category;\r\n                               \r\n            URL url = new URL(urlString);\r\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n            connection.setRequestMethod(\"GET\");\r\n",
                        "nextNode": "url"
                    },
                    {
                        "name": "url",
                        "type": "Dataflow from `category` to `url`\nDataflow from `urlString` to `url`\nDataflow from `new URL(...)` to `url`\nDataflow from `\"http://sports.com/stats?sport=\"` to `url`\nDataflow from `\"Football\"` to `url`",
                        "context": "                               \r\n            URL url = new URL(urlString);\r\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n            connection.setRequestMethod(\"GET\");\r\n \r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "http://sports.com/stats?sport=",
                "isSensitive": "no"
            },
            {
                "name": "GET",
                "isSensitive": "no"
            },
            {
                "name": "Error occurred while fetching sports data.",
                "isSensitive": "no"
            },
            {
                "name": "Football",
                "isSensitive": "no"
            }
        ],
        "comments": [],
        "sinks": [
            {
                "name": "println",
                "isSink": "yes"
            },
            {
                "name": "setRequestMethod",
                "isSink": "yes"
            },
            {
                "name": "openConnection",
                "isSink": "yes"
            },
            {
                "name": "submitSportsCategory",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "GOOD_FetchWeatherData.java",
        "variables": [
            {
                "name": "args",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "e",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "city",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "\"Honolulu\"",
                        "type": "String",
                        "context": "    \r\n    public static void main(String[] args) {\r\n        submitSportsCategory(\"Honolulu\");\r\n    }\r\n}\r\n",
                        "nextNode": "String city"
                    },
                    {
                        "name": "String city",
                        "type": "String",
                        "context": "public class GOOD_FetchWeatherData {\r\n    \r\n    public static void submitSportsCategory(String city) {\r\n        try {\r\n            String urlString = \"http://weather.com/getWeather?city=\" + city;\r\n",
                        "nextNode": "city"
                    },
                    {
                        "name": "city",
                        "type": "Dataflow from `\"Honolulu\"` to `city`",
                        "context": "    public static void submitSportsCategory(String city) {\r\n        try {\r\n            String urlString = \"http://weather.com/getWeather?city=\" + city;\r\n                               \r\n            URL url = new URL(urlString);\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "urlString",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "city",
                        "type": "String",
                        "context": "    public static void submitSportsCategory(String city) {\r\n        try {\r\n            String urlString = \"http://weather.com/getWeather?city=\" + city;\r\n                               \r\n            URL url = new URL(urlString);\r\n",
                        "nextNode": "\"http://weather.com/getWeather?city=\" + city"
                    },
                    {
                        "name": "\"http://weather.com/getWeather?city=\" + city",
                        "type": "String",
                        "context": "    public static void submitSportsCategory(String city) {\r\n        try {\r\n            String urlString = \"http://weather.com/getWeather?city=\" + city;\r\n                               \r\n            URL url = new URL(urlString);\r\n",
                        "nextNode": "urlString"
                    },
                    {
                        "name": "urlString",
                        "type": "Dataflow from `city` to `urlString`\nDataflow from `\"http://weather.com/getWeather?city=\"` to `urlString`\nDataflow from `\"Honolulu\"` to `urlString`",
                        "context": "            String urlString = \"http://weather.com/getWeather?city=\" + city;\r\n                               \r\n            URL url = new URL(urlString);\r\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n            connection.setRequestMethod(\"GET\");\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "connection",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "url.openConnection()",
                        "type": "URLConnection",
                        "context": "                               \r\n            URL url = new URL(urlString);\r\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n            connection.setRequestMethod(\"GET\");\r\n            \r\n",
                        "nextNode": "(HttpURLConnection) url.openConnection()"
                    },
                    {
                        "name": "(HttpURLConnection) url.openConnection()",
                        "type": "HttpURLConnection",
                        "context": "                               \r\n            URL url = new URL(urlString);\r\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n            connection.setRequestMethod(\"GET\");\r\n            \r\n",
                        "nextNode": "connection"
                    },
                    {
                        "name": "connection",
                        "type": "Dataflow from `openConnection(...)` to `connection`",
                        "context": "            URL url = new URL(urlString);\r\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n            connection.setRequestMethod(\"GET\");\r\n            \r\n        } catch (Exception e) {\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "url",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "city",
                        "type": "String",
                        "context": "    public static void submitSportsCategory(String city) {\r\n        try {\r\n            String urlString = \"http://weather.com/getWeather?city=\" + city;\r\n                               \r\n            URL url = new URL(urlString);\r\n",
                        "nextNode": "\"http://weather.com/getWeather?city=\" + city"
                    },
                    {
                        "name": "\"http://weather.com/getWeather?city=\" + city",
                        "type": "String",
                        "context": "    public static void submitSportsCategory(String city) {\r\n        try {\r\n            String urlString = \"http://weather.com/getWeather?city=\" + city;\r\n                               \r\n            URL url = new URL(urlString);\r\n",
                        "nextNode": "urlString"
                    },
                    {
                        "name": "urlString",
                        "type": "String",
                        "context": "            String urlString = \"http://weather.com/getWeather?city=\" + city;\r\n                               \r\n            URL url = new URL(urlString);\r\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n            connection.setRequestMethod(\"GET\");\r\n",
                        "nextNode": "new URL(urlString)"
                    },
                    {
                        "name": "new URL(urlString)",
                        "type": "URL",
                        "context": "            String urlString = \"http://weather.com/getWeather?city=\" + city;\r\n                               \r\n            URL url = new URL(urlString);\r\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n            connection.setRequestMethod(\"GET\");\r\n",
                        "nextNode": "url"
                    },
                    {
                        "name": "url",
                        "type": "Dataflow from `city` to `url`\nDataflow from `urlString` to `url`\nDataflow from `new URL(...)` to `url`\nDataflow from `\"http://weather.com/getWeather?city=\"` to `url`\nDataflow from `\"Honolulu\"` to `url`",
                        "context": "                               \r\n            URL url = new URL(urlString);\r\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n            connection.setRequestMethod(\"GET\");\r\n            \r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "http://weather.com/getWeather?city=",
                "isSensitive": "no"
            },
            {
                "name": "Honolulu",
                "isSensitive": "no"
            },
            {
                "name": "GET",
                "isSensitive": "no"
            },
            {
                "name": "Error occurred while fetching weather data.",
                "isSensitive": "no"
            }
        ],
        "comments": [],
        "sinks": [
            {
                "name": "println",
                "isSink": "yes"
            },
            {
                "name": "setRequestMethod",
                "isSink": "yes"
            },
            {
                "name": "openConnection",
                "isSink": "yes"
            },
            {
                "name": "submitSportsCategory",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "GOOD_HealthInfoSubmissionPOST.java",
        "variables": [
            {
                "name": "cipher",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "Cipher.getInstance(\"AES\")",
                        "type": "Cipher",
                        "context": "\r\n    public static String encrypt(String data) throws Exception {\r\n        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, patientKey);\r\n        byte[] encrypted = cipher.doFinal(data.getBytes());\r\n | \r\n    public static String encrypt(String data) throws Exception {\r\n        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, patientKey);\r\n        byte[] encrypted = cipher.doFinal(data.getBytes());\r\n",
                        "nextNode": "cipher"
                    },
                    {
                        "name": "cipher",
                        "type": "Cipher",
                        "context": "    public static String encrypt(String data) throws Exception {\r\n        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, patientKey);\r\n        byte[] encrypted = cipher.doFinal(data.getBytes());\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n |         Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, patientKey);\r\n        byte[] encrypted = cipher.doFinal(data.getBytes());\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n    }\r\n |     public static String encrypt(String data) throws Exception {\r\n        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, patientKey);\r\n        byte[] encrypted = cipher.doFinal(data.getBytes());\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "data",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "patientId",
                        "type": "String",
                        "context": "        try {\r\n            // Encrypt and URL encode the parameters\r\n            patientId = URLEncoder.encode(encrypt(patientId), StandardCharsets.UTF_8.toString());\r\n            symptoms = URLEncoder.encode(encrypt(symptoms), StandardCharsets.UTF_8.toString());\r\n            doctorId = URLEncoder.encode(encrypt(doctorId), StandardCharsets.UTF_8.toString());\r\n",
                        "nextNode": "String data"
                    },
                    {
                        "name": "String data",
                        "type": "String",
                        "context": "    }\r\n\r\n    public static String encrypt(String data) throws Exception {\r\n        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, patientKey);\r\n",
                        "nextNode": "data"
                    },
                    {
                        "name": "data",
                        "type": "Dataflow from `patientId` to `data`\nDataflow from `symptoms` to `data`\nDataflow from `doctorId` to `data`\nDataflow from `\"12345\"` to `data`\nDataflow from `\"Fever, cough, and shortness of breath\"` to `data`\nDataflow from `\"DrJohnDoe\"` to `data`",
                        "context": "        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, patientKey);\r\n        byte[] encrypted = cipher.doFinal(data.getBytes());\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n    }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "os",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "connection.getOutputStream()",
                        "type": "OutputStream",
                        "context": "            String postData = \"patientId=\" + patientId + \"&symptoms=\" + symptoms + \"&doctorId=\" + doctorId;\r\n            \r\n            try (OutputStream os = connection.getOutputStream()) {\r\n                os.write(postData.getBytes());\r\n                os.flush();\r\n",
                        "nextNode": "os"
                    },
                    {
                        "name": "postData.getBytes()",
                        "type": "byte[]",
                        "context": "            \r\n            try (OutputStream os = connection.getOutputStream()) {\r\n                os.write(postData.getBytes());\r\n                os.flush();\r\n            }\r\n",
                        "nextNode": "os"
                    },
                    {
                        "name": "os",
                        "type": "Dataflow from `getOutputStream(...)` to `os`",
                        "context": "            \r\n            try (OutputStream os = connection.getOutputStream()) {\r\n                os.write(postData.getBytes());\r\n                os.flush();\r\n            }\r\n |             \r\n            try (OutputStream os = connection.getOutputStream()) {\r\n                os.write(postData.getBytes());\r\n                os.flush();\r\n            }\r\n |             try (OutputStream os = connection.getOutputStream()) {\r\n                os.write(postData.getBytes());\r\n                os.flush();\r\n            }\r\n\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "e",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "patientId",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "data",
                        "type": "String",
                        "context": "        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, patientKey);\r\n        byte[] encrypted = cipher.doFinal(data.getBytes());\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n    }\r\n",
                        "nextNode": "data.getBytes()"
                    },
                    {
                        "name": "data.getBytes()",
                        "type": "byte[]",
                        "context": "        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, patientKey);\r\n        byte[] encrypted = cipher.doFinal(data.getBytes());\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n    }\r\n",
                        "nextNode": "cipher.doFinal(data.getBytes()"
                    },
                    {
                        "name": "cipher.doFinal(data.getBytes()",
                        "type": "byte[]",
                        "context": "        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, patientKey);\r\n        byte[] encrypted = cipher.doFinal(data.getBytes());\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n    }\r\n",
                        "nextNode": "encrypted"
                    },
                    {
                        "name": "encrypted",
                        "type": "byte[]",
                        "context": "        cipher.init(Cipher.ENCRYPT_MODE, patientKey);\r\n        byte[] encrypted = cipher.doFinal(data.getBytes());\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n    }\r\n\r\n",
                        "nextNode": "Base64.getEncoder().encodeToString(encrypted)"
                    },
                    {
                        "name": "Base64.getEncoder().encodeToString(encrypted)",
                        "type": "String",
                        "context": "        cipher.init(Cipher.ENCRYPT_MODE, patientKey);\r\n        byte[] encrypted = cipher.doFinal(data.getBytes());\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n    }\r\n\r\n",
                        "nextNode": "encrypt(patientId)"
                    },
                    {
                        "name": "encrypt(patientId)",
                        "type": "String",
                        "context": "        try {\r\n            // Encrypt and URL encode the parameters\r\n            patientId = URLEncoder.encode(encrypt(patientId), StandardCharsets.UTF_8.toString());\r\n            symptoms = URLEncoder.encode(encrypt(symptoms), StandardCharsets.UTF_8.toString());\r\n            doctorId = URLEncoder.encode(encrypt(doctorId), StandardCharsets.UTF_8.toString());\r\n",
                        "nextNode": "URLEncoder.encode(encrypt(patientId), StandardCharsets.UTF_8.toString()"
                    },
                    {
                        "name": "URLEncoder.encode(encrypt(patientId), StandardCharsets.UTF_8.toString()",
                        "type": "String",
                        "context": "        try {\r\n            // Encrypt and URL encode the parameters\r\n            patientId = URLEncoder.encode(encrypt(patientId), StandardCharsets.UTF_8.toString());\r\n            symptoms = URLEncoder.encode(encrypt(symptoms), StandardCharsets.UTF_8.toString());\r\n            doctorId = URLEncoder.encode(encrypt(doctorId), StandardCharsets.UTF_8.toString());\r\n",
                        "nextNode": "patientId"
                    },
                    {
                        "name": "String patientId",
                        "type": "String",
                        "context": "    }\r\n\r\n    public static void bookMedicalAppointment(String patientId, String symptoms, String doctorId) {\r\n        HttpURLConnection connection = null;\r\n        try {\r\n",
                        "nextNode": "patientId"
                    },
                    {
                        "name": "patientId",
                        "type": "Dataflow from `data` to `patientId`\nDataflow from `encrypted` to `patientId`\nDataflow from `doFinal(...)` to `patientId`\nDataflow from `getBytes(...)` to `patientId`\nDataflow from `encodeToString(...)` to `patientId`\nDataflow from `encode(...)` to `patientId`\nDataflow from `toString(...)` to `patientId`\nDataflow from `\"12345\"` to `patientId`\nDataflow from `encrypt(...)` to `patientId`",
                        "context": "\r\n            // Construct the data to be sent in the POST body\r\n            String postData = \"patientId=\" + patientId + \"&symptoms=\" + symptoms + \"&doctorId=\" + doctorId;\r\n            \r\n            try (OutputStream os = connection.getOutputStream()) {\r\n |         try {\r\n            // Encrypt and URL encode the parameters\r\n            patientId = URLEncoder.encode(encrypt(patientId), StandardCharsets.UTF_8.toString());\r\n            symptoms = URLEncoder.encode(encrypt(symptoms), StandardCharsets.UTF_8.toString());\r\n            doctorId = URLEncoder.encode(encrypt(doctorId), StandardCharsets.UTF_8.toString());\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "keyGen",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "KeyGenerator.getInstance(\"AES\")",
                        "type": "KeyGenerator",
                        "context": "    static {\r\n        try {\r\n            KeyGenerator keyGen = KeyGenerator.getInstance(\"AES\");\r\n            keyGen.init(128); // Using AES with 128-bit keys.\r\n            patientKey = keyGen.generateKey();\r\n |     static {\r\n        try {\r\n            KeyGenerator keyGen = KeyGenerator.getInstance(\"AES\");\r\n            keyGen.init(128); // Using AES with 128-bit keys.\r\n            patientKey = keyGen.generateKey();\r\n",
                        "nextNode": "keyGen"
                    },
                    {
                        "name": "keyGen",
                        "type": "Dataflow from `getInstance(...)` to `keyGen`\nDataflow from `\"AES\"` to `keyGen`",
                        "context": "        try {\r\n            KeyGenerator keyGen = KeyGenerator.getInstance(\"AES\");\r\n            keyGen.init(128); // Using AES with 128-bit keys.\r\n            patientKey = keyGen.generateKey();\r\n        } catch (Exception e) {\r\n |         try {\r\n            KeyGenerator keyGen = KeyGenerator.getInstance(\"AES\");\r\n            keyGen.init(128); // Using AES with 128-bit keys.\r\n            patientKey = keyGen.generateKey();\r\n        } catch (Exception e) {\r\n |             KeyGenerator keyGen = KeyGenerator.getInstance(\"AES\");\r\n            keyGen.init(128); // Using AES with 128-bit keys.\r\n            patientKey = keyGen.generateKey();\r\n        } catch (Exception e) {\r\n            System.err.println(\"Error occurred\");\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "url",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "new URL(\"https://healthcare.example.com/bookAppointment\")",
                        "type": "URL",
                        "context": "            doctorId = URLEncoder.encode(encrypt(doctorId), StandardCharsets.UTF_8.toString());\r\n\r\n            URL url = new URL(\"https://healthcare.example.com/bookAppointment\");\r\n            connection = (HttpURLConnection) url.openConnection();\r\n            connection.setRequestMethod(\"POST\");\r\n",
                        "nextNode": "url"
                    },
                    {
                        "name": "url",
                        "type": "Dataflow from `new URL(...)` to `url`\nDataflow from `\"https://healthcare.example.com/bookAppointment\"` to `url`",
                        "context": "\r\n            URL url = new URL(\"https://healthcare.example.com/bookAppointment\");\r\n            connection = (HttpURLConnection) url.openConnection();\r\n            connection.setRequestMethod(\"POST\");\r\n            connection.setDoOutput(true); // To send request content\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "symptoms",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "data",
                        "type": "String",
                        "context": "        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, patientKey);\r\n        byte[] encrypted = cipher.doFinal(data.getBytes());\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n    }\r\n",
                        "nextNode": "data.getBytes()"
                    },
                    {
                        "name": "data.getBytes()",
                        "type": "byte[]",
                        "context": "        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, patientKey);\r\n        byte[] encrypted = cipher.doFinal(data.getBytes());\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n    }\r\n",
                        "nextNode": "cipher.doFinal(data.getBytes()"
                    },
                    {
                        "name": "cipher.doFinal(data.getBytes()",
                        "type": "byte[]",
                        "context": "        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, patientKey);\r\n        byte[] encrypted = cipher.doFinal(data.getBytes());\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n    }\r\n",
                        "nextNode": "encrypted"
                    },
                    {
                        "name": "encrypted",
                        "type": "byte[]",
                        "context": "        cipher.init(Cipher.ENCRYPT_MODE, patientKey);\r\n        byte[] encrypted = cipher.doFinal(data.getBytes());\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n    }\r\n\r\n",
                        "nextNode": "Base64.getEncoder().encodeToString(encrypted)"
                    },
                    {
                        "name": "Base64.getEncoder().encodeToString(encrypted)",
                        "type": "String",
                        "context": "        cipher.init(Cipher.ENCRYPT_MODE, patientKey);\r\n        byte[] encrypted = cipher.doFinal(data.getBytes());\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n    }\r\n\r\n",
                        "nextNode": "encrypt(symptoms)"
                    },
                    {
                        "name": "encrypt(symptoms)",
                        "type": "String",
                        "context": "            // Encrypt and URL encode the parameters\r\n            patientId = URLEncoder.encode(encrypt(patientId), StandardCharsets.UTF_8.toString());\r\n            symptoms = URLEncoder.encode(encrypt(symptoms), StandardCharsets.UTF_8.toString());\r\n            doctorId = URLEncoder.encode(encrypt(doctorId), StandardCharsets.UTF_8.toString());\r\n\r\n",
                        "nextNode": "URLEncoder.encode(encrypt(symptoms), StandardCharsets.UTF_8.toString()"
                    },
                    {
                        "name": "URLEncoder.encode(encrypt(symptoms), StandardCharsets.UTF_8.toString()",
                        "type": "String",
                        "context": "            // Encrypt and URL encode the parameters\r\n            patientId = URLEncoder.encode(encrypt(patientId), StandardCharsets.UTF_8.toString());\r\n            symptoms = URLEncoder.encode(encrypt(symptoms), StandardCharsets.UTF_8.toString());\r\n            doctorId = URLEncoder.encode(encrypt(doctorId), StandardCharsets.UTF_8.toString());\r\n\r\n",
                        "nextNode": "symptoms"
                    },
                    {
                        "name": "String symptoms",
                        "type": "String",
                        "context": "    }\r\n\r\n    public static void bookMedicalAppointment(String patientId, String symptoms, String doctorId) {\r\n        HttpURLConnection connection = null;\r\n        try {\r\n",
                        "nextNode": "symptoms"
                    },
                    {
                        "name": "symptoms",
                        "type": "Dataflow from `data` to `symptoms`\nDataflow from `encrypted` to `symptoms`\nDataflow from `doFinal(...)` to `symptoms`\nDataflow from `getBytes(...)` to `symptoms`\nDataflow from `encodeToString(...)` to `symptoms`\nDataflow from `encode(...)` to `symptoms`\nDataflow from `toString(...)` to `symptoms`\nDataflow from `\"Fever, cough, and shortness of breath\"` to `symptoms`\nDataflow from `encrypt(...)` to `symptoms`",
                        "context": "\r\n            // Construct the data to be sent in the POST body\r\n            String postData = \"patientId=\" + patientId + \"&symptoms=\" + symptoms + \"&doctorId=\" + doctorId;\r\n            \r\n            try (OutputStream os = connection.getOutputStream()) {\r\n |             // Encrypt and URL encode the parameters\r\n            patientId = URLEncoder.encode(encrypt(patientId), StandardCharsets.UTF_8.toString());\r\n            symptoms = URLEncoder.encode(encrypt(symptoms), StandardCharsets.UTF_8.toString());\r\n            doctorId = URLEncoder.encode(encrypt(doctorId), StandardCharsets.UTF_8.toString());\r\n\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "args",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "encrypted",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "data",
                        "type": "String",
                        "context": "        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, patientKey);\r\n        byte[] encrypted = cipher.doFinal(data.getBytes());\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n    }\r\n",
                        "nextNode": "data.getBytes()"
                    },
                    {
                        "name": "data.getBytes()",
                        "type": "byte[]",
                        "context": "        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, patientKey);\r\n        byte[] encrypted = cipher.doFinal(data.getBytes());\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n    }\r\n",
                        "nextNode": "cipher.doFinal(data.getBytes()"
                    },
                    {
                        "name": "cipher.doFinal(data.getBytes()",
                        "type": "byte[]",
                        "context": "        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, patientKey);\r\n        byte[] encrypted = cipher.doFinal(data.getBytes());\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n    }\r\n",
                        "nextNode": "encrypted"
                    },
                    {
                        "name": "encrypted",
                        "type": "Dataflow from `data` to `encrypted`\nDataflow from `doFinal(...)` to `encrypted`\nDataflow from `getBytes(...)` to `encrypted`\nDataflow from `patientId` to `encrypted`\nDataflow from `symptoms` to `encrypted`\nDataflow from `doctorId` to `encrypted`\nDataflow from `\"12345\"` to `encrypted`\nDataflow from `\"Fever, cough, and shortness of breath\"` to `encrypted`\nDataflow from `\"DrJohnDoe\"` to `encrypted`",
                        "context": "        cipher.init(Cipher.ENCRYPT_MODE, patientKey);\r\n        byte[] encrypted = cipher.doFinal(data.getBytes());\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n    }\r\n\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "doctorId",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "data",
                        "type": "String",
                        "context": "        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, patientKey);\r\n        byte[] encrypted = cipher.doFinal(data.getBytes());\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n    }\r\n",
                        "nextNode": "data.getBytes()"
                    },
                    {
                        "name": "data.getBytes()",
                        "type": "byte[]",
                        "context": "        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, patientKey);\r\n        byte[] encrypted = cipher.doFinal(data.getBytes());\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n    }\r\n",
                        "nextNode": "cipher.doFinal(data.getBytes()"
                    },
                    {
                        "name": "cipher.doFinal(data.getBytes()",
                        "type": "byte[]",
                        "context": "        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, patientKey);\r\n        byte[] encrypted = cipher.doFinal(data.getBytes());\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n    }\r\n",
                        "nextNode": "encrypted"
                    },
                    {
                        "name": "encrypted",
                        "type": "byte[]",
                        "context": "        cipher.init(Cipher.ENCRYPT_MODE, patientKey);\r\n        byte[] encrypted = cipher.doFinal(data.getBytes());\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n    }\r\n\r\n",
                        "nextNode": "Base64.getEncoder().encodeToString(encrypted)"
                    },
                    {
                        "name": "Base64.getEncoder().encodeToString(encrypted)",
                        "type": "String",
                        "context": "        cipher.init(Cipher.ENCRYPT_MODE, patientKey);\r\n        byte[] encrypted = cipher.doFinal(data.getBytes());\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n    }\r\n\r\n",
                        "nextNode": "encrypt(doctorId)"
                    },
                    {
                        "name": "encrypt(doctorId)",
                        "type": "String",
                        "context": "            patientId = URLEncoder.encode(encrypt(patientId), StandardCharsets.UTF_8.toString());\r\n            symptoms = URLEncoder.encode(encrypt(symptoms), StandardCharsets.UTF_8.toString());\r\n            doctorId = URLEncoder.encode(encrypt(doctorId), StandardCharsets.UTF_8.toString());\r\n\r\n            URL url = new URL(\"https://healthcare.example.com/bookAppointment\");\r\n",
                        "nextNode": "URLEncoder.encode(encrypt(doctorId), StandardCharsets.UTF_8.toString()"
                    },
                    {
                        "name": "URLEncoder.encode(encrypt(doctorId), StandardCharsets.UTF_8.toString()",
                        "type": "String",
                        "context": "            patientId = URLEncoder.encode(encrypt(patientId), StandardCharsets.UTF_8.toString());\r\n            symptoms = URLEncoder.encode(encrypt(symptoms), StandardCharsets.UTF_8.toString());\r\n            doctorId = URLEncoder.encode(encrypt(doctorId), StandardCharsets.UTF_8.toString());\r\n\r\n            URL url = new URL(\"https://healthcare.example.com/bookAppointment\");\r\n",
                        "nextNode": "doctorId"
                    },
                    {
                        "name": "String doctorId",
                        "type": "String",
                        "context": "    }\r\n\r\n    public static void bookMedicalAppointment(String patientId, String symptoms, String doctorId) {\r\n        HttpURLConnection connection = null;\r\n        try {\r\n",
                        "nextNode": "doctorId"
                    },
                    {
                        "name": "doctorId",
                        "type": "Dataflow from `data` to `doctorId`\nDataflow from `encrypted` to `doctorId`\nDataflow from `doFinal(...)` to `doctorId`\nDataflow from `getBytes(...)` to `doctorId`\nDataflow from `encodeToString(...)` to `doctorId`\nDataflow from `encode(...)` to `doctorId`\nDataflow from `toString(...)` to `doctorId`\nDataflow from `\"DrJohnDoe\"` to `doctorId`\nDataflow from `encrypt(...)` to `doctorId`",
                        "context": "\r\n            // Construct the data to be sent in the POST body\r\n            String postData = \"patientId=\" + patientId + \"&symptoms=\" + symptoms + \"&doctorId=\" + doctorId;\r\n            \r\n            try (OutputStream os = connection.getOutputStream()) {\r\n |             patientId = URLEncoder.encode(encrypt(patientId), StandardCharsets.UTF_8.toString());\r\n            symptoms = URLEncoder.encode(encrypt(symptoms), StandardCharsets.UTF_8.toString());\r\n            doctorId = URLEncoder.encode(encrypt(doctorId), StandardCharsets.UTF_8.toString());\r\n\r\n            URL url = new URL(\"https://healthcare.example.com/bookAppointment\");\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "patientKey",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "keyGen.generateKey()",
                        "type": "SecretKey",
                        "context": "            KeyGenerator keyGen = KeyGenerator.getInstance(\"AES\");\r\n            keyGen.init(128); // Using AES with 128-bit keys.\r\n            patientKey = keyGen.generateKey();\r\n        } catch (Exception e) {\r\n            System.err.println(\"Error occurred\");\r\n",
                        "nextNode": "patientKey"
                    },
                    {
                        "name": "patientKey",
                        "type": "SecretKey",
                        "context": "\r\npublic class GOOD_HealthInfoSubmissionPOST {\r\n    private static SecretKey patientKey;\r\n\r\n    static {\r\n |     public static String encrypt(String data) throws Exception {\r\n        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, patientKey);\r\n        byte[] encrypted = cipher.doFinal(data.getBytes());\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "connection",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "url.openConnection()",
                        "type": "URLConnection",
                        "context": "\r\n            URL url = new URL(\"https://healthcare.example.com/bookAppointment\");\r\n            connection = (HttpURLConnection) url.openConnection();\r\n            connection.setRequestMethod(\"POST\");\r\n            connection.setDoOutput(true); // To send request content\r\n | \r\n            URL url = new URL(\"https://healthcare.example.com/bookAppointment\");\r\n            connection = (HttpURLConnection) url.openConnection();\r\n            connection.setRequestMethod(\"POST\");\r\n            connection.setDoOutput(true); // To send request content\r\n | \r\n            URL url = new URL(\"https://healthcare.example.com/bookAppointment\");\r\n            connection = (HttpURLConnection) url.openConnection();\r\n            connection.setRequestMethod(\"POST\");\r\n            connection.setDoOutput(true); // To send request content\r\n | \r\n            URL url = new URL(\"https://healthcare.example.com/bookAppointment\");\r\n            connection = (HttpURLConnection) url.openConnection();\r\n            connection.setRequestMethod(\"POST\");\r\n            connection.setDoOutput(true); // To send request content\r\n",
                        "nextNode": "(HttpURLConnection) url.openConnection()"
                    },
                    {
                        "name": "(HttpURLConnection) url.openConnection()",
                        "type": "HttpURLConnection",
                        "context": "\r\n            URL url = new URL(\"https://healthcare.example.com/bookAppointment\");\r\n            connection = (HttpURLConnection) url.openConnection();\r\n            connection.setRequestMethod(\"POST\");\r\n            connection.setDoOutput(true); // To send request content\r\n | \r\n            URL url = new URL(\"https://healthcare.example.com/bookAppointment\");\r\n            connection = (HttpURLConnection) url.openConnection();\r\n            connection.setRequestMethod(\"POST\");\r\n            connection.setDoOutput(true); // To send request content\r\n | \r\n            URL url = new URL(\"https://healthcare.example.com/bookAppointment\");\r\n            connection = (HttpURLConnection) url.openConnection();\r\n            connection.setRequestMethod(\"POST\");\r\n            connection.setDoOutput(true); // To send request content\r\n | \r\n            URL url = new URL(\"https://healthcare.example.com/bookAppointment\");\r\n            connection = (HttpURLConnection) url.openConnection();\r\n            connection.setRequestMethod(\"POST\");\r\n            connection.setDoOutput(true); // To send request content\r\n",
                        "nextNode": "connection"
                    },
                    {
                        "name": "null",
                        "type": "Object",
                        "context": "\r\n    public static void bookMedicalAppointment(String patientId, String symptoms, String doctorId) {\r\n        HttpURLConnection connection = null;\r\n        try {\r\n            // Encrypt and URL encode the parameters\r\n | \r\n    public static void bookMedicalAppointment(String patientId, String symptoms, String doctorId) {\r\n        HttpURLConnection connection = null;\r\n        try {\r\n            // Encrypt and URL encode the parameters\r\n",
                        "nextNode": "connection"
                    },
                    {
                        "name": "connection",
                        "type": "Dataflow from `openConnection(...)` to `connection`",
                        "context": "            URL url = new URL(\"https://healthcare.example.com/bookAppointment\");\r\n            connection = (HttpURLConnection) url.openConnection();\r\n            connection.setRequestMethod(\"POST\");\r\n            connection.setDoOutput(true); // To send request content\r\n            connection.setRequestProperty(\"Content-Type\", \"application/x-www-form-urlencoded\");\r\n |             URL url = new URL(\"https://healthcare.example.com/bookAppointment\");\r\n            connection = (HttpURLConnection) url.openConnection();\r\n            connection.setRequestMethod(\"POST\");\r\n            connection.setDoOutput(true); // To send request content\r\n            connection.setRequestProperty(\"Content-Type\", \"application/x-www-form-urlencoded\");\r\n |             connection = (HttpURLConnection) url.openConnection();\r\n            connection.setRequestMethod(\"POST\");\r\n            connection.setDoOutput(true); // To send request content\r\n            connection.setRequestProperty(\"Content-Type\", \"application/x-www-form-urlencoded\");\r\n\r\n |             URL url = new URL(\"https://healthcare.example.com/bookAppointment\");\r\n            connection = (HttpURLConnection) url.openConnection();\r\n            connection.setRequestMethod(\"POST\");\r\n            connection.setDoOutput(true); // To send request content\r\n            connection.setRequestProperty(\"Content-Type\", \"application/x-www-form-urlencoded\");\r\n |             connection = (HttpURLConnection) url.openConnection();\r\n            connection.setRequestMethod(\"POST\");\r\n            connection.setDoOutput(true); // To send request content\r\n            connection.setRequestProperty(\"Content-Type\", \"application/x-www-form-urlencoded\");\r\n\r\n |             connection.setRequestMethod(\"POST\");\r\n            connection.setDoOutput(true); // To send request content\r\n            connection.setRequestProperty(\"Content-Type\", \"application/x-www-form-urlencoded\");\r\n\r\n            // Construct the data to be sent in the POST body\r\n |             URL url = new URL(\"https://healthcare.example.com/bookAppointment\");\r\n            connection = (HttpURLConnection) url.openConnection();\r\n            connection.setRequestMethod(\"POST\");\r\n            connection.setDoOutput(true); // To send request content\r\n            connection.setRequestProperty(\"Content-Type\", \"application/x-www-form-urlencoded\");\r\n |             connection = (HttpURLConnection) url.openConnection();\r\n            connection.setRequestMethod(\"POST\");\r\n            connection.setDoOutput(true); // To send request content\r\n            connection.setRequestProperty(\"Content-Type\", \"application/x-www-form-urlencoded\");\r\n\r\n |             connection.setRequestMethod(\"POST\");\r\n            connection.setDoOutput(true); // To send request content\r\n            connection.setRequestProperty(\"Content-Type\", \"application/x-www-form-urlencoded\");\r\n\r\n            // Construct the data to be sent in the POST body\r\n |             String postData = \"patientId=\" + patientId + \"&symptoms=\" + symptoms + \"&doctorId=\" + doctorId;\r\n            \r\n            try (OutputStream os = connection.getOutputStream()) {\r\n                os.write(postData.getBytes());\r\n                os.flush();\r\n |             System.err.println(\"Error occurred while booking medical appointment.\");\r\n        } finally {\r\n            if (connection != null) {\r\n                connection.disconnect();\r\n            }\r\n |             System.err.println(\"Error occurred while booking medical appointment.\");\r\n        } finally {\r\n            if (connection != null) {\r\n                connection.disconnect();\r\n            }\r\n |         } finally {\r\n            if (connection != null) {\r\n                connection.disconnect();\r\n            }\r\n        }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "postData",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "data",
                        "type": "String",
                        "context": "        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, patientKey);\r\n        byte[] encrypted = cipher.doFinal(data.getBytes());\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n    }\r\n",
                        "nextNode": "data.getBytes()"
                    },
                    {
                        "name": "data.getBytes()",
                        "type": "byte[]",
                        "context": "        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, patientKey);\r\n        byte[] encrypted = cipher.doFinal(data.getBytes());\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n    }\r\n",
                        "nextNode": "cipher.doFinal(data.getBytes()"
                    },
                    {
                        "name": "cipher.doFinal(data.getBytes()",
                        "type": "byte[]",
                        "context": "        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, patientKey);\r\n        byte[] encrypted = cipher.doFinal(data.getBytes());\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n    }\r\n",
                        "nextNode": "encrypted"
                    },
                    {
                        "name": "encrypted",
                        "type": "byte[]",
                        "context": "        cipher.init(Cipher.ENCRYPT_MODE, patientKey);\r\n        byte[] encrypted = cipher.doFinal(data.getBytes());\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n    }\r\n\r\n",
                        "nextNode": "Base64.getEncoder().encodeToString(encrypted)"
                    },
                    {
                        "name": "Base64.getEncoder().encodeToString(encrypted)",
                        "type": "String",
                        "context": "        cipher.init(Cipher.ENCRYPT_MODE, patientKey);\r\n        byte[] encrypted = cipher.doFinal(data.getBytes());\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n    }\r\n\r\n",
                        "nextNode": "encrypt(doctorId)"
                    },
                    {
                        "name": "encrypt(doctorId)",
                        "type": "String",
                        "context": "            patientId = URLEncoder.encode(encrypt(patientId), StandardCharsets.UTF_8.toString());\r\n            symptoms = URLEncoder.encode(encrypt(symptoms), StandardCharsets.UTF_8.toString());\r\n            doctorId = URLEncoder.encode(encrypt(doctorId), StandardCharsets.UTF_8.toString());\r\n\r\n            URL url = new URL(\"https://healthcare.example.com/bookAppointment\");\r\n",
                        "nextNode": "URLEncoder.encode(encrypt(doctorId), StandardCharsets.UTF_8.toString()"
                    },
                    {
                        "name": "URLEncoder.encode(encrypt(doctorId), StandardCharsets.UTF_8.toString()",
                        "type": "String",
                        "context": "            patientId = URLEncoder.encode(encrypt(patientId), StandardCharsets.UTF_8.toString());\r\n            symptoms = URLEncoder.encode(encrypt(symptoms), StandardCharsets.UTF_8.toString());\r\n            doctorId = URLEncoder.encode(encrypt(doctorId), StandardCharsets.UTF_8.toString());\r\n\r\n            URL url = new URL(\"https://healthcare.example.com/bookAppointment\");\r\n",
                        "nextNode": "doctorId"
                    },
                    {
                        "name": "doctorId",
                        "type": "String",
                        "context": "\r\n            // Construct the data to be sent in the POST body\r\n            String postData = \"patientId=\" + patientId + \"&symptoms=\" + symptoms + \"&doctorId=\" + doctorId;\r\n            \r\n            try (OutputStream os = connection.getOutputStream()) {\r\n",
                        "nextNode": "\"patientId=\" + patientId + \"&symptoms=\" + symptoms + \"&doctorId=\" + doctorId"
                    },
                    {
                        "name": "\"patientId=\" + patientId + \"&symptoms=\" + symptoms + \"&doctorId=\" + doctorId",
                        "type": "String",
                        "context": "\r\n            // Construct the data to be sent in the POST body\r\n            String postData = \"patientId=\" + patientId + \"&symptoms=\" + symptoms + \"&doctorId=\" + doctorId;\r\n            \r\n            try (OutputStream os = connection.getOutputStream()) {\r\n",
                        "nextNode": "postData"
                    },
                    {
                        "name": "postData",
                        "type": "Dataflow from `data` to `postData`\nDataflow from `encrypted` to `postData`\nDataflow from `doctorId` to `postData`\nDataflow from `symptoms` to `postData`\nDataflow from `patientId` to `postData`\nDataflow from `doFinal(...)` to `postData`\nDataflow from `getBytes(...)` to `postData`\nDataflow from `encodeToString(...)` to `postData`\nDataflow from `\"&doctorId=\"` to `postData`\nDataflow from `\"&symptoms=\"` to `postData`\nDataflow from `\"patientId=\"` to `postData`\nDataflow from `encode(...)` to `postData`\nDataflow from `toString(...)` to `postData`\nDataflow from `encode(...)` to `postData`\nDataflow from `toString(...)` to `postData`\nDataflow from `encode(...)` to `postData`\nDataflow from `toString(...)` to `postData`\nDataflow from `patientId` to `postData`\nDataflow from `symptoms` to `postData`\nDataflow from `doctorId` to `postData`\nDataflow from `\"12345\"` to `postData`\nDataflow from `\"Fever, cough, and shortness of breath\"` to `postData`\nDataflow from `\"DrJohnDoe\"` to `postData`\nDataflow from `encrypt(...)` to `postData`\nDataflow from `encrypt(...)` to `postData`\nDataflow from `encrypt(...)` to `postData`",
                        "context": "            \r\n            try (OutputStream os = connection.getOutputStream()) {\r\n                os.write(postData.getBytes());\r\n                os.flush();\r\n            }\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "&symptoms=",
                "isSensitive": "no"
            },
            {
                "name": "https://healthcare.example.com/bookAppointment",
                "isSensitive": "yes"
            },
            {
                "name": "POST",
                "isSensitive": "no"
            },
            {
                "name": "application/x-www-form-urlencoded",
                "isSensitive": "no"
            },
            {
                "name": "&doctorId=",
                "isSensitive": "no"
            },
            {
                "name": "AES",
                "isSensitive": "yes"
            },
            {
                "name": "Error occurred",
                "isSensitive": "no"
            },
            {
                "name": "Error occurred while booking medical appointment.",
                "isSensitive": "no"
            },
            {
                "name": "Fever, cough, and shortness of breath",
                "isSensitive": "yes"
            },
            {
                "name": "DrJohnDoe",
                "isSensitive": "yes"
            },
            {
                "name": "12345",
                "isSensitive": "yes"
            },
            {
                "name": "patientId=",
                "isSensitive": "no"
            },
            {
                "name": "Content-Type",
                "isSensitive": "no"
            }
        ],
        "comments": [
            {
                "name": "Using AES with 128-bit keys.",
                "isSensitive": "yes"
            },
            {
                "name": "To send request content",
                "isSensitive": "no"
            },
            {
                "name": "Encrypt and URL encode the parameters",
                "isSensitive": "no"
            },
            {
                "name": "Construct the data to be sent in the POST body",
                "isSensitive": "no"
            },
            {
                "name": "Now with encrypted parameters",
                "isSensitive": "no"
            }
        ],
        "sinks": [
            {
                "name": "encode",
                "isSink": "no"
            },
            {
                "name": "init",
                "isSink": "no"
            },
            {
                "name": "disconnect",
                "isSink": "yes"
            },
            {
                "name": "setRequestMethod",
                "isSink": "yes"
            },
            {
                "name": "openConnection",
                "isSink": "yes"
            },
            {
                "name": "encodeToString",
                "isSink": "no"
            },
            {
                "name": "getBytes",
                "isSink": "no"
            },
            {
                "name": "doFinal",
                "isSink": "no"
            },
            {
                "name": "generateKey",
                "isSink": "no"
            },
            {
                "name": "println",
                "isSink": "yes"
            },
            {
                "name": "flush",
                "isSink": "yes"
            },
            {
                "name": "setRequestProperty",
                "isSink": "yes"
            },
            {
                "name": "encrypt",
                "isSink": "no"
            },
            {
                "name": "bookMedicalAppointment",
                "isSink": "no"
            },
            {
                "name": "getEncoder",
                "isSink": "no"
            },
            {
                "name": "toString",
                "isSink": "no"
            },
            {
                "name": "getOutputStream",
                "isSink": "yes"
            },
            {
                "name": "getInstance",
                "isSink": "no"
            },
            {
                "name": "write",
                "isSink": "yes"
            },
            {
                "name": "setDoOutput",
                "isSink": "yes"
            }
        ]
    },
    {
        "fileName": "GOOD_HttpsApiCall.java",
        "variables": [
            {
                "name": "cipher",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "Cipher.getInstance(\"AES\")",
                        "type": "Cipher",
                        "context": "            SecretKey originalKey = new SecretKeySpec(decodedKey, 0, decodedKey.length, \"AES\");\r\n\r\n            Cipher cipher = Cipher.getInstance(\"AES\");\r\n            cipher.init(Cipher.DECRYPT_MODE, originalKey);\r\n            byte[] original = cipher.doFinal(Base64.getDecoder().decode(encryptedToken));\r\n |             SecretKey originalKey = new SecretKeySpec(decodedKey, 0, decodedKey.length, \"AES\");\r\n\r\n            Cipher cipher = Cipher.getInstance(\"AES\");\r\n            cipher.init(Cipher.DECRYPT_MODE, originalKey);\r\n            byte[] original = cipher.doFinal(Base64.getDecoder().decode(encryptedToken));\r\n",
                        "nextNode": "cipher"
                    },
                    {
                        "name": "cipher",
                        "type": "Cipher",
                        "context": "\r\n            Cipher cipher = Cipher.getInstance(\"AES\");\r\n            cipher.init(Cipher.DECRYPT_MODE, originalKey);\r\n            byte[] original = cipher.doFinal(Base64.getDecoder().decode(encryptedToken));\r\n            return new String(original);\r\n |             Cipher cipher = Cipher.getInstance(\"AES\");\r\n            cipher.init(Cipher.DECRYPT_MODE, originalKey);\r\n            byte[] original = cipher.doFinal(Base64.getDecoder().decode(encryptedToken));\r\n            return new String(original);\r\n        } catch (Exception e) {\r\n | \r\n            Cipher cipher = Cipher.getInstance(\"AES\");\r\n            cipher.init(Cipher.DECRYPT_MODE, originalKey);\r\n            byte[] original = cipher.doFinal(Base64.getDecoder().decode(encryptedToken));\r\n            return new String(original);\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "encryptedToken",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "System.getenv(\"ENCRYPTED_OAUTH_TOKEN\")",
                        "type": "String",
                        "context": "    public static void main(String[] args) {\r\n        try {\r\n            String token = getDecryptedToken(System.getenv(\"ENCRYPTED_OAUTH_TOKEN\"));\r\n            URL url = new URL(\"https://api.retailnetwork.com/v2/orders\");\r\n            HttpURLConnection conn = (HttpURLConnection) url.openConnection();\r\n",
                        "nextNode": "String encryptedToken"
                    },
                    {
                        "name": "String encryptedToken",
                        "type": "String",
                        "context": "    }\r\n\r\n    private static String getDecryptedToken(String encryptedToken) {\r\n        try {\r\n            // Mock example for decryption (use a real encryption algorithm)\r\n",
                        "nextNode": "encryptedToken"
                    },
                    {
                        "name": "encryptedToken",
                        "type": "Dataflow from `getenv(...)` to `encryptedToken`\nDataflow from `\"ENCRYPTED_OAUTH_TOKEN\"` to `encryptedToken`",
                        "context": "            Cipher cipher = Cipher.getInstance(\"AES\");\r\n            cipher.init(Cipher.DECRYPT_MODE, originalKey);\r\n            byte[] original = cipher.doFinal(Base64.getDecoder().decode(encryptedToken));\r\n            return new String(original);\r\n        } catch (Exception e) {\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "conn",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "url.openConnection()",
                        "type": "URLConnection",
                        "context": "            String token = getDecryptedToken(System.getenv(\"ENCRYPTED_OAUTH_TOKEN\"));\r\n            URL url = new URL(\"https://api.retailnetwork.com/v2/orders\");\r\n            HttpURLConnection conn = (HttpURLConnection) url.openConnection();\r\n            conn.setRequestMethod(\"POST\");\r\n            conn.setDoOutput(true); // Required for POST\r\n |             String token = getDecryptedToken(System.getenv(\"ENCRYPTED_OAUTH_TOKEN\"));\r\n            URL url = new URL(\"https://api.retailnetwork.com/v2/orders\");\r\n            HttpURLConnection conn = (HttpURLConnection) url.openConnection();\r\n            conn.setRequestMethod(\"POST\");\r\n            conn.setDoOutput(true); // Required for POST\r\n |             String token = getDecryptedToken(System.getenv(\"ENCRYPTED_OAUTH_TOKEN\"));\r\n            URL url = new URL(\"https://api.retailnetwork.com/v2/orders\");\r\n            HttpURLConnection conn = (HttpURLConnection) url.openConnection();\r\n            conn.setRequestMethod(\"POST\");\r\n            conn.setDoOutput(true); // Required for POST\r\n |             String token = getDecryptedToken(System.getenv(\"ENCRYPTED_OAUTH_TOKEN\"));\r\n            URL url = new URL(\"https://api.retailnetwork.com/v2/orders\");\r\n            HttpURLConnection conn = (HttpURLConnection) url.openConnection();\r\n            conn.setRequestMethod(\"POST\");\r\n            conn.setDoOutput(true); // Required for POST\r\n |             String token = getDecryptedToken(System.getenv(\"ENCRYPTED_OAUTH_TOKEN\"));\r\n            URL url = new URL(\"https://api.retailnetwork.com/v2/orders\");\r\n            HttpURLConnection conn = (HttpURLConnection) url.openConnection();\r\n            conn.setRequestMethod(\"POST\");\r\n            conn.setDoOutput(true); // Required for POST\r\n",
                        "nextNode": "(HttpURLConnection) url.openConnection()"
                    },
                    {
                        "name": "(HttpURLConnection) url.openConnection()",
                        "type": "HttpURLConnection",
                        "context": "            String token = getDecryptedToken(System.getenv(\"ENCRYPTED_OAUTH_TOKEN\"));\r\n            URL url = new URL(\"https://api.retailnetwork.com/v2/orders\");\r\n            HttpURLConnection conn = (HttpURLConnection) url.openConnection();\r\n            conn.setRequestMethod(\"POST\");\r\n            conn.setDoOutput(true); // Required for POST\r\n |             String token = getDecryptedToken(System.getenv(\"ENCRYPTED_OAUTH_TOKEN\"));\r\n            URL url = new URL(\"https://api.retailnetwork.com/v2/orders\");\r\n            HttpURLConnection conn = (HttpURLConnection) url.openConnection();\r\n            conn.setRequestMethod(\"POST\");\r\n            conn.setDoOutput(true); // Required for POST\r\n |             String token = getDecryptedToken(System.getenv(\"ENCRYPTED_OAUTH_TOKEN\"));\r\n            URL url = new URL(\"https://api.retailnetwork.com/v2/orders\");\r\n            HttpURLConnection conn = (HttpURLConnection) url.openConnection();\r\n            conn.setRequestMethod(\"POST\");\r\n            conn.setDoOutput(true); // Required for POST\r\n |             String token = getDecryptedToken(System.getenv(\"ENCRYPTED_OAUTH_TOKEN\"));\r\n            URL url = new URL(\"https://api.retailnetwork.com/v2/orders\");\r\n            HttpURLConnection conn = (HttpURLConnection) url.openConnection();\r\n            conn.setRequestMethod(\"POST\");\r\n            conn.setDoOutput(true); // Required for POST\r\n |             String token = getDecryptedToken(System.getenv(\"ENCRYPTED_OAUTH_TOKEN\"));\r\n            URL url = new URL(\"https://api.retailnetwork.com/v2/orders\");\r\n            HttpURLConnection conn = (HttpURLConnection) url.openConnection();\r\n            conn.setRequestMethod(\"POST\");\r\n            conn.setDoOutput(true); // Required for POST\r\n",
                        "nextNode": "conn"
                    },
                    {
                        "name": "conn",
                        "type": "HttpURLConnection",
                        "context": "            URL url = new URL(\"https://api.retailnetwork.com/v2/orders\");\r\n            HttpURLConnection conn = (HttpURLConnection) url.openConnection();\r\n            conn.setRequestMethod(\"POST\");\r\n            conn.setDoOutput(true); // Required for POST\r\n            conn.setRequestProperty(\"Content-Type\", \"application/x-www-form-urlencoded\");\r\n |             HttpURLConnection conn = (HttpURLConnection) url.openConnection();\r\n            conn.setRequestMethod(\"POST\");\r\n            conn.setDoOutput(true); // Required for POST\r\n            conn.setRequestProperty(\"Content-Type\", \"application/x-www-form-urlencoded\");\r\n\r\n |             conn.setRequestMethod(\"POST\");\r\n            conn.setDoOutput(true); // Required for POST\r\n            conn.setRequestProperty(\"Content-Type\", \"application/x-www-form-urlencoded\");\r\n\r\n            String postData = \"authToken=\" + URLEncoder.encode(token, \"UTF-8\");\r\n |             String postData = \"authToken=\" + URLEncoder.encode(token, \"UTF-8\");\r\n\r\n            try (OutputStream os = conn.getOutputStream()) {\r\n                os.write(postData.getBytes());\r\n                os.flush();\r\n |             }\r\n\r\n            int responseCode = conn.getResponseCode();\r\n            // Handle response appropriately\r\n        } catch (Exception e) {\r\n |             URL url = new URL(\"https://api.retailnetwork.com/v2/orders\");\r\n            HttpURLConnection conn = (HttpURLConnection) url.openConnection();\r\n            conn.setRequestMethod(\"POST\");\r\n            conn.setDoOutput(true); // Required for POST\r\n            conn.setRequestProperty(\"Content-Type\", \"application/x-www-form-urlencoded\");\r\n |             URL url = new URL(\"https://api.retailnetwork.com/v2/orders\");\r\n            HttpURLConnection conn = (HttpURLConnection) url.openConnection();\r\n            conn.setRequestMethod(\"POST\");\r\n            conn.setDoOutput(true); // Required for POST\r\n            conn.setRequestProperty(\"Content-Type\", \"application/x-www-form-urlencoded\");\r\n |             HttpURLConnection conn = (HttpURLConnection) url.openConnection();\r\n            conn.setRequestMethod(\"POST\");\r\n            conn.setDoOutput(true); // Required for POST\r\n            conn.setRequestProperty(\"Content-Type\", \"application/x-www-form-urlencoded\");\r\n\r\n |             URL url = new URL(\"https://api.retailnetwork.com/v2/orders\");\r\n            HttpURLConnection conn = (HttpURLConnection) url.openConnection();\r\n            conn.setRequestMethod(\"POST\");\r\n            conn.setDoOutput(true); // Required for POST\r\n            conn.setRequestProperty(\"Content-Type\", \"application/x-www-form-urlencoded\");\r\n |             HttpURLConnection conn = (HttpURLConnection) url.openConnection();\r\n            conn.setRequestMethod(\"POST\");\r\n            conn.setDoOutput(true); // Required for POST\r\n            conn.setRequestProperty(\"Content-Type\", \"application/x-www-form-urlencoded\");\r\n\r\n |             conn.setRequestMethod(\"POST\");\r\n            conn.setDoOutput(true); // Required for POST\r\n            conn.setRequestProperty(\"Content-Type\", \"application/x-www-form-urlencoded\");\r\n\r\n            String postData = \"authToken=\" + URLEncoder.encode(token, \"UTF-8\");\r\n |             URL url = new URL(\"https://api.retailnetwork.com/v2/orders\");\r\n            HttpURLConnection conn = (HttpURLConnection) url.openConnection();\r\n            conn.setRequestMethod(\"POST\");\r\n            conn.setDoOutput(true); // Required for POST\r\n            conn.setRequestProperty(\"Content-Type\", \"application/x-www-form-urlencoded\");\r\n |             HttpURLConnection conn = (HttpURLConnection) url.openConnection();\r\n            conn.setRequestMethod(\"POST\");\r\n            conn.setDoOutput(true); // Required for POST\r\n            conn.setRequestProperty(\"Content-Type\", \"application/x-www-form-urlencoded\");\r\n\r\n |             conn.setRequestMethod(\"POST\");\r\n            conn.setDoOutput(true); // Required for POST\r\n            conn.setRequestProperty(\"Content-Type\", \"application/x-www-form-urlencoded\");\r\n\r\n            String postData = \"authToken=\" + URLEncoder.encode(token, \"UTF-8\");\r\n |             String postData = \"authToken=\" + URLEncoder.encode(token, \"UTF-8\");\r\n\r\n            try (OutputStream os = conn.getOutputStream()) {\r\n                os.write(postData.getBytes());\r\n                os.flush();\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "original",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "encryptedToken",
                        "type": "String",
                        "context": "            Cipher cipher = Cipher.getInstance(\"AES\");\r\n            cipher.init(Cipher.DECRYPT_MODE, originalKey);\r\n            byte[] original = cipher.doFinal(Base64.getDecoder().decode(encryptedToken));\r\n            return new String(original);\r\n        } catch (Exception e) {\r\n",
                        "nextNode": "Base64.getDecoder().decode(encryptedToken)"
                    },
                    {
                        "name": "Base64.getDecoder().decode(encryptedToken)",
                        "type": "byte[]",
                        "context": "            Cipher cipher = Cipher.getInstance(\"AES\");\r\n            cipher.init(Cipher.DECRYPT_MODE, originalKey);\r\n            byte[] original = cipher.doFinal(Base64.getDecoder().decode(encryptedToken));\r\n            return new String(original);\r\n        } catch (Exception e) {\r\n",
                        "nextNode": "cipher.doFinal(Base64.getDecoder().decode(encryptedToken)"
                    },
                    {
                        "name": "cipher.doFinal(Base64.getDecoder().decode(encryptedToken)",
                        "type": "byte[]",
                        "context": "            Cipher cipher = Cipher.getInstance(\"AES\");\r\n            cipher.init(Cipher.DECRYPT_MODE, originalKey);\r\n            byte[] original = cipher.doFinal(Base64.getDecoder().decode(encryptedToken));\r\n            return new String(original);\r\n        } catch (Exception e) {\r\n",
                        "nextNode": "original"
                    },
                    {
                        "name": "original",
                        "type": "Dataflow from `encryptedToken` to `original`\nDataflow from `getenv(...)` to `original`\nDataflow from `doFinal(...)` to `original`\nDataflow from `decode(...)` to `original`\nDataflow from `\"ENCRYPTED_OAUTH_TOKEN\"` to `original`",
                        "context": "            cipher.init(Cipher.DECRYPT_MODE, originalKey);\r\n            byte[] original = cipher.doFinal(Base64.getDecoder().decode(encryptedToken));\r\n            return new String(original);\r\n        } catch (Exception e) {\r\n            System.err.println(\"Error occurred\");\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "os",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "conn.getOutputStream()",
                        "type": "OutputStream",
                        "context": "            String postData = \"authToken=\" + URLEncoder.encode(token, \"UTF-8\");\r\n\r\n            try (OutputStream os = conn.getOutputStream()) {\r\n                os.write(postData.getBytes());\r\n                os.flush();\r\n",
                        "nextNode": "os"
                    },
                    {
                        "name": "postData.getBytes()",
                        "type": "byte[]",
                        "context": "\r\n            try (OutputStream os = conn.getOutputStream()) {\r\n                os.write(postData.getBytes());\r\n                os.flush();\r\n            }\r\n",
                        "nextNode": "os"
                    },
                    {
                        "name": "os",
                        "type": "Dataflow from `getOutputStream(...)` to `os`",
                        "context": "\r\n            try (OutputStream os = conn.getOutputStream()) {\r\n                os.write(postData.getBytes());\r\n                os.flush();\r\n            }\r\n | \r\n            try (OutputStream os = conn.getOutputStream()) {\r\n                os.write(postData.getBytes());\r\n                os.flush();\r\n            }\r\n |             try (OutputStream os = conn.getOutputStream()) {\r\n                os.write(postData.getBytes());\r\n                os.flush();\r\n            }\r\n\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "e",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "url",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "new URL(\"https://api.retailnetwork.com/v2/orders\")",
                        "type": "URL",
                        "context": "        try {\r\n            String token = getDecryptedToken(System.getenv(\"ENCRYPTED_OAUTH_TOKEN\"));\r\n            URL url = new URL(\"https://api.retailnetwork.com/v2/orders\");\r\n            HttpURLConnection conn = (HttpURLConnection) url.openConnection();\r\n            conn.setRequestMethod(\"POST\");\r\n",
                        "nextNode": "url"
                    },
                    {
                        "name": "url",
                        "type": "Dataflow from `new URL(...)` to `url`\nDataflow from `\"https://api.retailnetwork.com/v2/orders\"` to `url`",
                        "context": "            String token = getDecryptedToken(System.getenv(\"ENCRYPTED_OAUTH_TOKEN\"));\r\n            URL url = new URL(\"https://api.retailnetwork.com/v2/orders\");\r\n            HttpURLConnection conn = (HttpURLConnection) url.openConnection();\r\n            conn.setRequestMethod(\"POST\");\r\n            conn.setDoOutput(true); // Required for POST\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "token",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "encryptedToken",
                        "type": "String",
                        "context": "            Cipher cipher = Cipher.getInstance(\"AES\");\r\n            cipher.init(Cipher.DECRYPT_MODE, originalKey);\r\n            byte[] original = cipher.doFinal(Base64.getDecoder().decode(encryptedToken));\r\n            return new String(original);\r\n        } catch (Exception e) {\r\n",
                        "nextNode": "Base64.getDecoder().decode(encryptedToken)"
                    },
                    {
                        "name": "Base64.getDecoder().decode(encryptedToken)",
                        "type": "byte[]",
                        "context": "            Cipher cipher = Cipher.getInstance(\"AES\");\r\n            cipher.init(Cipher.DECRYPT_MODE, originalKey);\r\n            byte[] original = cipher.doFinal(Base64.getDecoder().decode(encryptedToken));\r\n            return new String(original);\r\n        } catch (Exception e) {\r\n",
                        "nextNode": "cipher.doFinal(Base64.getDecoder().decode(encryptedToken)"
                    },
                    {
                        "name": "cipher.doFinal(Base64.getDecoder().decode(encryptedToken)",
                        "type": "byte[]",
                        "context": "            Cipher cipher = Cipher.getInstance(\"AES\");\r\n            cipher.init(Cipher.DECRYPT_MODE, originalKey);\r\n            byte[] original = cipher.doFinal(Base64.getDecoder().decode(encryptedToken));\r\n            return new String(original);\r\n        } catch (Exception e) {\r\n",
                        "nextNode": "original"
                    },
                    {
                        "name": "original",
                        "type": "byte[]",
                        "context": "            cipher.init(Cipher.DECRYPT_MODE, originalKey);\r\n            byte[] original = cipher.doFinal(Base64.getDecoder().decode(encryptedToken));\r\n            return new String(original);\r\n        } catch (Exception e) {\r\n            System.err.println(\"Error occurred\");\r\n",
                        "nextNode": "new String(original)"
                    },
                    {
                        "name": "new String(original)",
                        "type": "String",
                        "context": "            cipher.init(Cipher.DECRYPT_MODE, originalKey);\r\n            byte[] original = cipher.doFinal(Base64.getDecoder().decode(encryptedToken));\r\n            return new String(original);\r\n        } catch (Exception e) {\r\n            System.err.println(\"Error occurred\");\r\n",
                        "nextNode": "getDecryptedToken(System.getenv(\"ENCRYPTED_OAUTH_TOKEN\")"
                    },
                    {
                        "name": "getDecryptedToken(System.getenv(\"ENCRYPTED_OAUTH_TOKEN\")",
                        "type": "String",
                        "context": "    public static void main(String[] args) {\r\n        try {\r\n            String token = getDecryptedToken(System.getenv(\"ENCRYPTED_OAUTH_TOKEN\"));\r\n            URL url = new URL(\"https://api.retailnetwork.com/v2/orders\");\r\n            HttpURLConnection conn = (HttpURLConnection) url.openConnection();\r\n",
                        "nextNode": "token"
                    },
                    {
                        "name": "token",
                        "type": "Dataflow from `encryptedToken` to `token`\nDataflow from `original` to `token`\nDataflow from `new String(...)` to `token`\nDataflow from `getDecryptedToken(...)` to `token`\nDataflow from `getenv(...)` to `token`\nDataflow from `doFinal(...)` to `token`\nDataflow from `decode(...)` to `token`\nDataflow from `null` to `token`\nDataflow from `\"ENCRYPTED_OAUTH_TOKEN\"` to `token`",
                        "context": "            conn.setRequestProperty(\"Content-Type\", \"application/x-www-form-urlencoded\");\r\n\r\n            String postData = \"authToken=\" + URLEncoder.encode(token, \"UTF-8\");\r\n\r\n            try (OutputStream os = conn.getOutputStream()) {\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "responseCode",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "args",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "decodedKey",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "Base64.getDecoder().decode(\"QWxhZGRpbjpvcGVuIHNlc2FtZQ==\")",
                        "type": "byte[]",
                        "context": "        try {\r\n            // Mock example for decryption (use a real encryption algorithm)\r\n            byte[] decodedKey = Base64.getDecoder().decode(\"QWxhZGRpbjpvcGVuIHNlc2FtZQ==\");\r\n            SecretKey originalKey = new SecretKeySpec(decodedKey, 0, decodedKey.length, \"AES\");\r\n\r\n |         try {\r\n            // Mock example for decryption (use a real encryption algorithm)\r\n            byte[] decodedKey = Base64.getDecoder().decode(\"QWxhZGRpbjpvcGVuIHNlc2FtZQ==\");\r\n            SecretKey originalKey = new SecretKeySpec(decodedKey, 0, decodedKey.length, \"AES\");\r\n\r\n",
                        "nextNode": "decodedKey"
                    },
                    {
                        "name": "decodedKey",
                        "type": "Dataflow from `decode(...)` to `decodedKey`\nDataflow from `\"QWxhZGRpbjpvcGVuIHNlc2FtZQ==\"` to `decodedKey`",
                        "context": "            // Mock example for decryption (use a real encryption algorithm)\r\n            byte[] decodedKey = Base64.getDecoder().decode(\"QWxhZGRpbjpvcGVuIHNlc2FtZQ==\");\r\n            SecretKey originalKey = new SecretKeySpec(decodedKey, 0, decodedKey.length, \"AES\");\r\n\r\n            Cipher cipher = Cipher.getInstance(\"AES\");\r\n |             // Mock example for decryption (use a real encryption algorithm)\r\n            byte[] decodedKey = Base64.getDecoder().decode(\"QWxhZGRpbjpvcGVuIHNlc2FtZQ==\");\r\n            SecretKey originalKey = new SecretKeySpec(decodedKey, 0, decodedKey.length, \"AES\");\r\n\r\n            Cipher cipher = Cipher.getInstance(\"AES\");\r\n |             // Mock example for decryption (use a real encryption algorithm)\r\n            byte[] decodedKey = Base64.getDecoder().decode(\"QWxhZGRpbjpvcGVuIHNlc2FtZQ==\");\r\n            SecretKey originalKey = new SecretKeySpec(decodedKey, 0, decodedKey.length, \"AES\");\r\n\r\n            Cipher cipher = Cipher.getInstance(\"AES\");\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "originalKey",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "decodedKey",
                        "type": "byte[]",
                        "context": "            // Mock example for decryption (use a real encryption algorithm)\r\n            byte[] decodedKey = Base64.getDecoder().decode(\"QWxhZGRpbjpvcGVuIHNlc2FtZQ==\");\r\n            SecretKey originalKey = new SecretKeySpec(decodedKey, 0, decodedKey.length, \"AES\");\r\n\r\n            Cipher cipher = Cipher.getInstance(\"AES\");\r\n",
                        "nextNode": "new SecretKeySpec(decodedKey, 0, decodedKey.length, \"AES\")"
                    },
                    {
                        "name": "new SecretKeySpec(decodedKey, 0, decodedKey.length, \"AES\")",
                        "type": "SecretKeySpec",
                        "context": "            // Mock example for decryption (use a real encryption algorithm)\r\n            byte[] decodedKey = Base64.getDecoder().decode(\"QWxhZGRpbjpvcGVuIHNlc2FtZQ==\");\r\n            SecretKey originalKey = new SecretKeySpec(decodedKey, 0, decodedKey.length, \"AES\");\r\n\r\n            Cipher cipher = Cipher.getInstance(\"AES\");\r\n",
                        "nextNode": "originalKey"
                    },
                    {
                        "name": "originalKey",
                        "type": "Dataflow from `decodedKey` to `originalKey`\nDataflow from `decodedKey.length` to `originalKey`\nDataflow from `decode(...)` to `originalKey`\nDataflow from `\"QWxhZGRpbjpvcGVuIHNlc2FtZQ==\"` to `originalKey`\nDataflow from `new SecretKeySpec(...)` to `originalKey`\nDataflow from `0` to `originalKey`\nDataflow from `\"AES\"` to `originalKey`",
                        "context": "\r\n            Cipher cipher = Cipher.getInstance(\"AES\");\r\n            cipher.init(Cipher.DECRYPT_MODE, originalKey);\r\n            byte[] original = cipher.doFinal(Base64.getDecoder().decode(encryptedToken));\r\n            return new String(original);\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "postData",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "token",
                        "type": "String",
                        "context": "            conn.setRequestProperty(\"Content-Type\", \"application/x-www-form-urlencoded\");\r\n\r\n            String postData = \"authToken=\" + URLEncoder.encode(token, \"UTF-8\");\r\n\r\n            try (OutputStream os = conn.getOutputStream()) {\r\n",
                        "nextNode": "URLEncoder.encode(token, \"UTF-8\")"
                    },
                    {
                        "name": "URLEncoder.encode(token, \"UTF-8\")",
                        "type": "String",
                        "context": "            conn.setRequestProperty(\"Content-Type\", \"application/x-www-form-urlencoded\");\r\n\r\n            String postData = \"authToken=\" + URLEncoder.encode(token, \"UTF-8\");\r\n\r\n            try (OutputStream os = conn.getOutputStream()) {\r\n",
                        "nextNode": "\"authToken=\" + URLEncoder.encode(token, \"UTF-8\")"
                    },
                    {
                        "name": "\"authToken=\" + URLEncoder.encode(token, \"UTF-8\")",
                        "type": "String",
                        "context": "            conn.setRequestProperty(\"Content-Type\", \"application/x-www-form-urlencoded\");\r\n\r\n            String postData = \"authToken=\" + URLEncoder.encode(token, \"UTF-8\");\r\n\r\n            try (OutputStream os = conn.getOutputStream()) {\r\n",
                        "nextNode": "postData"
                    },
                    {
                        "name": "postData",
                        "type": "Dataflow from `token` to `postData`\nDataflow from `encryptedToken` to `postData`\nDataflow from `original` to `postData`\nDataflow from `new String(...)` to `postData`\nDataflow from `getDecryptedToken(...)` to `postData`\nDataflow from `getenv(...)` to `postData`\nDataflow from `\"authToken=\"` to `postData`\nDataflow from `encode(...)` to `postData`\nDataflow from `doFinal(...)` to `postData`\nDataflow from `decode(...)` to `postData`\nDataflow from `null` to `postData`\nDataflow from `\"ENCRYPTED_OAUTH_TOKEN\"` to `postData`\nDataflow from `\"UTF-8\"` to `postData`",
                        "context": "\r\n            try (OutputStream os = conn.getOutputStream()) {\r\n                os.write(postData.getBytes());\r\n                os.flush();\r\n            }\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "ENCRYPTED_OAUTH_TOKEN",
                "isSensitive": "no"
            },
            {
                "name": "Error occurred",
                "isSensitive": "no"
            },
            {
                "name": "POST",
                "isSensitive": "no"
            },
            {
                "name": "https://api.retailnetwork.com/v2/orders",
                "isSensitive": "yes"
            },
            {
                "name": "UTF-8",
                "isSensitive": "no"
            },
            {
                "name": "application/x-www-form-urlencoded",
                "isSensitive": "no"
            },
            {
                "name": "QWxhZGRpbjpvcGVuIHNlc2FtZQ==",
                "isSensitive": "yes"
            },
            {
                "name": "authToken=",
                "isSensitive": "no"
            },
            {
                "name": "Content-Type",
                "isSensitive": "no"
            },
            {
                "name": "AES",
                "isSensitive": "yes"
            }
        ],
        "comments": [
            {
                "name": "Required for POST",
                "isSensitive": "no"
            },
            {
                "name": "Handle response appropriately",
                "isSensitive": "no"
            },
            {
                "name": "Mock example for decryption (use a real encryption algorithm)",
                "isSensitive": "no"
            }
        ],
        "sinks": [
            {
                "name": "encode",
                "isSink": "no"
            },
            {
                "name": "init",
                "isSink": "no"
            },
            {
                "name": "setRequestMethod",
                "isSink": "yes"
            },
            {
                "name": "openConnection",
                "isSink": "yes"
            },
            {
                "name": "decode",
                "isSink": "no"
            },
            {
                "name": "getBytes",
                "isSink": "no"
            },
            {
                "name": "doFinal",
                "isSink": "no"
            },
            {
                "name": "getDecryptedToken",
                "isSink": "no"
            },
            {
                "name": "println",
                "isSink": "yes"
            },
            {
                "name": "getDecoder",
                "isSink": "no"
            },
            {
                "name": "flush",
                "isSink": "yes"
            },
            {
                "name": "setRequestProperty",
                "isSink": "yes"
            },
            {
                "name": "getResponseCode",
                "isSink": "yes"
            },
            {
                "name": "getOutputStream",
                "isSink": "yes"
            },
            {
                "name": "getInstance",
                "isSink": "no"
            },
            {
                "name": "write",
                "isSink": "yes"
            },
            {
                "name": "getenv",
                "isSink": "no"
            },
            {
                "name": "setDoOutput",
                "isSink": "yes"
            }
        ]
    },
    {
        "fileName": "GOOD_PasswordChangePOST_Encrypted.java",
        "variables": [
            {
                "name": "cipher",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "Cipher.getInstance(\"AES\")",
                        "type": "Cipher",
                        "context": "\r\n    public static String encrypt(String data) throws Exception {\r\n        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, accountKey);\r\n        byte[] encrypted = cipher.doFinal(data.getBytes());\r\n | \r\n    public static String encrypt(String data) throws Exception {\r\n        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, accountKey);\r\n        byte[] encrypted = cipher.doFinal(data.getBytes());\r\n",
                        "nextNode": "cipher"
                    },
                    {
                        "name": "cipher",
                        "type": "Cipher",
                        "context": "    public static String encrypt(String data) throws Exception {\r\n        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, accountKey);\r\n        byte[] encrypted = cipher.doFinal(data.getBytes());\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n |         Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, accountKey);\r\n        byte[] encrypted = cipher.doFinal(data.getBytes());\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n    }\r\n |     public static String encrypt(String data) throws Exception {\r\n        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, accountKey);\r\n        byte[] encrypted = cipher.doFinal(data.getBytes());\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "data",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "username",
                        "type": "String",
                        "context": "\r\n            // Encrypt and encode parameters\r\n            username = URLEncoder.encode(encrypt(username), StandardCharsets.UTF_8.name());\r\n            oldPassword = URLEncoder.encode(encrypt(oldPassword), StandardCharsets.UTF_8.name());\r\n            newPassword = URLEncoder.encode(encrypt(newPassword), StandardCharsets.UTF_8.name());\r\n",
                        "nextNode": "String data"
                    },
                    {
                        "name": "String data",
                        "type": "String",
                        "context": "    }\r\n\r\n    public static String encrypt(String data) throws Exception {\r\n        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, accountKey);\r\n",
                        "nextNode": "data"
                    },
                    {
                        "name": "data",
                        "type": "Dataflow from `username` to `data`\nDataflow from `oldPassword` to `data`\nDataflow from `newPassword` to `data`\nDataflow from `\"user2\"` to `data`\nDataflow from `\"DragonHeart21\"` to `data`\nDataflow from `\"ShadowHunter34\"` to `data`",
                        "context": "        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, accountKey);\r\n        byte[] encrypted = cipher.doFinal(data.getBytes());\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n    }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "os",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "connection.getOutputStream()",
                        "type": "OutputStream",
                        "context": "            String postData = \"username=\" + username + \"&oldPassword=\" + oldPassword + \"&newPassword=\" + newPassword;\r\n\r\n            try (OutputStream os = connection.getOutputStream()) {\r\n                os.write(postData.getBytes());\r\n                os.flush();\r\n",
                        "nextNode": "os"
                    },
                    {
                        "name": "postData.getBytes()",
                        "type": "byte[]",
                        "context": "\r\n            try (OutputStream os = connection.getOutputStream()) {\r\n                os.write(postData.getBytes());\r\n                os.flush();\r\n            }\r\n",
                        "nextNode": "os"
                    },
                    {
                        "name": "os",
                        "type": "Dataflow from `getOutputStream(...)` to `os`",
                        "context": "\r\n            try (OutputStream os = connection.getOutputStream()) {\r\n                os.write(postData.getBytes());\r\n                os.flush();\r\n            }\r\n | \r\n            try (OutputStream os = connection.getOutputStream()) {\r\n                os.write(postData.getBytes());\r\n                os.flush();\r\n            }\r\n |             try (OutputStream os = connection.getOutputStream()) {\r\n                os.write(postData.getBytes());\r\n                os.flush();\r\n            }\r\n\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "e",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "oldPassword",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "data",
                        "type": "String",
                        "context": "        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, accountKey);\r\n        byte[] encrypted = cipher.doFinal(data.getBytes());\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n    }\r\n",
                        "nextNode": "data.getBytes()"
                    },
                    {
                        "name": "data.getBytes()",
                        "type": "byte[]",
                        "context": "        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, accountKey);\r\n        byte[] encrypted = cipher.doFinal(data.getBytes());\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n    }\r\n",
                        "nextNode": "cipher.doFinal(data.getBytes()"
                    },
                    {
                        "name": "cipher.doFinal(data.getBytes()",
                        "type": "byte[]",
                        "context": "        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, accountKey);\r\n        byte[] encrypted = cipher.doFinal(data.getBytes());\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n    }\r\n",
                        "nextNode": "encrypted"
                    },
                    {
                        "name": "encrypted",
                        "type": "byte[]",
                        "context": "        cipher.init(Cipher.ENCRYPT_MODE, accountKey);\r\n        byte[] encrypted = cipher.doFinal(data.getBytes());\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n    }\r\n\r\n",
                        "nextNode": "Base64.getEncoder().encodeToString(encrypted)"
                    },
                    {
                        "name": "Base64.getEncoder().encodeToString(encrypted)",
                        "type": "String",
                        "context": "        cipher.init(Cipher.ENCRYPT_MODE, accountKey);\r\n        byte[] encrypted = cipher.doFinal(data.getBytes());\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n    }\r\n\r\n",
                        "nextNode": "encrypt(oldPassword)"
                    },
                    {
                        "name": "encrypt(oldPassword)",
                        "type": "String",
                        "context": "            // Encrypt and encode parameters\r\n            username = URLEncoder.encode(encrypt(username), StandardCharsets.UTF_8.name());\r\n            oldPassword = URLEncoder.encode(encrypt(oldPassword), StandardCharsets.UTF_8.name());\r\n            newPassword = URLEncoder.encode(encrypt(newPassword), StandardCharsets.UTF_8.name());\r\n\r\n",
                        "nextNode": "URLEncoder.encode(encrypt(oldPassword), StandardCharsets.UTF_8.name()"
                    },
                    {
                        "name": "URLEncoder.encode(encrypt(oldPassword), StandardCharsets.UTF_8.name()",
                        "type": "String",
                        "context": "            // Encrypt and encode parameters\r\n            username = URLEncoder.encode(encrypt(username), StandardCharsets.UTF_8.name());\r\n            oldPassword = URLEncoder.encode(encrypt(oldPassword), StandardCharsets.UTF_8.name());\r\n            newPassword = URLEncoder.encode(encrypt(newPassword), StandardCharsets.UTF_8.name());\r\n\r\n",
                        "nextNode": "oldPassword"
                    },
                    {
                        "name": "String oldPassword",
                        "type": "String",
                        "context": "    }\r\n\r\n    public static void changePassword(String username, String oldPassword, String newPassword) {\r\n        HttpURLConnection connection = null;\r\n        try {\r\n",
                        "nextNode": "oldPassword"
                    },
                    {
                        "name": "oldPassword",
                        "type": "Dataflow from `data` to `oldPassword`\nDataflow from `encrypted` to `oldPassword`\nDataflow from `doFinal(...)` to `oldPassword`\nDataflow from `getBytes(...)` to `oldPassword`\nDataflow from `encodeToString(...)` to `oldPassword`\nDataflow from `encode(...)` to `oldPassword`\nDataflow from `name(...)` to `oldPassword`\nDataflow from `\"DragonHeart21\"` to `oldPassword`\nDataflow from `encrypt(...)` to `oldPassword`",
                        "context": "\r\n            // Construct POST data\r\n            String postData = \"username=\" + username + \"&oldPassword=\" + oldPassword + \"&newPassword=\" + newPassword;\r\n\r\n            try (OutputStream os = connection.getOutputStream()) {\r\n |             // Encrypt and encode parameters\r\n            username = URLEncoder.encode(encrypt(username), StandardCharsets.UTF_8.name());\r\n            oldPassword = URLEncoder.encode(encrypt(oldPassword), StandardCharsets.UTF_8.name());\r\n            newPassword = URLEncoder.encode(encrypt(newPassword), StandardCharsets.UTF_8.name());\r\n\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "newPassword",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "data",
                        "type": "String",
                        "context": "        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, accountKey);\r\n        byte[] encrypted = cipher.doFinal(data.getBytes());\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n    }\r\n",
                        "nextNode": "data.getBytes()"
                    },
                    {
                        "name": "data.getBytes()",
                        "type": "byte[]",
                        "context": "        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, accountKey);\r\n        byte[] encrypted = cipher.doFinal(data.getBytes());\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n    }\r\n",
                        "nextNode": "cipher.doFinal(data.getBytes()"
                    },
                    {
                        "name": "cipher.doFinal(data.getBytes()",
                        "type": "byte[]",
                        "context": "        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, accountKey);\r\n        byte[] encrypted = cipher.doFinal(data.getBytes());\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n    }\r\n",
                        "nextNode": "encrypted"
                    },
                    {
                        "name": "encrypted",
                        "type": "byte[]",
                        "context": "        cipher.init(Cipher.ENCRYPT_MODE, accountKey);\r\n        byte[] encrypted = cipher.doFinal(data.getBytes());\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n    }\r\n\r\n",
                        "nextNode": "Base64.getEncoder().encodeToString(encrypted)"
                    },
                    {
                        "name": "Base64.getEncoder().encodeToString(encrypted)",
                        "type": "String",
                        "context": "        cipher.init(Cipher.ENCRYPT_MODE, accountKey);\r\n        byte[] encrypted = cipher.doFinal(data.getBytes());\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n    }\r\n\r\n",
                        "nextNode": "encrypt(newPassword)"
                    },
                    {
                        "name": "encrypt(newPassword)",
                        "type": "String",
                        "context": "            username = URLEncoder.encode(encrypt(username), StandardCharsets.UTF_8.name());\r\n            oldPassword = URLEncoder.encode(encrypt(oldPassword), StandardCharsets.UTF_8.name());\r\n            newPassword = URLEncoder.encode(encrypt(newPassword), StandardCharsets.UTF_8.name());\r\n\r\n            // Construct POST data\r\n",
                        "nextNode": "URLEncoder.encode(encrypt(newPassword), StandardCharsets.UTF_8.name()"
                    },
                    {
                        "name": "URLEncoder.encode(encrypt(newPassword), StandardCharsets.UTF_8.name()",
                        "type": "String",
                        "context": "            username = URLEncoder.encode(encrypt(username), StandardCharsets.UTF_8.name());\r\n            oldPassword = URLEncoder.encode(encrypt(oldPassword), StandardCharsets.UTF_8.name());\r\n            newPassword = URLEncoder.encode(encrypt(newPassword), StandardCharsets.UTF_8.name());\r\n\r\n            // Construct POST data\r\n",
                        "nextNode": "newPassword"
                    },
                    {
                        "name": "String newPassword",
                        "type": "String",
                        "context": "    }\r\n\r\n    public static void changePassword(String username, String oldPassword, String newPassword) {\r\n        HttpURLConnection connection = null;\r\n        try {\r\n",
                        "nextNode": "newPassword"
                    },
                    {
                        "name": "newPassword",
                        "type": "Dataflow from `data` to `newPassword`\nDataflow from `encrypted` to `newPassword`\nDataflow from `doFinal(...)` to `newPassword`\nDataflow from `getBytes(...)` to `newPassword`\nDataflow from `encodeToString(...)` to `newPassword`\nDataflow from `encode(...)` to `newPassword`\nDataflow from `name(...)` to `newPassword`\nDataflow from `\"ShadowHunter34\"` to `newPassword`\nDataflow from `encrypt(...)` to `newPassword`",
                        "context": "\r\n            // Construct POST data\r\n            String postData = \"username=\" + username + \"&oldPassword=\" + oldPassword + \"&newPassword=\" + newPassword;\r\n\r\n            try (OutputStream os = connection.getOutputStream()) {\r\n |             username = URLEncoder.encode(encrypt(username), StandardCharsets.UTF_8.name());\r\n            oldPassword = URLEncoder.encode(encrypt(oldPassword), StandardCharsets.UTF_8.name());\r\n            newPassword = URLEncoder.encode(encrypt(newPassword), StandardCharsets.UTF_8.name());\r\n\r\n            // Construct POST data\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "keyGen",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "KeyGenerator.getInstance(\"AES\")",
                        "type": "KeyGenerator",
                        "context": "    static {\r\n        try {\r\n            KeyGenerator keyGen = KeyGenerator.getInstance(\"AES\");\r\n            keyGen.init(128); // Using AES with 128-bit keys.\r\n            accountKey = keyGen.generateKey();\r\n |     static {\r\n        try {\r\n            KeyGenerator keyGen = KeyGenerator.getInstance(\"AES\");\r\n            keyGen.init(128); // Using AES with 128-bit keys.\r\n            accountKey = keyGen.generateKey();\r\n",
                        "nextNode": "keyGen"
                    },
                    {
                        "name": "keyGen",
                        "type": "Dataflow from `getInstance(...)` to `keyGen`\nDataflow from `\"AES\"` to `keyGen`",
                        "context": "        try {\r\n            KeyGenerator keyGen = KeyGenerator.getInstance(\"AES\");\r\n            keyGen.init(128); // Using AES with 128-bit keys.\r\n            accountKey = keyGen.generateKey();\r\n        } catch (Exception e) {\r\n |         try {\r\n            KeyGenerator keyGen = KeyGenerator.getInstance(\"AES\");\r\n            keyGen.init(128); // Using AES with 128-bit keys.\r\n            accountKey = keyGen.generateKey();\r\n        } catch (Exception e) {\r\n |             KeyGenerator keyGen = KeyGenerator.getInstance(\"AES\");\r\n            keyGen.init(128); // Using AES with 128-bit keys.\r\n            accountKey = keyGen.generateKey();\r\n        } catch (Exception e) {\r\n            System.err.println(\"Error occurred\");\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "url",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "new URL(\"https://secure.companyportal.com/changePassword\")",
                        "type": "URL",
                        "context": "        HttpURLConnection connection = null;\r\n        try {\r\n            URL url = new URL(\"https://secure.companyportal.com/changePassword\");\r\n            connection = (HttpURLConnection) url.openConnection();\r\n            connection.setRequestMethod(\"POST\");\r\n",
                        "nextNode": "url"
                    },
                    {
                        "name": "url",
                        "type": "Dataflow from `new URL(...)` to `url`\nDataflow from `\"https://secure.companyportal.com/changePassword\"` to `url`",
                        "context": "        try {\r\n            URL url = new URL(\"https://secure.companyportal.com/changePassword\");\r\n            connection = (HttpURLConnection) url.openConnection();\r\n            connection.setRequestMethod(\"POST\");\r\n            connection.setDoOutput(true); // Allows sending data\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "accountKey",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "keyGen.generateKey()",
                        "type": "SecretKey",
                        "context": "            KeyGenerator keyGen = KeyGenerator.getInstance(\"AES\");\r\n            keyGen.init(128); // Using AES with 128-bit keys.\r\n            accountKey = keyGen.generateKey();\r\n        } catch (Exception e) {\r\n            System.err.println(\"Error occurred\");\r\n",
                        "nextNode": "accountKey"
                    },
                    {
                        "name": "accountKey",
                        "type": "SecretKey",
                        "context": "\r\npublic class GOOD_PasswordChangePOST_Encrypted {\r\n    private static SecretKey accountKey;\r\n\r\n    static {\r\n |     public static String encrypt(String data) throws Exception {\r\n        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, accountKey);\r\n        byte[] encrypted = cipher.doFinal(data.getBytes());\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "args",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "encrypted",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "data",
                        "type": "String",
                        "context": "        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, accountKey);\r\n        byte[] encrypted = cipher.doFinal(data.getBytes());\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n    }\r\n",
                        "nextNode": "data.getBytes()"
                    },
                    {
                        "name": "data.getBytes()",
                        "type": "byte[]",
                        "context": "        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, accountKey);\r\n        byte[] encrypted = cipher.doFinal(data.getBytes());\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n    }\r\n",
                        "nextNode": "cipher.doFinal(data.getBytes()"
                    },
                    {
                        "name": "cipher.doFinal(data.getBytes()",
                        "type": "byte[]",
                        "context": "        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, accountKey);\r\n        byte[] encrypted = cipher.doFinal(data.getBytes());\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n    }\r\n",
                        "nextNode": "encrypted"
                    },
                    {
                        "name": "encrypted",
                        "type": "Dataflow from `data` to `encrypted`\nDataflow from `doFinal(...)` to `encrypted`\nDataflow from `getBytes(...)` to `encrypted`\nDataflow from `username` to `encrypted`\nDataflow from `oldPassword` to `encrypted`\nDataflow from `newPassword` to `encrypted`\nDataflow from `\"user2\"` to `encrypted`\nDataflow from `\"DragonHeart21\"` to `encrypted`\nDataflow from `\"ShadowHunter34\"` to `encrypted`",
                        "context": "        cipher.init(Cipher.ENCRYPT_MODE, accountKey);\r\n        byte[] encrypted = cipher.doFinal(data.getBytes());\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n    }\r\n\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "connection",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "url.openConnection()",
                        "type": "URLConnection",
                        "context": "        try {\r\n            URL url = new URL(\"https://secure.companyportal.com/changePassword\");\r\n            connection = (HttpURLConnection) url.openConnection();\r\n            connection.setRequestMethod(\"POST\");\r\n            connection.setDoOutput(true); // Allows sending data\r\n |         try {\r\n            URL url = new URL(\"https://secure.companyportal.com/changePassword\");\r\n            connection = (HttpURLConnection) url.openConnection();\r\n            connection.setRequestMethod(\"POST\");\r\n            connection.setDoOutput(true); // Allows sending data\r\n |         try {\r\n            URL url = new URL(\"https://secure.companyportal.com/changePassword\");\r\n            connection = (HttpURLConnection) url.openConnection();\r\n            connection.setRequestMethod(\"POST\");\r\n            connection.setDoOutput(true); // Allows sending data\r\n |         try {\r\n            URL url = new URL(\"https://secure.companyportal.com/changePassword\");\r\n            connection = (HttpURLConnection) url.openConnection();\r\n            connection.setRequestMethod(\"POST\");\r\n            connection.setDoOutput(true); // Allows sending data\r\n",
                        "nextNode": "(HttpURLConnection) url.openConnection()"
                    },
                    {
                        "name": "(HttpURLConnection) url.openConnection()",
                        "type": "HttpURLConnection",
                        "context": "        try {\r\n            URL url = new URL(\"https://secure.companyportal.com/changePassword\");\r\n            connection = (HttpURLConnection) url.openConnection();\r\n            connection.setRequestMethod(\"POST\");\r\n            connection.setDoOutput(true); // Allows sending data\r\n |         try {\r\n            URL url = new URL(\"https://secure.companyportal.com/changePassword\");\r\n            connection = (HttpURLConnection) url.openConnection();\r\n            connection.setRequestMethod(\"POST\");\r\n            connection.setDoOutput(true); // Allows sending data\r\n |         try {\r\n            URL url = new URL(\"https://secure.companyportal.com/changePassword\");\r\n            connection = (HttpURLConnection) url.openConnection();\r\n            connection.setRequestMethod(\"POST\");\r\n            connection.setDoOutput(true); // Allows sending data\r\n |         try {\r\n            URL url = new URL(\"https://secure.companyportal.com/changePassword\");\r\n            connection = (HttpURLConnection) url.openConnection();\r\n            connection.setRequestMethod(\"POST\");\r\n            connection.setDoOutput(true); // Allows sending data\r\n",
                        "nextNode": "connection"
                    },
                    {
                        "name": "null",
                        "type": "Object",
                        "context": "\r\n    public static void changePassword(String username, String oldPassword, String newPassword) {\r\n        HttpURLConnection connection = null;\r\n        try {\r\n            URL url = new URL(\"https://secure.companyportal.com/changePassword\");\r\n | \r\n    public static void changePassword(String username, String oldPassword, String newPassword) {\r\n        HttpURLConnection connection = null;\r\n        try {\r\n            URL url = new URL(\"https://secure.companyportal.com/changePassword\");\r\n",
                        "nextNode": "connection"
                    },
                    {
                        "name": "connection",
                        "type": "Dataflow from `openConnection(...)` to `connection`",
                        "context": "            URL url = new URL(\"https://secure.companyportal.com/changePassword\");\r\n            connection = (HttpURLConnection) url.openConnection();\r\n            connection.setRequestMethod(\"POST\");\r\n            connection.setDoOutput(true); // Allows sending data\r\n            connection.setRequestProperty(\"Content-Type\", \"application/x-www-form-urlencoded\");\r\n |             URL url = new URL(\"https://secure.companyportal.com/changePassword\");\r\n            connection = (HttpURLConnection) url.openConnection();\r\n            connection.setRequestMethod(\"POST\");\r\n            connection.setDoOutput(true); // Allows sending data\r\n            connection.setRequestProperty(\"Content-Type\", \"application/x-www-form-urlencoded\");\r\n |             connection = (HttpURLConnection) url.openConnection();\r\n            connection.setRequestMethod(\"POST\");\r\n            connection.setDoOutput(true); // Allows sending data\r\n            connection.setRequestProperty(\"Content-Type\", \"application/x-www-form-urlencoded\");\r\n\r\n |             URL url = new URL(\"https://secure.companyportal.com/changePassword\");\r\n            connection = (HttpURLConnection) url.openConnection();\r\n            connection.setRequestMethod(\"POST\");\r\n            connection.setDoOutput(true); // Allows sending data\r\n            connection.setRequestProperty(\"Content-Type\", \"application/x-www-form-urlencoded\");\r\n |             connection = (HttpURLConnection) url.openConnection();\r\n            connection.setRequestMethod(\"POST\");\r\n            connection.setDoOutput(true); // Allows sending data\r\n            connection.setRequestProperty(\"Content-Type\", \"application/x-www-form-urlencoded\");\r\n\r\n |             connection.setRequestMethod(\"POST\");\r\n            connection.setDoOutput(true); // Allows sending data\r\n            connection.setRequestProperty(\"Content-Type\", \"application/x-www-form-urlencoded\");\r\n\r\n            // Encrypt and encode parameters\r\n |             URL url = new URL(\"https://secure.companyportal.com/changePassword\");\r\n            connection = (HttpURLConnection) url.openConnection();\r\n            connection.setRequestMethod(\"POST\");\r\n            connection.setDoOutput(true); // Allows sending data\r\n            connection.setRequestProperty(\"Content-Type\", \"application/x-www-form-urlencoded\");\r\n |             connection = (HttpURLConnection) url.openConnection();\r\n            connection.setRequestMethod(\"POST\");\r\n            connection.setDoOutput(true); // Allows sending data\r\n            connection.setRequestProperty(\"Content-Type\", \"application/x-www-form-urlencoded\");\r\n\r\n |             connection.setRequestMethod(\"POST\");\r\n            connection.setDoOutput(true); // Allows sending data\r\n            connection.setRequestProperty(\"Content-Type\", \"application/x-www-form-urlencoded\");\r\n\r\n            // Encrypt and encode parameters\r\n |             String postData = \"username=\" + username + \"&oldPassword=\" + oldPassword + \"&newPassword=\" + newPassword;\r\n\r\n            try (OutputStream os = connection.getOutputStream()) {\r\n                os.write(postData.getBytes());\r\n                os.flush();\r\n |             System.err.println(\"Error occurred while changing password\");\r\n        } finally {\r\n            if (connection != null) {\r\n                connection.disconnect();\r\n            }\r\n |             System.err.println(\"Error occurred while changing password\");\r\n        } finally {\r\n            if (connection != null) {\r\n                connection.disconnect();\r\n            }\r\n |         } finally {\r\n            if (connection != null) {\r\n                connection.disconnect();\r\n            }\r\n        }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "postData",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "data",
                        "type": "String",
                        "context": "        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, accountKey);\r\n        byte[] encrypted = cipher.doFinal(data.getBytes());\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n    }\r\n",
                        "nextNode": "data.getBytes()"
                    },
                    {
                        "name": "data.getBytes()",
                        "type": "byte[]",
                        "context": "        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, accountKey);\r\n        byte[] encrypted = cipher.doFinal(data.getBytes());\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n    }\r\n",
                        "nextNode": "cipher.doFinal(data.getBytes()"
                    },
                    {
                        "name": "cipher.doFinal(data.getBytes()",
                        "type": "byte[]",
                        "context": "        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, accountKey);\r\n        byte[] encrypted = cipher.doFinal(data.getBytes());\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n    }\r\n",
                        "nextNode": "encrypted"
                    },
                    {
                        "name": "encrypted",
                        "type": "byte[]",
                        "context": "        cipher.init(Cipher.ENCRYPT_MODE, accountKey);\r\n        byte[] encrypted = cipher.doFinal(data.getBytes());\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n    }\r\n\r\n",
                        "nextNode": "Base64.getEncoder().encodeToString(encrypted)"
                    },
                    {
                        "name": "Base64.getEncoder().encodeToString(encrypted)",
                        "type": "String",
                        "context": "        cipher.init(Cipher.ENCRYPT_MODE, accountKey);\r\n        byte[] encrypted = cipher.doFinal(data.getBytes());\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n    }\r\n\r\n",
                        "nextNode": "encrypt(newPassword)"
                    },
                    {
                        "name": "encrypt(newPassword)",
                        "type": "String",
                        "context": "            username = URLEncoder.encode(encrypt(username), StandardCharsets.UTF_8.name());\r\n            oldPassword = URLEncoder.encode(encrypt(oldPassword), StandardCharsets.UTF_8.name());\r\n            newPassword = URLEncoder.encode(encrypt(newPassword), StandardCharsets.UTF_8.name());\r\n\r\n            // Construct POST data\r\n",
                        "nextNode": "URLEncoder.encode(encrypt(newPassword), StandardCharsets.UTF_8.name()"
                    },
                    {
                        "name": "URLEncoder.encode(encrypt(newPassword), StandardCharsets.UTF_8.name()",
                        "type": "String",
                        "context": "            username = URLEncoder.encode(encrypt(username), StandardCharsets.UTF_8.name());\r\n            oldPassword = URLEncoder.encode(encrypt(oldPassword), StandardCharsets.UTF_8.name());\r\n            newPassword = URLEncoder.encode(encrypt(newPassword), StandardCharsets.UTF_8.name());\r\n\r\n            // Construct POST data\r\n",
                        "nextNode": "newPassword"
                    },
                    {
                        "name": "newPassword",
                        "type": "String",
                        "context": "\r\n            // Construct POST data\r\n            String postData = \"username=\" + username + \"&oldPassword=\" + oldPassword + \"&newPassword=\" + newPassword;\r\n\r\n            try (OutputStream os = connection.getOutputStream()) {\r\n",
                        "nextNode": "\"username=\" + username + \"&oldPassword=\" + oldPassword + \"&newPassword=\" + newPassword"
                    },
                    {
                        "name": "\"username=\" + username + \"&oldPassword=\" + oldPassword + \"&newPassword=\" + newPassword",
                        "type": "String",
                        "context": "\r\n            // Construct POST data\r\n            String postData = \"username=\" + username + \"&oldPassword=\" + oldPassword + \"&newPassword=\" + newPassword;\r\n\r\n            try (OutputStream os = connection.getOutputStream()) {\r\n",
                        "nextNode": "postData"
                    },
                    {
                        "name": "postData",
                        "type": "Dataflow from `data` to `postData`\nDataflow from `encrypted` to `postData`\nDataflow from `newPassword` to `postData`\nDataflow from `oldPassword` to `postData`\nDataflow from `username` to `postData`\nDataflow from `doFinal(...)` to `postData`\nDataflow from `getBytes(...)` to `postData`\nDataflow from `encodeToString(...)` to `postData`\nDataflow from `\"&newPassword=\"` to `postData`\nDataflow from `\"&oldPassword=\"` to `postData`\nDataflow from `\"username=\"` to `postData`\nDataflow from `encode(...)` to `postData`\nDataflow from `name(...)` to `postData`\nDataflow from `encode(...)` to `postData`\nDataflow from `name(...)` to `postData`\nDataflow from `encode(...)` to `postData`\nDataflow from `name(...)` to `postData`\nDataflow from `username` to `postData`\nDataflow from `oldPassword` to `postData`\nDataflow from `newPassword` to `postData`\nDataflow from `\"user2\"` to `postData`\nDataflow from `\"DragonHeart21\"` to `postData`\nDataflow from `\"ShadowHunter34\"` to `postData`\nDataflow from `encrypt(...)` to `postData`\nDataflow from `encrypt(...)` to `postData`\nDataflow from `encrypt(...)` to `postData`",
                        "context": "\r\n            try (OutputStream os = connection.getOutputStream()) {\r\n                os.write(postData.getBytes());\r\n                os.flush();\r\n            }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "username",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "data",
                        "type": "String",
                        "context": "        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, accountKey);\r\n        byte[] encrypted = cipher.doFinal(data.getBytes());\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n    }\r\n",
                        "nextNode": "data.getBytes()"
                    },
                    {
                        "name": "data.getBytes()",
                        "type": "byte[]",
                        "context": "        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, accountKey);\r\n        byte[] encrypted = cipher.doFinal(data.getBytes());\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n    }\r\n",
                        "nextNode": "cipher.doFinal(data.getBytes()"
                    },
                    {
                        "name": "cipher.doFinal(data.getBytes()",
                        "type": "byte[]",
                        "context": "        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, accountKey);\r\n        byte[] encrypted = cipher.doFinal(data.getBytes());\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n    }\r\n",
                        "nextNode": "encrypted"
                    },
                    {
                        "name": "encrypted",
                        "type": "byte[]",
                        "context": "        cipher.init(Cipher.ENCRYPT_MODE, accountKey);\r\n        byte[] encrypted = cipher.doFinal(data.getBytes());\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n    }\r\n\r\n",
                        "nextNode": "Base64.getEncoder().encodeToString(encrypted)"
                    },
                    {
                        "name": "Base64.getEncoder().encodeToString(encrypted)",
                        "type": "String",
                        "context": "        cipher.init(Cipher.ENCRYPT_MODE, accountKey);\r\n        byte[] encrypted = cipher.doFinal(data.getBytes());\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n    }\r\n\r\n",
                        "nextNode": "encrypt(username)"
                    },
                    {
                        "name": "encrypt(username)",
                        "type": "String",
                        "context": "\r\n            // Encrypt and encode parameters\r\n            username = URLEncoder.encode(encrypt(username), StandardCharsets.UTF_8.name());\r\n            oldPassword = URLEncoder.encode(encrypt(oldPassword), StandardCharsets.UTF_8.name());\r\n            newPassword = URLEncoder.encode(encrypt(newPassword), StandardCharsets.UTF_8.name());\r\n",
                        "nextNode": "URLEncoder.encode(encrypt(username), StandardCharsets.UTF_8.name()"
                    },
                    {
                        "name": "URLEncoder.encode(encrypt(username), StandardCharsets.UTF_8.name()",
                        "type": "String",
                        "context": "\r\n            // Encrypt and encode parameters\r\n            username = URLEncoder.encode(encrypt(username), StandardCharsets.UTF_8.name());\r\n            oldPassword = URLEncoder.encode(encrypt(oldPassword), StandardCharsets.UTF_8.name());\r\n            newPassword = URLEncoder.encode(encrypt(newPassword), StandardCharsets.UTF_8.name());\r\n",
                        "nextNode": "username"
                    },
                    {
                        "name": "String username",
                        "type": "String",
                        "context": "    }\r\n\r\n    public static void changePassword(String username, String oldPassword, String newPassword) {\r\n        HttpURLConnection connection = null;\r\n        try {\r\n",
                        "nextNode": "username"
                    },
                    {
                        "name": "username",
                        "type": "Dataflow from `data` to `username`\nDataflow from `encrypted` to `username`\nDataflow from `doFinal(...)` to `username`\nDataflow from `getBytes(...)` to `username`\nDataflow from `encodeToString(...)` to `username`\nDataflow from `encode(...)` to `username`\nDataflow from `name(...)` to `username`\nDataflow from `\"user2\"` to `username`\nDataflow from `encrypt(...)` to `username`",
                        "context": "\r\n            // Construct POST data\r\n            String postData = \"username=\" + username + \"&oldPassword=\" + oldPassword + \"&newPassword=\" + newPassword;\r\n\r\n            try (OutputStream os = connection.getOutputStream()) {\r\n | \r\n            // Encrypt and encode parameters\r\n            username = URLEncoder.encode(encrypt(username), StandardCharsets.UTF_8.name());\r\n            oldPassword = URLEncoder.encode(encrypt(oldPassword), StandardCharsets.UTF_8.name());\r\n            newPassword = URLEncoder.encode(encrypt(newPassword), StandardCharsets.UTF_8.name());\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "username=",
                "isSensitive": "no"
            },
            {
                "name": "user2",
                "isSensitive": "yes"
            },
            {
                "name": "DragonHeart21",
                "isSensitive": "yes"
            },
            {
                "name": "ShadowHunter34",
                "isSensitive": "yes"
            },
            {
                "name": "POST",
                "isSensitive": "no"
            },
            {
                "name": "&oldPassword=",
                "isSensitive": "no"
            },
            {
                "name": "application/x-www-form-urlencoded",
                "isSensitive": "no"
            },
            {
                "name": "Error occurred while changing password",
                "isSensitive": "no"
            },
            {
                "name": "&newPassword=",
                "isSensitive": "no"
            },
            {
                "name": "AES",
                "isSensitive": "yes"
            },
            {
                "name": "Error occurred",
                "isSensitive": "no"
            },
            {
                "name": "https://secure.companyportal.com/changePassword",
                "isSensitive": "yes"
            },
            {
                "name": "Content-Type",
                "isSensitive": "no"
            }
        ],
        "comments": [
            {
                "name": "Using AES with 128-bit keys.",
                "isSensitive": "no"
            },
            {
                "name": "Encrypt and encode parameters",
                "isSensitive": "no"
            },
            {
                "name": "Allows sending data",
                "isSensitive": "no"
            },
            {
                "name": "Construct POST data",
                "isSensitive": "no"
            }
        ],
        "sinks": [
            {
                "name": "encode",
                "isSink": "no"
            },
            {
                "name": "init",
                "isSink": "no"
            },
            {
                "name": "disconnect",
                "isSink": "yes"
            },
            {
                "name": "setRequestMethod",
                "isSink": "yes"
            },
            {
                "name": "openConnection",
                "isSink": "yes"
            },
            {
                "name": "encodeToString",
                "isSink": "no"
            },
            {
                "name": "getBytes",
                "isSink": "no"
            },
            {
                "name": "doFinal",
                "isSink": "no"
            },
            {
                "name": "changePassword",
                "isSink": "no"
            },
            {
                "name": "generateKey",
                "isSink": "no"
            },
            {
                "name": "println",
                "isSink": "yes"
            },
            {
                "name": "flush",
                "isSink": "yes"
            },
            {
                "name": "setRequestProperty",
                "isSink": "yes"
            },
            {
                "name": "encrypt",
                "isSink": "no"
            },
            {
                "name": "getEncoder",
                "isSink": "no"
            },
            {
                "name": "name",
                "isSink": "no"
            },
            {
                "name": "getOutputStream",
                "isSink": "yes"
            },
            {
                "name": "getInstance",
                "isSink": "no"
            },
            {
                "name": "write",
                "isSink": "yes"
            },
            {
                "name": "setDoOutput",
                "isSink": "yes"
            }
        ]
    },
    {
        "fileName": "GOOD_PersonalDetailsPOST_Encrypted.java",
        "variables": [
            {
                "name": "cipher",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "Cipher.getInstance(\"AES\")",
                        "type": "Cipher",
                        "context": "\r\n    public static String encrypt(String data) throws Exception {\r\n        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, personalKey);\r\n        byte[] encrypted = cipher.doFinal(data.getBytes());\r\n | \r\n    public static String encrypt(String data) throws Exception {\r\n        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, personalKey);\r\n        byte[] encrypted = cipher.doFinal(data.getBytes());\r\n",
                        "nextNode": "cipher"
                    },
                    {
                        "name": "cipher",
                        "type": "Cipher",
                        "context": "    public static String encrypt(String data) throws Exception {\r\n        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, personalKey);\r\n        byte[] encrypted = cipher.doFinal(data.getBytes());\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n |         Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, personalKey);\r\n        byte[] encrypted = cipher.doFinal(data.getBytes());\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n    }\r\n |     public static String encrypt(String data) throws Exception {\r\n        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, personalKey);\r\n        byte[] encrypted = cipher.doFinal(data.getBytes());\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "httpClient",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "HttpClients.createDefault()",
                        "type": "CloseableHttpClient",
                        "context": "            String url = \"https://example.com/register\";\r\n            \r\n            CloseableHttpClient httpClient = HttpClients.createDefault();\r\n            HttpPost httpPost = new HttpPost(url);\r\n            httpPost.setHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");\r\n |             String url = \"https://example.com/register\";\r\n            \r\n            CloseableHttpClient httpClient = HttpClients.createDefault();\r\n            HttpPost httpPost = new HttpPost(url);\r\n            httpPost.setHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");\r\n",
                        "nextNode": "httpClient"
                    },
                    {
                        "name": "httpClient",
                        "type": "Dataflow from `createDefault(...)` to `httpClient`",
                        "context": "            httpPost.setEntity(new StringEntity(postData));\r\n\r\n            HttpResponse response = httpClient.execute(httpPost);\r\n            httpClient.close();\r\n        } catch (ClientProtocolException e) {\r\n |             httpPost.setEntity(new StringEntity(postData));\r\n\r\n            HttpResponse response = httpClient.execute(httpPost);\r\n            httpClient.close();\r\n        } catch (ClientProtocolException e) {\r\n | \r\n            HttpResponse response = httpClient.execute(httpPost);\r\n            httpClient.close();\r\n        } catch (ClientProtocolException e) {\r\n            System.err.println(\"Error occurred\");\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "data",
                "isSensitive": "no",
                "graph": [
                    {
                        "name": "fullName",
                        "type": "String",
                        "context": "    public static void sendPersonalDetails(String fullName, String dateOfBirth) {\r\n        try {\r\n            fullName = URLEncoder.encode(encrypt(fullName), StandardCharsets.UTF_8.name());\r\n            dateOfBirth = URLEncoder.encode(encrypt(dateOfBirth), StandardCharsets.UTF_8.name());\r\n\r\n",
                        "nextNode": "String data"
                    },
                    {
                        "name": "String data",
                        "type": "String",
                        "context": "    }\r\n\r\n    public static String encrypt(String data) throws Exception {\r\n        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, personalKey);\r\n",
                        "nextNode": "data"
                    },
                    {
                        "name": "data",
                        "type": "Dataflow from `fullName` to `data`\nDataflow from `dateOfBirth` to `data`\nDataflow from `\"John Doe\"` to `data`\nDataflow from `\"1980-01-01\"` to `data`",
                        "context": "        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, personalKey);\r\n        byte[] encrypted = cipher.doFinal(data.getBytes());\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n    }\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "personalKey",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "keyGen.generateKey()",
                        "type": "SecretKey",
                        "context": "            KeyGenerator keyGen = KeyGenerator.getInstance(\"AES\");\r\n            keyGen.init(128); // AES with 128-bit key for encryption\r\n            personalKey = keyGen.generateKey();\r\n        } catch (Exception e) {\r\n            System.err.println(\"Error occurred\");\r\n",
                        "nextNode": "personalKey"
                    },
                    {
                        "name": "personalKey",
                        "type": "SecretKey",
                        "context": "\r\npublic class GOOD_PersonalDetailsPOST_Encrypted {\r\n    private static SecretKey personalKey;\r\n\r\n    static {\r\n |     public static String encrypt(String data) throws Exception {\r\n        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, personalKey);\r\n        byte[] encrypted = cipher.doFinal(data.getBytes());\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "e",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "httpPost",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "url",
                        "type": "String",
                        "context": "            \r\n            CloseableHttpClient httpClient = HttpClients.createDefault();\r\n            HttpPost httpPost = new HttpPost(url);\r\n            httpPost.setHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");\r\n            String postData = \"fullName=\" + fullName + \"&dob=\" + dateOfBirth;\r\n |             \r\n            CloseableHttpClient httpClient = HttpClients.createDefault();\r\n            HttpPost httpPost = new HttpPost(url);\r\n            httpPost.setHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");\r\n            String postData = \"fullName=\" + fullName + \"&dob=\" + dateOfBirth;\r\n |             \r\n            CloseableHttpClient httpClient = HttpClients.createDefault();\r\n            HttpPost httpPost = new HttpPost(url);\r\n            httpPost.setHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");\r\n            String postData = \"fullName=\" + fullName + \"&dob=\" + dateOfBirth;\r\n",
                        "nextNode": "new HttpPost(url)"
                    },
                    {
                        "name": "new HttpPost(url)",
                        "type": "HttpPost",
                        "context": "            \r\n            CloseableHttpClient httpClient = HttpClients.createDefault();\r\n            HttpPost httpPost = new HttpPost(url);\r\n            httpPost.setHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");\r\n            String postData = \"fullName=\" + fullName + \"&dob=\" + dateOfBirth;\r\n |             \r\n            CloseableHttpClient httpClient = HttpClients.createDefault();\r\n            HttpPost httpPost = new HttpPost(url);\r\n            httpPost.setHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");\r\n            String postData = \"fullName=\" + fullName + \"&dob=\" + dateOfBirth;\r\n |             \r\n            CloseableHttpClient httpClient = HttpClients.createDefault();\r\n            HttpPost httpPost = new HttpPost(url);\r\n            httpPost.setHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");\r\n            String postData = \"fullName=\" + fullName + \"&dob=\" + dateOfBirth;\r\n",
                        "nextNode": "httpPost"
                    },
                    {
                        "name": "httpPost",
                        "type": "HttpPost",
                        "context": "            CloseableHttpClient httpClient = HttpClients.createDefault();\r\n            HttpPost httpPost = new HttpPost(url);\r\n            httpPost.setHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");\r\n            String postData = \"fullName=\" + fullName + \"&dob=\" + dateOfBirth;\r\n\r\n |             String postData = \"fullName=\" + fullName + \"&dob=\" + dateOfBirth;\r\n\r\n            httpPost.setEntity(new StringEntity(postData));\r\n\r\n            HttpResponse response = httpClient.execute(httpPost);\r\n |             httpPost.setEntity(new StringEntity(postData));\r\n\r\n            HttpResponse response = httpClient.execute(httpPost);\r\n            httpClient.close();\r\n        } catch (ClientProtocolException e) {\r\n |             CloseableHttpClient httpClient = HttpClients.createDefault();\r\n            HttpPost httpPost = new HttpPost(url);\r\n            httpPost.setHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");\r\n            String postData = \"fullName=\" + fullName + \"&dob=\" + dateOfBirth;\r\n\r\n |             CloseableHttpClient httpClient = HttpClients.createDefault();\r\n            HttpPost httpPost = new HttpPost(url);\r\n            httpPost.setHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");\r\n            String postData = \"fullName=\" + fullName + \"&dob=\" + dateOfBirth;\r\n\r\n |             String postData = \"fullName=\" + fullName + \"&dob=\" + dateOfBirth;\r\n\r\n            httpPost.setEntity(new StringEntity(postData));\r\n\r\n            HttpResponse response = httpClient.execute(httpPost);\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "fullName",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "data",
                        "type": "String",
                        "context": "        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, personalKey);\r\n        byte[] encrypted = cipher.doFinal(data.getBytes());\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n    }\r\n",
                        "nextNode": "data.getBytes()"
                    },
                    {
                        "name": "data.getBytes()",
                        "type": "byte[]",
                        "context": "        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, personalKey);\r\n        byte[] encrypted = cipher.doFinal(data.getBytes());\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n    }\r\n",
                        "nextNode": "cipher.doFinal(data.getBytes()"
                    },
                    {
                        "name": "cipher.doFinal(data.getBytes()",
                        "type": "byte[]",
                        "context": "        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, personalKey);\r\n        byte[] encrypted = cipher.doFinal(data.getBytes());\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n    }\r\n",
                        "nextNode": "encrypted"
                    },
                    {
                        "name": "encrypted",
                        "type": "byte[]",
                        "context": "        cipher.init(Cipher.ENCRYPT_MODE, personalKey);\r\n        byte[] encrypted = cipher.doFinal(data.getBytes());\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n    }\r\n\r\n",
                        "nextNode": "Base64.getEncoder().encodeToString(encrypted)"
                    },
                    {
                        "name": "Base64.getEncoder().encodeToString(encrypted)",
                        "type": "String",
                        "context": "        cipher.init(Cipher.ENCRYPT_MODE, personalKey);\r\n        byte[] encrypted = cipher.doFinal(data.getBytes());\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n    }\r\n\r\n",
                        "nextNode": "encrypt(fullName)"
                    },
                    {
                        "name": "encrypt(fullName)",
                        "type": "String",
                        "context": "    public static void sendPersonalDetails(String fullName, String dateOfBirth) {\r\n        try {\r\n            fullName = URLEncoder.encode(encrypt(fullName), StandardCharsets.UTF_8.name());\r\n            dateOfBirth = URLEncoder.encode(encrypt(dateOfBirth), StandardCharsets.UTF_8.name());\r\n\r\n",
                        "nextNode": "URLEncoder.encode(encrypt(fullName), StandardCharsets.UTF_8.name()"
                    },
                    {
                        "name": "URLEncoder.encode(encrypt(fullName), StandardCharsets.UTF_8.name()",
                        "type": "String",
                        "context": "    public static void sendPersonalDetails(String fullName, String dateOfBirth) {\r\n        try {\r\n            fullName = URLEncoder.encode(encrypt(fullName), StandardCharsets.UTF_8.name());\r\n            dateOfBirth = URLEncoder.encode(encrypt(dateOfBirth), StandardCharsets.UTF_8.name());\r\n\r\n",
                        "nextNode": "fullName"
                    },
                    {
                        "name": "String fullName",
                        "type": "String",
                        "context": "    }\r\n\r\n    public static void sendPersonalDetails(String fullName, String dateOfBirth) {\r\n        try {\r\n            fullName = URLEncoder.encode(encrypt(fullName), StandardCharsets.UTF_8.name());\r\n",
                        "nextNode": "fullName"
                    },
                    {
                        "name": "fullName",
                        "type": "Dataflow from `data` to `fullName`\nDataflow from `encrypted` to `fullName`\nDataflow from `doFinal(...)` to `fullName`\nDataflow from `getBytes(...)` to `fullName`\nDataflow from `encodeToString(...)` to `fullName`\nDataflow from `encode(...)` to `fullName`\nDataflow from `name(...)` to `fullName`\nDataflow from `\"John Doe\"` to `fullName`\nDataflow from `encrypt(...)` to `fullName`",
                        "context": "            HttpPost httpPost = new HttpPost(url);\r\n            httpPost.setHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");\r\n            String postData = \"fullName=\" + fullName + \"&dob=\" + dateOfBirth;\r\n\r\n            httpPost.setEntity(new StringEntity(postData));\r\n |     public static void sendPersonalDetails(String fullName, String dateOfBirth) {\r\n        try {\r\n            fullName = URLEncoder.encode(encrypt(fullName), StandardCharsets.UTF_8.name());\r\n            dateOfBirth = URLEncoder.encode(encrypt(dateOfBirth), StandardCharsets.UTF_8.name());\r\n\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "dateOfBirth",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "data",
                        "type": "String",
                        "context": "        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, personalKey);\r\n        byte[] encrypted = cipher.doFinal(data.getBytes());\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n    }\r\n",
                        "nextNode": "data.getBytes()"
                    },
                    {
                        "name": "data.getBytes()",
                        "type": "byte[]",
                        "context": "        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, personalKey);\r\n        byte[] encrypted = cipher.doFinal(data.getBytes());\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n    }\r\n",
                        "nextNode": "cipher.doFinal(data.getBytes()"
                    },
                    {
                        "name": "cipher.doFinal(data.getBytes()",
                        "type": "byte[]",
                        "context": "        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, personalKey);\r\n        byte[] encrypted = cipher.doFinal(data.getBytes());\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n    }\r\n",
                        "nextNode": "encrypted"
                    },
                    {
                        "name": "encrypted",
                        "type": "byte[]",
                        "context": "        cipher.init(Cipher.ENCRYPT_MODE, personalKey);\r\n        byte[] encrypted = cipher.doFinal(data.getBytes());\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n    }\r\n\r\n",
                        "nextNode": "Base64.getEncoder().encodeToString(encrypted)"
                    },
                    {
                        "name": "Base64.getEncoder().encodeToString(encrypted)",
                        "type": "String",
                        "context": "        cipher.init(Cipher.ENCRYPT_MODE, personalKey);\r\n        byte[] encrypted = cipher.doFinal(data.getBytes());\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n    }\r\n\r\n",
                        "nextNode": "encrypt(dateOfBirth)"
                    },
                    {
                        "name": "encrypt(dateOfBirth)",
                        "type": "String",
                        "context": "        try {\r\n            fullName = URLEncoder.encode(encrypt(fullName), StandardCharsets.UTF_8.name());\r\n            dateOfBirth = URLEncoder.encode(encrypt(dateOfBirth), StandardCharsets.UTF_8.name());\r\n\r\n            String url = \"https://example.com/register\";\r\n",
                        "nextNode": "URLEncoder.encode(encrypt(dateOfBirth), StandardCharsets.UTF_8.name()"
                    },
                    {
                        "name": "URLEncoder.encode(encrypt(dateOfBirth), StandardCharsets.UTF_8.name()",
                        "type": "String",
                        "context": "        try {\r\n            fullName = URLEncoder.encode(encrypt(fullName), StandardCharsets.UTF_8.name());\r\n            dateOfBirth = URLEncoder.encode(encrypt(dateOfBirth), StandardCharsets.UTF_8.name());\r\n\r\n            String url = \"https://example.com/register\";\r\n",
                        "nextNode": "dateOfBirth"
                    },
                    {
                        "name": "String dateOfBirth",
                        "type": "String",
                        "context": "    }\r\n\r\n    public static void sendPersonalDetails(String fullName, String dateOfBirth) {\r\n        try {\r\n            fullName = URLEncoder.encode(encrypt(fullName), StandardCharsets.UTF_8.name());\r\n",
                        "nextNode": "dateOfBirth"
                    },
                    {
                        "name": "dateOfBirth",
                        "type": "Dataflow from `data` to `dateOfBirth`\nDataflow from `encrypted` to `dateOfBirth`\nDataflow from `doFinal(...)` to `dateOfBirth`\nDataflow from `getBytes(...)` to `dateOfBirth`\nDataflow from `encodeToString(...)` to `dateOfBirth`\nDataflow from `encode(...)` to `dateOfBirth`\nDataflow from `name(...)` to `dateOfBirth`\nDataflow from `\"1980-01-01\"` to `dateOfBirth`\nDataflow from `encrypt(...)` to `dateOfBirth`",
                        "context": "            HttpPost httpPost = new HttpPost(url);\r\n            httpPost.setHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");\r\n            String postData = \"fullName=\" + fullName + \"&dob=\" + dateOfBirth;\r\n\r\n            httpPost.setEntity(new StringEntity(postData));\r\n |         try {\r\n            fullName = URLEncoder.encode(encrypt(fullName), StandardCharsets.UTF_8.name());\r\n            dateOfBirth = URLEncoder.encode(encrypt(dateOfBirth), StandardCharsets.UTF_8.name());\r\n\r\n            String url = \"https://example.com/register\";\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "keyGen",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "KeyGenerator.getInstance(\"AES\")",
                        "type": "KeyGenerator",
                        "context": "    static {\r\n        try {\r\n            KeyGenerator keyGen = KeyGenerator.getInstance(\"AES\");\r\n            keyGen.init(128); // AES with 128-bit key for encryption\r\n            personalKey = keyGen.generateKey();\r\n |     static {\r\n        try {\r\n            KeyGenerator keyGen = KeyGenerator.getInstance(\"AES\");\r\n            keyGen.init(128); // AES with 128-bit key for encryption\r\n            personalKey = keyGen.generateKey();\r\n",
                        "nextNode": "keyGen"
                    },
                    {
                        "name": "keyGen",
                        "type": "Dataflow from `getInstance(...)` to `keyGen`\nDataflow from `\"AES\"` to `keyGen`",
                        "context": "        try {\r\n            KeyGenerator keyGen = KeyGenerator.getInstance(\"AES\");\r\n            keyGen.init(128); // AES with 128-bit key for encryption\r\n            personalKey = keyGen.generateKey();\r\n        } catch (Exception e) {\r\n |         try {\r\n            KeyGenerator keyGen = KeyGenerator.getInstance(\"AES\");\r\n            keyGen.init(128); // AES with 128-bit key for encryption\r\n            personalKey = keyGen.generateKey();\r\n        } catch (Exception e) {\r\n |             KeyGenerator keyGen = KeyGenerator.getInstance(\"AES\");\r\n            keyGen.init(128); // AES with 128-bit key for encryption\r\n            personalKey = keyGen.generateKey();\r\n        } catch (Exception e) {\r\n            System.err.println(\"Error occurred\");\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "url",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "\"https://example.com/register\"",
                        "type": "String",
                        "context": "            dateOfBirth = URLEncoder.encode(encrypt(dateOfBirth), StandardCharsets.UTF_8.name());\r\n\r\n            String url = \"https://example.com/register\";\r\n            \r\n            CloseableHttpClient httpClient = HttpClients.createDefault();\r\n",
                        "nextNode": "url"
                    },
                    {
                        "name": "url",
                        "type": "Dataflow from `\"https://example.com/register\"` to `url`",
                        "context": "            \r\n            CloseableHttpClient httpClient = HttpClients.createDefault();\r\n            HttpPost httpPost = new HttpPost(url);\r\n            httpPost.setHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");\r\n            String postData = \"fullName=\" + fullName + \"&dob=\" + dateOfBirth;\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "args",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "encrypted",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "data",
                        "type": "String",
                        "context": "        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, personalKey);\r\n        byte[] encrypted = cipher.doFinal(data.getBytes());\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n    }\r\n",
                        "nextNode": "data.getBytes()"
                    },
                    {
                        "name": "data.getBytes()",
                        "type": "byte[]",
                        "context": "        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, personalKey);\r\n        byte[] encrypted = cipher.doFinal(data.getBytes());\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n    }\r\n",
                        "nextNode": "cipher.doFinal(data.getBytes()"
                    },
                    {
                        "name": "cipher.doFinal(data.getBytes()",
                        "type": "byte[]",
                        "context": "        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, personalKey);\r\n        byte[] encrypted = cipher.doFinal(data.getBytes());\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n    }\r\n",
                        "nextNode": "encrypted"
                    },
                    {
                        "name": "encrypted",
                        "type": "Dataflow from `data` to `encrypted`\nDataflow from `doFinal(...)` to `encrypted`\nDataflow from `getBytes(...)` to `encrypted`\nDataflow from `fullName` to `encrypted`\nDataflow from `dateOfBirth` to `encrypted`\nDataflow from `\"John Doe\"` to `encrypted`\nDataflow from `\"1980-01-01\"` to `encrypted`",
                        "context": "        cipher.init(Cipher.ENCRYPT_MODE, personalKey);\r\n        byte[] encrypted = cipher.doFinal(data.getBytes());\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n    }\r\n\r\n",
                        "nextNode": "end"
                    }
                ]
            },
            {
                "name": "response",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "postData",
                "isSensitive": "yes",
                "graph": [
                    {
                        "name": "data",
                        "type": "String",
                        "context": "        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, personalKey);\r\n        byte[] encrypted = cipher.doFinal(data.getBytes());\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n    }\r\n",
                        "nextNode": "data.getBytes()"
                    },
                    {
                        "name": "data.getBytes()",
                        "type": "byte[]",
                        "context": "        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, personalKey);\r\n        byte[] encrypted = cipher.doFinal(data.getBytes());\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n    }\r\n",
                        "nextNode": "cipher.doFinal(data.getBytes()"
                    },
                    {
                        "name": "cipher.doFinal(data.getBytes()",
                        "type": "byte[]",
                        "context": "        Cipher cipher = Cipher.getInstance(\"AES\");\r\n        cipher.init(Cipher.ENCRYPT_MODE, personalKey);\r\n        byte[] encrypted = cipher.doFinal(data.getBytes());\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n    }\r\n",
                        "nextNode": "encrypted"
                    },
                    {
                        "name": "encrypted",
                        "type": "byte[]",
                        "context": "        cipher.init(Cipher.ENCRYPT_MODE, personalKey);\r\n        byte[] encrypted = cipher.doFinal(data.getBytes());\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n    }\r\n\r\n",
                        "nextNode": "Base64.getEncoder().encodeToString(encrypted)"
                    },
                    {
                        "name": "Base64.getEncoder().encodeToString(encrypted)",
                        "type": "String",
                        "context": "        cipher.init(Cipher.ENCRYPT_MODE, personalKey);\r\n        byte[] encrypted = cipher.doFinal(data.getBytes());\r\n        return Base64.getEncoder().encodeToString(encrypted);\r\n    }\r\n\r\n",
                        "nextNode": "encrypt(dateOfBirth)"
                    },
                    {
                        "name": "encrypt(dateOfBirth)",
                        "type": "String",
                        "context": "        try {\r\n            fullName = URLEncoder.encode(encrypt(fullName), StandardCharsets.UTF_8.name());\r\n            dateOfBirth = URLEncoder.encode(encrypt(dateOfBirth), StandardCharsets.UTF_8.name());\r\n\r\n            String url = \"https://example.com/register\";\r\n",
                        "nextNode": "URLEncoder.encode(encrypt(dateOfBirth), StandardCharsets.UTF_8.name()"
                    },
                    {
                        "name": "URLEncoder.encode(encrypt(dateOfBirth), StandardCharsets.UTF_8.name()",
                        "type": "String",
                        "context": "        try {\r\n            fullName = URLEncoder.encode(encrypt(fullName), StandardCharsets.UTF_8.name());\r\n            dateOfBirth = URLEncoder.encode(encrypt(dateOfBirth), StandardCharsets.UTF_8.name());\r\n\r\n            String url = \"https://example.com/register\";\r\n",
                        "nextNode": "dateOfBirth"
                    },
                    {
                        "name": "dateOfBirth",
                        "type": "String",
                        "context": "            HttpPost httpPost = new HttpPost(url);\r\n            httpPost.setHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");\r\n            String postData = \"fullName=\" + fullName + \"&dob=\" + dateOfBirth;\r\n\r\n            httpPost.setEntity(new StringEntity(postData));\r\n",
                        "nextNode": "\"fullName=\" + fullName + \"&dob=\" + dateOfBirth"
                    },
                    {
                        "name": "\"fullName=\" + fullName + \"&dob=\" + dateOfBirth",
                        "type": "String",
                        "context": "            HttpPost httpPost = new HttpPost(url);\r\n            httpPost.setHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");\r\n            String postData = \"fullName=\" + fullName + \"&dob=\" + dateOfBirth;\r\n\r\n            httpPost.setEntity(new StringEntity(postData));\r\n",
                        "nextNode": "postData"
                    },
                    {
                        "name": "postData",
                        "type": "Dataflow from `data` to `postData`\nDataflow from `encrypted` to `postData`\nDataflow from `dateOfBirth` to `postData`\nDataflow from `fullName` to `postData`\nDataflow from `doFinal(...)` to `postData`\nDataflow from `getBytes(...)` to `postData`\nDataflow from `encodeToString(...)` to `postData`\nDataflow from `\"&dob=\"` to `postData`\nDataflow from `\"fullName=\"` to `postData`\nDataflow from `encode(...)` to `postData`\nDataflow from `name(...)` to `postData`\nDataflow from `encode(...)` to `postData`\nDataflow from `name(...)` to `postData`\nDataflow from `fullName` to `postData`\nDataflow from `dateOfBirth` to `postData`\nDataflow from `\"John Doe\"` to `postData`\nDataflow from `\"1980-01-01\"` to `postData`\nDataflow from `encrypt(...)` to `postData`\nDataflow from `encrypt(...)` to `postData`",
                        "context": "            String postData = \"fullName=\" + fullName + \"&dob=\" + dateOfBirth;\r\n\r\n            httpPost.setEntity(new StringEntity(postData));\r\n\r\n            HttpResponse response = httpClient.execute(httpPost);\r\n",
                        "nextNode": "end"
                    }
                ]
            }
        ],
        "strings": [
            {
                "name": "fullName=",
                "isSensitive": "no"
            },
            {
                "name": "Error occurred",
                "isSensitive": "no"
            },
            {
                "name": "https://example.com/register",
                "isSensitive": "no"
            },
            {
                "name": "John Doe",
                "isSensitive": "yes"
            },
            {
                "name": "application/x-www-form-urlencoded",
                "isSensitive": "no"
            },
            {
                "name": "&dob=",
                "isSensitive": "no"
            },
            {
                "name": "1980-01-01",
                "isSensitive": "yes"
            },
            {
                "name": "AES",
                "isSensitive": "yes"
            },
            {
                "name": "Content-Type",
                "isSensitive": "no"
            }
        ],
        "comments": [
            {
                "name": "AES with 128-bit key for encryption",
                "isSensitive": "yes"
            }
        ],
        "sinks": [
            {
                "name": "encode",
                "isSink": "no"
            },
            {
                "name": "init",
                "isSink": "no"
            },
            {
                "name": "sendPersonalDetails",
                "isSink": "no"
            },
            {
                "name": "encodeToString",
                "isSink": "no"
            },
            {
                "name": "execute",
                "isSink": "yes"
            },
            {
                "name": "getBytes",
                "isSink": "no"
            },
            {
                "name": "setHeader",
                "isSink": "yes"
            },
            {
                "name": "doFinal",
                "isSink": "no"
            },
            {
                "name": "setEntity",
                "isSink": "no"
            },
            {
                "name": "generateKey",
                "isSink": "no"
            },
            {
                "name": "println",
                "isSink": "yes"
            },
            {
                "name": "encrypt",
                "isSink": "no"
            },
            {
                "name": "getEncoder",
                "isSink": "no"
            },
            {
                "name": "name",
                "isSink": "no"
            },
            {
                "name": "getInstance",
                "isSink": "no"
            },
            {
                "name": "close",
                "isSink": "yes"
            },
            {
                "name": "createDefault",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "BAD_ApiKeyInComments.java",
        "variables": [
            {
                "name": "args",
                "isSensitive": "no",
                "graph": []
            }
        ],
        "strings": [],
        "comments": [
            {
                "name": "* Initializes the connection to the payment service.\r\n     * Make sure to replace the API key below with a valid one.\r\n     * API Key: ak_test_12345",
                "isSensitive": "no"
            },
            {
                "name": "Placeholder for payment service initialization",
                "isSensitive": "no"
            }
        ],
        "sinks": [
            {
                "name": "initializePaymentService",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "BAD_AuthenticationBypassComments.java",
        "variables": [
            {
                "name": "password",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "username",
                "isSensitive": "no",
                "graph": []
            }
        ],
        "strings": [],
        "comments": [
            {
                "name": "Authentication logic...",
                "isSensitive": "no"
            },
            {
                "name": "Current authentication can be bypassed using default admin account",
                "isSensitive": "yes"
            },
            {
                "name": "Username: admin, Password: admin123 (This is only for testing!)",
                "isSensitive": "no"
            }
        ],
        "sinks": []
    },
    {
        "fileName": "BAD_DatabaseSchemaDetails.java",
        "variables": [],
        "strings": [],
        "comments": [
            {
                "name": "Database schema for user table:",
                "isSensitive": "no"
            },
            {
                "name": "Make sure to change the passwords frequently and not to use default 'admin'",
                "isSensitive": "yes"
            },
            {
                "name": "CREATE TABLE users (id INT, username VARCHAR, password VARCHAR)",
                "isSensitive": "yes"
            },
            {
                "name": "Database setup code...",
                "isSensitive": "no"
            }
        ],
        "sinks": []
    },
    {
        "fileName": "BAD_EncryptionDetailsComments.java",
        "variables": [],
        "strings": [],
        "comments": [
            {
                "name": "Seed \"fixedSeedValue\" ensures key consistency during development",
                "isSensitive": "no"
            },
            {
                "name": "Key generation logic",
                "isSensitive": "no"
            },
            {
                "name": "Keys are generated using a seeded random number generator:",
                "isSensitive": "no"
            }
        ],
        "sinks": []
    },
    {
        "fileName": "BAD_EncryptionKeyInComments.java",
        "variables": [
            {
                "name": "args",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "userData",
                "isSensitive": "yes",
                "graph": []
            }
        ],
        "strings": [
            {
                "name": "Sensitive user data",
                "isSensitive": "no"
            }
        ],
        "comments": [
            {
                "name": "* Encryption service for sensitive user data.\r\n     * NOTE: Encryption key for development - AESKey123456789 (Replace before production)",
                "isSensitive": "no"
            },
            {
                "name": "Placeholder for encryption logic using the mentioned key",
                "isSensitive": "no"
            }
        ],
        "sinks": [
            {
                "name": "encryptUserData",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "BAD_HardcodedCredentialsInComments.java",
        "variables": [
            {
                "name": "args",
                "isSensitive": "no",
                "graph": []
            }
        ],
        "strings": [],
        "comments": [
            {
                "name": "* Connection to the database\r\n     * TODO: Remove before production\r\n     * Username: admin\r\n     * Password: admin12345\r\n     * URL: jdbc:mysql://localhost:3306/production",
                "isSensitive": "no"
            },
            {
                "name": "Placeholder method for database connection",
                "isSensitive": "no"
            }
        ],
        "sinks": [
            {
                "name": "connectToDatabase",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "BAD_NetworkConfigurationComments.java",
        "variables": [],
        "strings": [],
        "comments": [
            {
                "name": "The server IP address is statically set to 192.168.1.100, which is not routed externally",
                "isSensitive": "no"
            },
            {
                "name": "This method configures internal network settings:",
                "isSensitive": "no"
            },
            {
                "name": "Subnet mask: 255.255.255.0, Gateway: 192.168.1.1",
                "isSensitive": "no"
            },
            {
                "name": "Network configuration logic",
                "isSensitive": "no"
            }
        ],
        "sinks": []
    },
    {
        "fileName": "BAD_RecoveryKeyComments.java",
        "variables": [],
        "strings": [],
        "comments": [
            {
                "name": "Recovery keys for the encryption system:",
                "isSensitive": "no"
            },
            {
                "name": "Note: Only use in emergencies!",
                "isSensitive": "no"
            },
            {
                "name": "Recovery process logic",
                "isSensitive": "no"
            },
            {
                "name": "Use \"12345-ABCDE-67890-FGHIJ\" for administrative access recovery",
                "isSensitive": "no"
            }
        ],
        "sinks": []
    },
    {
        "fileName": "BAD_SecurityCheckBypassComments.java",
        "variables": [],
        "strings": [],
        "comments": [
            {
                "name": "To bypass the security check during development, use the secret key \"devBypassKey#2023\"",
                "isSensitive": "no"
            },
            {
                "name": "Security check logic",
                "isSensitive": "no"
            },
            {
                "name": "This should be removed before going to production!",
                "isSensitive": "no"
            }
        ],
        "sinks": []
    },
    {
        "fileName": "BAD_TestingCredentialsComments.java",
        "variables": [],
        "strings": [],
        "comments": [
            {
                "name": "Testing account login: testUser | password: Test@1234",
                "isSensitive": "yes"
            },
            {
                "name": "Testing logic",
                "isSensitive": "no"
            },
            {
                "name": "Ensure to change these defaults before deploying.",
                "isSensitive": "no"
            },
            {
                "name": "Use the following credentials for testing the application:",
                "isSensitive": "no"
            }
        ],
        "sinks": []
    },
    {
        "fileName": "GOOD_ConfigurationLoadingComments.java",
        "variables": [],
        "strings": [],
        "comments": [
            {
                "name": "Loads configuration from secure, encrypted storage. Access is restricted to authorized service accounts only.",
                "isSensitive": "no"
            },
            {
                "name": "Configuration loading logic goes here.",
                "isSensitive": "no"
            }
        ],
        "sinks": []
    },
    {
        "fileName": "GOOD_FileProcessingComments.java",
        "variables": [
            {
                "name": "sessionID",
                "isSensitive": "yes",
                "graph": []
            }
        ],
        "strings": [],
        "comments": [
            {
                "name": "Processes files securely. File paths and names are derived from user sessions and not directly exposed.",
                "isSensitive": "no"
            },
            {
                "name": "File processing logic based on securely retrieved session information.",
                "isSensitive": "no"
            }
        ],
        "sinks": []
    },
    {
        "fileName": "GOOD_InfrastructureSetupComments.java",
        "variables": [],
        "strings": [],
        "comments": [
            {
                "name": "Server configuration logic using environment-specific settings.",
                "isSensitive": "no"
            },
            {
                "name": "Configures connections to servers as defined in the environment configuration.",
                "isSensitive": "no"
            }
        ],
        "sinks": []
    },
    {
        "fileName": "GOOD_ProjectDetailsComments.java",
        "variables": [],
        "strings": [],
        "comments": [
            {
                "name": "Part of the analytics enhancement initiative. For more details, see the project documentation repository.",
                "isSensitive": "no"
            },
            {
                "name": "Code to process analytics data.",
                "isSensitive": "no"
            }
        ],
        "sinks": []
    },
    {
        "fileName": "GOOD_RecoveryProcessComments.java",
        "variables": [],
        "strings": [],
        "comments": [
            {
                "name": "This method handles the recovery process. For access details, refer to the secure vault.",
                "isSensitive": "no"
            },
            {
                "name": "Implementation of recovery logic without exposing any keys or methods.",
                "isSensitive": "no"
            }
        ],
        "sinks": []
    },
    {
        "fileName": "GOOD_SecureCommentPractices.java",
        "variables": [
            {
                "name": "args",
                "isSensitive": "no",
                "graph": []
            }
        ],
        "strings": [],
        "comments": [
            {
                "name": "Implementation of secure database connection",
                "isSensitive": "no"
            },
            {
                "name": "Secure initialization code for payment service",
                "isSensitive": "no"
            },
            {
                "name": "* Initializes the connection to external services securely.\r\n     * API keys and other sensitive details are not hardcoded but fetched securely at runtime.",
                "isSensitive": "no"
            },
            {
                "name": "* Securely connects to the database. Credentials are stored securely and\r\n     * are accessed via environment variables or a secure secrets management service.",
                "isSensitive": "no"
            }
        ],
        "sinks": [
            {
                "name": "connectToDatabase",
                "isSink": "no"
            },
            {
                "name": "initializePaymentService",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "GOOD_SecureInputHandlingComments.java",
        "variables": [
            {
                "name": "inputData",
                "isSensitive": "yes",
                "graph": []
            }
        ],
        "strings": [],
        "comments": [
            {
                "name": "Implement input sanitization before processing the submission.",
                "isSensitive": "no"
            },
            {
                "name": "Ensures all input data is sanitized to prevent SQL injection.",
                "isSensitive": "no"
            }
        ],
        "sinks": []
    },
    {
        "fileName": "GOOD_SecureKeyManagement.java",
        "variables": [
            {
                "name": "args",
                "isSensitive": "no",
                "graph": []
            },
            {
                "name": "userData",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "encryptionKey",
                "isSensitive": "yes",
                "graph": []
            }
        ],
        "strings": [
            {
                "name": "user_data_2024-07-25",
                "isSensitive": "no"
            },
            {
                "name": "ENCRYPTION_KEY",
                "isSensitive": "no"
            }
        ],
        "comments": [
            {
                "name": "Securely fetch the encryption key from a secrets management service or environment variable",
                "isSensitive": "no"
            },
            {
                "name": "Implementation of encryption logic with the key",
                "isSensitive": "no"
            },
            {
                "name": "* Utilizes encryption for securing user data. Encryption keys are securely fetched\r\n     * from a secrets management service at runtime, ensuring no sensitive data is exposed in source code or comments.",
                "isSensitive": "no"
            }
        ],
        "sinks": [
            {
                "name": "fetchEncryptionKey",
                "isSink": "no"
            },
            {
                "name": "encryptUserData",
                "isSink": "no"
            },
            {
                "name": "getenv",
                "isSink": "no"
            }
        ]
    },
    {
        "fileName": "GOOD_TemporaryFixComments.java",
        "variables": [],
        "strings": [],
        "comments": [
            {
                "name": "Implements a temporary fix; for more details and final solution timeline, please refer to issue tracker #12345.",
                "isSensitive": "no"
            },
            {
                "name": "Temporary client validation logic implemented.",
                "isSensitive": "no"
            }
        ],
        "sinks": []
    },
    {
        "fileName": "GOOD_UserAuthenticationComments.java",
        "variables": [
            {
                "name": "password",
                "isSensitive": "yes",
                "graph": []
            },
            {
                "name": "username",
                "isSensitive": "yes",
                "graph": []
            }
        ],
        "strings": [],
        "comments": [
            {
                "name": "Authentication logic would be implemented here.",
                "isSensitive": "no"
            },
            {
                "name": "Authenticates users. Ensure to review our secure coding practices guidelines in the internal wiki.",
                "isSensitive": "no"
            }
        ],
        "sinks": []
    }
]